char *w_mask_420_c_0(char *result, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6, uint8x8_t *a7, unsigned int a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  unint64_t v16;
  char *v17;
  uint32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  unint64_t v42;
  char *v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  int8x16_t *v57;
  const __int16 *v58;
  const __int16 *v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint8x8_t *v90;
  const __int16 *v91;
  const __int16 *v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  uint32x4_t v115;
  int32x4_t v116;
  uint64_t v117;
  uint64_t v118;
  const __int16 *v119;
  const __int16 *v120;
  uint16x8_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  char *v131;
  _BYTE *v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  signed int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  signed int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  const __int16 *v146;
  const __int16 *v147;
  uint16x8_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  char *v159;
  _BYTE *v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  signed int v165;
  char v166;
  int v167;
  int v168;
  int v169;
  int v170;
  signed int v171;
  int v172;
  unint64_t v173;
  int32x4_t v174;
  int16x8x2_t v175;
  int16x8x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int16x8x2_t v179;
  int16x8x2_t v180;
  int16x8x2_t v181;
  int8x16x2_t v182;
  int16x8x2_t v183;
  int16x8x2_t v184;
  int8x16x2_t v185;
  int8x16x2_t v186;
  int8x16x4_t v187;
  int8x16x4_t v188;
  int8x16x4_t v189;
  int8x16x4_t v190;
  int8x16x4_t v191;
  int8x16x4_t v192;

  if (a5 >= 1)
  {
    v8 = 0;
    v9 = a5 - 1;
    v10 = v9 >> 1;
    v11 = (v9 & 0xFFFFFFFFFFFFFFFELL) + 2;
    v12 = (v9 >> 1) + 1;
    v13 = 4 * v10 + 4;
    v14 = 2 * a5;
    v15 = vdupq_n_s32(a8);
    v173 = v12 & 0xFFFFFFFFFFFFFFF0;
    v16 = v12 & 0xFFFFFFFFFFFFFFF8;
    v17 = &result[v11];
    v18.i64[0] = 0x800000008;
    v18.i64[1] = 0x800000008;
    v19.i64[0] = 0x1A0000001ALL;
    v19.i64[1] = 0x1A0000001ALL;
    v20.i64[0] = 0x2600000026;
    v20.i64[1] = 0x2600000026;
    v21.i64[0] = 0x20000000200;
    v21.i64[1] = 0x20000000200;
    v22.i64[0] = 0xFF000000FFLL;
    v22.i64[1] = 0xFF000000FFLL;
    v174 = v15;
    v23.i64[0] = 0x2800000028;
    v23.i64[1] = 0x2800000028;
    v24 = a4;
    v25 = a3;
    while (1)
    {
      v27 = (unint64_t)&v17[v8 * a2];
      v28 = v13 + v14 * v8;
      v29 = a3 + v28;
      v30 = a4 + v28;
      v31 = 0;
      if ((a6 & 1) == 0)
        break;
      if (a5 < 0xF)
        goto LABEL_89;
      v43 = (char *)a7 + v12;
      v44 = (unint64_t)result >= v29 || v25 >= v27;
      v45 = !v44;
      v46 = (unint64_t)result >= v30 || v24 >= v27;
      v47 = !v46;
      v48 = (unint64_t)a7 >= v29 || v25 >= (unint64_t)v43;
      v49 = !v48;
      v50 = (unint64_t)a7 >= v30 || v24 >= (unint64_t)v43;
      v51 = !v50;
      v52 = (unint64_t)a7 >= v27 || result >= v43;
      if (!v52 || v45 || v47 || v49 || v51)
      {
LABEL_89:
        v132 = (char *)a7 + (v31 >> 1);
        v133 = 2 * v31 + 2;
        do
        {
          v134 = *(__int16 *)(v25 + v133 - 2);
          v135 = *(__int16 *)(v24 + v133 - 2);
          v136 = v134 - v135;
          if (v134 - v135 < 0)
            v136 = v135 - v134;
          v137 = (v136 + 8) >> 8;
          if (v137 >= 26)
            v137 = 26;
          v138 = ((v137 + 38) * v134 + (26 - v137) * v135 + 512) >> 10;
          if (v138 >= 255)
            v138 = 255;
          result[v31] = v138 & ~(v138 >> 31);
          v139 = *(__int16 *)(v25 + v133);
          v140 = *(__int16 *)(v24 + v133);
          v141 = v139 - v140;
          if (v139 - v140 < 0)
            v141 = v140 - v139;
          v142 = (v141 + 8) >> 8;
          if (v142 >= 26)
            v142 = 26;
          v143 = ((v142 + 38) * v139 + (26 - v142) * v140 + 512) >> 10;
          if (v143 >= 255)
            v143 = 255;
          result[v31 + 1] = v143 & ~(v143 >> 31);
          *v132 = (v137 - a8 + *v132 + v142 + 38 + 40) >> 2;
          ++v132;
          v31 += 2;
          v133 += 4;
        }
        while ((uint64_t)v31 < a5);
        v26 = a5 >> 1;
        goto LABEL_4;
      }
      if (a5 >= 0x1F)
      {
        v87 = 0;
        v88 = v12 & 0xFFFFFFFFFFFFFFF0;
        v89 = result;
        v90 = a7;
        do
        {
          v91 = (const __int16 *)(v25 + v87);
          *(int16x8x2_t *)v190.val[2].i8 = vld2q_s16(v91);
          v91 += 16;
          v92 = (const __int16 *)(v24 + v87);
          v184 = vld2q_s16(v91);
          *(int16x8x2_t *)v192.val[0].i8 = vld2q_s16(v92);
          v92 += 16;
          *(int16x8x2_t *)v192.val[2].i8 = vld2q_s16(v92);
          v93.i64[0] = 0x800000008;
          v93.i64[1] = 0x800000008;
          v94.i64[0] = 0x800000008;
          v94.i64[1] = 0x800000008;
          v95.i64[0] = 0x800000008;
          v95.i64[1] = 0x800000008;
          v96.i64[0] = 0x800000008;
          v96.i64[1] = 0x800000008;
          v97 = (int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v95, v184.val[0], (int16x8_t)v192.val[2]), 8uLL);
          v98 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v93, *(int16x4_t *)v184.val[0].i8, *(int16x4_t *)v192.val[2].i8), 8uLL), v19);
          v99 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v94, *(int16x4_t *)v190.val[2].i8, *(int16x4_t *)v192.val[0].i8), 8uLL), v19);
          v100 = vminq_s32(v97, v19);
          v101 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v96, (int16x8_t)v190.val[2], (int16x8_t)v192.val[0]), 8uLL), v19);
          v102 = vmlaq_s32(vmulq_s32(vaddq_s32(v101, v20), vmovl_high_s16((int16x8_t)v190.val[2])), vsubq_s32(v19, v101), vmovl_high_s16((int16x8_t)v192.val[0]));
          v103 = vmlaq_s32(vmulq_s32(vaddq_s32(v100, v20), vmovl_high_s16(v184.val[0])), vsubq_s32(v19, v100), vmovl_high_s16((int16x8_t)v192.val[2]));
          v104 = vmlaq_s32(vmulq_s32(vaddq_s32(v99, v20), vmovl_s16(*(int16x4_t *)v190.val[2].i8)), vsubq_s32(v19, v99), vmovl_s16(*(int16x4_t *)v192.val[0].i8));
          v105 = vmlaq_s32(vmulq_s32(vaddq_s32(v98, v20), vmovl_s16(*(int16x4_t *)v184.val[0].i8)), vsubq_s32(v19, v98), vmovl_s16(*(int16x4_t *)v192.val[2].i8));
          v106.i64[0] = 0x800000008;
          v106.i64[1] = 0x800000008;
          v107.i64[0] = 0x800000008;
          v107.i64[1] = 0x800000008;
          v108 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v107, (int16x8_t)v190.val[3], (int16x8_t)v192.val[1]), 8uLL), v19);
          v109 = vaddq_s32(v108, v20);
          v110 = vmlaq_s32(vmulq_s32(v109, vmovl_high_s16((int16x8_t)v190.val[3])), vsubq_s32(v19, v108), vmovl_high_s16((int16x8_t)v192.val[1]));
          v111 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v106, v184.val[1], (int16x8_t)v192.val[3]), 8uLL), v19);
          v112 = vaddq_s32(v111, v20);
          v113 = vmlaq_s32(vmulq_s32(v112, vmovl_high_s16(v184.val[1])), vsubq_s32(v19, v111), vmovl_high_s16((int16x8_t)v192.val[3]));
          v114.i64[0] = 0x800000008;
          v114.i64[1] = 0x800000008;
          v115 = (uint32x4_t)vabal_s16(v114, *(int16x4_t *)v190.val[3].i8, *(int16x4_t *)v192.val[1].i8);
          v190.val[2] = (int8x16_t)vmovl_s16(*(int16x4_t *)v190.val[3].i8);
          v190.val[3].i64[0] = 0x800000008;
          v190.val[3].i64[1] = 0x800000008;
          v184.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v184.val[1].i8);
          v192.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vaddq_s32(v102, v21), 0xAuLL), v22);
          v192.val[2] = (int8x16_t)vmovl_s16(*(int16x4_t *)v192.val[3].i8);
          v190.val[3] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16((int32x4_t)v190.val[3], *(int16x4_t *)v184.val[1].i8, *(int16x4_t *)v192.val[3].i8), 8uLL), v19);
          v192.val[3] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(v115, 8uLL), v19);
          v116 = vaddq_s32((int32x4_t)v192.val[3], v20);
          v190.val[2] = (int8x16_t)vmlaq_s32(vmulq_s32(v116, (int32x4_t)v190.val[2]), vsubq_s32(v19, (int32x4_t)v192.val[3]), vmovl_s16(*(int16x4_t *)v192.val[1].i8));
          v184.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v190.val[3], v20);
          v188.val[1] = (int8x16_t)vmaxq_s32((int32x4_t)v192.val[0], (int32x4_t)0);
          v188.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v103, v21), 0xAuLL), v22), (int32x4_t)0);
          v188.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v104, v21), 0xAuLL), v22), (int32x4_t)0);
          v188.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v105, v21), 0xAuLL), v22), (int32x4_t)0);
          v188.val[0] = vqtbl4q_s8(v188, (int8x16_t)xmmword_19689A980);
          v192.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v110, v21), 0xAuLL), v22), (int32x4_t)0);
          v192.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v113, v21), 0xAuLL), v22), (int32x4_t)0);
          v192.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)v190.val[2], v21), 0xAuLL), v22), (int32x4_t)0);
          v192.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v184.val[1], (int32x4_t)v184.val[0]), vsubq_s32(v19, (int32x4_t)v190.val[3]), (int32x4_t)v192.val[2]), v21), 0xAuLL), v22), (int32x4_t)0);
          v188.val[1] = vqtbl4q_s8(v192, (int8x16_t)xmmword_19689A980);
          v23.i64[0] = 0x2800000028;
          v23.i64[1] = 0x2800000028;
          v15 = v174;
          vst2q_s8(v89, *(int8x16x2_t *)v188.val[0].i8);
          v89 += 32;
          v188.val[3] = (int8x16_t)vmovl_u8(*v90);
          v188.val[0] = (int8x16_t)vmovl_high_u8(*(uint8x16_t *)v90->i8);
          v190.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v100, v174), (uint16x8_t)v188.val[0]), vaddq_s32(v112, v23)), 2uLL);
          v190.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v98, v174), *(uint16x4_t *)v188.val[0].i8), vaddq_s32((int32x4_t)v184.val[1], v23)), 2uLL);
          v190.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v101, v174), (uint16x8_t)v188.val[3]), vaddq_s32(v109, v23)), 2uLL);
          v190.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v99, v174), *(uint16x4_t *)v188.val[3].i8), vaddq_s32(v116, v23)), 2uLL);
          *(int8x16_t *)v90->i8 = vqtbl4q_s8(v190, (int8x16_t)xmmword_19689A980);
          v90 += 2;
          v87 += 64;
          v88 -= 16;
        }
        while (v88);
        v26 = a5 >> 1;
        v18.i64[0] = 0x800000008;
        v18.i64[1] = 0x800000008;
        if (v12 == v173)
          goto LABEL_4;
        v53 = v12 & 0xFFFFFFFFFFFFFFF0;
        v31 = 2 * (v12 & 0xFFFFFFFFFFFFFFF0);
        if ((v12 & 8) == 0)
          goto LABEL_89;
      }
      else
      {
        v53 = 0;
      }
      v117 = 4 * v53;
      v118 = 2 * v53;
      do
      {
        v119 = (const __int16 *)(v25 + v117);
        v175 = vld2q_s16(v119);
        v120 = (const __int16 *)(v24 + v117);
        v180 = vld2q_s16(v120);
        v121 = (uint16x8_t)vabdq_s16(v175.val[0], v180.val[0]);
        v122 = (int32x4_t)vshrq_n_u32(vaddw_high_u16(v18, v121), 8uLL);
        v123 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v18, *(uint16x4_t *)v121.i8), 8uLL), v19);
        v124 = vminq_s32(v122, v19);
        v125 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v124, v20), vmovl_high_s16(v175.val[0])), vsubq_s32(v19, v124), vmovl_high_s16(v180.val[0])), v21), 0xAuLL);
        v126 = vmovl_high_s16(v175.val[1]);
        v127 = vmovl_s16(*(int16x4_t *)v175.val[1].i8);
        v128 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vaddq_s32(v123, v20), vmovl_s16(*(int16x4_t *)v175.val[0].i8)), vsubq_s32(v19, v123), vmovl_s16(*(int16x4_t *)v180.val[0].i8)), v21), 0xAuLL), v22);
        v175.val[0] = vabdq_s16(v175.val[1], v180.val[1]);
        v175.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v18, *(uint16x4_t *)v175.val[0].i8), 8uLL), v19);
        v175.val[0] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v18, (uint16x8_t)v175.val[0]), 8uLL), v19);
        v180.val[0] = (int16x8_t)vaddq_s32((int32x4_t)v175.val[0], v20);
        v185.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v125, v22), (int32x4_t)0);
        v129 = vaddq_s32((int32x4_t)v175.val[1], v20);
        v185.val[0] = (int8x16_t)vmaxq_s32(v128, (int32x4_t)0);
        v130 = vmlaq_s32(vmulq_s32((int32x4_t)v180.val[0], v126), vsubq_s32(v19, (int32x4_t)v175.val[0]), vmovl_high_s16(v180.val[1]));
        v175.val[0] = (int16x8_t)vaddq_s32(vmlaq_s32(vmulq_s32(v129, v127), vsubq_s32(v19, (int32x4_t)v175.val[1]), vmovl_s16(*(int16x4_t *)v180.val[1].i8)), v21);
        v180.val[1].i64[0] = vqtbl2q_s8(v185, (int8x16_t)xmmword_19689A990).u64[0];
        v182.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v130, v21), 0xAuLL), v22), (int32x4_t)0);
        v182.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32((int32x4_t)v175.val[0], 0xAuLL), v22), (int32x4_t)0);
        v130.i64[0] = vqtbl2q_s8(v182, (int8x16_t)xmmword_19689A990).u64[0];
        v131 = &result[v118];
        vst2_s8(v131, (int8x8x2_t)v180.val[1]);
        v175.val[0] = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)a7 + (v53 & 0x7FFFFFFFFFFFFFF8)));
        v177.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v124, v15), (uint16x8_t)v175.val[0]), vaddq_s32((int32x4_t)v180.val[0], v23)), 2uLL);
        v177.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16((uint32x4_t)vsubq_s32(v123, v15), *(uint16x4_t *)v175.val[0].i8), vaddq_s32(v129, v23)), 2uLL);
        *(uint8x8_t *)((char *)a7 + (v53 & 0x7FFFFFFFFFFFFFF8)) = (uint8x8_t)vqtbl2q_s8(v177, (int8x16_t)xmmword_19689A990).u64[0];
        v53 += 8;
        v117 += 32;
        v118 += 16;
      }
      while (v16 != v53);
      v31 = 2 * (v12 & 0xFFFFFFFFFFFFFFF8);
      v26 = a5 >> 1;
      if (v12 != v16)
        goto LABEL_89;
LABEL_4:
      v25 += v14;
      v24 += v14;
      result += a2;
      a7 = (uint8x8_t *)((char *)a7 + v26);
      ++v8;
      if (!--a6)
        return result;
    }
    if (a5 < 0xF)
      goto LABEL_108;
    v32 = (char *)a7 + v12;
    v33 = (unint64_t)result >= v29 || v25 >= v27;
    v34 = !v33;
    v35 = (unint64_t)result >= v30 || v24 >= v27;
    v36 = !v35;
    v37 = (unint64_t)a7 >= v29 || v25 >= (unint64_t)v32;
    v38 = !v37;
    v39 = (unint64_t)a7 >= v30 || v24 >= (unint64_t)v32;
    v40 = !v39;
    v41 = (unint64_t)a7 >= v27 || result >= v32;
    if (!v41 || v34 || v36 || v38 || v40)
      goto LABEL_108;
    if (a5 >= 0x1F)
    {
      v54 = 0;
      v55 = v12 & 0xFFFFFFFFFFFFFFF0;
      v56 = result;
      v57 = (int8x16_t *)a7;
      do
      {
        v58 = (const __int16 *)(v25 + v54);
        v181 = vld2q_s16(v58);
        v58 += 16;
        v183 = vld2q_s16(v58);
        v59 = (const __int16 *)(v24 + v54);
        *(int16x8x2_t *)v191.val[0].i8 = vld2q_s16(v59);
        v59 += 16;
        *(int16x8x2_t *)v191.val[2].i8 = vld2q_s16(v59);
        v60.i64[0] = 0x800000008;
        v60.i64[1] = 0x800000008;
        v61.i64[0] = 0x800000008;
        v61.i64[1] = 0x800000008;
        v62.i64[0] = 0x800000008;
        v62.i64[1] = 0x800000008;
        v63.i64[0] = 0x800000008;
        v63.i64[1] = 0x800000008;
        v64 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v60, *(int16x4_t *)v183.val[0].i8, *(int16x4_t *)v191.val[2].i8), 8uLL), v19);
        v65 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_s16(v61, *(int16x4_t *)v181.val[0].i8, *(int16x4_t *)v191.val[0].i8), 8uLL), v19);
        v66 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v62, v183.val[0], (int16x8_t)v191.val[2]), 8uLL), v19);
        v67 = vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vabal_high_s16(v63, v181.val[0], (int16x8_t)v191.val[0]), 8uLL), v19);
        v68 = vaddq_s32(v67, v20);
        v69 = vaddq_s32(v66, v20);
        v70 = vaddq_s32(v65, v20);
        v71 = vaddq_s32(v64, v20);
        v72 = vsubq_s32(v19, v64);
        v73 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v70, vmovl_s16(*(int16x4_t *)v181.val[0].i8)), vsubq_s32(v19, v65), vmovl_s16(*(int16x4_t *)v191.val[0].i8)), v21), 0xAuLL), v22);
        v74 = vmlaq_s32(vmulq_s32(v69, vmovl_high_s16(v183.val[0])), vsubq_s32(v19, v66), vmovl_high_s16((int16x8_t)v191.val[2]));
        v189.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v68, vmovl_high_s16(v181.val[0])), vsubq_s32(v19, v67), vmovl_high_s16((int16x8_t)v191.val[0])), v21), 0xAuLL), v22), (int32x4_t)0);
        v75 = vmovl_high_s16(v181.val[1]);
        v76 = vmovl_high_s16(v183.val[1]);
        v77 = vmovl_s16(*(int16x4_t *)v181.val[1].i8);
        v78 = vmlaq_s32(vmulq_s32(v71, vmovl_s16(*(int16x4_t *)v183.val[0].i8)), v72, vmovl_s16(*(int16x4_t *)v191.val[2].i8));
        v79 = vmovl_s16(*(int16x4_t *)v183.val[1].i8);
        v67.i64[0] = 0x800000008;
        v67.i64[1] = 0x800000008;
        v80 = (uint32x4_t)vabal_s16(v67, *(int16x4_t *)v183.val[1].i8, *(int16x4_t *)v191.val[3].i8);
        v72.i64[0] = 0x800000008;
        v72.i64[1] = 0x800000008;
        v81 = (uint32x4_t)vabal_high_s16(v72, v183.val[1], (int16x8_t)v191.val[3]);
        v183.val[0].i64[0] = 0x800000008;
        v183.val[0].i64[1] = 0x800000008;
        v183.val[0] = (int16x8_t)vabal_s16((int32x4_t)v183.val[0], *(int16x4_t *)v181.val[1].i8, *(int16x4_t *)v191.val[1].i8);
        v183.val[1].i64[0] = 0x800000008;
        v183.val[1].i64[1] = 0x800000008;
        v183.val[1] = (int16x8_t)vabal_high_s16((int32x4_t)v183.val[1], v181.val[1], (int16x8_t)v191.val[1]);
        v181.val[0] = (int16x8_t)vmovl_high_s16((int16x8_t)v191.val[1]);
        v181.val[1] = (int16x8_t)vmovl_high_s16((int16x8_t)v191.val[3]);
        v191.val[0] = (int8x16_t)vmovl_s16(*(int16x4_t *)v191.val[1].i8);
        v191.val[1] = (int8x16_t)vmovl_s16(*(int16x4_t *)v191.val[3].i8);
        v191.val[3] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(v80, 8uLL), v19);
        v183.val[0] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v183.val[0], 8uLL), v19);
        v191.val[2] = (int8x16_t)vminq_s32((int32x4_t)vshrq_n_u32(v81, 8uLL), v19);
        v183.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v183.val[1], 8uLL), v19);
        v82 = vaddq_s32((int32x4_t)v183.val[1], v20);
        v83 = vaddq_s32((int32x4_t)v191.val[2], v20);
        v84 = vmlaq_s32(vmulq_s32(v82, v75), vsubq_s32(v19, (int32x4_t)v183.val[1]), (int32x4_t)v181.val[0]);
        v181.val[0] = (int16x8_t)vaddq_s32((int32x4_t)v183.val[0], v20);
        v183.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v191.val[3], v20);
        v85 = vmlaq_s32(vmulq_s32(v83, v76), vsubq_s32(v19, (int32x4_t)v191.val[2]), (int32x4_t)v181.val[1]);
        v189.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v74, v21), 0xAuLL), v22), (int32x4_t)0);
        v86 = vmlaq_s32(vmulq_s32((int32x4_t)v183.val[1], v79), vsubq_s32(v19, (int32x4_t)v191.val[3]), (int32x4_t)v191.val[1]);
        v189.val[0] = (int8x16_t)vmaxq_s32(v73, (int32x4_t)0);
        v189.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v78, v21), 0xAuLL), v22), (int32x4_t)0);
        v191.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v84, v21), 0xAuLL), v22), (int32x4_t)0);
        v181.val[1] = (int16x8_t)vqtbl4q_s8(v189, (int8x16_t)xmmword_19689A980);
        v191.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v85, v21), 0xAuLL), v22), (int32x4_t)0);
        v191.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v181.val[0], v77), vsubq_s32(v19, (int32x4_t)v183.val[0]), (int32x4_t)v191.val[0]), v21), 0xAuLL), v22), (int32x4_t)0);
        v191.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v86, v21), 0xAuLL), v22), (int32x4_t)0);
        v187.val[1] = (int8x16_t)vaddq_s32(v82, v68);
        v187.val[3] = (int8x16_t)vaddq_s32(v83, v69);
        v183.val[0] = (int16x8_t)vqtbl4q_s8(v191, (int8x16_t)xmmword_19689A980);
        v187.val[0] = (int8x16_t)vaddq_s32((int32x4_t)v181.val[0], v70);
        vst2q_s8(v56, *(int8x16x2_t *)((char *)&v181 + 16));
        v56 += 32;
        v187.val[2] = (int8x16_t)vaddq_s32((int32x4_t)v183.val[1], v71);
        *v57++ = vqtbl4q_s8(v187, (int8x16_t)xmmword_19689A980);
        v54 += 64;
        v55 -= 16;
      }
      while (v55);
      v42 = v12 & 0xFFFFFFFFFFFFFFF0;
      if (v12 == v173)
      {
        v26 = 0;
        v15 = v174;
        v23.i64[0] = 0x2800000028;
        v23.i64[1] = 0x2800000028;
        goto LABEL_4;
      }
      v31 = 2 * (v12 & 0xFFFFFFFFFFFFFFF0);
      v15 = v174;
      v23.i64[0] = 0x2800000028;
      v23.i64[1] = 0x2800000028;
      if ((v12 & 8) == 0)
        goto LABEL_108;
    }
    else
    {
      v42 = 0;
    }
    v144 = 4 * v42;
    v145 = 2 * v42;
    do
    {
      v146 = (const __int16 *)(v25 + v144);
      v176 = vld2q_s16(v146);
      v147 = (const __int16 *)(v24 + v144);
      v179 = vld2q_s16(v147);
      v148 = (uint16x8_t)vabdq_s16(v176.val[0], v179.val[0]);
      v149 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v18, *(uint16x4_t *)v148.i8), 8uLL), v19);
      v150 = vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v18, v148), 8uLL), v19);
      v151 = vaddq_s32(v150, v20);
      v152 = vaddq_s32(v149, v20);
      v153 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v151, vmovl_high_s16(v176.val[0])), vsubq_s32(v19, v150), vmovl_high_s16(v179.val[0])), v21), 0xAuLL);
      v154 = vmovl_high_s16(v176.val[1]);
      v155 = vmovl_s16(*(int16x4_t *)v176.val[1].i8);
      v156 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v152, vmovl_s16(*(int16x4_t *)v176.val[0].i8)), vsubq_s32(v19, v149), vmovl_s16(*(int16x4_t *)v179.val[0].i8)), v21), 0xAuLL), v22);
      v157 = vmovl_s16(*(int16x4_t *)v179.val[1].i8);
      v176.val[0] = vabdq_s16(v176.val[1], v179.val[1]);
      v176.val[1] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_u16(v18, *(uint16x4_t *)v176.val[0].i8), 8uLL), v19);
      v176.val[0] = (int16x8_t)vminq_s32((int32x4_t)vshrq_n_u32(vaddw_high_u16(v18, (uint16x8_t)v176.val[0]), 8uLL), v19);
      v179.val[0] = (int16x8_t)vaddq_s32((int32x4_t)v176.val[0], v20);
      v186.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v153, v22), (int32x4_t)0);
      v179.val[1] = (int16x8_t)vmlaq_s32(vmulq_s32((int32x4_t)v179.val[0], v154), vsubq_s32(v19, (int32x4_t)v176.val[0]), vmovl_high_s16(v179.val[1]));
      v176.val[0] = (int16x8_t)vaddq_s32((int32x4_t)v176.val[1], v20);
      v186.val[0] = (int8x16_t)vmaxq_s32(v156, (int32x4_t)0);
      v158 = vshrq_n_s32(vaddq_s32((int32x4_t)v179.val[1], v21), 0xAuLL);
      v179.val[1].i64[0] = vqtbl2q_s8(v186, (int8x16_t)xmmword_19689A990).u64[0];
      v178.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(v158, v22), (int32x4_t)0);
      v178.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v176.val[0], v155), vsubq_s32(v19, (int32x4_t)v176.val[1]), v157), v21), 0xAuLL), v22), (int32x4_t)0);
      v159 = &result[v145];
      v154.i64[0] = vqtbl2q_s8(v178, (int8x16_t)xmmword_19689A990).u64[0];
      v178.val[0] = (int8x16_t)vaddq_s32((int32x4_t)v179.val[0], v151);
      v176.val[1] = (int16x8_t)vaddq_s32((int32x4_t)v176.val[0], v152);
      vst2_s8(v159, (int8x8x2_t)v179.val[1]);
      *(uint8x8_t *)((char *)a7 + (v42 & 0x7FFFFFFFFFFFFFF8)) = (uint8x8_t)vqtbl2q_s8(*(int8x16x2_t *)((char *)&v176 + 16), (int8x16_t)xmmword_19689A990).u64[0];
      v42 += 8;
      v144 += 32;
      v145 += 16;
    }
    while (v16 != v42);
    v31 = 2 * (v12 & 0xFFFFFFFFFFFFFFF8);
    if (v12 == v16)
    {
LABEL_3:
      v26 = 0;
      goto LABEL_4;
    }
LABEL_108:
    v160 = (char *)a7 + (v31 >> 1);
    v161 = 2 * v31 + 2;
    do
    {
      v162 = *(__int16 *)(v25 + v161 - 2);
      v163 = *(__int16 *)(v24 + v161 - 2);
      v164 = v162 - v163;
      if (v162 - v163 < 0)
        v164 = v163 - v162;
      v165 = (v164 + 8) >> 8;
      if (v165 >= 26)
        v165 = 26;
      v166 = v165 + 38;
      v167 = ((v165 + 38) * v162 + (26 - v165) * v163 + 512) >> 10;
      if (v167 >= 255)
        v167 = 255;
      result[v31] = v167 & ~(v167 >> 31);
      v168 = *(__int16 *)(v25 + v161);
      v169 = *(__int16 *)(v24 + v161);
      v170 = v168 - v169;
      if (v168 - v169 < 0)
        v170 = v169 - v168;
      v171 = (v170 + 8) >> 8;
      if (v171 >= 26)
        v171 = 26;
      v172 = ((v171 + 38) * v168 + (26 - v171) * v169 + 512) >> 10;
      if (v172 >= 255)
        v172 = 255;
      result[v31 + 1] = v172 & ~(v172 >> 31);
      *v160++ = v171 + 38 + v166;
      v31 += 2;
      v161 += 4;
    }
    while ((uint64_t)v31 < a5);
    goto LABEL_3;
  }
  return result;
}

uint64_t warp_affine_8x8_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  _WORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _BYTE *v71;
  uint64_t v72;
  __int16 *v73;
  char *v74;
  int v75;
  int v76;
  char *v77;
  int v78;
  int v79;
  char *v80;
  int v81;
  int v82;
  char *v83;
  int v84;
  int v85;
  char *v86;
  int v87;
  int v88;
  char *v89;
  int v90;
  int v91;
  char *v92;
  int v93;
  char *v94;
  uint64_t result;
  int v96;
  _BYTE v97[240];
  uint64_t v98;

  v7 = 0;
  v98 = *MEMORY[0x1E0C80C00];
  v8 = *a5;
  v9 = a5[1];
  v10 = a6 + 512;
  v11 = (unsigned __int8 *)(a3 - 3 * a4 + 4);
  do
  {
    v12 = (char *)&dav1d_mc_warp_filter + 8 * (v10 >> 10);
    v13 = *(v11 - 6);
    v14 = *(v11 - 5);
    v15 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + v10) >> 10);
    v16 = &v97[v7];
    v17 = *(v11 - 4);
    v18 = *(v11 - 3);
    v19 = v12[517];
    v20 = *(v11 - 2);
    v21 = v12[518];
    v22 = *(v11 - 1);
    v23 = v13 * v12[513] + *(v11 - 7) * v12[512] + v14 * v12[514] + v17 * v12[515] + v18 * v12[516];
    v24 = v12[519];
    LODWORD(v12) = *v11;
    v25 = v15[513] * v14 + v15[512] * v13 + v15[514] * v17 + v15[515] * v18 + v15[516] * v20 + v15[517] * v22;
    v26 = v11[1];
    v27 = v8 + v8 + v10;
    v28 = v23 + v20 * v19 + v22 * v21;
    v29 = (char *)&dav1d_mc_warp_filter + 8 * (v27 >> 10);
    v30 = v25 + v15[518] * (_DWORD)v12;
    v31 = v29[513] * v17 + v29[512] * v14 + v29[514] * v18;
    v32 = v11[2];
    LODWORD(v15) = v30 + v26 * v15[519];
    v33 = v31 + v29[515] * v20 + v29[516] * v22 + v29[517] * (_DWORD)v12 + v29[518] * v26 + v32 * v29[519];
    v34 = v8 + v27;
    v35 = v28 + (_DWORD)v12 * v24 + 4;
    v36 = (char *)&dav1d_mc_warp_filter + 8 * (v34 >> 10);
    v37 = v35 >> 3;
    v38 = v36[514];
    v39 = v36[515];
    v40 = v36[516];
    v41 = v36[513] * v18 + v36[512] * v17;
    v42 = v36[517];
    LODWORD(v29) = v36[518];
    LODWORD(v36) = v36[519];
    v43 = v41 + v38 * v20;
    v44 = v11[3];
    *v16 = v37;
    v45 = v43 + v39 * v22 + v40 * (_DWORD)v12 + v42 * v26 + (_DWORD)v29 * v32 + v44 * (_DWORD)v36;
    LODWORD(v36) = v8 + v34;
    v46 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + v34) >> 10);
    v47 = v46[514];
    v48 = v46[515];
    v49 = v46[516];
    v50 = v46[513] * v20 + v46[512] * v18;
    LODWORD(v29) = v46[517];
    v16[1] = ((_DWORD)v15 + 4) >> 3;
    v51 = v11[4];
    LODWORD(v15) = v50 + v47 * v22 + v48 * (_DWORD)v12 + v49 * v26 + (_DWORD)v29 * v32 + v46[518] * v44 + v51 * v46[519];
    LODWORD(v36) = v8 + (_DWORD)v36;
    v52 = (char *)&dav1d_mc_warp_filter + 8 * ((int)v36 >> 10);
    v53 = v52[512];
    LODWORD(v29) = v52[513] * v22;
    v16[2] = (v33 + 4) >> 3;
    v54 = (_DWORD)v29 + v53 * v20;
    LODWORD(v29) = v11[5];
    v55 = v54 + v52[514] * (_DWORD)v12 + v52[515] * v26;
    v56 = (_DWORD)v15 + 4;
    v57 = v55 + v52[516] * v32 + v52[517] * v44 + v52[518] * v51 + (_DWORD)v29 * v52[519];
    LODWORD(v15) = v8 + (_DWORD)v36;
    v16[3] = (v45 + 4) >> 3;
    v58 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + (int)v36) >> 10);
    v59 = v58[514];
    v60 = v58[515];
    v61 = v58[516];
    v62 = v58[517];
    v63 = v58[513] * (_DWORD)v12 + v58[512] * v22;
    LODWORD(v36) = v58[518];
    LODWORD(v58) = v58[519];
    LODWORD(v52) = v11[6];
    v16[4] = v56 >> 3;
    v64 = v63 + v59 * v26 + v60 * v32 + v61 * v44 + v62 * v51 + (_DWORD)v36 * (_DWORD)v29 + (_DWORD)v52 * (_DWORD)v58;
    v65 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + (int)v15) >> 10);
    LODWORD(v15) = v65[512];
    v66 = v65[513] * v26;
    LODWORD(v58) = v65[514];
    LODWORD(v36) = v65[515];
    v67 = v65[516];
    v68 = v65[517];
    v69 = v65[518];
    v16[5] = (v57 + 4) >> 3;
    v70 = v65[519];
    LODWORD(v65) = v11[7];
    v16[6] = (v64 + 4) >> 3;
    v16[7] = (v66
                          + (_DWORD)v15 * (_DWORD)v12
                          + (_DWORD)v58 * v32
                          + (_DWORD)v36 * v44
                          + v67 * v51
                          + v68 * (_DWORD)v29
                          + v69 * (_DWORD)v52
                          + (_DWORD)v65 * v70
                          + 4) >> 3;
    v10 += v9;
    v7 += 16;
    v11 += a4;
  }
  while ((_DWORD)v7 != 240);
  v71 = (_BYTE *)(a1 + 3);
  v72 = 126;
  do
  {
    v73 = (__int16 *)&v97[v72];
    v74 = (char *)&dav1d_mc_warp_filter + 8 * ((a7 + 512) >> 10);
    v75 = (*(__int16 *)&v97[v72 - 110] * v74[513]
         + *(__int16 *)&v97[v72 - 126] * v74[512]
         + *(__int16 *)&v97[v72 - 94] * v74[514]
         + *(__int16 *)&v97[v72 - 78] * v74[515]
         + *(__int16 *)&v97[v72 - 62] * v74[516]
         + *(__int16 *)&v97[v72 - 46] * v74[517]
         + *(__int16 *)&v97[v72 - 30] * v74[518]
         + *(__int16 *)&v97[v72 - 14] * v74[519]
         + 1024) >> 11;
    if (v75 >= 255)
      v75 = 255;
    *(v71 - 3) = v75 & ~(v75 >> 31);
    v76 = a7 + 512 + a5[2];
    v77 = (char *)&dav1d_mc_warp_filter + 8 * (v76 >> 10);
    v78 = (*(v73 - 54) * v77[513]
         + *(v73 - 62) * v77[512]
         + *(v73 - 46) * v77[514]
         + *(v73 - 38) * v77[515]
         + *(v73 - 30) * v77[516]
         + *(v73 - 22) * v77[517]
         + *(v73 - 14) * v77[518]
         + *(v73 - 6) * v77[519]
         + 1024) >> 11;
    if (v78 >= 255)
      v78 = 255;
    *(v71 - 2) = v78 & ~(v78 >> 31);
    v79 = v76 + a5[2];
    v80 = (char *)&dav1d_mc_warp_filter + 8 * (v79 >> 10);
    v81 = (*(v73 - 53) * v80[513]
         + *(v73 - 61) * v80[512]
         + *(v73 - 45) * v80[514]
         + *(v73 - 37) * v80[515]
         + *(v73 - 29) * v80[516]
         + *(v73 - 21) * v80[517]
         + *(v73 - 13) * v80[518]
         + *(v73 - 5) * v80[519]
         + 1024) >> 11;
    if (v81 >= 255)
      v81 = 255;
    *(v71 - 1) = v81 & ~(v81 >> 31);
    v82 = v79 + a5[2];
    v83 = (char *)&dav1d_mc_warp_filter + 8 * (v82 >> 10);
    v84 = (*(v73 - 52) * v83[513]
         + *(v73 - 60) * v83[512]
         + *(v73 - 44) * v83[514]
         + *(v73 - 36) * v83[515]
         + *(v73 - 28) * v83[516]
         + *(v73 - 20) * v83[517]
         + *(v73 - 12) * v83[518]
         + *(v73 - 4) * v83[519]
         + 1024) >> 11;
    if (v84 >= 255)
      v84 = 255;
    *v71 = v84 & ~(v84 >> 31);
    v85 = v82 + a5[2];
    v86 = (char *)&dav1d_mc_warp_filter + 8 * (v85 >> 10);
    v87 = (*(v73 - 51) * v86[513]
         + *(v73 - 59) * v86[512]
         + *(v73 - 43) * v86[514]
         + *(v73 - 35) * v86[515]
         + *(v73 - 27) * v86[516]
         + *(v73 - 19) * v86[517]
         + *(v73 - 11) * v86[518]
         + *(v73 - 3) * v86[519]
         + 1024) >> 11;
    if (v87 >= 255)
      v87 = 255;
    v71[1] = v87 & ~(v87 >> 31);
    v88 = v85 + a5[2];
    v89 = (char *)&dav1d_mc_warp_filter + 8 * (v88 >> 10);
    v90 = (*(v73 - 50) * v89[513]
         + *(v73 - 58) * v89[512]
         + *(v73 - 42) * v89[514]
         + *(v73 - 34) * v89[515]
         + *(v73 - 26) * v89[516]
         + *(v73 - 18) * v89[517]
         + *(v73 - 10) * v89[518]
         + *(v73 - 2) * v89[519]
         + 1024) >> 11;
    if (v90 >= 255)
      v90 = 255;
    v71[2] = v90 & ~(v90 >> 31);
    v91 = v88 + a5[2];
    v92 = (char *)&dav1d_mc_warp_filter + 8 * (v91 >> 10);
    v93 = (*(v73 - 49) * v92[513]
         + *(v73 - 57) * v92[512]
         + *(v73 - 41) * v92[514]
         + *(v73 - 33) * v92[515]
         + *(v73 - 25) * v92[516]
         + *(v73 - 17) * v92[517]
         + *(v73 - 9) * v92[518]
         + *(v73 - 1) * v92[519]
         + 1024) >> 11;
    if (v93 >= 255)
      v93 = 255;
    v71[3] = v93 & ~(v93 >> 31);
    v94 = (char *)&dav1d_mc_warp_filter + 8 * ((v91 + a5[2]) >> 10);
    result = v94[514];
    v96 = (*(v73 - 48) * v94[513]
         + *(v73 - 56) * v94[512]
         + *(v73 - 40) * (int)result
         + *(v73 - 32) * v94[515]
         + *(v73 - 24) * v94[516]
         + *(v73 - 16) * v94[517]
         + *(v73 - 8) * v94[518]
         + *v73 * v94[519]
         + 1024) >> 11;
    if (v96 >= 255)
      v96 = 255;
    v71[4] = v96 & ~(v96 >> 31);
    a7 += a5[3];
    v72 += 16;
    v71 += a2;
  }
  while ((_DWORD)v72 != 254);
  return result;
}

uint64_t warp_affine_8x8t_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 *a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  _WORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _WORD *v71;
  uint64_t v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  char *v77;
  int v78;
  char *v79;
  int v80;
  char *v81;
  int v82;
  char *v83;
  int v84;
  char *v85;
  char *v86;
  uint64_t result;
  _BYTE v88[240];
  uint64_t v89;

  v7 = 0;
  v89 = *MEMORY[0x1E0C80C00];
  v8 = *a5;
  v9 = a5[1];
  v10 = a6 + 512;
  v11 = (unsigned __int8 *)(a3 - 3 * a4 + 4);
  do
  {
    v12 = (char *)&dav1d_mc_warp_filter + 8 * (v10 >> 10);
    v13 = *(v11 - 6);
    v14 = *(v11 - 5);
    v15 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + v10) >> 10);
    v16 = &v88[v7];
    v17 = *(v11 - 4);
    v18 = *(v11 - 3);
    v19 = v12[517];
    v20 = *(v11 - 2);
    v21 = v12[518];
    v22 = *(v11 - 1);
    v23 = v13 * v12[513] + *(v11 - 7) * v12[512] + v14 * v12[514] + v17 * v12[515] + v18 * v12[516];
    v24 = v12[519];
    LODWORD(v12) = *v11;
    v25 = v15[513] * v14 + v15[512] * v13 + v15[514] * v17 + v15[515] * v18 + v15[516] * v20 + v15[517] * v22;
    v26 = v11[1];
    v27 = v8 + v8 + v10;
    v28 = v23 + v20 * v19 + v22 * v21;
    v29 = (char *)&dav1d_mc_warp_filter + 8 * (v27 >> 10);
    v30 = v25 + v15[518] * (_DWORD)v12;
    v31 = v29[513] * v17 + v29[512] * v14 + v29[514] * v18;
    v32 = v11[2];
    LODWORD(v15) = v30 + v26 * v15[519];
    v33 = v31 + v29[515] * v20 + v29[516] * v22 + v29[517] * (_DWORD)v12 + v29[518] * v26 + v32 * v29[519];
    v34 = v8 + v27;
    v35 = v28 + (_DWORD)v12 * v24 + 4;
    v36 = (char *)&dav1d_mc_warp_filter + 8 * (v34 >> 10);
    v37 = v35 >> 3;
    v38 = v36[514];
    v39 = v36[515];
    v40 = v36[516];
    v41 = v36[513] * v18 + v36[512] * v17;
    v42 = v36[517];
    LODWORD(v29) = v36[518];
    LODWORD(v36) = v36[519];
    v43 = v41 + v38 * v20;
    v44 = v11[3];
    *v16 = v37;
    v45 = v43 + v39 * v22 + v40 * (_DWORD)v12 + v42 * v26 + (_DWORD)v29 * v32 + v44 * (_DWORD)v36;
    LODWORD(v36) = v8 + v34;
    v46 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + v34) >> 10);
    v47 = v46[514];
    v48 = v46[515];
    v49 = v46[516];
    v50 = v46[513] * v20 + v46[512] * v18;
    LODWORD(v29) = v46[517];
    v16[1] = ((_DWORD)v15 + 4) >> 3;
    v51 = v11[4];
    LODWORD(v15) = v50 + v47 * v22 + v48 * (_DWORD)v12 + v49 * v26 + (_DWORD)v29 * v32 + v46[518] * v44 + v51 * v46[519];
    LODWORD(v36) = v8 + (_DWORD)v36;
    v52 = (char *)&dav1d_mc_warp_filter + 8 * ((int)v36 >> 10);
    v53 = v52[512];
    LODWORD(v29) = v52[513] * v22;
    v16[2] = (v33 + 4) >> 3;
    v54 = (_DWORD)v29 + v53 * v20;
    LODWORD(v29) = v11[5];
    v55 = v54 + v52[514] * (_DWORD)v12 + v52[515] * v26;
    v56 = (_DWORD)v15 + 4;
    v57 = v55 + v52[516] * v32 + v52[517] * v44 + v52[518] * v51 + (_DWORD)v29 * v52[519];
    LODWORD(v15) = v8 + (_DWORD)v36;
    v16[3] = (v45 + 4) >> 3;
    v58 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + (int)v36) >> 10);
    v59 = v58[514];
    v60 = v58[515];
    v61 = v58[516];
    v62 = v58[517];
    v63 = v58[513] * (_DWORD)v12 + v58[512] * v22;
    LODWORD(v36) = v58[518];
    LODWORD(v58) = v58[519];
    LODWORD(v52) = v11[6];
    v16[4] = v56 >> 3;
    v64 = v63 + v59 * v26 + v60 * v32 + v61 * v44 + v62 * v51 + (_DWORD)v36 * (_DWORD)v29 + (_DWORD)v52 * (_DWORD)v58;
    v65 = (char *)&dav1d_mc_warp_filter + 8 * ((v8 + (int)v15) >> 10);
    LODWORD(v15) = v65[512];
    v66 = v65[513] * v26;
    LODWORD(v58) = v65[514];
    LODWORD(v36) = v65[515];
    v67 = v65[516];
    v68 = v65[517];
    v69 = v65[518];
    v16[5] = (v57 + 4) >> 3;
    v70 = v65[519];
    LODWORD(v65) = v11[7];
    v16[6] = (v64 + 4) >> 3;
    v16[7] = (v66
                          + (_DWORD)v15 * (_DWORD)v12
                          + (_DWORD)v58 * v32
                          + (_DWORD)v36 * v44
                          + v67 * v51
                          + v68 * (_DWORD)v29
                          + v69 * (_DWORD)v52
                          + (_DWORD)v65 * v70
                          + 4) >> 3;
    v10 += v9;
    v7 += 16;
    v11 += a4;
  }
  while ((_DWORD)v7 != 240);
  v71 = (_WORD *)(a1 + 8);
  v72 = 126;
  do
  {
    v73 = (char *)&dav1d_mc_warp_filter + 8 * ((a7 + 512) >> 10);
    *(v71 - 4) = (*(__int16 *)&v88[v72 - 110] * v73[513]
                              + *(__int16 *)&v88[v72 - 126] * v73[512]
                              + *(__int16 *)&v88[v72 - 94] * v73[514]
                              + *(__int16 *)&v88[v72 - 78] * v73[515]
                              + *(__int16 *)&v88[v72 - 62] * v73[516]
                              + *(__int16 *)&v88[v72 - 46] * v73[517]
                              + *(__int16 *)&v88[v72 - 30] * v73[518]
                              + *(__int16 *)&v88[v72 - 14] * v73[519]
                              + 64) >> 7;
    v74 = a7 + 512 + a5[2];
    v75 = (char *)&dav1d_mc_warp_filter + 8 * (v74 >> 10);
    *(v71 - 3) = (*(__int16 *)&v88[v72 - 108] * v75[513]
                              + *(__int16 *)&v88[v72 - 124] * v75[512]
                              + *(__int16 *)&v88[v72 - 92] * v75[514]
                              + *(__int16 *)&v88[v72 - 76] * v75[515]
                              + *(__int16 *)&v88[v72 - 60] * v75[516]
                              + *(__int16 *)&v88[v72 - 44] * v75[517]
                              + *(__int16 *)&v88[v72 - 28] * v75[518]
                              + *(__int16 *)&v88[v72 - 12] * v75[519]
                              + 64) >> 7;
    v76 = v74 + a5[2];
    v77 = (char *)&dav1d_mc_warp_filter + 8 * (v76 >> 10);
    *(v71 - 2) = (*(__int16 *)&v88[v72 - 106] * v77[513]
                              + *(__int16 *)&v88[v72 - 122] * v77[512]
                              + *(__int16 *)&v88[v72 - 90] * v77[514]
                              + *(__int16 *)&v88[v72 - 74] * v77[515]
                              + *(__int16 *)&v88[v72 - 58] * v77[516]
                              + *(__int16 *)&v88[v72 - 42] * v77[517]
                              + *(__int16 *)&v88[v72 - 26] * v77[518]
                              + *(__int16 *)&v88[v72 - 10] * v77[519]
                              + 64) >> 7;
    v78 = v76 + a5[2];
    v79 = (char *)&dav1d_mc_warp_filter + 8 * (v78 >> 10);
    *(v71 - 1) = (*(__int16 *)&v88[v72 - 104] * v79[513]
                              + *(__int16 *)&v88[v72 - 120] * v79[512]
                              + *(__int16 *)&v88[v72 - 88] * v79[514]
                              + *(__int16 *)&v88[v72 - 72] * v79[515]
                              + *(__int16 *)&v88[v72 - 56] * v79[516]
                              + *(__int16 *)&v88[v72 - 40] * v79[517]
                              + *(__int16 *)&v88[v72 - 24] * v79[518]
                              + *(__int16 *)&v88[v72 - 8] * v79[519]
                              + 64) >> 7;
    v80 = v78 + a5[2];
    v81 = (char *)&dav1d_mc_warp_filter + 8 * (v80 >> 10);
    *v71 = (*(__int16 *)&v88[v72 - 102] * v81[513]
                        + *(__int16 *)&v88[v72 - 118] * v81[512]
                        + *(__int16 *)&v88[v72 - 86] * v81[514]
                        + *(__int16 *)&v88[v72 - 70] * v81[515]
                        + *(__int16 *)&v88[v72 - 54] * v81[516]
                        + *(__int16 *)&v88[v72 - 38] * v81[517]
                        + *(__int16 *)&v88[v72 - 22] * v81[518]
                        + *(__int16 *)&v88[v72 - 6] * v81[519]
                        + 64) >> 7;
    v82 = v80 + a5[2];
    v83 = (char *)&dav1d_mc_warp_filter + 8 * (v82 >> 10);
    v71[1] = (*(__int16 *)&v88[v72 - 100] * v83[513]
                          + *(__int16 *)&v88[v72 - 116] * v83[512]
                          + *(__int16 *)&v88[v72 - 84] * v83[514]
                          + *(__int16 *)&v88[v72 - 68] * v83[515]
                          + *(__int16 *)&v88[v72 - 52] * v83[516]
                          + *(__int16 *)&v88[v72 - 36] * v83[517]
                          + *(__int16 *)&v88[v72 - 20] * v83[518]
                          + *(__int16 *)&v88[v72 - 4] * v83[519]
                          + 64) >> 7;
    v84 = v82 + a5[2];
    v85 = (char *)&dav1d_mc_warp_filter + 8 * (v84 >> 10);
    v71[2] = (*(__int16 *)&v88[v72 - 98] * v85[513]
                          + *(__int16 *)&v88[v72 - 114] * v85[512]
                          + *(__int16 *)&v88[v72 - 82] * v85[514]
                          + *(__int16 *)&v88[v72 - 66] * v85[515]
                          + *(__int16 *)&v88[v72 - 50] * v85[516]
                          + *(__int16 *)&v88[v72 - 34] * v85[517]
                          + *(__int16 *)&v88[v72 - 18] * v85[518]
                          + *(__int16 *)&v88[v72 - 2] * v85[519]
                          + 64) >> 7;
    v86 = (char *)&dav1d_mc_warp_filter + 8 * ((v84 + a5[2]) >> 10);
    result = v86[514];
    v71[3] = (*(__int16 *)&v88[v72 - 96] * v86[513]
                          + *(__int16 *)&v88[v72 - 112] * v86[512]
                          + *(__int16 *)&v88[v72 - 80] * (_DWORD)result
                          + *(__int16 *)&v88[v72 - 64] * v86[515]
                          + *(__int16 *)&v88[v72 - 48] * v86[516]
                          + *(__int16 *)&v88[v72 - 32] * v86[517]
                          + *(__int16 *)&v88[v72 - 16] * v86[518]
                          + *(__int16 *)&v88[v72] * v86[519]
                          + 64) >> 7;
    a7 += a5[3];
    v72 += 16;
    v71 += a2;
  }
  while ((_DWORD)v72 != 254);
  return result;
}

void *emu_edge_c_0(void *__n, int a2, int a3, int a4, int a5, int a6, char *__dst, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v11;
  size_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  size_t v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  size_t v31;
  char *v32;
  int v33;
  char *v34;
  int v35;
  char *__src;
  int v37;
  size_t v38;
  size_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t __na;

  v11 = __dst;
  v12 = (size_t)__n;
  v13 = a4 - 1;
  if (a6 < a4 - 1)
    v13 = a6;
  if (a6 < 0)
    v13 = 0;
  v14 = a3 - 1;
  if (a5 < a3 - 1)
    v14 = a5;
  if (a5 < 0)
    v14 = 0;
  v15 = (_DWORD)__n - 1;
  if (-a5 < (int)__n - 1)
    v16 = -a5;
  else
    v16 = (_DWORD)__n - 1;
  if (a5 > 0)
    v16 = 0;
  v17 = (_DWORD)__n - a3 + a5;
  if (v17 < v15)
    v15 = (_DWORD)__n - a3 + a5;
  if (v17 < 0)
    v15 = 0;
  v18 = a2 - 1;
  if (-a6 < a2 - 1)
    v19 = -a6;
  else
    v19 = a2 - 1;
  if (a6 <= 0)
    v20 = v19;
  else
    v20 = 0;
  v21 = a2 - a4 + a6;
  if (v21 < v18)
    v18 = a2 - a4 + a6;
  if (v21 >= 0)
    v22 = v18;
  else
    v22 = 0;
  v23 = v20 * a8;
  __src = &__dst[v23];
  v37 = a2 - v20 - v22;
  if (v37 >= 1)
  {
    v24 = (char *)(a9 + v13 * a10 + v14);
    v25 = v16;
    v26 = (int)__n - v16 - v15;
    __na = v26;
    if (v16)
    {
      if (v15)
      {
        v39 = v16 + v26;
        v41 = (int)__n - v15 - 1;
        v27 = &__dst[v23];
        v28 = a2 - v20 - v22;
        v38 = v15;
        do
        {
          memcpy(&v27[v25], v24, __na);
          memset(v27, v27[v25], v25);
          __n = memset(&v27[v39], v27[v41], v38);
          v24 += a10;
          v27 += a8;
          --v28;
        }
        while (v28);
      }
      else
      {
        v32 = &__dst[v23];
        v33 = a2 - v20 - v22;
        do
        {
          memcpy(&v32[v25], v24, __na);
          __n = memset(v32, v32[v25], v25);
          v24 += a10;
          v32 += a8;
          --v33;
        }
        while (v33);
      }
    }
    else if (v15)
    {
      v40 = v16 + v26;
      v42 = (int)__n - v15 - 1;
      v29 = &__dst[v23];
      v30 = a2 - v20 - v22;
      v31 = v15;
      do
      {
        memcpy(&v29[v25], v24, __na);
        __n = memset(&v29[v40], v29[v42], v31);
        v24 += a10;
        v29 += a8;
        --v30;
      }
      while (v30);
    }
    else
    {
      v34 = &__dst[v23 + v16];
      v35 = a2 - v20 - v22;
      do
      {
        __n = memcpy(v34, v24, __na);
        v24 += a10;
        v34 += a8;
        --v35;
      }
      while (v35);
    }
  }
  if (v20 >= 1)
  {
    do
    {
      __n = memcpy(v11, __src, v12);
      v11 += a8;
      --v20;
    }
    while (v20);
  }
  if (v22 >= 1)
  {
    do
    {
      __n = memcpy(&v11[v37 * a8], &v11[a8 * (v37 - 1)], v12);
      v11 += a8;
      --v22;
    }
    while (v22);
  }
  return __n;
}

uint64_t resize_c_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  signed int v9;
  int32x2_t v10;
  uint64_t v11;
  signed int v12;
  int v13;
  char *v14;
  int32x2_t v15;
  int8x8_t v16;
  int v17;
  int v18;
  int v19;
  signed int v20;
  int v21;
  int8x8_t v22;
  int8x8_t v23;
  int v24;

  if (a5 >= 1)
  {
    v9 = a7 - 1;
    v10 = vdup_n_s32(a7 - 1);
    do
    {
      v11 = 0;
      v12 = -1;
      v13 = a9;
      do
      {
        v15 = vdup_n_s32(v12);
        v16 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v15, (int32x2_t)0xFFFFFFFEFFFFFFFDLL), v10), (int8x8_t)vcgt_s32((int32x2_t)0x200000003, v15));
        v17 = *(unsigned __int8 *)(a3 + v16.i32[0]);
        v18 = *(unsigned __int8 *)(a3 + v16.i32[1]);
        v19 = v12 - 1;
        if (v12 - 1 >= v9)
          v19 = a7 - 1;
        if (v12 >= v9)
          v20 = a7 - 1;
        else
          v20 = v12;
        if (v12 <= 0)
          v19 = 0;
        v21 = *(unsigned __int8 *)(a3 + v19);
        if (v12 < 0)
          v20 = 0;
        v22 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v15, (int32x2_t)0x200000001), v10), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFEFFFFFFFFLL, v15));
        v23 = vbic_s8((int8x8_t)vmin_s32(vadd_s32(v15, (int32x2_t)0x400000003), v10), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFCFFFFFFFDLL, v15));
        v14 = (char *)&dav1d_resize_filter + 8 * (v13 >> 8);
        v24 = (64
             - (v17 * *v14
              + v18 * v14[1]
              + v21 * v14[2]
              + *(unsigned __int8 *)(a3 + v20) * v14[3]
              + *(unsigned __int8 *)(a3 + v22.i32[0]) * v14[4]
              + *(unsigned __int8 *)(a3 + v22.i32[1]) * v14[5]
              + *(unsigned __int8 *)(a3 + v23.i32[0]) * v14[6]
              + *(unsigned __int8 *)(a3 + v23.i32[1]) * v14[7])) >> 7;
        if (v24 >= 255)
          v24 = 255;
        *(_BYTE *)(result + v11) = v24 & ~(v24 >> 31);
        v12 += (v13 + a8) >> 14;
        v13 = (v13 + a8) & 0x3FFF;
        ++v11;
      }
      while (a5 != v11);
      result += a2;
      a3 += a4;
      --a6;
    }
    while (a6);
  }
  return result;
}

char *put_8tap_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  char *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  unsigned int v27;
  int8x8_t *v28;
  int v29;
  uint64_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  char v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint64_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  char *v49;
  char *v50;
  uint64_t j;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int v93;
  unsigned int v94;
  char *v95;
  char *v96;
  char *v97;
  int v98;
  char *v99;
  int32x4_t v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  uint64_t v109;
  _BYTE *v110;
  __int16 *v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int8x8_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t *v123;
  int8x16_t v124;
  int8x16_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int32x4_t v130;
  int16x8_t *v131;
  int8x8_t v132;
  int v133;
  int32x4_t v134;
  int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char *v145;
  int16x8_t *v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int v157;
  char *v158;
  unint64_t v159;
  char *v160;
  int16x8_t *v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int16x8_t v178;
  int32x4_t v179;
  int16x8_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int16x8_t v183;
  int32x4_t v184;
  int16x8_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int16x8_t v188;
  int32x4_t v189;
  int16x8_t v190;
  int32x4_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int16x8_t v194;
  int16x8_t *v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int32x4_t v203;
  __int16 *v204;
  int v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  char v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  int32x4_t v218;
  int32x4_t v219;
  uint64_t v220;
  char *v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  uint64_t i;
  char *v232;
  uint64_t v240;
  uint64_t v241;
  int8x16_t v242;
  int32x4_t v243;
  int8x16_t *v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int8x16_t *v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int8x16_t *v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int8x16_t *v262;
  int32x4_t v263;
  int32x4_t v264;
  int8x16_t *v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int8x16_t *v270;
  int8x16_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  uint64_t *v287;
  uint64_t *v288;
  int32x4_t v289;
  uint64_t *v290;
  int32x4_t v291;
  uint64_t *v292;
  int32x4_t v293;
  uint64_t *v294;
  int32x4_t v295;
  uint64_t *v296;
  int32x4_t v297;
  int32x4_t v298;
  char *v299;
  int v300;
  unsigned __int8 *v301;
  int v302;
  unsigned __int8 *v303;
  int v304;
  unsigned __int8 *v305;
  int v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  int v313;
  char *v314;
  int32x4_t v315;
  int32x4_t v316;
  char *v317;
  char *__src;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int v322;
  int32x4_t v323;
  unsigned int v324;
  int v325[2];
  int32x4_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int8x16_t v340;
  int32x4_t v341;
  int8x16_t v342;
  _BYTE v343[34560];
  uint64_t v344;
  int8x16x2_t v345;
  int8x16x2_t v346;
  int8x16x2_t v347;
  int8x16x2_t v348;
  int8x16x2_t v349;
  int8x16x2_t v350;
  int8x16x2_t v351;
  int8x16x4_t v352;

  result = (char *)MEMORY[0x1E0C80A78](a1, a2);
  __src = v11;
  *(_QWORD *)v325 = v10;
  v26 = result;
  v344 = *MEMORY[0x1E0C80C00];
  v324 = v13;
  if (!v15)
  {
    if (!v16)
      return (char *)put_c_0(result, v10, v11, v12, v13, v14);
    v28 = 0;
    goto LABEL_29;
  }
  v27 = a9 & 3;
  if (v13 <= 4)
    v27 = (a9 & 1) + 3;
  v28 = (int8x8_t *)((char *)&dav1d_mc_subpel_filters + 120 * v27 + 8 * v15 - 8);
  if (v16)
  {
LABEL_29:
    v94 = ((a9 >> 2) & 1) + 3;
    if (v14 > 4)
      v94 = a9 >> 2;
    v95 = (char *)&dav1d_mc_subpel_filters + 120 * v94 + 8 * v16;
    v96 = v95 - 8;
    if (v28)
    {
      if (v13 < 1)
        return result;
      v311 = v95 - 8;
      v97 = &v11[-3 * v12];
      v313 = v14;
      v98 = v14 + 7;
      v99 = (char *)v13;
      v17.i32[0] = v28->i32[0];
      v100 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v17.i8));
      v101 = v28->i8[4];
      v102 = v28->i8[5];
      v103 = v28->i8[6];
      v104 = v28->i8[7];
      v105 = vdupq_lane_s32(*(int32x2_t *)v100.i8, 0);
      v106 = vdupq_laneq_s32(v100, 3);
      v107 = vdupq_n_s32(v101);
      v108 = vdupq_n_s32(v102);
      v109 = (uint64_t)&__src[-3 * v12 + 4];
      v110 = v343;
      v111 = dav1d_gaussian_sequence + 2496;
      v112 = (int8x16_t *)&unk_196889000;
      v113 = (int8x16_t *)&unk_196889000;
      v316 = v100;
      v332 = vdupq_n_s32(v104);
      v333 = vdupq_n_s32(v103);
      v327 = vdupq_lane_s32(*(int32x2_t *)v100.i8, 1);
      v330 = vdupq_laneq_s32(v100, 2);
      while (1)
      {
        v21.i32[0] = *(_DWORD *)(v97 - 3);
        v114 = (int8x8_t)vmovl_u8(*(uint8x8_t *)v21.i8).u64[0];
        v115 = v97[2];
        v116 = v97[3];
        v322 = v98;
        v117 = 0;
        if (v13 >= 0x10)
        {
          v118 = vdupq_n_s8(v116);
          v119 = vdupq_n_s8(v115);
          v22.i8[12] = v114.i8[0];
          v22.i8[13] = v114.i8[2];
          v22.i8[14] = v114.i8[4];
          v22.i8[15] = v114.i8[6];
          v120 = vdupq_lane_s8(v114, 4);
          v121 = vdupq_lane_s8(v114, 2);
          v122 = vdupq_lane_s8(v114, 0);
          v123 = (int8x16_t *)v109;
          do
          {
            v124 = v22;
            v125 = v118;
            v22 = *(int8x16_t *)((char *)v123 - 3);
            v348.val[1] = vextq_s8(v124, v22, 0xFuLL);
            v340 = v112[204];
            v342 = v113[205];
            v126 = (int32x4_t)vqtbl1q_s8(v22, v340);
            v336 = (int32x4_t)vqtbl1q_s8(v22, v342);
            v350.val[1] = vextq_s8(v120, v348.val[1], 0xFuLL);
            v348.val[0] = vqtbl1q_s8(v120, (int8x16_t)xmmword_19689ADA0);
            v351.val[1] = vextq_s8(v121, v350.val[1], 0xFuLL);
            v351.val[0] = vqtbl1q_s8(v122, (int8x16_t)xmmword_19689ADA0);
            v21 = vqtbl1q_s8(v124, (int8x16_t)xmmword_19689ADA0);
            v127 = *v123++;
            v118 = v127;
            v347.val[1] = vextq_s8(v125, v127, 0xFuLL);
            v347.val[0] = vqtbl1q_s8(v119, (int8x16_t)xmmword_19689ADA0);
            v350.val[0] = vqtbl1q_s8(v121, (int8x16_t)xmmword_19689ADA0);
            v128 = *((int8x16_t *)v111 + 219);
            v129 = vqtbl1q_s8(v125, (int8x16_t)xmmword_19689ADA0);
            v130 = (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CB0);
            v119 = v347.val[1];
            v131 = (int16x8_t *)&v110[v117];
            *v131 = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v327, (int32x4_t)vqtbl2q_s8(v350, v128)), v105, (int32x4_t)vqtbl2q_s8(v351, v128)), v330, (int32x4_t)vqtbl2q_s8(v348, v128)), v106, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v21.i8, v128)), v107, v126), v108, (int32x4_t)vqtbl2q_s8(v347, v128)),
                            v333,
                            (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&v118 - 1), v128)),
                          v332,
                          (int32x4_t)vqtbl1q_s8(v127, v340)),
                        2uLL),
                      vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v327, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689AE20)), v105, v126), v330, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689ADC0)), v106, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689AE10)), v107, v336), v108, (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_19689ADC0)), v333, (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_19689AE10)),
                        v332,
                        (int32x4_t)vqtbl1q_s8(v127, v342)),
                      2uLL);
            v131[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v327, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689AE40)), v105, v336), v330, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689ADE0)), v106, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689ADF0)), v107, v130), v108, (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_19689ADE0)),
                              v333,
                              (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_19689ADF0)),
                            v332,
                            (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_196889CB0)),
                          2uLL),
                        vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v327, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689AE30)), v105, v130), v330, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689ADD0)), v106, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_19689AE00)), v107, (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CA0)), v108, (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_19689ADD0)), v333, (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_19689AE00)),
                          v332,
                          (int32x4_t)vqtbl1q_s8(v127, (int8x16_t)xmmword_196889CA0)),
                        2uLL);
            v120 = v348.val[1];
            v121 = v350.val[1];
            v122 = v351.val[1];
            v117 += 32;
          }
          while (((2 * v13) & 0x1FFFFFFE0) != v117);
          v100 = v316;
          if ((v13 & 0xFFFFFFF0) == (unint64_t)v13)
            goto LABEL_34;
          LOBYTE(v116) = v118.i8[15];
          LOBYTE(v115) = v118.i8[14];
          v132 = (int8x8_t)vextq_s8(v22, v22, 8uLL).u64[0];
          v114 = vzip2_s8(v132, v132);
          v117 = v13 & 0xFFFFFFF0;
        }
        do
        {
          v133 = v115;
          v134 = vmulq_s32(v100, (int32x4_t)vmovl_u16((uint16x4_t)(*(_QWORD *)&v114 & 0xFF00FF00FF00FFLL)));
          v135 = *(unsigned __int8 *)(v109 + v117 - 3);
          v136 = v103 * v116;
          LOBYTE(v115) = v116;
          v116 = *(unsigned __int8 *)(v109 + v117);
          v134.i32[0] = vaddvq_s32(v134);
          *(_WORD *)&v110[2 * v117] = (v134.i32[0] + v135 * v101 + v136 + v102 * v133 + v116 * v104 + 2) >> 2;
          v114 = vext_s8(v114, *(int8x8_t *)v134.i8, 2uLL);
          v114.i16[3] = v135;
          ++v117;
        }
        while (v13 != v117);
LABEL_34:
        v110 += 256;
        v97 += v12;
        v109 += v12;
        v98 = v322 - 1;
        v111 = &dav1d_gaussian_sequence[1248];
        v112 = (int8x16_t *)&unk_196889000;
        v113 = (int8x16_t *)&unk_196889000;
        if (v322 == 1)
        {
          v137 = *v311;
          v138 = v311[1];
          v139 = v311[2];
          v140 = v311[3];
          v141 = v311[4];
          v142 = v311[5];
          v143 = v311[6];
          v144 = v311[7];
          v145 = (char *)(v13 & 0xFFFFFFF0);
          result = (char *)(v13 & 0xFFFFFFF8);
          v146 = (int16x8_t *)v343;
          v147 = vdupq_n_s32(v137);
          v148 = vdupq_n_s32(v138);
          v149 = vdupq_n_s32(v139);
          v150 = vdupq_n_s32(v140);
          v151 = vdupq_n_s32(v141);
          v152 = vdupq_n_s32(v142);
          v153 = vdupq_n_s32(v143);
          v154 = vdupq_n_s32(v144);
          v155.i64[0] = 0x20000000200;
          v155.i64[1] = 0x20000000200;
          v156.i64[0] = 0xFF000000FFLL;
          v156.i64[1] = 0xFF000000FFLL;
          v157 = v313;
          while (1)
          {
            if (v324 < 8)
            {
              v158 = 0;
LABEL_55:
              v204 = &v146->i16[(_QWORD)v158];
              do
              {
                v205 = (int)(v204[128] * v138
                           + *v204 * v137
                           + v204[256] * v139
                           + v204[384] * v140
                           + v204[512] * v141
                           + v204[640] * v142
                           + v204[768] * v143
                           + v204[896] * v144
                           + 512) >> 10;
                if (v205 >= 255)
                  v205 = 255;
                (v158++)[(_QWORD)v26] = v205 & ~(v205 >> 31);
                ++v204;
              }
              while (v99 != v158);
              goto LABEL_43;
            }
            if (v324 >= 0x10)
            {
              v160 = 0;
              v161 = v146;
              do
              {
                v162 = v161[1];
                v163 = v161[16];
                v164 = v161[17];
                v165 = vmlaq_s32(vmulq_s32(v148, vmovl_high_s16(v164)), v147, vmovl_high_s16(v162));
                v166 = vmovl_high_s16(v163);
                v167 = vmulq_s32(v148, vmovl_s16(*(int16x4_t *)v163.i8));
                v168 = vmlaq_s32(vmulq_s32(v148, vmovl_s16(*(int16x4_t *)v164.i8)), v147, vmovl_s16(*(int16x4_t *)v162.i8));
                v170 = v161[32];
                v169 = v161[33];
                v171 = vmlaq_s32(vmlaq_s32(v167, v147, vmovl_s16(*(int16x4_t *)v161->i8)), v149, vmovl_s16(*(int16x4_t *)v170.i8));
                v172 = vmlaq_s32(v168, v149, vmovl_s16(*(int16x4_t *)v169.i8));
                v173 = vmlaq_s32(vmlaq_s32(vmulq_s32(v148, v166), v147, vmovl_high_s16(*v161)), v149, vmovl_high_s16(v170));
                v175 = v161[48];
                v174 = v161[49];
                v176 = vmlaq_s32(vmlaq_s32(v165, v149, vmovl_high_s16(v169)), v150, vmovl_high_s16(v174));
                v177 = vmlaq_s32(v173, v150, vmovl_high_s16(v175));
                v178 = v161[65];
                v179 = vmlaq_s32(v172, v150, vmovl_s16(*(int16x4_t *)v174.i8));
                v180 = v161[64];
                v181 = vmlaq_s32(vmlaq_s32(v171, v150, vmovl_s16(*(int16x4_t *)v175.i8)), v151, vmovl_s16(*(int16x4_t *)v180.i8));
                v182 = vmlaq_s32(v179, v151, vmovl_s16(*(int16x4_t *)v178.i8));
                v183 = v161[80];
                v184 = vmlaq_s32(v177, v151, vmovl_high_s16(v180));
                v185 = v161[81];
                v186 = vmlaq_s32(vmlaq_s32(v176, v151, vmovl_high_s16(v178)), v152, vmovl_high_s16(v185));
                v187 = vmlaq_s32(v184, v152, vmovl_high_s16(v183));
                v188 = v161[97];
                v189 = vmlaq_s32(v182, v152, vmovl_s16(*(int16x4_t *)v185.i8));
                v190 = v161[96];
                v191 = vmlaq_s32(vmlaq_s32(v181, v152, vmovl_s16(*(int16x4_t *)v183.i8)), v153, vmovl_s16(*(int16x4_t *)v190.i8));
                v192 = v161[112];
                v193 = vmlaq_s32(v187, v153, vmovl_high_s16(v190));
                v194 = v161[113];
                v352.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(v186, v153, vmovl_high_s16(v188)), v154, vmovl_high_s16(v194)), v155), 0xAuLL), v156), (int32x4_t)0);
                v352.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v193, v154, vmovl_high_s16(v192)), v155), 0xAuLL), v156), (int32x4_t)0);
                v352.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(v189, v153, vmovl_s16(*(int16x4_t *)v188.i8)), v154, vmovl_s16(*(int16x4_t *)v194.i8)), v155), 0xAuLL), v156), (int32x4_t)0);
                v352.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v191, v154, vmovl_s16(*(int16x4_t *)v192.i8)), v155), 0xAuLL), v156), (int32x4_t)0);
                *(int8x16_t *)&v160[(_QWORD)v26] = vqtbl4q_s8(v352, (int8x16_t)xmmword_19689A980);
                v160 += 16;
                v161 += 2;
              }
              while (v145 != v160);
              if (v145 == v99)
                goto LABEL_43;
              v159 = v99 & 0x7FFFFFF0;
              v158 = (char *)(v99 & 0xFFFFFFF0);
              if ((v99 & 8) == 0)
                goto LABEL_55;
            }
            else
            {
              v159 = 0;
            }
            v195 = (int16x8_t *)((char *)v146 + 2 * v159);
            do
            {
              v196 = v195[16];
              v197 = v195[32];
              v198 = v195[48];
              v199 = v195[64];
              v200 = v195[80];
              v201 = v195[96];
              v202 = v195[112];
              v203 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v148, vmovl_s16(*(int16x4_t *)v196.i8)), v147, vmovl_s16(*(int16x4_t *)v195->i8)), v149, vmovl_s16(*(int16x4_t *)v197.i8)), v150, vmovl_s16(*(int16x4_t *)v198.i8)), v151, vmovl_s16(*(int16x4_t *)v199.i8)), v152,
                                 vmovl_s16(*(int16x4_t *)v200.i8)),
                               v153,
                               vmovl_s16(*(int16x4_t *)v201.i8)),
                             v154,
                             vmovl_s16(*(int16x4_t *)v202.i8)),
                           v155),
                         0xAuLL),
                       v156);
              v349.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v148, vmovl_high_s16(v196)), v147, vmovl_high_s16(*v195)), v149, vmovl_high_s16(v197)), v150, vmovl_high_s16(v198)), v151, vmovl_high_s16(v199)),
                                                     v152,
                                                     vmovl_high_s16(v200)),
                                                   v153,
                                                   vmovl_high_s16(v201)),
                                                 v154,
                                                 vmovl_high_s16(v202)),
                                               v155),
                                             0xAuLL),
                                           v156),
                                         (int32x4_t)0);
              v349.val[0] = (int8x16_t)vmaxq_s32(v203, (int32x4_t)0);
              *(_QWORD *)&v26[v159] = vqtbl2q_s8(v349, (int8x16_t)xmmword_19689A990).u64[0];
              v159 += 8;
              ++v195;
            }
            while (result != (char *)v159);
            v158 = (char *)(v99 & 0x7FFFFFF8);
            if (result != v99)
              goto LABEL_55;
LABEL_43:
            v26 += *(_QWORD *)v325;
            v146 += 16;
            if (!--v157)
              return result;
          }
        }
      }
    }
    if (v13 < 1)
      return result;
    v206 = v14;
    v207 = 0;
    v208 = *v96;
    v209 = v96[1];
    v210 = v96[2];
    v211 = v96[3];
    v212 = v96[4];
    v213 = v96[5];
    v214 = v13;
    v317 = &v11[4 * v12];
    v215 = v96[6];
    v216 = v96[7];
    v314 = &v11[3 * v12];
    v312 = &v11[2 * v12];
    v310 = &v11[v12];
    v308 = &v11[-2 * v12];
    v309 = &v11[-v12];
    v307 = &v11[-3 * v12];
    v217 = v13 & 0xFFFFFFF0;
    v218 = vdupq_n_s32(v208);
    v219 = vdupq_n_s32(v209);
    v220 = v13 & 0xFFFFFFF8;
    v221 = v307;
    v222 = vdupq_n_s32(v210);
    v223 = vdupq_n_s32(v211);
    v224.i64[0] = 0x2000000020;
    v224.i64[1] = 0x2000000020;
    v225 = vdupq_n_s32(v212);
    v226.i64[0] = 0xFF000000FFLL;
    v226.i64[1] = 0xFF000000FFLL;
    v227 = vdupq_n_s32(v213);
    v228 = 0uLL;
    v229 = vdupq_n_s32(v215);
    v230 = vdupq_n_s32(v216);
    v320 = v230;
    v323 = v222;
    v328 = v219;
    v331 = v218;
    while (1)
    {
      if (v324 < 8)
      {
        i = 0;
        goto LABEL_96;
      }
      v232 = &v26[v207 * *(_QWORD *)v325];
      if ((unint64_t)(v232 - &v317[v207 * v12]) < 0x10
        || (unint64_t)(v232 - &v314[v207 * v12]) < 0x10
        || (unint64_t)(v232 - &v312[v207 * v12]) < 0x10
        || (unint64_t)(v232 - &v310[v207 * v12]) < 0x10
        || (unint64_t)(v232 - &__src[v207 * v12]) < 0x10
        || (unint64_t)(v232 - &v309[v207 * v12]) < 0x10
        || (unint64_t)(v232 - &v308[v207 * v12]) < 0x10
        || (unint64_t)(v232 - &v307[v207 * v12]) < 0x10)
      {
        for (i = 0; i != v324; result[i++] = v306 & ~(v306 >> 31))
        {
LABEL_96:
          v299 = &v221[i + v12];
          v300 = *v299 * v209;
          v301 = (unsigned __int8 *)&v299[v12];
          v302 = *v301;
          v303 = &v301[v12];
          v304 = *v303;
          v305 = &v303[v12];
          v306 = (int)(v300
                     + v221[i] * v208
                     + v302 * v210
                     + v304 * v211
                     + *v305 * v212
                     + v305[v12] * v213
                     + v305[v12 + v12] * v215
                     + v305[v12 + v12 + v12] * v216
                     + 32) >> 6;
          if (v306 >= 255)
            v306 = 255;
        }
        goto LABEL_62;
      }
      if (v324 >= 0x10)
      {
        v241 = 0;
        do
        {
          v242 = *(int8x16_t *)&v221[v241];
          v341 = (int32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_196889CA0);
          v339 = (int32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_196889CB0);
          v337 = (int32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_196889CD0);
          v243 = (int32x4_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_196889CC0);
          v244 = (int8x16_t *)&v221[v241 + v12];
          v245 = (int32x4_t)vqtbl1q_s8(*v244, (int8x16_t)xmmword_196889CA0);
          v246 = v223;
          v247 = (int32x4_t)vqtbl1q_s8(*v244, (int8x16_t)xmmword_196889CB0);
          v19 = (int8x16_t)v225;
          v248 = (int32x4_t)vqtbl1q_s8(*v244, (int8x16_t)xmmword_196889CD0);
          v249 = (int32x4_t)vqtbl1q_s8(*v244, (int8x16_t)xmmword_196889CC0);
          v250 = (int8x16_t *)((char *)v244 + v12);
          v251 = v227;
          v252 = (int32x4_t)vqtbl1q_s8(*v250, (int8x16_t)xmmword_196889CC0);
          v253 = (int32x4_t)vqtbl1q_s8(*v250, (int8x16_t)xmmword_196889CD0);
          v254 = v229;
          v255 = (int32x4_t)vqtbl1q_s8(*v250, (int8x16_t)xmmword_196889CB0);
          v256 = (int32x4_t)vqtbl1q_s8(*v250, (int8x16_t)xmmword_196889CA0);
          v257 = (int8x16_t *)((char *)v250 + v12);
          v258 = (int32x4_t)vqtbl1q_s8(*v257, (int8x16_t)xmmword_196889CA0);
          v259 = (int32x4_t)vqtbl1q_s8(*v257, (int8x16_t)xmmword_196889CB0);
          v260 = (int32x4_t)vqtbl1q_s8(*v257, (int8x16_t)xmmword_196889CD0);
          v261 = (int32x4_t)vqtbl1q_s8(*v257, (int8x16_t)xmmword_196889CC0);
          v262 = (int8x16_t *)((char *)v257 + v12);
          v263 = (int32x4_t)vqtbl1q_s8(*v262, (int8x16_t)xmmword_196889CC0);
          v20 = vqtbl1q_s8(*v262, (int8x16_t)xmmword_196889CD0);
          v22 = vqtbl1q_s8(*v262, (int8x16_t)xmmword_196889CB0);
          v264 = (int32x4_t)vqtbl1q_s8(*v262, (int8x16_t)xmmword_196889CA0);
          v265 = (int8x16_t *)((char *)v262 + v12);
          v266 = (int32x4_t)vqtbl1q_s8(*v265, (int8x16_t)xmmword_196889CA0);
          v267 = (int32x4_t)vqtbl1q_s8(*v265, (int8x16_t)xmmword_196889CB0);
          v268 = (int32x4_t)vqtbl1q_s8(*v265, (int8x16_t)xmmword_196889CD0);
          v269 = (int32x4_t)vqtbl1q_s8(*v265, (int8x16_t)xmmword_196889CC0);
          v270 = (int8x16_t *)((char *)v265 + v12);
          v271 = *(int8x16_t *)((char *)v270 + v12);
          v24 = vqtbl1q_s8(v271, (int8x16_t)xmmword_196889CB0);
          v25 = vqtbl1q_s8(v271, (int8x16_t)xmmword_196889CD0);
          v272 = vmlaq_s32(vmulq_s32(v328, v245), v331, v341);
          v273 = vmulq_s32(v328, v247);
          v223 = v246;
          v274 = vmulq_s32(v328, v248);
          v225 = (int32x4_t)v19;
          v275 = vmlaq_s32(vmulq_s32(v328, v249), v331, v243);
          v222 = v323;
          v276 = vmlaq_s32(v275, v323, v252);
          v227 = v251;
          v277 = vmlaq_s32(vmlaq_s32(v274, v331, v337), v323, v253);
          v228 = 0uLL;
          v278 = vmlaq_s32(vmlaq_s32(v273, v331, v339), v323, v255);
          v229 = v254;
          v279 = vmlaq_s32(v272, v323, v256);
          v226.i64[0] = 0xFF000000FFLL;
          v226.i64[1] = 0xFF000000FFLL;
          v280 = vmlaq_s32(v276, v246, v261);
          v230 = v320;
          v281 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v279, v246, v258), (int32x4_t)v19, v264), v251, v266), v254, (int32x4_t)vqtbl1q_s8(*v270, (int8x16_t)xmmword_196889CA0)), v320, (int32x4_t)vqtbl1q_s8(v271, (int8x16_t)xmmword_196889CA0));
          v23 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v277, v246, v260), (int32x4_t)v19, (int32x4_t)v20), v251, v268), v254, (int32x4_t)vqtbl1q_s8(*v270, (int8x16_t)xmmword_196889CD0)), v320, (int32x4_t)v25);
          v282 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v280, (int32x4_t)v19, v263), v251, v269), v254, (int32x4_t)vqtbl1q_s8(*v270, (int8x16_t)xmmword_196889CC0)), v320, (int32x4_t)vqtbl1q_s8(v271, (int8x16_t)xmmword_196889CC0));
          v271.i64[0] = 0x2000000020;
          v271.i64[1] = 0x2000000020;
          v283 = vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v278, v246, v259), (int32x4_t)v19, (int32x4_t)v22), v251, v267), v254, (int32x4_t)vqtbl1q_s8(*v270, (int8x16_t)xmmword_196889CB0)), v320, (int32x4_t)v24), (int32x4_t)v271);
          v224.i64[0] = 0x2000000020;
          v224.i64[1] = 0x2000000020;
          v18 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v281, v224), 6uLL), v226), (int32x4_t)0);
          v284 = vmaxq_s32(vminq_s32(vshrq_n_s32(v283, 6uLL), v226), (int32x4_t)0);
          v285 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)v23, v224), 6uLL), v226), (int32x4_t)0);
          v286 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v282, v224), 6uLL), v226), (int32x4_t)0);
          v17 = vqtbl4q_s8(*(int8x16x4_t *)(&v18 - 3), (int8x16_t)xmmword_19689A980);
          *(int8x16_t *)&result[v241] = v17;
          v241 += 16;
        }
        while (v217 != v241);
        v219 = v328;
        v218 = v331;
        if (v217 == v324)
          goto LABEL_62;
        v240 = v217;
        i = v217;
        if ((v214 & 8) == 0)
          goto LABEL_96;
      }
      else
      {
        v240 = 0;
      }
      do
      {
        v17.i64[0] = *(_QWORD *)&v221[v240];
        v287 = (uint64_t *)&v221[v240 + v12];
        v18.i64[0] = *v287;
        v288 = (uint64_t *)((char *)v287 + v12);
        v19.i64[0] = *v288;
        v289 = (int32x4_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_196889CC0);
        v19 = vqtbl1q_s8(v19, (int8x16_t)xmmword_196889CD0);
        v290 = (uint64_t *)((char *)v288 + v12);
        v20.i64[0] = *v290;
        v291 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CD0);
        v20 = vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CC0);
        v292 = (uint64_t *)((char *)v290 + v12);
        v22.i64[0] = *v292;
        v293 = (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CC0);
        v22 = vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CD0);
        v294 = (uint64_t *)((char *)v292 + v12);
        v23.i64[0] = *v294;
        v295 = (int32x4_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_196889CD0);
        v23 = vqtbl1q_s8(v23, (int8x16_t)xmmword_196889CC0);
        v296 = (uint64_t *)((char *)v294 + v12);
        v24.i64[0] = *v296;
        v297 = (int32x4_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_196889CC0);
        v24 = vqtbl1q_s8(v24, (int8x16_t)xmmword_196889CD0);
        v25.i64[0] = *(uint64_t *)((char *)v296 + v12);
        v298 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v219, (int32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CD0)), v218, (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CD0)), v222, (int32x4_t)v19), v223, v291), v225, (int32x4_t)v22), v227, v295), v229, (int32x4_t)v24),
                 v230,
                 (int32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_196889CD0));
        v18 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v219, (int32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CC0)), v218, (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CC0)), v222, v289), v223, (int32x4_t)v20), v225, v293), v227, (int32x4_t)v23), v229, v297),
                           v230,
                           (int32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_196889CC0));
        v346.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v298, v224), 6uLL), v226), v228);
        v346.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)v18, v224), 6uLL), v226), v228);
        v17 = vqtbl2q_s8(v346, (int8x16_t)xmmword_19689A990);
        *(_QWORD *)&result[v240] = v17.i64[0];
        v240 += 8;
      }
      while (v220 != v240);
      i = v220;
      if (v220 != v324)
        goto LABEL_96;
LABEL_62:
      result += *(_QWORD *)v325;
      ++v207;
      v221 += v12;
      if (!--v206)
        return result;
    }
  }
  if (v13 >= 1)
  {
    v29 = v14;
    v30 = 0;
    v31 = vmovl_s8(*v28);
    v32 = vmovl_high_s16(v31);
    v33 = vmovl_s16(*(int16x4_t *)v31.i8);
    v34 = v13;
    v35 = v13 + 4;
    v36 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 0);
    v37 = vdupq_lane_s32(*(int32x2_t *)v33.i8, 1);
    v38 = vdupq_laneq_s32(v33, 2);
    v39 = vdupq_laneq_s32(v33, 3);
    v40 = vdupq_lane_s32(*(int32x2_t *)v32.i8, 0);
    v41 = vdupq_lane_s32(*(int32x2_t *)v32.i8, 1);
    v42 = v13 & 0xFFFFFFF0;
    v43 = vdupq_laneq_s32(v32, 2);
    v44 = vdupq_laneq_s32(v32, 3);
    v45 = v13 & 0xFFFFFFF8;
    v46.i64[0] = 0x2200000022;
    v46.i64[1] = 0x2200000022;
    v47.i64[0] = 0xFF000000FFLL;
    v47.i64[1] = 0xFF000000FFLL;
    v48 = 0uLL;
    result = (char *)&unk_196889000;
    v49 = __src;
    v50 = v26;
    v319 = v32;
    v321 = v41;
    v315 = v33;
    v326 = v38;
    v329 = v37;
    do
    {
      if (v324 < 8)
      {
        j = 0;
        goto LABEL_23;
      }
      v52 = &__src[v30 * v12];
      v53 = &v52[v35];
      v54 = v52 - 3;
      if (v50 < v53 && v54 < &v26[v324 + v30 * *(_QWORD *)v325])
      {
        for (j = 0; j != v324; v50[j++] = v93 & ~(v93 >> 31))
        {
LABEL_23:
          v17.i64[0] = *(_QWORD *)&v49[j - 3];
          v17 = (int8x16_t)vmlaq_s32(vmulq_s32((int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CD0), v32), (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CC0), v33);
          v93 = (vaddvq_s32((int32x4_t)v17) + 34) >> 6;
          if (v93 >= 255)
            v93 = 255;
        }
        goto LABEL_7;
      }
      if (v324 >= 0x10)
      {
        v57 = 0;
        do
        {
          v58 = *(int8x16_t *)&v49[v57 - 3];
          v59 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CA0);
          v60 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CB0);
          v61 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CD0);
          v62 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CC0);
          v63 = *(int8x16_t *)&v49[v57 - 2];
          v64 = *(int8x16_t *)&v49[v57 - 1];
          v19.i64[1] = v44.i64[1];
          v65 = *(int8x16_t *)&v49[v57];
          v66 = (int32x4_t)vqtbl1q_s8(v65, (int8x16_t)xmmword_196889CA0);
          v67 = (int32x4_t)vqtbl1q_s8(v65, (int8x16_t)xmmword_196889CB0);
          v22 = vqtbl1q_s8(v65, (int8x16_t)xmmword_196889CD0);
          v68 = *(int8x16_t *)&v49[v57 + 1];
          v23 = vqtbl1q_s8(v68, (int8x16_t)xmmword_196889CC0);
          v69 = *(int8x16_t *)&v49[v57 + 2];
          v70 = *(int8x16_t *)&v49[v57 + 3];
          v334 = (int32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_196889CC0);
          v335 = (int32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_196889CD0);
          v338 = (int32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_196889CB0);
          v20 = vqtbl1q_s8(v70, (int8x16_t)xmmword_196889CA0);
          v71 = *(int8x16_t *)&v49[v57 + 4];
          v25 = vqtbl1q_s8(v71, (int8x16_t)xmmword_196889CB0);
          v72 = vmlaq_s32(vmulq_s32(v329, (int32x4_t)vqtbl1q_s8(v63, (int8x16_t)xmmword_196889CA0)), v36, v59);
          v73 = vmulq_s32(v329, (int32x4_t)vqtbl1q_s8(v63, (int8x16_t)xmmword_196889CB0));
          v74 = vmulq_s32(v329, (int32x4_t)vqtbl1q_s8(v63, (int8x16_t)xmmword_196889CD0));
          v75 = vmlaq_s32(vmulq_s32(v329, (int32x4_t)vqtbl1q_s8(v63, (int8x16_t)xmmword_196889CC0)), v36, v62);
          v38 = v326;
          v76 = vmlaq_s32(v75, v326, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_196889CC0));
          v77 = vmlaq_s32(vmlaq_s32(v74, v36, v61), v326, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_196889CD0));
          v78 = vmlaq_s32(vmlaq_s32(v73, v36, v60), v326, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_196889CB0));
          v46.i64[0] = 0x2200000022;
          v46.i64[1] = 0x2200000022;
          v79 = vmlaq_s32(v72, v326, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_196889CA0));
          v41 = v321;
          v80 = vmlaq_s32(v76, v39, (int32x4_t)vqtbl1q_s8(v65, (int8x16_t)xmmword_196889CC0));
          v48 = 0uLL;
          v24 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v77, v39, (int32x4_t)v22), v40, (int32x4_t)vqtbl1q_s8(v68, (int8x16_t)xmmword_196889CD0)), v321, (int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_196889CD0)), v43, v335), v44, (int32x4_t)vqtbl1q_s8(v71, (int8x16_t)xmmword_196889CD0));
          v81 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v80, v40, (int32x4_t)v23), v321, (int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_196889CC0)), v43, v334), v44, (int32x4_t)vqtbl1q_s8(v71, (int8x16_t)xmmword_196889CC0));
          v82 = vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v79, v39, v66), v40, (int32x4_t)vqtbl1q_s8(v68, (int8x16_t)xmmword_196889CA0)), v321, (int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_196889CA0)), v43, (int32x4_t)v20), v44, (int32x4_t)vqtbl1q_s8(v71, (int8x16_t)xmmword_196889CA0)), v46);
          v47.i64[0] = 0xFF000000FFLL;
          v47.i64[1] = 0xFF000000FFLL;
          v83 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v78, v39, v67), v40, (int32x4_t)vqtbl1q_s8(v68, (int8x16_t)xmmword_196889CB0)), v321, (int32x4_t)vqtbl1q_s8(v69, (int8x16_t)xmmword_196889CB0)), v43, v338), v44, (int32x4_t)v25), v46), 6uLL), v47);
          v18 = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(v82, 6uLL), v47), (int32x4_t)0);
          v84 = vmaxq_s32(v83, (int32x4_t)0);
          v85 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)v24, v46), 6uLL), v47), (int32x4_t)0);
          v86 = vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v81, v46), 6uLL), v47), (int32x4_t)0);
          v17 = vqtbl4q_s8(*(int8x16x4_t *)(&v18 - 3), (int8x16_t)xmmword_19689A980);
          *(int8x16_t *)&v50[v57] = v17;
          v57 += 16;
        }
        while (v42 != v57);
        v32 = v319;
        v33 = v315;
        v37 = v329;
        if (v42 == v324)
          goto LABEL_7;
        v56 = v42;
        j = v42;
        if ((v34 & 8) == 0)
          goto LABEL_23;
      }
      else
      {
        v56 = 0;
      }
      do
      {
        v17.i64[0] = *(_QWORD *)&v49[v56 - 3];
        v18.i64[0] = *(_QWORD *)&v49[v56 - 2];
        v19.i64[0] = *(_QWORD *)&v49[v56 - 1];
        v87 = (int32x4_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_196889CC0);
        v19 = vqtbl1q_s8(v19, (int8x16_t)xmmword_196889CD0);
        v20.i64[0] = *(_QWORD *)&v49[v56];
        v88 = (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CD0);
        v20 = vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CC0);
        v22.i64[0] = *(_QWORD *)&v49[v56 + 1];
        v89 = (int32x4_t)vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CC0);
        v22 = vqtbl1q_s8(v22, (int8x16_t)xmmword_196889CD0);
        v23.i64[0] = *(_QWORD *)&v49[v56 + 2];
        v90 = (int32x4_t)vqtbl1q_s8(v23, (int8x16_t)xmmword_196889CD0);
        v23 = vqtbl1q_s8(v23, (int8x16_t)xmmword_196889CC0);
        v24.i64[0] = *(_QWORD *)&v49[v56 + 3];
        v91 = (int32x4_t)vqtbl1q_s8(v24, (int8x16_t)xmmword_196889CC0);
        v24 = vqtbl1q_s8(v24, (int8x16_t)xmmword_196889CD0);
        v25.i64[0] = *(_QWORD *)&v49[v56 + 4];
        v92 = vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v37, (int32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CD0)), v36, (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CD0)), v38, (int32x4_t)v19), v39, v88), v40, (int32x4_t)v22), v41, v90), v43, (int32x4_t)v24),
                v44,
                (int32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_196889CD0));
        v18 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v37, (int32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CC0)), v36, (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CC0)), v38, v87), v39, (int32x4_t)v20), v40, v89), v41, (int32x4_t)v23), v43, v91),
                           v44,
                           (int32x4_t)vqtbl1q_s8(v25, (int8x16_t)xmmword_196889CC0));
        v345.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(v92, v46), 6uLL), v47), v48);
        v345.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32((int32x4_t)v18, v46), 6uLL), v47), v48);
        v17 = vqtbl2q_s8(v345, (int8x16_t)xmmword_19689A990);
        *(_QWORD *)&v50[v56] = v17.i64[0];
        v56 += 8;
      }
      while (v45 != v56);
      j = v45;
      if (v45 != v324)
        goto LABEL_23;
LABEL_7:
      v50 += *(_QWORD *)v325;
      v49 += v12;
      ++v30;
      --v29;
    }
    while (v29);
  }
  return result;
}

void *put_c_0(char *__dst, uint64_t a2, char *__src, uint64_t a4, int a5, int a6)
{
  size_t v11;
  void *result;

  v11 = a5;
  do
  {
    result = memcpy(__dst, __src, v11);
    __dst += a2;
    __src += a4;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t put_8tap_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, unsigned int a11)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned int v32;
  int16x8_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t i;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  int16x8_t *v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t *v65;
  int16x8_t v66;
  int v67;
  uint64_t v68;
  int16x8_t *v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int32x4_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int16x8_t v102;
  uint64_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int32x4_t v111;
  __int16 *v112;
  int v113;
  char v114;
  _QWORD v115[8322];
  int8x16x2_t v116;
  int8x16x2_t v117;
  int8x16x4_t v118;
  int8x16x4_t v119;

  result = MEMORY[0x1E0C80A78]();
  v115[8320] = *MEMORY[0x1E0C80C00];
  if ((int)v15 >= 1)
  {
    v19 = v13 - 3 * v14;
    v20 = ((v18 + (v16 - 1) * a10) >> 10) + 8;
    v21 = &v114;
    do
    {
      v22 = 0;
      v23 = 0;
      v24 = v17;
      do
      {
        if (v24 < 0x40)
        {
          LOWORD(v25) = 16 * *(unsigned __int8 *)(v19 + v23);
        }
        else
        {
          v26 = 8 * (v24 >> 6) - 8;
          v27 = (char *)&dav1d_mc_subpel_filters + 120 * (a11 & 1) + v26 + 360;
          v28 = (char *)&dav1d_mc_subpel_filters + 120 * (a11 & 3) + v26;
          if ((int)v15 <= 4)
            v28 = v27;
          v29 = (unsigned __int8 *)(v19 + v23);
          v25 = (*(v29 - 2) * v28[1]
               + *(v29 - 3) * *v28
               + *(v29 - 1) * v28[2]
               + *v29 * v28[3]
               + v29[1] * v28[4]
               + v29[2] * v28[5]
               + v29[3] * v28[6]
               + v29[4] * v28[7]
               + 2) >> 2;
        }
        *(_WORD *)&v21[v22] = v25;
        v23 += (v24 + a9) >> 10;
        v24 = (v24 + a9) & 0x3FF;
        v22 += 2;
      }
      while (2 * v15 != v22);
      v21 += 256;
      v19 += v14;
      --v20;
    }
    while (v20);
    v30 = v18;
    if (v16 >= 1)
    {
      v31 = 0;
      v32 = a11 >> 2;
      v33 = (int16x8_t *)v115;
      if (v16 <= 4)
        v32 = ((a11 >> 2) & 1) + 3;
      v34 = v15 & 0xFFFFFFF0;
      v35 = v15 & 0xFFFFFFF8;
      v36 = (char *)&dav1d_mc_subpel_filters + 120 * v32;
      v37.i64[0] = 0x800000008;
      v37.i64[1] = 0x800000008;
      v38.i64[0] = 0xFF000000FFLL;
      v38.i64[1] = 0xFF000000FFLL;
      v39.i64[0] = 0x20000000200;
      v39.i64[1] = 0x20000000200;
      do
      {
        if (v30 > 0x3F)
        {
          v41 = &v36[8 * (v30 >> 6)];
          v42 = *(v41 - 8);
          v43 = *(v41 - 7);
          v44 = *(v41 - 6);
          v45 = *(v41 - 5);
          v46 = *(v41 - 4);
          v47 = *(v41 - 3);
          v48 = *(v41 - 2);
          v49 = *(v41 - 1);
          if (v15 < 8)
          {
            v50 = 0;
LABEL_43:
            v112 = &v33[-48].i16[v50];
            do
            {
              v113 = (int)(v112[128] * v43
                         + *v112 * v42
                         + v112[256] * v44
                         + v112[384] * v45
                         + v112[512] * v46
                         + v112[640] * v47
                         + v112[768] * v48
                         + v112[896] * v49
                         + 512) >> 10;
              if (v113 >= 255)
                v113 = 255;
              *(_BYTE *)(result + v50++) = v113 & ~(v113 >> 31);
              ++v112;
            }
            while (v15 != v50);
            goto LABEL_15;
          }
          v52 = vdupq_n_s32(v42);
          v53 = vdupq_n_s32(v43);
          v54 = vdupq_n_s32(v44);
          v55 = vdupq_n_s32(v45);
          v56 = vdupq_n_s32(v46);
          v57 = vdupq_n_s32(v47);
          v58 = vdupq_n_s32(v48);
          v59 = vdupq_n_s32(v49);
          if (v15 >= 0x10)
          {
            v68 = 0;
            v69 = v33 - 48;
            do
            {
              v70 = v69[1];
              v71 = v69[16];
              v72 = v69[17];
              v73 = vmlaq_s32(vmulq_s32(v53, vmovl_high_s16(v72)), v52, vmovl_high_s16(v70));
              v74 = vmovl_high_s16(v71);
              v75 = vmulq_s32(v53, vmovl_s16(*(int16x4_t *)v71.i8));
              v76 = vmlaq_s32(vmulq_s32(v53, vmovl_s16(*(int16x4_t *)v72.i8)), v52, vmovl_s16(*(int16x4_t *)v70.i8));
              v78 = v69[32];
              v77 = v69[33];
              v79 = vmlaq_s32(vmlaq_s32(v75, v52, vmovl_s16(*(int16x4_t *)v69->i8)), v54, vmovl_s16(*(int16x4_t *)v78.i8));
              v80 = vmlaq_s32(v76, v54, vmovl_s16(*(int16x4_t *)v77.i8));
              v81 = vmlaq_s32(vmlaq_s32(vmulq_s32(v53, v74), v52, vmovl_high_s16(*v69)), v54, vmovl_high_s16(v78));
              v83 = v69[48];
              v82 = v69[49];
              v84 = vmlaq_s32(vmlaq_s32(v73, v54, vmovl_high_s16(v77)), v55, vmovl_high_s16(v82));
              v85 = vmlaq_s32(v81, v55, vmovl_high_s16(v83));
              v86 = v69[65];
              v87 = vmlaq_s32(v80, v55, vmovl_s16(*(int16x4_t *)v82.i8));
              v88 = v69[64];
              v89 = vmlaq_s32(vmlaq_s32(v79, v55, vmovl_s16(*(int16x4_t *)v83.i8)), v56, vmovl_s16(*(int16x4_t *)v88.i8));
              v90 = vmlaq_s32(v87, v56, vmovl_s16(*(int16x4_t *)v86.i8));
              v91 = v69[80];
              v92 = vmlaq_s32(v85, v56, vmovl_high_s16(v88));
              v93 = v69[81];
              v94 = vmlaq_s32(vmlaq_s32(v84, v56, vmovl_high_s16(v86)), v57, vmovl_high_s16(v93));
              v95 = vmlaq_s32(v92, v57, vmovl_high_s16(v91));
              v96 = v69[97];
              v97 = vmlaq_s32(v90, v57, vmovl_s16(*(int16x4_t *)v93.i8));
              v98 = v69[96];
              v99 = vmlaq_s32(vmlaq_s32(v89, v57, vmovl_s16(*(int16x4_t *)v91.i8)), v58, vmovl_s16(*(int16x4_t *)v98.i8));
              v100 = v69[112];
              v101 = vmlaq_s32(v95, v58, vmovl_high_s16(v98));
              v102 = v69[113];
              v119.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(v94, v58, vmovl_high_s16(v96)), v59, vmovl_high_s16(v102)), v39), 0xAuLL), v38), (int32x4_t)0);
              v119.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v101, v59, vmovl_high_s16(v100)), v39), 0xAuLL), v38), (int32x4_t)0);
              v119.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(v97, v58, vmovl_s16(*(int16x4_t *)v96.i8)), v59, vmovl_s16(*(int16x4_t *)v102.i8)), v39), 0xAuLL), v38), (int32x4_t)0);
              v119.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(v99, v59, vmovl_s16(*(int16x4_t *)v100.i8)), v39), 0xAuLL), v38), (int32x4_t)0);
              *(int8x16_t *)(result + v68) = vqtbl4q_s8(v119, (int8x16_t)xmmword_19689A980);
              v68 += 16;
              v69 += 2;
            }
            while (v34 != v68);
            if (v34 == v15)
              goto LABEL_15;
            v60 = v15 & 0xFFFFFFF0;
            v50 = v60;
            if ((v15 & 8) == 0)
              goto LABEL_43;
          }
          else
          {
            v60 = 0;
          }
          v103 = (uint64_t)v33[-48].i64 + 2 * v60;
          do
          {
            v104 = *(int16x8_t *)(v103 + 256);
            v105 = *(int16x8_t *)(v103 + 512);
            v106 = *(int16x8_t *)(v103 + 768);
            v107 = *(int16x8_t *)(v103 + 1024);
            v108 = *(int16x8_t *)(v103 + 1280);
            v109 = *(int16x8_t *)(v103 + 1536);
            v110 = *(int16x8_t *)(v103 + 1792);
            v111 = vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v53, vmovl_s16(*(int16x4_t *)v104.i8)), v52, vmovl_s16(*(int16x4_t *)v103)), v54, vmovl_s16(*(int16x4_t *)v105.i8)), v55, vmovl_s16(*(int16x4_t *)v106.i8)), v56, vmovl_s16(*(int16x4_t *)v107.i8)), v57,
                               vmovl_s16(*(int16x4_t *)v108.i8)),
                             v58,
                             vmovl_s16(*(int16x4_t *)v109.i8)),
                           v59,
                           vmovl_s16(*(int16x4_t *)v110.i8)),
                         v39),
                       0xAuLL),
                     v38);
            v117.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v53, vmovl_high_s16(v104)), v52, vmovl_high_s16(*(int16x8_t *)v103)), v54, vmovl_high_s16(v105)), v55, vmovl_high_s16(v106)), v56, vmovl_high_s16(v107)),
                                                   v57,
                                                   vmovl_high_s16(v108)),
                                                 v58,
                                                 vmovl_high_s16(v109)),
                                               v59,
                                               vmovl_high_s16(v110)),
                                             v39),
                                           0xAuLL),
                                         v38),
                                       (int32x4_t)0);
            v117.val[0] = (int8x16_t)vmaxq_s32(v111, (int32x4_t)0);
            *(_QWORD *)(result + v60) = vqtbl2q_s8(v117, (int8x16_t)xmmword_19689A990).u64[0];
            v60 += 8;
            v103 += 16;
          }
          while (v35 != v60);
          v50 = v15 & 0xFFFFFFF8;
          if (v35 != v15)
            goto LABEL_43;
        }
        else
        {
          if (v15 < 8)
          {
            for (i = 0; i != v15; *(_BYTE *)(result + i++) = v67 & ~(v67 >> 31))
            {
LABEL_32:
              v67 = (v33->i16[i] + 8) >> 4;
              if (v67 >= 255)
                v67 = 255;
            }
            goto LABEL_15;
          }
          if (v15 >= 0x10)
          {
            v61 = 0;
            v62 = v33;
            do
            {
              v63 = *v62;
              v64 = v62[1];
              v62 += 2;
              v118.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddw_high_s16(v37, v64), 4uLL), v38), (int32x4_t)0);
              v118.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddw_high_s16(v37, v63), 4uLL), v38), (int32x4_t)0);
              v118.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddw_s16(v37, *(int16x4_t *)v64.i8), 4uLL), v38), (int32x4_t)0);
              v118.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddw_s16(v37, *(int16x4_t *)v63.i8), 4uLL), v38), (int32x4_t)0);
              *(int8x16_t *)(result + v61) = vqtbl4q_s8(v118, (int8x16_t)xmmword_19689A980);
              v61 += 16;
            }
            while (v34 != v61);
            if (v34 == v15)
              goto LABEL_15;
            v51 = v15 & 0xFFFFFFF0;
            i = v51;
            if ((v15 & 8) == 0)
              goto LABEL_32;
          }
          else
          {
            v51 = 0;
          }
          v65 = (int16x8_t *)((char *)v33 + 2 * v51);
          do
          {
            v66 = *v65++;
            v116.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddw_high_s16(v37, v66), 4uLL), v38), (int32x4_t)0);
            v116.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vshrq_n_s32(vaddw_s16(v37, *(int16x4_t *)v66.i8), 4uLL), v38), (int32x4_t)0);
            *(_QWORD *)(result + v51) = vqtbl2q_s8(v116, (int8x16_t)xmmword_19689A990).u64[0];
            v51 += 8;
          }
          while (v35 != v51);
          i = v15 & 0xFFFFFFF8;
          if (v35 != v15)
            goto LABEL_32;
        }
LABEL_15:
        v33 = (int16x8_t *)((char *)v33 + 2 * (int)(((v30 + a10) >> 3) & 0xFFFFFF80));
        v30 = (v30 + a10) & 0x3FF;
        result += v12;
        ++v31;
      }
      while (v31 != v16);
    }
  }
  return result;
}

unint64_t prep_8tap_c_0(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint8x8_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  int8x8_t *v24;
  uint64_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  int32x4_t v41;
  unint64_t v42;
  uint8x8_t *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  int8x16_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  unsigned int v77;
  char *v78;
  char *v79;
  int v80;
  uint64_t v81;
  int32x4_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int8x16_t *v91;
  _BYTE *v92;
  __int16 *v93;
  int8x16_t *v94;
  int8x16_t *v95;
  int8x8_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t *v105;
  int8x16_t v106;
  int8x16_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int32x4_t v112;
  int16x8_t *v113;
  int8x8_t v114;
  int v115;
  int32x4_t v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  _BYTE *v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int16x8_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int16x8_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  char *v165;
  int32x4_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  BOOL v171;
  BOOL v173;
  BOOL v175;
  BOOL v177;
  BOOL v179;
  BOOL v181;
  BOOL v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int8x16_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int8x16_t *v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int8x16_t *v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int8x16_t *v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int8x16_t *v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int8x16_t *v216;
  int32x4_t v217;
  int8x16_t *v218;
  int8x16_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int32x4_t v234;
  uint64_t *v235;
  int32x4_t v236;
  uint64_t *v237;
  int32x4_t v238;
  uint64_t *v239;
  int32x4_t v240;
  uint64_t *v241;
  int32x4_t v242;
  uint64_t *v243;
  int32x4_t v244;
  uint64_t *v245;
  int32x4_t v246;
  int32x4_t v247;
  char *v248;
  int v249;
  unsigned __int8 *v250;
  int v251;
  unsigned __int8 *v252;
  int v253;
  unsigned __int8 *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  uint64_t v266;
  char *v267;
  int32x4_t v268;
  int v269;
  int32x4_t v270;
  uint64_t v271;
  int32x4_t v272;
  unsigned int v273;
  uint8x8_t *v274;
  int v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int8x16_t v295;
  int32x4_t v296;
  int8x16_t v297;
  _BYTE v298[34560];
  uint64_t v299;
  int8x16x2_t v300;
  int8x16x2_t v301;
  int8x16x2_t v302;
  int8x16x2_t v303;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v21 = v5;
  v274 = v3;
  v22 = result;
  v299 = *MEMORY[0x1E0C80C00];
  if (!v7)
  {
    if (!v8)
      return prep_c_0(result, v3, v4, v5, v6);
    v24 = 0;
    goto LABEL_28;
  }
  v23 = v9 & 3;
  if ((int)v5 <= 4)
    v23 = (v9 & 1) + 3;
  v24 = (int8x8_t *)&dav1d_mc_subpel_filters[120 * v23 - 8 + 8 * v7];
  if (v8)
  {
LABEL_28:
    v77 = v9 >> 2;
    if (v6 <= 4)
      v77 = ((v9 >> 2) & 1) + 3;
    v78 = &dav1d_mc_subpel_filters[120 * v77 - 8 + 8 * v8];
    v273 = v5;
    if (v24)
    {
      if ((int)v5 < 1)
        return result;
      v267 = &dav1d_mc_subpel_filters[120 * v77 - 8 + 8 * v8];
      v79 = (char *)v3 - 3 * v4;
      v269 = v6;
      v80 = v6 + 7;
      v81 = v5;
      v10.i32[0] = v24->i32[0];
      v82 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v10.i8));
      v83 = v24->i8[4];
      v84 = v24->i8[5];
      v85 = v24->i8[6];
      v86 = v24->i8[7];
      v271 = v5 & 0xFFFFFFF0;
      v87 = vdupq_lane_s32(*(int32x2_t *)v82.i8, 0);
      v88 = vdupq_laneq_s32(v82, 3);
      v89 = vdupq_n_s32(v83);
      v90 = vdupq_n_s32(v84);
      v91 = (int8x16_t *)(v79 + 4);
      v92 = v298;
      v93 = dav1d_gaussian_sequence + 2496;
      v94 = (int8x16_t *)&unk_196889000;
      v95 = (int8x16_t *)&unk_196889000;
      v268 = v82;
      v283 = vdupq_n_s32(v86);
      v286 = vdupq_n_s32(v85);
      v277 = vdupq_lane_s32(*(int32x2_t *)v82.i8, 1);
      v280 = vdupq_laneq_s32(v82, 2);
      while (1)
      {
        v15.i32[0] = *(_DWORD *)(v79 - 3);
        v96 = (int8x8_t)vmovl_u8(*(uint8x8_t *)v15.i8).u64[0];
        v97 = v79[2];
        v98 = v79[3];
        v275 = v80;
        v99 = 0;
        if (v273 >= 0x10)
        {
          v100 = vdupq_n_s8(v98);
          v101 = vdupq_n_s8(v97);
          v16.i8[12] = v96.i8[0];
          v16.i8[13] = v96.i8[2];
          v16.i8[14] = v96.i8[4];
          v16.i8[15] = v96.i8[6];
          v102 = vdupq_lane_s8(v96, 4);
          v103 = vdupq_lane_s8(v96, 2);
          v104 = vdupq_lane_s8(v96, 0);
          v105 = v91;
          do
          {
            v106 = v16;
            v107 = v100;
            v16 = *(int8x16_t *)((char *)v105 - 3);
            v301.val[1] = vextq_s8(v106, v16, 0xFuLL);
            v295 = v94[204];
            v297 = v95[205];
            v108 = (int32x4_t)vqtbl1q_s8(v16, v295);
            v291 = (int32x4_t)vqtbl1q_s8(v16, v297);
            v302.val[1] = vextq_s8(v102, v301.val[1], 0xFuLL);
            v301.val[0] = vqtbl1q_s8(v102, (int8x16_t)xmmword_19689ADA0);
            v303.val[1] = vextq_s8(v103, v302.val[1], 0xFuLL);
            v303.val[0] = vqtbl1q_s8(v104, (int8x16_t)xmmword_19689ADA0);
            v15 = vqtbl1q_s8(v106, (int8x16_t)xmmword_19689ADA0);
            v109 = *v105++;
            v100 = v109;
            v300.val[1] = vextq_s8(v107, v109, 0xFuLL);
            v300.val[0] = vqtbl1q_s8(v101, (int8x16_t)xmmword_19689ADA0);
            v302.val[0] = vqtbl1q_s8(v103, (int8x16_t)xmmword_19689ADA0);
            v110 = *((int8x16_t *)v93 + 219);
            v111 = vqtbl1q_s8(v107, (int8x16_t)xmmword_19689ADA0);
            v112 = (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_196889CB0);
            v101 = v300.val[1];
            v113 = (int16x8_t *)&v92[v99];
            *v113 = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v277, (int32x4_t)vqtbl2q_s8(v302, v110)), v87, (int32x4_t)vqtbl2q_s8(v303, v110)), v280, (int32x4_t)vqtbl2q_s8(v301, v110)), v88, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v15.i8, v110)), v89, v108), v90, (int32x4_t)vqtbl2q_s8(v300, v110)),
                            v286,
                            (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&v100 - 1), v110)),
                          v283,
                          (int32x4_t)vqtbl1q_s8(v109, v295)),
                        2uLL),
                      vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v277, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689AE20)), v87, v108), v280, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689ADC0)), v88, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689AE10)), v89, v291), v90, (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_19689ADC0)), v286, (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_19689AE10)),
                        v283,
                        (int32x4_t)vqtbl1q_s8(v109, v297)),
                      2uLL);
            v113[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v277, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689AE40)), v87, v291), v280, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689ADE0)), v88, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689ADF0)), v89, v112), v90, (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_19689ADE0)),
                              v286,
                              (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_19689ADF0)),
                            v283,
                            (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_196889CB0)),
                          2uLL),
                        vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v277, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689AE30)), v87, v112), v280, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689ADD0)), v88, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_19689AE00)), v89, (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_196889CA0)), v90, (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_19689ADD0)), v286, (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_19689AE00)),
                          v283,
                          (int32x4_t)vqtbl1q_s8(v109, (int8x16_t)xmmword_196889CA0)),
                        2uLL);
            v102 = v301.val[1];
            v103 = v302.val[1];
            v104 = v303.val[1];
            v99 += 32;
          }
          while (((2 * v21) & 0x1FFFFFFE0) != v99);
          v82 = v268;
          if (v271 == v81)
            goto LABEL_33;
          LOBYTE(v98) = v100.i8[15];
          LOBYTE(v97) = v100.i8[14];
          v114 = (int8x8_t)vextq_s8(v16, v16, 8uLL).u64[0];
          v96 = vzip2_s8(v114, v114);
          v99 = v271;
        }
        do
        {
          v115 = v97;
          v116 = vmulq_s32(v82, (int32x4_t)vmovl_u16((uint16x4_t)(*(_QWORD *)&v96 & 0xFF00FF00FF00FFLL)));
          v117 = v91->u8[v99 - 3];
          v118 = v85 * v98;
          LOBYTE(v97) = v98;
          v98 = v91->u8[v99];
          v116.i32[0] = vaddvq_s32(v116);
          *(_WORD *)&v92[2 * v99] = (v116.i32[0] + v117 * v83 + v118 + v84 * v115 + v98 * v86 + 2) >> 2;
          v96 = vext_s8(v96, *(int8x8_t *)v116.i8, 2uLL);
          v96.i16[3] = v117;
          ++v99;
        }
        while (v81 != v99);
LABEL_33:
        v92 += 256;
        v79 += v4;
        v91 = (int8x16_t *)((char *)v91 + v4);
        v80 = v275 - 1;
        v93 = &dav1d_gaussian_sequence[1248];
        v94 = (int8x16_t *)&unk_196889000;
        v95 = (int8x16_t *)&unk_196889000;
        if (v275 == 1)
        {
          v119 = *v267;
          v120 = v267[1];
          v121 = v267[2];
          v122 = v267[3];
          v123 = v267[4];
          v124 = v267[5];
          v125 = v267[6];
          v126 = v267[7];
          result = 2 * v81;
          v127 = v298;
          v128 = vdupq_n_s32(v119);
          v129 = vdupq_n_s32(v120);
          v130 = vdupq_n_s32(v121);
          v131 = vdupq_n_s32(v122);
          v132 = vdupq_n_s32(v123);
          v133 = vdupq_n_s32(v124);
          v134 = vdupq_n_s32(v125);
          v135 = vdupq_n_s32(v126);
          v136 = v269;
          while (1)
          {
            if (v273 >= 8)
            {
              v138 = 0;
              do
              {
                v139 = *(int16x8_t *)&v127[v138];
                v140 = vmovl_high_s16(v139);
                v141 = *(int16x8_t *)&v127[v138 + 256];
                v142 = vmovl_high_s16(v141);
                v143 = vmlaq_s32(vmulq_s32(v128, vmovl_s16(*(int16x4_t *)v139.i8)), v129, vmovl_s16(*(int16x4_t *)v141.i8));
                v144 = *(int16x8_t *)&v127[v138 + 512];
                *(int16x8_t *)(v22 + v138) = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v143, v130, vmovl_s16(*(int16x4_t *)v144.i8)), v131, vmovl_s16(*(int16x4_t *)&v127[v138 + 768])), v132, vmovl_s16(*(int16x4_t *)&v127[v138 + 1024])), v133, vmovl_s16(*(int16x4_t *)&v127[v138 + 1280])), v134, vmovl_s16(*(int16x4_t *)&v127[v138 + 1536])), v135, vmovl_s16(*(int16x4_t *)&v127[v138 + 1792])), 6uLL), vmlaq_s32(
                                                 vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v128, v140), v129, v142), v130, vmovl_high_s16(v144)), v131, vmovl_high_s16(*(int16x8_t *)&v127[v138 + 768])), v132, vmovl_high_s16(*(int16x8_t *)&v127[v138 + 1024])), v133, vmovl_high_s16(*(int16x8_t *)&v127[v138 + 1280])), v134, vmovl_high_s16(*(int16x8_t *)&v127[v138 + 1536])), v135, vmovl_high_s16(*(int16x8_t *)&v127[v138 + 1792])), 6uLL);
                v138 += 16;
              }
              while (((2 * v81) & 0x1FFFFFFF0) != v138);
              v137 = v81 & 0xFFFFFFF8;
              if (v137 == v81)
                goto LABEL_42;
            }
            else
            {
              v137 = 0;
            }
            v145 = v81 - v137;
            v146 = 2 * v137;
            do
            {
              *(_WORD *)(v22 + v146) = (*(__int16 *)&v127[v146] * v119
                                      + *(__int16 *)&v127[v146 + 256] * v120
                                      + *(__int16 *)&v127[v146 + 512] * v121
                                      + *(__int16 *)&v127[v146 + 768] * v122
                                      + *(__int16 *)&v127[v146 + 1024] * v123
                                      + *(__int16 *)&v127[v146 + 1280] * v124
                                      + *(__int16 *)&v127[v146 + 1536] * v125
                                      + *(__int16 *)&v127[v146 + 1792] * v126
                                      + 32) >> 6;
              v146 += 2;
              --v145;
            }
            while (v145);
LABEL_42:
            v127 += 256;
            v22 += result;
            if (!--v136)
              return result;
          }
        }
      }
    }
    if ((int)v5 < 1)
      return result;
    v147 = 0;
    v148 = *v78;
    v149 = dav1d_mc_subpel_filters[120 * v77 - 7 + 8 * v8];
    v150 = dav1d_mc_subpel_filters[120 * v77 - 6 + 8 * v8];
    v151 = dav1d_mc_subpel_filters[120 * v77 - 5 + 8 * v8];
    v152 = dav1d_mc_subpel_filters[120 * v77 - 4 + 8 * v8];
    v153 = dav1d_mc_subpel_filters[120 * v77 - 3 + 8 * v8];
    v154 = v5;
    v155 = v78[6];
    v156 = v78[7];
    v157 = 2 * (int)v5;
    v266 = 2 * v5;
    v158 = vdupq_n_s32(v148);
    v159 = vdupq_n_s32(v149);
    v257 = v5 & 0xFFFFFFF0;
    v160 = vdupq_n_s32(v150);
    v161 = vdupq_n_s32(v151);
    v162 = vdupq_n_s32(v152);
    v163 = vdupq_n_s32(v153);
    v255 = -(uint64_t)(v5 & 0xFFFFFFF8);
    v256 = v5 & 0xFFFFFFF8;
    v164 = vdupq_n_s32(v155);
    v165 = (char *)v3 - 3 * v4;
    v264 = (char *)v3 + v5 - 2 * v4;
    v265 = (char *)v3 + v5 - 3 * v4;
    v262 = (char *)v3 + v5 + v4;
    v263 = (char *)v3 + v5 - v4;
    v260 = (char *)v3 + 3 * v4 + v5;
    v261 = (char *)v3 + 2 * v4 + v5;
    v258 = v157;
    v259 = (char *)v3 + 4 * v4 + v5;
    v166 = vdupq_n_s32(v156);
    v278 = v166;
    v281 = v161;
    v284 = v159;
    while (1)
    {
      if (v21 >= 8)
      {
        v167 = 0;
        v168 = v147 * v4;
        v169 = v22 + v266 + v157 * v147;
        v171 = result < (unint64_t)&v260[v147 * v4] && (unint64_t)v274 + 3 * v4 + v147 * v4 < v169;
        v173 = result < (unint64_t)&v261[v147 * v4] && (unint64_t)v274 + 2 * v4 + v168 < v169;
        v175 = result < (unint64_t)&v262[v147 * v4] && (unint64_t)v274 + v4 + v168 < v169;
        v177 = result < (unint64_t)v274 + v154 + v147 * v4 && (unint64_t)v3 < v169;
        v179 = result < (unint64_t)&v263[v147 * v4] && (unint64_t)v274 + v168 - v4 < v169;
        v181 = result < (unint64_t)&v264[v147 * v4] && (unint64_t)v274 + (v147 - 2) * v4 < v169;
        v183 = result < (unint64_t)&v265[v147 * v4] && (unint64_t)v274 + v147 * v4 + -3 * v4 < v169;
        v184 = (unint64_t)v274 + 4 * v4 + v168 >= v169 || result >= (unint64_t)&v259[v168];
        if (!v184 || v171 || v173)
        {
          v21 = v273;
          v157 = v258;
        }
        else
        {
          v21 = v273;
          v157 = v258;
          if (!v175 && !v177 && !v179 && !v181 && !v183)
          {
            if (v273 < 0x10)
            {
              v185 = 0;
LABEL_116:
              v231 = -3 * v4 + v185;
              v232 = 2 * v185;
              v233 = v255 + v185;
              do
              {
                *(uint8x8_t *)v11.i8 = *(uint8x8_t *)((char *)v3 + v231);
                v234 = (int32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_196889CD0);
                v235 = (uint64_t *)((char *)v3 + v231 + v4);
                v12.i64[0] = *v235;
                v236 = (int32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_196889CD0);
                v237 = (uint64_t *)((char *)v235 + v4);
                v13.i64[0] = *v237;
                v238 = (int32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_196889CC0);
                v13 = vqtbl1q_s8(v13, (int8x16_t)xmmword_196889CD0);
                v239 = (uint64_t *)((char *)v237 + v4);
                v14.i64[0] = *v239;
                v240 = (int32x4_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_196889CD0);
                v241 = (uint64_t *)((char *)v239 + v4);
                v14 = vqtbl1q_s8(v14, (int8x16_t)xmmword_196889CC0);
                v16.i64[0] = *v241;
                v242 = (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_196889CC0);
                v16 = vqtbl1q_s8(v16, (int8x16_t)xmmword_196889CD0);
                v243 = (uint64_t *)((char *)v241 + v4);
                v17.i64[0] = *v243;
                v244 = (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CD0);
                v17 = vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CC0);
                v245 = (uint64_t *)((char *)v243 + v4);
                v18.i64[0] = *v245;
                v19.i64[0] = *(uint64_t *)((char *)v245 + v4);
                v246 = (int32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CC0);
                v18 = vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CD0);
                v247 = vmlaq_s32(vmlaq_s32(vmulq_s32(v159, (int32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_196889CC0)), v158, (int32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_196889CC0)), v160, v238);
                v11 = vqtbl1q_s8(v19, (int8x16_t)xmmword_196889CC0);
                v12 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v247, v161, (int32x4_t)v14), v162, v242), v163, (int32x4_t)v17), v164, v246), v166, (int32x4_t)v11);
                *(int16x8_t *)(result + v232) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)v12, 2uLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v159, v236), v158, v234), v160, (int32x4_t)v13), v161, v240), v162, (int32x4_t)v16), v163, v244), v164, (int32x4_t)v18), v166,
                                                    (int32x4_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_196889CD0)),
                                                  2uLL);
                v231 += 8;
                v232 += 16;
                v233 += 8;
              }
              while (v233);
              v167 = v256;
              if (v256 == v154)
                goto LABEL_53;
              goto LABEL_119;
            }
            v186 = 0;
            v187 = -3 * v4;
            do
            {
              v188 = *(int8x16_t *)&v3->i8[v187];
              v189 = (int32x4_t)vqtbl1q_s8(v188, (int8x16_t)xmmword_196889CA0);
              v190 = (int32x4_t)vqtbl1q_s8(v188, (int8x16_t)xmmword_196889CB0);
              v191 = (int32x4_t)vqtbl1q_s8(v188, (int8x16_t)xmmword_196889CD0);
              v296 = (int32x4_t)vqtbl1q_s8(v188, (int8x16_t)xmmword_196889CC0);
              v192 = (int8x16_t *)((char *)v3 + v187 + v4);
              v193 = v158;
              v194 = (int32x4_t)vqtbl1q_s8(*v192, (int8x16_t)xmmword_196889CA0);
              v195 = (int32x4_t)vqtbl1q_s8(*v192, (int8x16_t)xmmword_196889CB0);
              v13 = (int8x16_t)v160;
              v196 = (int32x4_t)vqtbl1q_s8(*v192, (int8x16_t)xmmword_196889CC0);
              v197 = (int32x4_t)vqtbl1q_s8(*v192, (int8x16_t)xmmword_196889CD0);
              v198 = (int8x16_t *)((char *)v192 + v4);
              v199 = v162;
              v200 = (int32x4_t)vqtbl1q_s8(*v198, (int8x16_t)xmmword_196889CC0);
              v201 = v163;
              v202 = (int32x4_t)vqtbl1q_s8(*v198, (int8x16_t)xmmword_196889CD0);
              v203 = v164;
              v204 = (int32x4_t)vqtbl1q_s8(*v198, (int8x16_t)xmmword_196889CB0);
              v205 = (int32x4_t)vqtbl1q_s8(*v198, (int8x16_t)xmmword_196889CA0);
              v206 = (int8x16_t *)((char *)v198 + v4);
              v207 = (int32x4_t)vqtbl1q_s8(*v206, (int8x16_t)xmmword_196889CA0);
              v208 = (int32x4_t)vqtbl1q_s8(*v206, (int8x16_t)xmmword_196889CB0);
              v209 = (int32x4_t)vqtbl1q_s8(*v206, (int8x16_t)xmmword_196889CD0);
              v210 = (int32x4_t)vqtbl1q_s8(*v206, (int8x16_t)xmmword_196889CC0);
              v211 = (int8x16_t *)((char *)v206 + v4);
              v212 = (int32x4_t)vqtbl1q_s8(*v211, (int8x16_t)xmmword_196889CC0);
              v213 = (int32x4_t)vqtbl1q_s8(*v211, (int8x16_t)xmmword_196889CD0);
              v214 = (int32x4_t)vqtbl1q_s8(*v211, (int8x16_t)xmmword_196889CB0);
              v215 = (int32x4_t)vqtbl1q_s8(*v211, (int8x16_t)xmmword_196889CA0);
              v216 = (int8x16_t *)((char *)v211 + v4);
              v217 = (int32x4_t)vqtbl1q_s8(*v216, (int8x16_t)xmmword_196889CA0);
              v14 = vqtbl1q_s8(*v216, (int8x16_t)xmmword_196889CB0);
              v293 = (int32x4_t)vqtbl1q_s8(*v216, (int8x16_t)xmmword_196889CD0);
              v289 = (int32x4_t)vqtbl1q_s8(*v216, (int8x16_t)xmmword_196889CC0);
              v218 = (int8x16_t *)((char *)v216 + v4);
              v12 = vqtbl1q_s8(*v218, (int8x16_t)xmmword_196889CA0);
              v219 = *(int8x16_t *)((char *)v218 + v4);
              v220 = vmulq_s32(v284, v194);
              v158 = v193;
              v221 = vmlaq_s32(v220, v193, v189);
              v222 = vmlaq_s32(vmulq_s32(v284, v195), v193, v190);
              v223 = vmlaq_s32(vmulq_s32(v284, v197), v193, v191);
              v224 = vmulq_s32(v284, v196);
              v160 = (int32x4_t)v13;
              v225 = vmlaq_s32(vmlaq_s32(v224, v193, v296), (int32x4_t)v13, v200);
              v162 = v199;
              v226 = vmlaq_s32(v223, (int32x4_t)v13, v202);
              v163 = v201;
              v227 = vmlaq_s32(v222, (int32x4_t)v13, v204);
              v164 = v203;
              v228 = vmlaq_s32(v221, (int32x4_t)v13, v205);
              v161 = v281;
              v229 = vmlaq_s32(v225, v281, v210);
              v166 = v278;
              v19 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v228, v281, v207), v199, v215), v201, v217), v203, (int32x4_t)v12), v278, (int32x4_t)vqtbl1q_s8(v219, (int8x16_t)xmmword_196889CA0));
              v16 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v227, v281, v208), v199, v214), v201, (int32x4_t)v14), v203, (int32x4_t)vqtbl1q_s8(*v218, (int8x16_t)xmmword_196889CB0)), v278, (int32x4_t)vqtbl1q_s8(v219, (int8x16_t)xmmword_196889CB0));
              v17 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v226, v281, v209), v199, v213), v201, v293), v203, (int32x4_t)vqtbl1q_s8(*v218, (int8x16_t)xmmword_196889CD0)), v278, (int32x4_t)vqtbl1q_s8(v219, (int8x16_t)xmmword_196889CD0));
              v18 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v229, v199, v212), v201, v289), v203, (int32x4_t)vqtbl1q_s8(*v218, (int8x16_t)xmmword_196889CC0)), v278, (int32x4_t)vqtbl1q_s8(v219, (int8x16_t)xmmword_196889CC0));
              v11 = (int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)v16, 2uLL), (int32x4_t)v19, 2uLL);
              v230 = result + v186;
              *(int16x8_t *)v230 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)v18, 2uLL), (int32x4_t)v17, 2uLL);
              *(int8x16_t *)(v230 + 16) = v11;
              v187 += 16;
              v186 += 32;
            }
            while ((v266 & 0x1FFFFFFE0) != v186);
            v159 = v284;
            if (v257 == v154)
              goto LABEL_53;
            v167 = v257;
            v185 = v257;
            if ((v154 & 8) != 0)
              goto LABEL_116;
          }
        }
      }
      else
      {
        v167 = 0;
      }
      do
      {
LABEL_119:
        v248 = &v165[v167 + v4];
        v249 = *v248 * v149;
        v250 = (unsigned __int8 *)&v248[v4];
        v251 = *v250;
        v252 = &v250[v4];
        v253 = *v252;
        v254 = &v252[v4];
        *(_WORD *)(result + 2 * v167) = (v249
                                       + v165[v167] * v148
                                       + v251 * v150
                                       + v253 * v151
                                       + *v254 * v152
                                       + v254[v4] * v153
                                       + v254[v4 + v4] * v155
                                       + v254[v4 + v4 + v4] * v156
                                       + 2) >> 2;
        ++v167;
      }
      while (v154 != v167);
LABEL_53:
      result += v157;
      v3 = (uint8x8_t *)((char *)v3 + v4);
      ++v147;
      v165 += v4;
      if (!--v6)
        return result;
    }
  }
  if ((int)v5 >= 1)
  {
    v25 = 0;
    v26 = vmovl_s8(*v24);
    v27 = vmovl_high_s16(v26);
    v28 = vmovl_s16(*(int16x4_t *)v26.i8);
    v29 = v5;
    v30 = 2 * v5;
    v31 = 2 * (int)v5;
    v32 = v5 & 0xFFFFFFF0;
    v33 = vdupq_lane_s32(*(int32x2_t *)v28.i8, 0);
    v34 = vdupq_lane_s32(*(int32x2_t *)v28.i8, 1);
    v35 = vdupq_laneq_s32(v28, 2);
    v36 = vdupq_laneq_s32(v28, 3);
    v37 = vdupq_lane_s32(*(int32x2_t *)v27.i8, 0);
    v38 = vdupq_lane_s32(*(int32x2_t *)v27.i8, 1);
    v39 = vdupq_laneq_s32(v27, 2);
    v40 = v5 & 0xFFFFFFF8;
    v41 = vdupq_laneq_s32(v27, 3);
    result = (unint64_t)&unk_196889000;
    v42 = v22;
    v43 = v3;
    v270 = v28;
    v272 = v27;
    v276 = v41;
    v279 = v36;
    v282 = v34;
    do
    {
      if (v21 >= 8)
      {
        v45 = (char *)v3 + v25 * v4;
        v46 = &v45[v21 + 4];
        v47 = (unint64_t)(v45 - 3);
        if (v42 >= (unint64_t)v46 || v47 >= v22 + v30 + v31 * v25)
        {
          if (v21 < 0x10)
          {
            v49 = 0;
LABEL_21:
            v70 = 2 * v49;
            do
            {
              *(uint8x8_t *)v10.i8 = *(uint8x8_t *)((char *)v43 + v49 - 3);
              *(uint8x8_t *)v12.i8 = *(uint8x8_t *)((char *)v43 + v49 - 2);
              v71 = (int32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_196889CD0);
              *(uint8x8_t *)v13.i8 = *(uint8x8_t *)((char *)v43 + v49 - 1);
              v72 = (int32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_196889CC0);
              *(uint8x8_t *)v14.i8 = *(uint8x8_t *)((char *)v43 + v49);
              v13 = vqtbl1q_s8(v13, (int8x16_t)xmmword_196889CD0);
              v73 = (int32x4_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_196889CD0);
              v14 = vqtbl1q_s8(v14, (int8x16_t)xmmword_196889CC0);
              *(uint8x8_t *)v16.i8 = *(uint8x8_t *)((char *)v43 + v49 + 1);
              v74 = (int32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_196889CC0);
              *(uint8x8_t *)v17.i8 = *(uint8x8_t *)((char *)v43 + v49 + 2);
              v16 = vqtbl1q_s8(v16, (int8x16_t)xmmword_196889CD0);
              v75 = (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CD0);
              v17 = vqtbl1q_s8(v17, (int8x16_t)xmmword_196889CC0);
              *(uint8x8_t *)v18.i8 = *(uint8x8_t *)((char *)v43 + v49 + 3);
              v76 = (int32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CC0);
              v18 = vqtbl1q_s8(v18, (int8x16_t)xmmword_196889CD0);
              *(uint8x8_t *)v20.i8 = *(uint8x8_t *)((char *)v43 + v49 + 4);
              v12 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v34, (int32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_196889CC0)), v33, (int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CC0)), v35, v72), v36, (int32x4_t)v14), v37, v74), v38, (int32x4_t)v17), v39, v76),
                                 v41,
                                 (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CC0));
              v10 = (int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)v12, 2uLL), vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v34, v71), v33, (int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CD0)), v35, (int32x4_t)v13), v36, v73), v37, (int32x4_t)v16), v38, v75),
                                     v39,
                                     (int32x4_t)v18),
                                   v41,
                                   (int32x4_t)vqtbl1q_s8(v20, (int8x16_t)xmmword_196889CD0)),
                                 2uLL);
              *(int8x16_t *)(v42 + v70) = v10;
              v49 += 8;
              v70 += 16;
            }
            while (v40 != v49);
            v44 = v21 & 0xFFFFFFF8;
            if (v40 == v21)
              goto LABEL_7;
            goto LABEL_24;
          }
          v50 = 0;
          v51 = v43;
          do
          {
            v52 = *(int8x16_t *)((char *)&v51[-1].u16[2] + 1);
            v53 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_196889CA0);
            v54 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_196889CB0);
            v55 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_196889CD0);
            v16 = vqtbl1q_s8(v52, (int8x16_t)xmmword_196889CC0);
            v56 = *(int8x16_t *)((char *)&v51[-1].u32[1] + 2);
            v57 = *(int8x16_t *)((char *)&v51[-1].u32[1] + 3);
            v58 = *(int8x16_t *)&v51->i8[1];
            v13 = vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CD0);
            v59 = *(int8x16_t *)&v51->i16[1];
            v285 = (int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_196889CA0);
            v287 = (int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_196889CB0);
            v292 = (int32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_196889CD0);
            v12 = vqtbl1q_s8(v59, (int8x16_t)xmmword_196889CC0);
            v60 = *(int8x16_t *)((char *)v51->i32 + 3);
            v288 = (int32x4_t)vqtbl1q_s8(v60, (int8x16_t)xmmword_196889CC0);
            v290 = (int32x4_t)vqtbl1q_s8(v60, (int8x16_t)xmmword_196889CD0);
            v294 = (int32x4_t)vqtbl1q_s8(v60, (int8x16_t)xmmword_196889CB0);
            v14 = vqtbl1q_s8(v60, (int8x16_t)xmmword_196889CA0);
            v61 = *(int8x16_t *)&v51->u8[4];
            v62 = vmlaq_s32(vmulq_s32(v282, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_196889CA0)), v33, v53);
            v63 = vmlaq_s32(vmulq_s32(v282, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_196889CB0)), v33, v54);
            v64 = vmlaq_s32(vmulq_s32(v282, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_196889CD0)), v33, v55);
            v65 = vmlaq_s32(vmlaq_s32(vmulq_s32(v282, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_196889CC0)), v33, (int32x4_t)v16), v35, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_196889CC0));
            v66 = vmlaq_s32(v64, v35, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_196889CD0));
            v67 = vmlaq_s32(v63, v35, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_196889CB0));
            v68 = vmlaq_s32(v62, v35, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_196889CA0));
            v36 = v279;
            v41 = v276;
            v20 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v68, v279, (int32x4_t)vqtbl1q_s8(*(int8x16_t *)v51->i8, (int8x16_t)xmmword_196889CA0)), v37, (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CA0)), v38, v285), v39, (int32x4_t)v14), v276, (int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_196889CA0));
            v17 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v67, v279, (int32x4_t)vqtbl1q_s8(*(int8x16_t *)v51->i8, (int8x16_t)xmmword_196889CB0)), v37, (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CB0)), v38, v287), v39, v294), v276, (int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_196889CB0));
            v18 = (int8x16_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v66, v279, (int32x4_t)vqtbl1q_s8(*(int8x16_t *)v51->i8, (int8x16_t)xmmword_196889CD0)), v37, (int32x4_t)v13), v38, v292), v39, v290), v276, (int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_196889CD0));
            v10 = (int8x16_t)vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v65, v279, (int32x4_t)vqtbl1q_s8(*(int8x16_t *)v51->i8, (int8x16_t)xmmword_196889CC0)), v37, (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_196889CC0)), v38, (int32x4_t)v12), v39, v288), v276, (int32x4_t)vqtbl1q_s8(v61, (int8x16_t)xmmword_196889CC0)), 2uLL), (int32x4_t)v18,
                               2uLL);
            v69 = v42 + v50;
            *(int8x16_t *)v69 = v10;
            *(int16x8_t *)(v69 + 16) = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)v17, 2uLL), (int32x4_t)v20, 2uLL);
            v50 += 32;
            v51 += 2;
          }
          while ((v30 & 0x1FFFFFFE0) != v50);
          v28 = v270;
          v27 = v272;
          v34 = v282;
          if (v32 == v21)
            goto LABEL_7;
          v49 = v21 & 0xFFFFFFF0;
          v44 = v49;
          if ((v29 & 8) != 0)
            goto LABEL_21;
        }
        else
        {
          v44 = 0;
        }
      }
      else
      {
        v44 = 0;
      }
      do
      {
LABEL_24:
        *(uint8x8_t *)v10.i8 = *(uint8x8_t *)((char *)v43 + v44 - 3);
        v10 = (int8x16_t)vmlaq_s32(vmulq_s32((int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CD0), v27), (int32x4_t)vqtbl1q_s8(v10, (int8x16_t)xmmword_196889CC0), v28);
        *(_WORD *)(v42 + 2 * v44++) = (vaddvq_s32((int32x4_t)v10) + 2) >> 2;
      }
      while (v21 != v44);
LABEL_7:
      v42 += v31;
      v43 = (uint8x8_t *)((char *)v43 + v4);
      ++v25;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t prep_c_0(uint64_t result, uint8x8_t *a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8x8_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t *v16;
  uint8x16_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t *v20;
  uint64_t v21;

  if ((int)a4 >= 1)
  {
    v5 = 0;
    v6 = 2 * a4;
    v7 = 2 * (int)a4;
    v8 = a4 & 0xFFFFFFF8;
    v9 = a2 + 2;
    v10 = result;
    v11 = (unint64_t)a2;
    do
    {
      if (a4 >= 8)
      {
        if (v10 >= (unint64_t)a2 + a4 + v5 * a3 || v11 >= result + v6 + v7 * v5)
        {
          if (a4 < 0x20)
          {
            v14 = 0;
LABEL_17:
            v21 = 2 * v14;
            do
            {
              *(uint16x8_t *)(v10 + v21) = vshll_n_u8(*(uint8x8_t *)(v11 + v14), 4uLL);
              v14 += 8;
              v21 += 16;
            }
            while (v8 != v14);
            v12 = a4 & 0xFFFFFFF8;
            if (v8 == a4)
              goto LABEL_3;
            goto LABEL_20;
          }
          v15 = 0;
          v16 = v9;
          do
          {
            v17 = *(uint8x16_t *)v16[-2].i8;
            v18 = vshll_n_u8(*v16, 4uLL);
            v19 = vshll_high_n_u8(*(uint8x16_t *)v16->i8, 4uLL);
            v20 = (uint16x8_t *)(v10 + v15);
            *v20 = vshll_n_u8(*(uint8x8_t *)v17.i8, 4uLL);
            v20[1] = vshll_high_n_u8(v17, 4uLL);
            v20[2] = v18;
            v20[3] = v19;
            v16 += 4;
            v15 += 64;
          }
          while ((v6 & 0x1FFFFFFC0) != v15);
          if ((a4 & 0xFFFFFFE0) == (unint64_t)a4)
            goto LABEL_3;
          v14 = a4 & 0xFFFFFFE0;
          v12 = v14;
          if ((a4 & 0x18) != 0)
            goto LABEL_17;
        }
        else
        {
          v12 = 0;
        }
      }
      else
      {
        v12 = 0;
      }
      do
      {
LABEL_20:
        *(_WORD *)(v10 + 2 * v12) = 16 * *(unsigned __int8 *)(v11 + v12);
        ++v12;
      }
      while (a4 != v12);
LABEL_3:
      v10 += v7;
      v11 += a3;
      ++v5;
      v9 = (uint8x8_t *)((char *)v9 + a3);
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t prep_8tap_scaled_c_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  size_t v36;
  char *v37;
  int v38;
  char *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int32x4_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  __int16 *v64;
  uint64_t v65;
  int v66;
  char v67;
  _QWORD v68[8322];

  result = MEMORY[0x1E0C80A78](a1, a2);
  v66 = v14;
  v68[8320] = *MEMORY[0x1E0C80C00];
  if (v13 >= 1)
  {
    v18 = v13;
    v19 = (char *)result;
    v20 = v11 - 3 * v12;
    v21 = ((v16 + (v14 - 1) * a9) >> 10) + 8;
    v65 = v13;
    v22 = 2 * v13;
    v23 = &v67;
    do
    {
      v24 = 0;
      v25 = 0;
      LODWORD(result) = v15;
      do
      {
        if (result < 0x40)
        {
          LOWORD(v26) = 16 * *(unsigned __int8 *)(v20 + v25);
        }
        else
        {
          v27 = 8 * ((int)result >> 6) - 8;
          v28 = &dav1d_mc_subpel_filters[120 * (a10 & 1) + 360 + v27];
          v29 = &dav1d_mc_subpel_filters[120 * (a10 & 3) + v27];
          if (v18 <= 4)
            v29 = v28;
          v30 = (unsigned __int8 *)(v20 + v25);
          v26 = (*(v30 - 2) * v29[1]
               + *(v30 - 3) * *v29
               + *(v30 - 1) * v29[2]
               + *v30 * v29[3]
               + v30[1] * v29[4]
               + v30[2] * v29[5]
               + v30[3] * v29[6]
               + v30[4] * v29[7]
               + 2) >> 2;
        }
        *(_WORD *)&v23[v24] = v26;
        v25 += ((int)result + v17) >> 10;
        result = ((_DWORD)result + v17) & 0x3FF;
        v24 += 2;
      }
      while (v22 != v24);
      v23 += 256;
      v20 += v12;
      --v21;
    }
    while (v21);
    v31 = v16;
    v32 = v65;
    if (v66 >= 1)
    {
      v33 = 0;
      v34 = a10 >> 2;
      v35 = v68;
      v36 = 2 * v65;
      if (v66 <= 4)
        v34 = ((a10 >> 2) & 1) + 3;
      v37 = &dav1d_mc_subpel_filters[120 * v34];
      do
      {
        if (v31 < 0x40)
        {
          v38 = v31;
          result = (uint64_t)memcpy(v19, v35, v36);
          v32 = v65;
        }
        else
        {
          v38 = v31;
          v39 = &v37[8 * (v31 >> 6)];
          v40 = *(v39 - 8);
          v41 = *(v39 - 7);
          v42 = *(v39 - 6);
          v43 = *(v39 - 5);
          v44 = *(v39 - 4);
          v45 = *(v39 - 3);
          v46 = *(v39 - 2);
          v47 = *(v39 - 1);
          if (v18 >= 8)
          {
            v49 = 0;
            v50 = v35 - 96;
            do
            {
              result = (uint64_t)&v50[v49 / 8];
              v51 = vdupq_n_s32(v40);
              v52 = *(int16x8_t *)&v50[v49 / 8 + 32];
              v53 = vmovl_high_s16(v52);
              v54 = vdupq_n_s32(v41);
              v55 = vmulq_s32(v54, vmovl_s16(*(int16x4_t *)v52.i8));
              v56 = vmulq_s32(v54, v53);
              v57 = *(int16x8_t *)&v50[v49 / 8 + 64];
              v58 = vdupq_n_s32(v42);
              v59 = vdupq_n_s32(v43);
              v60 = vdupq_n_s32(v44);
              v61 = vdupq_n_s32(v45);
              v62 = vdupq_n_s32(v46);
              v63 = vdupq_n_s32(v47);
              *(int16x8_t *)&v19[v49] = vrshrn_high_n_s32(vrshrn_n_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v55, v51, vmovl_s16((int16x4_t)v50[v49 / 8])), v58, vmovl_s16(*(int16x4_t *)v57.i8)), v59, vmovl_s16((int16x4_t)v35[v49 / 8])), v60, vmovl_s16((int16x4_t)v50[v49 / 8 + 128])), v61, vmovl_s16((int16x4_t)v50[v49 / 8 + 160])), v62, vmovl_s16((int16x4_t)v50[v49 / 8 + 192])), v63,
                                              vmovl_s16((int16x4_t)v50[v49 / 8 + 224])),
                                            6uLL),
                                          vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v56, v51, vmovl_high_s16(*(int16x8_t *)&v50[v49 / 8])), v58, vmovl_high_s16(v57)), v59, vmovl_high_s16(*(int16x8_t *)&v35[v49 / 8])), v60, vmovl_high_s16(*(int16x8_t *)&v50[v49 / 8 + 128])), v61, vmovl_high_s16(*(int16x8_t *)&v50[v49 / 8 + 160])), v62, vmovl_high_s16(*(int16x8_t *)&v50[v49 / 8 + 192])), v63, vmovl_high_s16(*(int16x8_t *)&v50[v49 / 8 + 224])), 6uLL);
              v49 += 16;
            }
            while ((v36 & 0x1FFFFFFF0) != v49);
            v48 = v65 & 0x7FFFFFF8;
            if (v48 == v32)
              goto LABEL_16;
          }
          else
          {
            v48 = 0;
          }
          v64 = (__int16 *)v35 + v48 - 384;
          do
          {
            result = (v64[128] * v41
                    + *v64 * v40
                    + v64[256] * v42
                    + v64[384] * v43
                    + v64[512] * v44
                    + v64[640] * v45
                    + v64[768] * v46
                    + v64[896] * v47
                    + 32) >> 6;
            *(_WORD *)&v19[2 * v48++] = result;
            ++v64;
          }
          while (v32 != v48);
        }
LABEL_16:
        v35 = (_QWORD *)((char *)v35 + 2 * (int)(((v38 + a9) >> 3) & 0xFFFFFF80));
        v31 = (v38 + a9) & 0x3FF;
        v19 += v36;
        ++v33;
      }
      while (v33 != v66);
    }
  }
  return result;
}

uint64_t dav1d_read_coef_blocks_8bpc(uint64_t result, unsigned int a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  signed int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  signed int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  signed int v75;
  int v76;
  signed int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  signed int v108;
  int v109;
  char v110;
  int v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  signed int v115;
  unint64_t v116;
  unsigned int v117;
  unsigned __int8 *v118;
  signed int v119;
  unsigned __int8 *v120;
  _QWORD *v121;
  BOOL v122;
  int v123;
  unsigned __int8 *v124;
  unint64_t v125;
  unsigned __int8 *v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  unsigned __int8 v140;
  unsigned int v141;
  unsigned __int8 v142;
  _WORD v143[6];

  v3 = (_BYTE *)a3;
  v4 = result;
  v138 = *(_QWORD *)(result + 8);
  v5 = *(_DWORD *)(v138 + 2056);
  v6 = v5 != 3;
  v7 = &dav1d_block_dimensions[4 * a2];
  v8 = *v7;
  if (v5 == 3)
    v9 = *v7;
  else
    v9 = v8 + 1;
  v10 = v5 == 1;
  v11 = *(_DWORD *)(result + 24);
  v12 = *(_DWORD *)(result + 28);
  v13 = v11 & 0x1F;
  v125 = v13 >> v6;
  v116 = v12 & 0x1F;
  v113 = v116 >> v10;
  v14 = v7[1];
  if (v5 == 1)
    v15 = v14 + 1;
  else
    v15 = v7[1];
  if (!v5 || (v8 <= v6 ? (v16 = (*(_DWORD *)(result + 24) & 1) == 0) : (v16 = 0), v16))
  {
    v105 = 0;
    if (!*(_BYTE *)(a3 + 6))
      goto LABEL_16;
LABEL_115:
    switch(v14)
    {
      case 1:
        *(_BYTE *)(result + v116 + 64) = 64;
        break;
      case 2:
        *(_WORD *)(result + v116 + 64) = 16448;
        break;
      case 4:
        *(_DWORD *)(result + v116 + 64) = 1077952576;
        break;
      case 8:
        *(_QWORD *)(result + v116 + 64) = 0x4040404040404040;
        break;
      case 16:
        *(_QWORD *)&v79 = 0x4040404040404040;
        *((_QWORD *)&v79 + 1) = 0x4040404040404040;
        *(_OWORD *)(result + v116 + 64) = v79;
        break;
      case 32:
        *(_QWORD *)&v78 = 0x4040404040404040;
        *((_QWORD *)&v78 + 1) = 0x4040404040404040;
        *(_OWORD *)(result + 64 + v116) = v78;
        *(_OWORD *)(result + 64 + (v116 + 16)) = v78;
        break;
      default:
        break;
    }
    switch(v8)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)(result + 656) + v13 + 32) = 64;
        break;
      case 2:
        *(_WORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 16448;
        break;
      case 4:
        *(_DWORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 1077952576;
        break;
      case 8:
        v80 = *(_QWORD *)(result + 656) + v13;
        goto LABEL_130;
      case 16:
        *(_QWORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 0x4040404040404040;
        v81 = *(_QWORD *)(result + 656);
        v82 = (v13 + 8);
        goto LABEL_129;
      case 32:
        *(_QWORD *)(*(_QWORD *)(result + 656) + v13 + 32) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(result + 656) + (v13 + 8) + 32) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(result + 656) + (v13 + 16) + 32) = 0x4040404040404040;
        v81 = *(_QWORD *)(result + 656);
        v82 = (v13 + 24);
LABEL_129:
        v80 = v81 + v82;
LABEL_130:
        *(_QWORD *)(v80 + 32) = 0x4040404040404040;
        break;
      default:
        break;
    }
    if (v105)
    {
      v83 = v9 >> v6;
      switch(v15 >> v10)
      {
        case 1u:
          v84 = result + v113;
          *(_BYTE *)(v84 + 96) = 64;
          *(_BYTE *)(v84 + 128) = 64;
          break;
        case 2u:
          v85 = result + v113;
          *(_WORD *)(v85 + 96) = 16448;
          *(_WORD *)(v85 + 128) = 16448;
          break;
        case 4u:
          v86 = result + v113;
          *(_DWORD *)(v86 + 96) = 1077952576;
          *(_DWORD *)(v86 + 128) = 1077952576;
          break;
        case 8u:
          v87 = result + v113;
          *(_QWORD *)(v87 + 96) = 0x4040404040404040;
          *(_QWORD *)(v87 + 128) = 0x4040404040404040;
          break;
        case 0x10u:
          v88 = result + v113;
          *(_QWORD *)&v89 = 0x4040404040404040;
          *((_QWORD *)&v89 + 1) = 0x4040404040404040;
          *(_OWORD *)(v88 + 96) = v89;
          *(_OWORD *)(v88 + 128) = v89;
          break;
        case 0x20u:
          v90 = result + 96;
          *(_QWORD *)&v91 = 0x4040404040404040;
          *((_QWORD *)&v91 + 1) = 0x4040404040404040;
          *(_OWORD *)(v90 + v113) = v91;
          v92 = v113 + 16;
          *(_OWORD *)(v90 + v92) = v91;
          v93 = result + 128;
          *(_OWORD *)(v93 + v113) = v91;
          *(_OWORD *)(v93 + v92) = v91;
          break;
        default:
          break;
      }
      switch(v83)
      {
        case 1u:
          *(_BYTE *)(*(_QWORD *)(result + 656) + v125 + 64) = 64;
          *(_BYTE *)(*(_QWORD *)(result + 656) + v125 + 96) = 64;
          return result;
        case 2u:
          *(_WORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 16448;
          *(_WORD *)(*(_QWORD *)(result + 656) + v125 + 96) = 16448;
          return result;
        case 4u:
          *(_DWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 1077952576;
          *(_DWORD *)(*(_QWORD *)(result + 656) + v125 + 96) = 1077952576;
          return result;
        case 8u:
          v94 = v13 >> v6;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 0x4040404040404040;
          goto LABEL_147;
        case 0x10u:
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 0x4040404040404040;
          v94 = v125 + 8;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v94 + 64) = 0x4040404040404040;
          v95 = *(_QWORD *)(result + 656) + v125;
          goto LABEL_146;
        case 0x20u:
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 64) = 0x4040404040404040;
          v96 = v125 + 8;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v96 + 64) = 0x4040404040404040;
          v97 = v125 + 16;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v97 + 64) = 0x4040404040404040;
          v94 = v125 + 24;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v94 + 64) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v125 + 96) = 0x4040404040404040;
          *(_QWORD *)(*(_QWORD *)(result + 656) + v96 + 96) = 0x4040404040404040;
          v95 = *(_QWORD *)(result + 656) + v97;
LABEL_146:
          *(_QWORD *)(v95 + 96) = 0x4040404040404040;
LABEL_147:
          *(_QWORD *)(*(_QWORD *)(result + 656) + v94 + 96) = 0x4040404040404040;
          break;
        default:
          return result;
      }
    }
    return result;
  }
  if (v14 <= v10)
    v17 = *(_DWORD *)(result + 28) & 1;
  else
    v17 = 1;
  v105 = v17;
  if (*(_BYTE *)(a3 + 6))
    goto LABEL_115;
LABEL_16:
  v134 = *(_QWORD *)(result + 16);
  if (v8 >= *(_DWORD *)(v138 + 3280) - v11)
    v18 = *(_DWORD *)(v138 + 3280) - v11;
  else
    v18 = v8;
  if (v14 >= *(_DWORD *)(v138 + 3284) - v12)
    v14 = *(_DWORD *)(v138 + 3284) - v12;
  v19 = 10;
  if (!*(_BYTE *)(a3 + 3))
    v19 = 26;
  v20 = *(unsigned __int8 *)(a3 + v19);
  v21 = *(unsigned __int8 *)(a3 + 7);
  v143[0] = *(unsigned __int8 *)(a3 + 29);
  v143[1] = *(_WORD *)(a3 + 30);
  if (v14 >= 1 && v18 >= 1)
  {
    v22 = 0;
    LODWORD(result) = 0;
    v102 = (int)(v18 + v6) >> v6;
    v98 = (int)(v14 + v10) >> v10;
    v120 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v20;
    v118 = v120 + 1;
    v124 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v21;
    v126 = v124 + 1;
    v137 = v6;
    v127 = v10;
    v103 = v14;
    v104 = v18;
    v112 = v11 & 0x1F;
    do
    {
      v106 = v22;
      v23 = 0;
      if (v14 >= (int)result + 16)
        v24 = result + 16;
      else
        v24 = v14;
      v101 = (_DWORD)result != 0;
      v99 = result + 16;
      v25 = (result + 16) >> v10;
      if (v98 < v25)
        v25 = v98;
      v115 = v25;
      v108 = result >> v10;
      v109 = result;
      v100 = v22 - 2 * (result >> v10 << v10);
      v111 = v24;
      do
      {
        v107 = v23 + 16;
        if (v18 >= (int)(v23 + 16))
          v26 = v23 + 16;
        else
          v26 = v18;
        v27 = v12 + result;
        *(_DWORD *)(v4 + 28) = v12 + result;
        v117 = v23;
        if ((int)result >= v24)
        {
          v28 = result;
          goto LABEL_72;
        }
        v122 = v23 != 0;
        if ((int)v23 < v26)
        {
          v28 = result;
          v132 = v101;
          do
          {
            v30 = *(_QWORD *)(v138 + 4200) + 10 * *(_QWORD *)(v138 + 3264) * v27;
            *(_DWORD *)(v4 + 24) = v11 + v23;
            v128 = v28;
            v31 = (v28 + v116);
            v32 = (unsigned __int8 *)(v4 + 64 + v31);
            v130 = (_QWORD *)(v4 + 64 + (v31 + 8));
            v33 = v122;
            do
            {
              if (v3[3])
              {
                v142 = 64;
                v141 = 0;
                v36 = v23 + v13;
                v37 = decode_coefs_0(v4, *(_QWORD *)(v4 + 656) + v36 + 32, (uint64_t)v32, v3[10], a2, (uint64_t)v3, 1, 0, *(_QWORD *)(v134 + 13920), &v141, &v142);
                v38 = v30 + 10 * *(int *)(v4 + 24);
                *(_WORD *)v38 = v37;
                *(_BYTE *)(v38 + 6) = v141;
                v34 = *v120;
                if (v34 >= 8)
                  v39 = 8;
                else
                  v39 = *v120;
                v40 = *v118;
                if (v40 >= 8)
                  v41 = 8;
                else
                  v41 = *v118;
                *(_QWORD *)(v134 + 13920) += 2 * (16 * v39 * v41);
                v42 = *(_DWORD *)(v138 + 3284) - *(_DWORD *)(v4 + 28);
                if ((int)v40 < v42)
                  v42 = v40;
                switch(v42)
                {
                  case 1:
                    LODWORD(v43) = v142;
                    *v32 = v142;
                    break;
                  case 2:
                    LODWORD(v43) = v142;
                    *(_WORD *)v32 = v142 | (v142 << 8);
                    break;
                  case 4:
                    LODWORD(v43) = v142;
                    *(_DWORD *)v32 = 16843009 * v142;
                    break;
                  case 8:
                    LODWORD(v43) = v142;
                    *(_QWORD *)v32 = 0x101010101010101 * v142;
                    break;
                  case 16:
                    v43 = v142;
                    *(_QWORD *)v32 = 0x101010101010101 * v142;
                    *v130 = 0x101010101010101 * v43;
                    break;
                  default:
                    LODWORD(v43) = v142;
                    memset(v32, v142, v42);
                    break;
                }
                LOBYTE(v6) = v137;
                v44 = *(_DWORD *)(v138 + 3280) - *(_DWORD *)(v4 + 24);
                if ((int)v34 < v44)
                  v44 = v34;
                switch(v44)
                {
                  case 1:
                    *(_BYTE *)(*(_QWORD *)(v4 + 656) + v36 + 32) = v43;
                    break;
                  case 2:
                    *(_WORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = v43 | ((_WORD)v43 << 8);
                    break;
                  case 4:
                    *(_DWORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = 16843009 * v43;
                    break;
                  case 8:
                    *(_QWORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = 0x101010101010101 * v43;
                    break;
                  case 16:
                    v45 = 0x101010101010101 * v43;
                    *(_QWORD *)(*(_QWORD *)(v4 + 656) + v36 + 32) = v45;
                    *(_QWORD *)(*(_QWORD *)(v4 + 656) + (v36 + 8) + 32) = v45;
                    break;
                  default:
                    memset((void *)(*(_QWORD *)(v4 + 656) + v36 + 32), v43, v44);
                    goto LABEL_44;
                }
              }
              else
              {
                read_coef_tree_0(v4, a2, (uint64_t)v3, v3[26], 0, (uint64_t)v143, v33, v132, 0);
                v34 = *v120;
LABEL_44:
                LOBYTE(v6) = v137;
              }
              v23 += v34;
              v35 = *(_DWORD *)(v4 + 24) + v34;
              *(_DWORD *)(v4 + 24) = v35;
              ++v33;
              v3 = (_BYTE *)a3;
            }
            while ((int)v23 < v26);
            v11 = v35 - v23;
            v29 = *v118;
            v28 = v128 + v29;
            v27 = *(_DWORD *)(v4 + 28) + v29;
            *(_DWORD *)(v4 + 24) = v11;
            *(_DWORD *)(v4 + 28) = v27;
            ++v132;
            v23 = v117;
          }
          while (v128 + v29 < v111);
LABEL_72:
          v12 = v27 - v28;
          *(_DWORD *)(v4 + 28) = v27 - v28;
          if (!v105)
            goto LABEL_33;
          goto LABEL_73;
        }
        v28 = result;
        do
          v28 += *v118;
        while (v28 < v24);
        v27 = v12 + v28;
        *(_DWORD *)(v4 + 24) = v11;
        *(_DWORD *)(v4 + 28) = v12;
        if (!v105)
        {
LABEL_33:
          LOBYTE(v10) = v127;
          LODWORD(result) = v109;
          goto LABEL_34;
        }
LABEL_73:
        if (v102 >= (int)(v107 >> v6))
          v46 = v107 >> v6;
        else
          v46 = v102;
        LODWORD(result) = v109;
        v10 = v127;
        if (v108 >= v115)
        {
          v12 += v100;
          *(_DWORD *)(v4 + 28) = v12;
        }
        else
        {
          v47 = v23 >> v6;
          if ((int)(v23 >> v6) >= v46)
          {
            v68 = v47 << v6;
            v69 = *v126;
            v70 = v69 << v127;
            v71 = v23 - (v47 << v6);
            v72 = v106 + v27 - v28;
            v73 = v11 + v23 - v68;
            v74 = v11;
            v75 = v108;
            do
            {
              v11 = v73;
              v75 += v69;
              v72 += v70;
              v74 += v71;
              v73 += v71;
            }
            while (v75 < v115);
            v76 = v72 - (v75 << v127);
            v77 = v108;
            do
            {
              v77 += v69;
              v76 += v70;
              v11 += v71;
            }
            while (v77 < v115);
            v12 = v76 - (v77 << v127);
            *(_DWORD *)(v4 + 24) = v11;
            *(_DWORD *)(v4 + 28) = v12;
          }
          else
          {
            v48 = 0;
            v49 = 1;
            v114 = v23 >> v6;
            do
            {
              v110 = v49;
              v50 = v12 + result;
              *(_DWORD *)(v4 + 28) = v50;
              v133 = v48 + 1;
              v51 = v108;
              do
              {
                v52 = *(_QWORD *)(v138 + 4200) + 10 * *(_QWORD *)(v138 + 3264) * v50;
                *(_DWORD *)(v4 + 24) = v11 + v23;
                v123 = v13 | (32 * ((v51 << v10) + v116));
                v119 = v51;
                v53 = (v51 + v113);
                v54 = v4 + 32 * v48 + 96;
                v55 = (unsigned __int8 *)(v54 + v53);
                v129 = v52 + 2 * v133;
                v131 = v52;
                v121 = (_QWORD *)(v54 + (v53 + 8));
                v56 = v47;
                do
                {
                  v140 = 64;
                  v139 = 0;
                  v58 = *(unsigned __int8 *)(a3 + 3);
                  if (!*(_BYTE *)(a3 + 3))
                    v139 = *(unsigned __int8 *)(v4 + v123 + (v56 << v6) + 8256);
                  v59 = (v56 + v125);
                  v60 = decode_coefs_0(v4, *(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64, (uint64_t)v55, *(unsigned __int8 *)(a3 + 7), a2, a3, v58, v133, *(_QWORD *)(v134 + 13920), &v139, &v140);
                  v61 = 10 * *(int *)(v4 + 24);
                  *(_WORD *)(v129 + v61) = v60;
                  *(_BYTE *)(v131 + v133 + v61 + 6) = v139;
                  v62 = *v124;
                  v63 = *v126;
                  *(_QWORD *)(v134 + 13920) += 32 * *v124 * (unint64_t)*v126;
                  v64 = (int)(*(_DWORD *)(v138 + 3284) + v10 - *(_DWORD *)(v4 + 28)) >> v10;
                  if (v63 < v64)
                    v64 = v63;
                  switch(v64)
                  {
                    case 1:
                      LODWORD(v65) = v140;
                      *v55 = v140;
                      break;
                    case 2:
                      LODWORD(v65) = v140;
                      *(_WORD *)v55 = v140 | (v140 << 8);
                      break;
                    case 4:
                      LODWORD(v65) = v140;
                      *(_DWORD *)v55 = 16843009 * v140;
                      break;
                    case 8:
                      LODWORD(v65) = v140;
                      *(_QWORD *)v55 = 0x101010101010101 * v140;
                      break;
                    case 16:
                      v65 = v140;
                      *(_QWORD *)v55 = 0x101010101010101 * v140;
                      *v121 = 0x101010101010101 * v65;
                      break;
                    default:
                      LODWORD(v65) = v140;
                      memset(v55, v140, v64);
                      break;
                  }
                  v6 = v137;
                  v66 = (int)(*(_DWORD *)(v138 + 3280) + v6 - *(_DWORD *)(v4 + 24)) >> v6;
                  if (v62 < v66)
                    v66 = v62;
                  switch(v66)
                  {
                    case 1:
                      *(_BYTE *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = v65;
                      break;
                    case 2:
                      *(_WORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = v65 | ((_WORD)v65 << 8);
                      break;
                    case 4:
                      *(_DWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = 16843009 * v65;
                      break;
                    case 8:
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = 0x101010101010101 * v65;
                      break;
                    case 16:
                      v67 = 0x101010101010101 * v65;
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64) = v67;
                      *(_QWORD *)(*(_QWORD *)(v4 + 656) + 32 * v48 + (v59 + 8) + 64) = v67;
                      break;
                    default:
                      memset((void *)(*(_QWORD *)(v4 + 656) + 32 * v48 + v59 + 64), v65, v66);
                      LOBYTE(v6) = v137;
                      break;
                  }
                  v10 = v127;
                  v56 += v62;
                  v57 = *(_DWORD *)(v4 + 24) + (v62 << v6);
                  *(_DWORD *)(v4 + 24) = v57;
                }
                while (v56 < v46);
                v11 = v57 - (v56 << v6);
                v51 = v119 + v63;
                v50 = *(_DWORD *)(v4 + 28) + (v63 << v127);
                *(_DWORD *)(v4 + 24) = v11;
                *(_DWORD *)(v4 + 28) = v50;
                v47 = v114;
                LODWORD(v13) = v112;
                v23 = v117;
              }
              while (v119 + v63 < v115);
              v49 = 0;
              v12 = v50 - (v51 << v127);
              *(_DWORD *)(v4 + 28) = v12;
              v48 = 1;
              LODWORD(result) = v109;
            }
            while ((v110 & 1) != 0);
          }
        }
LABEL_34:
        v23 = v107;
        v14 = v103;
        v18 = v104;
        v3 = (_BYTE *)a3;
        v24 = v111;
      }
      while ((int)v107 < v104);
      v22 = v106 + 32;
      result = v99;
    }
    while (v99 < v103);
  }
  return result;
}

uint64_t read_coef_tree_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, char a7, char a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  signed int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  unsigned int v44;
  void *v45;
  int v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v90;
  int v91;
  uint64_t v92;
  _BYTE __c[5];

  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(v12 + 3144);
  v14 = a4;
  v15 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4;
  v16 = *v15;
  v17 = v15[1];
  if (a5 <= 1
    && *(_WORD *)(a6 + 2 * a5)
    && ((*(unsigned __int16 *)(a6 + 2 * a5) >> (a7 + 4 * a8)) & 1) != 0)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4 + 6);
    v20 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v19;
    v21 = *v20;
    v91 = v20[1];
    result = read_coef_tree_0(a1, a2, a3, v19);
    v23 = *(_DWORD *)(a1 + 24) + v21;
    *(_DWORD *)(a1 + 24) = v23;
    v24 = v18;
    if (v16 >= v17 && v23 < *(_DWORD *)(v18 + 3280))
    {
      result = read_coef_tree_0(a1, a2, a3, v19);
      v24 = v18;
      v23 = *(_DWORD *)(a1 + 24);
    }
    v25 = v23 - v21;
    v26 = v91;
    v27 = *(_DWORD *)(a1 + 28) + v91;
    *(_DWORD *)(a1 + 24) = v25;
    *(_DWORD *)(a1 + 28) = v27;
    if (v17 >= v16 && v27 < *(_DWORD *)(v24 + 3284))
    {
      result = read_coef_tree_0(a1, a2, a3, v19);
      v86 = v21;
      v87 = *(_DWORD *)(a1 + 24) + v21;
      *(_DWORD *)(a1 + 24) = v87;
      if (v16 >= v17)
      {
        v26 = v91;
        if (v87 < *(_DWORD *)(v18 + 3280))
        {
          result = read_coef_tree_0(a1, a2, a3, v19);
          v86 = v21;
          v26 = v91;
          v87 = *(_DWORD *)(a1 + 24);
        }
      }
      else
      {
        v26 = v91;
      }
      *(_DWORD *)(a1 + 24) = v87 - v86;
      v27 = *(_DWORD *)(a1 + 28);
    }
    *(_DWORD *)(a1 + 28) = v27 - v26;
    return result;
  }
  v28 = *(_DWORD *)(a1 + 24);
  v29 = *(_DWORD *)(a1 + 28);
  memset(__c, 0, sizeof(__c));
  v30 = *(_DWORD *)(a1 + 259588);
  if (v30)
  {
    v31 = v11 + 16 * (v30 & 1);
    result = *(_QWORD *)(v31 + 13904);
    if (v16 >= 8)
      v32 = 8;
    else
      v32 = v16;
    if ((int)v17 >= 8)
      v33 = 8;
    else
      v33 = v17;
    *(_QWORD *)(v31 + 13904) = result + 2 * (16 * v32 * v33);
    v34 = *(_QWORD *)(v12 + 4200);
    v35 = v28 + *(_QWORD *)(v12 + 3264) * v29;
    if (v30 == 2)
    {
      v92 = result;
      v36 = *(__int16 *)(v34 + 10 * v35);
      *(_DWORD *)&__c[1] = *(unsigned __int8 *)(v34 + 10 * v35 + 6);
LABEL_78:
      if ((v36 & 0x80000000) == 0)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13
                                                                   + 136 * v14
                                                                   + 8 * *(unsigned int *)&__c[1]
                                                                   + 680))(a9, *(_QWORD *)(v12 + 2032), v92);
      return result;
    }
    v88 = v34 + 10 * v35;
    v37 = v17;
    v38 = v12;
    v39 = v13;
    v40 = a4;
  }
  else
  {
    v37 = v17;
    v38 = v12;
    v39 = v13;
    v40 = a4;
    v88 = 0;
    result = a1 + 1024;
  }
  v41 = v28 & 0x1F;
  v90 = v29 & 0x1F;
  v92 = result;
  v42 = (_BYTE *)(a1 + (v29 & 0x1F) + 64);
  result = decode_coefs_0(a1, *(_QWORD *)(a1 + 656) + v41 + 32, (uint64_t)v42, a4, a2, a3, 0, 0, result, (unsigned int *)&__c[1], __c);
  v36 = result;
  v12 = v38;
  v43 = *(_DWORD *)(v38 + 3284) - *(_DWORD *)(a1 + 28);
  if (v37 < v43)
    v43 = v37;
  switch(v43)
  {
    case 1:
      v44 = __c[0];
      *v42 = __c[0];
      break;
    case 2:
      v44 = __c[0];
      *(_WORD *)v42 = __c[0] | (__c[0] << 8);
      break;
    case 4:
      v44 = __c[0];
      *(_DWORD *)v42 = 16843009 * __c[0];
      break;
    case 8:
      v44 = __c[0];
      *(_QWORD *)v42 = 0x101010101010101 * __c[0];
      break;
    case 16:
      v44 = __c[0];
      *(int64x2_t *)v42 = vdupq_n_s64(0x101010101010101 * (unint64_t)__c[0]);
      break;
    default:
      v44 = __c[0];
      v45 = v42;
      v46 = v36;
      result = (uint64_t)memset(v45, __c[0], v43);
      v36 = v46;
      v12 = v38;
      break;
  }
  v14 = v40;
  v13 = v39;
  v47 = (int *)(a1 + 259588);
  v48 = *(_DWORD *)(v12 + 3280) - *(_DWORD *)(a1 + 24);
  if (v16 < v48)
    v48 = v16;
  switch(v48)
  {
    case 1:
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v41 + 32) = v44;
      break;
    case 2:
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v41 + 32) = v44 | ((_WORD)v44 << 8);
      break;
    case 4:
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v41 + 32) = 16843009 * v44;
      break;
    case 8:
      v51 = 0x101010101010101 * v44;
      v52 = *(_QWORD *)(a1 + 656) + v41;
      goto LABEL_39;
    case 16:
      v51 = 0x101010101010101 * v44;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v41 + 32) = v51;
      v52 = *(_QWORD *)(a1 + 656) + (v41 + 8);
LABEL_39:
      *(_QWORD *)(v52 + 32) = v51;
      break;
    default:
      v49 = v12;
      v50 = v36;
      result = (uint64_t)memset((void *)(*(_QWORD *)(a1 + 656) + v41 + 32), v44, v48);
      v36 = v50;
      v12 = v49;
      break;
  }
  v53 = v41 | (32 * v90);
  v54 = a1 + 8256 + v53;
  switch(v16)
  {
    case 1:
      v55 = __c[1];
      v56 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_45;
      v57 = v56 + 1;
      v56 = (v56 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v56;
      v58 = (_BYTE *)(v53 + a1 + 8288);
      v59 = v56;
      do
      {
        *(v58 - 32) = v55;
        *v58 = v55;
        v58 += 64;
        v59 -= 2;
      }
      while (v59);
      if (v57 != v56)
      {
LABEL_45:
        v60 = v37 - v56;
        do
        {
          *(_BYTE *)v54 = v55;
          v54 += 32;
          --v60;
        }
        while (v60);
      }
      break;
    case 2:
      v61 = 257 * *(_WORD *)&__c[1];
      v62 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_52;
      v63 = v62 + 1;
      v62 = (v62 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v62;
      v64 = (_WORD *)(v53 + a1 + 8288);
      v65 = v62;
      do
      {
        *(v64 - 16) = v61;
        *v64 = v61;
        v64 += 32;
        v65 -= 2;
      }
      while (v65);
      if (v63 != v62)
      {
LABEL_52:
        v66 = v37 - v62;
        do
        {
          *(_WORD *)v54 = v61;
          v54 += 32;
          --v66;
        }
        while (v66);
      }
      break;
    case 4:
      v67 = 16843009 * *(_DWORD *)&__c[1];
      v68 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_59;
      v69 = v68 + 1;
      v68 = (v68 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v68;
      v70 = (int *)(v53 + a1 + 8288);
      v71 = v68;
      do
      {
        *(v70 - 8) = v67;
        *v70 = v67;
        v70 += 16;
        v71 -= 2;
      }
      while (v71);
      if (v69 != v68)
      {
LABEL_59:
        v72 = v37 - v68;
        do
        {
          *(_DWORD *)v54 = v67;
          v54 += 32;
          --v72;
        }
        while (v72);
      }
      break;
    case 8:
      v73 = 0x101010101010101 * *(unsigned int *)&__c[1];
      v74 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_66;
      v75 = v74 + 1;
      v74 = (v74 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v74;
      v76 = (uint64_t *)(v53 + a1 + 8288);
      v77 = v74;
      do
      {
        *(v76 - 4) = v73;
        *v76 = v73;
        v76 += 8;
        v77 -= 2;
      }
      while (v77);
      if (v75 != v74)
      {
LABEL_66:
        v78 = v37 - v74;
        do
        {
          *(_QWORD *)v54 = v73;
          v54 += 32;
          --v78;
        }
        while (v78);
      }
      break;
    case 16:
      v79 = 0x101010101010101 * *(unsigned int *)&__c[1];
      v80 = (v37 - 1);
      if (v37 == 1)
        goto LABEL_73;
      v81 = v80 + 1;
      v80 = (v80 + 1) & 0x1FFFFFFFELL;
      v54 += 32 * v80;
      v82 = (uint64_t *)(v53 + a1 + 8296);
      v83 = v80;
      do
      {
        *(v82 - 1) = v79;
        *v82 = v79;
        *(v82 - 5) = v79;
        *(v82 - 4) = v79;
        v82 += 8;
        v83 -= 2;
      }
      while (v83);
      if (v81 != v80)
      {
LABEL_73:
        v84 = v37 - v80;
        do
        {
          *(_QWORD *)v54 = v79;
          *(_QWORD *)(v54 + 8) = v79;
          v54 += 32;
          --v84;
        }
        while (v84);
      }
      break;
    default:
      break;
  }
  v85 = *v47;
  if (*v47 == 1)
  {
    *(_WORD *)v88 = v36;
    *(_BYTE *)(v88 + 6) = __c[1];
    v85 = *v47;
  }
  if ((v85 & 1) == 0)
    goto LABEL_78;
  return result;
}

uint64_t decode_coefs_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, int a7, unsigned int a8, uint64_t a9, unsigned int *a10, _BYTE *a11)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v23;
  unsigned __int8 **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int16x8_t *v39;
  unsigned int v40;
  int16x8_t *v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  int32x4_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint8x16_t *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  uint8x16_t *v68;
  unint64_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  uint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  uint32x4_t v87;
  uint64x2_t v88;
  uint64x2_t v89;
  uint32x4_t v90;
  uint64x2_t v91;
  uint16x8_t v92;
  uint32x4_t v93;
  uint64x2_t v94;
  uint64x2_t v95;
  uint64x2_t v96;
  uint64x2_t v97;
  uint32x4_t v98;
  uint64x2_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint64x2_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  uint64x2_t v107;
  int8x16_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  char v120;
  int v121;
  size_t v122;
  char *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  int16x8_t *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  char v133;
  int v134;
  char *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  int16x8_t *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  char *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  int16x8_t *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  char v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int16x8_t *v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  char *v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  int16x8_t *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  __int16 v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  char *v209;
  uint64_t v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  int16x8_t *v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  __int16 v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  char v233;
  char v234;
  int v235;
  unsigned int v236;
  unint64_t v237;
  int32x4_t v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  int v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  unint64_t v251;
  uint8x16_t *v252;
  unsigned int v253;
  unint64_t v254;
  int v255;
  unint64_t v256;
  unsigned int v257;
  uint8x16_t *v258;
  unint64_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int32x4_t v262;
  uint64_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  uint64_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  uint8x16_t v275;
  uint16x8_t v276;
  uint32x4_t v277;
  uint64x2_t v278;
  uint64x2_t v279;
  uint32x4_t v280;
  uint64x2_t v281;
  uint16x8_t v282;
  uint32x4_t v283;
  uint64x2_t v284;
  uint64x2_t v285;
  uint64x2_t v286;
  uint64x2_t v287;
  uint32x4_t v288;
  uint64x2_t v289;
  uint64x2_t v290;
  uint64x2_t v291;
  uint64x2_t v292;
  uint64x2_t v293;
  uint64x2_t v294;
  uint64x2_t v295;
  uint64x2_t v296;
  uint64x2_t v297;
  int8x16_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  int v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  unint64_t v317;
  uint8x16_t *v318;
  unsigned int v319;
  unint64_t v320;
  int v321;
  unint64_t v322;
  unsigned int v323;
  uint8x16_t *v324;
  unint64_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int32x4_t v328;
  uint64_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  uint64_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int8x16_t v340;
  uint8x16_t v341;
  uint16x8_t v342;
  uint32x4_t v343;
  uint64x2_t v344;
  uint64x2_t v345;
  uint32x4_t v346;
  uint64x2_t v347;
  uint16x8_t v348;
  uint32x4_t v349;
  uint64x2_t v350;
  uint64x2_t v351;
  uint64x2_t v352;
  uint64x2_t v353;
  uint32x4_t v354;
  uint64x2_t v355;
  uint64x2_t v356;
  uint64x2_t v357;
  uint64x2_t v358;
  uint64x2_t v359;
  uint64x2_t v360;
  uint64x2_t v361;
  uint64x2_t v362;
  uint64x2_t v363;
  int8x16_t v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  uint64_t v370;
  unint64_t v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  int v376;
  unsigned int v377;
  uint64_t v378;
  uint8x16_t *v379;
  unsigned int v380;
  unint64_t v381;
  int v382;
  unint64_t v383;
  unsigned int v384;
  uint8x16_t *v385;
  unint64_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int32x4_t v389;
  uint64_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  uint64_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  uint8x16_t v402;
  uint16x8_t v403;
  uint32x4_t v404;
  uint64x2_t v405;
  uint64x2_t v406;
  uint32x4_t v407;
  uint64x2_t v408;
  uint16x8_t v409;
  uint32x4_t v410;
  uint64x2_t v411;
  uint64x2_t v412;
  uint64x2_t v413;
  uint64x2_t v414;
  uint32x4_t v415;
  uint64x2_t v416;
  uint64x2_t v417;
  uint64x2_t v418;
  uint64x2_t v419;
  uint64x2_t v420;
  uint64x2_t v421;
  uint64x2_t v422;
  uint64x2_t v423;
  uint64x2_t v424;
  int8x16_t v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  int v430;
  unsigned int v431;
  unint64_t v432;
  int32x4_t v433;
  int v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  unint64_t v438;
  int v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  int v443;
  unsigned int v444;
  unint64_t v445;
  uint8x16_t *v446;
  unsigned int v447;
  unint64_t v448;
  int v449;
  unint64_t v450;
  unsigned int v451;
  uint8x16_t *v452;
  unint64_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int32x4_t v456;
  uint64_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  uint64_t v462;
  int8x16_t v463;
  int8x16_t v464;
  int8x16_t v465;
  int8x16_t v466;
  int8x16_t v467;
  int8x16_t v468;
  uint8x16_t v469;
  uint16x8_t v470;
  uint32x4_t v471;
  uint64x2_t v472;
  uint64x2_t v473;
  uint32x4_t v474;
  uint64x2_t v475;
  uint16x8_t v476;
  uint32x4_t v477;
  uint64x2_t v478;
  uint64x2_t v479;
  uint64x2_t v480;
  uint64x2_t v481;
  uint32x4_t v482;
  uint64x2_t v483;
  uint64x2_t v484;
  uint64x2_t v485;
  uint64x2_t v486;
  uint64x2_t v487;
  uint64x2_t v488;
  uint64x2_t v489;
  uint64x2_t v490;
  uint64x2_t v491;
  int8x16_t v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int v495;
  unsigned int v496;
  _BOOL4 v497;
  __int16 v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  uint64_t v502;
  unint64_t v503;
  int v504;
  uint64_t v505;
  unsigned int v506;
  unsigned int v507;
  int v508;
  unsigned int v509;
  unint64_t v510;
  uint8x16_t *v511;
  unsigned int v512;
  unint64_t v513;
  int v514;
  unint64_t v515;
  unsigned int v516;
  uint8x16_t *v517;
  unint64_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int32x4_t v521;
  uint64_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int32x4_t v525;
  int32x4_t v526;
  uint64_t v527;
  int8x16_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int8x16_t v531;
  int8x16_t v532;
  int8x16_t v533;
  uint8x16_t v534;
  uint16x8_t v535;
  uint32x4_t v536;
  uint64x2_t v537;
  uint64x2_t v538;
  uint32x4_t v539;
  uint64x2_t v540;
  uint16x8_t v541;
  uint32x4_t v542;
  uint64x2_t v543;
  uint64x2_t v544;
  uint64x2_t v545;
  uint64x2_t v546;
  uint32x4_t v547;
  uint64x2_t v548;
  uint64x2_t v549;
  uint64x2_t v550;
  uint64x2_t v551;
  uint64x2_t v552;
  uint64x2_t v553;
  uint64x2_t v554;
  uint64x2_t v555;
  uint64x2_t v556;
  int8x16_t v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  int v562;
  uint64_t v563;
  unint64_t v564;
  int v565;
  uint64_t v566;
  unsigned int v567;
  unsigned int v568;
  int v569;
  unsigned int v570;
  uint64_t v571;
  uint8x16_t *v572;
  unsigned int v573;
  unint64_t v574;
  int v575;
  unint64_t v576;
  unsigned int v577;
  uint8x16_t *v578;
  unint64_t v579;
  int8x16_t v580;
  int8x16_t v581;
  int32x4_t v582;
  uint64_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int32x4_t v587;
  uint64_t v588;
  int8x16_t v589;
  int8x16_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  uint8x16_t v595;
  uint16x8_t v596;
  uint32x4_t v597;
  uint64x2_t v598;
  uint64x2_t v599;
  uint32x4_t v600;
  uint64x2_t v601;
  uint16x8_t v602;
  uint32x4_t v603;
  uint64x2_t v604;
  uint64x2_t v605;
  uint64x2_t v606;
  uint64x2_t v607;
  uint32x4_t v608;
  uint64x2_t v609;
  uint64x2_t v610;
  uint64x2_t v611;
  uint64x2_t v612;
  uint64x2_t v613;
  uint64x2_t v614;
  uint64x2_t v615;
  uint64x2_t v616;
  uint64x2_t v617;
  int8x16_t v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  unsigned int v622;
  char v623;
  unsigned __int8 *v624;
  unsigned int v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  unsigned int v632;
  char *v633;
  uint64_t v634;
  uint64_t v636;
  uint64_t v637;
  int v638;
  char v639;
  char v640;
  uint64_t v643;
  int16x8_t *v644;
  char *v646;
  unsigned __int8 **v647;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 4 * *(unsigned __int8 *)(a6 + 4) + 1144);
  v15 = a4;
  v16 = &dav1d_block_dimensions[4 * a5];
  v634 = v12;
  if (a8)
    __asm { BR              X10 }
  v17 = (char *)&dav1d_txfm_dimensions + 8 * a4;
  v18 = v17[2];
  if (v16[2] != (_DWORD)v18 || (v19 = v16[3], v19 != v17[3]))
    __asm { BR              X9 }
  v638 = v16[2];
  v20 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4 + 7);
  if (dav1d_msac_decode_BOOL_adapt_c((unsigned __int8 **)(v13 + 13824), (unsigned __int16 *)(v13 + 7040 + 52 * v20 + 5896)))
  {
    *a11 = 64;
    *a10 = 16 * v14;
    return 0xFFFFFFFFLL;
  }
  v626 = v20;
  v637 = v15;
  v647 = (unsigned __int8 **)(v13 + 13824);
  if (!v14)
  {
    v25 = v20;
    if (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v15 + 5) + a7 > 3)
    {
      v23 = 0u;
      v24 = (unsigned __int8 **)(v13 + 13824);
      v26 = v638;
      goto LABEL_31;
    }
    v27 = *(_QWORD *)(v634 + 24);
    v26 = v638;
    v23 = *(_DWORD *)(v27 + 4 * *(unsigned __int8 *)(a6 + 4) + 1176);
    if (!v23)
    {
      v24 = (unsigned __int8 **)(v13 + 13824);
      goto LABEL_31;
    }
    v24 = (unsigned __int8 **)(v13 + 13824);
    if (!a7)
    {
      v32 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v637 + 4);
      if (((0x18608uLL >> v637) & 1) != 0 || *(_DWORD *)(v27 + 1420))
      {
        v23 = dav1d_msac_decode_BOOL_adapt_c(v647, (unsigned __int16 *)(v13 + 4 * v32 + 5448)) ? 0 : 9;
      }
      else
      {
        if (((0x60604uLL >> v637) & 1) != 0)
          v33 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)(v13 + 2144), 0xBuLL) + 12;
        else
          v33 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)(v13 + 32 * v32 + 2080), 0xFuLL) + 24;
        v23 = dav1d_tx_types_per_set[v33];
      }
      goto LABEL_31;
    }
    v28 = *(unsigned __int8 *)(a6 + 8);
    if (v28 == 13)
      v28 = dav1d_filter_mode_to_y_mode[*(char *)(a6 + 13)];
    v29 = *(_DWORD *)(v27 + 1420);
    v30 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v637 + 4);
    if (!v29)
    {
      if (((0x60604uLL >> v637) & 1) == 0)
      {
        v31 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)(v13+ 208 * *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v637 + 4)+ 16 * v28+ 2176), 6uLL)+ 5;
LABEL_28:
        v23 = dav1d_tx_types_per_set[v31];
        goto LABEL_31;
      }
      v30 = 2;
    }
    v31 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)(v13 + 208 * v30 + 16 * v28 + 2592), 4uLL);
    goto LABEL_28;
  }
  v23 = 0x10u;
  v24 = (unsigned __int8 **)(v13 + 13824);
  v25 = v20;
  v26 = v638;
LABEL_31:
  *a10 = v23;
  if (v26 >= 3)
    v34 = 3;
  else
    v34 = v26;
  if (v19 >= 3)
    v35 = 3;
  else
    v35 = v19;
  v36 = dav1d_tx_type_class[v23];
  v37 = v23 - 10;
  v631 = v36;
  switch(v34 + v35)
  {
    case 0:
      v38 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)(v13 + 7040 + 16 * (v37 < 6)), 4uLL);
      if (v38 < 2)
        goto LABEL_53;
      goto LABEL_55;
    case 1:
      v38 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)(v13 + 16 * (v37 < 6) + 7104), 5uLL);
      if (v38 >= 2)
        goto LABEL_55;
      goto LABEL_53;
    case 2:
      v38 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)(v13 + 16 * (v37 < 6) + 7168), 6uLL);
      if (v38 >= 2)
        goto LABEL_55;
      goto LABEL_53;
    case 3:
      v38 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)(v13 + 16 * (v37 < 6) + 7232), 7uLL);
      if (v38 >= 2)
        goto LABEL_55;
      goto LABEL_53;
    case 4:
      v38 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)(v13 + 32 * (v37 < 6) + 7296), 8uLL);
      if (v38 >= 2)
        goto LABEL_55;
      goto LABEL_53;
    case 5:
      v38 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)(v13 + 7424), 9uLL);
      if (v38 < 2)
        goto LABEL_53;
      goto LABEL_55;
    case 6:
      v38 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)(v13 + 7488), 0xAuLL);
      if (v38 < 2)
      {
LABEL_53:
        v42 = v637;
        goto LABEL_86;
      }
LABEL_55:
      v43 = v38;
      v44 = dav1d_msac_decode_BOOL_adapt_c(v24, (unsigned __int16 *)(v13 + 88 * v25 + 4 * v38 + 12496));
      v45 = v43 - 2;
      v46 = (v44 | 2) << (v43 - 2);
      v47 = 0;
      if (v43 != 2)
      {
        v48 = *(_DWORD *)(v13 + 13848);
        v49 = *(_QWORD *)(v13 + 13840);
        v50.i64[0] = 0x7F0000007FLL;
        v50.i64[1] = 0x7F0000007FLL;
        v51 = *(_DWORD *)(v13 + 13852);
        v42 = v637;
        while (1)
        {
          v55 = (v48 >> 1) & 0x7FFFFF80 | 4;
          v56 = v55 << 48;
          v57 = v48 - 2 * v55;
          if (v49 >= v55 << 48)
            v58 = v55 << 48;
          else
            v58 = 0;
          if (v49 < v55 << 48)
            v57 = 0;
          v59 = v57 + v55;
          v60 = __clz(v59);
          v61 = v60 ^ 0x10;
          v53 = v51 - (v60 ^ 0x10);
          *(_DWORD *)(v13 + 13852) = v53;
          v62 = ((v49 - v58 + 1) << (v60 ^ 0x10)) - 1;
          *(_QWORD *)(v13 + 13840) = v62;
          v48 = v59 << (v60 ^ 0x10);
          *(_DWORD *)(v13 + 13848) = v48;
          if ((v53 & 0x80000000) == 0)
            goto LABEL_60;
          v54 = *(uint8x16_t **)(v13 + 13824);
          v63 = 40 - v53;
          if ((int)(40 - v53) >= 0)
          {
            v64 = *(_QWORD *)(v13 + 13832);
            if ((unint64_t)v54 < v64)
              break;
          }
LABEL_59:
          *(_QWORD *)(v13 + 13840) = v62;
          *(_DWORD *)(v13 + 13852) = v53;
          *(_QWORD *)(v13 + 13824) = v54;
LABEL_60:
          v47 = (2 * v47) | (v49 < v56);
          v51 = v53;
          v49 = v62;
          if (!--v45)
            goto LABEL_85;
        }
        if (v63 >= 7)
          v65 = 7;
        else
          v65 = 40 - v53;
        v66 = (v61 - v51 - v65 + 47) >> 3;
        if (~(unint64_t)v54 + v64 < v66)
          v66 = ~(unint64_t)v54 + v64;
        if (v66 >= 0xF)
        {
          v69 = v66 + 1;
          v70 = 0uLL;
          v71 = (int8x16_t)(unint64_t)v62;
          v72 = vdupq_n_s32(v63);
          v73 = (v66 + 1) & 0x3FFFFFF0;
          v74 = vaddq_s32(v72, (int32x4_t)xmmword_196889AA0);
          v67 = v63 - 8 * v73;
          v75 = vaddq_s32(v72, (int32x4_t)xmmword_196889AB0);
          v68 = (uint8x16_t *)((char *)v54 + v73);
          v76 = vaddq_s32(v72, (int32x4_t)xmmword_196889AC0);
          v77 = vaddq_s32(v72, (int32x4_t)xmmword_196889AD0);
          v78 = v73;
          v79 = 0uLL;
          v80 = 0uLL;
          v81 = 0uLL;
          v82 = 0uLL;
          v83 = 0uLL;
          v84 = 0uLL;
          do
          {
            v85 = *v54++;
            v86 = vmovl_high_u8(v85);
            v87 = vmovl_high_u16(v86);
            v88.i64[0] = v87.u32[0];
            v88.i64[1] = v87.u32[1];
            v89 = v88;
            v90 = vmovl_u16(*(uint16x4_t *)v86.i8);
            v88.i64[0] = v90.u32[2];
            v88.i64[1] = v90.u32[3];
            v91 = v88;
            v92 = vmovl_u8(*(uint8x8_t *)v85.i8);
            v93 = vmovl_high_u16(v92);
            v88.i64[0] = v93.u32[2];
            v88.i64[1] = v93.u32[3];
            v94 = v88;
            v88.i64[0] = v87.u32[2];
            v88.i64[1] = v87.u32[3];
            v95 = v88;
            v88.i64[0] = v90.u32[0];
            v88.i64[1] = v90.u32[1];
            v96 = v88;
            v88.i64[0] = v93.u32[0];
            v88.i64[1] = v93.u32[1];
            v97 = v88;
            v98 = vmovl_u16(*(uint16x4_t *)v92.i8);
            v88.i64[0] = v98.u32[2];
            v88.i64[1] = v98.u32[3];
            v99 = v88;
            v88.i64[0] = v98.u32[0];
            v88.i64[1] = v98.u32[1];
            v100 = v88;
            v88.i64[0] = v74.u32[0];
            v88.i64[1] = v74.u32[1];
            v101 = v88;
            v88.i64[0] = v75.u32[2];
            v88.i64[1] = v75.u32[3];
            v102 = v88;
            v88.i64[0] = v76.u32[2];
            v88.i64[1] = v76.u32[3];
            v103 = v88;
            v88.i64[0] = v74.u32[2];
            v88.i64[1] = v74.u32[3];
            v104 = v88;
            v88.i64[0] = v75.u32[0];
            v88.i64[1] = v75.u32[1];
            v105 = v88;
            v88.i64[0] = v76.u32[0];
            v88.i64[1] = v76.u32[1];
            v106 = v88;
            v88.i64[0] = v77.u32[2];
            v88.i64[1] = v77.u32[3];
            v107 = v88;
            v88.i64[0] = v77.u32[0];
            v88.i64[1] = v77.u32[1];
            v83 = veorq_s8((int8x16_t)vshlq_u64(v89, v101), v83);
            v82 = veorq_s8((int8x16_t)vshlq_u64(v91, v102), v82);
            v80 = veorq_s8((int8x16_t)vshlq_u64(v94, v103), v80);
            v84 = veorq_s8((int8x16_t)vshlq_u64(v95, v104), v84);
            v81 = veorq_s8((int8x16_t)vshlq_u64(v96, v105), v81);
            v79 = veorq_s8((int8x16_t)vshlq_u64(v97, v106), v79);
            v70 = veorq_s8((int8x16_t)vshlq_u64(v99, v107), v70);
            v71 = veorq_s8((int8x16_t)vshlq_u64(v100, v88), v71);
            v77 = vaddq_s32(v77, v50);
            v76 = vaddq_s32(v76, v50);
            v75 = vaddq_s32(v75, v50);
            v74 = vaddq_s32(v74, v50);
            v78 -= 16;
          }
          while (v78);
          v108 = veorq_s8(veorq_s8(veorq_s8(v71, v81), veorq_s8(v79, v83)), veorq_s8(veorq_s8(v70, v82), veorq_s8(v80, v84)));
          v62 = (uint64_t)veor_s8(*(int8x8_t *)v108.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL));
          if (v69 == v73)
          {
            v52 = v63 - 8 * v73 + 8;
LABEL_58:
            v53 = 48 - v52;
            v54 = v68;
            goto LABEL_59;
          }
        }
        else
        {
          v67 = 40 - v53;
          v68 = *(uint8x16_t **)(v13 + 13824);
        }
        v109 = v67;
        do
        {
          v110 = v68->u8[0];
          v68 = (uint8x16_t *)((char *)v68 + 1);
          v62 ^= (unint64_t)v110 << v109;
          v111 = v109 - 8;
          if (v109 < 8)
            break;
          v109 -= 8;
        }
        while ((unint64_t)v68 < v64);
        v52 = v111 + 8;
        goto LABEL_58;
      }
      v42 = v637;
LABEL_85:
      v38 = v47 | v46;
LABEL_86:
      v39 = (int16x8_t *)(v13 + 7040 + (v25 << 6) + 512);
      if ((int)v25 >= 3)
        v112 = 3;
      else
        v112 = v25;
      v643 = v13 + 7040 + 336 * v112 + 4112;
      if (!v38)
      {
        v41 = (int16x8_t *)(v13 + 7040 + 336 * v112 + 4112);
LABEL_111:
        v131 = dav1d_msac_decode_symbol_adapt_c(v24, v39, 2uLL);
        v124 = 0;
        v625 = 0;
        if (v131 != 2)
        {
          v132 = v131 + 1;
LABEL_246:
          v203 = a9;
          goto LABEL_247;
        }
        goto LABEL_202;
      }
      v624 = (unsigned __int8 *)(a1 + 9281);
      v644 = (int16x8_t *)(v13 + 656 * v25 + 7872);
      v646 = (char *)(a1 + 9280);
      if (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4) >= 8u)
        v113 = 8;
      else
        v113 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4);
      if (*((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v42 + 1) >= 8u)
        v114 = 8;
      else
        v114 = *((unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v42 + 1);
      v115 = 1;
      if (v38 > 2 * v114 * v113)
        v115 = 2;
      v625 = v38;
      if (v38 <= 4 * v114 * v113)
        v116 = v115;
      else
        v116 = v115 + 1;
      v117 = dav1d_msac_decode_symbol_adapt_c(v24, (int16x8_t *)((char *)v39 + 8 * v116), 2uLL);
      LOWORD(v118) = v117 + 1;
      v119 = 65 * (v117 + 1);
      if (v631 == 2)
      {
        v133 = v19 + 2;
        v134 = 4 * v113 - 1;
        v135 = v646;
        bzero(v646, (v113 << 6) | 0x20u);
        v136 = v625;
        v639 = v638 + 2;
        v137 = v625 >> v639;
        v124 = ((v134 & v625) << v133) | (v625 >> v639);
        if (v117 == 2)
        {
          v138 = 112;
          if (!v137)
            v138 = 56;
          v139 = (int16x8_t *)(v643 + v138);
          v140 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)(v643 + v138), 3uLL);
          if (v140 == 3)
          {
            v141 = dav1d_msac_decode_symbol_adapt_c(v647, v139, 3uLL);
            if (v141 == 3)
            {
              v142 = dav1d_msac_decode_symbol_adapt_c(v647, v139, 3uLL);
              if (v142 == 3)
                v118 = dav1d_msac_decode_symbol_adapt_c(v647, v139, 3uLL) + 12;
              else
                LOWORD(v118) = v142 + 9;
            }
            else
            {
              LOWORD(v118) = v141 + 6;
            }
          }
          else
          {
            LOWORD(v118) = v140 + 3;
          }
          v119 = v118 - 64;
          v136 = v625;
        }
        *(_WORD *)(a9 + 2 * v124) = (_WORD)v118 << 11;
        v646[16 * (v134 & v625) + v137] = v119;
        if (v136 >= 2)
        {
          v175 = v136 + 1;
          do
          {
            while (1)
            {
              v177 = (v175 - 2) & v134;
              v178 = (v175 - 2) >> v639;
              v179 = (v177 << v133) | v178;
              v180 = &v135[16 * v177 + v178];
              v181 = v180[16] + v180[1] + v180[2];
              v182 = v181 + v180[3] + v180[4];
              v183 = 5 * v178 + 26;
              if (v178 > 1)
                v183 = 36;
              v184 = v182 <= 0x200 ? (v182 + 64) >> 7 : 4;
              v185 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)((char *)v644 + 8 * v184 + 8 * v183), 3uLL);
              if (v185 != 3)
                break;
              v186 = v181 & 0x3F;
              if ((_DWORD)v178)
                v187 = 14;
              else
                v187 = 7;
              if (v186 <= 0xC)
                v188 = (v186 + 1) >> 1;
              else
                v188 = 6;
              v189 = (int16x8_t *)(v643 + 8 * (v188 + v187));
              v190 = dav1d_msac_decode_symbol_adapt_c(v647, v189, 3uLL);
              if (v190 == 3)
              {
                v191 = dav1d_msac_decode_symbol_adapt_c(v647, v189, 3uLL);
                if (v191 == 3)
                {
                  v192 = dav1d_msac_decode_symbol_adapt_c(v647, v189, 3uLL);
                  if (v192 == 3)
                    v193 = dav1d_msac_decode_symbol_adapt_c(v647, v189, 3uLL) + 12;
                  else
                    LOWORD(v193) = v192 + 9;
                }
                else
                {
                  LOWORD(v193) = v191 + 6;
                }
              }
              else
              {
                LOWORD(v193) = v190 + 3;
              }
              v135 = v646;
              *v180 = v193 - 64;
              v194 = v124 | ((_WORD)v193 << 11);
              v124 = v179;
              *(_WORD *)(a9 + 2 * v179) = v194;
              if (--v175 <= 2)
                goto LABEL_194;
            }
            *v180 = 65 * v185;
            v176 = (v124 - 2048) & ((int)(1572673 * v185) >> 9);
            if (v176)
              v124 = v179;
            v135 = v646;
            *(_WORD *)(a9 + 2 * v179) = v176;
            --v175;
          }
          while (v175 > 2);
        }
        goto LABEL_194;
      }
      if (v631 == 1)
      {
        v120 = v19 + 2;
        v121 = 4 * v114 - 1;
        v122 = (v114 << 6) | 0x20;
        v123 = v646;
        bzero(v646, v122);
        v124 = v625;
        v125 = v625 >> v120;
        if (v117 == 2)
        {
          v126 = 112;
          if (!v125)
            v126 = 56;
          v127 = (int16x8_t *)(v643 + v126);
          v128 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)(v643 + v126), 3uLL);
          if (v128 == 3)
          {
            v129 = dav1d_msac_decode_symbol_adapt_c(v647, v127, 3uLL);
            if (v129 == 3)
            {
              v130 = dav1d_msac_decode_symbol_adapt_c(v647, v127, 3uLL);
              if (v130 == 3)
                v118 = dav1d_msac_decode_symbol_adapt_c(v647, v127, 3uLL) + 12;
              else
                LOWORD(v118) = v130 + 9;
            }
            else
            {
              LOWORD(v118) = v129 + 6;
            }
          }
          else
          {
            LOWORD(v118) = v128 + 3;
          }
          v119 = v118 - 64;
          v124 = v625;
          v123 = v646;
        }
        *(_WORD *)(a9 + 2 * v124) = (_WORD)v118 << 11;
        v123[16 * (v121 & v625) + v125] = v119;
        if (v124 < 2)
        {
          v124 = 1;
        }
        else
        {
          v156 = v124 - 1;
          do
          {
            v161 = v156 >> v120;
            v162 = &v646[16 * (v121 & v156) + v161];
            v163 = v162[16] + v162[1] + v162[2];
            v164 = v163 + v162[3] + v162[4];
            v165 = 5 * v161 + 26;
            if (v161 > 1)
              v165 = 36;
            if (v164 <= 0x200)
              v166 = (v164 + 64) >> 7;
            else
              v166 = 4;
            v167 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)((char *)v644 + 8 * v166 + 8 * v165), 3uLL);
            if (v167 == 3)
            {
              v168 = v163 & 0x3F;
              if ((_DWORD)v161)
                v169 = 14;
              else
                v169 = 7;
              if (v168 <= 0xC)
                v170 = (v168 + 1) >> 1;
              else
                v170 = 6;
              v171 = (int16x8_t *)(v643 + 8 * (v170 + v169));
              v172 = dav1d_msac_decode_symbol_adapt_c(v647, v171, 3uLL);
              if (v172 == 3)
              {
                v173 = dav1d_msac_decode_symbol_adapt_c(v647, v171, 3uLL);
                if (v173 == 3)
                {
                  v174 = dav1d_msac_decode_symbol_adapt_c(v647, v171, 3uLL);
                  if (v174 == 3)
                    v158 = dav1d_msac_decode_symbol_adapt_c(v647, v171, 3uLL) + 12;
                  else
                    LOWORD(v158) = v174 + 9;
                }
                else
                {
                  LOWORD(v158) = v173 + 6;
                }
              }
              else
              {
                LOWORD(v158) = v172 + 3;
              }
              v159 = a9;
              v157 = v158 - 64;
              LOWORD(v158) = v124 | ((_WORD)v158 << 11);
              v124 = v156;
            }
            else
            {
              v157 = 65 * v167;
              v158 = (v124 - 2048) & ((int)(1572673 * v167) >> 9);
              if (v158)
                v124 = v156;
              v159 = a9;
            }
            *v162 = v157;
            *(_WORD *)(v159 + 2 * v156) = v158;
            v160 = v156-- + 1;
          }
          while (v160 > 2);
        }
LABEL_194:
        v195 = v624[15] + *v624 + v624[1];
        v196 = v195 + v624[2] + v624[3];
        if (v196 <= 0x200)
          v197 = ((v196 + 64) >> 7) + 26;
        else
          v197 = 30;
        v24 = (unsigned __int8 **)(v13 + 13824);
        v198 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)((char *)v644 + 8 * v197), 3uLL);
        if (v198 != 3)
        {
          v132 = v198;
          v203 = a9;
          goto LABEL_247;
        }
        if ((v195 & 0x3Fu) <= 0xC)
          v199 = ((v195 & 0x3Fu) + 1) >> 1;
        else
          v199 = 6;
        v41 = (int16x8_t *)(v643 + 8 * v199);
LABEL_202:
        v200 = dav1d_msac_decode_symbol_adapt_c(v24, v41, 3uLL);
        if (v200 == 3)
        {
LABEL_203:
          v201 = dav1d_msac_decode_symbol_adapt_c(v24, v41, 3uLL);
          if (v201 == 3)
          {
            v202 = dav1d_msac_decode_symbol_adapt_c(v24, v41, 3uLL);
            if (v202 == 3)
              v132 = dav1d_msac_decode_symbol_adapt_c(v24, v41, 3uLL) + 12;
            else
              v132 = v202 + 9;
          }
          else
          {
            v132 = v201 + 6;
          }
          goto LABEL_246;
        }
        goto LABEL_245;
      }
      v143 = v646;
      v144 = (a4 > 4) & a4;
      if (a4 > 4)
        ++v144;
      v632 = v144;
      v145 = (uint64_t)*(&dav1d_scans + v637);
      v146 = 4 * v114;
      if (v19 >= 4)
        v147 = 5;
      else
        v147 = v19 + 2;
      bzero(v646, v146 * ((4 * v113) | 2));
      v148 = v625;
      v627 = v145;
      v124 = *(unsigned __int16 *)(v145 + 2 * v625);
      v640 = v147;
      v149 = v124 >> v147;
      v636 = (v146 - 1);
      v150 = (v146 - 1) & v124;
      if (v117 == 2)
      {
        v151 = 56;
        if ((v149 | v150) > 1)
          v151 = 112;
        v152 = (int16x8_t *)(v643 + v151);
        v153 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)(v643 + v151), 3uLL);
        if (v153 == 3)
        {
          v154 = dav1d_msac_decode_symbol_adapt_c(v647, v152, 3uLL);
          if (v154 == 3)
          {
            v155 = dav1d_msac_decode_symbol_adapt_c(v647, v152, 3uLL);
            if (v155 == 3)
              v118 = dav1d_msac_decode_symbol_adapt_c(v647, v152, 3uLL) + 12;
            else
              LOWORD(v118) = v155 + 9;
          }
          else
          {
            LOWORD(v118) = v154 + 6;
          }
        }
        else
        {
          LOWORD(v118) = v153 + 3;
        }
        v119 = v118 - 64;
        v148 = v625;
      }
      *(_WORD *)(a9 + 2 * v124) = (_WORD)v118 << 11;
      v646[v149 * v146 + (unint64_t)v150] = v119;
      if (v148 >= 2)
      {
        v633 = (char *)&dav1d_lo_ctx_offsets + 25 * v632;
        v629 = 2 * v146;
        v630 = v146 | 1;
        v628 = v627 - 2;
        v204 = v148;
        do
        {
          while (1)
          {
            v206 = *(unsigned __int16 *)(v628 + 2 * v204);
            v207 = v206 >> v640;
            v208 = v636 & v206;
            v209 = &v143[(v206 >> v640) * (unint64_t)v146 + (v636 & v206)];
            v210 = v146;
            v211 = v209[v146] + v209[1] + v209[v630];
            v212 = v211 + v209[2] + v209[v629];
            v213 = (v636 & v206) >= 4 ? 4 : v208;
            v214 = v207 >= 4 ? 4 : v206 >> v640;
            v215 = v633[4 * v213 + v213 + v214];
            v216 = v212 <= 0x200 ? (v212 + 64) >> 7 : 4;
            v217 = dav1d_msac_decode_symbol_adapt_c(v647, (int16x8_t *)((char *)v644 + 8 * v216 + 8 * v215), 3uLL);
            if (v217 != 3)
              break;
            v218 = v211 & 0x3F;
            if ((v207 | v208) <= 1)
              v219 = 7;
            else
              v219 = 14;
            if (v218 <= 0xC)
              v220 = (v218 + 1) >> 1;
            else
              v220 = 6;
            v221 = (int16x8_t *)(v643 + 8 * (v220 + v219));
            v222 = dav1d_msac_decode_symbol_adapt_c(v647, v221, 3uLL);
            if (v222 == 3)
            {
              v223 = dav1d_msac_decode_symbol_adapt_c(v647, v221, 3uLL);
              if (v223 == 3)
              {
                v224 = dav1d_msac_decode_symbol_adapt_c(v647, v221, 3uLL);
                if (v224 == 3)
                  v225 = dav1d_msac_decode_symbol_adapt_c(v647, v221, 3uLL) + 12;
                else
                  LOWORD(v225) = v224 + 9;
              }
              else
              {
                LOWORD(v225) = v223 + 6;
              }
            }
            else
            {
              LOWORD(v225) = v222 + 3;
            }
            v143 = v646;
            v146 = v210;
            *v209 = v225 - 64;
            v226 = v124 | ((_WORD)v225 << 11);
            v124 = v206;
            --v204;
            *(_WORD *)(a9 + 2 * v206) = v226;
            if ((unint64_t)(v204 + 1) <= 2)
              goto LABEL_240;
          }
          *v209 = 65 * v217;
          v205 = (v124 - 2048) & ((int)(1572673 * v217) >> 9);
          if (v205)
            v124 = v206;
          v143 = v646;
          v146 = v210;
          --v204;
          *(_WORD *)(a9 + 2 * v206) = v205;
        }
        while ((unint64_t)(v204 + 1) > 2);
      }
LABEL_240:
      v227 = dav1d_msac_decode_symbol_adapt_c(v647, v644, 3uLL);
      if (v227 == 3)
      {
        v228 = (v143[v146] + *v624 + v143[v146 | 1]) & 0x3F;
        if (v228 <= 0xC)
          v229 = (v228 + 1) >> 1;
        else
          v229 = 6;
        v41 = (int16x8_t *)(v643 + 8 * v229);
        v24 = (unsigned __int8 **)(v13 + 13824);
        v200 = dav1d_msac_decode_symbol_adapt_c(v647, v41, 3uLL);
        if (v200 == 3)
          goto LABEL_203;
LABEL_245:
        v132 = v200 + 3;
        goto LABEL_246;
      }
      v132 = v227;
      v203 = a9;
LABEL_247:
      v230 = *(_QWORD *)(v13 + 14032) + 12 * *(unsigned __int8 *)(a6 + 4);
      if (*a10 > 8)
      {
        if (v626 <= 2)
          v234 = 2;
        else
          v234 = v626;
        v233 = v234 - 2;
        if (!v132)
          goto LABEL_355;
LABEL_258:
        __asm { BR              X9 }
      }
      v231 = *(_QWORD *)(v634 + 24 * v637 + 8 * a8 + 3408);
      if (v626 <= 2)
        v232 = 2;
      else
        v232 = v626;
      v233 = v232 - 2;
      if (v132)
        goto LABEL_258;
      if (!v231)
      {
LABEL_355:
        v430 = *(unsigned __int16 *)(v230 + 2);
        v431 = *(_DWORD *)(v13 + 13848);
        v432 = *(_QWORD *)(v13 + 13840);
        v433.i64[0] = 0x7F0000007FLL;
        v433.i64[1] = 0x7F0000007FLL;
        v434 = *(_DWORD *)(v13 + 13852);
        while (1)
        {
          v437 = (v431 >> 1) & 0x7FFFFF80 | 4;
          v438 = v437 << 48;
          v439 = v431 - 2 * v437;
          if (v432 >= v437 << 48)
            v440 = v437 << 48;
          else
            v440 = 0;
          if (v432 < v437 << 48)
            v439 = 0;
          v441 = v439 + v437;
          v442 = __clz(v441);
          v443 = v442 ^ 0x10;
          v444 = v434 - (v442 ^ 0x10);
          *(_DWORD *)(v13 + 13852) = v444;
          v445 = ((v432 - v440 + 1) << (v442 ^ 0x10)) - 1;
          *(_QWORD *)(v13 + 13840) = v445;
          v431 = v441 << (v442 ^ 0x10);
          *(_DWORD *)(v13 + 13848) = v431;
          if ((v444 & 0x80000000) == 0)
            goto LABEL_383;
          v446 = *(uint8x16_t **)(v13 + 13824);
          v447 = 40 - v444;
          if ((int)(40 - v444) >= 0)
          {
            v448 = *(_QWORD *)(v13 + 13832);
            if ((unint64_t)v446 < v448)
              break;
          }
LABEL_382:
          *(_QWORD *)(v13 + 13840) = v445;
          *(_DWORD *)(v13 + 13852) = v444;
          *(_QWORD *)(v13 + 13824) = v446;
LABEL_383:
          v497 = v432 < v438;
          if (v432 >= v438)
            v498 = 0;
          else
            v498 = -1;
          v499 = *(__int16 *)(v203 + 2 * v124);
          if ((unsigned __int16)(*(_WORD *)(v203 + 2 * v124) >> 11) < 0xFu)
          {
            v435 = v499 >> 11;
            v436 = (((v499 >> 11) * v430) >> v233) - v497;
            goto LABEL_357;
          }
          v500 = 0;
          do
          {
            v501 = v500;
            v502 = (v431 >> 1) & 0x7FFFFF80 | 4;
            v503 = v502 << 48;
            v504 = v431 - 2 * v502;
            if (v445 < v502 << 48)
              v505 = 0;
            else
              v505 = v502 << 48;
            if (v445 < v502 << 48)
              v504 = 0;
            v506 = v504 + v502;
            v507 = __clz(v506);
            v508 = v507 ^ 0x10;
            v509 = v444 - (v507 ^ 0x10);
            *(_DWORD *)(v13 + 13852) = v509;
            v510 = ((v445 - v505 + 1) << (v507 ^ 0x10)) - 1;
            *(_QWORD *)(v13 + 13840) = v510;
            v431 = v506 << v508;
            *(_DWORD *)(v13 + 13848) = v431;
            if ((v509 & 0x80000000) == 0)
            {
              v444 -= v508;
              if (v445 < v503)
                break;
              goto LABEL_415;
            }
            v511 = *(uint8x16_t **)(v13 + 13824);
            v512 = 40 - v509;
            if ((int)(40 - v509) >= 0)
            {
              v513 = *(_QWORD *)(v13 + 13832);
              if ((unint64_t)v511 < v513)
              {
                if (v512 >= 7)
                  v514 = 7;
                else
                  v514 = 40 - v509;
                v515 = (v508 - v444 - v514 + 47) >> 3;
                if (~(unint64_t)v511 + v513 < v515)
                  v515 = ~(unint64_t)v511 + v513;
                if (v515 >= 0xF)
                {
                  v518 = v515 + 1;
                  v519 = 0uLL;
                  v520 = (int8x16_t)v510;
                  v521 = vdupq_n_s32(v512);
                  v522 = (v515 + 1) & 0x3FFFFFF0;
                  v523 = vaddq_s32(v521, (int32x4_t)xmmword_196889AA0);
                  v516 = v512 - 8 * v522;
                  v524 = vaddq_s32(v521, (int32x4_t)xmmword_196889AB0);
                  v517 = (uint8x16_t *)((char *)v511 + v522);
                  v525 = vaddq_s32(v521, (int32x4_t)xmmword_196889AC0);
                  v526 = vaddq_s32(v521, (int32x4_t)xmmword_196889AD0);
                  v527 = v522;
                  v528 = 0uLL;
                  v529 = 0uLL;
                  v530 = 0uLL;
                  v531 = 0uLL;
                  v532 = 0uLL;
                  v533 = 0uLL;
                  do
                  {
                    v534 = *v511++;
                    v535 = vmovl_high_u8(v534);
                    v536 = vmovl_high_u16(v535);
                    v537.i64[0] = v536.u32[0];
                    v537.i64[1] = v536.u32[1];
                    v538 = v537;
                    v539 = vmovl_u16(*(uint16x4_t *)v535.i8);
                    v537.i64[0] = v539.u32[2];
                    v537.i64[1] = v539.u32[3];
                    v540 = v537;
                    v541 = vmovl_u8(*(uint8x8_t *)v534.i8);
                    v542 = vmovl_high_u16(v541);
                    v537.i64[0] = v542.u32[2];
                    v537.i64[1] = v542.u32[3];
                    v543 = v537;
                    v537.i64[0] = v536.u32[2];
                    v537.i64[1] = v536.u32[3];
                    v544 = v537;
                    v537.i64[0] = v539.u32[0];
                    v537.i64[1] = v539.u32[1];
                    v545 = v537;
                    v537.i64[0] = v542.u32[0];
                    v537.i64[1] = v542.u32[1];
                    v546 = v537;
                    v547 = vmovl_u16(*(uint16x4_t *)v541.i8);
                    v537.i64[0] = v547.u32[2];
                    v537.i64[1] = v547.u32[3];
                    v548 = v537;
                    v537.i64[0] = v547.u32[0];
                    v537.i64[1] = v547.u32[1];
                    v549 = v537;
                    v537.i64[0] = v523.u32[0];
                    v537.i64[1] = v523.u32[1];
                    v550 = v537;
                    v537.i64[0] = v524.u32[2];
                    v537.i64[1] = v524.u32[3];
                    v551 = v537;
                    v537.i64[0] = v525.u32[2];
                    v537.i64[1] = v525.u32[3];
                    v552 = v537;
                    v537.i64[0] = v523.u32[2];
                    v537.i64[1] = v523.u32[3];
                    v553 = v537;
                    v537.i64[0] = v524.u32[0];
                    v537.i64[1] = v524.u32[1];
                    v554 = v537;
                    v537.i64[0] = v525.u32[0];
                    v537.i64[1] = v525.u32[1];
                    v555 = v537;
                    v537.i64[0] = v526.u32[2];
                    v537.i64[1] = v526.u32[3];
                    v556 = v537;
                    v537.i64[0] = v526.u32[0];
                    v537.i64[1] = v526.u32[1];
                    v532 = veorq_s8((int8x16_t)vshlq_u64(v538, v550), v532);
                    v531 = veorq_s8((int8x16_t)vshlq_u64(v540, v551), v531);
                    v529 = veorq_s8((int8x16_t)vshlq_u64(v543, v552), v529);
                    v533 = veorq_s8((int8x16_t)vshlq_u64(v544, v553), v533);
                    v530 = veorq_s8((int8x16_t)vshlq_u64(v545, v554), v530);
                    v528 = veorq_s8((int8x16_t)vshlq_u64(v546, v555), v528);
                    v519 = veorq_s8((int8x16_t)vshlq_u64(v548, v556), v519);
                    v520 = veorq_s8((int8x16_t)vshlq_u64(v549, v537), v520);
                    v526 = vaddq_s32(v526, v433);
                    v525 = vaddq_s32(v525, v433);
                    v524 = vaddq_s32(v524, v433);
                    v523 = vaddq_s32(v523, v433);
                    v527 -= 16;
                  }
                  while (v527);
                  v557 = veorq_s8(veorq_s8(veorq_s8(v520, v530), veorq_s8(v528, v532)), veorq_s8(veorq_s8(v519, v531), veorq_s8(v529, v533)));
                  v510 = (unint64_t)veor_s8(*(int8x8_t *)v557.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v557, v557, 8uLL));
                  if (v518 != v522)
                    goto LABEL_409;
                  v558 = v512 - 8 * v522 + 8;
                }
                else
                {
                  v516 = 40 - v509;
                  v517 = *(uint8x16_t **)(v13 + 13824);
LABEL_409:
                  v559 = v516;
                  do
                  {
                    v560 = v517->u8[0];
                    v517 = (uint8x16_t *)((char *)v517 + 1);
                    v510 ^= (unint64_t)v560 << v559;
                    v561 = v559 - 8;
                    if (v559 < 8)
                      break;
                    v559 -= 8;
                  }
                  while ((unint64_t)v517 < v513);
                  v558 = v561 + 8;
                }
                v509 = 48 - v558;
                v511 = v517;
              }
            }
            *(_QWORD *)(v13 + 13840) = v510;
            *(_DWORD *)(v13 + 13852) = v509;
            v444 = v509;
            *(_QWORD *)(v13 + 13824) = v511;
            if (v445 < v503)
              break;
LABEL_415:
            v500 = v501 + 1;
            v445 = v510;
          }
          while (v501 < 0x20);
          if (!v501)
            goto LABEL_446;
          v562 = 1;
          while (2)
          {
            v563 = (v431 >> 1) & 0x7FFFFF80 | 4;
            v564 = v563 << 48;
            v565 = v431 - 2 * v563;
            if (v510 >= v563 << 48)
              v566 = v563 << 48;
            else
              v566 = 0;
            if (v510 < v563 << 48)
              v565 = 0;
            v567 = v565 + v563;
            v568 = __clz(v567);
            v569 = v568 ^ 0x10;
            v570 = v444 - (v568 ^ 0x10);
            *(_DWORD *)(v13 + 13852) = v570;
            v571 = ((v510 - v566 + 1) << (v568 ^ 0x10)) - 1;
            *(_QWORD *)(v13 + 13840) = v571;
            v431 = v567 << (v568 ^ 0x10);
            *(_DWORD *)(v13 + 13848) = v431;
            if ((v570 & 0x80000000) != 0)
            {
              v572 = *(uint8x16_t **)(v13 + 13824);
              v573 = 40 - v570;
              if ((int)(40 - v570) >= 0)
              {
                v574 = *(_QWORD *)(v13 + 13832);
                if ((unint64_t)v572 < v574)
                {
                  if (v573 >= 7)
                    v575 = 7;
                  else
                    v575 = 40 - v570;
                  v576 = (v569 - v444 - v575 + 47) >> 3;
                  if (~(unint64_t)v572 + v574 < v576)
                    v576 = ~(unint64_t)v572 + v574;
                  if (v576 >= 0xF)
                  {
                    v579 = v576 + 1;
                    v580 = 0uLL;
                    v581 = (int8x16_t)(unint64_t)v571;
                    v582 = vdupq_n_s32(v573);
                    v583 = (v576 + 1) & 0x3FFFFFF0;
                    v584 = vaddq_s32(v582, (int32x4_t)xmmword_196889AA0);
                    v577 = v573 - 8 * v583;
                    v585 = vaddq_s32(v582, (int32x4_t)xmmword_196889AB0);
                    v578 = (uint8x16_t *)((char *)v572 + v583);
                    v586 = vaddq_s32(v582, (int32x4_t)xmmword_196889AC0);
                    v587 = vaddq_s32(v582, (int32x4_t)xmmword_196889AD0);
                    v588 = v583;
                    v589 = 0uLL;
                    v590 = 0uLL;
                    v591 = 0uLL;
                    v592 = 0uLL;
                    v593 = 0uLL;
                    v594 = 0uLL;
                    do
                    {
                      v595 = *v572++;
                      v596 = vmovl_high_u8(v595);
                      v597 = vmovl_high_u16(v596);
                      v598.i64[0] = v597.u32[0];
                      v598.i64[1] = v597.u32[1];
                      v599 = v598;
                      v600 = vmovl_u16(*(uint16x4_t *)v596.i8);
                      v598.i64[0] = v600.u32[2];
                      v598.i64[1] = v600.u32[3];
                      v601 = v598;
                      v602 = vmovl_u8(*(uint8x8_t *)v595.i8);
                      v603 = vmovl_high_u16(v602);
                      v598.i64[0] = v603.u32[2];
                      v598.i64[1] = v603.u32[3];
                      v604 = v598;
                      v598.i64[0] = v597.u32[2];
                      v598.i64[1] = v597.u32[3];
                      v605 = v598;
                      v598.i64[0] = v600.u32[0];
                      v598.i64[1] = v600.u32[1];
                      v606 = v598;
                      v598.i64[0] = v603.u32[0];
                      v598.i64[1] = v603.u32[1];
                      v607 = v598;
                      v608 = vmovl_u16(*(uint16x4_t *)v602.i8);
                      v598.i64[0] = v608.u32[2];
                      v598.i64[1] = v608.u32[3];
                      v609 = v598;
                      v598.i64[0] = v608.u32[0];
                      v598.i64[1] = v608.u32[1];
                      v610 = v598;
                      v598.i64[0] = v584.u32[0];
                      v598.i64[1] = v584.u32[1];
                      v611 = v598;
                      v598.i64[0] = v585.u32[2];
                      v598.i64[1] = v585.u32[3];
                      v612 = v598;
                      v598.i64[0] = v586.u32[2];
                      v598.i64[1] = v586.u32[3];
                      v613 = v598;
                      v598.i64[0] = v584.u32[2];
                      v598.i64[1] = v584.u32[3];
                      v614 = v598;
                      v598.i64[0] = v585.u32[0];
                      v598.i64[1] = v585.u32[1];
                      v615 = v598;
                      v598.i64[0] = v586.u32[0];
                      v598.i64[1] = v586.u32[1];
                      v616 = v598;
                      v598.i64[0] = v587.u32[2];
                      v598.i64[1] = v587.u32[3];
                      v617 = v598;
                      v598.i64[0] = v587.u32[0];
                      v598.i64[1] = v587.u32[1];
                      v593 = veorq_s8((int8x16_t)vshlq_u64(v599, v611), v593);
                      v592 = veorq_s8((int8x16_t)vshlq_u64(v601, v612), v592);
                      v590 = veorq_s8((int8x16_t)vshlq_u64(v604, v613), v590);
                      v594 = veorq_s8((int8x16_t)vshlq_u64(v605, v614), v594);
                      v591 = veorq_s8((int8x16_t)vshlq_u64(v606, v615), v591);
                      v589 = veorq_s8((int8x16_t)vshlq_u64(v607, v616), v589);
                      v580 = veorq_s8((int8x16_t)vshlq_u64(v609, v617), v580);
                      v581 = veorq_s8((int8x16_t)vshlq_u64(v610, v598), v581);
                      v587 = vaddq_s32(v587, v433);
                      v586 = vaddq_s32(v586, v433);
                      v585 = vaddq_s32(v585, v433);
                      v584 = vaddq_s32(v584, v433);
                      v588 -= 16;
                    }
                    while (v588);
                    v618 = veorq_s8(veorq_s8(veorq_s8(v581, v591), veorq_s8(v589, v593)), veorq_s8(veorq_s8(v580, v592), veorq_s8(v590, v594)));
                    v571 = (uint64_t)veor_s8(*(int8x8_t *)v618.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v618, v618, 8uLL));
                    if (v579 != v583)
                      goto LABEL_439;
                    v619 = v573 - 8 * v583 + 8;
                  }
                  else
                  {
                    v577 = 40 - v570;
                    v578 = *(uint8x16_t **)(v13 + 13824);
LABEL_439:
                    v620 = v577;
                    do
                    {
                      v621 = v578->u8[0];
                      v578 = (uint8x16_t *)((char *)v578 + 1);
                      v571 ^= (unint64_t)v621 << v620;
                      v622 = v620 - 8;
                      if (v620 < 8)
                        break;
                      v620 -= 8;
                    }
                    while ((unint64_t)v578 < v574);
                    v619 = v622 + 8;
                  }
                  v570 = 48 - v619;
                  v572 = v578;
                }
              }
              *(_QWORD *)(v13 + 13840) = v571;
              *(_DWORD *)(v13 + 13852) = v570;
              v444 = v570;
              *(_QWORD *)(v13 + 13824) = v572;
            }
            else
            {
              v444 -= v569;
            }
            v562 = (2 * v562) | (v510 < v564);
            v510 = v571;
            if (--v501)
              continue;
            break;
          }
          v501 = v562 - 1;
          v510 = v571;
LABEL_446:
          v435 = (v501 + 15) & 0xFFFFF;
          v436 = (((v435 * v430) & 0xFFFFFF) >> v233) - v497;
          if (v436 >= 0x7FFF)
            LOWORD(v436) = 0x7FFF;
          v445 = v510;
LABEL_357:
          v132 += v435;
          *(_WORD *)(v203 + 2 * v124) = v436 ^ v498;
          v434 = v444;
          v432 = v445;
          v124 = v499 & 0x3FF;
          if ((v499 & 0x3FF) == 0)
            goto LABEL_449;
        }
        if (v447 >= 7)
          v449 = 7;
        else
          v449 = 40 - v444;
        v450 = (v443 - v434 - v449 + 47) >> 3;
        if (~(unint64_t)v446 + v448 < v450)
          v450 = ~(unint64_t)v446 + v448;
        if (v450 >= 0xF)
        {
          v453 = v450 + 1;
          v454 = 0uLL;
          v455 = (int8x16_t)v445;
          v456 = vdupq_n_s32(v447);
          v457 = (v450 + 1) & 0x3FFFFFF0;
          v458 = vaddq_s32(v456, (int32x4_t)xmmword_196889AA0);
          v451 = v447 - 8 * v457;
          v459 = vaddq_s32(v456, (int32x4_t)xmmword_196889AB0);
          v452 = (uint8x16_t *)((char *)v446 + v457);
          v460 = vaddq_s32(v456, (int32x4_t)xmmword_196889AC0);
          v461 = vaddq_s32(v456, (int32x4_t)xmmword_196889AD0);
          v462 = v457;
          v463 = 0uLL;
          v464 = 0uLL;
          v465 = 0uLL;
          v466 = 0uLL;
          v467 = 0uLL;
          v468 = 0uLL;
          do
          {
            v469 = *v446++;
            v470 = vmovl_high_u8(v469);
            v471 = vmovl_high_u16(v470);
            v472.i64[0] = v471.u32[0];
            v472.i64[1] = v471.u32[1];
            v473 = v472;
            v474 = vmovl_u16(*(uint16x4_t *)v470.i8);
            v472.i64[0] = v474.u32[2];
            v472.i64[1] = v474.u32[3];
            v475 = v472;
            v476 = vmovl_u8(*(uint8x8_t *)v469.i8);
            v477 = vmovl_high_u16(v476);
            v472.i64[0] = v477.u32[2];
            v472.i64[1] = v477.u32[3];
            v478 = v472;
            v472.i64[0] = v471.u32[2];
            v472.i64[1] = v471.u32[3];
            v479 = v472;
            v472.i64[0] = v474.u32[0];
            v472.i64[1] = v474.u32[1];
            v480 = v472;
            v472.i64[0] = v477.u32[0];
            v472.i64[1] = v477.u32[1];
            v481 = v472;
            v482 = vmovl_u16(*(uint16x4_t *)v476.i8);
            v472.i64[0] = v482.u32[2];
            v472.i64[1] = v482.u32[3];
            v483 = v472;
            v472.i64[0] = v482.u32[0];
            v472.i64[1] = v482.u32[1];
            v484 = v472;
            v472.i64[0] = v458.u32[0];
            v472.i64[1] = v458.u32[1];
            v485 = v472;
            v472.i64[0] = v459.u32[2];
            v472.i64[1] = v459.u32[3];
            v486 = v472;
            v472.i64[0] = v460.u32[2];
            v472.i64[1] = v460.u32[3];
            v487 = v472;
            v472.i64[0] = v458.u32[2];
            v472.i64[1] = v458.u32[3];
            v488 = v472;
            v472.i64[0] = v459.u32[0];
            v472.i64[1] = v459.u32[1];
            v489 = v472;
            v472.i64[0] = v460.u32[0];
            v472.i64[1] = v460.u32[1];
            v490 = v472;
            v472.i64[0] = v461.u32[2];
            v472.i64[1] = v461.u32[3];
            v491 = v472;
            v472.i64[0] = v461.u32[0];
            v472.i64[1] = v461.u32[1];
            v467 = veorq_s8((int8x16_t)vshlq_u64(v473, v485), v467);
            v466 = veorq_s8((int8x16_t)vshlq_u64(v475, v486), v466);
            v464 = veorq_s8((int8x16_t)vshlq_u64(v478, v487), v464);
            v468 = veorq_s8((int8x16_t)vshlq_u64(v479, v488), v468);
            v465 = veorq_s8((int8x16_t)vshlq_u64(v480, v489), v465);
            v463 = veorq_s8((int8x16_t)vshlq_u64(v481, v490), v463);
            v454 = veorq_s8((int8x16_t)vshlq_u64(v483, v491), v454);
            v455 = veorq_s8((int8x16_t)vshlq_u64(v484, v472), v455);
            v461 = vaddq_s32(v461, v433);
            v460 = vaddq_s32(v460, v433);
            v459 = vaddq_s32(v459, v433);
            v458 = vaddq_s32(v458, v433);
            v462 -= 16;
          }
          while (v462);
          v492 = veorq_s8(veorq_s8(veorq_s8(v455, v465), veorq_s8(v463, v467)), veorq_s8(veorq_s8(v454, v466), veorq_s8(v464, v468)));
          v445 = (unint64_t)veor_s8(*(int8x8_t *)v492.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v492, v492, 8uLL));
          if (v453 == v457)
          {
            v493 = v447 - 8 * v457 + 8;
LABEL_381:
            v444 = 48 - v493;
            v446 = v452;
            goto LABEL_382;
          }
        }
        else
        {
          v451 = 40 - v444;
          v452 = *(uint8x16_t **)(v13 + 13824);
        }
        v494 = v451;
        do
        {
          v495 = v452->u8[0];
          v452 = (uint8x16_t *)((char *)v452 + 1);
          v445 ^= (unint64_t)v495 << v494;
          v496 = v494 - 8;
          if (v494 < 8)
            break;
          v494 -= 8;
        }
        while ((unint64_t)v452 < v448);
        v493 = v496 + 8;
        goto LABEL_381;
      }
      v235 = *(unsigned __int16 *)(v230 + 2);
      v236 = *(_DWORD *)(v13 + 13848);
      v237 = *(_QWORD *)(v13 + 13840);
      v238.i64[0] = 0x7F0000007FLL;
      v238.i64[1] = 0x7F0000007FLL;
      v239 = *(_DWORD *)(v13 + 13852);
      while (2)
      {
        v243 = (v236 >> 1) & 0x7FFFFF80 | 4;
        v244 = v243 << 48;
        v245 = v236 - 2 * v243;
        if (v237 >= v243 << 48)
          v246 = v243 << 48;
        else
          v246 = 0;
        if (v237 < v243 << 48)
          v245 = 0;
        v247 = v245 + v243;
        v248 = __clz(v247);
        v249 = v248 ^ 0x10;
        v250 = v239 - (v248 ^ 0x10);
        *(_DWORD *)(v13 + 13852) = v250;
        v251 = ((v237 - v246 + 1) << (v248 ^ 0x10)) - 1;
        *(_QWORD *)(v13 + 13840) = v251;
        v236 = v247 << (v248 ^ 0x10);
        *(_DWORD *)(v13 + 13848) = v236;
        if ((v250 & 0x80000000) == 0)
          goto LABEL_291;
        v252 = *(uint8x16_t **)(v13 + 13824);
        v253 = 40 - v250;
        if ((int)(40 - v250) >= 0)
        {
          v254 = *(_QWORD *)(v13 + 13832);
          if ((unint64_t)v252 < v254)
          {
            if (v253 >= 7)
              v255 = 7;
            else
              v255 = 40 - v250;
            v256 = (v249 - v239 - v255 + 47) >> 3;
            if (~(unint64_t)v252 + v254 < v256)
              v256 = ~(unint64_t)v252 + v254;
            if (v256 >= 0xF)
            {
              v259 = v256 + 1;
              v260 = 0uLL;
              v261 = (int8x16_t)v251;
              v262 = vdupq_n_s32(v253);
              v263 = (v256 + 1) & 0x3FFFFFF0;
              v264 = vaddq_s32(v262, (int32x4_t)xmmword_196889AA0);
              v257 = v253 - 8 * v263;
              v265 = vaddq_s32(v262, (int32x4_t)xmmword_196889AB0);
              v258 = (uint8x16_t *)((char *)v252 + v263);
              v266 = vaddq_s32(v262, (int32x4_t)xmmword_196889AC0);
              v267 = vaddq_s32(v262, (int32x4_t)xmmword_196889AD0);
              v268 = v263;
              v269 = 0uLL;
              v270 = 0uLL;
              v271 = 0uLL;
              v272 = 0uLL;
              v273 = 0uLL;
              v274 = 0uLL;
              do
              {
                v275 = *v252++;
                v276 = vmovl_high_u8(v275);
                v277 = vmovl_high_u16(v276);
                v278.i64[0] = v277.u32[0];
                v278.i64[1] = v277.u32[1];
                v279 = v278;
                v280 = vmovl_u16(*(uint16x4_t *)v276.i8);
                v278.i64[0] = v280.u32[2];
                v278.i64[1] = v280.u32[3];
                v281 = v278;
                v282 = vmovl_u8(*(uint8x8_t *)v275.i8);
                v283 = vmovl_high_u16(v282);
                v278.i64[0] = v283.u32[2];
                v278.i64[1] = v283.u32[3];
                v284 = v278;
                v278.i64[0] = v277.u32[2];
                v278.i64[1] = v277.u32[3];
                v285 = v278;
                v278.i64[0] = v280.u32[0];
                v278.i64[1] = v280.u32[1];
                v286 = v278;
                v278.i64[0] = v283.u32[0];
                v278.i64[1] = v283.u32[1];
                v287 = v278;
                v288 = vmovl_u16(*(uint16x4_t *)v282.i8);
                v278.i64[0] = v288.u32[2];
                v278.i64[1] = v288.u32[3];
                v289 = v278;
                v278.i64[0] = v288.u32[0];
                v278.i64[1] = v288.u32[1];
                v290 = v278;
                v278.i64[0] = v264.u32[0];
                v278.i64[1] = v264.u32[1];
                v291 = v278;
                v278.i64[0] = v265.u32[2];
                v278.i64[1] = v265.u32[3];
                v292 = v278;
                v278.i64[0] = v266.u32[2];
                v278.i64[1] = v266.u32[3];
                v293 = v278;
                v278.i64[0] = v264.u32[2];
                v278.i64[1] = v264.u32[3];
                v294 = v278;
                v278.i64[0] = v265.u32[0];
                v278.i64[1] = v265.u32[1];
                v295 = v278;
                v278.i64[0] = v266.u32[0];
                v278.i64[1] = v266.u32[1];
                v296 = v278;
                v278.i64[0] = v267.u32[2];
                v278.i64[1] = v267.u32[3];
                v297 = v278;
                v278.i64[0] = v267.u32[0];
                v278.i64[1] = v267.u32[1];
                v273 = veorq_s8((int8x16_t)vshlq_u64(v279, v291), v273);
                v272 = veorq_s8((int8x16_t)vshlq_u64(v281, v292), v272);
                v270 = veorq_s8((int8x16_t)vshlq_u64(v284, v293), v270);
                v274 = veorq_s8((int8x16_t)vshlq_u64(v285, v294), v274);
                v271 = veorq_s8((int8x16_t)vshlq_u64(v286, v295), v271);
                v269 = veorq_s8((int8x16_t)vshlq_u64(v287, v296), v269);
                v260 = veorq_s8((int8x16_t)vshlq_u64(v289, v297), v260);
                v261 = veorq_s8((int8x16_t)vshlq_u64(v290, v278), v261);
                v267 = vaddq_s32(v267, v238);
                v266 = vaddq_s32(v266, v238);
                v265 = vaddq_s32(v265, v238);
                v264 = vaddq_s32(v264, v238);
                v268 -= 16;
              }
              while (v268);
              v298 = veorq_s8(veorq_s8(veorq_s8(v261, v271), veorq_s8(v269, v273)), veorq_s8(veorq_s8(v260, v272), veorq_s8(v270, v274)));
              v251 = (unint64_t)veor_s8(*(int8x8_t *)v298.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v298, v298, 8uLL));
              if (v259 == v263)
              {
                v299 = v253 - 8 * v263 + 8;
LABEL_289:
                v250 = 48 - v299;
                v252 = v258;
                goto LABEL_290;
              }
            }
            else
            {
              v257 = 40 - v250;
              v258 = *(uint8x16_t **)(v13 + 13824);
            }
            v300 = v257;
            do
            {
              v301 = v258->u8[0];
              v258 = (uint8x16_t *)((char *)v258 + 1);
              v251 ^= (unint64_t)v301 << v300;
              v302 = v300 - 8;
              if (v300 < 8)
                break;
              v300 -= 8;
            }
            while ((unint64_t)v258 < v254);
            v299 = v302 + 8;
            goto LABEL_289;
          }
        }
LABEL_290:
        *(_QWORD *)(v13 + 13840) = v251;
        *(_DWORD *)(v13 + 13852) = v250;
        *(_QWORD *)(v13 + 13824) = v252;
LABEL_291:
        if (v237 >= v244)
          v303 = 0;
        else
          v303 = -1;
        v304 = v124;
        v305 = *(__int16 *)(v203 + 2 * v124);
        v306 = (*(unsigned __int8 *)(v231 + v124) * v235 + 16) >> 5;
        if ((unsigned __int16)(*(_WORD *)(v203 + 2 * v124) >> 11) < 0xFu)
        {
          v240 = v305 >> 11;
          v241 = v306 * (v305 >> 11);
          goto LABEL_263;
        }
        v307 = 0;
        do
        {
          v308 = v307;
          v309 = (v236 >> 1) & 0x7FFFFF80 | 4;
          v310 = v309 << 48;
          v311 = v236 - 2 * v309;
          if (v251 < v309 << 48)
            v312 = 0;
          else
            v312 = v309 << 48;
          if (v251 < v309 << 48)
            v311 = 0;
          v313 = v311 + v309;
          v314 = __clz(v313);
          v315 = v314 ^ 0x10;
          v316 = v250 - (v314 ^ 0x10);
          *(_DWORD *)(v13 + 13852) = v316;
          v317 = ((v251 - v312 + 1) << (v314 ^ 0x10)) - 1;
          *(_QWORD *)(v13 + 13840) = v317;
          v236 = v313 << v315;
          *(_DWORD *)(v13 + 13848) = v236;
          if ((v316 & 0x80000000) == 0)
          {
            v250 -= v315;
            if (v251 < v310)
              break;
            goto LABEL_323;
          }
          v318 = *(uint8x16_t **)(v13 + 13824);
          v319 = 40 - v316;
          if ((int)(40 - v316) >= 0)
          {
            v320 = *(_QWORD *)(v13 + 13832);
            if ((unint64_t)v318 < v320)
            {
              if (v319 >= 7)
                v321 = 7;
              else
                v321 = 40 - v316;
              v322 = (v315 - v250 - v321 + 47) >> 3;
              if (~(unint64_t)v318 + v320 < v322)
                v322 = ~(unint64_t)v318 + v320;
              if (v322 >= 0xF)
              {
                v325 = v322 + 1;
                v326 = 0uLL;
                v327 = (int8x16_t)v317;
                v328 = vdupq_n_s32(v319);
                v329 = (v322 + 1) & 0x3FFFFFF0;
                v330 = vaddq_s32(v328, (int32x4_t)xmmword_196889AA0);
                v323 = v319 - 8 * v329;
                v331 = vaddq_s32(v328, (int32x4_t)xmmword_196889AB0);
                v324 = (uint8x16_t *)((char *)v318 + v329);
                v332 = vaddq_s32(v328, (int32x4_t)xmmword_196889AC0);
                v333 = vaddq_s32(v328, (int32x4_t)xmmword_196889AD0);
                v334 = v329;
                v335 = 0uLL;
                v336 = 0uLL;
                v337 = 0uLL;
                v338 = 0uLL;
                v339 = 0uLL;
                v340 = 0uLL;
                do
                {
                  v341 = *v318++;
                  v342 = vmovl_high_u8(v341);
                  v343 = vmovl_high_u16(v342);
                  v344.i64[0] = v343.u32[0];
                  v344.i64[1] = v343.u32[1];
                  v345 = v344;
                  v346 = vmovl_u16(*(uint16x4_t *)v342.i8);
                  v344.i64[0] = v346.u32[2];
                  v344.i64[1] = v346.u32[3];
                  v347 = v344;
                  v348 = vmovl_u8(*(uint8x8_t *)v341.i8);
                  v349 = vmovl_high_u16(v348);
                  v344.i64[0] = v349.u32[2];
                  v344.i64[1] = v349.u32[3];
                  v350 = v344;
                  v344.i64[0] = v343.u32[2];
                  v344.i64[1] = v343.u32[3];
                  v351 = v344;
                  v344.i64[0] = v346.u32[0];
                  v344.i64[1] = v346.u32[1];
                  v352 = v344;
                  v344.i64[0] = v349.u32[0];
                  v344.i64[1] = v349.u32[1];
                  v353 = v344;
                  v354 = vmovl_u16(*(uint16x4_t *)v348.i8);
                  v344.i64[0] = v354.u32[2];
                  v344.i64[1] = v354.u32[3];
                  v355 = v344;
                  v344.i64[0] = v354.u32[0];
                  v344.i64[1] = v354.u32[1];
                  v356 = v344;
                  v344.i64[0] = v330.u32[0];
                  v344.i64[1] = v330.u32[1];
                  v357 = v344;
                  v344.i64[0] = v331.u32[2];
                  v344.i64[1] = v331.u32[3];
                  v358 = v344;
                  v344.i64[0] = v332.u32[2];
                  v344.i64[1] = v332.u32[3];
                  v359 = v344;
                  v344.i64[0] = v330.u32[2];
                  v344.i64[1] = v330.u32[3];
                  v360 = v344;
                  v344.i64[0] = v331.u32[0];
                  v344.i64[1] = v331.u32[1];
                  v361 = v344;
                  v344.i64[0] = v332.u32[0];
                  v344.i64[1] = v332.u32[1];
                  v362 = v344;
                  v344.i64[0] = v333.u32[2];
                  v344.i64[1] = v333.u32[3];
                  v363 = v344;
                  v344.i64[0] = v333.u32[0];
                  v344.i64[1] = v333.u32[1];
                  v339 = veorq_s8((int8x16_t)vshlq_u64(v345, v357), v339);
                  v338 = veorq_s8((int8x16_t)vshlq_u64(v347, v358), v338);
                  v336 = veorq_s8((int8x16_t)vshlq_u64(v350, v359), v336);
                  v340 = veorq_s8((int8x16_t)vshlq_u64(v351, v360), v340);
                  v337 = veorq_s8((int8x16_t)vshlq_u64(v352, v361), v337);
                  v335 = veorq_s8((int8x16_t)vshlq_u64(v353, v362), v335);
                  v326 = veorq_s8((int8x16_t)vshlq_u64(v355, v363), v326);
                  v327 = veorq_s8((int8x16_t)vshlq_u64(v356, v344), v327);
                  v333 = vaddq_s32(v333, v238);
                  v332 = vaddq_s32(v332, v238);
                  v331 = vaddq_s32(v331, v238);
                  v330 = vaddq_s32(v330, v238);
                  v334 -= 16;
                }
                while (v334);
                v364 = veorq_s8(veorq_s8(veorq_s8(v327, v337), veorq_s8(v335, v339)), veorq_s8(veorq_s8(v326, v338), veorq_s8(v336, v340)));
                v317 = (unint64_t)veor_s8(*(int8x8_t *)v364.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v364, v364, 8uLL));
                if (v325 == v329)
                {
                  v365 = v319 - 8 * v329 + 8;
LABEL_321:
                  v316 = 48 - v365;
                  v318 = v324;
                  goto LABEL_322;
                }
              }
              else
              {
                v323 = 40 - v316;
                v324 = *(uint8x16_t **)(v13 + 13824);
              }
              v366 = v323;
              do
              {
                v367 = v324->u8[0];
                v324 = (uint8x16_t *)((char *)v324 + 1);
                v317 ^= (unint64_t)v367 << v366;
                v368 = v366 - 8;
                if (v366 < 8)
                  break;
                v366 -= 8;
              }
              while ((unint64_t)v324 < v320);
              v365 = v368 + 8;
              goto LABEL_321;
            }
          }
LABEL_322:
          *(_QWORD *)(v13 + 13840) = v317;
          *(_DWORD *)(v13 + 13852) = v316;
          v250 = v316;
          *(_QWORD *)(v13 + 13824) = v318;
          if (v251 < v310)
            break;
LABEL_323:
          v307 = v308 + 1;
          v251 = v317;
        }
        while (v308 < 0x20);
        if (!v308)
          goto LABEL_354;
        v369 = 1;
        while (2)
        {
          v370 = (v236 >> 1) & 0x7FFFFF80 | 4;
          v371 = v370 << 48;
          v372 = v236 - 2 * v370;
          if (v317 >= v370 << 48)
            v373 = v370 << 48;
          else
            v373 = 0;
          if (v317 < v370 << 48)
            v372 = 0;
          v374 = v372 + v370;
          v375 = __clz(v374);
          v376 = v375 ^ 0x10;
          v377 = v250 - (v375 ^ 0x10);
          *(_DWORD *)(v13 + 13852) = v377;
          v378 = ((v317 - v373 + 1) << (v375 ^ 0x10)) - 1;
          *(_QWORD *)(v13 + 13840) = v378;
          v236 = v374 << (v375 ^ 0x10);
          *(_DWORD *)(v13 + 13848) = v236;
          if ((v377 & 0x80000000) != 0)
          {
            v379 = *(uint8x16_t **)(v13 + 13824);
            v380 = 40 - v377;
            if ((int)(40 - v377) >= 0)
            {
              v381 = *(_QWORD *)(v13 + 13832);
              if ((unint64_t)v379 < v381)
              {
                if (v380 >= 7)
                  v382 = 7;
                else
                  v382 = 40 - v377;
                v383 = (v376 - v250 - v382 + 47) >> 3;
                if (~(unint64_t)v379 + v381 < v383)
                  v383 = ~(unint64_t)v379 + v381;
                if (v383 >= 0xF)
                {
                  v386 = v383 + 1;
                  v387 = 0uLL;
                  v388 = (int8x16_t)(unint64_t)v378;
                  v389 = vdupq_n_s32(v380);
                  v390 = (v383 + 1) & 0x3FFFFFF0;
                  v391 = vaddq_s32(v389, (int32x4_t)xmmword_196889AA0);
                  v384 = v380 - 8 * v390;
                  v392 = vaddq_s32(v389, (int32x4_t)xmmword_196889AB0);
                  v385 = (uint8x16_t *)((char *)v379 + v390);
                  v393 = vaddq_s32(v389, (int32x4_t)xmmword_196889AC0);
                  v394 = vaddq_s32(v389, (int32x4_t)xmmword_196889AD0);
                  v395 = v390;
                  v396 = 0uLL;
                  v397 = 0uLL;
                  v398 = 0uLL;
                  v399 = 0uLL;
                  v400 = 0uLL;
                  v401 = 0uLL;
                  do
                  {
                    v402 = *v379++;
                    v403 = vmovl_high_u8(v402);
                    v404 = vmovl_high_u16(v403);
                    v405.i64[0] = v404.u32[0];
                    v405.i64[1] = v404.u32[1];
                    v406 = v405;
                    v407 = vmovl_u16(*(uint16x4_t *)v403.i8);
                    v405.i64[0] = v407.u32[2];
                    v405.i64[1] = v407.u32[3];
                    v408 = v405;
                    v409 = vmovl_u8(*(uint8x8_t *)v402.i8);
                    v410 = vmovl_high_u16(v409);
                    v405.i64[0] = v410.u32[2];
                    v405.i64[1] = v410.u32[3];
                    v411 = v405;
                    v405.i64[0] = v404.u32[2];
                    v405.i64[1] = v404.u32[3];
                    v412 = v405;
                    v405.i64[0] = v407.u32[0];
                    v405.i64[1] = v407.u32[1];
                    v413 = v405;
                    v405.i64[0] = v410.u32[0];
                    v405.i64[1] = v410.u32[1];
                    v414 = v405;
                    v415 = vmovl_u16(*(uint16x4_t *)v409.i8);
                    v405.i64[0] = v415.u32[2];
                    v405.i64[1] = v415.u32[3];
                    v416 = v405;
                    v405.i64[0] = v415.u32[0];
                    v405.i64[1] = v415.u32[1];
                    v417 = v405;
                    v405.i64[0] = v391.u32[0];
                    v405.i64[1] = v391.u32[1];
                    v418 = v405;
                    v405.i64[0] = v392.u32[2];
                    v405.i64[1] = v392.u32[3];
                    v419 = v405;
                    v405.i64[0] = v393.u32[2];
                    v405.i64[1] = v393.u32[3];
                    v420 = v405;
                    v405.i64[0] = v391.u32[2];
                    v405.i64[1] = v391.u32[3];
                    v421 = v405;
                    v405.i64[0] = v392.u32[0];
                    v405.i64[1] = v392.u32[1];
                    v422 = v405;
                    v405.i64[0] = v393.u32[0];
                    v405.i64[1] = v393.u32[1];
                    v423 = v405;
                    v405.i64[0] = v394.u32[2];
                    v405.i64[1] = v394.u32[3];
                    v424 = v405;
                    v405.i64[0] = v394.u32[0];
                    v405.i64[1] = v394.u32[1];
                    v400 = veorq_s8((int8x16_t)vshlq_u64(v406, v418), v400);
                    v399 = veorq_s8((int8x16_t)vshlq_u64(v408, v419), v399);
                    v397 = veorq_s8((int8x16_t)vshlq_u64(v411, v420), v397);
                    v401 = veorq_s8((int8x16_t)vshlq_u64(v412, v421), v401);
                    v398 = veorq_s8((int8x16_t)vshlq_u64(v413, v422), v398);
                    v396 = veorq_s8((int8x16_t)vshlq_u64(v414, v423), v396);
                    v387 = veorq_s8((int8x16_t)vshlq_u64(v416, v424), v387);
                    v388 = veorq_s8((int8x16_t)vshlq_u64(v417, v405), v388);
                    v394 = vaddq_s32(v394, v238);
                    v393 = vaddq_s32(v393, v238);
                    v392 = vaddq_s32(v392, v238);
                    v391 = vaddq_s32(v391, v238);
                    v395 -= 16;
                  }
                  while (v395);
                  v425 = veorq_s8(veorq_s8(veorq_s8(v388, v398), veorq_s8(v396, v400)), veorq_s8(veorq_s8(v387, v399), veorq_s8(v397, v401)));
                  v378 = (uint64_t)veor_s8(*(int8x8_t *)v425.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v425, v425, 8uLL));
                  if (v386 != v390)
                    goto LABEL_347;
                  v426 = v380 - 8 * v390 + 8;
                }
                else
                {
                  v384 = 40 - v377;
                  v385 = *(uint8x16_t **)(v13 + 13824);
LABEL_347:
                  v427 = v384;
                  do
                  {
                    v428 = v385->u8[0];
                    v385 = (uint8x16_t *)((char *)v385 + 1);
                    v378 ^= (unint64_t)v428 << v427;
                    v429 = v427 - 8;
                    if (v427 < 8)
                      break;
                    v427 -= 8;
                  }
                  while ((unint64_t)v385 < v381);
                  v426 = v429 + 8;
                }
                v377 = 48 - v426;
                v379 = v385;
              }
            }
            *(_QWORD *)(v13 + 13840) = v378;
            *(_DWORD *)(v13 + 13852) = v377;
            v250 = v377;
            *(_QWORD *)(v13 + 13824) = v379;
          }
          else
          {
            v250 -= v376;
          }
          v369 = (2 * v369) | (v317 < v371);
          v317 = v378;
          if (--v308)
            continue;
          break;
        }
        v308 = v369 - 1;
        v317 = v378;
LABEL_354:
        v240 = (v308 + 15) & 0xFFFFF;
        v241 = (v240 * v306) & 0xFFFFFF;
        v251 = v317;
LABEL_263:
        v132 += v240;
        v242 = (v241 >> v233) + v303;
        if (v242 >= 0x7FFF)
          LOWORD(v242) = 0x7FFF;
        *(_WORD *)(v203 + 2 * v304) = v242 ^ v303;
        v239 = v250;
        v237 = v251;
        v124 = v305 & 0x3FF;
        if ((v305 & 0x3FF) != 0)
          continue;
        break;
      }
LABEL_449:
      if (v132 >= 0x3F)
        v623 = 63;
      else
        v623 = v132;
      *a11 = v623 | 0x40;
      return v625;
    default:
      v39 = (int16x8_t *)(v13 + 7040 + (v25 << 6) + 512);
      if ((int)v25 >= 3)
        v40 = dav1d_tx_type_class;
      else
        v40 = v25;
      v41 = (int16x8_t *)(v13 + 7040 + 336 * v40 + 4112);
      goto LABEL_111;
  }
}

uint64_t dav1d_recon_b_intra_8bpc(uint64_t a1, int a2, int a3, _BYTE *a4)
{
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v22;
  int v23;
  int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v47;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  char v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  char v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  _QWORD *v75;
  unsigned int v76;
  _DWORD *v77;
  int v78;
  unsigned int v79;
  __int16 *v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  void (*v109)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  void (*v116)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v117;
  int v118;
  int v119;
  int v123;
  signed int v124;
  uint64_t v125;
  signed int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  char v130;
  int v131;
  _QWORD *v132;
  signed int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  int v145;
  BOOL v146;
  _QWORD *v147;
  int v148;
  char v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  _DWORD *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  signed int v174;
  int v175;
  int v176;
  signed int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  uint64_t v187;
  signed int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  _BOOL4 v192;
  char v193;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  unint64_t v199;
  int v200;
  unint64_t v201;
  char v202;
  uint64_t v203;
  unsigned int v204;
  int v205;
  unsigned __int8 *v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  _QWORD *v210;
  unsigned int v211;
  unint64_t v212;
  _BYTE *v213;
  signed int v214;
  _QWORD *v215;
  _QWORD *v216;
  unsigned int v217;
  uint64_t v219;
  int v220;
  int v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  _BYTE *v226;
  _QWORD *v227;
  BOOL v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  int v237;
  signed int v238;
  unsigned int v239;
  _BYTE *v240;
  char v241;
  unsigned __int8 *v242;
  int v243;
  _DWORD *v244;
  unsigned int v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  _BYTE *v251;
  unsigned int v252;
  unsigned __int8 v253;
  unsigned int v254;
  unsigned int v255[3];

  v5 = *(_QWORD **)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 28);
  v8 = *((_DWORD *)v5 + 514);
  v9 = &dav1d_block_dimensions[4 * a2];
  v10 = *v9;
  v11 = v9[1];
  v12 = *((_DWORD *)v5 + 820) - v7;
  if ((int)v10 >= (int)v12)
    v13 = v12;
  else
    v13 = v10;
  v14 = *((_DWORD *)v5 + 821) - v6;
  if ((int)v11 >= v14)
    result = v14;
  else
    result = v11;
  v16 = v8 != 3;
  if (v8 == 3)
    v17 = v13;
  else
    v17 = v13 + 1;
  v18 = v8 == 1;
  if (v8 == 1)
    v19 = result + 1;
  else
    v19 = result;
  if (v11 <= v18)
    v20 = v6 & 1;
  else
    v20 = 1;
  if (v10 <= v16 && (v7 & 1) == 0)
    v22 = 0;
  else
    v22 = v20;
  if (v8)
    v23 = v22;
  else
    v23 = 0;
  v200 = v23;
  if ((int)result >= 1 && (int)v13 >= 1)
  {
    v25 = 0;
    v26 = 0;
    v27 = v7 & 0x1F;
    v234 = (v7 & 0x1F) >> v16;
    v28 = (char *)&dav1d_txfm_dimensions + 8 * a4[10];
    v29 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * a4[7];
    v226 = (_BYTE *)(a1 + 24896);
    v30 = (v10 + v16) >> v16;
    v31 = (v11 + v18) >> v18;
    v225 = *(_DWORD *)(v5[1] + 1020) << 10;
    v244 = *(_DWORD **)(a1 + 16);
    v32 = v5[393];
    v33 = (_DWORD *)(a1 + 259588);
    v203 = v6 & 0x1F;
    v206 = (unsigned __int8 *)v28;
    v213 = v28 + 1;
    v180 = 16 * v30 * v31;
    v195 = a1 + 10368;
    v197 = v17 >> v16;
    v191 = v19 >> v18;
    v182 = (v19 >> v18 << v18) - 1;
    v183 = (v17 >> v16 << v16) - 1;
    v208 = (v6 & 0x1F) >> v18;
    v224 = v32 + 64;
    v231 = a1 + 1024;
    v196 = v32;
    v219 = v32 + 680;
    v187 = 16 * v10 * v11;
    v184 = v31;
    v185 = v30;
    v189 = 4 * v31;
    v190 = 4 * v30;
    v220 = ~v16;
    v243 = ~v18;
    v240 = a4 + 15;
    v250 = v5;
    v251 = v29 + 1;
    v199 = v13;
    v198 = result;
    v245 = v16;
    v239 = v18;
    v207 = v27;
    v246 = v29;
    do
    {
      v212 = 0;
      v34 = v26 + 16;
      if ((int)result >= (int)(v26 + 16))
        v35 = v26 + 16;
      else
        v35 = result;
      v36 = v191;
      v188 = v34 >> v18;
      if (v191 >= (int)(v34 >> v18))
        v36 = v34 >> v18;
      v214 = v36;
      v193 = a3 & (v26 == 0);
      v179 = v26 + 16;
      v38 = (a3 & 8) == 0 && (int)v34 >= (int)result;
      v192 = v38;
      v211 = v26 >> v18;
      v181 = v25;
      v186 = v25 - 2 * (v26 >> v18 << v18);
      v204 = v26;
      v205 = v35;
      do
      {
        if (a4[11])
        {
          v39 = v5[251];
          v40 = v5[254];
          v41 = *(int *)(a1 + 24);
          if (*v33)
            *(_QWORD *)&v244[4 * (*v33 & 1) + 3474] += v187;
          v42 = v5;
          (*(void (**)(uint64_t))(v5[393] + 248))(v39 + 4 * (v41 + v40 * v6));
          v5 = v42;
        }
        v43 = *(_QWORD *)(a1 + 656);
        v44 = *(unsigned __int8 *)(v43 + v27 + 224);
        if (*(_BYTE *)(v43 + v27 + 224))
        {
          v45 = *(unsigned __int8 *)(v43 + v27);
          if ((v45 & 0xFFFFFFFD) == 9 || v45 == 10)
            v44 = 512;
          else
            v44 = 0;
        }
        if (*(_BYTE *)(a1 + 32 + v203 + 224))
        {
          v47 = *(unsigned __int8 *)(a1 + 32 + v203);
          if ((v47 & 0xFFFFFFFD) == 9 || v47 == 10)
            v49 = 512;
          else
            v49 = 0;
        }
        else
        {
          v49 = 0;
        }
        if ((int)v13 >= (int)v212 + 16)
          v50 = v212 + 16;
        else
          v50 = v13;
        v51 = *(_DWORD *)(a1 + 28);
        v52 = v51 + v26;
        *(_DWORD *)(a1 + 28) = v51 + v26;
        v201 = v212 + 16;
        if ((int)v26 >= v35)
        {
          v56 = v26;
LABEL_144:
          v6 = v52 - v56;
          *(_DWORD *)(a1 + 28) = v6;
          LOBYTE(v18) = v239;
          if (!v200)
            goto LABEL_42;
        }
        else
        {
          if (v212 + 16 < v13)
            v53 = 1;
          else
            v53 = v193;
          v54 = v192;
          if (v212)
            v54 = 1;
          if ((uint64_t)v212 < v50)
          {
            v232 = v54;
            v222 = v53;
            v235 = v44 | v49;
            v55 = *(_DWORD *)(a1 + 24);
            v56 = v26;
            v237 = v50;
            while (1)
            {
              v59 = v5[251];
              v60 = v5[254];
              v61 = v55 + v212;
              *(_DWORD *)(a1 + 24) = v55 + v212;
              v62 = v59 + 4 * (v212 + (int)v55 + v60 * (int)v52);
              v63 = v222;
              if (v56 > v26)
                v63 = 0;
              v241 = v63;
              v229 = v56;
              v64 = v56 + v203;
              v247 = (unsigned __int8 *)(a1 + 64 + v64);
              v227 = (_QWORD *)(a1 + 64 + (v64 + 8));
              v65 = v212;
              v66 = v206;
              do
              {
                if (a4[11])
                {
                  if (a4[6])
                    goto LABEL_81;
                  goto LABEL_96;
                }
                v255[0] = (char)a4[13];
                if ((v241 & 1) != 0)
                {
                  v69 = 0;
                  if (v212 < v65)
                    goto LABEL_91;
                }
                else
                {
                  v69 = (int)(v65 + *v66) >= v50;
                  if (v212 < v65)
                    goto LABEL_91;
                }
                if (v232 && (int)(v229 + *v213) >= v205)
                {
LABEL_91:
                  v70 = 0;
                  v71 = *(_DWORD *)(a1 + 28);
                  if (((*((_DWORD *)v5 + 826) - 1) & v71) != 0)
                    goto LABEL_92;
                  goto LABEL_94;
                }
                v70 = 8;
                v71 = *(_DWORD *)(a1 + 28);
                if (((*((_DWORD *)v5 + 826) - 1) & v71) != 0)
                {
LABEL_92:
                  v72 = 0;
                  goto LABEL_95;
                }
LABEL_94:
                v72 = v5[405] + ((*((int *)v5 + 822) * ((v71 >> *((_DWORD *)v5 + 825)) - 1)) << 7);
LABEL_95:
                v73 = *v66;
                v74 = *v213;
                v75 = v5;
                v76 = dav1d_prepare_intra_edges_8bpc(v61, v61 > v244[3466], v71, v71 > v244[3468], v244[3467], v244[3469], v70 | !v69, v62, v5[254], v72, a4[8], (int *)v255, v73, v74, *(_DWORD *)(v5[1] + 1020), v226);
                (*(void (**)(uint64_t, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v224 + 8 * v76))(v62, v75[254], v226, (4 * v73), (4 * v74), v235 | v225 | v255[0], (4 * (*((_DWORD *)v75 + 820) - *(_DWORD *)(a1 + 24))), (4 * (*((_DWORD *)v75 + 821) - *(_DWORD *)(a1 + 28))));
                v5 = v75;
                v29 = v246;
                v33 = (_DWORD *)(a1 + 259588);
                v50 = v237;
                if (a4[6])
                {
LABEL_81:
                  if (*v33)
                  {
                    v67 = *v66;
                  }
                  else
                  {
                    switch(*v213)
                    {
                      case 1:
                        *v247 = 64;
                        v67 = *v66;
                        v68 = v67 - 1;
                        if (v67 - 1 <= 0xF)
                          goto LABEL_115;
                        goto LABEL_78;
                      case 2:
                        *(_WORD *)v247 = 16448;
                        v67 = *v66;
                        v68 = v67 - 1;
                        if (v67 - 1 <= 0xF)
                          goto LABEL_115;
                        goto LABEL_78;
                      case 4:
                        *(_DWORD *)v247 = 1077952576;
                        v67 = *v66;
                        v68 = v67 - 1;
                        if (v67 - 1 <= 0xF)
                          goto LABEL_115;
                        goto LABEL_78;
                      case 8:
                        *(_QWORD *)v247 = 0x4040404040404040;
                        goto LABEL_114;
                      case 0x10:
                        *(_QWORD *)v247 = 0x4040404040404040;
                        *v227 = 0x4040404040404040;
                        v67 = *v66;
                        v68 = v67 - 1;
                        if (v67 - 1 > 0xF)
                          goto LABEL_78;
                        goto LABEL_115;
                      default:
LABEL_114:
                        v67 = *v66;
                        v68 = v67 - 1;
LABEL_115:
                        switch(v68)
                        {
                          case 0u:
                            *(_BYTE *)(*(_QWORD *)(a1 + 656) + v65 + v207 + 32) = 64;
                            v67 = 1;
                            break;
                          case 1u:
                            *(_WORD *)(*(_QWORD *)(a1 + 656) + v65 + v207 + 32) = 16448;
                            v67 = 2;
                            break;
                          case 3u:
                            *(_DWORD *)(*(_QWORD *)(a1 + 656) + v65 + v207 + 32) = 1077952576;
                            v67 = 4;
                            break;
                          case 7u:
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + v65 + v207 + 32) = 0x4040404040404040;
                            v67 = 8;
                            break;
                          case 0xFu:
                            v88 = v65 + v207;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + v88 + 32) = 0x4040404040404040;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + (v88 + 8) + 32) = 0x4040404040404040;
                            v67 = 16;
                            break;
                          default:
                            goto LABEL_78;
                        }
                        break;
                    }
                  }
                  goto LABEL_78;
                }
LABEL_96:
                v254 = 0;
                if (*v33)
                {
                  v67 = *v66;
                  if (v67 >= 8)
                    v78 = 8;
                  else
                    v78 = *v66;
                  v79 = *v213;
                  if (v79 >= 8)
                    v79 = 8;
                  v77 = &v244[4 * (*v33 & 1)];
                  *((_QWORD *)v77 + 1738) += 32 * v78 * v79;
                  v80 = (__int16 *)(v5[525] + 10 * (*(int *)(a1 + 24) + v5[408] * *(int *)(a1 + 28)));
                  v81 = *v80;
                  v254 = *((unsigned __int8 *)v80 + 6);
                  if ((v81 & 0x80000000) == 0)
                  {
LABEL_103:
                    v82 = v5;
                    (*(void (**)(uint64_t, _QWORD))(v219 + 136 * a4[10] + 8 * v254))(v62, v5[254]);
                    v5 = v82;
                  }
                }
                else
                {
                  v253 = 0;
                  v83 = v65 + v207;
                  v84 = v5;
                  v85 = decode_coefs_0(a1, *(_QWORD *)(a1 + 656) + v83 + 32, (uint64_t)v247, a4[10], a2, (uint64_t)a4, 1, 0, v231, &v254, &v253);
                  v86 = *v213;
                  if (v86 >= *((_DWORD *)v84 + 821) - *(_DWORD *)(a1 + 28))
                    v86 = *((_DWORD *)v84 + 821) - *(_DWORD *)(a1 + 28);
                  switch(v86)
                  {
                    case 1:
                      LODWORD(v87) = v253;
                      *v247 = v253;
                      break;
                    case 2:
                      LODWORD(v87) = v253;
                      *(_WORD *)v247 = v253 | (v253 << 8);
                      break;
                    case 4:
                      LODWORD(v87) = v253;
                      *(_DWORD *)v247 = 16843009 * v253;
                      break;
                    case 8:
                      LODWORD(v87) = v253;
                      *(_QWORD *)v247 = 0x101010101010101 * v253;
                      break;
                    case 16:
                      v87 = v253;
                      *(_QWORD *)v247 = 0x101010101010101 * v253;
                      *v227 = 0x101010101010101 * v87;
                      break;
                    default:
                      LODWORD(v87) = v253;
                      memset(v247, v253, v86);
                      break;
                  }
                  v67 = *v206;
                  v89 = *((_DWORD *)v250 + 820) - *(_DWORD *)(a1 + 24);
                  if ((int)v67 < v89)
                    v89 = *v206;
                  switch(v89)
                  {
                    case 1:
                      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v83 + 32) = v87;
                      v5 = v250;
                      v66 = v206;
                      v29 = v246;
                      if ((v85 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 2:
                      *(_WORD *)(*(_QWORD *)(a1 + 656) + v83 + 32) = v87 | ((_WORD)v87 << 8);
                      v5 = v250;
                      v66 = v206;
                      v29 = v246;
                      if ((v85 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 4:
                      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v83 + 32) = 16843009 * v87;
                      v5 = v250;
                      v66 = v206;
                      v29 = v246;
                      if ((v85 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 8:
                      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v83 + 32) = 0x101010101010101 * v87;
                      v5 = v250;
                      v66 = v206;
                      v29 = v246;
                      if ((v85 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    case 16:
                      v90 = 0x101010101010101 * v87;
                      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v83 + 32) = v90;
                      *(_QWORD *)(*(_QWORD *)(a1 + 656) + (v83 + 8) + 32) = v90;
                      v5 = v250;
                      v66 = v206;
                      v29 = v246;
                      if ((v85 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                    default:
                      memset((void *)(*(_QWORD *)(a1 + 656) + v83 + 32), v87, v89);
                      v5 = v250;
                      v66 = v206;
                      v29 = v246;
                      if ((v85 & 0x80000000) == 0)
                        goto LABEL_103;
                      break;
                  }
                }
                v16 = v245;
LABEL_78:
                v62 += 4 * v67;
                v65 += v67;
                v61 = *(_DWORD *)(a1 + 24) + v67;
                *(_DWORD *)(a1 + 24) = v61;
              }
              while ((int)v65 < v50);
              v57 = *(_DWORD *)(a1 + 28);
              v55 = v61 - v65;
              *(_DWORD *)(a1 + 24) = v61 - v65;
              v58 = *v213;
              v56 = v229 + v58;
              v52 = v57 + v58;
              *(_DWORD *)(a1 + 28) = v52;
              v26 = v204;
              if ((int)(v229 + v58) >= v205)
                goto LABEL_144;
            }
          }
          v98 = v26;
          do
            v98 += *v213;
          while (v98 < v35);
          v6 = v51;
          *(_DWORD *)(a1 + 28) = v51;
          LOBYTE(v18) = v239;
          if (!v200)
            goto LABEL_42;
        }
        v223 = v5[255];
        if (a4[9] == 13)
        {
          v91 = *(_DWORD *)(a1 + 24);
          v92 = 4 * (v5[255] * (v6 >> v18) + (v91 >> v16));
          v93 = v5[252];
          v94 = v5[253];
          v95 = v5;
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v196
                                                                                          + 8
                                                                                          * (*((_DWORD *)v5 + 514) - 1)
                                                                                          + 176))(v195, v5[251] + 4 * (v91 & v220) + v5[254] * 4 * (v6 & v243), v5[254], v185 - (((v183 + *v206) & -*v206) >> v16), v184 - (((v182 + *v213) & -*v213) >> v18), v190, v189);
          v5 = v95;
          if (*v240)
          {
            v254 = 0;
            v96 = *(_DWORD *)(a1 + 28);
            if (((*((_DWORD *)v95 + 826) - 1) & v243 & v96) != 0)
              v97 = 0;
            else
              v97 = v95[406] + ((*((int *)v95 + 822) * ((v96 >> *((_DWORD *)v95 + 825)) - 1)) << 7);
            v106 = v93 + v92;
            v107 = *v246;
            v108 = *v251;
            v109 = *(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, _QWORD))(v196 + 8 * dav1d_prepare_intra_edges_8bpc(*(int *)(a1 + 24) >> v245, *(int *)(a1 + 24) >> v245 > (int)v244[3466] >> v245, v96 >> v18, v96 >> v18 > (int)v244[3468] >> v18, (int)v244[3467] >> v245, (int)v244[3469] >> v18, 0, v106, v223, v97, 0, (int *)&v254, v107, v108, 0, v226) + 200);
            v110 = v106;
            v16 = v245;
            v109(v110, v223, v226, (4 * v107), (4 * v108), v195, (char)*v240);
            v5 = v250;
            v26 = v204;
            v33 = (_DWORD *)(a1 + 259588);
          }
          v29 = v246;
          if (a4[16])
          {
            v254 = 0;
            v111 = *(_DWORD *)(a1 + 28);
            if (((*((_DWORD *)v5 + 826) - 1) & v243 & v111) != 0)
              v112 = 0;
            else
              v112 = v5[407] + ((*((int *)v5 + 822) * ((v111 >> *((_DWORD *)v5 + 825)) - 1)) << 7);
            v113 = v94 + v92;
            v114 = *v246;
            v115 = *v251;
            v116 = *(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, uint64_t, _QWORD))(v196 + 8 * dav1d_prepare_intra_edges_8bpc(*(int *)(a1 + 24) >> v245, *(int *)(a1 + 24) >> v245 > (int)v244[3466] >> v245, v111 >> v18, v111 >> v18 > (int)v244[3468] >> v18, (int)v244[3467] >> v245, (int)v244[3469] >> v18, 0, v113, v223, v112, 0, (int *)&v254, v114, v115, 0, v226) + 200);
            v117 = v113;
            v16 = v245;
            v29 = v246;
            v116(v117, v223, v226, (4 * v114), (4 * v115), v195, (char)a4[16]);
            v33 = (_DWORD *)(a1 + 259588);
            v5 = v250;
          }
        }
        else if (a4[12])
        {
          v99 = *(_DWORD *)(a1 + 24);
          v100 = a1 + 20608;
          v101 = a1 + 12416 + v187;
          if (*v33)
          {
            v102 = &v244[4 * (*v33 & 1)];
            v101 = *((_QWORD *)v102 + 1737);
            v100 = v5[526]
                 + 48
                 * (((uint64_t)v5[408] >> 1) * ((*(_DWORD *)(a1 + 24) & 1) + (v6 >> 1))
                  + (v6 & 1)
                  + (*(int *)(a1 + 24) >> 1));
            *((_QWORD *)v102 + 1737) = v101 + v180;
          }
          v248 = v100;
          v103 = 4 * (v223 * (v6 >> v18) + (v99 >> v245));
          v104 = v5;
          (*(void (**)(uint64_t))(v5[393] + 248))(v5[252] + v103);
          v105 = v101;
          v16 = v245;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(v104[393] + 248))(v104[253] + v103, v104[255], v248 + 32, v105, v190, v189);
          v5 = v104;
          v29 = v246;
        }
        v118 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + v234 + 560);
        v119 = *(unsigned __int8 *)(a1 + 32 + v208 + 560);
        if ((v119 & 0xFFFFFFFD) == 9 || v119 == 10 || (v118 & 0xFFFFFFFD) == 9 || v118 == 10)
          v123 = 512;
        else
          v123 = 0;
        v221 = v123;
        v124 = v201 >> v16;
        v209 = (int)(v201 >> v16) < v197;
        if (!v26 && v124 >= v197)
          v209 = (4u >> (*((_DWORD *)v5 + 514) - 1)) & a3;
        v217 = v212 == 0;
        if (v212)
        {
          v125 = v223;
        }
        else
        {
          v125 = v223;
          if (v188 >= v191)
            v217 = (0x20u >> (*((_DWORD *)v5 + 514) - 1)) & a3;
        }
        if (v197 >= v124)
          v126 = v201 >> v16;
        else
          v126 = v197;
        v6 = *(_DWORD *)(a1 + 28);
        if ((int)v211 >= v214)
        {
          v6 += v186;
          *(_DWORD *)(a1 + 28) = v6;
        }
        else
        {
          v127 = v212 >> v16;
          if ((int)(v212 >> v16) < v126)
          {
            v238 = v126;
            v128 = 0;
            v129 = *(_DWORD *)(a1 + 24);
            v130 = 1;
            v230 = v212 >> v16;
            while (1)
            {
              v202 = v130;
              v131 = v6 + v26;
              *(_DWORD *)(a1 + 28) = v131;
              v236 = v128 + 1;
              v132 = &v5[v128 + 1];
              v210 = v132 + 251;
              v216 = v132 + 405;
              v133 = v211;
              v134 = v238;
              v249 = v128;
              do
              {
                v136 = v125 * (v131 >> v18);
                v137 = v129 + v212;
                v138 = *v210 + 4 * (v136 + ((int)(v129 + v212) >> v16));
                *(_DWORD *)(a1 + 24) = v129 + v212;
                v140 = v133 <= v211 && v209 != 0;
                v228 = v140;
                v233 = v133;
                v141 = v133 + v208;
                v142 = a1 + 32 * v128 + 96;
                v242 = (unsigned __int8 *)(v142 + v141);
                v215 = (_QWORD *)(v142 + (v141 + 8));
                do
                {
                  v144 = a4[9];
                  if (v144 == 13 && v240[v128] || a4[12])
                  {
                    if (a4[6])
                      goto LABEL_205;
                    goto LABEL_223;
                  }
                  v252 = (char)a4[14];
                  if (v228)
                  {
                    v146 = 0;
                    v147 = v250;
                    v148 = v233;
                    if (v127 > v230)
                      goto LABEL_215;
                  }
                  else
                  {
                    v146 = (int)(v127 + *v29) >= v134;
                    v147 = v250;
                    v148 = v233;
                    if (v127 > v230)
                      goto LABEL_215;
                  }
                  if (!v217 && v148 + *v251 >= v214)
                  {
LABEL_215:
                    v149 = 0;
                    goto LABEL_217;
                  }
                  v149 = 8;
LABEL_217:
                  v150 = *(_DWORD *)(a1 + 28);
                  if (((*((_DWORD *)v147 + 826) - 1) & v243 & v150) != 0)
                    v151 = 0;
                  else
                    v151 = *v216 + ((*((int *)v147 + 822) * ((v150 >> *((_DWORD *)v147 + 825)) - 1)) << 7);
                  if (v144 == 13)
                    v144 = 0;
                  v152 = *v29;
                  v153 = *v251;
                  v178 = v125;
                  v154 = v147;
                  v155 = dav1d_prepare_intra_edges_8bpc(v137 >> v16, v137 >> v16 > (int)v244[3466] >> v16, v150 >> v239, v150 >> v239 > (int)v244[3468] >> v239, (int)v244[3467] >> v16, (int)v244[3469] >> v239, v149 | !v146, v138, v178, v151, v144, (int *)&v252, v152, v153, *(_DWORD *)(v147[1] + 1020), v226);
                  v252 |= v225;
                  v156 = (4 * v153);
                  v29 = v246;
                  v157 = ((int)((v16 | (4 * v154[820])) - 4 * (*(_DWORD *)(a1 + 24) & v220)) >> v16);
                  v158 = v154[821];
                  v125 = v223;
                  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(v224 + 8 * v155))(v138, v223, v226, (4 * v152), v156, v252 | v221, v157, ((int)((v239 | (4 * v158)) - 4 * (*(_DWORD *)(a1 + 28) & v243)) >> v239));
                  v33 = (_DWORD *)(a1 + 259588);
                  v134 = v238;
                  v128 = v249;
                  if (a4[6])
                  {
LABEL_205:
                    if (*v33)
                    {
                      v143 = *v29;
                    }
                    else
                    {
                      switch(*v251)
                      {
                        case 1:
                          *v242 = 64;
                          v143 = *v29;
                          v145 = v143 - 1;
                          if ((v143 - 1) <= 0xF)
                            goto LABEL_237;
                          goto LABEL_200;
                        case 2:
                          *(_WORD *)v242 = 16448;
                          v143 = *v29;
                          v145 = v143 - 1;
                          if ((v143 - 1) <= 0xF)
                            goto LABEL_237;
                          goto LABEL_200;
                        case 4:
                          *(_DWORD *)v242 = 1077952576;
                          v143 = *v29;
                          v145 = v143 - 1;
                          if ((v143 - 1) <= 0xF)
                            goto LABEL_237;
                          goto LABEL_200;
                        case 8:
                          *(_QWORD *)v242 = 0x4040404040404040;
                          goto LABEL_236;
                        case 0x10:
                          *(_QWORD *)v242 = 0x4040404040404040;
                          *v215 = 0x4040404040404040;
                          v143 = *v29;
                          v145 = v143 - 1;
                          if ((v143 - 1) > 0xF)
                            goto LABEL_200;
                          goto LABEL_237;
                        default:
LABEL_236:
                          v143 = *v29;
                          v145 = v143 - 1;
LABEL_237:
                          switch(v145)
                          {
                            case 0:
                              *(_BYTE *)(*(_QWORD *)(a1 + 656) + 32 * v128 + v127 + v234 + 64) = 64;
                              v143 = 1;
                              break;
                            case 1:
                              *(_WORD *)(*(_QWORD *)(a1 + 656) + 32 * v128 + v127 + v234 + 64) = 16448;
                              v143 = 2;
                              break;
                            case 3:
                              *(_DWORD *)(*(_QWORD *)(a1 + 656) + 32 * v128 + v127 + v234 + 64) = 1077952576;
                              v143 = 4;
                              break;
                            case 7:
                              *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v128 + v127 + v234 + 64) = 0x4040404040404040;
                              v143 = 8;
                              break;
                            case 15:
                              v165 = v127 + v234;
                              *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v128 + v165 + 64) = 0x4040404040404040;
                              *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v128 + (v165 + 8) + 64) = 0x4040404040404040;
                              v143 = 16;
                              break;
                            default:
                              goto LABEL_200;
                          }
                          break;
                      }
                    }
                    goto LABEL_200;
                  }
LABEL_223:
                  v254 = 0;
                  if (*v33)
                  {
                    v143 = *v29;
                    *(_QWORD *)&v244[4 * (*v33 & 1) + 3476] += 32 * *v251 * (unint64_t)*v29;
                    v159 = v250[525] + 10 * (*(int *)(a1 + 24) + v250[408] * *(int *)(a1 + 28));
                    v160 = *(__int16 *)(v159 + 2 * v236);
                    v254 = *(unsigned __int8 *)(v159 + v236 + 6);
                    if ((v160 & 0x80000000) == 0)
                    {
LABEL_225:
                      (*(void (**)(uint64_t, uint64_t))(v219 + 136 * a4[7] + 8 * v254))(v138, v125);
                      v128 = v249;
                    }
                  }
                  else
                  {
                    v253 = 0;
                    v161 = v127 + v234;
                    v162 = decode_coefs_0(a1, *(_QWORD *)(a1 + 656) + 32 * v128 + v161 + 64, (uint64_t)v242, a4[7], a2, (uint64_t)a4, 1, v236, v231, &v254, &v253);
                    v163 = *v251;
                    if (v163 >= (int)(*((_DWORD *)v250 + 821) + v239 - *(_DWORD *)(a1 + 28)) >> v239)
                      v163 = (int)(*((_DWORD *)v250 + 821) + v239 - *(_DWORD *)(a1 + 28)) >> v239;
                    switch(v163)
                    {
                      case 1:
                        LODWORD(v164) = v253;
                        *v242 = v253;
                        break;
                      case 2:
                        LODWORD(v164) = v253;
                        *(_WORD *)v242 = v253 | (v253 << 8);
                        break;
                      case 4:
                        LODWORD(v164) = v253;
                        *(_DWORD *)v242 = 16843009 * v253;
                        break;
                      case 8:
                        LODWORD(v164) = v253;
                        *(_QWORD *)v242 = 0x101010101010101 * v253;
                        break;
                      case 16:
                        v164 = v253;
                        *(_QWORD *)v242 = 0x101010101010101 * v253;
                        *v215 = 0x101010101010101 * v164;
                        break;
                      default:
                        LODWORD(v164) = v253;
                        memset(v242, v253, v163);
                        break;
                    }
                    v128 = v249;
                    v143 = *v246;
                    v166 = (int)(*((_DWORD *)v250 + 820) + v245 - *(_DWORD *)(a1 + 24)) >> v245;
                    if (v143 < v166)
                      v166 = *v246;
                    switch(v166)
                    {
                      case 1:
                        *(_BYTE *)(*(_QWORD *)(a1 + 656) + 32 * v249 + v161 + 64) = v164;
                        v29 = v246;
                        v134 = v238;
                        if ((v162 & 0x80000000) == 0)
                          goto LABEL_225;
                        break;
                      case 2:
                        *(_WORD *)(*(_QWORD *)(a1 + 656) + 32 * v249 + v161 + 64) = v164 | ((_WORD)v164 << 8);
                        v29 = v246;
                        v134 = v238;
                        if ((v162 & 0x80000000) == 0)
                          goto LABEL_225;
                        break;
                      case 4:
                        *(_DWORD *)(*(_QWORD *)(a1 + 656) + 32 * v249 + v161 + 64) = 16843009 * v164;
                        v29 = v246;
                        v134 = v238;
                        if ((v162 & 0x80000000) == 0)
                          goto LABEL_225;
                        break;
                      case 8:
                        *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v249 + v161 + 64) = 0x101010101010101
                                                                                   * v164;
                        v29 = v246;
                        v134 = v238;
                        if ((v162 & 0x80000000) == 0)
                          goto LABEL_225;
                        break;
                      case 16:
                        v167 = 0x101010101010101 * v164;
                        *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v249 + v161 + 64) = v167;
                        *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v249 + (v161 + 8) + 64) = v167;
                        v29 = v246;
                        v134 = v238;
                        if ((v162 & 0x80000000) == 0)
                          goto LABEL_225;
                        break;
                      default:
                        memset((void *)(*(_QWORD *)(a1 + 656) + 32 * v249 + v161 + 64), v164, v166);
                        v29 = v246;
                        v128 = v249;
                        v134 = v238;
                        if ((v162 & 0x80000000) == 0)
                          goto LABEL_225;
                        break;
                    }
                  }
                  v16 = v245;
LABEL_200:
                  v138 += (4 * v143);
                  v127 += v143;
                  v137 = (v143 << v16) + *(_DWORD *)(a1 + 24);
                  *(_DWORD *)(a1 + 24) = v137;
                }
                while ((int)v127 < v134);
                v129 = v137 - (v127 << v16);
                *(_DWORD *)(a1 + 24) = v129;
                v135 = *v251;
                v133 = v233 + v135;
                LOBYTE(v18) = v239;
                v131 = (v135 << v239) + *(_DWORD *)(a1 + 28);
                *(_DWORD *)(a1 + 28) = v131;
                v127 = v230;
              }
              while (v133 < v214);
              v130 = 0;
              v6 = v131 - (v133 << v239);
              *(_DWORD *)(a1 + 28) = v6;
              v128 = 1;
              v26 = v204;
              v5 = v250;
              if ((v202 & 1) == 0)
                goto LABEL_42;
            }
          }
          v168 = *v251;
          v169 = v168 << v18;
          v170 = *(_DWORD *)(a1 + 24);
          v171 = v181 + v6;
          v172 = v212 - (v127 << v16);
          v173 = v170 + v212 - (v127 << v16);
          v174 = v211;
          do
          {
            v175 = v173;
            v174 += v168;
            v171 += v169;
            v170 += v172;
            v173 += v172;
          }
          while (v174 < v214);
          v176 = v171 - (v174 << v18);
          v177 = v211;
          do
          {
            v177 += v168;
            v176 += v169;
            v175 += v172;
          }
          while (v177 < v214);
          v6 = v176 - (v177 << v18);
          *(_DWORD *)(a1 + 24) = v175;
          *(_DWORD *)(a1 + 28) = v6;
        }
LABEL_42:
        v212 += 16;
        v13 = v199;
        result = v198;
        v27 = v207;
        v35 = v205;
      }
      while (v201 < v199);
      v25 = v181 + 32;
      v26 = v179;
    }
    while (v179 < (int)v198);
  }
  return result;
}

uint64_t dav1d_recon_b_inter_8bpc(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  signed int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  int v69;
  _QWORD *v70;
  _BOOL4 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t, _BYTE *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  signed int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  signed int v156;
  int v157;
  int v158;
  char v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  signed int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  signed int v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  signed int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  _DWORD *v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  int v197;
  __int16 v198;
  int v199;
  int v200;
  uint64_t v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  signed int v209;
  unsigned int v210;
  int v211;
  signed int v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  int v250;
  BOOL v251;
  char v252;
  int v253;
  int v254;
  uint64_t v255;
  unsigned __int8 *v256;
  unsigned int v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  signed int v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  unsigned __int8 *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int v269;
  signed int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  uint64_t v274;
  signed int v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  _QWORD *v279;
  uint64_t v280;
  int *v281;
  unsigned int v284;
  _BYTE *v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _DWORD *v294;
  int v295;
  uint64_t v296;
  int v297;
  unsigned int v298;
  unsigned __int8 *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v303;
  _BOOL4 v304;
  uint64_t v305;
  int v306;
  signed int v307;
  unsigned __int8 *v308;
  signed int v309;
  unsigned __int8 *v310;
  int v311;
  uint64_t v312;
  unsigned __int8 v313;
  _WORD v314[2];
  int v315[3];

  v3 = a3;
  v281 = (int *)(a1 + 259520);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = v6;
  v9 = v7;
  v267 = v6 & 0x1F;
  v268 = v7 & 0x1F;
  v10 = *(_DWORD *)(v5 + 2056);
  v11 = v10 == 1;
  v12 = v10 != 3;
  v13 = &dav1d_block_dimensions[4 * a2];
  v14 = *v13;
  v15 = v13[1];
  v16 = *(_DWORD *)(v5 + 3280) - v6;
  if ((int)v14 < v16)
    v16 = *v13;
  v257 = v16;
  v17 = *(_DWORD *)(v5 + 3284) - v7;
  if (v15 < v17)
    v17 = v13[1];
  v244 = v17;
  if (!v10 || (v14 <= v12 ? (v18 = (v8 & 1) == 0) : (v18 = 0), v18))
  {
    v19 = 0;
  }
  else if (v15 <= v11)
  {
    v19 = v7 & 1;
  }
  else
  {
    v19 = 1;
  }
  v294 = *(_DWORD **)(a1 + 16);
  v303 = *(_QWORD *)(v5 + 3144);
  v280 = v267 >> v12;
  v266 = v268 >> v11;
  if (v10)
    v20 = 3 - v10;
  else
    v20 = 0;
  v309 = (v15 + v11) >> v11;
  v21 = (v14 + v12) >> v12;
  v22 = *(_QWORD *)(v5 + 2032);
  v23 = *(_QWORD *)(v5 + 2008) + 4 * (v8 + v22 * v7);
  v259 = 4 * (*(_QWORD *)(v5 + 2040) * (v7 >> v11) + ((int)v8 >> v12));
  v24 = *(_QWORD *)(v5 + 24);
  v253 = *v13;
  v311 = v10 != 3;
  v312 = *(_QWORD *)(a1 + 8);
  v287 = v10 == 1;
  v245 = v13[1];
  if ((*(_BYTE *)(v24 + 232) & 1) == 0)
  {
    v25 = v5 + 2256;
    mc_0(a1, v23, 0, v22, v14, v15, v8, v9, 0, v233, *(_DWORD *)(a3 + 8), v5 + 2256, 0, 9u);
    if (v19)
    {
      v297 = (_DWORD)v14 << ((_DWORD)v14 == v311);
      v288 = (_DWORD)v245 << ((_DWORD)v245 == v11);
      mc_0(a1, *(_QWORD *)(v312 + 2016) + v259, 0, *(_QWORD *)(v312 + 2040), v297, v288, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v11, 1u, v234, *(_DWORD *)(v3 + 8), v25, 0, 9u);
      mc_0(a1, *(_QWORD *)(v312 + 2024) + v259, 0, *(_QWORD *)(v312 + 2040), v297, v288, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v11, 2u, v235, *(_DWORD *)(v3 + 8), v25, 0, 9u);
    }
    goto LABEL_182;
  }
  if (!*(_BYTE *)(a3 + 20))
  {
    v299 = &dav1d_block_dimensions[4 * a2];
    v34 = *(char *)(a3 + 24);
    v35 = v5 + 280 * v34 + 32;
    v36 = *(unsigned __int8 *)(a3 + 27);
    if ((int)v14 >= v15)
      v37 = v15;
    else
      v37 = v14;
    v290 = v5 + 280 * *(char *)(a3 + 24) + 32;
    if (v37 >= 2)
    {
      if (*(_BYTE *)(a3 + 21) == 2 && *(_BYTE *)(v5 + v34 + 2920))
      {
        if (*(_BYTE *)(a3 + 22) != 2)
        {
          v38 = (int *)(v24 + 36 * (int)v34 + 1424);
LABEL_45:
          warp_affine_0(a1, v23, 0, v22, v299, 0, v35, v38);
          goto LABEL_48;
        }
LABEL_44:
        v38 = (int *)(a1 + 259520);
        goto LABEL_45;
      }
      if (*(_BYTE *)(a3 + 22) == 2 && *v281 > 1)
        goto LABEL_44;
    }
    mc_0(a1, v23, 0, v22, v14, v15, v8, v9, 0, v233, *(_DWORD *)(a3 + 8), v35, v34, v36);
    if (*(_BYTE *)(v3 + 22) == 1)
      obmc_0(a1, v23, *(_QWORD *)(v312 + 2032), v299, 0, v267, v268, v257, v244);
LABEL_48:
    v306 = v21;
    v295 = v10;
    if (*(_BYTE *)(v3 + 28))
    {
      v39 = *(unsigned __int8 *)(v3 + 18);
      if (v39 == 3)
        v39 = 9;
      v315[0] = 0;
      v40 = *(_DWORD *)(a1 + 28);
      if (((*(_DWORD *)(v312 + 3304) - 1) & v40) != 0)
        v41 = 0;
      else
        v41 = *(_QWORD *)(v312 + 3240) + ((*(int *)(v312 + 3288) * ((v40 >> *(_DWORD *)(v312 + 3300)) - 1)) << 7);
      v63 = dav1d_prepare_intra_edges_8bpc(*(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 24) > v294[3466], v40, v40 > v294[3468], v294[3467], v294[3469], 0, v23, *(_QWORD *)(v312 + 2032), v41, v39, v315, v14, v245, 0, (_BYTE *)(a1 + 24800));
      v64 = (4 * v245);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v303 + 8 * v63 + 64))(a1 + 20672, 4 * v14, a1 + 24800, 4 * v14, v64, 0, 0, 0);
      if (*(_BYTE *)(v3 + 28) == 1)
      {
        v65 = (char *)&dav1d_ii_masks + 96 * a2;
        v66 = *(unsigned __int8 *)(v3 + 18);
      }
      else
      {
        v65 = (char *)&dav1d_wedge_masks[96 * a2];
        v66 = *(unsigned __int8 *)(v3 + 16);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v303 + 624))(v23, *(_QWORD *)(v312 + 2032), a1 + 20672, 4 * v14, v64, *(_QWORD *)&v65[8 * v66]);
      v11 = v10 == 1;
    }
    if (!v19)
      goto LABEL_181;
    v67 = (_QWORD *)v312;
    v68 = v245;
    if ((_DWORD)v14 == v311 || (_DWORD)v245 == v11)
    {
      v69 = *(_DWORD *)(a1 + 28);
      v70 = (_QWORD *)(a1 + 8 * (v69 & 0x1F) + 712);
      v71 = (_DWORD)v14 != 1 || *(char *)(*v70 + 12 * *(int *)(a1 + 24) - 4) > 0;
      if ((_DWORD)v245 == v11)
      {
        v72 = *(_QWORD *)(a1 + 8 * (v69 & 0x1F) + 704);
        v73 = *(_DWORD *)(a1 + 24);
        if (*(char *)(v72 + 12 * v73 + 8) <= 0)
          v71 = 0;
        if ((_DWORD)v14 == 1 && *(char *)(v72 + 12 * v73 - 4) <= 0)
          v71 = 0;
      }
      if (v71)
      {
        v74 = *(_QWORD *)(v312 + 2040);
        v75 = *(_DWORD *)(a1 + 24);
        v277 = v36;
        if ((_DWORD)v14 == 1 && (_DWORD)v245 == v11)
        {
          v76 = v69 - 1;
          if (v281[17] == 2)
            v78 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v75 + *(_QWORD *)(v312 + 3264) * v76) - 5);
          else
            v78 = v281[16];
          v77 = *(v70 - 1) + 12 * (v75 - 1);
          mc_0(a1, *(_QWORD *)(v312 + 2016) + v259, 0, v74, 1, v11, v75 - 1, v76, 1u, v233, *(_DWORD *)v77, v312 + 280 * (*(char *)(v77 + 8) - 1) + 32, *(char *)(v77 + 8) - 1, v78);
          v98 = *(int *)(a1 + 24);
          v99 = v98 - 1;
          v100 = *(int *)(a1 + 28) - 1;
          v101 = *(v70 - 1) + 12 * (v98 - 1);
          if (v281[17] == 2)
            v102 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v98 + *(_QWORD *)(v312 + 3264) * v100) - 5);
          else
            v102 = v281[16];
          mc_0(a1, *(_QWORD *)(v312 + 2024) + v259, 0, *(_QWORD *)(v312 + 2040), 1, v11, v99, v100, 2u, v240, *(_DWORD *)v101, v312 + 280 * (*(char *)(v101 + 8) - 1) + 32, *(char *)(v101 + 8) - 1, v102);
          v74 = *(_QWORD *)(v312 + 2040);
          v96 = 2 * v74;
          v75 = *(_DWORD *)(a1 + 24);
          v69 = *(_DWORD *)(a1 + 28);
          v67 = (_QWORD *)v312;
          v68 = v245;
        }
        else
        {
          v96 = 0;
          v97 = v14;
          v14 = 0;
          if (v97 != 1)
          {
LABEL_154:
            v300 = v3;
            if (v68 == v287)
            {
              v108 = a1;
              v109 = dav1d_filter_2d[4 * *(unsigned __int8 *)(*(_QWORD *)(v108 + 656) + v267 + 384)
                                                    + *(unsigned __int8 *)(*(_QWORD *)(v108 + 656) + v267 + 352)];
              v110 = v69 - 1;
              v112 = v109;
              if (v281[17] == 2)
                v112 = *(unsigned __int8 *)(v67[524] + 32 * (v75 + v67[408] * v110) + 27);
              v113 = v253;
              v111 = *(v70 - 1) + 12 * v75;
              mc_0(a1, v67[252] + v14 + v259, 0, v74, v253, v287, v75, v110, 1u, v233, *(_DWORD *)v111, (uint64_t)&v67[35 * *(char *)(v111 + 8) - 31], *(char *)(v111 + 8) - 1, v112);
              v114 = *(int *)(a1 + 24);
              v115 = *(int *)(a1 + 28) - 1;
              if (v281[17] == 2)
                v109 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v114 + *(_QWORD *)(v312 + 3264) * v115) + 27);
              v116 = *(v70 - 1) + 12 * (int)v114;
              mc_0(a1, *(_QWORD *)(v312 + 2024) + v14 + v259, 0, *(_QWORD *)(v312 + 2040), v253, v287, v114, v115, 2u, v242, *(_DWORD *)v116, v312 + 280 * (*(char *)(v116 + 8) - 1) + 32, *(char *)(v116 + 8) - 1, v109);
              v67 = (_QWORD *)v312;
              v74 = *(_QWORD *)(v312 + 2040);
              v96 = 2 * v74;
              v75 = *(_DWORD *)(a1 + 24);
              v69 = *(_DWORD *)(a1 + 28);
              v68 = v245;
            }
            else
            {
              v108 = a1;
              v113 = v253;
            }
            v117 = v67;
            mc_0(v108, v67[252] + v14 + v96 + v259, 0, v74, v113, v68, v75, v69, 1u, v233, *(_DWORD *)(v300 + 8), v290, *(char *)(v300 + 24), v277);
            v118 = v117[253] + v14 + v96 + v259;
            v119 = v117[255];
            v36 = v277;
            v120 = *(_DWORD *)(v108 + 24);
            v121 = *(_DWORD *)(v108 + 28);
            v122 = v108;
            v3 = v300;
            mc_0(v122, v118, 0, v119, v113, v245, v120, v121, 2u, v243, *(_DWORD *)(v3 + 8), v290, *(char *)(v3 + 24), v277);
            LODWORD(v14) = v113;
            v21 = v306;
LABEL_181:
            v281[16] = v36;
            goto LABEL_182;
          }
        }
        v103 = dav1d_filter_2d[4 * *(unsigned __int8 *)(a1 + v268 + 416)
                                              + *(unsigned __int8 *)(a1 + v268 + 384)];
        v105 = v103;
        if (v281[17] == 2)
          v105 = *(unsigned __int8 *)(v67[524] + 32 * (v67[408] * v69 + v75) - 5);
        v104 = *v70 + 12 * (v75 - 1);
        mc_0(a1, v67[252] + v96 + v259, 0, v74, 1, v68, v75 - 1, v69, 1u, v233, *(_DWORD *)v104, (uint64_t)&v67[35 * *(char *)(v104 + 8) - 31], *(char *)(v104 + 8) - 1, v105);
        v107 = *(int *)(a1 + 24);
        v106 = *(int *)(a1 + 28);
        if (v281[17] == 2)
          v103 = *(unsigned __int8 *)(*(_QWORD *)(v312 + 4192) + 32 * (v107 + *(_QWORD *)(v312 + 3264) * v106) - 5);
        v14 = 2;
        mc_0(a1, *(_QWORD *)(v312 + 2024) + v96 + v259, 0, *(_QWORD *)(v312 + 2040), 1, v245, v107 - 1, v106, 2u, v241, *(_DWORD *)(*v70 + 12 * (v107 - 1)), v312 + 280 * (*(char *)(*v70 + 12 * (v107 - 1) + 8) - 1) + 32, *(char *)(*v70 + 12 * (v107 - 1) + 8) - 1, v103);
        v68 = v245;
        v67 = (_QWORD *)v312;
        v74 = *(_QWORD *)(v312 + 2040);
        v75 = *(_DWORD *)(a1 + 24);
        v69 = *(_DWORD *)(a1 + 28);
        goto LABEL_154;
      }
    }
    v79 = v309;
    if (v21 < v309)
      v79 = v21;
    if (v79 >= 2)
    {
      if (*(_BYTE *)(v3 + 21) == 2 && *(_BYTE *)(v312 + *(char *)(v3 + 24) + 2920))
      {
        v80 = v36;
        v81 = (int *)(a1 + 259520);
        v82 = *(_QWORD *)(v312 + 2016);
        v83 = *(_QWORD *)(v312 + 2040);
        if (*(_BYTE *)(v3 + 22) == 2)
          v84 = (int *)(a1 + 259520);
        else
          v84 = (int *)(*(_QWORD *)(v312 + 24) + 36 * *(char *)(v3 + 24) + 1424);
        goto LABEL_163;
      }
      if (*(_BYTE *)(v3 + 22) == 2 && *v281 >= 2)
      {
        v80 = v36;
        v82 = *(_QWORD *)(v312 + 2016);
        v83 = *(_QWORD *)(v312 + 2040);
        v84 = v281;
        v81 = v281;
LABEL_163:
        warp_affine_0(a1, v82 + v259, 0, v83, v299, 1u, v290, v84);
        if (*(_BYTE *)(v3 + 22) != 2)
          v81 = (int *)(*(_QWORD *)(v312 + 24) + 36 * *(char *)(v3 + 24) + 1424);
        warp_affine_0(a1, *(_QWORD *)(v312 + 2024) + v259, 0, *(_QWORD *)(v312 + 2040), v299, 2u, v290, v81);
        v36 = v80;
        v21 = v306;
LABEL_166:
        if (*(_BYTE *)(v3 + 28))
        {
          if (*(_BYTE *)(v3 + 28) == 1)
          {
            v123 = *(unsigned __int8 *)(v3 + 18);
            v124 = (uint64_t *)((char *)&dav1d_ii_masks + 96 * a2 + 32 * v20 + 8 * *(unsigned __int8 *)(v3 + 18));
          }
          else
          {
            v124 = &dav1d_wedge_masks[96 * a2 + 32 * (uint64_t)v20 + *(unsigned __int8 *)(v3 + 16)];
            v123 = *(unsigned __int8 *)(v3 + 18);
          }
          v301 = *v124;
          v292 = a1 + 20672;
          v285 = (_BYTE *)(a1 + 24800);
          v125 = v303 + 64;
          v126 = (4 * v21);
          if (v123 == 3)
            v123 = 9;
          v315[0] = 0;
          v127 = *(_QWORD *)(v312 + 2016) + v259;
          v128 = *(_DWORD *)(a1 + 28);
          v278 = v36;
          if (((*(_DWORD *)(v312 + 3304) - 1) & v128) != 0)
            v129 = 0;
          else
            v129 = *(_QWORD *)(v312 + 3248)
                 + ((*(int *)(v312 + 3288) * ((v128 >> *(_DWORD *)(v312 + 3300)) - 1)) << 7);
          v130 = *(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v125 + 8 * dav1d_prepare_intra_edges_8bpc(*(int *)(a1 + 24) >> v311, *(int *)(a1 + 24) >> v311 > (int)v294[3466] >> v311, v128 >> v287, v128 >> v287 > (int)v294[3468] >> v287, (int)v294[3467] >> v311, (int)v294[3469] >> v287, 0, v127, *(_QWORD *)(v312 + 2040), v129, v123, v315, v306, v309, 0, v285));
          v131 = (4 * v309);
          v130(v292, v126, v285, v126, v131, 0, 0, 0);
          v132 = (4 * v21);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v303 + 624))(v127, *(_QWORD *)(v312 + 2040), v292, v126, v131, v301);
          v133 = *(unsigned __int8 *)(v3 + 18);
          if (v133 == 3)
            v133 = 9;
          v315[0] = 0;
          v134 = *(_QWORD *)(v312 + 2024) + v259;
          v135 = *(_DWORD *)(a1 + 28);
          if (((*(_DWORD *)(v312 + 3304) - 1) & v135) != 0)
            v136 = 0;
          else
            v136 = *(_QWORD *)(v312 + 3256)
                 + ((*(int *)(v312 + 3288) * ((v135 >> *(_DWORD *)(v312 + 3300)) - 1)) << 7);
          v21 = v306;
          v137 = *(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v125 + 8 * dav1d_prepare_intra_edges_8bpc(*(int *)(a1 + 24) >> v311, *(int *)(a1 + 24) >> v311 > (int)v294[3466] >> v311, v135 >> v287, v135 >> v287 > (int)v294[3468] >> v287, (int)v294[3467] >> v311, (int)v294[3469] >> v287, 0, v134, *(_QWORD *)(v312 + 2040), v136, v133, v315, v306, v309, 0, v285));
          v137(v292, v132, v285, v132, v131, 0, 0, 0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(v303 + 624))(v134, *(_QWORD *)(v312 + 2040), v292, v132, v131, v301);
          v10 = v295;
          v36 = v278;
        }
        goto LABEL_181;
      }
    }
    v85 = (_DWORD)v245 << ((_DWORD)v245 == v11);
    v272 = (_DWORD)v14 << ((_DWORD)v14 == v311);
    mc_0(a1, *(_QWORD *)(v312 + 2016) + v259, 0, *(_QWORD *)(v312 + 2040), v272, v85, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v11, 1u, v233, *(_DWORD *)(v3 + 8), v290, *(char *)(v3 + 24), v36);
    if (*(_BYTE *)(v3 + 22) == 1)
      obmc_0(a1, *(_QWORD *)(v312 + 2016) + v259, *(_QWORD *)(v312 + 2040), v299, 1u, v267, v268, v257, v244);
    mc_0(a1, *(_QWORD *)(v312 + 2024) + v259, 0, *(_QWORD *)(v312 + 2040), v272, v85, *(_DWORD *)(a1 + 24) & ~v311, *(_DWORD *)(a1 + 28) & ~v11, 2u, v238, *(_DWORD *)(v3 + 8), v290, *(char *)(v3 + 24), v36);
    v10 = v295;
    if (*(_BYTE *)(v3 + 22) == 1)
      obmc_0(a1, *(_QWORD *)(v312 + 2024) + v259, *(_QWORD *)(v312 + 2040), v299, 2u, v267, v268, v257, v244);
    goto LABEL_166;
  }
  v298 = *(unsigned __int8 *)(a3 + 27);
  v26 = a1 + 9280;
  v289 = 4 * v14;
  v27 = *(char *)(a3 + 24);
  if (*(_BYTE *)(a3 + 21) == 6 && *(_BYTE *)(v5 + v27 + 2920))
    warp_affine_0(a1, 0, a1 + 9280, v289, v13, 0, v5 + 280 * *(char *)(a3 + 24) + 32, (int *)(v24 + 36 * *(char *)(a3 + 24) + 1424));
  else
    mc_0(a1, 0, a1 + 9280, 0, v14, v15, v8, v9, 0, v233, *(_DWORD *)(a3 + 8), v5 + 280 * *(char *)(a3 + 24) + 32, v27, v298);
  v28 = *(char *)(v3 + 25);
  v29 = v312 + 280 * v28 + 32;
  if (*(_BYTE *)(v3 + 21) != 6 || !*(_BYTE *)(v312 + v28 + 2920))
  {
    mc_0(a1, 0, a1 + 42048, 0, v14, v245, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 0, v233, *(_DWORD *)(v3 + 12), v29, v28, v298);
    v30 = *(unsigned __int8 *)(v3 + 20) - 1;
    v276 = v26;
LABEL_30:
    switch(v30)
    {
      case 0u:
        v33 = *(unsigned __int8 *)(v312 - *(char *)(v3 + 24) + 8 * *(char *)(v3 + 24) + *(char *)(v3 + 25) + 4104);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v303 + 584))(v23, *(_QWORD *)(v312 + 2032), a1 + 9280, a1 + 42048, v289, (4 * v245), *(unsigned __int8 *)(v312 - *(char *)(v3 + 24) + 8 * *(char *)(v3 + 24) + *(char *)(v3 + 25) + 4104));
        v31 = v33;
        v32 = 0;
        if (v19)
          goto LABEL_56;
        goto LABEL_182;
      case 1u:
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v303 + 576))(v23, *(_QWORD *)(v312 + 2032), a1 + 9280, a1 + 42048, v289, (4 * v245));
        v31 = 0;
        v32 = 0;
        if (v19)
          goto LABEL_56;
        goto LABEL_182;
      case 2u:
        v32 = a1 + 74816;
        (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(v303 + 8 * v20 + 600))(v23, *(_QWORD *)(v312 + 2032), v26 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v26 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v289, (4 * v245), v32);
        v31 = 0;
        if (v19)
          goto LABEL_56;
        goto LABEL_182;
      case 3u:
        v47 = a1 + 9280;
        v42 = v13;
        v44 = 4 * v245;
        (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, _QWORD))(v303 + 592))(v23, *(_QWORD *)(v312 + 2032), v47 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v47 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v289, (4 * v245), dav1d_wedge_masks[96 * a2 + *(unsigned __int8 *)(v3 + 16)]);
        if (!v19)
          goto LABEL_182;
        v31 = 0;
        v274 = dav1d_wedge_masks[96 * a2
                               + 32 * (uint64_t)v20
                               + 16 * (unint64_t)*(unsigned __int8 *)(v3 + 17)
                               + *(unsigned __int8 *)(v3 + 16)];
        v45 = v10 != 3;
        v46 = v312;
        v43 = v245;
        break;
      default:
        goto LABEL_27;
    }
    goto LABEL_59;
  }
  warp_affine_0(a1, 0, a1 + 42048, v289, v13, 0, v29, (int *)(*(_QWORD *)(v312 + 24) + 36 * (int)v28 + 1424));
  v30 = *(unsigned __int8 *)(v3 + 20) - 1;
  v276 = v26;
  if (v30 <= 3)
    goto LABEL_30;
LABEL_27:
  v31 = 0;
  v32 = 0;
  if (!v19)
    goto LABEL_182;
LABEL_56:
  v42 = v13;
  v274 = v32;
  v43 = v245;
  v44 = 4 * v245;
  v45 = v10 != 3;
  v46 = v312;
LABEL_59:
  if (v21 >= v309)
    v48 = v309;
  else
    v48 = v21;
  v291 = v289 >> v45;
  v284 = v44 >> v287;
  v49 = *(char *)(v3 + 24);
  v50 = v46 + 280 * v49 + 32;
  v271 = v31;
  if (v48 > 1)
  {
    if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v46 + v49 + 2920))
    {
      v51 = v42;
      warp_affine_0(a1, 0, v276, v291, v42, 1u, v50, (int *)(*(_QWORD *)(v46 + 24) + 36 * (int)v49 + 1424));
      v52 = v312;
    }
    else
    {
      mc_0(a1, 0, v276, 0, v14, v43, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v233, *(_DWORD *)(v3 + 8), v50, v49, v298);
      v52 = v312;
      v51 = v42;
    }
    v58 = *(char *)(v3 + 25);
    v59 = v52 + 280 * v58 + 32;
    if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v52 + v58 + 2920))
      warp_affine_0(a1, 0, a1 + 42048, v291, v51, 1u, v59, (int *)(*(_QWORD *)(v52 + 24) + 36 * (int)v58 + 1424));
    else
      mc_0(a1, 0, a1 + 42048, 0, v14, v245, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v233, *(_DWORD *)(v3 + 12), v59, v58, v298);
    v60 = v312;
    v61 = *(_QWORD *)(v312 + 2016) + v259;
    v62 = *(unsigned __int8 *)(v3 + 20);
    if ((v62 - 3) < 2)
    {
      (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(v303 + 592))(v61, *(_QWORD *)(v312 + 2040), v276 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v276 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v291, v284, v274);
    }
    else if (v62 == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v303 + 584))(v61, *(_QWORD *)(v312 + 2040), v276, a1 + 42048, v291, v284, v271);
    }
    else
    {
      if (v62 != 2)
      {
LABEL_126:
        v90 = *(char *)(v3 + 24);
        v91 = v60 + 280 * v90 + 32;
        if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v60 + v90 + 2920))
          warp_affine_0(a1, 0, v276, v291, v51, 2u, v91, (int *)(*(_QWORD *)(v60 + 24) + 36 * (int)v90 + 1424));
        else
          mc_0(a1, 0, v276, 0, v14, v245, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v233, *(_DWORD *)(v3 + 8), v91, v90, v298);
        v92 = *(char *)(v3 + 25);
        v93 = v312 + 280 * v92 + 32;
        if (*(_BYTE *)(v3 + 21) == 6 && *(_BYTE *)(v312 + v92 + 2920))
          warp_affine_0(a1, 0, a1 + 42048, v291, v51, 2u, v93, (int *)(*(_QWORD *)(v312 + 24) + 36 * (int)v92 + 1424));
        else
          mc_0(a1, 0, a1 + 42048, 0, v14, v245, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v233, *(_DWORD *)(v3 + 12), v93, v92, v298);
        v94 = *(_QWORD *)(v312 + 2024) + v259;
        v95 = *(unsigned __int8 *)(v3 + 20);
        if ((v95 - 3) < 2)
        {
          (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(v303 + 592))(v94, *(_QWORD *)(v312 + 2040), v276 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v276 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v291, v284, v274);
        }
        else if (v95 == 1)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v303 + 584))(v94, *(_QWORD *)(v312 + 2040), v276, a1 + 42048, v291, v284, v271);
        }
        else if (v95 == 2)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v303 + 576))(v94, *(_QWORD *)(v312 + 2040), v276, a1 + 42048, v291, v284);
        }
        goto LABEL_182;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v303 + 576))(v61, *(_QWORD *)(v312 + 2040), v276, a1 + 42048, v291, v284);
    }
    v60 = v312;
    goto LABEL_126;
  }
  v307 = v21;
  v53 = v43;
  mc_0(a1, 0, v276, 0, v14, v43, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v233, *(_DWORD *)(v3 + 8), v50, v49, v298);
  mc_0(a1, 0, a1 + 42048, 0, v14, v53, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 1u, v236, *(_DWORD *)(v3 + 12), v312 + 280 * *(char *)(v3 + 25) + 32, *(char *)(v3 + 25), v298);
  v54 = v312;
  v55 = *(_QWORD *)(v312 + 2016) + v259;
  v56 = *(unsigned __int8 *)(v3 + 20);
  if ((v56 - 3) < 2)
  {
    (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(v303 + 592))(v55, *(_QWORD *)(v312 + 2040), v276 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v276 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v291, v284, v274);
    v54 = v312;
    v57 = v276;
  }
  else
  {
    if (v56 == 1)
    {
      v57 = v276;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v303 + 584))(v55, *(_QWORD *)(v312 + 2040), v276, a1 + 42048, v291, v284, v271);
    }
    else
    {
      v57 = v276;
      if (v56 != 2)
        goto LABEL_119;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v303 + 576))(v55, *(_QWORD *)(v312 + 2040), v276, a1 + 42048, v291, v284);
    }
    v54 = v312;
  }
LABEL_119:
  v86 = a1 + 42048;
  v87 = v54 + 32;
  mc_0(a1, 0, v57, 0, v14, v245, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v237, *(_DWORD *)(v3 + 8), v54 + 32 + 280 * *(char *)(v3 + 24), *(char *)(v3 + 24), v298);
  mc_0(a1, 0, a1 + 42048, 0, v14, v245, *(_DWORD *)(a1 + 24), *(_DWORD *)(a1 + 28), 2u, v239, *(_DWORD *)(v3 + 12), v87 + 280 * *(char *)(v3 + 25), *(char *)(v3 + 25), v298);
  v88 = *(_QWORD *)(v312 + 2024) + v259;
  v89 = *(unsigned __int8 *)(v3 + 20);
  if ((v89 - 3) < 2)
  {
    (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t))(v303 + 592))(v88, *(_QWORD *)(v312 + 2040), v57 + ((unint64_t)*(unsigned __int8 *)(v3 + 17) << 15), v57 + ((unint64_t)(*(_BYTE *)(v3 + 17) == 0) << 15), v291, v284, v274);
LABEL_140:
    v21 = v307;
    goto LABEL_182;
  }
  if (v89 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v303 + 584))(v88, *(_QWORD *)(v312 + 2040), v57, v86, v291, v284, v271);
    goto LABEL_140;
  }
  v21 = v307;
  if (v89 == 2)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(v303 + 576))(v88, *(_QWORD *)(v312 + 2040), v57, v86, v291, v284);
LABEL_182:
  if (!*(_BYTE *)(v3 + 6))
  {
    v138 = *(unsigned __int8 *)(v3 + 7);
    v139 = *(unsigned __int8 *)(v3 + 26);
    v314[0] = *(unsigned __int8 *)(v3 + 29);
    v314[1] = *(_WORD *)(v3 + 30);
    v140 = a1;
    LOBYTE(v141) = v311;
    v142 = v312;
    v143 = v287;
    if (!(_DWORD)v245)
      return 0;
    v258 = v10 == 1;
    if (!(_DWORD)v14)
      return 0;
    v144 = 0;
    v145 = 0;
    v256 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v139;
    v265 = v256 + 1;
    v308 = (unsigned __int8 *)&dav1d_txfm_dimensions + 8 * v138;
    v310 = v308 + 1;
    v293 = v303 + 680;
    v146 = *(_DWORD *)(a1 + 28);
    v252 = v19;
LABEL_189:
    v147 = 0;
    v251 = v144 != 0;
    v262 = 4 * v144;
    v148 = v144 + 16;
    v149 = v244;
    if (v244 >= (int)v144 + 16)
      v149 = v144 + 16;
    v150 = v149;
    v246 = v144 + 16;
    if ((v244 + v287) >> v287 >= (int)(v148 >> v143))
      v151 = v148 >> v143;
    else
      v151 = (v244 + v287) >> v287;
    v261 = v144 >> v143;
    v250 = v145 - 2 * (v144 >> v143 << v143);
    v254 = v145;
    v260 = v144;
    v264 = v149;
    v270 = v151;
    while (1)
    {
      v153 = *(_QWORD *)(v142 + 2032);
      v154 = v23 + v153 * v262;
      v155 = v146 + v144;
      *(_DWORD *)(v140 + 28) = v146 + v144;
      v273 = v147;
      if (v144 >= v150)
      {
        v158 = v144;
        *(_DWORD *)(v140 + 28) = v146;
        if ((v19 & 1) != 0)
          goto LABEL_213;
      }
      else
      {
        v304 = v147 != 0;
        if ((int)v257 >= (int)(v147 + 16))
          v156 = v147 + 16;
        else
          v156 = v257;
        if ((int)v147 >= v156)
        {
          v165 = *v265;
          v158 = v144;
          do
          {
            v154 += 4 * v153 * v165;
            v158 += v165;
          }
          while (v158 < (int)v150);
          v155 = v146 + v158;
          *(_DWORD *)(v140 + 28) = v146;
          if ((v19 & 1) != 0)
            goto LABEL_213;
        }
        else
        {
          v157 = *(_DWORD *)(v140 + 24);
          v158 = v144;
          v14 = v140;
          v159 = v251;
          do
          {
            *(_DWORD *)(v14 + 24) = v157 + v147;
            v160 = v304;
            do
            {
              v161 = v154;
              read_coef_tree_0(v14, a2, v3, *(unsigned __int8 *)(v3 + 26), 0, (uint64_t)v314, v160, v159, v154 + 4 * v147);
              v154 = v161;
              v162 = *v256;
              v163 = *(_DWORD *)(v14 + 24) + v162;
              *(_DWORD *)(v14 + 24) = v163;
              v147 += v162;
              ++v160;
            }
            while ((int)v147 < v156);
            v142 = v312;
            v153 = *(_QWORD *)(v312 + 2032);
            v150 = v264;
            v164 = *v265;
            v154 = v161 + 4 * v153 * v164;
            v157 = v163 - v147;
            v155 = *(_DWORD *)(v14 + 28) + v164;
            *(_DWORD *)(v14 + 24) = v157;
            *(_DWORD *)(v14 + 28) = v155;
            v158 += v164;
            ++v159;
            v147 = v273;
          }
          while (v158 < (int)v264);
          v140 = v14;
          LODWORD(v14) = v253;
          v143 = v287;
          LOBYTE(v141) = v311;
          v145 = v254;
          v144 = v260;
          v151 = v270;
          LOBYTE(v19) = v252;
          v146 = v155 - v158;
          *(_DWORD *)(v140 + 28) = v155 - v158;
          if ((v252 & 1) != 0)
          {
LABEL_213:
            v152 = v147 + 16;
            if ((int)(v257 + v311) >> v311 >= (int)((v147 + 16) >> v141))
              v166 = (v147 + 16) >> v141;
            else
              v166 = (int)(v257 + v311) >> v311;
            if (v261 >= v151)
            {
              v146 += v250;
              *(_DWORD *)(v140 + 28) = v146;
            }
            else
            {
              v255 = v154;
              v167 = v147 >> v141;
              if ((int)(v147 >> v141) >= v166)
              {
                v202 = v167 << v141;
                v203 = v147 - (v167 << v141);
                v204 = *v310;
                v205 = v204 << v143;
                v206 = *(_DWORD *)(v140 + 24);
                v207 = v145 + v155 - v158;
                v208 = v147 + v206 - v202;
                v209 = v261;
                do
                {
                  v210 = v208;
                  v209 += v204;
                  v207 += v205;
                  v206 += v203;
                  v208 += v203;
                }
                while (v209 < v151);
                v211 = v207 - (v209 << v143);
                v212 = v261;
                do
                {
                  v211 += v205;
                  v212 += v204;
                  v210 += v203;
                }
                while (v212 < v151);
                v146 = v211 - (v212 << v143);
                *(_DWORD *)(v140 + 24) = v210;
                *(_DWORD *)(v140 + 28) = v146;
                v154 = v255;
              }
              else
              {
                v269 = v147 >> v141;
                v247 = v147 + 16;
                v248 = v153;
                v249 = v158;
                v168 = 0;
                v169 = *(_QWORD *)(v142 + 2040);
                v170 = *(_DWORD *)(v140 + 24);
                v171 = 1;
                v172 = v281;
                do
                {
                  v263 = v171;
                  v173 = v168 + 1;
                  v174 = *(_QWORD *)(v142 + 8 * (v168 + 1) + 2008);
                  *(_DWORD *)(v140 + 28) = v146 + v144;
                  v296 = v174 + v259 + ((v169 * v262) >> v258);
                  v175 = v261;
                  v305 = v168;
                  do
                  {
                    v177 = v170 + v147;
                    *(_DWORD *)(v140 + 24) = v170 + v147;
                    v286 = v267 | (32 * ((v175 << v143) + v268));
                    v275 = v175;
                    v178 = (v175 + v266);
                    v179 = v140 + 32 * v168 + 96;
                    v180 = (unsigned __int8 *)(v179 + v178);
                    v279 = (_QWORD *)(v179 + (v178 + 8));
                    v181 = v269;
                    do
                    {
                      v185 = v172[17];
                      if (v185)
                      {
                        v186 = &v294[4 * (v185 & 1)];
                        v184 = *((_QWORD *)v186 + 1738);
                        v187 = *v308;
                        v188 = *v310;
                        *((_QWORD *)v186 + 1738) = v184 + 32 * v188 * *v308;
                        v189 = *(_QWORD *)(v142 + 4200) + 10 * (*(_QWORD *)(v142 + 3264) * *(int *)(v140 + 28) + v177);
                        v190 = *(__int16 *)(v189 + 2 * v173);
                        v315[0] = *(unsigned __int8 *)(v189 + v173 + 6);
                        if ((v190 & 0x80000000) == 0)
                        {
LABEL_224:
                          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v293
                                                                                    + 136
                                                                                    * *(unsigned __int8 *)(v3 + 7)
                                                                                    + 8 * v315[0]))(v296 + (4 * v181), *(_QWORD *)(v142 + 2040), v184, v190);
                          LOBYTE(v141) = v311;
                          v142 = v312;
                        }
                      }
                      else
                      {
                        v313 = 0;
                        v315[0] = *(unsigned __int8 *)(v140 + v286 + (v181 << v141) + 8256);
                        v191 = v3;
                        v192 = (v181 + v280);
                        v193 = v191;
                        v194 = decode_coefs_0(v140, *(_QWORD *)(v140 + 656) + 32 * v305 + v192 + 64, (uint64_t)v180, *(unsigned __int8 *)(v191 + 7), a2, v191, 0, v173, a1 + 1024, (unsigned int *)v315, &v313);
                        v142 = v312;
                        v190 = v194;
                        v188 = *v310;
                        v195 = (*(_DWORD *)(v312 + 3284) + v287 - *(_DWORD *)(v140 + 28)) >> v287;
                        if ((int)v188 < v195)
                          v195 = *v310;
                        switch(v195)
                        {
                          case 1:
                            LODWORD(v196) = v313;
                            *v180 = v313;
                            break;
                          case 2:
                            LODWORD(v196) = v313;
                            *(_WORD *)v180 = v313 | (v313 << 8);
                            break;
                          case 4:
                            LODWORD(v196) = v313;
                            *(_DWORD *)v180 = 16843009 * v313;
                            break;
                          case 8:
                            LODWORD(v196) = v313;
                            *(_QWORD *)v180 = 0x101010101010101 * v313;
                            break;
                          case 16:
                            v196 = v313;
                            *(_QWORD *)v180 = 0x101010101010101 * v313;
                            *v279 = 0x101010101010101 * v196;
                            break;
                          default:
                            LODWORD(v196) = v313;
                            memset(v180, v313, v195);
                            v142 = v312;
                            break;
                        }
                        v141 = v311;
                        v187 = *v308;
                        v197 = (*(_DWORD *)(v142 + 3280) + v141 - *(_DWORD *)(a1 + 24)) >> v141;
                        if (v187 < v197)
                          v197 = *v308;
                        switch(v197)
                        {
                          case 1:
                            *(_BYTE *)(*(_QWORD *)(a1 + 656) + 32 * v305 + v192 + 64) = v196;
                            v140 = a1;
                            v3 = v193;
                            v172 = v281;
                            v184 = a1 + 1024;
                            if ((v190 & 0x80000000) == 0)
                              goto LABEL_224;
                            break;
                          case 2:
                            v198 = v196 | ((_WORD)v196 << 8);
                            v140 = a1;
                            *(_WORD *)(*(_QWORD *)(a1 + 656) + 32 * v305 + v192 + 64) = v198;
                            v3 = v193;
                            v172 = v281;
                            v184 = a1 + 1024;
                            if ((v190 & 0x80000000) == 0)
                              goto LABEL_224;
                            break;
                          case 4:
                            v200 = 16843009 * v196;
                            v140 = a1;
                            *(_DWORD *)(*(_QWORD *)(a1 + 656) + 32 * v305 + v192 + 64) = v200;
                            v3 = v193;
                            v172 = v281;
                            v184 = a1 + 1024;
                            if ((v190 & 0x80000000) == 0)
                              goto LABEL_224;
                            break;
                          case 8:
                            v201 = 0x101010101010101 * v196;
                            v140 = a1;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + 32 * v305 + v192 + 64) = v201;
                            v3 = v193;
                            v172 = v281;
                            v184 = a1 + 1024;
                            if ((v190 & 0x80000000) == 0)
                              goto LABEL_224;
                            break;
                          case 16:
                            v182 = 0x101010101010101 * v196;
                            v140 = a1;
                            v183 = 32 * v305;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + v183 + v192 + 64) = v182;
                            *(_QWORD *)(*(_QWORD *)(a1 + 656) + v183 + (v192 + 8) + 64) = v182;
                            v3 = v193;
                            v172 = v281;
                            v184 = a1 + 1024;
                            if ((v190 & 0x80000000) == 0)
                              goto LABEL_224;
                            break;
                          default:
                            v199 = v196;
                            v140 = a1;
                            memset((void *)(*(_QWORD *)(a1 + 656) + 32 * v305 + v192 + 64), v199, v197);
                            LOBYTE(v141) = v311;
                            v142 = v312;
                            v3 = v193;
                            v172 = v281;
                            v184 = a1 + 1024;
                            if ((v190 & 0x80000000) == 0)
                              goto LABEL_224;
                            break;
                        }
                      }
                      v177 = *(_DWORD *)(v140 + 24) + (v187 << v141);
                      *(_DWORD *)(v140 + 24) = v177;
                      v181 += v187;
                    }
                    while (v181 < v166);
                    v169 = *(_QWORD *)(v142 + 2040);
                    v296 += 4 * v188 * v169;
                    v170 = v177 - (v181 << v141);
                    v143 = v287;
                    v176 = *(_DWORD *)(v140 + 28) + ((_DWORD)v188 << v287);
                    *(_DWORD *)(v140 + 24) = v170;
                    *(_DWORD *)(v140 + 28) = v176;
                    v175 = v275 + v188;
                    v151 = v270;
                    v147 = v273;
                    v168 = v305;
                  }
                  while (v175 < v270);
                  v171 = 0;
                  v146 = v176 - (v175 << v287);
                  *(_DWORD *)(v140 + 28) = v146;
                  v168 = 1;
                  v144 = v260;
                }
                while ((v263 & 1) != 0);
                LOBYTE(v19) = v252;
                LODWORD(v14) = v253;
                v145 = v254;
                v150 = v264;
                v154 = v255;
                v158 = v249;
                v153 = v248;
                v152 = v247;
              }
            }
            goto LABEL_196;
          }
        }
      }
      v152 = v147 + 16;
LABEL_196:
      v23 = v154 - 4 * v153 * v158;
      v147 = v152;
      if (v152 >= v14)
      {
        v145 += 32;
        v144 = v246;
        if (v246 >= v245)
          return 0;
        goto LABEL_189;
      }
    }
  }
  switch((int)v245)
  {
    case 1:
      *(_BYTE *)(a1 + v268 + 64) = 64;
      break;
    case 2:
      *(_WORD *)(a1 + v268 + 64) = 16448;
      break;
    case 4:
      *(_DWORD *)(a1 + v268 + 64) = 1077952576;
      break;
    case 8:
      *(_QWORD *)(a1 + v268 + 64) = 0x4040404040404040;
      break;
    case 16:
      *(_QWORD *)&v213 = 0x4040404040404040;
      *((_QWORD *)&v213 + 1) = 0x4040404040404040;
      *(_OWORD *)(a1 + v268 + 64) = v213;
      break;
    case 32:
      *(_QWORD *)&v214 = 0x4040404040404040;
      *((_QWORD *)&v214 + 1) = 0x4040404040404040;
      *(_OWORD *)(a1 + 64 + v268) = v214;
      *(_OWORD *)(a1 + 64 + (v268 + 16)) = v214;
      break;
    default:
      break;
  }
  switch((int)v14)
  {
    case 1:
      *(_BYTE *)(*(_QWORD *)(a1 + 656) + v267 + 32) = 64;
      break;
    case 2:
      *(_WORD *)(*(_QWORD *)(a1 + 656) + v267 + 32) = 16448;
      break;
    case 4:
      *(_DWORD *)(*(_QWORD *)(a1 + 656) + v267 + 32) = 1077952576;
      break;
    case 8:
      v215 = *(_QWORD *)(a1 + 656) + v267;
      goto LABEL_271;
    case 16:
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v267 + 32) = 0x4040404040404040;
      v216 = *(_QWORD *)(a1 + 656);
      v217 = (v267 + 8);
      goto LABEL_270;
    case 32:
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + v267 + 32) = 0x4040404040404040;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + (v267 + 8) + 32) = 0x4040404040404040;
      *(_QWORD *)(*(_QWORD *)(a1 + 656) + (v267 + 16) + 32) = 0x4040404040404040;
      v216 = *(_QWORD *)(a1 + 656);
      v217 = (v267 + 24);
LABEL_270:
      v215 = v216 + v217;
LABEL_271:
      *(_QWORD *)(v215 + 32) = 0x4040404040404040;
      break;
    default:
      break;
  }
  if (v19)
  {
    switch(v309)
    {
      case 1:
        v218 = a1 + v266;
        *(_BYTE *)(v218 + 96) = 64;
        *(_BYTE *)(v218 + 128) = 64;
        break;
      case 2:
        v219 = a1 + v266;
        *(_WORD *)(v219 + 96) = 16448;
        *(_WORD *)(v219 + 128) = 16448;
        break;
      case 4:
        v220 = a1 + v266;
        *(_DWORD *)(v220 + 96) = 1077952576;
        *(_DWORD *)(v220 + 128) = 1077952576;
        break;
      case 8:
        v221 = a1 + v266;
        *(_QWORD *)(v221 + 96) = 0x4040404040404040;
        *(_QWORD *)(v221 + 128) = 0x4040404040404040;
        break;
      case 16:
        v222 = a1 + v266;
        *(_QWORD *)&v223 = 0x4040404040404040;
        *((_QWORD *)&v223 + 1) = 0x4040404040404040;
        *(_OWORD *)(v222 + 96) = v223;
        *(_OWORD *)(v222 + 128) = v223;
        break;
      case 32:
        v224 = a1 + 96;
        *(_QWORD *)&v225 = 0x4040404040404040;
        *((_QWORD *)&v225 + 1) = 0x4040404040404040;
        *(_OWORD *)(v224 + v266) = v225;
        v226 = v266 + 16;
        *(_OWORD *)(v224 + v226) = v225;
        v227 = a1 + 128;
        *(_OWORD *)(v227 + v266) = v225;
        *(_OWORD *)(v227 + v226) = v225;
        break;
      default:
        break;
    }
    switch(v21)
    {
      case 1:
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v280 + 64) = 64;
        *(_BYTE *)(*(_QWORD *)(a1 + 656) + v280 + 96) = 64;
        return 0;
      case 2:
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v280 + 64) = 16448;
        *(_WORD *)(*(_QWORD *)(a1 + 656) + v280 + 96) = 16448;
        return 0;
      case 4:
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v280 + 64) = 1077952576;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + v280 + 96) = 1077952576;
        return 0;
      case 8:
        v228 = v280;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v280 + 64) = 0x4040404040404040;
        goto LABEL_288;
      case 16:
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v280 + 64) = 0x4040404040404040;
        v228 = v280 + 8;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v228 + 64) = 0x4040404040404040;
        v229 = *(_QWORD *)(a1 + 656) + v280;
        goto LABEL_287;
      case 32:
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v280 + 64) = 0x4040404040404040;
        v230 = v280 + 8;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v230 + 64) = 0x4040404040404040;
        v231 = v280 + 16;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v231 + 64) = 0x4040404040404040;
        v228 = v280 + 24;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v228 + 64) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v280 + 96) = 0x4040404040404040;
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v230 + 96) = 0x4040404040404040;
        v229 = *(_QWORD *)(a1 + 656) + v231;
LABEL_287:
        *(_QWORD *)(v229 + 96) = 0x4040404040404040;
LABEL_288:
        *(_QWORD *)(*(_QWORD *)(a1 + 656) + v228 + 96) = 0x4040404040404040;
        break;
      default:
        return 0;
    }
  }
  return 0;
}

uint64_t mc_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned int a9, int a10, int a11, uint64_t a12, int a13, unsigned int a14)
{
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  char v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v91;
  uint64_t v92;

  v18 = *(_QWORD *)(a1 + 8);
  if (a9)
  {
    v19 = *(_DWORD *)(v18 + 2056);
    v20 = v19 == 1;
    v21 = v19 != 3;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v22 = 4u >> v21;
  v23 = 4u >> v20;
  v24 = a11 >> 16;
  v25 = v21 ^ 1;
  v26 = v20 ^ 1;
  v27 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
  v29 = *(_DWORD *)(a12 + 56);
  v28 = *(_DWORD *)(a12 + 60);
  if (v29 != *(_DWORD *)(v18 + 2048) || v28 != *(_DWORD *)(v18 + 2052))
  {
    v37 = (v24 << v25) + 16 * a7 * v22;
    v38 = (_DWORD *)(v18 + 16 * a13);
    v39 = 8 * v38[748] - 0x20000 + (int)v38[748] * (uint64_t)v37;
    v40 = v39 < 0;
    if (v39 < 0)
      v39 = -v39;
    v41 = (unint64_t)(v39 + 128) >> 8;
    if (v40)
      v42 = -(int)v41;
    else
      v42 = v41;
    v43 = v42 + 32;
    v44 = 8 * v38[750] - 0x20000 + (int)v38[750] * (uint64_t)(int)(((__int16)a11 << v26) + 16 * a8 * v23);
    v45 = v44 < 0;
    if (v44 < 0)
      v44 = -v44;
    v46 = (unint64_t)(v44 + 128) >> 8;
    if (v45)
      v47 = -(int)v46;
    else
      v47 = v46;
    v48 = v47 + 32;
    v49 = v43 >> 10;
    v50 = ((v47 + 32) >> 10);
    v51 = v22 * a5;
    v52 = v38[749];
    v53 = (int)(v43 + v52 * (v51 - 1)) >> 10;
    v54 = v23 * a6;
    v55 = v38[751];
    v56 = (int)(v47 + 32 + v55 * (v54 - 1)) >> 10;
    v57 = (v29 + v21) >> v21;
    v58 = (v28 + v20) >> v20;
    if (v42 >= 3040
      && (v47 >= 3040 ? (v59 = v53 + 5 <= v57) : (v59 = 0), v59 ? (v60 = v56 + 5 <= v58) : (v60 = 0), v60))
    {
      v61 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
      v62 = *(_QWORD *)(a12 + 8 * a9 + 16) + v27 * v50 + v49;
      v63 = *(_QWORD *)(v18 + 3144);
      v64 = v43 & 0x3FF;
      v65 = v48 & 0x3FF;
      if (a2)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v63 + 8 * a14 + 336))(a2, a4, v62, v61, v51, v54, v64, v65, __PAIR64__(v55, v52));
    }
    else
    {
      v91 = a2;
      v67 = v38 + 748;
      v89 = v38 + 751;
      v68 = a4;
      v61 = 320;
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 + 3144) + 664))((int)(v53 - v49 + 8), v56 - (int)v50 + 8, v57, v58, (int)(v49 - 3), (int)v50 - 3, a1 + 91200, 320, *(_QWORD *)(a12 + 8 * a9 + 16), v27);
      a4 = v68;
      v62 = a1 + 92163;
      v52 = v67[1];
      a2 = v91;
      v55 = *v89;
      v63 = *(_QWORD *)(v18 + 3144);
      v64 = v43 & 0x3FF;
      v65 = v48 & 0x3FF;
      if (v91)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v63 + 8 * a14 + 336))(a2, a4, v62, v61, v51, v54, v64, v65, __PAIR64__(v55, v52));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8 * a14 + 496))(a3, v62, v61, v51, v54, v64, v65);
  }
  v30 = (0xFu >> v25) & v24;
  if (v21)
    v31 = 4;
  else
    v31 = 3;
  v32 = (v24 >> v31) + v22 * a7;
  if (v20)
    v33 = 4;
  else
    v33 = 3;
  if (*(_QWORD *)(a12 + 16) == *(_QWORD *)(v18 + 2008))
  {
    v34 = 4 * *(_DWORD *)(v18 + 3280);
    v35 = 4 * *(_DWORD *)(v18 + 3284);
  }
  else
  {
    v34 = v29 + v21;
    v35 = v28 + v20;
  }
  v86 = a4;
  v69 = (0xFu >> v26) & a11;
  v70 = ((__int16)a11 >> v33) + v23 * a8;
  v71 = v35 >> v20;
  v72 = v34 >> v21;
  if (v30)
    v73 = 3;
  else
    v73 = 0;
  v88 = (0xFu >> v26) & a11;
  v87 = v30;
  if (v32 >= v73
    && (v69 ? (v74 = 3) : (v74 = 0),
        (int)v70 >= v74
     && (int)(v32 + v22 * a5 + 4 * (v30 != 0)) <= v72
     && (int)(v70 + v23 * a6 + 4 * (v69 != 0)) <= v71))
  {
    v92 = *(_QWORD *)(a12 + 8 * (a9 != 0) + 40);
    v83 = *(_QWORD *)(a12 + 8 * a9 + 16) + v27 * v70 + v32;
    v84 = *(_QWORD *)(v18 + 3144);
    if (a2)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v84 + 8 * a14 + 256))(a2, v86, v83, v92, v22 * a5, v23 * a6, v87 << v25, v88 << v26);
  }
  else
  {
    v75 = a1 + 91200;
    if (v30)
      v76 = 7;
    else
      v76 = 0;
    if (v69)
      v77 = 7;
    else
      v77 = 0;
    v78 = v71;
    if (v69)
      v79 = -3;
    else
      v79 = 0;
    v80 = a2;
    if (v69)
      v81 = 576;
    else
      v81 = 0;
    v92 = 192;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 + 3144) + 664))(v76 + v22 * a5, v77 + v23 * a6, v72, v78, v32 - v73, v79 + (int)v70, v75, 192, *(_QWORD *)(a12 + 8 * a9 + 16), v27);
    v82 = v73 | v81;
    a2 = v80;
    v83 = v75 + v82;
    v84 = *(_QWORD *)(v18 + 3144);
    if (v80)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v84 + 8 * a14 + 256))(a2, v86, v83, v92, v22 * a5, v23 * a6, v87 << v25, v88 << v26);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v84 + 8 * a14 + 416))(a3, v83, v92, v22 * a5, v23 * a6, v87 << v25, v88 << v26);
}

uint64_t warp_affine_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned int a6, uint64_t a7, int *a8)
{
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  int v36;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = result;
  v31 = *(_QWORD *)(result + 8);
  if (a6)
  {
    v9 = *(_DWORD *)(*(_QWORD *)(result + 8) + 2056);
    v26 = v9 == 1;
    v38 = v9 != 3;
    v10 = a5[1];
    if (!a5[1])
      return result;
  }
  else
  {
    v26 = 0;
    v38 = 0;
    v10 = a5[1];
    if (!a5[1])
      return result;
  }
  v11 = 0;
  v33 = *(_QWORD *)(v31 + 3144);
  v34 = (_QWORD *)(a7 + 8 * (a6 != 0) + 40);
  v32 = (_QWORD *)(a7 + 8 * a6 + 16);
  v36 = (*(_DWORD *)(a7 + 56) + v38) >> v38;
  v12 = *a5;
  v30 = result + 91200;
  v35 = (*(_DWORD *)(a7 + 60) + v26) >> v26;
  v27 = 8 * a4;
  do
  {
    if (v12)
    {
      v15 = 0;
      v28 = v11;
      v16 = 4 * *(int *)(v40 + 28) + (int)((v11 | 4) << v26);
      v39 = a8[1] + v16 * a8[4];
      v17 = a8[2] + a8[6] * v16;
      v18 = a3;
      do
      {
        v19 = 4 * *(int *)(v40 + 24) + (((int)v15 + 4) << v38);
        v20 = (v17 + v19 * a8[5]) >> v26;
        v21 = (unint64_t)((v39 + v19 * a8[3]) >> v38) >> 16;
        v22 = v20 >> 16;
        if ((int)v21 < 7 || (int)v21 + 8 > v36 || (int)v22 < 7 || (int)((v20 >> 16) + 8) > v35)
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v31 + 3144) + 664))(15, 15, v36, v35, (uint64_t)((v21 << 32) - 0x700000000) >> 32, (uint64_t)((v22 << 32) - 0x700000000) >> 32, v30, 32, *v32, *v34);
        if (a3)
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 656))(v18, a4);
        else
          result = (*(uint64_t (**)(unint64_t, uint64_t))(v33 + 648))(a2 + v15, a4);
        v15 += 8;
        v12 = *a5;
        v18 += 16;
      }
      while (v15 < (4u >> v38) * v12);
      v10 = a5[1];
      v11 = v28;
    }
    v13 = a2 + v27;
    if (a2)
      v14 = 0;
    else
      v14 = v27;
    a3 += 2 * v14;
    if (!a2)
      v13 = 0;
    a2 = v13;
    v11 += 8;
  }
  while (v11 < (4u >> v26) * v10);
  return result;
}

uint64_t obmc_0(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, int a6, int a7, uint64_t a8, int a9)
{
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v42;
  signed int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v70;

  v9 = a4;
  v10 = result;
  v11 = *(_DWORD *)(result + 24);
  v12 = *(_DWORD *)(result + 28);
  v13 = *(_QWORD *)(result + 8);
  v70 = result + 8 * (v12 & 0x1E) + 712;
  v66 = result + 9280;
  if (a5)
  {
    v14 = *(_DWORD *)(v13 + 2056);
    v15 = 4u >> (v14 != 3);
    v16 = 4u >> (v14 == 1);
    v18 = result + 16;
    v17 = *(_QWORD *)(result + 16);
    if (v12 <= *(_DWORD *)(v17 + 13872) || v15 * *a4 + v16 * a4[1] < 0x10)
    {
      v64 = v16;
      v65 = v15;
      if (v11 <= *(_DWORD *)(v17 + 13864) || a9 < 1)
        return result;
      goto LABEL_42;
    }
  }
  else
  {
    v18 = result + 16;
    v17 = *(_QWORD *)(result + 16);
    v15 = 4;
    if (v12 <= *(_DWORD *)(v17 + 13872))
    {
      v64 = 4;
      v65 = 4;
LABEL_31:
      if (v11 <= *(_DWORD *)(v17 + 13864) || a9 < 1)
        return result;
      goto LABEL_42;
    }
    v16 = 4;
  }
  v64 = v16;
  v65 = v15;
  if ((int)a8 < 1)
    goto LABEL_31;
  v59 = v18;
  v61 = a7;
  v20 = 0;
  v21 = 0;
  v63 = (a6 + 1);
  while (1)
  {
    v23 = v9[2] >= 4u ? 4 : v9[2];
    v24 = *(_DWORD *)(v10 + 24);
    if (v21 >= v23)
      break;
    v25 = *(_QWORD *)(v70 - 8);
    v26 = v24 + v20;
    v27 = v24 + v20 + 1;
    v28 = v25 + 12 * v27;
    v29 = 4 * *(unsigned __int8 *)(v28 + 10);
    v30 = *(char *)(v28 + 8);
    v31 = dav1d_block_dimensions[v29];
    if (v30 > 0)
    {
      v32 = 12 * v27;
      v33 = *v9;
      if (v31 < v33)
        v33 = v31;
      if (v31 >= 2)
        v34 = v33;
      else
        v34 = 2;
      v35 = v9[1];
      if (v35 >= 0x10)
        v35 = 16;
      v36 = v35 >> 1;
      v37 = (v34 * v65);
      v38 = a8;
      v39 = *(_QWORD *)(v10 + 656) + v63 + v20;
      mc_0(v10, v66, 0, v37, v34, (3 * (v35 >> 1) + 3) >> 2, v26, *(_DWORD *)(v10 + 28), a5, v58, *(_DWORD *)(v25 + v32), v13 + 280 * (v30 - 1) + 32, v30 - 1, dav1d_filter_2d[4 * *(unsigned __int8 *)(v39 + 384) + *(unsigned __int8 *)(v39 + 352)]);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v13 + 3144) + 640))(a2 + (v20 * v65), a3, v66, v37, v36 * v64);
      a8 = v38;
      v9 = a4;
      ++v21;
    }
    if (v31 <= 2)
      v22 = 2;
    else
      v22 = v31;
    v20 += v22;
    if (v20 >= (int)a8)
    {
      v24 = *(_DWORD *)(v10 + 24);
      break;
    }
  }
  a7 = v61;
  if (v24 > *(_DWORD *)(*(_QWORD *)v59 + 13864) && a9 >= 1)
  {
LABEL_42:
    v42 = 0;
    v43 = 0;
    v62 = (a7 + 1);
    while (1)
    {
      v51 = v9[3];
      if (v51 >= 4)
        v51 = 4;
      if (v43 >= (int)v51)
        break;
      v52 = *(_QWORD *)(v70 + 8 * (v42 + 1));
      v53 = *(_DWORD *)(v10 + 24);
      v54 = v52 + 12 * (v53 - 1);
      v55 = &dav1d_block_dimensions[4 * *(unsigned __int8 *)(v54 + 10)];
      v56 = *(char *)(v54 + 8);
      if (v56 > 0)
      {
        v44 = *v9;
        if (v44 >= 0x10)
          v44 = 16;
        v45 = v44 >> 1;
        v46 = v55[1];
        v47 = v9[1];
        if (v46 < v47)
          v47 = v46;
        if (v46 >= 2)
          v48 = v47;
        else
          v48 = 2;
        v49 = (v45 * v65);
        mc_0(v10, v66, 0, v49, v45, v48, v53, *(_DWORD *)(v10 + 28) + v42, a5, v58, *(_DWORD *)(v52 + 12 * (v53 - 1)), v13 + 280 * (v56 - 1) + 32, v56 - 1, dav1d_filter_2d[4 * *(unsigned __int8 *)(v10 + v62 + v42 + 416)+ *(unsigned __int8 *)(v10 + 384 + v62 + v42)]);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v13 + 3144) + 632))(a2 + (v42 * v64) * a3, a3, v66, v49, (v48 * v64));
        ++v43;
        if (v46 <= 2)
          v50 = 2;
        else
          v50 = v46;
        v42 += v50;
        if (v42 >= a9)
          return result;
      }
      else
      {
        if (v55[1] <= 2u)
          v57 = 2;
        else
          v57 = v55[1];
        v42 += v57;
        if (v42 >= a9)
          return result;
      }
    }
  }
  return result;
}

uint64_t dav1d_filter_sbrow_deblock_cols_8bpc(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(result + 3120) + 88816) & 1) != 0)
  {
    v2 = *(_QWORD *)(result + 24);
    if (*(_DWORD *)(v2 + 1232) || *(_DWORD *)(v2 + 1236))
    {
      v3 = 4 * a2 * *(_DWORD *)(result + 3304);
      v4 = *(_QWORD *)(result + 5128) + *(_QWORD *)(result + 2032) * v3;
      v5 = *(_QWORD *)(result + 5136);
      v6 = (*(_QWORD *)(result + 2040) * v3) >> (*(_DWORD *)(result + 2056) == 1);
      v7[0] = v4;
      v7[1] = v5 + v6;
      v7[2] = *(_QWORD *)(result + 5144) + v6;
      return dav1d_loopfilter_sbrow_cols_8bpc(result, v7, (unsigned __int16 *)(*(_QWORD *)(result + 4264)+ 1348* (a2 >> (*(_DWORD *)(*(_QWORD *)(result + 8) + 1012) == 0))* *(_DWORD *)(result + 3288)), a2, *(unsigned __int8 *)(*(_QWORD *)(result + 5112) + a2));
    }
  }
  return result;
}

_QWORD *dav1d_filter_sbrow_deblock_rows_8bpc(_QWORD *result, int a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[4];

  v3 = result;
  v10[3] = *MEMORY[0x1E0C80C00];
  v4 = 4 * a2 * *((_DWORD *)result + 826);
  v5 = result[641] + result[254] * v4;
  v6 = result[642];
  v7 = (result[255] * v4) >> (*((_DWORD *)result + 514) == 1);
  v10[0] = v5;
  v10[1] = v6 + v7;
  v10[2] = result[643] + v7;
  v8 = result[1];
  if ((*(_BYTE *)(result[390] + 88816) & 1) != 0)
  {
    v9 = result[3];
    if (*(_DWORD *)(v9 + 1232) || *(_DWORD *)(v9 + 1236))
    {
      result = (_QWORD *)dav1d_loopfilter_sbrow_rows_8bpc((uint64_t)result, v10, result[533] + 1348 * (a2 >> (*(_DWORD *)(v8 + 1012) == 0)) * *((_DWORD *)result + 822), a2);
      v8 = v3[1];
    }
  }
  if (*(_DWORD *)(v8 + 1068) || *((_DWORD *)v3 + 1298))
    return dav1d_copy_lpf_8bpc(v3, v10, a2);
  return result;
}

uint64_t dav1d_filter_sbrow_cdef_8bpc(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23[3];
  uint64_t v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 3120) + 88816) & 2) != 0)
  {
    v4 = result;
    v5 = *(_DWORD *)(v2 + 3304);
    v6 = v5 * a2;
    v7 = *(_DWORD *)(v2 + 2056) == 1;
    v8 = 4 * v5 * a2;
    v9 = *(_QWORD *)(v2 + 2032);
    v10 = *(_QWORD *)(v2 + 5128) + v9 * v8;
    v11 = *(_QWORD *)(v2 + 2040);
    v12 = (v11 * v8) >> v7;
    v13 = *(_QWORD *)(v2 + 5136) + v12;
    v24[0] = v10;
    v24[1] = v13;
    v14 = *(_QWORD *)(v2 + 5144) + v12;
    v24[2] = v14;
    v15 = *(_QWORD *)(v2 + 4264);
    v16 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 1012) == 0;
    v17 = *(_DWORD *)(v2 + 3288);
    v18 = v15 + 1348 * (a2 >> v16) * v17;
    if (a2)
    {
      v19 = (8 * v11) >> v7;
      v23[0] = v10 - 8 * v9;
      v23[1] = v13 - v19;
      v23[2] = v14 - v19;
      dav1d_cdef_brow_8bpc(result, v23, v15 + 1348 * ((a2 - 1) >> v16) * v17, v6 - 2, v6, 1, a2);
    }
    if (a2 + 1 >= *(_DWORD *)(v2 + 3296))
      v20 = 0;
    else
      v20 = -2;
    v21 = v6 + v5 + v20;
    if (v21 >= *(_DWORD *)(v2 + 3284))
      v22 = *(_DWORD *)(v2 + 3284);
    else
      v22 = v21;
    return dav1d_cdef_brow_8bpc(v4, v24, v18, v6, v22, 0, a2);
  }
  return result;
}

uint64_t dav1d_filter_sbrow_resize_8bpc(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 2056);
  v4 = 4 * a2 * *(_DWORD *)(a1 + 3304);
  v5 = *(_QWORD *)(a1 + 5160);
  v6 = *(_QWORD *)(a1 + 2304);
  v7 = *(_QWORD *)(a1 + 5168);
  v8 = 8 * (a2 != 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 3144) + 672))(*(_QWORD *)(a1 + 5152) + *(_QWORD *)(a1 + 2296) * v4 - *(_QWORD *)(a1 + 2296) * v8, *(_QWORD *)(a1 + 2296), *(_QWORD *)(a1 + 5128) + *(_QWORD *)(a1 + 2032) * v4 - *(_QWORD *)(a1 + 2032) * v8);
  if (v3)
  {
    v10 = (v6 * v4) >> (v3 == 1);
    v11 = v7 + v10;
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 3144) + 672))(v5 + v10 - *(_QWORD *)(a1 + 2304)
                                                                                * (v8 >> (*(_DWORD *)(a1 + 2056) == 1)));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 3144) + 672))(v11 - *(_QWORD *)(a1 + 2304)
                                                                                     * (v8 >> (*(_DWORD *)(a1 + 2056) == 1)));
  }
  return result;
}

uint64_t dav1d_filter_sbrow_lr_8bpc(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(result + 3120) + 88816) & 4) != 0)
  {
    v2 = 4 * a2 * *(_DWORD *)(result + 3304);
    v3 = *(_QWORD *)(result + 5152) + *(_QWORD *)(result + 2296) * v2;
    v4 = *(_QWORD *)(result + 5160);
    v5 = (*(_QWORD *)(result + 2304) * v2) >> (*(_DWORD *)(result + 2056) == 1);
    v6[0] = v3;
    v6[1] = v4 + v5;
    v6[2] = *(_QWORD *)(result + 5168) + v5;
    return dav1d_lr_sbrow_8bpc(result, v6, a2);
  }
  return result;
}

uint64_t dav1d_filter_sbrow_8bpc(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 3120) + 88816) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(v4 + 1232) || *(_DWORD *)(v4 + 1236))
    {
      v5 = 4 * a2 * *(_DWORD *)(a1 + 3304);
      v6 = *(_QWORD *)(a1 + 5128) + *(_QWORD *)(a1 + 2032) * v5;
      v7 = *(_QWORD *)(a1 + 5136);
      v8 = (*(_QWORD *)(a1 + 2040) * v5) >> (*(_DWORD *)(a1 + 2056) == 1);
      v14 = v6;
      v15 = v7 + v8;
      v16 = *(_QWORD *)(a1 + 5144) + v8;
      dav1d_loopfilter_sbrow_cols_8bpc(a1, &v14, (unsigned __int16 *)(*(_QWORD *)(a1 + 4264)+ 1348 * (a2 >> (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1012) == 0)) * *(_DWORD *)(a1 + 3288)), a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 5112) + a2));
    }
  }
  result = (uint64_t)dav1d_filter_sbrow_deblock_rows_8bpc((_QWORD *)a1, a2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1068))
    result = dav1d_filter_sbrow_cdef_8bpc(*(_QWORD *)(*(_QWORD *)(a1 + 3120) + 16), a2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 236) != *(_DWORD *)(*(_QWORD *)(a1 + 24) + 240))
    result = dav1d_filter_sbrow_resize_8bpc(a1, a2);
  if (*(_DWORD *)(a1 + 5192))
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 3120) + 88816) & 4) != 0)
    {
      v10 = 4 * a2 * *(_DWORD *)(a1 + 3304);
      v11 = *(_QWORD *)(a1 + 5152) + *(_QWORD *)(a1 + 2296) * v10;
      v12 = *(_QWORD *)(a1 + 5160);
      v13 = (*(_QWORD *)(a1 + 2304) * v10) >> (*(_DWORD *)(a1 + 2056) == 1);
      v14 = v11;
      v15 = v12 + v13;
      v16 = *(_QWORD *)(a1 + 5168) + v13;
      return dav1d_lr_sbrow_8bpc(a1, &v14, a2);
    }
  }
  return result;
}

void *dav1d_backup_ipred_edge_8bpc(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 28);
  v5 = (*(int *)(v3 + 3288) * (uint64_t)(v4 >> *(_DWORD *)(v3 + 3300))) << 7;
  v6 = *(int *)(v2 + 13864);
  result = memcpy((void *)(*(_QWORD *)(v3 + 3240) + v5 + 4 * (int)v6), (const void *)(*(_QWORD *)(v3 + 2008)+ 4 * v6+ *(_QWORD *)(v3 + 2032) * (4 * (*(_DWORD *)(v3 + 3304) + v4) - 1)), 4 * (*(_DWORD *)(v2 + 13868) - (int)v6));
  v8 = *(_DWORD *)(v3 + 2056);
  if (v8)
  {
    v9 = v8 == 1;
    v10 = v8 != 3;
    v11 = (4 * (int)v6) >> (v8 != 3);
    v12 = v11 + *(_QWORD *)(v3 + 2040) * (((4 * (*(_DWORD *)(v3 + 3304) + *(_DWORD *)(a1 + 28))) >> v9) - 1);
    v13 = v11 + v5;
    memcpy((void *)(*(_QWORD *)(v3 + 3248) + v13), (const void *)(*(_QWORD *)(v3 + 2016) + v12), (4 * (*(_DWORD *)(v2 + 13868) - (int)v6)) >> v10);
    return memcpy((void *)(*(_QWORD *)(v3 + 3256) + v13), (const void *)(*(_QWORD *)(v3 + 2024) + v12), (4 * (*(_DWORD *)(v2 + 13868) - (int)v6)) >> v10);
  }
  return result;
}

void *WebCore::AcceleratedEffectStack::bisoHeap(WebCore::AcceleratedEffectStack *this)
{
  return &WebCore::AcceleratedEffectStack::bisoHeap(void)::heap;
}

uint64_t WebCore::AcceleratedEffectStack::operator new(uint64_t this)
{
  if (this == 296)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::AcceleratedEffectStack::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_1E31F5B08;
  *(_BYTE *)(v3 + 20) = 0;
  *(_BYTE *)(v3 + 108) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 115) = 0;
  *(_DWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 123) = 0;
  *(_BYTE *)(v3 + 128) = 1;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 195) = 0;
  *(_DWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 203) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 211) = 0;
  *(_DWORD *)(v3 + 219) = 0;
  *(_DWORD *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 0;
  *(_BYTE *)(v3 + 228) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_QWORD *)(v3 + 183) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  v4 = v3;
  *a1 = v3;
  *(_DWORD *)(v3 + 16) = 1065353216;
  result = v3 + 16;
  *(_OWORD *)(result + 248) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  return result;
}

double WebCore::AcceleratedEffectStack::AcceleratedEffectStack(WebCore::AcceleratedEffectStack *this)
{
  double result;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E31F5B08;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 108) = 0;
  *((_DWORD *)this + 28) = 0;
  *(_DWORD *)((char *)this + 115) = 0;
  *((_DWORD *)this + 30) = 0;
  *(_DWORD *)((char *)this + 123) = 0;
  *((_BYTE *)this + 128) = 1;
  *((_DWORD *)this + 48) = 0;
  *(_DWORD *)((char *)this + 195) = 0;
  *((_DWORD *)this + 50) = 0;
  *(_DWORD *)((char *)this + 203) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_DWORD *)((char *)this + 211) = 0;
  *(_DWORD *)((char *)this + 219) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_BYTE *)this + 228) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_QWORD *)((char *)this + 183) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 4) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

{
  double result;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E31F5B08;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 108) = 0;
  *((_DWORD *)this + 28) = 0;
  *(_DWORD *)((char *)this + 115) = 0;
  *((_DWORD *)this + 30) = 0;
  *(_DWORD *)((char *)this + 123) = 0;
  *((_BYTE *)this + 128) = 1;
  *((_DWORD *)this + 48) = 0;
  *(_DWORD *)((char *)this + 195) = 0;
  *((_DWORD *)this + 50) = 0;
  *(_DWORD *)((char *)this + 203) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_DWORD *)((char *)this + 211) = 0;
  *(_DWORD *)((char *)this + 219) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_BYTE *)this + 228) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_QWORD *)((char *)this + 183) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 4) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

BOOL WebCore::AcceleratedEffectStack::hasEffects(WebCore::AcceleratedEffectStack *this)
{
  return *((_DWORD *)this + 69) || *((_DWORD *)this + 73) != 0;
}

char **WebCore::AcceleratedEffectStack::setEffects(char **result, unsigned int *a2)
{
  char **v3;
  char **v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _DWORD *v8;
  char ***v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char **v46;
  __int16 v47;
  _DWORD *v48;
  __int16 v49;

  v3 = result;
  v4 = result + 33;
  if (*((_DWORD *)result + 68))
  {
    v5 = *((unsigned int *)result + 69);
    if ((_DWORD)v5)
    {
      v6 = *v4;
      v7 = 8 * v5;
      do
      {
        v8 = *(_DWORD **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          if (v8[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 56))(v8);
          else
            --v8[2];
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
      *((_DWORD *)v3 + 69) = 0;
    }
    result = (char **)*v4;
    if (*v4)
    {
      v3[33] = 0;
      *((_DWORD *)v3 + 68) = 0;
      result = (char **)WTF::fastFree((WTF *)result, a2);
    }
  }
  v9 = (char ***)(v3 + 35);
  if (*((_DWORD *)v3 + 72))
  {
    v10 = *((unsigned int *)v3 + 73);
    if ((_DWORD)v10)
    {
      v11 = *v9;
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*((_DWORD *)v13 + 2) == 1)
            (*(void (**)(char *))(*(_QWORD *)v13 + 56))(v13);
          else
            --*((_DWORD *)v13 + 2);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
      *((_DWORD *)v3 + 73) = 0;
    }
    result = *v9;
    if (*v9)
    {
      v3[35] = 0;
      *((_DWORD *)v3 + 72) = 0;
      result = (char **)WTF::fastFree((WTF *)result, a2);
    }
  }
  v14 = a2[3];
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD *)a2;
    v16 = 8 * v14;
    do
    {
      v17 = *(_QWORD *)v15;
      v18 = *(unsigned __int16 *)(*(_QWORD *)v15 + 128);
      if ((v18 & 0x1000) != 0)
      {
        if ((v18 & (v18 - 1)) != 0)
        {
          v49 = v18 & 0xEFFF;
          v30 = bmalloc::api::isoAllocate();
          v31 = WebCore::AcceleratedEffect::AcceleratedEffect(v30, v17, &v49);
          v48 = (_DWORD *)v31;
          v32 = *((unsigned int *)v3 + 69);
          if ((_DWORD)v32 == *((_DWORD *)v3 + 68))
          {
            v33 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v32 + 1, (unint64_t)&v48);
            v32 = *((unsigned int *)v3 + 69);
            v34 = v3[33];
            v35 = *(_QWORD *)v33;
            *(_QWORD *)v33 = 0;
            *(_QWORD *)&v34[8 * v32] = v35;
          }
          else
          {
            v37 = *v4;
            v48 = 0;
            *(_QWORD *)&v37[8 * v32] = v31;
          }
          *((_DWORD *)v3 + 69) = v32 + 1;
          v38 = v48;
          v48 = 0;
          if (v38)
          {
            if (v38[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 56))(v38);
            else
              --v38[2];
          }
          v47 = 4096;
          v39 = *(_QWORD *)v15;
          v40 = bmalloc::api::isoAllocate();
          v41 = WebCore::AcceleratedEffect::AcceleratedEffect(v40, v39, &v47);
          v48 = (_DWORD *)v41;
          v42 = *((unsigned int *)v3 + 73);
          if ((_DWORD)v42 == *((_DWORD *)v3 + 72))
          {
            v43 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 35, v42 + 1, (unint64_t)&v48);
            v42 = *((unsigned int *)v3 + 73);
            v44 = v3[35];
            v45 = *(_QWORD *)v43;
            *(_QWORD *)v43 = 0;
            *(_QWORD *)&v44[8 * v42] = v45;
          }
          else
          {
            v46 = *v9;
            v48 = 0;
            v46[v42] = (char *)v41;
          }
          *((_DWORD *)v3 + 73) = v42 + 1;
          result = (char **)v48;
          v48 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              result = (char **)(*((uint64_t (**)(char **))*result + 7))(result);
            else
              --*((_DWORD *)result + 2);
          }
        }
        else
        {
          v24 = *((unsigned int *)v3 + 73);
          if ((_DWORD)v24 == *((_DWORD *)v3 + 72))
          {
            result = (char **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 35, v24 + 1, v15);
            v25 = *((unsigned int *)v3 + 73);
            v26 = v25 + 1;
            v27 = v3[35];
            v28 = *result;
            *((_DWORD *)v28 + 2) = *((_DWORD *)*result + 2) + 1;
            *(_QWORD *)&v27[8 * v25] = v28;
          }
          else
          {
            v26 = v24 + 1;
            v36 = v3[35];
            ++*(_DWORD *)(v17 + 8);
            *(_QWORD *)&v36[8 * v24] = v17;
          }
          *((_DWORD *)v3 + 73) = v26;
        }
      }
      else
      {
        v19 = *((unsigned int *)v3 + 69);
        if ((_DWORD)v19 == *((_DWORD *)v3 + 68))
        {
          result = (char **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v19 + 1, v15);
          v20 = *((unsigned int *)v3 + 69);
          v21 = v20 + 1;
          v22 = v3[33];
          v23 = *result;
          *((_DWORD *)v23 + 2) = *((_DWORD *)*result + 2) + 1;
          *(_QWORD *)&v22[8 * v20] = v23;
        }
        else
        {
          v21 = v19 + 1;
          v29 = v3[33];
          ++*(_DWORD *)(v17 + 8);
          *(_QWORD *)&v29[8 * v19] = v17;
        }
        *((_DWORD *)v3 + 69) = v21;
      }
      v15 += 8;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

void sub_1946726DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  if (a11)
  {
    if (a11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a11 + 56))(a11);
    else
      --a11[2];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AcceleratedEffectStack::setBaseValues(uint64_t a1, uint64_t a2)
{
  return WebCore::AcceleratedEffectValues::operator=(a1 + 16, a2);
}

uint64_t WebCore::AcceleratedEffectValues::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  unsigned int **v51;
  unsigned int **v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int **v59;
  unsigned int **v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int **v65;
  unsigned int **v66;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  if (a1 != a2)
  {
    if (*(_BYTE *)(a1 + 100) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 96));
    }
    v8 = *(unsigned __int8 *)(a2 + 100);
    *(_BYTE *)(a1 + 100) = v8;
    *(_BYTE *)(a1 + 101) = *(_BYTE *)(a2 + 101);
    if (v8 - 2 < 9)
    {
      v9 = *(unsigned __int8 *)(a2 + 102);
      *(_BYTE *)(a1 + 102) = v9;
      if (v9)
      {
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
        goto LABEL_6;
      }
      v41 = *(_DWORD *)(a2 + 96);
      goto LABEL_60;
    }
    if (v8 <= 0xD)
    {
      if (((1 << v8) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 96) = 0;
      }
      else if (v8 == 11)
      {
        v41 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)(a2 + 96) = 0;
LABEL_60:
        *(_DWORD *)(a1 + 96) = v41;
      }
    }
LABEL_6:
    *(_BYTE *)(a2 + 100) = 0;
    if (*(_BYTE *)(a1 + 108) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 104));
    }
    v10 = *(unsigned __int8 *)(a2 + 108);
    *(_BYTE *)(a1 + 108) = v10;
    *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
    if (v10 - 2 >= 9)
    {
      if (v10 > 0xD)
        goto LABEL_10;
      if (((1 << v10) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 104) = 0;
        goto LABEL_10;
      }
      if (v10 != 11)
        goto LABEL_10;
      v42 = *(_DWORD *)(a2 + 104);
      *(_DWORD *)(a2 + 104) = 0;
    }
    else
    {
      v11 = *(unsigned __int8 *)(a2 + 110);
      *(_BYTE *)(a1 + 110) = v11;
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
LABEL_10:
        *(_BYTE *)(a2 + 108) = 0;
        goto LABEL_11;
      }
      v42 = *(_DWORD *)(a2 + 104);
    }
    *(_DWORD *)(a1 + 104) = v42;
    goto LABEL_10;
  }
LABEL_11:
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v12 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v12)
  {
    v48 = *(_DWORD ***)(a1 + 120);
    v49 = 8 * v12;
    do
    {
      v50 = *v48;
      *v48 = 0;
      if (v50)
      {
        if (v50[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
        else
          --v50[2];
      }
      ++v48;
      v49 -= 8;
    }
    while (v49);
  }
  v13 = *(WTF **)(a1 + 120);
  if (v13)
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    WTF::fastFree(v13, (void *)a2);
  }
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 120) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 128) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(a1 + 132) = v14;
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v16 = *(_DWORD **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v15;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v18 = *(_DWORD **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v17;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v20 = *(_DWORD **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v19;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v22 = *(_DWORD **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v21;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  if (a1 != a2)
  {
    if (*(_BYTE *)(a1 + 172) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 168));
    }
    v23 = *(unsigned __int8 *)(a2 + 172);
    *(_BYTE *)(a1 + 172) = v23;
    *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
    if (v23 - 2 < 9)
    {
      v24 = *(unsigned __int8 *)(a2 + 174);
      *(_BYTE *)(a1 + 174) = v24;
      if (v24)
      {
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
        goto LABEL_31;
      }
      v43 = *(_DWORD *)(a2 + 168);
      goto LABEL_64;
    }
    if (v23 <= 0xD)
    {
      if (((1 << v23) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 168) = 0;
      }
      else if (v23 == 11)
      {
        v43 = *(_DWORD *)(a2 + 168);
        *(_DWORD *)(a2 + 168) = 0;
LABEL_64:
        *(_DWORD *)(a1 + 168) = v43;
      }
    }
LABEL_31:
    *(_BYTE *)(a2 + 172) = 0;
    if (*(_BYTE *)(a1 + 180) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 176));
    }
    v25 = *(unsigned __int8 *)(a2 + 180);
    *(_BYTE *)(a1 + 180) = v25;
    *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
    if (v25 - 2 < 9)
    {
      v26 = *(unsigned __int8 *)(a2 + 182);
      *(_BYTE *)(a1 + 182) = v26;
      if (v26)
      {
        *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
        goto LABEL_35;
      }
      v44 = *(_DWORD *)(a2 + 176);
      goto LABEL_66;
    }
    if (v25 <= 0xD)
    {
      if (((1 << v25) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 176) = 0;
      }
      else if (v25 == 11)
      {
        v44 = *(_DWORD *)(a2 + 176);
        *(_DWORD *)(a2 + 176) = 0;
LABEL_66:
        *(_DWORD *)(a1 + 176) = v44;
      }
    }
LABEL_35:
    *(_BYTE *)(a2 + 180) = 0;
    if (*(_BYTE *)(a1 + 188) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 184));
    }
    v27 = *(unsigned __int8 *)(a2 + 188);
    *(_BYTE *)(a1 + 188) = v27;
    *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
    if (v27 - 2 < 9)
    {
      v28 = *(unsigned __int8 *)(a2 + 190);
      *(_BYTE *)(a1 + 190) = v28;
      if (v28)
      {
        *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
        goto LABEL_39;
      }
      v45 = *(_DWORD *)(a2 + 184);
      goto LABEL_68;
    }
    if (v27 <= 0xD)
    {
      if (((1 << v27) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 184) = 0;
      }
      else if (v27 == 11)
      {
        v45 = *(_DWORD *)(a2 + 184);
        *(_DWORD *)(a2 + 184) = 0;
LABEL_68:
        *(_DWORD *)(a1 + 184) = v45;
      }
    }
LABEL_39:
    *(_BYTE *)(a2 + 188) = 0;
    if (*(_BYTE *)(a1 + 196) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 192));
    }
    v29 = *(unsigned __int8 *)(a2 + 196);
    *(_BYTE *)(a1 + 196) = v29;
    *(_BYTE *)(a1 + 197) = *(_BYTE *)(a2 + 197);
    if (v29 - 2 < 9)
    {
      v30 = *(unsigned __int8 *)(a2 + 198);
      *(_BYTE *)(a1 + 198) = v30;
      if (v30)
      {
        *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
        goto LABEL_43;
      }
      v46 = *(_DWORD *)(a2 + 192);
      goto LABEL_70;
    }
    if (v29 <= 0xD)
    {
      if (((1 << v29) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 192) = 0;
      }
      else if (v29 == 11)
      {
        v46 = *(_DWORD *)(a2 + 192);
        *(_DWORD *)(a2 + 192) = 0;
LABEL_70:
        *(_DWORD *)(a1 + 192) = v46;
      }
    }
LABEL_43:
    *(_BYTE *)(a2 + 196) = 0;
    if (*(_BYTE *)(a1 + 204) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 200));
    }
    v31 = *(unsigned __int8 *)(a2 + 204);
    *(_BYTE *)(a1 + 204) = v31;
    *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
    if (v31 - 2 >= 9)
    {
      if (v31 > 0xD)
        goto LABEL_47;
      if (((1 << v31) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 200) = 0;
        goto LABEL_47;
      }
      if (v31 != 11)
        goto LABEL_47;
      v47 = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a2 + 200) = 0;
    }
    else
    {
      v32 = *(unsigned __int8 *)(a2 + 206);
      *(_BYTE *)(a1 + 206) = v32;
      if (v32)
      {
        *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
LABEL_47:
        *(_BYTE *)(a2 + 204) = 0;
        goto LABEL_48;
      }
      v47 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(a1 + 200) = v47;
    goto LABEL_47;
  }
LABEL_48:
  v33 = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v33;
  v34 = *(unsigned int *)(a1 + 228);
  if ((_DWORD)v34)
  {
    v51 = *(unsigned int ***)(a1 + 216);
    v52 = &v51[v34];
    do
    {
      v53 = *v51;
      *v51 = 0;
      if (v53)
      {
        v54 = v53 + 2;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          atomic_store(1u, v53 + 2);
          v57 = v51;
          v58 = v52;
          (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
          v52 = v58;
          v51 = v57;
        }
      }
      ++v51;
    }
    while (v51 != v52);
  }
  v35 = *(WTF **)(a1 + 216);
  if (v35)
  {
    *(_QWORD *)(a1 + 216) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    WTF::fastFree(v35, (void *)a2);
  }
  v36 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 216) = v36;
  LODWORD(v36) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(_DWORD *)(a1 + 224) = v36;
  LODWORD(v36) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a2 + 228) = 0;
  *(_DWORD *)(a1 + 228) = v36;
  v37 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v37)
  {
    v59 = *(unsigned int ***)(a1 + 232);
    v60 = &v59[v37];
    do
    {
      v61 = *v59;
      *v59 = 0;
      if (v61)
      {
        v62 = v61 + 2;
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          atomic_store(1u, v61 + 2);
          v65 = v59;
          v66 = v60;
          (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
          v60 = v66;
          v59 = v65;
        }
      }
      ++v59;
    }
    while (v59 != v60);
  }
  v38 = *(WTF **)(a1 + 232);
  if (v38)
  {
    *(_QWORD *)(a1 + 232) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    WTF::fastFree(v38, (void *)a2);
  }
  v39 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a1 + 232) = v39;
  LODWORD(v39) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = 0;
  *(_DWORD *)(a1 + 240) = v39;
  LODWORD(v39) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(_DWORD *)(a1 + 244) = v39;
  return a1;
}

void WebCore::AcceleratedEffectStack::~AcceleratedEffectStack(WebCore::AcceleratedEffectStack *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::AcceleratedEffectStack::~AcceleratedEffectStack(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;

  *(_QWORD *)this = &off_1E31F5B08;
  v3 = *((unsigned int *)this + 73);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 35);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 56))(v6);
        else
          --v6[2];
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 35);
  if (v7)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 69);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD **)*((_QWORD *)this + 33);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 56))(v11);
        else
          --v11[2];
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v12 = (WTF *)*((_QWORD *)this + 33);
  if (v12)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v12, a2);
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectStack *)((char *)this + 16), a2);
}

void WebCore::AcceleratedEffectValues::~AcceleratedEffectValues(WebCore::AcceleratedEffectValues *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int **v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int **v22;
  unsigned int **v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int **v30;
  unsigned int **v31;

  v3 = *((unsigned int *)this + 61);
  if ((_DWORD)v3)
  {
    v16 = (unsigned int **)*((_QWORD *)this + 29);
    v17 = &v16[v3];
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v18 + 2);
          v22 = v16;
          v23 = v17;
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
          v17 = v23;
          v16 = v22;
        }
      }
      ++v16;
    }
    while (v16 != v17);
  }
  v4 = (WTF *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 57);
  if ((_DWORD)v5)
  {
    v24 = (unsigned int **)*((_QWORD *)this + 27);
    v25 = &v24[v5];
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          v30 = v24;
          v31 = v25;
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          v25 = v31;
          v24 = v30;
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v6 = (WTF *)*((_QWORD *)this + 27);
  if (v6)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  if (*((_BYTE *)this + 204) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 50));
  }
  if (*((_BYTE *)this + 196) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 48));
  }
  if (*((_BYTE *)this + 188) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 46));
  }
  if (*((_BYTE *)this + 180) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 44));
  }
  if (*((_BYTE *)this + 172) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 42));
  }
  v7 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = (_DWORD *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((unsigned int *)this + 33);
  if ((_DWORD)v11)
  {
    v13 = (_DWORD **)*((_QWORD *)this + 15);
    v14 = 8 * v11;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v12 = (WTF *)*((_QWORD *)this + 15);
  if (v12)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v12, a2);
  }
  if (*((_BYTE *)this + 108) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 26));
  }
  if (*((_BYTE *)this + 100) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 24));
  }
}

void WebCore::AccessibilityMediaObject::~AccessibilityMediaObject(WebCore::AccessibilityMediaObject *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::AccessibilityRenderObject::~AccessibilityRenderObject(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::AccessibilityMediaObject::computeAccessibilityIsIgnored(WebCore::AccessibilityMediaObject *this)
{
  return WebCore::AccessibilityObject::defaultObjectInclusion(this) == 1;
}

void WebCore::AccessibilityMediaObject::stringValue(WebCore::AccessibilityMediaObject *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  float v8;

  v4 = *((_QWORD *)this + 31);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (*(_BYTE *)(v5 + 46) == 49)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v5 + 45) & 1) != 0)
        goto LABEL_11;
      v6 = *(_QWORD *)(v5 + 24);
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 30);
    if (!v6)
      goto LABEL_11;
  }
  v7 = *(_WORD **)(v6 + 8);
  if (v7 && (v7[14] & 8) != 0 && (*(unsigned int (**)(_WORD *))(*(_QWORD *)v7 + 824))(v7))
  {
    v8 = (*(double (**)(_WORD *))(*(_QWORD *)v7 + 1360))(v7);
    WebCore::localizedMediaTimeDescription(v8, (uint64_t)a2);
    return;
  }
LABEL_11:
  WebCore::AccessibilityRenderObject::stringValue(this, a2);
}

uint64_t WebCore::AccessibilityMediaObject::increment(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  double v5;
  __n128 v6;
  double v7;

  v1 = *(_QWORD *)(this + 248);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v2 + 45) & 1) != 0)
        return this;
      v3 = *(_QWORD *)(v2 + 24);
    }
  }
  else
  {
    v3 = *(_QWORD *)(this + 240);
    if (!v3)
      return this;
  }
  v4 = *(_WORD **)(v3 + 8);
  if (v4)
  {
    if ((v4[14] & 8) != 0)
    {
      this = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 824))(v4);
      if ((_DWORD)this)
      {
        v5 = (*(double (**)(_WORD *))(*(_QWORD *)v4 + 1360))(v4);
        v6.n128_f64[0] = (*(double (**)(_WORD *))(*(_QWORD *)v4 + 1376))(v4);
        v7 = v5 + ceil(v6.n128_f64[0] * 0.05);
        if (v6.n128_f64[0] >= v7)
          v6.n128_f64[0] = v7;
        return (*(uint64_t (**)(_WORD *, __n128))(*(_QWORD *)v4 + 1368))(v4, v6);
      }
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityMediaObject::decrement(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  double v5;
  __n128 v6;

  v1 = *(_QWORD *)(this + 248);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v2 + 45) & 1) != 0)
        return this;
      v3 = *(_QWORD *)(v2 + 24);
    }
  }
  else
  {
    v3 = *(_QWORD *)(this + 240);
    if (!v3)
      return this;
  }
  v4 = *(_WORD **)(v3 + 8);
  if (v4)
  {
    if ((v4[14] & 8) != 0)
    {
      this = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v4 + 824))(v4);
      if ((_DWORD)this)
      {
        v5 = (*(double (**)(_WORD *))(*(_QWORD *)v4 + 1360))(v4);
        v6.n128_f64[0] = v5 - ceil((*(double (**)(_WORD *))(*(_QWORD *)v4 + 1376))(v4) * 0.05);
        if (v6.n128_f64[0] < 0.0)
          v6.n128_f64[0] = 0.0;
        return (*(uint64_t (**)(_WORD *, __n128))(*(_QWORD *)v4 + 1368))(v4, v6);
      }
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityMediaObject::press(WebCore::AccessibilityMediaObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::HTMLMediaElement *v4;
  uint64_t result;

  v1 = *((_QWORD *)this + 31);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0)
  {
    v3 = *((_QWORD *)this + 30);
    if (v3)
      goto LABEL_7;
    return 0;
  }
  if (*(_BYTE *)(v2 + 46) == 49)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v2 + 45) & 1) != 0)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
LABEL_7:
  v4 = *(WebCore::HTMLMediaElement **)(v3 + 8);
  if (!v4 || (*((_WORD *)v4 + 14) & 8) == 0)
    return 0;
  result = (*(uint64_t (**)(WebCore::HTMLMediaElement *))(*(_QWORD *)v4 + 824))(v4);
  if ((_DWORD)result)
  {
    WebCore::HTMLMediaElement::togglePlayState(v4);
    return 1;
  }
  return result;
}

uint64_t WebCore::AccessibilityMediaObject::isAutoplayEnabled(WebCore::AccessibilityMediaObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v2 + 45) & 1) != 0)
        return 0;
      v3 = *(_QWORD *)(v2 + 24);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (!v3)
      return 0;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4 || (*(_WORD *)(v4 + 28) & 8) == 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 824))(v4);
  if ((_DWORD)result)
  {
    v6 = *(_QWORD *)(v4 + 104);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) == 0)
      {
        v8 = (uint64_t *)(v6 + 32);
        LODWORD(v9) = v7 >> 5;
        if (!(_DWORD)v9)
          return 0;
        goto LABEL_17;
      }
      v8 = *(uint64_t **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
      {
LABEL_17:
        v9 = v9;
        while (1)
        {
          v10 = *v8;
          if (*v8 == WebCore::HTMLNames::autoplayAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::autoplayAttr + 32))
          {
            break;
          }
          result = 0;
          v8 += 2;
          if (!--v9)
            return result;
        }
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unsigned int *WebCore::AccessibilityMediaObject::enterFullscreen(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *((_QWORD *)this + 31);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    if (*(_BYTE *)(v2 + 46) == 49)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40);
    }
    else
    {
      if ((*(_BYTE *)(v2 + 45) & 1) != 0)
        return this;
      v3 = *(_QWORD *)(v2 + 24);
    }
  }
  else
  {
    v3 = *((_QWORD *)this + 30);
    if (!v3)
      return this;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (v4
    && (*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
  {
    *(_DWORD *)(v4 + 24) += 2;
    this = (unsigned int *)WebCore::HTMLMediaElement::enterFullscreen((WTF::StringImpl *)v4, 1u);
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::AccessibilityObject::processID(WebCore::AccessibilityObject *this)
{
  {
    if (byte_1ECE90D38)
      return WebCore::presentingApplicationPIDOverride(void)::pid;
  }
  else
  {
    LOBYTE(WebCore::presentingApplicationPIDOverride(void)::pid) = 0;
    byte_1ECE90D38 = 0;
  }
  return getpid();
}

BOOL WebCore::AccessibilityRenderObject::isDetached(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 31);
  if (v1 && *(_QWORD *)(v1 + 8))
    return 0;
  v3 = *((_QWORD *)this + 30);
  return !v3 || *(_QWORD *)(v3 + 8) == 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityObject(WebCore::AccessibilityObject *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityRenderObject::isAccessibilityRenderObject(WebCore::AccessibilityRenderObject *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityTableInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityARIAGridRowInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityARIAGridCellInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAXIsolatedObjectInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAXRemoteFrame(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isList(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isTable(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isExposable(WebCore::AccessibilityObject *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityObject::supportsSelectedRows(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::columns(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::AccessibilityObject::rows(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::AccessibilityObject::columnCount(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::rowCount(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::cells(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::AccessibilityObject::cellForColumnAndRow(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::columnHeaders(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::AccessibilityObject::rowHeaders(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::AccessibilityObject::visibleRows(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::AccessibilityObject::headerContainer(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::axColumnCount(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::axRowCount(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isTableCell(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isExposedTableCell(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AXCoreObject::isColumnHeader(WebCore::AXCoreObject *this)
{
  return 0;
}

uint64_t WebCore::AXCoreObject::isRowHeader(WebCore::AXCoreObject *this)
{
  return 0;
}

uint64_t WebCore::AXCoreObject::rowGroupAncestorID(WebCore::AXCoreObject *this)
{
  return 0;
}

_QWORD *WebCore::AccessibilityObject::cellScope@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::scopeAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

uint64_t WebCore::AccessibilityObject::rowIndexRange(WebCore::AccessibilityObject *this)
{
  return 0x100000000;
}

uint64_t WebCore::AccessibilityObject::columnIndexRange(WebCore::AccessibilityObject *this)
{
  return 0x100000000;
}

uint64_t WebCore::AccessibilityObject::axColumnIndex(WebCore::AccessibilityObject *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::AccessibilityObject::axRowIndex(WebCore::AccessibilityObject *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t WebCore::AccessibilityObject::isTableColumn(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::columnIndex(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::columnHeader(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isTableRow(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::rowIndex(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AXCoreObject::rowHeader(WebCore::AXCoreObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isARIATreeGridRow(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::disclosedByRow(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::incrementButton(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::decrementButton(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMockObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::remoteFramePlatformElement(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AccessibilityObject::hasRemoteFrameChild(WebCore::AccessibilityObject *this)
{
  return 0;
}

BOOL WebCore::AccessibilityObject::isVisible(WebCore::AccessibilityObject *this)
{
  WebCore::AccessibilityObject *v2;

  if (((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 552))(this) & 1) != 0)
    return !WebCore::AccessibilityObject::isDOMHidden(this);
  v2 = this;
  while (!WebCore::AccessibilityObject::isARIAHidden(v2))
  {
    v2 = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)v2 + 1232))(v2);
    if (!v2)
      return !WebCore::AccessibilityObject::isDOMHidden(this);
  }
  return 0;
}

uint64_t WebCore::AccessibilityObject::isSelectedOptionActive(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::canSetSelectedChildren(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityRenderObject::renderer(WebCore::AccessibilityRenderObject *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

_QWORD *WebCore::AccessibilityObject::brailleLabel@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_braillelabelAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

_QWORD *WebCore::AccessibilityObject::brailleRoleDescription@<X0>(WebCore::AccessibilityObject *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _DWORD *v4;

  result = WebCore::AccessibilityObject::getAttribute(this, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::aria_brailleroledescriptionAttr);
  v4 = (_DWORD *)*result;
  if (*result)
    *v4 += 2;
  *a2 = v4;
  return result;
}

void WebCore::AccessibilityObject::imageOverlayElements(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t WebCore::AccessibilityObject::scrollBar()
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::roleValue(WebCore::AccessibilityObject *this)
{
  return *((unsigned __int8 *)this + 57);
}

unint64_t WebCore::AccessibilityObject::size(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1512))(this);
  v4 = v1 & 0x3F;
  if ((int)v1 <= 0)
    v4 = -(-(int)v1 & 0x3F);
  if (SHIDWORD(v1) <= 0)
    v5 = -(-HIDWORD(v1) & 0x3F);
  else
    v5 = BYTE4(v1) & 0x3F;
  v6 = v4 + v2;
  if (__OFADD__(v4, v2))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  v7 = v5 + v3;
  if (__OFADD__(v5, v3))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  return (v6 / 64
                      - ((int)(v4 + 32) >> 6)
                      + ((int)(v6 - (((v5 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v7 / 64 - ((int)(v5 + 32) >> 6) + ((int)(v7 - (v6 & 0xFFFFFFC0) + 32) >> 6)) << 32);
}

uint64_t WebCore::AccessibilityObject::platformWidget(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityRenderObject::isPlugin(WebCore::AccessibilityRenderObject *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::AccessibilityRenderObject *))(*(_QWORD *)this + 1672))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t WebCore::AccessibilityObject::scrollView(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::setValueIgnoringResult(WebCore::AccessibilityObject *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(WebCore::AccessibilityObject *, const WTF::String *))(*(_QWORD *)this + 1784))(this, a2);
}

uint64_t WebCore::AccessibilityObject::setValue(WebCore::AccessibilityObject *this, float a2)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::setValueIgnoringResult(WebCore::AccessibilityObject *this, float a2)
{
  return (*(uint64_t (**)(WebCore::AccessibilityObject *, float))(*(_QWORD *)this + 1816))(this, a2);
}

uint64_t WebCore::AccessibilityObject::performDismissActionIgnoringResult(WebCore::AccessibilityObject *this)
{
  return (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1856))(this);
}

uint64_t WebCore::AccessibilityObject::isDetachedFromParent(WebCore::AccessibilityObject *this)
{
  return 0;
}

unsigned int *WebCore::AccessibilityObject::previousLineStartPosition@<X0>(VisiblePosition *a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  WebCore::Node **v5;
  int v6;
  BOOL v7;
  WebCore::Node *v8;
  _BYTE *v9;
  char v10;
  unsigned int *result;
  WebCore::Node *v12;
  _QWORD v13[2];
  WebCore::Node *v14;
  _BYTE v15[16];
  unsigned __int8 v16;

  WebCore::AccessibilityObject::previousLineStartPositionInternal(a1, (uint64_t)&v14);
  v5 = &v12;
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v6 = v16;
  v7 = v16 == 0;
  if (v16)
    v5 = &v14;
  v8 = *v5;
  *v5 = 0;
  v9 = v15;
  if (v7)
    v9 = v13;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)v9;
  *(_BYTE *)(a2 + 12) = v9[4];
  v10 = v15[8];
  if (v7)
    v10 = 1;
  *(_QWORD *)a2 = v8;
  *(_BYTE *)(a2 + 16) = v10;
  result = (unsigned int *)v12;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      {
        result = WebCore::Node::removedLastRef(v12, v4);
        v6 = v16;
      }
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  if (v6)
  {
    result = (unsigned int *)v14;
    v14 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

WebCore::AccessibilityObject *WebCore::AccessibilityObject::liveRegionAncestor(WebCore::AccessibilityObject *this, int a2)
{
  do
  {
    if (WebCore::AXCoreObject::supportsLiveRegion(this, a2))
      break;
    this = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
  }
  while (this);
  return this;
}

uint64_t WebCore::AccessibilityObject::isMathElement(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathFraction(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathFenced(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathSubscriptSuperscript(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathRow(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathUnderOver(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathRoot(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathSquareRoot(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathTable(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathTableRow(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathTableCell(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathMultiscript(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathToken(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::mathRadicand(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t WebCore::AccessibilityObject::mathRootIndexObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::mathUnderObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::mathOverObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::mathNumeratorObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::mathDenominatorObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::mathBaseObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::mathSubscriptObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::mathSuperscriptObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::mathFencedOpenString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::AccessibilityObject::mathFencedCloseString(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::AccessibilityObject::mathLineThickness(WebCore::AccessibilityObject *this)
{
  return 0;
}

BOOL WebCore::AccessibilityObject::hasApplePDFAnnotationAttribute(WebCore::AccessibilityObject *this)
{
  return WebCore::AccessibilityObject::hasAttribute(this, &WebCore::HTMLNames::x_apple_pdf_annotationAttr);
}

uint64_t WebCore::AccessibilityObject::focusableAncestor(WebCore::AccessibilityObject *this)
{
  uint64_t (*i)(void);
  uint64_t v2;
  uint64_t v3;

  for (i = *(uint64_t (**)(void))(*(_QWORD *)this + 1232); ; i = *(uint64_t (**)(void))(*(_QWORD *)v3 + 1232))
  {
    v2 = i();
    v3 = v2;
    if (!v2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 800))(v2) & 1) != 0)
      break;
  }
  return v3;
}

uint64_t WebCore::AccessibilityObject::editableAncestor(WebCore::AccessibilityObject *this)
{
  uint64_t i;
  int v2;

  for (i = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
        i;
        i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 1232))(i))
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 1456))(i);
    if ((v2 - 101) <= 0x19 && ((1 << (v2 - 101)) & 0x3000001) != 0 || v2 == 19)
      break;
  }
  return i;
}

uint64_t WebCore::AccessibilityObject::highestEditableAncestor(WebCore::AccessibilityObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 2592))(this);
  if (!v1)
    return 0;
  v2 = 0;
  while (2)
  {
    v3 = v1;
    while (v3 == v2)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1232))(v2);
      if (v4)
      {
        v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2592))(v4);
        if (v3)
          continue;
      }
      return v2;
    }
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 2592))(v3);
    v2 = v3;
    if (v1)
      continue;
    break;
  }
  return v3;
}

WebCore::AccessibilityObject *WebCore::AccessibilityObject::exposedTableAncestor(WebCore::AccessibilityObject *this, char a2)
{
  if ((a2 & 1) != 0)
    goto LABEL_3;
  do
  {
    this = (WebCore::AccessibilityObject *)(*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 1232))(this);
    if (!this)
      break;
LABEL_3:
    ;
  }
  while (!(*(unsigned int (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 176))(this)
       || ((*(uint64_t (**)(WebCore::AccessibilityObject *))(*(_QWORD *)this + 184))(this) & 1) == 0);
  return this;
}

uint64_t WebCore::AccessibilityNodeObject::isAccessibilityNodeObject(WebCore::AccessibilityNodeObject *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityScrollbar(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityScrollViewInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilitySVGRoot(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityTableColumnInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityLabelInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityListBoxInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAccessibilityListBoxOptionInstance(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAttachmentElement(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isSliderThumb(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isUnorderedList(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isOrderedList(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isDescriptionList(WebCore::AccessibilityObject *this)
{
  return 0;
}

void WebCore::AccessibilityObject::cellSlots(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::AccessibilityObject::isImageMapLink(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMenuList(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMenuListPopup(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMenuListOption(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isNativeSpinButton(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isSpinButtonPart(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isIncrementor(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityMediaObject::isMediaObject(WebCore::AccessibilityMediaObject *this)
{
  return 1;
}

uint64_t WebCore::AccessibilityObject::isCollapsed(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityNodeObject::ariaRoleAttribute(WebCore::AccessibilityNodeObject *this)
{
  return *((unsigned __int8 *)this + 234);
}

uint64_t WebCore::AccessibilityNodeObject::setNeedsToUpdateChildren(uint64_t this)
{
  *(_BYTE *)(this + 232) = 1;
  return this;
}

uint64_t WebCore::AccessibilityNodeObject::setNeedsToUpdateSubtree(uint64_t this)
{
  *(_BYTE *)(this + 233) = 1;
  return this;
}

uint64_t WebCore::AccessibilityNodeObject::needsToUpdateChildren(WebCore::AccessibilityNodeObject *this)
{
  return *((unsigned __int8 *)this + 232);
}

uint64_t WebCore::AccessibilityObject::isMathText(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathNumber(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathOperator(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathFenceOperator(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathSeparatorOperator(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathIdentifier(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathScriptObject()
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isMathMultiscriptObject()
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::isAnonymousMathOperator(WebCore::AccessibilityObject *this)
{
  return 0;
}

uint64_t WebCore::AccessibilityObject::webAreaObject(WebCore::AccessibilityObject *this)
{
  return 0;
}

BOOL WebCore::AXCoreObject::supportsLiveRegion(WebCore::AXCoreObject *this, int a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _BOOL8 IsEnabled;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 2232))(&v9);
  if (!a2)
  {
    v7 = v9;
    if (!v9)
      return 0;
    IsEnabled = *((_DWORD *)v9 + 1) != 0;
    v9 = 0;
    goto LABEL_13;
  }
  v4 = v9;
  if (v9)
  {
    if ((*((_BYTE *)v9 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v9 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v9, v3);
      v4 = v10;
    }
  }
  v10 = v4;
  IsEnabled = WebCore::AXCoreObject::liveRegionStatusIsEnabled((uint64_t *)&v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v9;
  v9 = 0;
  if (v7)
  {
LABEL_13:
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  return IsEnabled;
}

BOOL WebCore::AXCoreObject::liveRegionStatusIsEnabled(uint64_t *a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  v1 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v1 + 4);
  if (v3 != 6)
  {
    if (v3 == 9)
    {
      v4 = *(_QWORD *)(v1 + 8);
      if ((*(_BYTE *)(v1 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v4 & 0xDF) == 0x41
          && (*(_BYTE *)(v4 + 1) & 0xDF) == 0x53
          && (*(_BYTE *)(v4 + 2) & 0xDF) == 0x53
          && (*(_BYTE *)(v4 + 3) & 0xDF) == 0x45
          && (*(_BYTE *)(v4 + 4) & 0xDF) == 0x52
          && (*(_BYTE *)(v4 + 5) & 0xDF) == 0x54
          && (*(_BYTE *)(v4 + 6) & 0xDF) == 0x49
          && (*(_BYTE *)(v4 + 7) & 0xDF) == 0x56)
        {
          v5 = *(unsigned __int8 *)(v4 + 8);
          return (v5 & 0xFFFFFFDF) == 69;
        }
      }
      else if ((*(_WORD *)v4 & 0xFFDF) == 0x41
             && (*(_WORD *)(v4 + 2) & 0xFFDF) == 0x53
             && (*(_WORD *)(v4 + 4) & 0xFFDF) == 0x53
             && (*(_WORD *)(v4 + 6) & 0xFFDF) == 0x45
             && (*(_WORD *)(v4 + 8) & 0xFFDF) == 0x52
             && (*(_WORD *)(v4 + 10) & 0xFFDF) == 0x54
             && (*(_WORD *)(v4 + 12) & 0xFFDF) == 0x49
             && (*(_WORD *)(v4 + 14) & 0xFFDF) == 0x56)
      {
        v5 = *(unsigned __int16 *)(v4 + 16);
        return (v5 & 0xFFFFFFDF) == 69;
      }
    }
    return 0;
  }
  v6 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v6 & 0xDF) != 0x50
      || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x4F
      || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x4C
      || (*(_BYTE *)(v6 + 3) & 0xDF) != 0x49
      || (*(_BYTE *)(v6 + 4) & 0xDF) != 0x54)
    {
      return 0;
    }
    v7 = *(unsigned __int8 *)(v6 + 5);
  }
  else
  {
    if ((*(_WORD *)v6 & 0xFFDF) != 0x50
      || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v6 + 6) & 0xFFDF) != 0x49
      || (*(_WORD *)(v6 + 8) & 0xFFDF) != 0x54)
    {
      return 0;
    }
    v7 = *(unsigned __int16 *)(v6 + 10);
  }
  return (v7 & 0xFFFFFFDF) == 0x45;
}

void WebCore::setDeviceHasAGXCompilerServiceForTesting(WebCore *this)
{
  WebCore::hasAGXCompilerService = 257;
}

BOOL WebCore::deviceHasAGXCompilerService(WebCore *this)
{
  int v1;
  utsname v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (HIBYTE(WebCore::hasAGXCompilerService))
  {
    v1 = WebCore::hasAGXCompilerService;
  }
  else if (uname(&v3))
  {
    v1 = 0;
    WebCore::hasAGXCompilerService = 256;
  }
  else
  {
    if (*(_QWORD *)v3.machine == 0x312C3564615069
      || *(_QWORD *)v3.machine == 0x322C3564615069
      || *(_QWORD *)v3.machine == 0x332C3564615069)
    {
      LOWORD(v1) = 257;
    }
    else if (*(_QWORD *)v3.machine == 0x342C3564615069)
    {
      LOWORD(v1) = 257;
    }
    else
    {
      LOWORD(v1) = 256;
    }
    WebCore::hasAGXCompilerService = v1;
    v1 = v1;
  }
  return v1 != 0;
}

char **WebCore::agxCompilerServices(WebCore *this)
{
  return &WebCore::agxCompilerServices(void)::services;
}

char **WebCore::agxCompilerClasses(WebCore *this)
{
  return &WebCore::agxCompilerClasses(void)::classes;
}

uint64_t WebCore::AudioOutputUnitAdaptor::configure(WebCore::AudioOutputUnitAdaptor *this, float a2, int a3, const AudioComponentDescription *a4)
{
  PAL *Next;
  OpaqueAudioComponentInstance **v8;
  unsigned int v9;
  OpaqueAudioComponentInstance *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::AudioSession *v14;
  WebCore::AudioSessionIOS *v15;
  int v17;
  double v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  _QWORD v23[2];
  int v24;
  __int128 v25;
  int v26;

  v25 = xmmword_19689B0F0;
  v26 = 0;
  Next = (PAL *)PAL::softLinkAudioToolboxAudioComponentFindNext(0, (OpaqueAudioComponent *)&v25, a4);
  PAL::softLinkAudioToolboxAudioComponentInstanceNew(Next, this, v8);
  v24 = 1;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)this, (OpaqueAudioComponentInstance *)0x7D3, 2u, 0, &v24, (const void *)4, v9);
  PAL::softLinkAudioToolboxAudioUnitInitialize(*(PAL **)this, v10);
  v23[0] = WebCore::AudioOutputUnitAdaptor::inputProc;
  v23[1] = this;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)this, (OpaqueAudioComponentInstance *)0x17, 1u, 0, v23, (const void *)0x10, v11);
  v17 = 40;
  PAL::softLinkAudioToolboxAudioUnitGetProperty(*(PAL **)this, (OpaqueAudioComponentInstance *)8, 2u, 0, &v18, &v17, v12);
  v18 = a2;
  v19 = xmmword_19689B100;
  v20 = 4;
  v21 = a3;
  v22 = 32;
  v14 = (WebCore::AudioSession *)PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)this, (OpaqueAudioComponentInstance *)8, 1u, 0, &v18, (const void *)0x28, v13);
  v15 = WebCore::AudioSession::sharedSession(v14);
  return (*(uint64_t (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v15 + 112))(v15, 256);
}

void WebCore::AudioSessionCocoa::~AudioSessionCocoa(WebCore::AudioSessionCocoa *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E31F6910;
  *((_BYTE *)this + 43) = 0;
  v2 = *((_QWORD *)this + 6);
  v3 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v3 = off_1E31F6A48;
  *(_QWORD *)(v3 + 8) = this;
  *(_BYTE *)(v3 + 16) = 0;
  v7 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  WebCore::AudioSession::~AudioSession(this, v4);
}

{
  WTF *v1;
  void *v2;

  WebCore::AudioSessionCocoa::~AudioSessionCocoa(this);
  WTF::fastFree(v1, v2);
}

void sub_1946749D0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WebCore::AudioSession *v10;
  uint64_t v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v12 = *((_QWORD *)v10 + 6);
  *((_QWORD *)v10 + 6) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
  WebCore::AudioSession::~AudioSession(v10, a2);
  _Unwind_Resume(a1);
}

BOOL WebCore::AudioSessionCocoa::tryToSetActiveInternal(WebCore::AudioSessionCocoa *this, int a2)
{
  WebCore::AudioSessionCocoa *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  char v18;
  char v19;
  _QWORD *v20;

  v2 = this;
  if ((byte_1ECE80D45 & 1) == 0)
  {
    v16 = a2;
    PAL::getAVAudioSessionClass(this);
    this = (WebCore::AudioSessionCocoa *)objc_opt_respondsToSelector();
    a2 = v16;
    byte_1ECE80D44 = this & 1;
    byte_1ECE80D45 = 1;
  }
  if ((byte_1ECE80D47 & 1) == 0)
  {
    v17 = a2;
    v18 = objc_msgSend((id)PAL::getAVAudioSessionClass(this), "instancesRespondToSelector:", sel_setActive_withOptions_error_);
    a2 = v17;
    byte_1ECE80D46 = v18;
    byte_1ECE80D47 = 1;
  }
  if (!byte_1ECE80D44)
    return 1;
  if (!a2)
  {
    v10 = *((_QWORD *)v2 + 6);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31F6A98;
    v20 = v11;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 32))(v10, &v20);
    v12 = v20;
    v20 = 0;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    if (*((_BYTE *)v2 + 43))
    {
      *((_BYTE *)v2 + 43) = 0;
      v13 = *((_QWORD *)v2 + 6);
      v14 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v14 = off_1E31F6A48;
      *(_QWORD *)(v14 + 8) = v2;
      *(_BYTE *)(v14 + 16) = 0;
      v20 = (_QWORD *)v14;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v13 + 32))(v13, &v20);
      v15 = v20;
      v20 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    return 1;
  }
  v19 = 0;
  if (!*((_BYTE *)v2 + 43))
  {
    *((_BYTE *)v2 + 43) = 1;
    v3 = *((_QWORD *)v2 + 6);
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = off_1E31F6A48;
    *(_QWORD *)(v4 + 8) = v2;
    *(_BYTE *)(v4 + 16) = 1;
    v20 = (_QWORD *)v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v20);
    v5 = v20;
    v20 = 0;
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
  v6 = *((_QWORD *)v2 + 6);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E31F6A70;
  v7[1] = &v19;
  v20 = v7;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v6 + 24))(v6, &v20);
  v8 = v20;
  v20 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return v19 != 0;
}

void sub_194674C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSession::isMuted(WebCore::AudioSession *this)
{
  return 0;
}

uint64_t WebCore::AudioSession::beginInterruptionForTesting(WebCore::AudioSession *this)
{
  return (*(uint64_t (**)(WebCore::AudioSession *))(*(_QWORD *)this + 168))(this);
}

uint64_t WebCore::AudioSession::endInterruptionForTesting(WebCore::AudioSession *this)
{
  return (*(uint64_t (**)(WebCore::AudioSession *, uint64_t))(*(_QWORD *)this + 176))(this, 1);
}

unsigned int **WebCore::AudioSession::setRoutingArbitrationClient(uint64_t a1, unsigned int **a2)
{
  return WTF::WeakPtr<WebCore::AudioSessionRoutingArbitrationClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=((unsigned int **)(a1 + 32), a2);
}

uint64_t WebCore::AudioSession::sceneIdentifier(WebCore::AudioSession *this)
{
  return MEMORY[0x1E0CBF6F0];
}

uint64_t WebCore::AudioSession::soundStageSize(WebCore::AudioSession *this)
{
  return 0;
}

unsigned int **WTF::WeakPtr<WebCore::AudioSessionRoutingArbitrationClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *a1;
  *a1 = v3;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<WebCore::AudioSessionCocoa::setEligibleForSmartRouting(BOOL,WebCore::AudioSessionCocoa::ForceUpdate)::$_0,void>::call(unsigned __int8 *a1)
{
  int v1;
  NSObject *v2;
  _BOOL8 v3;
  const char *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  PAL *v8;
  id v9;
  uint8_t buf[4];
  _DWORD v11[7];

  *(_QWORD *)&v11[5] = *MEMORY[0x1E0C80C00];
  if (!WebCore::AudioSession::s_shouldManageAudioSessionCategory)
    return;
  v1 = a1[16];
  if ((byte_1ECE80D43 & 1) != 0)
  {
    if (!_MergedGlobals_89)
      return;
    goto LABEL_4;
  }
  v8 = (PAL *)objc_msgSend((id)PAL::getAVAudioSessionClass((PAL *)a1), "instancesRespondToSelector:", sel_setEligibleForBTSmartRoutingConsideration_error_);
  if ((_DWORD)v8)
    LODWORD(v8) = objc_msgSend((id)PAL::getAVAudioSessionClass(v8), "instancesRespondToSelector:", sel_eligibleForBTSmartRoutingConsideration);
  _MergedGlobals_89 = (char)v8;
  byte_1ECE80D43 = 1;
  if ((_DWORD)v8)
  {
LABEL_4:
    v2 = qword_1ECE7C4A0;
    v3 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      v4 = "false";
      if (v1)
        v4 = "true";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v11 = v4;
      _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "AudioSession::setEligibleForSmartRouting() %s", buf, 0xCu);
    }
    v5 = (void *)objc_msgSend((id)PAL::getAVAudioSessionClass((PAL *)v3), "sharedInstance");
    if ((v1 != 0) != objc_msgSend(v5, "eligibleForBTSmartRoutingConsideration"))
    {
      v9 = 0;
      if ((objc_msgSend(v5, "setEligibleForBTSmartRoutingConsideration:error:", v1 != 0, &v9) & 1) == 0)
      {
        v6 = qword_1ECE7C4A0;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
        {
          v7 = objc_msgSend(v9, "localizedDescription");
          *(_DWORD *)buf = 67109378;
          v11[0] = v1;
          LOWORD(v11[1]) = 2112;
          *(_QWORD *)((char *)&v11[1] + 2) = v7;
          _os_log_error_impl(&dword_1940B8000, v6, OS_LOG_TYPE_ERROR, "failed to set eligible to %d with error: %@", buf, 0x12u);
        }
      }
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::AudioSessionCocoa::tryToSetActiveInternal(BOOL)::$_0,void>::call(PAL *a1)
{
  BOOL v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  if (byte_1ECE80D46)
  {
    v2 = 1;
    objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(a1), "sharedInstance"), "setActive:withOptions:error:", 1, 0, &v6);
    v3 = v6;
    if (v6)
    {
      v4 = qword_1ECE7C4A0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
      {
        v5 = objc_msgSend(v3, "localizedDescription");
        *(_DWORD *)buf = 138412290;
        v8 = v5;
        _os_log_error_impl(&dword_1940B8000, v4, OS_LOG_TYPE_ERROR, "failed to activate audio session, error: %@", buf, 0xCu);
        v2 = v6 == 0;
      }
      else
      {
        v2 = 0;
      }
    }
  }
  else
  {
    v2 = 1;
  }
  **((_BYTE **)a1 + 1) = v2;
}

void WTF::Detail::CallableWrapper<WebCore::AudioSessionCocoa::tryToSetActiveInternal(BOOL)::$_1,void>::call(PAL *a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  if (byte_1ECE80D46)
  {
    objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(a1), "sharedInstance"), "setActive:withOptions:error:", 0, 0, &v4);
    v1 = v4;
    if (v4)
    {
      v2 = qword_1ECE7C4A0;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
      {
        v3 = objc_msgSend(v1, "localizedDescription");
        *(_DWORD *)buf = 138412290;
        v6 = v3;
        _os_log_error_impl(&dword_1940B8000, v2, OS_LOG_TYPE_ERROR, "failed to deactivate audio session, error: %@", buf, 0xCu);
      }
    }
  }
}

void sub_194675298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c59_ZTSKZ46__WebInterruptionObserverHelper_interruption__E3__0(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;
  uint64_t v5;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    result = CFRetain(result);
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

void __destroy_helper_block_e8_32c59_ZTSKZ46__WebInterruptionObserverHelper_interruption__E3__0(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WebCore::AudioSessionIOS::addAudioSessionCategoryChangedObserver(uint64_t a1, void *a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  WebCore::AudioSessionIOS *v23;
  WebCore::AudioSessionIOS *v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];
  unsigned int *v42;

  if (_MergedGlobals_90 == 1)
  {
    v3 = dword_1ECE80D58;
    v4 = dword_1ECE80D5C;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    qword_1ECE80D50 = 0;
    *(_QWORD *)&dword_1ECE80D58 = 0;
    _MergedGlobals_90 = 1;
  }
  v5 = v3 + 1;
  v6 = &unk_1ECE80000;
  dword_1ECE80D58 = v5;
  if (v5 > v4)
  {
    v7 = &unk_1ECE80000;
    v8 = qword_1ECE80D50;
    if (!qword_1ECE80D50)
    {
LABEL_5:
      LODWORD(v8) = 0;
      v6[854] = 0;
LABEL_6:
      v9 = v8;
LABEL_7:
      dword_1ECE80D5C = 2 * v9;
      goto LABEL_8;
    }
    v27 = *(unsigned int *)(qword_1ECE80D50 - 4);
    if (!(_DWORD)v27)
      goto LABEL_45;
    v28 = 0;
    do
    {
      while (1)
      {
        v29 = --v27;
        v30 = *(_QWORD *)(v8 + 8 * v27);
        if ((unint64_t)(v30 + 1) >= 2 && !*(_QWORD *)(v30 + 8))
          break;
        if (!(_DWORD)v27)
          goto LABEL_35;
      }
      *(_QWORD *)(v8 + 8 * v27) = 0;
      do
      {
        v31 = __ldaxr((unsigned int *)v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, (unsigned int *)v30));
      if (!v32)
      {
        atomic_store(1u, (unsigned int *)v30);
        v38 = v8;
        v39 = v27;
        v37 = v28;
        v40 = v27;
        WTF::fastFree((WTF *)v30, a2);
        v27 = v39;
        v29 = v40;
        v28 = v37;
        v7 = (_QWORD *)&unk_1ECE80000;
        v8 = v38;
        v6 = (_DWORD *)&unk_1ECE80000;
      }
      *(_QWORD *)(v8 + 8 * v29) = -1;
      ++v28;
    }
    while (v29);
LABEL_35:
    v8 = v7[426];
    if (v28)
    {
      *(_DWORD *)(v8 - 16) += v28;
      v33 = v7[426];
      if (v33)
        v34 = *(_DWORD *)(v33 - 12);
      else
        v34 = 0;
      *(_DWORD *)(v33 - 12) = v34 - v28;
      v8 = v7[426];
    }
    if (!v8)
      goto LABEL_5;
    v35 = *(_DWORD *)(v8 - 4);
    if (v35 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v35)
    {
LABEL_45:
      v6[854] = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1ECE80D50);
      v8 = qword_1ECE80D50;
      dword_1ECE80D58 = 0;
      if (!qword_1ECE80D50)
        goto LABEL_6;
    }
    LODWORD(v8) = *(_DWORD *)(v8 - 12);
    v9 = 0x7FFFFFFF;
    if (v8 >= 0x7FFFFFFF)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_8:
  v10 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = a1;
    v12 = *(unsigned int **)a1;
    *(_QWORD *)a1 = v10;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
      v10 = *(_QWORD *)a1;
    }
  }
  do
    v15 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v15 + 1, (unsigned int *)v10));
  do
    v16 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v16 + 1, (unsigned int *)v10));
  v42 = (unsigned int *)v10;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1ECE80D50, &v42, (uint64_t)v41);
  v18 = v42;
  v42 = 0;
  if (!v18)
    goto LABEL_19;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    v18 = (unsigned int *)WTF::fastFree((WTF *)v18, v17);
    if (!v10)
      goto LABEL_23;
  }
  else
  {
LABEL_19:
    if (!v10)
      goto LABEL_23;
  }
  do
  {
    v21 = __ldaxr((unsigned int *)v10);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v10));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v10);
    v18 = (unsigned int *)WTF::fastFree((WTF *)v10, v17);
  }
LABEL_23:
  v23 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v18);
  v24 = WebCore::AudioSession::sharedSession(v23);
  v25 = (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v24 + 16))(v24);
  return (*(uint64_t (**)(_QWORD, WebCore::AudioSessionIOS *, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v23, v25);
}

void sub_194675630(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v5 = *(unsigned int **)(v3 - 24);
  *(_QWORD *)(v3 - 24) = 0;
  if (!v5)
    goto LABEL_4;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
    if (!v2)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if (!v2)
      goto LABEL_8;
  }
  do
  {
    v8 = __ldaxr(v2);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v2));
  if (!v9)
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

void WebCore::AudioSessionIOS::~AudioSessionIOS(id *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  id v4;
  WTF::StringImpl *v5;

  objc_msgSend(this[8], "clearCallback");
  v3 = (WTF::StringImpl *)this[9];
  this[9] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = this[8];
  this[8] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)this[7];
  this[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::AudioSessionCocoa::~AudioSessionCocoa((WebCore::AudioSessionCocoa *)this);
}

{
  WTF *v1;
  void *v2;

  WebCore::AudioSessionIOS::~AudioSessionIOS(this);
  WTF::fastFree(v1, v2);
}

void sub_19467571C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::AudioSessionCocoa *v2;
  WTF::StringImpl *v4;
  const void *v5;
  WTF::StringImpl *v6;

  v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 9);
  *((_QWORD *)v2 + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const void *)*((_QWORD *)v2 + 8);
  *((_QWORD *)v2 + 8) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF::StringImpl *)*((_QWORD *)v2 + 7);
  *((_QWORD *)v2 + 7) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::AudioSessionCocoa::~AudioSessionCocoa(v2);
  _Unwind_Resume(a1);
}

void WebCore::AudioSessionIOS::setPresentingProcesses(unsigned int *a1, uint64_t *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  __int128 buf;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a1;
  v22 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 1))
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E335DEC0;
    *(_BYTE *)(v4 + 12) = 1;
    *(_QWORD *)(v4 + 16) = v3;
    a1 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = v4;
    if (a1)
    {
      v5 = a1 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, a1 + 2);
        a1 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
      }
    }
  }
  v8 = *((_QWORD *)v3 + 1);
  *(_QWORD *)&buf = "AudioSession";
  *((_QWORD *)&buf + 1) = 13;
  v20 = "setPresentingProcesses";
  v21 = 0;
  if (*(_BYTE *)(v8 + 12))
    a1 = (unsigned int *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v9 = (void *)objc_msgSend((id)PAL::getAVAudioSessionClass((PAL *)a1), "sharedInstance");
  v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v11 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v11)
  {
    v12 = *a2;
    v13 = 32 * v11;
    do
    {
      v14 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v12, 32);
      objc_msgSend(v10, "addObject:", v14);
      if (v14)
        CFRelease(v14);
      v12 += 32;
      v13 -= 32;
    }
    while (v13);
  }
  v18 = 0;
  objc_msgSend(v9, "setAuditTokensForProcessAssertion:error:", v10, &v18);
  v15 = v18;
  if (v18 && (v16 = qword_1ECE7C4A0, os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR)))
  {
    v17 = objc_msgSend(v15, "localizedDescription");
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_error_impl(&dword_1940B8000, v16, OS_LOG_TYPE_ERROR, "Failed to set audit tokens for process assertion with error: %@", (uint8_t *)&buf, 0xCu);
    if (!v10)
      return;
  }
  else if (!v10)
  {
    return;
  }
  CFRelease(v10);
}

void sub_1946759B8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSessionIOS::category(WebCore::AudioSessionIOS *this)
{
  void *v1;
  PAL *v2;
  PAL *v4;
  PAL *v5;
  PAL *v6;
  PAL *v7;

  v1 = (void *)objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "category");
  v2 = (PAL *)objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionCategoryAmbient((PAL *)v1));
  if ((v2 & 1) != 0)
    return 1;
  v4 = (PAL *)objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionCategorySoloAmbient(v2));
  if ((v4 & 1) != 0)
    return 2;
  v5 = (PAL *)objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionCategoryPlayback(v4));
  if ((v5 & 1) != 0)
    return 3;
  v6 = (PAL *)objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionCategoryRecord(v5));
  if ((v6 & 1) != 0)
    return 4;
  v7 = (PAL *)objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionCategoryPlayAndRecord(v6));
  if ((v7 & 1) != 0)
    return 5;
  if (objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionCategoryAudioProcessing(v7)))
    return 6;
  return 0;
}

uint64_t WebCore::AudioSessionIOS::mode(WebCore::AudioSessionIOS *this)
{
  void *v1;
  PAL *v2;

  v1 = (void *)objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "mode");
  v2 = (PAL *)objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionModeVideoChat((PAL *)v1));
  if ((v2 & 1) != 0)
    return 1;
  if (objc_msgSend(v1, "isEqual:", PAL::get_AVFoundation_AVAudioSessionModeMoviePlayback(v2)))
    return 2;
  return 0;
}

uint64_t WebCore::AudioSessionIOS::routeSharingPolicy(WebCore::AudioSessionIOS *this)
{
  return objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "routeSharingPolicy");
}

void WebCore::AudioSessionIOS::setPreferredBufferSize(WebCore::AudioSessionIOS *this, WTF::String *a2)
{
  WebCore::AudioSessionIOS *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  PAL *v40;
  double v41;
  double v42;
  void *v43;
  float v44;
  double v45;
  void *v46;
  NSObject *v47;
  uint64_t v48;
  _QWORD v49[4];
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  _BYTE buf[22];
  WTF::StringImpl *v56;
  uint64_t v57;

  v3 = this;
  v57 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1))
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E335DEC0;
    *(_BYTE *)(v4 + 12) = 1;
    *(_QWORD *)(v4 + 16) = v3;
    this = (WebCore::AudioSessionIOS *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = v4;
    if (this)
    {
      v5 = (unsigned int *)((char *)this + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)this + 2);
        this = (WebCore::AudioSessionIOS *)(*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  v8 = *((_QWORD *)v3 + 1);
  v49[0] = "AudioSession";
  v49[1] = 13;
  v49[2] = "setPreferredBufferSize";
  v49[3] = 0;
  if (*(_BYTE *)(v8 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
    WTF::String::number(a2);
    if (v53)
    {
      v9 = *((_DWORD *)v53 + 1);
      if (v52)
      {
LABEL_10:
        v10 = *((_DWORD *)v52 + 1);
LABEL_11:
        if ((v10 | v9) < 0)
          goto LABEL_84;
        v11 = (v9 + v10);
        if (__OFADD__(v9, v10))
          goto LABEL_84;
        if (v53)
        {
          v12 = *((_DWORD *)v53 + 4);
          v13 = (v12 >> 2) & 1;
          if (v52 && (v12 & 4) != 0)
            goto LABEL_16;
        }
        else
        {
          if (v52)
          {
LABEL_16:
            v13 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
            goto LABEL_17;
          }
          v13 = 1;
        }
LABEL_17:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v11, v13, (uint64_t)v53, (uint64_t)v52, buf);
        v54 = *(WTF::StringImpl **)buf;
        if (*(_QWORD *)buf)
        {
          v15 = v52;
          v52 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v14);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = v53;
          v53 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v14);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = qword_1ECE7C4A0;
          v18 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v18)
          {
            WTF::String::utf8();
            v20 = v50 ? (char *)v50 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v20;
            _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v18 = (uint64_t)v50;
            v50 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 1)
                v18 = WTF::fastFree((WTF *)v18, v19);
              else
                --*(_DWORD *)v18;
            }
          }
          if (WebCore::LogMedia)
          {
            v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v22 = *v21;
              if ((v22 & 1) != 0)
                break;
              v23 = __ldaxr(v21);
              if (v23 == v22)
              {
                if (!__stxr(v22 | 1, v21))
                {
                  v24 = WTF::Logger::observers((WTF::Logger *)v18);
                  v25 = *(unsigned int *)(v24 + 12);
                  if ((_DWORD)v25)
                  {
                    v26 = *(uint64_t **)v24;
                    v27 = *(_QWORD *)v24 + 8 * v25;
                    do
                    {
                      v28 = *v26;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
                      *(_DWORD *)&buf[16] = 0;
                      WTF::String::number(a2);
                      v50 = 0;
                      v51 = 0;
                      v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v51) = 2;
                      v50 = v29;
                      v30 = HIDWORD(v51);
                      *((_DWORD *)v29 + 4 * HIDWORD(v51)) = *(_DWORD *)buf;
                      v31 = *(_QWORD *)&buf[8];
                      if (*(_QWORD *)&buf[8])
                        **(_DWORD **)&buf[8] += 2;
                      *((_QWORD *)v29 + 2 * v30 + 1) = v31;
                      *((_DWORD *)v29 + 4 * (v30 + 1)) = *(_DWORD *)&buf[16];
                      v32 = v56;
                      if (v56)
                        *(_DWORD *)v56 += 2;
                      *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
                      HIDWORD(v51) = v30 + 2;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogMedia, 0, &v50);
                      v33 = v50;
                      if (HIDWORD(v51))
                      {
                        v34 = 16 * HIDWORD(v51);
                        v35 = (WTF::StringImpl **)((char *)v50 + 8);
                        do
                        {
                          v36 = *v35;
                          *v35 = 0;
                          if (v36)
                          {
                            if (*(_DWORD *)v36 == 2)
                              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v19);
                            else
                              *(_DWORD *)v36 -= 2;
                          }
                          v35 += 2;
                          v34 -= 16;
                        }
                        while (v34);
                        v33 = v50;
                      }
                      if (v33)
                      {
                        v50 = 0;
                        LODWORD(v51) = 0;
                        WTF::fastFree(v33, v19);
                      }
                      v37 = v56;
                      v56 = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                      v38 = *(WTF::StringImpl **)&buf[8];
                      *(_QWORD *)&buf[8] = 0;
                      if (v38)
                      {
                        if (*(_DWORD *)v38 == 2)
                          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                        else
                          *(_DWORD *)v38 -= 2;
                      }
                      ++v26;
                    }
                    while (v26 != (uint64_t *)v27);
                  }
                  v39 = __ldxr(v21);
                  if (v39 == 1)
                  {
                    if (!__stlxr(0, v21))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          this = v54;
          v54 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WebCore::AudioSessionIOS *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)this -= 2;
          }
          goto LABEL_72;
        }
LABEL_84:
        __break(0xC471u);
        return;
      }
    }
    else
    {
      v9 = 0;
      if (v52)
        goto LABEL_10;
    }
    v10 = 0;
    goto LABEL_11;
  }
LABEL_72:
  v49[0] = 0;
  v40 = (PAL *)objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(this), "sharedInstance"), "sampleRate");
  v42 = v41;
  v43 = (void *)objc_msgSend((id)PAL::getAVAudioSessionClass(v40), "sharedInstance");
  v44 = v42;
  v45 = (float)((float)(unint64_t)a2 / v44);
  objc_msgSend(v43, "setPreferredIOBufferDuration:error:", v49, v45);
  v46 = (void *)v49[0];
  if (v49[0])
  {
    v47 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
    {
      v48 = objc_msgSend(v46, "localizedDescription");
      *(_DWORD *)buf = 134218242;
      *(double *)&buf[4] = v45;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v48;
      _os_log_error_impl(&dword_1940B8000, v47, OS_LOG_TYPE_ERROR, "failed to set preferred buffer duration to %f with error: %@", buf, 0x16u);
    }
  }
}

void sub_1946760D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23)
{
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSessionIOS::setSceneIdentifier(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  _QWORD v13[4];

  result = WTF::equal(this[9], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    result = (uint64_t)this[9];
    this[9] = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    if (!this[1])
    {
      v8 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v8 + 8) = 1;
      *(_QWORD *)v8 = off_1E335DEC0;
      *(_BYTE *)(v8 + 12) = 1;
      *(_QWORD *)(v8 + 16) = this;
      result = (uint64_t)this[1];
      this[1] = (WTF *)v8;
      if (result)
      {
        v9 = (unsigned int *)(result + 8);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    v12 = this[1];
    v13[0] = "AudioSession";
    v13[1] = 13;
    v13[2] = "setSceneIdentifier";
    v13[3] = 0;
    if (*((_BYTE *)v12 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::String>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v13, (uint64_t *)a2);
  }
  return result;
}

uint64_t WebCore::AudioSessionIOS::setSoundStageSize(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  _QWORD v40[4];
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  __int128 buf;
  int v46;
  WTF::StringImpl *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(result + 80) == a2)
    return result;
  v3 = result;
  *(_BYTE *)(result + 80) = a2;
  if (!*(_QWORD *)(result + 8))
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E335DEC0;
    *(_BYTE *)(v4 + 12) = 1;
    *(_QWORD *)(v4 + 16) = v3;
    result = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v4;
    if (result)
    {
      v5 = (unsigned int *)(result + 8);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  v8 = *(_QWORD *)(v3 + 8);
  v40[0] = "AudioSession";
  v40[1] = 13;
  v40[2] = "setSoundStageSize";
  v40[3] = 0;
  if (!*(_BYTE *)(v8 + 12))
    return result;
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v40);
  {
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F86A8 = &WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_1::operator() const(void)::impl;
    qword_1EE2F86B0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_2::operator() const(void)::impl;
    unk_1EE2F86B8 = &WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_3::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::values[a2];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (!v43)
  {
    v10 = 0;
    if (v9)
      goto LABEL_15;
LABEL_87:
    v11 = 0;
    goto LABEL_16;
  }
  v10 = *((_DWORD *)v43 + 1);
  if (!v9)
    goto LABEL_87;
LABEL_15:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_16:
  if ((v11 | v10) < 0)
    goto LABEL_90;
  result = (v10 + v11);
  if (__OFADD__(v10, v11))
    goto LABEL_90;
  if (v43)
  {
    v12 = *((_DWORD *)v43 + 4);
    v13 = (v12 >> 2) & 1;
    if (v9 && (v12 & 4) != 0)
      goto LABEL_21;
  }
  else
  {
    if (v9)
    {
LABEL_21:
      v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
      goto LABEL_22;
    }
    v13 = 1;
  }
LABEL_22:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v43, v9, &buf);
  v44 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_90:
    __break(0xC471u);
    return result;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
    else
      *(_DWORD *)v9 -= 2;
  }
  v15 = v43;
  v43 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = qword_1ECE7C4A0;
  v17 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v41 ? (char *)v41 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v41;
    v41 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (WebCore::LogMedia)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v40);
              v46 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_0::operator() const(void)::impl;
                *(_QWORD *)algn_1EE2F86A8 = &WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_2::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_3::operator() const(void)::impl += 2;
                qword_1EE2F86B0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_2::operator() const(void)::impl;
                unk_1EE2F86B8 = &WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::$_3::operator() const(void)::impl;
              }
              v28 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::AudioSessionSoundStageSize)::values[a2];
              if (v28)
                *(_DWORD *)v28 += 2;
              v47 = v28;
              v41 = 0;
              v42 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v42) = 2;
              v41 = v29;
              v30 = HIDWORD(v42);
              *((_DWORD *)v29 + 4 * HIDWORD(v42)) = buf;
              v31 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v46;
              v32 = v47;
              if (v47)
                *(_DWORD *)v47 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              HIDWORD(v42) = v30 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, &WebCore::LogMedia, 0, &v41);
              v33 = v41;
              if (HIDWORD(v42))
              {
                v34 = 16 * HIDWORD(v42);
                v35 = (WTF::StringImpl **)((char *)v41 + 8);
                do
                {
                  v36 = *v35;
                  *v35 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  v35 += 2;
                  v34 -= 16;
                }
                while (v34);
                v33 = v41;
              }
              if (v33)
              {
                v41 = 0;
                LODWORD(v42) = 0;
                WTF::fastFree(v33, v18);
              }
              v37 = v47;
              v47 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v39 = __ldxr(v20);
          if (v39 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194676928(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AudioSessionIOS::sceneIdentifier(WebCore::AudioSessionIOS *this)
{
  return (uint64_t)this + 72;
}

uint64_t WebCore::AudioSessionIOS::soundStageSize(WebCore::AudioSessionIOS *this)
{
  return *((unsigned __int8 *)this + 80);
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(v2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v4, 0);
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (unsigned int *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int **v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  unsigned int **v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **v29;
  unsigned int v30;
  uint64_t v31;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = (unsigned int *)*a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (unsigned int **)(v6 + 8 * v16);
    v18 = *v17;
    if (!*v17)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = (unsigned int *)*a2;
        v17 = v9;
      }
      *a2 = 0;
      result = (uint64_t *)*v17;
      *v17 = v10;
      if (result)
      {
        do
        {
          v27 = __ldaxr((unsigned int *)result);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, (unsigned int *)result));
        if (!v28)
        {
          atomic_store(1u, (unsigned int *)result);
          v29 = v17;
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
          v17 = v29;
        }
      }
      v19 = *v4;
      if (*v4)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v4;
      if (*v4)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_17;
      }
      else
      {
        if (3 * v24 > 4 * v23)
        {
LABEL_17:
          v25 = v21 + 8 * v24;
          v26 = 1;
          goto LABEL_18;
        }
        if (!(_DWORD)v24)
        {
          v30 = 8;
          goto LABEL_32;
        }
      }
      v30 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_32:
      result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(v4, v30, v17);
      v17 = (unsigned int **)result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_17;
    }
    if (v18 != (unsigned int *)-1)
      break;
    v9 = (unsigned int **)(v6 + 8 * v16);
LABEL_7:
    v14 = i + v16;
  }
  if (v18 != v10)
    goto LABEL_7;
  if ((v7 & 1) != 0)
    v31 = 0;
  else
    v31 = *(unsigned int *)(v6 - 4);
  v26 = 0;
  v25 = v6 + 8 * v31;
LABEL_18:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v5;
  uint64_t v7;
  _BYTE *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  unsigned __int128 v12;
  char v13;
  uint64_t v14;

  v5 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v7 = v14;
        if (v14)
        {
          result = v14 + 20;
          *(_DWORD *)v14 = 2;
          *(_DWORD *)(v14 + 4) = v5;
          *(_QWORD *)(v14 + 8) = v14 + 20;
          *(_DWORD *)(v14 + 16) = 4;
          if (a3)
          {
            v8 = *(_BYTE **)(a3 + 8);
            v9 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v9)
              {
                if ((_DWORD)v9 == 1)
                  *(_BYTE *)result = *v8;
                else
                  result = (uint64_t)memcpy((void *)result, v8, v9);
              }
            }
            else
            {
              v10 = result + v9;
              if (v9 >= 0x10)
              {
                v11 = result + (v9 & 0xFFFFFFF0);
                do
                {
                  v12 = (unsigned __int128)vld2q_s8(v8);
                  v8 += 32;
                  *(_OWORD *)result = v12;
                  result += 16;
                }
                while (result != v11);
                result = v11;
              }
              while (result != v10)
              {
                v13 = *v8;
                v8 += 2;
                *(_BYTE *)result++ = v13;
              }
            }
          }
        }
        goto LABEL_14;
      }
LABEL_17:
      v7 = 0;
      goto LABEL_14;
    }
LABEL_16:
    v7 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_14;
  }
  if (!(_DWORD)result)
    goto LABEL_16;
  if (result > 0x7FFFFFEF)
    goto LABEL_17;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v7 = v14;
  if (v14)
  {
    *(_DWORD *)v14 = 2;
    *(_DWORD *)(v14 + 4) = v5;
    *(_QWORD *)(v14 + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v14 + 20), a3);
  }
LABEL_14:
  *a4 = v7;
  return result;
}

void sub_194676FC8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>(char *result, uint64_t a2)
{
  int8x16_t *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  int8x16x2_t v15;
  int8x16x2_t v16;
  int8x16x2_t v17;

  if (a2)
  {
    v3 = *(int8x16_t **)(a2 + 8);
    v4 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v5 = &result[2 * v4];
      if (v4 >= 0x40)
      {
        v6 = &result[2 * (v4 & 0xFFFFFFC0)];
        v7 = 0uLL;
        do
        {
          v15.val[0] = *v3;
          v8 = v3[1];
          v16.val[0] = v3[2];
          v9 = v3[3];
          v3 += 4;
          v10 = v9;
          v16.val[1] = 0uLL;
          v17.val[0] = v8;
          v15.val[1] = 0uLL;
          v11 = result;
          vst2q_s8(v11, v15);
          v11 += 32;
          v17.val[1] = 0uLL;
          vst2q_s8(v11, v17);
          v12 = result + 64;
          vst2q_s8(v12, v16);
          v13 = result + 96;
          vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
          result += 128;
        }
        while (result != v6);
        result = v6;
      }
      while (result != v5)
      {
        v14 = v3->u8[0];
        v3 = (int8x16_t *)((char *)v3 + 1);
        *(_WORD *)result = v14;
        result += 2;
      }
    }
    else if ((_DWORD)v4 == 1)
    {
      *(_WORD *)result = v3->i16[0];
    }
    else if ((_DWORD)v4)
    {
      return (char *)memcpy(result, v3, 2 * v4);
    }
  }
  return result;
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(uint64_t *result, char *__dst)
{
  uint64_t v2;
  int8x16_t *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  int8x16x2_t v15;
  int8x16x2_t v16;
  int8x16x2_t v17;

  v2 = *result;
  if (*result)
  {
    v3 = *(int8x16_t **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v5 = &__dst[2 * v4];
      if (v4 >= 0x40)
      {
        v6 = &__dst[2 * (v4 & 0xFFFFFFC0)];
        v7 = 0uLL;
        do
        {
          v15.val[0] = *v3;
          v8 = v3[1];
          v16.val[0] = v3[2];
          v9 = v3[3];
          v3 += 4;
          v10 = v9;
          v16.val[1] = 0uLL;
          v17.val[0] = v8;
          v15.val[1] = 0uLL;
          v11 = __dst;
          vst2q_s8(v11, v15);
          v11 += 32;
          v17.val[1] = 0uLL;
          vst2q_s8(v11, v17);
          v12 = __dst + 64;
          vst2q_s8(v12, v16);
          v13 = __dst + 96;
          vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
          __dst += 128;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        v14 = v3->u8[0];
        v3 = (int8x16_t *)((char *)v3 + 1);
        *(_WORD *)__dst = v14;
        __dst += 2;
      }
    }
    else if ((_DWORD)v4 == 1)
    {
      *(_WORD *)__dst = v3->i16[0];
    }
    else if ((_DWORD)v4)
    {
      return (uint64_t *)memcpy(__dst, v3, 2 * v4);
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194677554(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v7;
  uint64_t v9;
  _WORD *v10;
  int8x16_t *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  int8x16_t *v19;
  size_t v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  size_t v45;
  uint64_t v46;
  unsigned __int128 v47;
  __int8 v48;
  char v49;
  uint64_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  v7 = result;
  if (!a2)
  {
    if ((_DWORD)result)
    {
      if (result <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
        v9 = v50;
        if (v50)
        {
          v10 = (_WORD *)(v50 + 20);
          *(_DWORD *)v50 = 2;
          *(_DWORD *)(v50 + 4) = v7;
          *(_QWORD *)(v50 + 8) = v50 + 20;
          *(_DWORD *)(v50 + 16) = 0;
          if (a3)
          {
            v11 = *(int8x16_t **)(a3 + 8);
            v12 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              v13 = (char *)&v10[v12];
              if (v12 >= 0x40)
              {
                v14 = (char *)&v10[v12 & 0xFFFFFFC0];
                v22 = 0uLL;
                v23 = (char *)(v50 + 20);
                do
                {
                  v51.val[0] = *v11;
                  v24 = v11[1];
                  v53.val[0] = v11[2];
                  v25 = v11[3];
                  v11 += 4;
                  v26 = v25;
                  v53.val[1] = 0uLL;
                  v55.val[0] = v24;
                  v51.val[1] = 0uLL;
                  v27 = v23;
                  vst2q_s8(v27, v51);
                  v27 += 32;
                  v55.val[1] = 0uLL;
                  vst2q_s8(v27, v55);
                  v28 = v23 + 64;
                  vst2q_s8(v28, v53);
                  v29 = v23 + 96;
                  vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
                  v23 += 128;
                }
                while (v23 != v14);
              }
              else
              {
                v14 = (char *)(v50 + 20);
              }
              while (v14 != v13)
              {
                v30 = v11->u8[0];
                v11 = (int8x16_t *)((char *)v11 + 1);
                *(_WORD *)v14 = v30;
                v14 += 2;
              }
            }
            else if ((_DWORD)v12 == 1)
            {
              *v10 = v11->i16[0];
            }
            else if ((_DWORD)v12)
            {
              result = (uint64_t)memcpy((void *)(v50 + 20), v11, 2 * v12);
            }
            v21 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v21 = 0;
          }
          if (a4)
          {
            result = (uint64_t)&v10[v21];
            v19 = *(int8x16_t **)(a4 + 8);
            v31 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) == 0)
            {
              if ((_DWORD)v31 == 1)
              {
                *(_WORD *)result = v19->i16[0];
                goto LABEL_44;
              }
              if (!(_DWORD)v31)
                goto LABEL_44;
              v20 = 2 * v31;
              goto LABEL_24;
            }
            v32 = result + 2 * v31;
            if (v31 >= 0x40)
            {
              v33 = result + 2 * (v31 & 0xFFFFFFC0);
              v34 = 0uLL;
              do
              {
                v52.val[0] = *v19;
                v35 = v19[1];
                v54.val[0] = v19[2];
                v36 = v19[3];
                v19 += 4;
                v37 = v36;
                v54.val[1] = 0uLL;
                v56.val[0] = v35;
                v52.val[1] = 0uLL;
                v38 = (char *)result;
                vst2q_s8(v38, v52);
                v38 += 32;
                v56.val[1] = 0uLL;
                vst2q_s8(v38, v56);
                v39 = (char *)(result + 64);
                vst2q_s8(v39, v54);
                v40 = (char *)(result + 96);
                vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
                result += 128;
              }
              while (result != v33);
              result = v33;
            }
            while (result != v32)
            {
              v41 = v19->u8[0];
              v19 = (int8x16_t *)((char *)v19 + 1);
              *(_WORD *)result = v41;
              result += 2;
            }
          }
        }
        goto LABEL_44;
      }
LABEL_50:
      v9 = 0;
      goto LABEL_44;
    }
LABEL_49:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_44;
  }
  if (!(_DWORD)result)
    goto LABEL_49;
  if ((result & 0x80000000) != 0)
    goto LABEL_50;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v9 = v50;
  if (v50)
  {
    v15 = (_BYTE *)(v50 + 20);
    *(_DWORD *)v50 = 2;
    *(_DWORD *)(v50 + 4) = v7;
    *(_QWORD *)(v50 + 8) = v50 + 20;
    *(_DWORD *)(v50 + 16) = 4;
    if (a3)
    {
      v16 = *(_BYTE **)(a3 + 8);
      v17 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        if ((_DWORD)v17)
        {
          if ((_DWORD)v17 == 1)
            *v15 = *v16;
          else
            result = (uint64_t)memcpy((void *)(v50 + 20), v16, v17);
        }
      }
      else
      {
        if (v17 < 0x10)
        {
          v42 = (unsigned __int128 *)(v50 + 20);
        }
        else
        {
          v42 = (unsigned __int128 *)&v15[v17 & 0xFFFFFFF0];
          v43 = (unsigned __int128 *)(v50 + 20);
          do
          {
            v44 = (unsigned __int128)vld2q_s8(v16);
            v16 += 32;
            *v43++ = v44;
          }
          while (v43 != v42);
        }
        while (v42 != (unsigned __int128 *)&v15[v17])
        {
          v49 = *v16;
          v16 += 2;
          *(_BYTE *)v42 = v49;
          v42 = (unsigned __int128 *)((char *)v42 + 1);
        }
      }
      v18 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v18 = 0;
    }
    if (a4)
    {
      result = (uint64_t)&v15[v18];
      v19 = *(int8x16_t **)(a4 + 8);
      v20 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        if ((_DWORD)v20)
        {
          if ((_DWORD)v20 == 1)
          {
            *(_BYTE *)result = v19->i8[0];
            goto LABEL_44;
          }
LABEL_24:
          result = (uint64_t)memcpy((void *)result, v19, v20);
        }
      }
      else
      {
        v45 = result + v20;
        if (v20 >= 0x10)
        {
          v46 = result + (v20 & 0xFFFFFFF0);
          do
          {
            v47 = (unsigned __int128)vld2q_s8(v19->i8);
            v19 += 2;
            *(_OWORD *)result = v47;
            result += 16;
          }
          while (result != v46);
          result = v46;
        }
        while (result != v45)
        {
          v48 = v19->i8[0];
          v19 = (int8x16_t *)((char *)v19 + 2);
          *(_BYTE *)result++ = v48;
        }
      }
    }
  }
LABEL_44:
  *a5 = v9;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_WORD *__dst, uint64_t a2, uint64_t a3)
{
  _WORD *v4;
  int8x16_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  char *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  int8x16_t *v20;
  uint64_t v21;
  _WORD *v22;
  _WORD *v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v4 = __dst;
  if (a2)
  {
    v6 = *(int8x16_t **)(a2 + 8);
    v7 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v8 = (char *)&__dst[v7];
      if (v7 >= 0x40)
      {
        v9 = (char *)&__dst[v7 & 0xFFFFFFC0];
        v11 = 0uLL;
        v12 = (char *)__dst;
        do
        {
          v32.val[0] = *v6;
          v13 = v6[1];
          v34.val[0] = v6[2];
          v14 = v6[3];
          v6 += 4;
          v15 = v14;
          v34.val[1] = 0uLL;
          v36.val[0] = v13;
          v32.val[1] = 0uLL;
          v16 = v12;
          vst2q_s8(v16, v32);
          v16 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v16, v36);
          v17 = v12 + 64;
          vst2q_s8(v17, v34);
          v18 = v12 + 96;
          vst2q_s8(v18, *(int8x16x2_t *)(&v11 - 1));
          v12 += 128;
        }
        while (v12 != v9);
      }
      else
      {
        v9 = (char *)__dst;
      }
      while (v9 != v8)
      {
        v19 = v6->u8[0];
        v6 = (int8x16_t *)((char *)v6 + 1);
        *(_WORD *)v9 = v19;
        v9 += 2;
      }
    }
    else if ((_DWORD)v7 == 1)
    {
      *__dst = v6->i16[0];
    }
    else if ((_DWORD)v7)
    {
      __dst = memcpy(__dst, v6, 2 * v7);
    }
    v10 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v10 = 0;
  }
  if (a3)
  {
    __dst = &v4[v10];
    v20 = *(int8x16_t **)(a3 + 8);
    v21 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v22 = &__dst[v21];
      if (v21 >= 0x40)
      {
        v23 = &__dst[v21 & 0xFFFFFFC0];
        v24 = 0uLL;
        do
        {
          v33.val[0] = *v20;
          v25 = v20[1];
          v35.val[0] = v20[2];
          v26 = v20[3];
          v20 += 4;
          v27 = v26;
          v35.val[1] = 0uLL;
          v37.val[0] = v25;
          v33.val[1] = 0uLL;
          v28 = (char *)__dst;
          vst2q_s8(v28, v33);
          v28 += 32;
          v37.val[1] = 0uLL;
          vst2q_s8(v28, v37);
          v29 = (char *)(__dst + 32);
          vst2q_s8(v29, v35);
          v30 = (char *)(__dst + 48);
          vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
          __dst += 64;
        }
        while (__dst != v23);
        __dst = v23;
      }
      while (__dst != v22)
      {
        v31 = v20->u8[0];
        v20 = (int8x16_t *)((char *)v20 + 1);
        *__dst++ = v31;
      }
    }
    else if ((_DWORD)v21 == 1)
    {
      *__dst = v20->i16[0];
    }
    else if ((_DWORD)v21)
    {
      return memcpy(__dst, v20, 2 * v21);
    }
  }
  return __dst;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  unsigned int v22;
  uint64_t v23;

  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v9 = *(_DWORD *)(v8 + 4);
  else
    v9 = 0;
  v10 = *a2;
  if (*a2)
    v11 = *(_DWORD *)(v10 + 4);
  else
    v11 = 0;
  v12 = *a3;
  if (*a3)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = *a4;
  if (*a4)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  if ((v15 | v13) < 0
    || ((v16 = __OFADD__(v13, v15), v17 = v13 + v15, !v16) ? (v18 = 0) : (v18 = 1),
        v11 < 0
     || (v18 & 1) != 0
     || ((v16 = __OFADD__(v11, v17), v19 = v11 + v17, !v16) ? (v20 = 0) : (v20 = 1),
         v9 < 0 || (v20 & 1) != 0 || (result = (v9 + v19), __OFADD__(v9, v19)))))
  {
    *a5 = 0;
    return result;
  }
  if ((!v8 || (*(_BYTE *)(v8 + 16) & 4) != 0) && (!v10 || (*(_BYTE *)(v10 + 16) & 4) != 0))
  {
    if (v12)
    {
      v22 = *(_DWORD *)(v12 + 16);
      v21 = (v22 >> 2) & 1;
      if (!v14 || (v22 & 4) == 0)
        goto LABEL_26;
    }
    else if (!v14)
    {
      v21 = 1;
      goto LABEL_26;
    }
    v21 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
  }
  else
  {
    v21 = 0;
  }
LABEL_26:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v21, v8, (_DWORD *)v10, v12, v14, &v23);
  *a5 = v23;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  int v11;
  _DWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unsigned __int128 *v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  unsigned __int128 *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  char v32;
  char v33;
  uint64_t v34;
  _DWORD *v35;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v35;
        if (v35)
        {
          v14 = v35 + 5;
          *v35 = 2;
          v13[1] = v11;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          if (a3)
          {
            v15 = *(_BYTE **)(a3 + 8);
            v16 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v16)
              {
                if ((_DWORD)v16 == 1)
                  *v14 = *v15;
                else
                  memcpy(v13 + 5, v15, v16);
              }
            }
            else
            {
              if (v16 < 0x10)
              {
                v26 = (unsigned __int128 *)(v13 + 5);
              }
              else
              {
                v26 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
                v27 = (unsigned __int128 *)(v13 + 5);
                do
                {
                  v28 = (unsigned __int128)vld2q_s8(v15);
                  v15 += 32;
                  *v27++ = v28;
                }
                while (v27 != v26);
              }
              while (v26 != (unsigned __int128 *)&v14[v16])
              {
                v32 = *v15;
                v15 += 2;
                *(_BYTE *)v26 = v32;
                v26 = (unsigned __int128 *)((char *)v26 + 1);
              }
            }
            v17 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v14[v17];
          if (a4)
          {
            v19 = (_BYTE *)*((_QWORD *)a4 + 1);
            v20 = a4[1];
            if ((a4[4] & 4) != 0)
            {
              if ((_DWORD)v20)
              {
                if ((_DWORD)v20 == 1)
                  *v18 = *v19;
                else
                  memcpy(v18, v19, v20);
              }
            }
            else
            {
              if (v20 < 0x10)
              {
                v29 = (unsigned __int128 *)&v14[v17];
              }
              else
              {
                v29 = (unsigned __int128 *)&v18[v20 & 0xFFFFFFF0];
                v30 = (unsigned __int128 *)&v14[v17];
                do
                {
                  v31 = (unsigned __int128)vld2q_s8(v19);
                  v19 += 32;
                  *v30++ = v31;
                }
                while (v30 != v29);
              }
              while (v29 != (unsigned __int128 *)&v18[v20])
              {
                v33 = *v19;
                v19 += 2;
                *(_BYTE *)v29 = v33;
                v29 = (unsigned __int128 *)((char *)v29 + 1);
              }
            }
            v21 = a4[1];
          }
          else
          {
            v21 = 0;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v18[v21], a5, a6);
        }
        goto LABEL_26;
      }
LABEL_32:
      v13 = 0;
      goto LABEL_26;
    }
LABEL_31:
    v13 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_26;
  }
  if (!(_DWORD)result)
    goto LABEL_31;
  if (result > 0x7FFFFFEF)
    goto LABEL_32;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v35;
  if (v35)
  {
    v22 = v35 + 5;
    *v35 = 2;
    v13[1] = v11;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    v34 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v34, (char *)v13 + 20);
    v23 = v34;
    if (v34)
      v23 = *(unsigned int *)(v34 + 4);
    v24 = (char *)v22 + 2 * v23;
    v35 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v35, v24);
    v25 = (unint64_t)v35;
    if (v35)
      v25 = v35[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v24[2 * v25], a5, a6);
  }
LABEL_26:
  *a7 = v13;
  return result;
}

void sub_194677F10(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int128 *v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  char v20;
  _DWORD *v21;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v21;
        if (v21)
        {
          v12 = v21 + 5;
          *v21 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a3)
          {
            v13 = (_BYTE *)*((_QWORD *)a3 + 1);
            v14 = a3[1];
            if ((a3[4] & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *v12 = *v13;
                else
                  memcpy(v11 + 5, v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v17 = (unsigned __int128 *)(v11 + 5);
              }
              else
              {
                v17 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v18 = (unsigned __int128 *)(v11 + 5);
                do
                {
                  v19 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v18++ = v19;
                }
                while (v18 != v17);
              }
              while (v17 != (unsigned __int128 *)&v12[v14])
              {
                v20 = *v13;
                v13 += 2;
                *(_BYTE *)v17 = v20;
                v17 = (unsigned __int128 *)((char *)v17 + 1);
              }
            }
            v15 = a3[1];
          }
          else
          {
            v15 = 0;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v12[v15], a4, a5);
        }
        goto LABEL_18;
      }
LABEL_22:
      v11 = 0;
      goto LABEL_18;
    }
LABEL_21:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_18;
  }
  if (!(_DWORD)result)
    goto LABEL_21;
  if (result > 0x7FFFFFEF)
    goto LABEL_22;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v21;
  if (v21)
  {
    *v21 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v21 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v21, (char *)v11 + 20);
    v16 = (unint64_t)v21;
    if (v21)
      v16 = v21[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((_WORD *)v11 + v16 + 10, a4, a5);
  }
LABEL_18:
  *a6 = v11;
  return result;
}

void sub_1946780F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::String>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *this, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  result = WTF::Logger::LogSiteIdentifier::toString(this);
  v9 = *a4;
  if (*a4)
    *(_DWORD *)v9 += 2;
  if (!v42)
  {
    v10 = 0;
    if (v9)
      goto LABEL_5;
LABEL_76:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = *((_DWORD *)v42 + 1);
  if (!v9)
    goto LABEL_76;
LABEL_5:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_6:
  if ((v11 | v10) < 0)
    goto LABEL_79;
  result = (v10 + v11);
  if (__OFADD__(v10, v11))
    goto LABEL_79;
  if (v42)
  {
    v12 = *((_DWORD *)v42 + 4);
    v13 = (v12 >> 2) & 1;
    if (v9 && (v12 & 4) != 0)
      goto LABEL_11;
  }
  else
  {
    if (v9)
    {
LABEL_11:
      v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
      goto LABEL_12;
    }
    v13 = 1;
  }
LABEL_12:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v42, v9, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_79:
    __break(0xC471u);
    return result;
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
    else
      *(_DWORD *)v9 -= 2;
  }
  v15 = v42;
  v42 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v40 ? (char *)v40 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v17 = (uint64_t)v40;
    v40 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              v28 = (WTF::StringImpl *)*a4;
              if (*a4)
                *(_DWORD *)v28 += 2;
              v46 = v28;
              v40 = 0;
              v41 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v29;
              v30 = HIDWORD(v41);
              *((_DWORD *)v29 + 4 * HIDWORD(v41)) = buf;
              v31 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v45;
              v32 = v46;
              if (v46)
                *(_DWORD *)v46 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              HIDWORD(v41) = v30 + 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v40);
              v33 = v40;
              if (HIDWORD(v41))
              {
                v34 = 16 * HIDWORD(v41);
                v35 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v36 = *v35;
                  *v35 = 0;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v36 -= 2;
                  }
                  v35 += 2;
                  v34 -= 16;
                }
                while (v34);
                v33 = v40;
              }
              if (v33)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v33, v18);
              }
              v37 = v46;
              v46 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v39 = __ldxr(v20);
          if (v39 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19467852C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17)
{
  unsigned __int8 *v17;
  int v19;

  v19 = __ldxr(v17);
  if (v19 == 1)
  {
    if (!__stlxr(0, v17))
    {
LABEL_6:
      if (a13)
      {
        if (*(_DWORD *)a13 == 2)
          WTF::StringImpl::destroy(a13, a2);
        else
          *(_DWORD *)a13 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void *WebCore::AudioSourceProviderAVFObjC::create@<X0>(void *this@<X0>, WebCore::AudioSourceProviderAVFObjC **a2@<X8>)
{
  const void *v3;
  WebCore::AudioSourceProviderAVFObjC *v5;
  _QWORD block[4];
  char v7;

  v3 = this;
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
    block[3] = &__block_descriptor_tmp_3;
    v7 = 0;
    if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
      dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
    this = dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTAudioProcessingTapCreate");
    PAL::softLinkMediaToolboxMTAudioProcessingTapCreate = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))this;
    PAL::canLoad_MediaToolbox_MTAudioProcessingTapCreate(void)::loaded = this != 0;
    if (this)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!PAL::canLoad_MediaToolbox_MTAudioProcessingTapCreate(void)::loaded)
    goto LABEL_7;
LABEL_3:
  v5 = (WebCore::AudioSourceProviderAVFObjC *)WTF::fastMalloc((WTF *)0xC0);
  this = WebCore::AudioSourceProviderAVFObjC::AudioSourceProviderAVFObjC(v5, v3);
LABEL_8:
  *a2 = v5;
  return this;
}

void sub_194678778(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::AudioSourceProviderAVFObjC *WebCore::AudioSourceProviderAVFObjC::AudioSourceProviderAVFObjC(WebCore::AudioSourceProviderAVFObjC *this, CFTypeRef cf)
{
  _QWORD *v3;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = &off_1E31F6C28;
  *((_QWORD *)this + 2) = cf;
  if (cf)
    CFRetain(cf);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 24) = 10000000;
  *((_BYTE *)this + 100) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 10000000;
  *((_BYTE *)this + 116) = 1;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = -1;
  *((_BYTE *)this + 144) = 1;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E31F6C60;
  *((_QWORD *)this + 23) = v3;
  return this;
}

void sub_194678840(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  const void **v3;
  unsigned int **v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;

  v6 = v2[22];
  v2[22] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)v2[21];
  v2[21] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  v10 = v2[20];
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)v2[20];
    v2[20] = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    v2[20] = 0;
  }
  v14 = *v4;
  *v4 = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v17 = v2[10];
  v2[10] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v2[9];
  v2[9] = 0;
  if (v18)
    MEMORY[0x19AEA7644](v18, 0x1000C400A747E1ELL);
  v19 = v2[8];
  v2[8] = 0;
  if (v19)
    MEMORY[0x19AEA7644](v19, 0x1000C400A747E1ELL);
  v20 = v2[7];
  v2[7] = 0;
  if (v20)
    MEMORY[0x19AEA7644](v20, 0x1080C404ACF7207);
  v21 = (const void *)v2[6];
  v2[6] = 0;
  if (v21)
    CFRelease(v21);
  v22 = (const void *)v2[5];
  v2[5] = 0;
  if (v22)
    CFRelease(v22);
  v23 = (const void *)v2[4];
  v2[4] = 0;
  if (v23)
    CFRelease(v23);
  v24 = *v3;
  *v3 = 0;
  if (v24)
    CFRelease(v24);
  v25 = (const void *)v2[2];
  v2[2] = 0;
  if (v25)
    CFRelease(v25);
  _Unwind_Resume(exception_object);
}

void WebCore::AudioSourceProviderAVFObjC::~AudioSourceProviderAVFObjC(WebCore::AudioSourceProviderAVFObjC *this, void *a2)
{
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;

  *(_QWORD *)this = &off_1E31F6C28;
  v3 = *((_QWORD *)this + 19);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    WebCore::AudioSourceProviderAVFObjC::destroyMixIfNeeded((uint64_t)this);
    v5 = (unsigned int *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v4);
      }
    }
    WebCore::AudioSourceProviderAVFObjC::createMixIfNeeded(this);
  }
  v8 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *((_QWORD *)this + 20);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 20) = 0;
  }
  v17 = (unsigned int *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  v20 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v21)
    MEMORY[0x19AEA7644](v21, 0x1000C400A747E1ELL);
  v22 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v22)
    MEMORY[0x19AEA7644](v22, 0x1000C400A747E1ELL);
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v23)
    MEMORY[0x19AEA7644](v23, 0x1080C404ACF7207);
  v24 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v24)
    CFRelease(v24);
  v25 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v25)
    CFRelease(v25);
  v26 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v26)
    CFRelease(v26);
  v27 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v27)
    CFRelease(v27);
  v28 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v28)
    CFRelease(v28);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioSourceProviderAVFObjC::~AudioSourceProviderAVFObjC(this, a2);
  WTF::fastFree(v2, v3);
}

void sub_194678BE4(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;

  v4 = v2[23];
  v2[23] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v2[22];
  v2[22] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (unsigned int *)v2[21];
  v2[21] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = v2[20];
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)v2[20];
    v2[20] = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    v2[20] = 0;
  }
  v13 = (unsigned int *)v2[19];
  v2[19] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = v2[10];
  v2[10] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v2[9];
  v2[9] = 0;
  if (v17)
    MEMORY[0x19AEA7644](v17, 0x1000C400A747E1ELL);
  v18 = v2[8];
  v2[8] = 0;
  if (v18)
    MEMORY[0x19AEA7644](v18, 0x1000C400A747E1ELL);
  v19 = v2[7];
  v2[7] = 0;
  if (v19)
    MEMORY[0x19AEA7644](v19, 0x1080C404ACF7207);
  v20 = (const void *)v2[6];
  v2[6] = 0;
  if (v20)
    CFRelease(v20);
  v21 = (const void *)v2[5];
  v2[5] = 0;
  if (v21)
    CFRelease(v21);
  v22 = (const void *)v2[4];
  v2[4] = 0;
  if (v22)
    CFRelease(v22);
  v23 = (const void *)v2[3];
  v2[3] = 0;
  if (v23)
    CFRelease(v23);
  v24 = (const void *)v2[2];
  v2[2] = 0;
  if (v24)
    CFRelease(v24);
  _Unwind_Resume(exception_object);
}

void WebCore::AudioSourceProviderAVFObjC::provideInput(WebCore::AudioSourceProviderAVFObjC *this, WebCore::AudioBus *a2, unint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t j;
  uint64_t v26;
  void **v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t n;
  uint64_t v31;
  void **v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t m;
  uint64_t v36;
  void **v37;
  _QWORD *v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  AudioBufferList *v55;
  PAL *v56;
  unint64_t v57;
  unint64_t k;
  uint64_t v59;
  void **v60;
  _QWORD *v61;
  int v62;
  unint64_t v63;
  unint64_t i;
  uint64_t v65;
  void **v66;
  _QWORD *v67;

  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    v7 = (unsigned __int8 *)(v4 + 16);
    do
    {
      while (1)
      {
        v8 = *v7;
        if ((v8 & 1) != 0)
        {
          v63 = *((unsigned int *)a2 + 7);
          if ((_DWORD)v63)
          {
            for (i = 0; i < v63; ++i)
            {
              v65 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * i);
              if (!*(_BYTE *)(v65 + 24))
              {
                *(_BYTE *)(v65 + 24) = 1;
                v66 = *(void ***)(v65 + 8);
                v67 = (_QWORD *)(v65 + 16);
                if (v66)
                  v67 = v66 + 1;
                else
                  v66 = (void **)v65;
                bzero(*v66, 4 * *v67);
                v63 = *((unsigned int *)a2 + 7);
              }
            }
          }
          return;
        }
        v9 = __ldaxr(v7);
        if (v9 == v8)
          break;
        __clrex();
      }
    }
    while (__stxr(v8 | 1, v7));
    v10 = (unsigned __int8 *)(*((_QWORD *)this + 21) + 16);
    v11 = (unsigned int *)*((_QWORD *)this + 10);
    if (v11)
    {
      v12 = *((_QWORD *)this + 17);
      *((_QWORD *)this + 17) = -1;
      if (v12 != -1)
        *((_QWORD *)this + 16) = v12;
      v13 = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
      do
      {
        do
          v14 = atomic_load(v13);
        while ((v14 & 1) != 0);
        v15 = v13[1];
        v16 = v13[2];
        __dmb(9u);
      }
      while (v14 != *v13);
      v17 = v11[10];
      if (v15 >= ~v17)
        v18 = ~v17;
      else
        v18 = v15;
      v19 = __CFADD__(v15, v17);
      v20 = v15 + v17;
      if (v19)
        v20 = -1;
      if (v20 < v18)
        goto LABEL_103;
      if (v20 >= v16)
        v20 = v16;
      if (v16 >= v18)
        v21 = v20;
      else
        v21 = v18;
      v22 = *((_QWORD *)this + 16);
      if (v22 && v22 != v12)
      {
        v23 = v21 - v22;
        if (v23 < a3)
        {
          a3 = v23;
          v24 = *((unsigned int *)a2 + 7);
          if ((_DWORD)v24)
          {
            for (j = 0; j < v24; ++j)
            {
              v26 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * j);
              if (!*(_BYTE *)(v26 + 24))
              {
                *(_BYTE *)(v26 + 24) = 1;
                v27 = *(void ***)(v26 + 8);
                v28 = (_QWORD *)(v26 + 16);
                if (v27)
                  v28 = v27 + 1;
                else
                  v27 = (void **)v26;
                bzero(*v27, 4 * *v28);
                v24 = *((unsigned int *)a2 + 7);
              }
            }
          }
          if (!a3)
            goto LABEL_89;
        }
LABEL_58:
        v39 = (unsigned int *)*((_QWORD *)this + 7);
        if (*v39)
        {
          v40 = 0;
          v41 = *((unsigned int *)a2 + 7);
          v42 = 2;
          while (v41 != v40)
          {
            v43 = *(uint64_t **)(*((_QWORD *)a2 + 2) + 8 * v40);
            v39[v42] = 1;
            *((_BYTE *)v43 + 24) = 0;
            v44 = *v43;
            if (!*v43)
              v44 = *(_QWORD *)v43[1];
            *(_QWORD *)&v39[v42 + 2] = v44;
            v39 = (unsigned int *)*((_QWORD *)this + 7);
            v39[v42 + 1] = 4 * *((_DWORD *)v43 + 4);
            ++v40;
            v42 += 4;
            if (v40 >= *v39)
              goto LABEL_64;
          }
          goto LABEL_104;
        }
LABEL_64:
        v45 = (unsigned int *)*((_QWORD *)this + 10);
        v46 = *((_QWORD *)this + 16);
        v47 = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v45 + 24))(v45);
        do
        {
          do
            v48 = atomic_load(v47);
          while ((v48 & 1) != 0);
          v49 = v47[1];
          v50 = v47[2];
          __dmb(9u);
        }
        while (v48 != *v47);
        v51 = v45[10];
        if (v49 >= ~v51)
          v52 = ~v51;
        else
          v52 = v49;
        v19 = __CFADD__(v49, v51);
        v53 = v49 + v51;
        if (v19)
          v53 = -1;
        if (v53 >= v52)
        {
          if (v53 >= v50)
            v53 = v50;
          if (v50 >= v52)
            v54 = v53;
          else
            v54 = v52;
          WebCore::CARingBuffer::fetchInternal((uint64_t)v45, v39, a3, v46, 0, v52, v54);
          *((_QWORD *)this + 16) += a3;
          v56 = (PAL *)*((_QWORD *)this + 6);
          if (v56)
            PAL::softLinkAudioToolboxAudioConverterConvertComplexBuffer(v56, (OpaqueAudioConverter *)a3, *((_QWORD *)this + 7), *((const AudioBufferList **)this + 7), v55);
          goto LABEL_89;
        }
LABEL_103:
        __break(1u);
LABEL_104:
        __break(0xC471u);
        return;
      }
      if (v21 > v22 + a3 + *((_QWORD *)this + 15))
        goto LABEL_58;
      v57 = *((unsigned int *)a2 + 7);
      if ((_DWORD)v57)
      {
        for (k = 0; k < v57; ++k)
        {
          v59 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * k);
          if (!*(_BYTE *)(v59 + 24))
          {
            *(_BYTE *)(v59 + 24) = 1;
            v60 = *(void ***)(v59 + 8);
            v61 = (_QWORD *)(v59 + 16);
            if (v60)
              v61 = v60 + 1;
            else
              v60 = (void **)v59;
            bzero(*v60, 4 * *v61);
            v57 = *((unsigned int *)a2 + 7);
          }
        }
      }
    }
    else
    {
      v34 = *((unsigned int *)a2 + 7);
      if ((_DWORD)v34)
      {
        for (m = 0; m < v34; ++m)
        {
          v36 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * m);
          if (!*(_BYTE *)(v36 + 24))
          {
            *(_BYTE *)(v36 + 24) = 1;
            v37 = *(void ***)(v36 + 8);
            v38 = (_QWORD *)(v36 + 16);
            if (v37)
              v38 = v37 + 1;
            else
              v37 = (void **)v36;
            bzero(*v37, 4 * *v38);
            v34 = *((unsigned int *)a2 + 7);
          }
        }
      }
    }
LABEL_89:
    v62 = __ldxr(v10);
    if (v62 == 1)
    {
      if (!__stlxr(0, v10))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  else
  {
    v29 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v29)
    {
      for (n = 0; n < v29; ++n)
      {
        v31 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * n);
        if (!*(_BYTE *)(v31 + 24))
        {
          *(_BYTE *)(v31 + 24) = 1;
          v32 = *(void ***)(v31 + 8);
          v33 = (_QWORD *)(v31 + 16);
          if (v32)
            v33 = v32 + 1;
          else
            v32 = (void **)v31;
          bzero(*v32, 4 * *v33);
          v29 = *((unsigned int *)a2 + 7);
        }
      }
    }
  }
}

void sub_19467920C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::AudioSourceProviderAVFObjC::setClient(WebCore::AudioSourceProviderAVFObjC *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *((_QWORD *)this + 19);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  v5 = *a2;
  if (*a2)
    v5 = *(_QWORD *)(v5 + 8);
  if (v4 != v5)
  {
    WebCore::AudioSourceProviderAVFObjC::destroyMixIfNeeded((uint64_t)this);
    v7 = *a2;
    *a2 = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
    WebCore::AudioSourceProviderAVFObjC::createMixIfNeeded(this);
  }
}

uint64_t WebCore::AudioSourceProviderAVFObjC::destroyMixIfNeeded(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  void *v4;
  void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  if (!*(_QWORD *)(this + 32))
    return this;
  v1 = this;
  v2 = (unsigned __int8 *)(*(_QWORD *)(this + 168) + 16);
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(void **)(v1 + 16);
  if (v4)
    objc_msgSend(v4, "setAudioMix:", 0);
  objc_msgSend(*(id *)(v1 + 32), "setInputParameters:", MEMORY[0x1E0C9AA60]);
  v6 = *(const void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(*(_QWORD *)(v1 + 168) + 8) = 0;
  v8 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v8)
    MEMORY[0x19AEA7644](v8, 0x1000C400A747E1ELL);
  v9 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v9)
    MEMORY[0x19AEA7644](v9, 0x1000C400A747E1ELL);
  v10 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v11)
    MEMORY[0x19AEA7644](v11, 0x1080C404ACF7207);
  v12 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 160) = 0;
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      WTF::fastFree((WTF *)v12, v5);
    }
  }
  v15 = __ldxr(v2);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v2))
LABEL_29:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  this = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 168) = 0;
  if (this)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)this);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)this));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)this);
      return WTF::fastFree((WTF *)this, v5);
    }
  }
  return this;
}

void sub_194679468(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

void WebCore::AudioSourceProviderAVFObjC::createMixIfNeeded(WebCore::AudioSourceProviderAVFObjC *this)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  unsigned __int8 *v5;
  void *v7;
  const void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  CFTypeRef cf;
  int v23;
  void *v24;
  void (*v25)(WebCore::AudioSourceProviderAVFObjC *, const opaqueMTAudioProcessingTap *, _QWORD *, void **);
  unsigned int *(*v26)(WebCore::AudioSourceProviderAVFObjC *, const opaqueMTAudioProcessingTap *);
  uint64_t (*v27)(WebCore::AudioSourceProviderAVFObjC *, const opaqueMTAudioProcessingTap *, __int128 *, const AudioStreamBasicDescription *);
  uint64_t (*v28)(WebCore::AudioSourceProviderAVFObjC *, const opaqueMTAudioProcessingTap *);
  uint64_t (*v29)(WebCore::AudioSourceProviderAVFObjC *, const opaqueMTAudioProcessingTap *, uint64_t, const AudioBufferList *, AudioBufferList *, AudioBufferList *, unsigned int *);
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 19);
  if (!v1 || !*(_QWORD *)(v1 + 8) || !*((_QWORD *)this + 2) || !*((_QWORD *)this + 3))
    return;
  v3 = WTF::fastMalloc((WTF *)0x18);
  v4 = (void *)v3;
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = this;
  *(_BYTE *)(v3 + 16) = 0;
  v5 = (unsigned __int8 *)(v3 + 16);
  if (__ldaxr((unsigned __int8 *)(v3 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v3 + 16);
LABEL_9:
  v23 = 0;
  v24 = v4;
  v25 = WebCore::AudioSourceProviderAVFObjC::initCallback;
  v26 = WebCore::AudioSourceProviderAVFObjC::finalizeCallback;
  v27 = WebCore::AudioSourceProviderAVFObjC::prepareCallback;
  v28 = WebCore::AudioSourceProviderAVFObjC::unprepareCallback;
  v29 = WebCore::AudioSourceProviderAVFObjC::processCallback;
  cf = 0;
  if (!PAL::softLinkMediaToolboxMTAudioProcessingTapCreate(*MEMORY[0x1E0C9AE00], &v23, 1, &cf))
  {
    v8 = (const void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = cf;
    if (v8)
      CFRelease(v8);
    v9 = (unsigned int *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v4;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        v9 = (unsigned int *)WTF::fastFree((WTF *)v9, v7);
      }
    }
    v12 = objc_msgSend(objc_alloc((Class)PAL::getAVMutableAudioMixClass[0]((PAL *)v9)), "init");
    v13 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v13)
      CFRelease(v13);
    v4 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVMutableAudioMixInputParametersClass[0]((PAL *)v13)), "init");
    objc_msgSend(v4, "setAudioTapProcessor:", *((_QWORD *)this + 5));
    objc_msgSend(v4, "setTrackID:", objc_msgSend(*((id *)this + 3), "trackID"));
    v14 = (void *)*((_QWORD *)this + 4);
    v30[0] = v4;
    objc_msgSend(v14, "setInputParameters:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 1));
    objc_msgSend(*((id *)this + 2), "setAudioMix:", *((_QWORD *)this + 4));
    if (*((_QWORD *)this + 20))
      goto LABEL_24;
    v15 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = this;
    v16 = (unsigned int *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v15;
    if (!v16)
      goto LABEL_24;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (v18)
    {
LABEL_24:
      if (!v4)
        goto LABEL_26;
    }
    else
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v7);
      if (!v4)
        goto LABEL_26;
    }
    CFRelease(v4);
    v4 = 0;
    goto LABEL_26;
  }
  if (cf)
    CFRelease(cf);
LABEL_26:
  v19 = __ldxr(v5);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v5))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v4)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v4);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v4));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::fastFree((WTF *)v4, v7);
    }
  }
}

void sub_194679760(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  const void *v2;
  int v4;

  if (v2)
    CFRelease(v2);
  v4 = __ldxr(v1);
  if (v4 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_8;
}

void WebCore::AudioSourceProviderAVFObjC::setPlayerItem(WebCore::AudioSourceProviderAVFObjC *this, AVPlayerItem *a2)
{
  const void *v4;

  if (*((AVPlayerItem **)this + 2) != a2)
  {
    WebCore::AudioSourceProviderAVFObjC::destroyMixIfNeeded((uint64_t)this);
    if (a2)
      CFRetain(a2);
    v4 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = a2;
    if (v4)
      CFRelease(v4);
    WebCore::AudioSourceProviderAVFObjC::createMixIfNeeded(this);
  }
}

void WebCore::AudioSourceProviderAVFObjC::setAudioTrack(WebCore::AudioSourceProviderAVFObjC *this, AVAssetTrack *a2)
{
  const void *v4;

  if (*((AVAssetTrack **)this + 3) != a2)
  {
    WebCore::AudioSourceProviderAVFObjC::destroyMixIfNeeded((uint64_t)this);
    if (a2)
      CFRetain(a2);
    v4 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (v4)
      CFRelease(v4);
    WebCore::AudioSourceProviderAVFObjC::createMixIfNeeded(this);
  }
}

void WebCore::AudioSourceProviderAVFObjC::initCallback(WebCore::AudioSourceProviderAVFObjC *this, const opaqueMTAudioProcessingTap *a2, _QWORD *a3, void **a4)
{
  unsigned int v4;

  *a3 = a2;
  do
    v4 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v4 + 1, (unsigned int *)a2));
}

unsigned int *WebCore::AudioSourceProviderAVFObjC::finalizeCallback(WebCore::AudioSourceProviderAVFObjC *this, const opaqueMTAudioProcessingTap *a2)
{
  unsigned int *result;
  void *v3;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)PAL::softLinkMediaToolboxMTAudioProcessingTapGetStorage(this, a2);
  do
  {
    v4 = __ldaxr(result);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, result));
  if (!v5)
  {
    atomic_store(1u, result);
    return (unsigned int *)WTF::fastFree((WTF *)result, v3);
  }
  return result;
}

uint64_t WebCore::AudioSourceProviderAVFObjC::prepareCallback(WebCore::AudioSourceProviderAVFObjC *this, const opaqueMTAudioProcessingTap *a2, __int128 *a3, const AudioStreamBasicDescription *a4)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  OpaqueAudioConverter **v17;
  uint64_t v18;
  PAL *v19;
  Float64 mSampleRate;
  const void *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  AudioStreamBasicDescription cf;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;

  result = PAL::softLinkMediaToolboxMTAudioProcessingTapGetStorage(this, a2);
  v7 = result;
  v8 = (unsigned __int8 *)(result + 16);
  if (__ldaxr((unsigned __int8 *)(result + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 16);
LABEL_5:
  v10 = *(_QWORD *)(v7 + 8);
  if (v10)
  {
    v11 = operator new();
    v12 = a3[1];
    *(_OWORD *)v11 = *a3;
    *(_OWORD *)(v11 + 16) = v12;
    *(_QWORD *)(v11 + 32) = *((_QWORD *)a3 + 4);
    v13 = *(_QWORD *)(v10 + 64);
    *(_QWORD *)(v10 + 64) = v11;
    if (v13)
      MEMORY[0x19AEA7644](v13, 0x1000C400A747E1ELL);
    v14 = *((_DWORD *)a3 + 7);
    v15 = *(double *)a3;
    v16 = operator new();
    *(_QWORD *)(v16 + 32) = 0;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    v18 = *(_QWORD *)(v10 + 72);
    *(_QWORD *)(v10 + 72) = v16;
    if (v18)
    {
      MEMORY[0x19AEA7644](v18, 0x1000C400A747E1ELL);
      v16 = *(_QWORD *)(v10 + 72);
    }
    *(double *)v16 = v15;
    *(_DWORD *)(v16 + 28) = v14;
    *(_DWORD *)(v16 + 32) = 32;
    *(_DWORD *)(v16 + 24) = 4;
    *(_OWORD *)(v16 + 8) = xmmword_19689B100;
    v19 = *(PAL **)(v10 + 64);
    if (*(double *)v19 != v15
      || *((_DWORD *)v19 + 2) != 1819304813
      || *((_DWORD *)v19 + 3) != 41
      || *((_DWORD *)v19 + 4) != 4
      || *((_DWORD *)v19 + 5) != 1
      || *((_DWORD *)v19 + 6) != 4
      || *((_DWORD *)v19 + 7) != v14
      || *((_DWORD *)v19 + 8) != 32)
    {
      cf.mSampleRate = 0.0;
      PAL::softLinkAudioToolboxAudioConverterNew(v19, (const AudioStreamBasicDescription *)v16, &cf, v17);
      mSampleRate = cf.mSampleRate;
      if (*(_QWORD *)&cf.mSampleRate)
        CFRetain(*(CFTypeRef *)&cf.mSampleRate);
      v21 = *(const void **)(v10 + 48);
      *(Float64 *)(v10 + 48) = mSampleRate;
      if (v21)
        CFRelease(v21);
    }
    v22 = *a3;
    *(_OWORD *)&cf.mBytesPerFrame = a3[1];
    if (2 * (uint64_t)a2 <= (unint64_t)v15)
      v23 = (unint64_t)v15;
    else
      v23 = 2 * (_QWORD)a2;
    *(_QWORD *)&cf.mSampleRate = off_1E34087C0;
    v40 = *((_QWORD *)a3 + 4);
    *(_OWORD *)&cf.mFormatID = v22;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, AudioStreamBasicDescription *, uint64_t))(**(_QWORD **)(v10 + 184)
                                                                                                  + 16))(&v45, *(_QWORD *)(v10 + 184), &cf, v23);
    v24 = v45;
    v45 = 0;
    v25 = *(_QWORD *)(v10 + 80);
    *(_QWORD *)(v10 + 80) = v24;
    if (v25)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v26 = v45;
      v45 = 0;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    if (v14 <= 2)
      v27 = 2;
    else
      v27 = v14;
    v28 = 16 * (v27 - 1) + 24;
    v29 = operator new(v28);
    v30 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = v29;
    if (v30)
    {
      MEMORY[0x19AEA7644](v30, 0x1080C404ACF7207);
      v29 = *(void **)(v10 + 56);
    }
    bzero(v29, v28);
    **(_DWORD **)(v10 + 56) = v14;
    v31 = *(_QWORD *)(v10 + 160);
    if (!v31)
    {
      v31 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = v10;
      v33 = *(unsigned int **)(v10 + 160);
      *(_QWORD *)(v10 + 160) = v31;
      if (v33)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v32);
        }
        v31 = *(_QWORD *)(v10 + 160);
      }
    }
    do
      v36 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v36 + 1, (unsigned int *)v31));
    v37 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v37 = &off_1E31F6C88;
    *(_QWORD *)(v37 + 8) = v31;
    *(_DWORD *)(v37 + 16) = v14;
    *(double *)(v37 + 24) = v15;
    *(_QWORD *)&cf.mSampleRate = v37;
    WTF::callOnMainThread();
    result = *(_QWORD *)&cf.mSampleRate;
    cf.mSampleRate = 0.0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v38 = __ldxr(v8);
  if (v38 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

void sub_194679CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned __int8 *v10;
  int v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v12 = __ldxr(v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, v10))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v10);
  goto LABEL_8;
}

uint64_t WebCore::AudioSourceProviderAVFObjC::unprepareCallback(WebCore::AudioSourceProviderAVFObjC *this, const opaqueMTAudioProcessingTap *a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  result = PAL::softLinkMediaToolboxMTAudioProcessingTapGetStorage(this, a2);
  v3 = result;
  v4 = (unsigned __int8 *)(result + 16);
  if (__ldaxr((unsigned __int8 *)(result + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 16);
LABEL_5:
  v6 = *(_QWORD **)(v3 + 8);
  if (v6)
  {
    v7 = v6[8];
    v6[8] = 0;
    if (v7)
      MEMORY[0x19AEA7644](v7, 0x1000C400A747E1ELL);
    v8 = v6[9];
    v6[9] = 0;
    if (v8)
      MEMORY[0x19AEA7644](v8, 0x1000C400A747E1ELL);
    v9 = v6[10];
    v6[10] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = v6[7];
    v6[7] = 0;
    if (result)
      result = MEMORY[0x19AEA7644](result, 0x1080C404ACF7207);
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::AudioSourceProviderAVFObjC::processCallback(WebCore::AudioSourceProviderAVFObjC *this, const opaqueMTAudioProcessingTap *a2, uint64_t a3, const AudioBufferList *a4, AudioBufferList *a5, AudioBufferList *a6, unsigned int *a7)
{
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  _BOOL4 v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  _BOOL4 v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  PAL *v33;
  OpaqueCMTimebase *v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  _BOOL4 v39;
  char v40;
  BOOL v41;
  uint64_t v42;
  const WTF::MediaTime *v43;
  uint64_t v44;
  double v45;
  double v46;
  unint64_t v47;
  int v48;
  char v49;
  unint64_t v50;
  void **p_mData;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD v57[2];
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  CMTimeRange v65;

  result = PAL::softLinkMediaToolboxMTAudioProcessingTapGetStorage(this, a2);
  v14 = result;
  v15 = (unsigned __int8 *)(result + 16);
  if (__ldaxr((unsigned __int8 *)(result + 16)))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C](result + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v15))
    goto LABEL_4;
LABEL_5:
  v17 = *(_QWORD *)(v14 + 8);
  if (v17)
  {
    if (*(_QWORD *)(v17 + 80))
    {
      v65.start.value = 0;
      result = PAL::softLinkMediaToolboxMTAudioProcessingTapGetSourceAudio(this, a2, (uint64_t)a4, a6, (unsigned int *)&v59, &v65, v13);
      if (!(_DWORD)result)
      {
        if (v65.start.value)
        {
          v18 = v60;
          v19 = v61 & 1;
          if ((~v61 & 3) == 0)
            v19 = v61 & 1 | 2;
          if ((~v61 & 5) == 0)
            v19 |= 4u;
          if ((~v61 & 9) == 0)
            v19 |= 8u;
          if ((~v61 & 0x11) != 0)
            v20 = v19;
          else
            v20 = v19 | 0x10;
          v22 = (v20 & 1) == 0 || v60 != 0;
          if (v59 >= 0)
            result = 5;
          else
            result = 9;
          v23 = !v22;
          if (v22)
          {
            v24 = v59;
          }
          else
          {
            v20 = result;
            v24 = v59 >> 63;
          }
          if (v23)
            v18 = 1;
          *(_QWORD *)&v58 = v24;
          *((_QWORD *)&v58 + 1) = v18 | ((unint64_t)v20 << 32);
          v25 = v63;
          v26 = v64 & 1 | 2;
          if ((~v64 & 3) != 0)
            v26 = v64 & 1;
          if ((~v64 & 5) == 0)
            v26 |= 4u;
          if ((~v64 & 9) == 0)
            v26 |= 8u;
          if ((~v64 & 0x11) != 0)
            v27 = v26;
          else
            v27 = v26 | 0x10;
          v29 = (v27 & 1) == 0 || v63 != 0;
          if (v62 >= 0)
            v30 = 5;
          else
            v30 = 9;
          v31 = !v29;
          if (v29)
          {
            v32 = v62;
          }
          else
          {
            v27 = v30;
            v32 = v62 >> 63;
          }
          if (v31)
            v25 = 1;
          v57[0] = v32;
          v57[1] = v25 | ((unint64_t)v27 << 32);
          if ((v20 & 1) != 0)
          {
            v33 = (PAL *)objc_msgSend(*(id *)(v17 + 16), "timebase");
            result = PAL::softLinkCoreMediaCMTimebaseGetTime[0](v33, v34);
            v35 = v54;
            v36 = BYTE4(v54) & 1;
            if ((~HIDWORD(v54) & 3) == 0)
              v36 = BYTE4(v54) & 1 | 2;
            if ((~HIDWORD(v54) & 5) == 0)
              v36 |= 4u;
            if ((~HIDWORD(v54) & 9) == 0)
              v36 |= 8u;
            if ((~HIDWORD(v54) & 0x11) != 0)
              v37 = v36;
            else
              v37 = v36 | 0x10;
            v39 = (v37 & 1) == 0 || v54 != 0;
            if (v53 >= 0)
              v40 = 5;
            else
              v40 = 9;
            v41 = !v39;
            if (v39)
            {
              v42 = v53;
            }
            else
            {
              v37 = v40;
              v42 = v53 >> 63;
            }
            if (v41)
              v35 = 1;
            v55 = v42;
            v56 = v35 | ((unint64_t)v37 << 32);
            if ((v37 & 1) != 0)
            {
              result = WTF::MediaTime::compare((WTF::MediaTime *)&v58, (const WTF::MediaTime *)(v17 + 88));
              if ((_DWORD)result
                && (v43 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)result),
                    result = WTF::MediaTime::compare((WTF::MediaTime *)v57, v43),
                    (_DWORD)result))
              {
                if (*(_BYTE *)(v17 + 144))
                {
                  *(_BYTE *)(v17 + 144) = 0;
                  v53 = WTF::MediaTime::operator-();
                  v54 = v44;
                  v45 = **(double **)(v17 + 64);
                  WTF::MediaTime::toDouble((WTF::MediaTime *)&v53);
                  *(_QWORD *)(v17 + 120) = (unint64_t)(v45 * v46);
                }
                v47 = *(_QWORD *)(*(_QWORD *)(v17 + 80) + 64);
                if (WTF::MediaTime::compare((WTF::MediaTime *)&v58, (const WTF::MediaTime *)(v17 + 104)))
                  *(_QWORD *)(v17 + 136) = v47;
                *(_QWORD *)(v17 + 88) = v58;
                *(_QWORD *)(v17 + 93) = *(_QWORD *)((char *)&v58 + 5);
                *(_QWORD *)(v17 + 104) = WTF::MediaTime::operator+();
                *(_DWORD *)(v17 + 112) = v48;
                *(_BYTE *)(v17 + 116) = v49;
                if (a6 && (a6->mNumberBuffers & 0x100) != 0)
                  *(_QWORD *)(v17 + 136) = v47;
                WebCore::CARingBuffer::store(*(WebCore::CARingBuffer **)(v17 + 80), a4, v65.start.value, v47);
                if (a4->mNumberBuffers)
                {
                  v50 = 0;
                  p_mData = &a4->mBuffers[0].mData;
                  do
                  {
                    bzero(*p_mData, *((unsigned int *)p_mData - 1));
                    ++v50;
                    p_mData += 2;
                  }
                  while (v50 < a4->mNumberBuffers);
                }
                *(_QWORD *)&a5->mNumberBuffers = 0;
                result = *(_QWORD *)(v17 + 176);
                if (result)
                  result = (*(uint64_t (**)(uint64_t, unint64_t, CMTimeValue))(*(_QWORD *)result + 16))(result, v47, v65.start.value);
              }
              else
              {
                *(_BYTE *)(v17 + 144) = 1;
              }
            }
          }
        }
      }
    }
  }
  v52 = __ldxr(v15);
  if (v52 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v15);
  }
  if (__stlxr(0, v15))
    return WTF::Lock::unlockSlow((WTF::Lock *)v15);
  return result;
}

void sub_19467A1F0(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WebCore::AudioSourceProviderAVFObjC::setAudioCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioSourceProviderAVFObjC::setConfigureAudioStorageCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioSourceProviderAVFObjC::isHandlingAVPlayer(WebCore::AudioSourceProviderAVFObjC *this)
{
  return 1;
}

void WTF::Detail::CallableWrapper<WebCore::AudioSourceProviderAVFObjC::AudioSourceProviderAVFObjC(AVPlayerItem *)::$_0,std::unique_ptr<WebCore::CARingBuffer>,WebCore::CAAudioStreamDescription const&,unsigned long>::call(WebCore::InProcessCARingBuffer *this@<X1>, WebCore::CAAudioStreamDescription *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  WebCore::InProcessCARingBuffer::allocate(this, a2, &v4);
  *a3 = v4;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioSourceProviderAVFObjC::prepare(long,AudioStreamBasicDescription const*)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E31F6C88;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioSourceProviderAVFObjC::prepare(long,AudioStreamBasicDescription const*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E31F6C88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioSourceProviderAVFObjC::prepare(long,AudioStreamBasicDescription const*)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (***v4)(_QWORD, _QWORD, float);
  float v5;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 152);
      if (v3)
      {
        v4 = *(uint64_t (****)(_QWORD, _QWORD, float))(v3 + 8);
        if (v4)
        {
          v5 = *(double *)(result + 24);
          return (**v4)(v4, *(int *)(result + 16), v5);
        }
      }
    }
  }
  return result;
}

cbor::CBORValue *WebCore::AuthenticationExtensionsClientInputs::fromCBOR@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  cbor::CBORValue *v4;
  WTF::StringImpl *v5;
  cbor::CBORValue *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  BOOL v9;
  BOOL isString;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **String;
  uint64_t v14;
  WTF::StringImpl *v15;
  BOOL v16;
  BOOL isBool;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  BOOL v22;
  BOOL isMap;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  BOOL v41;
  BOOL isByteString;
  uint64_t v43;
  uint64_t v44;
  uint64_t ByteString;
  _BYTE v47[16];
  _BYTE v48[16];
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;
  BOOL v55;
  _BYTE v56[2];
  uint64_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[32];
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[32];
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[32];
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[32];
  uint64_t v76;
  uint64_t Map;
  uint64_t v78;
  BOOL Bool;
  uint64_t v80;
  int v81;
  _BYTE v82[40];
  _QWORD v83[4];
  _QWORD v84[4];
  WTF::DeferrableRefCountedBase *v85;

  v83[2] = a3;
  v83[1] = a2;
  v83[0] = a1;
  cbor::CBORReader::read(v83, 0, 0x10u, (uint64_t)v82);
  if ((std::optional<cbor::CBORValue>::operator BOOL[abi:sn180100]((uint64_t)v82) & 1) != 0
    && (std::optional<cbor::CBORValue>::operator->[abi:sn180100]((uint64_t)v82), cbor::CBORValue::isMap(v4)))
  {
    WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs((WebCore::AuthenticationExtensionsClientInputs *)&v78);
    std::optional<cbor::CBORValue>::operator->[abi:sn180100]((uint64_t)v82);
    Map = cbor::CBORValue::getMap(v6);
    v7 = Map;
    cbor::CBORValue::CBORValue((cbor::CBORValue *)v75, "appid");
    v76 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::find[abi:sn180100](v7, (cbor::CBORValue *)v75);
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v75, v8);
    v74 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::end[abi:sn180100]();
    v9 = std::operator!=[abi:sn180100](&v76, &v74);
    isString = 0;
    if (v9)
    {
      std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v76);
      isString = cbor::CBORValue::isString((cbor::CBORValue *)(v11 + 32));
    }
    if (isString)
    {
      std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v76);
      String = (WTF::StringImpl **)cbor::CBORValue::getString((cbor::CBORValue *)(v12 + 32));
      WTF::String::operator=(&v78, String);
    }
    v14 = Map;
    cbor::CBORValue::CBORValue((cbor::CBORValue *)v72, "credProps");
    v73 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::find[abi:sn180100](v14, (cbor::CBORValue *)v72);
    v76 = v73;
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v72, v15);
    v71 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::end[abi:sn180100]();
    v16 = std::operator!=[abi:sn180100](&v76, &v71);
    isBool = 0;
    if (v16)
    {
      std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v76);
      isBool = cbor::CBORValue::isBool((cbor::CBORValue *)(v18 + 32));
    }
    if (isBool)
    {
      std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v76);
      Bool = cbor::CBORValue::getBool((cbor::CBORValue *)(v19 + 32));
    }
    v20 = Map;
    cbor::CBORValue::CBORValue((cbor::CBORValue *)v69, "largeBlob");
    v70 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::find[abi:sn180100](v20, (cbor::CBORValue *)v69);
    v76 = v70;
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v69, v21);
    v68 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::end[abi:sn180100]();
    v22 = std::operator!=[abi:sn180100](&v76, &v68);
    isMap = 0;
    if (v22)
    {
      std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v76);
      isMap = cbor::CBORValue::isMap((cbor::CBORValue *)(v24 + 32));
    }
    if (isMap)
    {
      std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v76);
      v67 = cbor::CBORValue::getMap((cbor::CBORValue *)(v25 + 32));
      WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v63);
      v26 = v67;
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v61, "support");
      v62 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::find[abi:sn180100](v26, (cbor::CBORValue *)v61);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v61, v27);
      v60 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::end[abi:sn180100]();
      v28 = std::operator!=[abi:sn180100](&v62, &v60);
      v29 = 0;
      if (v28)
      {
        std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v62);
        v29 = cbor::CBORValue::isString((cbor::CBORValue *)(v30 + 32));
      }
      if (v29)
      {
        std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v62);
        v32 = (WTF::StringImpl **)cbor::CBORValue::getString((cbor::CBORValue *)(v31 + 32));
        WTF::String::operator=(&v63, v32);
      }
      v33 = v67;
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v58, "read");
      v59 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::find[abi:sn180100](v33, (cbor::CBORValue *)v58);
      v62 = v59;
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v58, v34);
      v57 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::end[abi:sn180100]();
      v35 = std::operator!=[abi:sn180100](&v62, &v57);
      v36 = 0;
      if (v35)
      {
        std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v62);
        v36 = cbor::CBORValue::isBool((cbor::CBORValue *)(v37 + 32));
      }
      if (v36)
      {
        std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v62);
        v55 = cbor::CBORValue::getBool((cbor::CBORValue *)(v38 + 32));
        std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(v56, &v55);
        v64 = v56[0];
        v65 = v56[1];
      }
      v39 = v67;
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v53, "write");
      v54 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::find[abi:sn180100](v39, (cbor::CBORValue *)v53);
      v62 = v54;
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v53, v40);
      v52 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::end[abi:sn180100]();
      v41 = std::operator!=[abi:sn180100](&v62, &v52);
      isByteString = 0;
      if (v41)
      {
        std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v62);
        isByteString = cbor::CBORValue::isByteString((cbor::CBORValue *)(v43 + 32));
      }
      if (isByteString)
      {
        std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100]((uint64_t)&v62);
        ByteString = cbor::CBORValue::getByteString((cbor::CBORValue *)(v44 + 32));
        std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v49, ByteString);
        JSC::ArrayBuffer::create();
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>>((uint64_t *)&v51, &v50);
        WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v50);
        std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&,0,0,0,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,1ul,0>((uint64_t)v47, &v51);
        WebCore::BufferSource::BufferSource((uint64_t)v48, (uint64_t)v47);
        std::optional<WebCore::BufferSource>::operator=[abi:sn180100]<WebCore::BufferSource,void>((uint64_t)&v66, (uint64_t)v48);
        WebCore::BufferSource::~BufferSource((WebCore::BufferSource *)v48);
        std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100]((uint64_t)v47);
        v83[3] = &v51;
        v84[1] = &v51;
        v84[0] = 0;
        v84[3] = &v51;
        v84[2] = v84;
        v85 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)&v51);
        if (v85)
          WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v85);
      }
      std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&,void>((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v80, (const WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v63);
      WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)&v63);
    }
    std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,0>((uint64_t)a3, (uint64_t)&v78);
    v81 = 1;
    WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs((WebCore::AuthenticationExtensionsClientInputs *)&v78);
  }
  else
  {
    std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](a3);
    v81 = 1;
  }
  return std::optional<cbor::CBORValue>::~optional((cbor::CBORValue *)v82, v5);
}

uint64_t std::optional<cbor::CBORValue>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<cbor::CBORValue,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<cbor::CBORValue>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<cbor::CBORValue,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

BOOL cbor::CBORValue::isMap(cbor::CBORValue *this)
{
  return cbor::CBORValue::type(this) == 5;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs *WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(WebCore::AuthenticationExtensionsClientInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(this);
  return this;
}

{
  WTF::String::String(this);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100]((_BYTE *)this + 16);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100]((_BYTE *)this + 64);
  return this;
}

uint64_t std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::find[abi:sn180100](uint64_t a1, cbor::CBORValue *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(a1, a2);
  std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::__map_const_iterator[abi:sn180100](&v4, v3);
  return v4;
}

BOOL std::operator!=[abi:sn180100](_QWORD *a1, _QWORD *a2)
{
  return std::operator!=[abi:sn180100](a1, a2);
}

{
  return !std::operator==[abi:sn180100](a1, a2);
}

uint64_t std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::end[abi:sn180100]()
{
  uint64_t v1;
  uint64_t v2;

  v1 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::end[abi:sn180100]();
  std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::__map_const_iterator[abi:sn180100](&v2, v1);
  return v2;
}

void std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::operator->[abi:sn180100](uint64_t a1)
{
  std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::operator->[abi:sn180100](a1);
  std::__value_type<cbor::CBORValue,cbor::CBORValue>::__get_value[abi:sn180100]();
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

BOOL cbor::CBORValue::isString(cbor::CBORValue *this)
{
  return cbor::CBORValue::type(this) == 3;
}

BOOL cbor::CBORValue::isBool(cbor::CBORValue *this)
{
  BOOL isSimple;
  BOOL v3;

  isSimple = cbor::CBORValue::isSimple(this);
  v3 = 0;
  if (isSimple)
  {
    v3 = 1;
    if (*((_DWORD *)this + 2) != 21)
      return *((_DWORD *)this + 2) == 20;
  }
  return v3;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(this);
  return this;
}

{
  WTF::String::String(this);
  std::optional<BOOL>::optional[abi:sn180100]((_BYTE *)this + 8);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((_BYTE *)this + 16);
  return this;
}

_BYTE *std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(_BYTE *a1, _BYTE *a2)
{
  std::optional<BOOL>::optional[abi:sn180100]<BOOL,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

BOOL cbor::CBORValue::isByteString(cbor::CBORValue *this)
{
  return cbor::CBORValue::type(this) == 2;
}

uint64_t *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t *a1, uint64_t a2)
{
  std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a2);
  return a1;
}

{
  *a1 = std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2);
  a1[1] = std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a2);
  return a1;
}

uint64_t *WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>>(uint64_t *a1, uint64_t *a2)
{
  WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>>(a1, a2);
  return a1;
}

{
  *a1 = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::leakRef(a2);
  return a1;
}

uint64_t *WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(uint64_t *a1)
{
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a1);
  return a1;
}

{
  uint64_t v2;
  WTF::DeferrableRefCountedBase *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  WTF::DeferrableRefCountedBase *v8;

  v4 = a1;
  v5 = a1;
  v3 = 0;
  v2 = 0;
  v7 = a1;
  v6 = &v2;
  v3 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v3)
  {
    v8 = v3;
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v3);
  }
  return v5;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&,0,0,0,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,1ul,0>(uint64_t a1, _DWORD **a2)
{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&,0,0,0,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,1ul,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm1EJRSE_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t WebCore::BufferSource::BufferSource(uint64_t a1, uint64_t a2)
{
  WebCore::BufferSource::BufferSource(a1, a2);
  return a1;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::optional<WebCore::BufferSource>::operator=[abi:sn180100]<WebCore::BufferSource,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if ((std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1) == 0)
    return std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>(a1, a2);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return WebCore::BufferSource::operator=(v3, a2);
}

void WebCore::BufferSource::~BufferSource(WebCore::BufferSource *this)
{
  WebCore::BufferSource::~BufferSource(this);
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100]((uint64_t)this);
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100](uint64_t a1)
{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~variant[abi:sn180100](a1);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator=[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&,void>(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, const WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a2)
{
  uint64_t v3;

  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100]((uint64_t)a1) & 1) == 0)
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&>(a1, a2);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return (WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=(v3, (uint64_t)a2);
}

void WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[2];
  WTF::StringImpl *v4;
  _QWORD *v5;
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *v6;

  std::optional<WebCore::BufferSource>::~optional((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)((char *)this + 16));
  v3[1] = this;
  v3[0] = 0;
  v6 = this;
  v5 = v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4)
    WTF::StringImpl::deref(v4, v2);
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,0>(uint64_t a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs>::optional[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__127__optional_move_assign_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(WebCore::AuthenticationExtensionsClientInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(this);
}

{
  WTF::StringImpl *v2;
  _QWORD v3[2];
  WTF::StringImpl *v4;
  _QWORD *v5;
  WebCore::AuthenticationExtensionsClientInputs *v6;

  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs *)((char *)this + 64));
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional((WebCore::AuthenticationExtensionsClientInputs *)((char *)this + 16));
  v3[1] = this;
  v3[0] = 0;
  v6 = this;
  v5 = v3;
  v4 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this);
  if (v4)
    WTF::StringImpl::deref(v4, v2);
}

cbor::CBORValue *std::optional<cbor::CBORValue>::~optional(cbor::CBORValue *a1, WTF::StringImpl *a2)
{
  std::optional<cbor::CBORValue>::~optional(a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<cbor::CBORValue,false>::~__optional_move_assign_base(a1, a2);
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::toCBOR@<X0>(WebCore::AuthenticationExtensionsClientInputs *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::String *v10;
  const WTF::String *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  _BYTE v33[32];
  _BYTE v34[24];
  _BYTE v35[32];
  int v36[8];
  _BYTE v37[32];
  int v38[8];
  _BYTE v39[32];
  int v40[8];
  _BYTE v41[32];
  int v42[8];
  _BYTE v43[24];
  _BYTE v44[32];
  int v45[8];
  _BYTE v46[32];
  int v47[8];
  _QWORD v48[5];

  v48[4] = a2;
  v48[3] = this;
  std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::map[abi:sn180100]((uint64_t)v48);
  if (!WTF::String::isEmpty((WTF::StringImpl **)this))
  {
    cbor::CBORValue::CBORValue((uint64_t)v47, this);
    cbor::CBORValue::CBORValue((cbor::CBORValue *)v46, "appid");
    v4 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::operator[]((uint64_t)v48, (cbor::CBORValue *)v46);
    cbor::CBORValue::operator=(v4, v47);
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v46, v5);
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v47, v6);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    cbor::CBORValue::CBORValue(v45, *((_BYTE *)this + 8) & 1);
    cbor::CBORValue::CBORValue((cbor::CBORValue *)v44, "credProps");
    v7 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::operator[]((uint64_t)v48, (cbor::CBORValue *)v44);
    cbor::CBORValue::operator=(v7, v45);
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v44, v8);
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v45, v9);
  }
  if ((std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator BOOL[abi:sn180100]((uint64_t)this + 16) & 1) != 0)
  {
    std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::map[abi:sn180100]((uint64_t)v43);
    std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)this + 16);
    if (!WTF::String::isNull(v10))
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)this + 16);
      cbor::CBORValue::CBORValue((uint64_t)v42, v11);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v41, "support");
      v12 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::operator[]((uint64_t)v43, (cbor::CBORValue *)v41);
      cbor::CBORValue::operator=(v12, v42);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v41, v13);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v42, v14);
    }
    std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)this + 16);
    if ((std::optional<BOOL>::operator BOOL[abi:sn180100](v15 + 8) & 1) != 0)
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)this + 16);
      std::optional<BOOL>::value[abi:sn180100](v16 + 8);
      cbor::CBORValue::CBORValue(v40, *v17 & 1);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v39, "read");
      v18 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::operator[]((uint64_t)v43, (cbor::CBORValue *)v39);
      cbor::CBORValue::operator=(v18, v40);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v39, v19);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v40, v20);
    }
    std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)this + 16);
    if ((std::optional<WebCore::BufferSource>::operator BOOL[abi:sn180100](v21 + 16) & 1) != 0)
    {
      std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100]((uint64_t)this + 16);
      std::optional<WebCore::BufferSource>::value[abi:sn180100](v22 + 16);
      cbor::CBORValue::CBORValue((uint64_t)v38, v23);
      cbor::CBORValue::CBORValue((cbor::CBORValue *)v37, "write");
      v24 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::operator[]((uint64_t)v43, (cbor::CBORValue *)v37);
      cbor::CBORValue::operator=(v24, v38);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v37, v25);
      cbor::CBORValue::~CBORValue((cbor::CBORValue *)v38, v26);
    }
    cbor::CBORValue::CBORValue(v36, v43);
    cbor::CBORValue::CBORValue((cbor::CBORValue *)v35, "largeBlob");
    v27 = std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::operator[]((uint64_t)v48, (cbor::CBORValue *)v35);
    cbor::CBORValue::operator=(v27, v36);
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v35, v28);
    cbor::CBORValue::~CBORValue((cbor::CBORValue *)v36, v29);
    std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100]((uint64_t)v43);
  }
  cbor::CBORValue::CBORValue((uint64_t)v33, v48);
  cbor::CBORWriter::write((cbor::CBORWriter *)v33, (const cbor::CBORValue *)0x10, (uint64_t)v34);
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)v33, v30);
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator*[abi:sn180100]((uint64_t)v34);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, v31);
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)v34);
  return std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100]((uint64_t)v48);
}

uint64_t std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::map[abi:sn180100](uint64_t a1)
{
  std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::map[abi:sn180100](a1);
  return a1;
}

{
  char v3;
  uint64_t v4;

  v4 = a1;
  std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::__map_value_compare[abi:sn180100]((uint64_t)&v3);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__tree(a1, (uint64_t)&v3);
  return a1;
}

BOOL WTF::String::isEmpty(WTF::StringImpl **this)
{
  BOOL v2;
  BOOL v3;

  v2 = WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(this);
  v3 = 1;
  if (!v2)
    return WTF::StringImpl::isEmpty(*this);
  return v3;
}

uint64_t std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::operator[](uint64_t a1, cbor::CBORValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  _QWORD v10[4];

  v10[3] = a1;
  v10[2] = a2;
  v9 = std::forward_as_tuple[abi:sn180100]<cbor::CBORValue>((uint64_t)a2);
  JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(v9);
  v4 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, &v9, (uint64_t)&v8);
  v10[1] = v5;
  v10[0] = v4;
  std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::operator->[abi:sn180100]((uint64_t)v10);
  std::__value_type<cbor::CBORValue,cbor::CBORValue>::__get_value[abi:sn180100]();
  return v6 + 32;
}

uint64_t std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::operator->[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

BOOL WTF::String::isNull(WTF::String *this)
{
  return WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(this);
}

uint64_t std::optional<BOOL>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<BOOL,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<BOOL>::value[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<BOOL,false>::has_value[abi:sn180100](a1) & 1) == 0)
    std::__throw_bad_optional_access[abi:sn180100]();
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t std::optional<WebCore::BufferSource>::operator BOOL[abi:sn180100](uint64_t a1)
{
  return std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1;
}

void std::optional<WebCore::BufferSource>::value[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1) == 0)
    std::__throw_bad_optional_access[abi:sn180100]();
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100](uint64_t a1)
{
  std::map<cbor::CBORValue,cbor::CBORValue,cbor::CBORValue::CTAPLess,WTF::FastAllocator<std::pair<cbor::CBORValue const,cbor::CBORValue>>>::~map[abi:sn180100](a1);
  return a1;
}

{
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(a1);
  return a1;
}

void std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator*[abi:sn180100](uint64_t a1)
{
  if ((std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a1) & 1) == 0)
    __break(1u);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

{
  WTF::FastMalloc *v3;
  int v4;
  const void *v5;
  uint64_t v6;
  void *v7;

  v3 = (WTF::FastMalloc *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a2);
  v4 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a2);
  WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer(a1, v3, v4);
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a2);
  WTF::VectorDestructor<false,unsigned char>::destruct();
  if (WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1))
  {
    v5 = (const void *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a2);
    v6 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a2);
    v7 = (void *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::VectorTypeOperations<unsigned char>::uninitializedCopy(v5, v6, v7);
  }
  return a1;
}

uint64_t std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1)
{
  std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<cbor::CBORValue,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 32) & 1;
}

uint64_t cbor::CBORValue::type(cbor::CBORValue *this)
{
  return *(unsigned int *)this;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[144] = 0;
  return result;
}

WTF::String *WTF::String::String(WTF::String *this)
{
  WTF::String::String(this);
  return this;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_QWORD *WTF::String::String(_QWORD *this)
{
  *this = 0;
  return this;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[40] = 0;
  return result;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[72] = 0;
  return result;
}

uint64_t *std::swap[abi:sn180100]<WTF::StringImpl *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  return v2;
}

BOOL cbor::CBORValue::isSimple(cbor::CBORValue *this)
{
  return cbor::CBORValue::type(this) == 7;
}

_BYTE *std::optional<BOOL>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<BOOL>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(a1);
  return a1;
}

_BYTE *std::optional<WebCore::BufferSource>::optional[abi:sn180100](_BYTE *a1)
{
  std::optional<WebCore::BufferSource>::optional[abi:sn180100](a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_assign_base<BOOL,true>::__optional_move_assign_base(_BYTE *a1)
{
  std::__optional_copy_assign_base<BOOL,true>::__optional_copy_assign_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<BOOL,true>::__optional_copy_assign_base(_BYTE *a1)
{
  std::__optional_move_base<BOOL,true>::__optional_move_base(a1);
  return a1;
}

_BYTE *std::__optional_move_base<BOOL,true>::__optional_move_base(_BYTE *a1)
{
  std::__optional_copy_base<BOOL,true>::__optional_copy_base(a1);
  return a1;
}

_BYTE *std::__optional_copy_base<BOOL,true>::__optional_copy_base(_BYTE *a1)
{
  std::__optional_storage_base<BOOL,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<BOOL,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<BOOL,true>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<BOOL,true>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

_BYTE *std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::__optional_storage_base(a1);
  return a1;
}

_BYTE *std::__optional_storage_base<WebCore::BufferSource,false>::__optional_storage_base(_BYTE *a1)
{
  std::__optional_destruct_base<WebCore::BufferSource,false>::__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__optional_destruct_base<WebCore::BufferSource,false>::__optional_destruct_base[abi:sn180100](_BYTE *result)
{
  *result = 0;
  result[16] = 0;
  return result;
}

_BYTE *_ZNSt3__127__optional_move_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__127__optional_copy_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__127__optional_copy_assign_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__120__optional_move_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__120__optional_move_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__120__optional_copy_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__120__optional_copy_baseIbLb1EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  _ZNSt3__123__optional_storage_baseIbLb0EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

_BYTE *_ZNSt3__123__optional_storage_baseIbLb0EECI2NS_24__optional_destruct_baseIbLb1EEEIJbEEENS_10in_place_tEDpOT_(_BYTE *a1, _BYTE *a2)
{
  std::__optional_destruct_base<BOOL,true>::__optional_destruct_base[abi:sn180100]<BOOL>(a1, a2);
  return a1;
}

_BYTE *std::__optional_destruct_base<BOOL,true>::__optional_destruct_base[abi:sn180100]<BOOL>(_BYTE *result, _BYTE *a2)
{
  *result = *a2 & 1;
  result[1] = 1;
  return result;
}

uint64_t std::ranges::__data::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::data(a1);
}

uint64_t std::ranges::__size::__fn::operator()[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(a1);
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::data(uint64_t a1)
{
  return WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer(a1);
}

uint64_t WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI1NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm1EJRSE_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm1EJRSE_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS2_12RawPtrTraitsIS5_EENS2_21DefaultRefDerefTraitsIS5_EEEENS3_INS4_11ArrayBufferENS6_ISB_EENS8_ISB_EEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSA_SE_EEEILm1EJRSE_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__copy_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail17__move_assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEILm1EJRSF_EEENS_16in_place_index_tIXT_EEEDpOT0_(uint64_t a1, _DWORD **a2)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(uint64_t a1, _DWORD **a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 8) = 1;
  return a1;
}

_QWORD *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(_QWORD *a1, _DWORD **a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(a1, a2);
  return a1;
}

{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(a1, a2);
  return a1;
}

_QWORD *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(_QWORD *a1, _DWORD **a2)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(a1, a2);
  return a1;
}

{
  std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(a1, a2);
  return a1;
}

_QWORD *std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(_QWORD *a1, _DWORD **a2)
{
  std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(a1, a2);
  return a1;
}

{
  _DWORD *v5;

  v5 = *a2;
  if (*a2)
    WTF::StringImpl::ref(v5);
  *a1 = v5;
  return a1;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__impl[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(a1, a2);
  return a1;
}

{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assignment(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(a1, a2);
  return a1;
}

{
  _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v5);
    result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 8) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEECI2NS0_6__baseILNS0_6_TraitE1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100](a1);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__base[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100]((_BYTE *)a1);
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

_BYTE *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](_BYTE *a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](a1);
  return a1;
}

_BYTE *std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__union[abi:sn180100](_BYTE *result)
{
  *result = 0;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](uint64_t a1)
{
  uint64_t result;
  char v3;
  uint64_t v4;

  v4 = a1;
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](a1);
  if ((result & 1) == 0)
    result = _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0_((uint64_t)&v3, a1);
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

BOOL std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](uint64_t a1)
{
  return std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1) == -1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == -1)
    return -1;
  else
    return *(unsigned int *)(a1 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSI_1EJSC_SG_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  v7 = v6;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return v4(v5, v7, v8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;

  v9 = a1;
  v8[2] = a2;
  v8[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_;
  v8[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_;
  v2 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a2);
  _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSK_1EJSE_SI_EEEELm2EJEEEODaRKNS_8__farrayISM_XT0_EEEmDpT1_((uint64_t)v8, v2);
  v4 = *v3;
  v5 = v9;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return v4(v5, v6);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1)
{
  uint64_t *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(a1, v2);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1)
{
  uint64_t *v2;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESG_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(a1, v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base4__atB8sn180100IPFvOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS0_6__baseILSK_1EJSE_SI_EEEELm2EJEEEODaRKNS_8__farrayISM_XT0_EEEmDpT1_(uint64_t a1, uint64_t a2)
{
  _ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSI_1EJSC_SG_EEEELm2EEixB8sn180100Em(a1, a2);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm0ESC_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(a1, a2);
}

void std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>()
{
  std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(uint64_t *a1)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::~__alt(a1);
  return a1;
}

{
  _QWORD v3[2];
  WTF::RefCountedBase *v4;
  _QWORD *v5;
  uint64_t *v6;

  v3[1] = a1;
  v3[0] = 0;
  v6 = a1;
  v5 = v3;
  v4 = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
    WTF::RefCounted<JSC::ArrayBufferView>::deref(v4);
  return a1;
}

uint64_t WTF::RefCounted<JSC::ArrayBufferView>::deref(WTF::RefCountedBase *a1)
{
  uint64_t result;

  result = WTF::RefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    if (a1)
      return JSC::ArrayBufferView::operator delete();
  }
  return result;
}

uint64_t WTF::RefCountedBase::derefBase(WTF::RefCountedBase *this)
{
  return WTF::RefCountedBase::derefAllowingPartiallyDestroyedBase(this) & 1;
}

uint64_t WTF::RefCountedBase::derefAllowingPartiallyDestroyedBase(WTF::RefCountedBase *this)
{
  char v3;

  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  if (*(_DWORD *)this == 1)
  {
    v3 = 1;
  }
  else
  {
    --*(_DWORD *)this;
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS1_5__altILm1ESG_EEEEEDTclclsr3stdE7declvalISK_EEspclsr3stdE7declvalIT0_EEEEOSK_DpOSQ_(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(a1, a2);
}

void std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>()
{
  std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,1ul>();
}

uint64_t *std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](void)::{lambda(std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &)#1}::operator()<std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(uint64_t a1, uint64_t *a2)
{
  return std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(a2);
}

uint64_t *std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(uint64_t *a1)
{
  std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__alt(a1);
  return a1;
}

{
  _QWORD v3[4];
  WTF::DeferrableRefCountedBase *v4;

  v3[1] = a1;
  v3[0] = 0;
  v3[3] = a1;
  v3[2] = v3;
  v4 = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v4)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v4);
  return a1;
}

void std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,1ul>()
{
  std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
}

uint64_t _ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSI_1EJSC_SG_EEEELm2EEixB8sn180100Em(uint64_t a1, uint64_t a2)
{
  return a1 + 8 * a2;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(a1, v3, v4);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(a1, v3, v4);
}

uint64_t *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100INS1_18__move_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS1_5__altILm0ESC_EESV_EEEDTclclsr3stdE7declvalISO_EEspclsr3stdE7declvalIT0_EEEESP_DpOSX_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ESB_EESV_EEDaSP_SR_(a1, a2, a3);
}

uint64_t *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSN_OT0_E_clINS0_5__altILm0ESB_EESV_EEDaSP_SR_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *result;

  result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(a2, a3);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(a1, a2);
}

uint64_t *std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t *a1, uint64_t *a2)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(a1, a2);
  return a1;
}

{
  *a1 = WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::leakRef(a2);
  return a1;
}

uint64_t WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::leakRef(uint64_t *a1)
{
  _QWORD v2[4];

  v2[1] = a1;
  v2[0] = 0;
  v2[3] = a1;
  v2[2] = v2;
  return std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 16) & 1;
}

uint64_t WebCore::BufferSource::operator=(uint64_t a1, uint64_t a2)
{
  return std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

{
  return std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(a1, a2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

{
  return std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](a1, a2);
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

{
  return std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(a1, a2);
}

{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::operator=(uint64_t a1, uint64_t a2)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](a1)
    || (result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v6);
      v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSK_SO_EEEDcmSQ_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSI_1EJSC_SG_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  v7 = v6;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return v4(v5, v7, v8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm0ESC_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm1ESG_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm0ESC_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm0ESB_EESU_EEDaSO_SQ_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm0ESB_EESU_EEDaSO_SQ_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD v4[2];
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
  else
  {
    WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(v6, v5);
  }
}

WTF::RefCountedBase *WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::RefCountedBase *result;
  uint64_t v4[4];
  _QWORD v5[2];
  WTF::RefCountedBase *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v10 = v4;
  v9 = a2;
  v12 = v4;
  v11 = a2;
  v4[0] = WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::leakRef(a2);
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::swap<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v8 = v4;
  v7 = v5;
  result = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  v6 = result;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<JSC::ArrayBufferView>::deref(v6);
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(*(_QWORD *)a1, *(uint64_t **)(a1 + 8));
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(v3, a2);
  *(_DWORD *)(a1 + 8) = 0;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100INS1_17__move_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS1_5__altILm1ESG_EESU_EEEDTclclsr3stdE7declvalISN_EEspclsr3stdE7declvalIT0_EEEESO_DpOSW_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm1ESF_EESU_EEDaSO_SQ_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSM_OT0_E_clINS0_5__altILm1ESF_EESU_EEDaSO_SQ_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD v4[2];
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1) == 1)
  {
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(v6, v5);
  }
  else
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
}

WTF::DeferrableRefCountedBase *WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::DeferrableRefCountedBase *result;
  uint64_t v4[8];
  _QWORD v5[4];
  WTF::DeferrableRefCountedBase *v6;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v4[5] = (uint64_t)v4;
  v4[4] = (uint64_t)a2;
  v4[7] = (uint64_t)v4;
  v4[6] = (uint64_t)a2;
  v4[0] = WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::leakRef(a2);
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::swap<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v5[3] = v4;
  v5[2] = v5;
  result = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  v6 = result;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(*(_QWORD *)a1, *(uint64_t **)(a1 + 8));
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>(v3, a2);
  *(_DWORD *)(a1 + 8) = 1;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource,WebCore::BufferSource*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  return WebCore::BufferSource::BufferSource(a1, a2);
}

uint64_t std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(uint64_t a1)
{
  std::__variant_detail::__impl<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__impl(a1);
  return a1;
}

{
  std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_assignment(uint64_t a1)
{
  std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_assignment(uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__assignment(a1);
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__assignment(uint64_t a1)
{
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(a1);
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__move_constructor(uint64_t a1)
{
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__ctor(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::~__ctor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__dtor(a1);
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base(a1);
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__base(uint64_t a1)
{
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__union(a1);
  return a1;
}

uint64_t std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__union(uint64_t a1)
{
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 40) & 1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  std::optional<WebCore::BufferSource>::operator=[abi:sn180100]((WebCore::BufferSource *)(a1 + 16), a2 + 16);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&>(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, const WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a2)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
  *((_BYTE *)a1 + 40) = 1;
  return result;
}

void std::optional<WebCore::BufferSource>::operator=[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_move_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](a1, a2);
}

void std::__optional_copy_assign_base<WebCore::BufferSource,false>::operator=[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(a1, a2);
}

void std::__optional_storage_base<WebCore::BufferSource,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BufferSource,false> const&>(WebCore::BufferSource *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const WebCore::BufferSource *v5;

  v3 = *((_BYTE *)a1 + 16) & 1;
  if (v3 == (std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2) & 1))
  {
    if ((*((_BYTE *)a1 + 16) & 1) != 0)
    {
      std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
      WebCore::BufferSource::operator=((uint64_t)a1, v4);
    }
  }
  else if ((*((_BYTE *)a1 + 16) & 1) != 0)
  {
    std::__optional_destruct_base<WebCore::BufferSource,false>::reset[abi:sn180100](a1);
  }
  else
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource const&>(a1, v5);
  }
}

void std::__optional_destruct_base<WebCore::BufferSource,false>::reset[abi:sn180100](WebCore::BufferSource *a1)
{
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
  {
    WebCore::BufferSource::~BufferSource(a1);
    *((_BYTE *)a1 + 16) = 0;
  }
}

WebCore::BufferSource *std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource const&>(WebCore::BufferSource *a1, const WebCore::BufferSource *a2)
{
  WebCore::BufferSource *result;

  result = std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource const&,WebCore::BufferSource*>(a1, a2);
  *((_BYTE *)a1 + 16) = 1;
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  if (!std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](a1)
    || (result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6),
        (result & 1) == 0))
  {
    if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v6))
    {
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
    }
    else
    {
      v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v6);
      v5 = a1;
      return _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRSK_SQ_EEEDcmSS_DpOT0_(v4, (uint64_t)&v5, a1, v6);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISJ_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRSK_SQ_EEEDcmSS_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSI_1EJSC_SG_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  v7 = v6;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return v4(v5, v7, v8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  WTF::RefCountedBase **v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100IRKNS1_17__copy_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS1_5__altILm0ESC_EERKSW_EEEDTclclsr3stdE7declvalISP_EEspclsr3stdE7declvalIT0_EEEESQ_DpOS10_(a1, v3, v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS11_EEEDcST_DpT0_(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  WTF::StringImpl **v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100IRKNS1_17__copy_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS1_5__altILm1ESG_EERKSW_EEEDTclclsr3stdE7declvalISP_EEspclsr3stdE7declvalIT0_EEEESQ_DpOS10_(a1, v3, v4);
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100IRKNS1_17__copy_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS1_5__altILm0ESC_EERKSW_EEEDTclclsr3stdE7declvalISP_EEspclsr3stdE7declvalIT0_EEEESQ_DpOS10_(uint64_t *a1, uint64_t *a2, WTF::RefCountedBase **a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSO_OT0_E_clINS0_5__altILm0ESB_EERKSW_EEDaSQ_SS_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSO_OT0_E_clINS0_5__altILm0ESB_EERKSW_EEDaSQ_SS_(uint64_t *a1, uint64_t *a2, WTF::RefCountedBase **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(uint64_t a1, uint64_t *a2, WTF::RefCountedBase **a3)
{
  _QWORD v4[2];
  WTF::RefCountedBase **v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1))
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
  else
  {
    WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(v6, v5);
  }
}

WTF::RefCountedBase *WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::operator=(uint64_t *a1, WTF::RefCountedBase **a2)
{
  WTF::RefCountedBase *result;
  uint64_t v4[4];
  _QWORD v5[2];
  WTF::RefCountedBase *v6;
  _QWORD *v7;
  uint64_t *v8;
  WTF::RefCountedBase **v9;
  uint64_t *v10;
  WTF::RefCountedBase **v11;
  uint64_t *v12;
  WTF::RefCountedBase *v13;
  WTF::RefCountedBase **v14;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v10 = v4;
  v9 = a2;
  v12 = v4;
  v11 = a2;
  v14 = a2;
  v13 = *a2;
  if (v13)
    WTF::RefCountedBase::ref(v13);
  v4[0] = (uint64_t)v13;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::swap<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v5[1] = v4;
  v5[0] = 0;
  v8 = v4;
  v7 = v5;
  result = (WTF::RefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  v6 = result;
  if (result)
    return (WTF::RefCountedBase *)WTF::RefCounted<JSC::ArrayBufferView>::deref(v6);
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(*(_QWORD *)a1, *(WTF::RefCountedBase ***)(a1 + 8));
}

void WTF::RefCountedBase::ref(WTF::RefCountedBase *this)
{
  WTF::RefCountedBase::refAllowingPartiallyDestroyed(this);
}

void WTF::RefCountedBase::refAllowingPartiallyDestroyed(WTF::RefCountedBase *this)
{
  WTF::RefCountedBase::applyRefDerefThreadingCheck(this);
  ++*(_DWORD *)this;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(uint64_t a1, WTF::RefCountedBase **a2)
{
  WTF::RefCountedBase **v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(v3, a2);
  *(_DWORD *)(a1 + 8) = 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(WTF::RefCountedBase **a1, WTF::RefCountedBase **a2)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(a1, a2);
}

WTF::RefCountedBase **std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(WTF::RefCountedBase **a1, WTF::RefCountedBase **a2)
{
  std::__variant_detail::__alt<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(a1, a2);
  return a1;
}

{
  WTF::RefCountedBase *v5;

  v5 = *a2;
  if (*a2)
    WTF::RefCountedBase::ref(v5);
  *a1 = v5;
  return a1;
}

void _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail12__assignmentINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE16__generic_assignB8sn180100IRKNS1_17__copy_assignmentISH_LNS1_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRNS1_5__altILm1ESG_EERKSW_EEEDTclclsr3stdE7declvalISP_EEspclsr3stdE7declvalIT0_EEEESQ_DpOS10_(uint64_t *a1, uint64_t *a2, WTF::StringImpl **a3)
{
  _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSO_OT0_E_clINS0_5__altILm1ESF_EERKSW_EEDaSQ_SS_(a1, a2, a3);
}

void _ZZNSt3__116__variant_detail12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_ENKUlRSO_OT0_E_clINS0_5__altILm1ESF_EERKSW_EEDaSQ_SS_(uint64_t *a1, uint64_t *a2, WTF::StringImpl **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  _QWORD v4[2];
  WTF::StringImpl **v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  v5 = a3;
  if (std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](a1) == 1)
  {
    WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(v6, v5);
  }
  else
  {
    v4[0] = a1;
    v4[1] = v5;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&)::{unnamed type#1}::operator()[abi:sn180100]((uint64_t)v4);
  }
}

WTF::DeferrableRefCountedBase *WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::DeferrableRefCountedBase *result;
  uint64_t v4[8];
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  _QWORD v7[4];
  WTF::DeferrableRefCountedBase *v8;

  v4[2] = (uint64_t)a1;
  v4[1] = (uint64_t)a2;
  v4[5] = (uint64_t)v4;
  v4[4] = (uint64_t)a2;
  v4[7] = (uint64_t)v4;
  v4[6] = (uint64_t)a2;
  v6 = a2;
  v5 = *a2;
  if (v5)
    WTF::StringImpl::ref(v5);
  v4[0] = (uint64_t)v5;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::swap<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>(a1, v4);
  v4[3] = (uint64_t)v4;
  v7[1] = v4;
  v7[0] = 0;
  v7[3] = v4;
  v7[2] = v7;
  result = (WTF::DeferrableRefCountedBase *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v4);
  v8 = result;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v8);
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__assign_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&)::{unnamed type#1}::operator()[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(*(_QWORD *)a1, *(_DWORD ***)(a1 + 8));
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__emplace[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(uint64_t a1, _DWORD **a2)
{
  _QWORD *v3;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(v3, a2);
  *(_DWORD *)(a1 + 8) = 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(_QWORD *a1, _DWORD **a2)
{
  std::__variant_detail::__alt<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::__alt[abi:sn180100]<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>&>(a1, a2);
}

WebCore::BufferSource *std::__construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource const&,WebCore::BufferSource*>(WebCore::BufferSource *a1, const WebCore::BufferSource *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource const&,WebCore::BufferSource*>(a1, a2);
}

WebCore::BufferSource *std::construct_at[abi:sn180100]<WebCore::BufferSource,WebCore::BufferSource const&,WebCore::BufferSource*>(WebCore::BufferSource *a1, const WebCore::BufferSource *a2)
{
  if (!a1)
    __break(1u);
  return WebCore::BufferSource::BufferSource(a1, a2);
}

WebCore::BufferSource *WebCore::BufferSource::BufferSource(WebCore::BufferSource *this, const WebCore::BufferSource *a2)
{
  WebCore::BufferSource::BufferSource(this, a2);
  return this;
}

{
  std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::variant[abi:sn180100]((uint64_t)this, (uint64_t)a2);
  return this;
}

uint64_t _ZNSt3__116__variant_detail18__copy_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(uint64_t a1)
{
  _ZNSt3__116__variant_detail18__move_constructorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEELNS0_6_TraitE1EECI2NS0_6__baseILSH_1EJSB_SF_EEEENS0_13__valueless_tE(a1);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>,(std::__variant_detail::_Trait)1>::__destroy[abi:sn180100](a1);
  result = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::valueless_by_exception[abi:sn180100](v5);
  if ((result & 1) == 0)
  {
    v4 = std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::index[abi:sn180100](v5);
    result = _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0_(v4, (uint64_t)&v3, v6, v5);
    *(_DWORD *)(v6 + 8) = v4;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ArrayBufferENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[3] = a3;
  v10[2] = a4;
  v10[0] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_;
  v10[1] = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))_ZNKSt3__18__farrayIPFvOZNS_16__variant_detail6__dtorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEELNS1_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_RNS1_6__baseILSI_1EJSC_SG_EEEELm2EEixB8sn180100Em((uint64_t)v10, a1);
  v5 = v11;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  v7 = v6;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return v4(v5, v7, v8);
}

WTF::RefCountedBase **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1)
{
  WTF::RefCountedBase **v2;
  WTF::RefCountedBase **v3;
  WTF::RefCountedBase **v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<0ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS1_5__altILm0ESC_EERKSX_EEEDTclclsr3stdE7declvalISQ_EEspclsr3stdE7declvalIT0_EEEESR_DpOS11_(a1, v3, v4);
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _DWORD **v4;

  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  v3 = v2;
  std::__variant_detail::__access::__base::__get_alt[abi:sn180100]<1ul,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return _ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS1_5__altILm1ESG_EERKSX_EEEDTclclsr3stdE7declvalISQ_EEspclsr3stdE7declvalIT0_EEEESR_DpOS11_(a1, v3, v4);
}

WTF::RefCountedBase **_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS1_5__altILm0ESC_EERKSX_EEEDTclclsr3stdE7declvalISQ_EEspclsr3stdE7declvalIT0_EEEESR_DpOS11_(uint64_t a1, WTF::RefCountedBase **a2, WTF::RefCountedBase **a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSP_OT0_E_clINS0_5__altILm0ESB_EERKSX_EEDaSR_ST_(a1, a2, a3);
}

WTF::RefCountedBase **_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSP_OT0_E_clINS0_5__altILm0ESB_EERKSX_EEDaSR_ST_(uint64_t a1, WTF::RefCountedBase **a2, WTF::RefCountedBase **a3)
{
  WTF::RefCountedBase **result;

  result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> const&>(a2, a3);
  return result;
}

_QWORD *_ZNSt3__18__invokeB8sn180100IZNS_16__variant_detail6__ctorINS1_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS4_12RawPtrTraitsIS7_EENS4_21DefaultRefDerefTraitsIS7_EEEENS5_INS6_11ArrayBufferENS8_ISD_EENSA_ISD_EEEEEEEE19__generic_constructB8sn180100IRKNS1_18__copy_constructorISH_LNS1_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS1_5__altILm1ESG_EERKSX_EEEDTclclsr3stdE7declvalISQ_EEspclsr3stdE7declvalIT0_EEEESR_DpOS11_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  return _ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSP_OT0_E_clINS0_5__altILm1ESF_EERKSX_EEDaSR_ST_(a1, a2, a3);
}

_QWORD *_ZZNSt3__116__variant_detail6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS3_12RawPtrTraitsIS6_EENS3_21DefaultRefDerefTraitsIS6_EEEENS4_INS5_11ArrayBufferENS7_ISC_EENS9_ISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_ENKUlRSP_OT0_E_clINS0_5__altILm1ESF_EERKSX_EEDaSR_ST_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _QWORD *result;

  result = a2;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::__construct_alt[abi:sn180100]<1ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> const&>(a2, a3);
  return result;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, const WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs&,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1, const WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a2)
{
  if (!a1)
    __break(1u);
  return WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(a1, a2);
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *this, const WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a2)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(this, a2);
  return this;
}

{
  WTF::String::String(this, a2);
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *)((char *)this + 16), (uint64_t)a2 + 16);
  return this;
}

WTF::String *WTF::String::String(WTF::String *this, const WTF::String *a2)
{
  WTF::String::String(this, a2);
  return this;
}

{
  _DWORD *v5;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    WTF::StringImpl::ref(v5);
  *(_QWORD *)this = v5;
  return this;
}

WebCore::BufferSource *std::optional<WebCore::BufferSource>::optional[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::optional<WebCore::BufferSource>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

WebCore::BufferSource *std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

WebCore::BufferSource *std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

WebCore::BufferSource *std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1, a2);
  return a1;
}

WebCore::BufferSource *std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](WebCore::BufferSource *a1, uint64_t a2)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::__optional_storage_base(a1);
  std::__optional_storage_base<WebCore::BufferSource,false>::__construct_from[abi:sn180100]<std::__optional_copy_base<WebCore::BufferSource,false> const&>(a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__construct_from[abi:sn180100]<std::__optional_copy_base<WebCore::BufferSource,false> const&>(WebCore::BufferSource *a1, uint64_t a2)
{
  uint64_t result;
  const WebCore::BufferSource *v4;

  result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    return (uint64_t)std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource const&>(a1, v4);
  }
  return result;
}

WebCore::BufferSource *std::optional<WebCore::BufferSource>::~optional(WebCore::BufferSource *a1)
{
  std::optional<WebCore::BufferSource>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_move_assign_base<WebCore::BufferSource,false>::~__optional_move_assign_base(WebCore::BufferSource *a1)
{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_copy_assign_base<WebCore::BufferSource,false>::~__optional_copy_assign_base(WebCore::BufferSource *a1)
{
  std::__optional_move_base<WebCore::BufferSource,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_move_base<WebCore::BufferSource,false>::~__optional_move_base(WebCore::BufferSource *a1)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_copy_base<WebCore::BufferSource,false>::~__optional_copy_base(WebCore::BufferSource *a1)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::BufferSource *std::__optional_storage_base<WebCore::BufferSource,false>::~__optional_storage_base(WebCore::BufferSource *a1)
{
  std::__optional_destruct_base<WebCore::BufferSource,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::BufferSource *std::__optional_destruct_base<WebCore::BufferSource,false>::~__optional_destruct_base[abi:sn180100](WebCore::BufferSource *a1)
{
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
    WebCore::BufferSource::~BufferSource(a1);
  return a1;
}

uint64_t _ZNSt3__127__optional_move_assign_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__127__optional_copy_assign_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__127__optional_copy_assign_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__120__optional_move_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__120__optional_move_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__120__optional_copy_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__120__optional_copy_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  _ZNSt3__123__optional_storage_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(a1, a2);
  return a1;
}

uint64_t _ZNSt3__123__optional_storage_baseIN7WebCore36AuthenticationExtensionsClientInputsELb0EECI2NS_24__optional_destruct_baseIS2_Lb0EEEIJS2_EEENS_10in_place_tEDpOT_(uint64_t a1, uint64_t a2)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>(a1, a2);
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs,false>::__optional_destruct_base[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs>(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(a1, a2);
  *(_BYTE *)(a1 + 144) = 1;
  return a1;
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::AuthenticationExtensionsClientInputs(a1, a2);
  return a1;
}

{
  WTF::String::String((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 1;
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100]((_BYTE *)(a1 + 64), a2 + 64);
  return a1;
}

{
  _DWORD *v4;
  _DWORD *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  char v12;
  char v13;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v5 = *(_DWORD **)(a2 + 16);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a1 + 16) = v5;
    v6 = *(_WORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = 0;
    *(_WORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 48) = 0;
    if (*(_BYTE *)(a2 + 48))
    {
      *(_DWORD *)(a1 + 40) = -1;
      v7 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *))off_1E336C418[v7])(&v11);
        *(_DWORD *)(a1 + 40) = v7;
      }
      *(_BYTE *)(a1 + 48) = 1;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    *(_BYTE *)(a1 + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      *(_DWORD *)(a1 + 72) = -1;
      v8 = *(unsigned int *)(a2 + 72);
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(char *))off_1E336C418[v8])(&v12);
        *(_DWORD *)(a1 + 72) = v8;
      }
      *(_BYTE *)(a1 + 80) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      if (*(_BYTE *)(a2 + 96))
      {
        *(_DWORD *)(a1 + 88) = -1;
        v9 = *(unsigned int *)(a2 + 88);
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(char *))off_1E336C418[v9])(&v13);
          *(_DWORD *)(a1 + 88) = v9;
        }
        *(_BYTE *)(a1 + 96) = 1;
      }
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 128) = 0;
    if (*(_BYTE *)(a2 + 128))
    {
      WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 112, (uint64_t *)(a2 + 112));
      *(_BYTE *)(a1 + 128) = 1;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t *WTF::String::String(uint64_t *a1, uint64_t *a2)
{
  WTF::String::String(a1, a2);
  return a1;
}

{
  *a1 = WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>::leakRef(a2);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>((uint64_t)a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>(a1, v4);
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  return WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(a1, a2);
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::LargeBlobInputs(a1, a2);
  return a1;
}

{
  WTF::String::String((uint64_t *)a1, (uint64_t *)a2);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  return a1;
}

_BYTE *std::optional<WebCore::BufferSource>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::BufferSource>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::BufferSource,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::BufferSource,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::BufferSource,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::BufferSource,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::BufferSource,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::BufferSource,false>>((uint64_t)a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::BufferSource,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::BufferSource,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    return std::__optional_storage_base<WebCore::BufferSource,false>::__construct[abi:sn180100]<WebCore::BufferSource>(a1, v4);
  }
  return result;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(a1, a2);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>>(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    return (uint64_t)std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(a1, v4);
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 72) & 1;
}

_BYTE *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>(_BYTE *a1, uint64_t a2)
{
  _BYTE *result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
  a1[72] = 1;
  return result;
}

_BYTE *std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(_BYTE *a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(a1, a2);
}

_BYTE *std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs,WebCore::AuthenticationExtensionsClientInputs::PRFInputs*>(_BYTE *a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  return WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(a1, a2);
}

_BYTE *WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(_BYTE *a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs::PRFInputs(a1, a2);
  return a1;
}

{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](a1, a2);
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1 + 48, a2 + 48);
  return a1;
}

_BYTE *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::optional[abi:sn180100](a1, a2);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>((uint64_t)a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    return std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(a1, v4);
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::__construct[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(a1, a2);
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t a1, uint64_t a2)
{
  return std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues,WebCore::AuthenticationExtensionsClientInputs::PRFValues*>(uint64_t a1, uint64_t a2)
{
  if (!a1)
    __break(1u);
  return WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(a1, a2);
}

uint64_t WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(uint64_t a1, uint64_t a2)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::PRFValues(a1, a2);
  return a1;
}

{
  WebCore::BufferSource::BufferSource(a1, a2);
  std::optional<WebCore::BufferSource>::optional[abi:sn180100]((_BYTE *)(a1 + 16), a2 + 16);
  return a1;
}

_BYTE *std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_assign_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_assign_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](a1, a2);
  return a1;
}

_BYTE *std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](_BYTE *a1, uint64_t a2)
{
  std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](a1);
  std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)a1, a2);
  return a1;
}

_BYTE *std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_copy_base[abi:sn180100](_BYTE *a1)
{
  std::__optional_storage_base<WebCore::BufferSource,false>::__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct_from[abi:sn180100]<std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;

  result = std::__optional_storage_base<WebCore::BufferSource,false>::has_value[abi:sn180100](a2);
  if ((result & 1) != 0)
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    return std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, v4);
  }
  return result;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__construct[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = std::__construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(uint64_t a1, uint64_t *a2)
{
  return std::construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(a1, a2);
}

uint64_t std::construct_at[abi:sn180100]<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>*>(uint64_t a1, uint64_t *a2)
{
  if (!a1)
    __break(1u);
  return WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, a2);
  return a1;
}

{
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::VectorBuffer(a1, a2);
  return a1;
}

uint64_t WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  v6 = 0;
  *(_QWORD *)a1 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v7);
  v5 = 0;
  *(_DWORD *)(a1 + 8) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v7 + 2, &v5);
  v4 = 0;
  *(_DWORD *)(a1 + 12) = std::exchange[abi:sn180100]<unsigned int,int>((unsigned int *)v7 + 3, &v4);
  return a1;
}

uint64_t WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

uint64_t std::exchange[abi:sn180100]<unsigned int,int>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3;

  v3 = *a1;
  *a1 = *a2;
  return v3;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFInputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFInputs *a1)
{
  if ((*((_BYTE *)a1 + 72) & 1) != 0)
    WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(a1);
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(WebCore::AuthenticationExtensionsClientInputs::PRFInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFInputs::~PRFInputs(this);
}

{
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional((uint64_t)this + 48);
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(this);
}

uint64_t std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(uint64_t a1)
{
  std::optional<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::optional<WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~optional(a1);
  return a1;
}

{
  std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_assign_base(a1);
  return a1;
}

uint64_t std::__optional_move_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(uint64_t a1)
{
  std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(a1);
  return a1;
}

uint64_t std::__optional_copy_assign_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(uint64_t a1)
{
  std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(a1);
  return a1;
}

uint64_t std::__optional_move_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(uint64_t a1)
{
  std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(a1);
  return a1;
}

uint64_t std::__optional_copy_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(uint64_t a1)
{
  std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(uint64_t a1)
{
  std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

uint64_t std::__optional_destruct_base<WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1)
{
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  uint64_t *v2;
  uint64_t *v3;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    v3 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
    WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(v2, v3);
  }
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer(a1);
  return a1;
}

uint64_t *WTF::VectorTypeOperations<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(uint64_t *a1, uint64_t *a2)
{
  return WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(a1, a2);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(uint64_t a1)
{
  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::data(a1);
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(uint64_t a1)
{
  return WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
       + 48 * *(unsigned int *)(a1 + 12);
}

uint64_t WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer(uint64_t a1)
{
  WTF::FastMalloc *v2;

  v2 = (WTF::FastMalloc *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer(a1);
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::deallocateBuffer(a1, v2);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  return a1;
}

uint64_t *WTF::VectorDestructor<true,WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>>::destruct(uint64_t *result, uint64_t *a2)
{
  uint64_t *i;

  for (i = result; i != a2; i += 6)
    result = WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(i);
  return result;
}

uint64_t *WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(uint64_t *a1)
{
  WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>::~KeyValuePair(a1);
  return a1;
}

{
  WTF::StringImpl *v2;
  _QWORD v4[2];
  WTF::StringImpl *v5;
  _QWORD *v6;
  uint64_t *v7;

  WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)(a1 + 1));
  v4[1] = a1;
  v4[0] = 0;
  v7 = a1;
  v6 = v4;
  v5 = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
  if (v5)
    WTF::StringImpl::deref(v5, v2);
  return a1;
}

void WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(WebCore::AuthenticationExtensionsClientInputs::PRFValues *this)
{
  WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(this);
}

{
  std::optional<WebCore::BufferSource>::~optional((WebCore::AuthenticationExtensionsClientInputs::PRFValues *)((char *)this + 16));
  WebCore::BufferSource::~BufferSource(this);
}

uint64_t WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::deallocateBuffer(uint64_t result, WTF::FastMalloc *a2)
{
  if (a2)
  {
    if (*(WTF::FastMalloc **)result == a2)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
    }
    return WTF::FastMalloc::free(a2, a2);
  }
  return result;
}

uint64_t WTF::FastMalloc::free(WTF::FastMalloc *this, void *a2)
{
  return WTF::fastFree(this, a2);
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::PRFValues *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::PRFValues,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::PRFValues *a1)
{
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
    WebCore::AuthenticationExtensionsClientInputs::PRFValues::~PRFValues(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_move_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_assign_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_assign_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_copy_assign_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_assign_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_move_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_move_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_copy_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_copy_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_storage_base(a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_storage_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_storage_base(WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs *a1)
{
  if ((*((_BYTE *)a1 + 40) & 1) != 0)
    WebCore::AuthenticationExtensionsClientInputs::LargeBlobInputs::~LargeBlobInputs(a1);
  return a1;
}

cbor::CBORValue *std::__optional_move_assign_base<cbor::CBORValue,false>::~__optional_move_assign_base(cbor::CBORValue *a1, WTF::StringImpl *a2)
{
  std::__optional_copy_assign_base<cbor::CBORValue,false>::~__optional_copy_assign_base(a1, a2);
  return a1;
}

cbor::CBORValue *std::__optional_copy_assign_base<cbor::CBORValue,false>::~__optional_copy_assign_base(cbor::CBORValue *a1, WTF::StringImpl *a2)
{
  std::__optional_move_base<cbor::CBORValue,false>::~__optional_move_base(a1, a2);
  return a1;
}

cbor::CBORValue *std::__optional_move_base<cbor::CBORValue,false>::~__optional_move_base(cbor::CBORValue *a1, WTF::StringImpl *a2)
{
  std::__optional_copy_base<cbor::CBORValue,false>::~__optional_copy_base(a1, a2);
  return a1;
}

cbor::CBORValue *std::__optional_copy_base<cbor::CBORValue,false>::~__optional_copy_base(cbor::CBORValue *a1, WTF::StringImpl *a2)
{
  std::__optional_storage_base<cbor::CBORValue,false>::~__optional_storage_base(a1, a2);
  return a1;
}

cbor::CBORValue *std::__optional_storage_base<cbor::CBORValue,false>::~__optional_storage_base(cbor::CBORValue *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<cbor::CBORValue,false>::~__optional_destruct_base[abi:sn180100](a1, a2);
  return a1;
}

cbor::CBORValue *std::__optional_destruct_base<cbor::CBORValue,false>::~__optional_destruct_base[abi:sn180100](cbor::CBORValue *a1, WTF::StringImpl *a2)
{
  if ((*((_BYTE *)a1 + 32) & 1) != 0)
    cbor::CBORValue::~CBORValue(a1, a2);
  return a1;
}

BOOL WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator!(_QWORD *a1)
{
  return *a1 == 0;
}

BOOL WTF::StringImpl::isEmpty(WTF::StringImpl *this)
{
  return *((_DWORD *)this + 1) == 0;
}

uint64_t std::__optional_storage_base<BOOL,false>::has_value[abi:sn180100](uint64_t a1)
{
  return *(_BYTE *)(a1 + 1) & 1;
}

uint64_t std::__throw_bad_optional_access[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~optional();
}

uint64_t std::__optional_move_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_assign_base(uint64_t a1)
{
  std::__optional_copy_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(a1);
  return a1;
}

uint64_t std::__optional_copy_assign_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_assign_base(uint64_t a1)
{
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(a1);
  return a1;
}

uint64_t std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_move_base(uint64_t a1)
{
  std::__optional_copy_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(a1);
  return a1;
}

uint64_t std::__optional_copy_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_copy_base(uint64_t a1)
{
  std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(a1);
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_storage_base(uint64_t a1)
{
  std::__optional_destruct_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](a1);
  return a1;
}

uint64_t std::__optional_destruct_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1)
{
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  if (*(_DWORD *)(a1 + 12))
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer(a1);
  return a1;
}

void WTF::VectorTypeOperations<unsigned char>::destruct()
{
  WTF::VectorDestructor<false,unsigned char>::destruct();
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(uint64_t a1)
{
  return WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
       + *(unsigned int *)(a1 + 12);
}

uint64_t WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(WTF::DeferrableRefCountedBase *a1)
{
  uint64_t result;
  void *v3;

  result = WTF::DeferrableRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    if (a1)
    {
      JSC::ArrayBuffer::~ArrayBuffer(a1);
      return WTF::FastMalloc::free(a1, v3);
    }
  }
  return result;
}

BOOL WTF::DeferrableRefCountedBase::derefBase(WTF::DeferrableRefCountedBase *this)
{
  *(_DWORD *)this -= 2;
  return *(_DWORD *)this == 0;
}

void JSC::ArrayBuffer::~ArrayBuffer(JSC::ArrayBuffer *this)
{
  JSC::ArrayBuffer::~ArrayBuffer(this);
}

{
  JSC::Weak<JSC::JSArrayBuffer>::~Weak((_QWORD *)this + 10);
  JSC::InlineWatchpointSet::~InlineWatchpointSet((JSC::ArrayBuffer *)((char *)this + 72));
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBuffer *)((char *)this + 16));
  JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::~GCIncomingRefCounted((uint64_t)this);
}

_QWORD *JSC::Weak<JSC::JSArrayBuffer>::~Weak(_QWORD *a1)
{
  JSC::Weak<JSC::JSArrayBuffer>::~Weak(a1);
  return a1;
}

{
  JSC::Weak<JSC::JSArrayBuffer>::clear(a1);
  return a1;
}

void JSC::InlineWatchpointSet::~InlineWatchpointSet(JSC::InlineWatchpointSet *this)
{
  JSC::InlineWatchpointSet::~InlineWatchpointSet(this);
}

{
  if (!JSC::InlineWatchpointSet::isThin((JSC::InlineWatchpointSet **)this))
    JSC::InlineWatchpointSet::freeFat(this);
}

void JSC::ArrayBufferContents::~ArrayBufferContents(JSC::ArrayBufferContents *this)
{
  JSC::ArrayBufferContents::~ArrayBufferContents(this);
}

{
  uint64_t v2;
  uint64_t Unsafe;
  _QWORD v4[2];
  WTF::FastMalloc *v5;
  _QWORD *v6;
  char *v7;
  _QWORD v8[2];
  WTF::FastMalloc *v9;
  _QWORD *v10;
  char *v11;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD *v14;
  char *v15;

  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL((_QWORD *)this + 1))
  {
    v2 = *((_QWORD *)this + 1);
    Unsafe = WTF::CagedPtr<(Gigacage::Kind)0,void,WTF::RawPtrTraits<void>>::getUnsafe((uint64_t *)this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, Unsafe);
  }
  v4[1] = (char *)this + 24;
  v4[0] = 0;
  v7 = (char *)this + 24;
  v6 = v4;
  v5 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 3);
  if (v5)
    WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(v5);
  v8[1] = (char *)this + 16;
  v8[0] = 0;
  v11 = (char *)this + 16;
  v10 = v8;
  v9 = (WTF::FastMalloc *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 2);
  if (v9)
    WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(v9);
  v12[1] = (char *)this + 8;
  v12[0] = 0;
  v15 = (char *)this + 8;
  v14 = v12;
  v13 = std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>((uint64_t *)this + 1);
  if (v13)
    WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref((WTF::ThreadSafeRefCountedBase *)(v13 + 8));
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::~GCIncomingRefCounted(uint64_t a1)
{
  uint64_t v2;
  WTF::FastMalloc *v3;
  void *v4;

  if (JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::hasVectorOfCells(a1))
  {
    v2 = JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::vectorOfCells(a1);
    v3 = (WTF::FastMalloc *)v2;
    if (v2)
    {
      WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v2);
      WTF::FastMalloc::free(v3, v4);
    }
  }
  std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>::~__union(a1);
  return a1;
}

JSC::WeakImpl *JSC::Weak<JSC::JSArrayBuffer>::clear(_QWORD *a1)
{
  JSC::WeakImpl *result;

  result = (JSC::WeakImpl *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)a1);
  if (result)
  {
    result = (JSC::WeakImpl *)JSC::WeakImpl::clear(result);
    *a1 = 0;
  }
  return result;
}

uint64_t JSC::WeakImpl::clear(JSC::WeakImpl *this)
{
  uint64_t result;

  result = WTF::bitwise_cast<JSC::WeakHandleOwner *,unsigned long>();
  *((_QWORD *)this + 1) = result;
  return result;
}

uint64_t WTF::bitwise_cast<JSC::WeakHandleOwner *,unsigned long>()
{
  uint64_t v1;
  uint64_t __src;

  __src = 3;
  memcpy(&v1, &__src, sizeof(v1));
  return v1;
}

BOOL JSC::InlineWatchpointSet::isThin(JSC::InlineWatchpointSet **this)
{
  return JSC::InlineWatchpointSet::isThin(*this);
}

BOOL JSC::InlineWatchpointSet::isThin(JSC::InlineWatchpointSet *this)
{
  return (this & 1) != 0;
}

BOOL WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(_QWORD *a1)
{
  return *a1 != 0;
}

uint64_t WTF::CagedPtr<(Gigacage::Kind)0,void,WTF::RawPtrTraits<void>>::getUnsafe(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *a1;
  if (!*a1)
    return 0;
  v1 = bmalloc::bitwise_cast<Gigacage::Config *,unsigned long long *>();
  v2 = Gigacage::Config::basePtr(v1, 0);
  v3 = 0;
  if (v2)
  {
    v4 = bmalloc::bitwise_cast<Gigacage::Config *,unsigned long long *>();
    v3 = 1;
    if ((*(_BYTE *)(v4 + 2) & 1) == 0)
      v3 = *MEMORY[0x1E0CC10F0] ^ 1;
  }
  if ((v3 & 1) == 0)
    return v8;
  v5 = bmalloc::bitwise_cast<Gigacage::Config *,unsigned long long *>();
  v6 = Gigacage::Config::basePtr(v5, 0);
  return v6 + (v8 & Gigacage::gigacageSizeToMask((Gigacage *)0x400000000));
}

uint64_t bmalloc::bitwise_cast<Gigacage::Config *,unsigned long long *>()
{
  uint64_t v1;
  uint64_t __src;

  __src = MEMORY[0x1E0CC10F8] + 32;
  memcpy(&v1, &__src, sizeof(v1));
  return v1;
}

uint64_t Gigacage::Config::basePtr(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x194681674);
  }
  return *(_QWORD *)(a1 + 24 + 8 * a2);
}

uint64_t Gigacage::gigacageSizeToMask(Gigacage *this)
{
  return (uint64_t)this - 1;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(WTF::FastMalloc *a1)
{
  WTF::FastMalloc **result;
  WTF::FastMalloc *v3[2];

  v3[1] = a1;
  result = (WTF::FastMalloc **)WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    v3[0] = a1;
    return WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v3);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCountedBase::derefBase(WTF::ThreadSafeRefCountedBase *this)
{
  return WTF::ThreadSafeRefCountedBase::derefBaseWithoutDeletionCheck(this) & 1;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF::FastMalloc **result)
{
  WTF::FastMalloc *v1;
  void *v2;

  v1 = *result;
  if (*result)
  {
    MEMORY[0x19AEA37E0](*result);
    return (WTF::FastMalloc **)WTF::FastMalloc::free(v1, v2);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCountedBase::derefBaseWithoutDeletionCheck(WTF::ThreadSafeRefCountedBase *this)
{
  char v3;

  if (std::__atomic_base<unsigned int,true>::operator--[abi:sn180100]((unsigned int *)this))
  {
    v3 = 0;
  }
  else
  {
    std::atomic<unsigned int>::operator=[abi:sn180100]((unsigned int *)this);
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t std::__atomic_base<unsigned int,true>::operator--[abi:sn180100](unsigned int *a1)
{
  return std::__atomic_base<unsigned int,true>::fetch_sub[abi:sn180100](a1) - 1;
}

void std::atomic<unsigned int>::operator=[abi:sn180100](unsigned int *a1)
{
  std::__atomic_base<unsigned int,false>::store[abi:sn180100](a1, 1u);
}

uint64_t std::__atomic_base<unsigned int,true>::fetch_sub[abi:sn180100](unsigned int *a1)
{
  return std::__cxx_atomic_fetch_sub[abi:sn180100]<unsigned int>(a1, 1, 5);
}

uint64_t std::__cxx_atomic_fetch_sub[abi:sn180100]<unsigned int>(unsigned int *a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;

  switch(a3)
  {
    case 1:
    case 2:
      do
        v4 = __ldaxr(a1);
      while (__stxr(v4 - a2, a1));
      v9 = v4;
      break;
    case 3:
      do
        v5 = __ldxr(a1);
      while (__stlxr(v5 - a2, a1));
      v9 = v5;
      break;
    case 4:
      do
        v6 = __ldaxr(a1);
      while (__stlxr(v6 - a2, a1));
      v9 = v6;
      break;
    case 5:
      do
        v7 = __ldaxr(a1);
      while (__stlxr(v7 - a2, a1));
      v9 = v7;
      break;
    default:
      do
        v3 = __ldxr(a1);
      while (__stxr(v3 - a2, a1));
      v9 = v3;
      break;
  }
  return v9;
}

void std::__atomic_base<unsigned int,false>::store[abi:sn180100](unsigned int *a1, unsigned int a2)
{
  std::__cxx_atomic_store[abi:sn180100]<unsigned int>(a1, a2, 5);
}

void std::__cxx_atomic_store[abi:sn180100]<unsigned int>(unsigned int *a1, unsigned int a2, int a3)
{
  if (a3 == 3 || a3 == 5)
    atomic_store(a2, a1);
  else
    *a1 = a2;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(WTF::FastMalloc *a1)
{
  WTF::FastMalloc **result;
  WTF::FastMalloc *v3[2];

  v3[1] = a1;
  result = (WTF::FastMalloc **)WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    v3[0] = a1;
    return WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v3);
  }
  return result;
}

WTF::FastMalloc **WTF::ThreadSafeRefCounted<JSC::SharedArrayBufferContents,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(WTF::FastMalloc **result)
{
  WTF::FastMalloc *v1;
  void *v2;

  v1 = *result;
  if (*result)
  {
    MEMORY[0x19AEA39B4](*result);
    return (WTF::FastMalloc **)WTF::FastMalloc::free(v1, v2);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref(WTF::ThreadSafeRefCountedBase *a1)
{
  uint64_t result;
  _QWORD v3[2];

  v3[1] = a1;
  result = WTF::ThreadSafeRefCountedBase::derefBase(a1);
  if ((result & 1) != 0)
  {
    v3[0] = a1;
    return WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v3);
  }
  return result;
}

uint64_t WTF::ThreadSafeRefCounted<WTF::SharedTask<void ()(void *)>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(_QWORD *a1)
{
  uint64_t result;

  result = *a1 - 8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::hasVectorOfCells(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(a1);
  return (v1 & 1) == 0;
}

uint64_t JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::vectorOfCells(uint64_t a1)
{
  return WTF::bitwise_cast<WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,unsigned long>(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1)
{
  WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1);
  return a1;
}

{
  if (*(_DWORD *)(a1 + 12))
  {
    WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1);
    WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(a1);
    WTF::VectorTypeOperations<unsigned char>::destruct();
  }
  WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::asanSetBufferSizeToFullCapacity();
  WTF::VectorBuffer<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::FastMalloc>::~VectorBuffer(a1);
  return a1;
}

uint64_t WTF::bitwise_cast<WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,unsigned long>(uint64_t a1)
{
  uint64_t v2;
  uint64_t __src;

  __src = a1;
  memcpy(&v2, &__src, sizeof(v2));
  return v2;
}

uint64_t WTF::Vector<JSC::JSCell *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::end(uint64_t a1)
{
  return WTF::Vector<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::begin(a1)
       + 8 * *(unsigned int *)(a1 + 12);
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::find<cbor::CBORValue>(uint64_t a1, cbor::CBORValue *a2)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  cbor::CBORValue *v10;
  uint64_t v12;
  uint64_t v13;
  cbor::CBORValue *v14;
  uint64_t v15;

  v15 = a1;
  v14 = a2;
  v4 = (_QWORD *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]();
  v13 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__lower_bound<cbor::CBORValue>(a1, a2, v4, v5);
  v12 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::end[abi:sn180100]();
  v6 = std::operator!=[abi:sn180100](&v13, &v12);
  v7 = 0;
  if (v6)
  {
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::value_comp[abi:sn180100]();
    v9 = v8;
    v10 = v14;
    std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::operator*[abi:sn180100]((uint64_t)&v13);
    v7 = !std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::operator()[abi:sn180100](v9, v10);
  }
  if (v7)
    return v13;
  else
    return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::end[abi:sn180100]();
}

_QWORD *std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::__map_const_iterator[abi:sn180100](_QWORD *a1, uint64_t a2)
{
  std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::__map_const_iterator[abi:sn180100](a1, a2);
  return a1;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__lower_bound<cbor::CBORValue>(uint64_t a1, cbor::CBORValue *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  while (a3)
  {
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::value_comp[abi:sn180100]();
    if (std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::operator()[abi:sn180100](v4, (uint64_t)(a3 + 4), a2))
    {
      a3 = (_QWORD *)a3[1];
    }
    else
    {
      a4 = (uint64_t)a3;
      a3 = (_QWORD *)*a3;
    }
  }
  std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::__tree_const_iterator[abi:sn180100](&v9, a4);
  return v9;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]()
{
  uint64_t v0;

  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]();
  return *(_QWORD *)v0;
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]()
{
  std::to_address[abi:sn180100]<unsigned char const>();
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::end[abi:sn180100]()
{
  uint64_t v0;
  uint64_t v2;

  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]();
  std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::__tree_const_iterator[abi:sn180100](&v2, v0);
  return v2;
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::value_comp[abi:sn180100]()
{
  std::to_address[abi:sn180100]<unsigned char const>();
}

BOOL std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::operator()[abi:sn180100](uint64_t a1, cbor::CBORValue *a2)
{
  cbor::CBORValue *v4;

  std::__value_type<cbor::CBORValue,cbor::CBORValue>::__get_value[abi:sn180100]();
  return cbor::CBORValue::CTAPLess::operator()(a1, a2, v4);
}

uint64_t std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::operator*[abi:sn180100](uint64_t a1)
{
  return WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer(a1) + 32;
}

BOOL std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::operator()[abi:sn180100](uint64_t a1, uint64_t a2, cbor::CBORValue *a3)
{
  cbor::CBORValue *v4;

  std::__value_type<cbor::CBORValue,cbor::CBORValue>::__get_value[abi:sn180100]();
  return cbor::CBORValue::CTAPLess::operator()(a1, v4, a3);
}

_QWORD *std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::__tree_const_iterator[abi:sn180100](_QWORD *a1, uint64_t a2)
{
  std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::__tree_const_iterator[abi:sn180100](a1, a2);
  return a1;
}

BOOL cbor::CBORValue::CTAPLess::operator()(uint64_t a1, cbor::CBORValue *a2, cbor::CBORValue *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::String *v8;
  unint64_t v10;
  WTF::StringImpl **v11;
  unint64_t v12;
  WTF::StringImpl **String;

  v3 = cbor::CBORValue::type(a2);
  if (v3 == cbor::CBORValue::type(a3))
  {
    v5 = cbor::CBORValue::type(a2);
    if (v5)
    {
      if (v5 == 1)
      {
        v7 = *(_QWORD *)cbor::CBORValue::getInteger(a2);
        return v7 > *(_QWORD *)cbor::CBORValue::getInteger(a3);
      }
      else if (v5 == 3)
      {
        String = (WTF::StringImpl **)cbor::CBORValue::getString(a2);
        v12 = WTF::String::length(String);
        v11 = (WTF::StringImpl **)cbor::CBORValue::getString(a3);
        v10 = WTF::String::length(v11);
        if (v12 == v10)
          return WTF::codePointCompareLessThan((WTF *)String, (const WTF::String *)v11, v8);
        else
          return v12 < v10;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v6 = *(_QWORD *)cbor::CBORValue::getInteger(a2);
      return v6 < *(_QWORD *)cbor::CBORValue::getInteger(a3);
    }
  }
  else
  {
    v4 = cbor::CBORValue::type(a2);
    return v4 < (int)cbor::CBORValue::type(a3);
  }
}

void std::__value_type<cbor::CBORValue,cbor::CBORValue>::__get_value[abi:sn180100]()
{
  std::to_address[abi:sn180100]<unsigned char const>();
}

uint64_t WTF::String::length(WTF::StringImpl **this)
{
  if (WTF::RefPtr<WTF::SharedTask<void ()(void *)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(void *)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(void *)>>>::operator BOOL(this))
    return WTF::StringImpl::length(*this);
  else
    return 0;
}

BOOL WTF::codePointCompareLessThan(WTF *this, const WTF::String *a2, const WTF::String *a3)
{
  WTF *v3;
  const WTF::StringImpl *v4;
  const WTF::StringImpl *v5;

  v3 = (WTF *)WTF::String::impl(this);
  v4 = (const WTF::StringImpl *)WTF::String::impl(a2);
  return (int)WTF::codePointCompare(v3, v4, v5) < 0;
}

uint64_t WTF::String::impl(WTF::String *this)
{
  return WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::get((uint64_t)this);
}

uint64_t WTF::codePointCompare<unsigned char,unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v16[1] = a4;
  v16[0] = a3;
  v15 = 0;
  v14 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
  v13 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16);
  v15 = *std::min[abi:sn180100]<unsigned long>(&v14, &v13);
  v12 = (unsigned __int8 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v17);
  v11 = (unsigned __int8 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v16);
  for (i = 0; ; ++i)
  {
    v4 = 0;
    if (i < v15)
      v4 = *v12 == *v11;
    if (!v4)
      break;
    ++v12;
    ++v11;
  }
  if (i >= v15)
  {
    v6 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
    if (v6 == std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
    {
      return 0;
    }
    else
    {
      v7 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
      if (v7 <= std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
        return -1;
      else
        return 1;
    }
  }
  else if (*v12 <= (int)*v11)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

uint64_t WTF::codePointCompare<unsigned char,char16_t>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  unsigned __int16 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v16[1] = a4;
  v16[0] = a3;
  v15 = 0;
  v14 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
  v13 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16);
  v15 = *std::min[abi:sn180100]<unsigned long>(&v14, &v13);
  v12 = (unsigned __int8 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v17);
  v11 = (unsigned __int16 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v16);
  for (i = 0; ; ++i)
  {
    v4 = 0;
    if (i < v15)
      v4 = *v12 == *v11;
    if (!v4)
      break;
    ++v12;
    ++v11;
  }
  if (i >= v15)
  {
    v6 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
    if (v6 == std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
    {
      return 0;
    }
    else
    {
      v7 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
      if (v7 <= std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
        return -1;
      else
        return 1;
    }
  }
  else if (*v12 <= (int)*v11)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

uint64_t WTF::codePointCompare<char16_t,unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  unsigned __int8 *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v16[1] = a4;
  v16[0] = a3;
  v15 = 0;
  v14 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
  v13 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16);
  v15 = *std::min[abi:sn180100]<unsigned long>(&v14, &v13);
  v12 = (unsigned __int16 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v17);
  v11 = (unsigned __int8 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v16);
  for (i = 0; ; ++i)
  {
    v4 = 0;
    if (i < v15)
      v4 = *v12 == *v11;
    if (!v4)
      break;
    ++v12;
    ++v11;
  }
  if (i >= v15)
  {
    v6 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
    if (v6 == std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
    {
      return 0;
    }
    else
    {
      v7 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
      if (v7 <= std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
        return -1;
      else
        return 1;
    }
  }
  else if (*v12 <= (int)*v11)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

uint64_t WTF::codePointCompare<char16_t,char16_t>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v16[1] = a4;
  v16[0] = a3;
  v15 = 0;
  v14 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
  v13 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16);
  v15 = *std::min[abi:sn180100]<unsigned long>(&v14, &v13);
  v12 = (unsigned __int16 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v17);
  v11 = (unsigned __int16 *)WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer((uint64_t)v16);
  for (i = 0; ; ++i)
  {
    v4 = 0;
    if (i < v15)
      v4 = *v12 == *v11;
    if (!v4)
      break;
    ++v12;
    ++v11;
  }
  if (i >= v15)
  {
    v6 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
    if (v6 == std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
    {
      return 0;
    }
    else
    {
      v7 = std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v17);
      if (v7 <= std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100]((uint64_t)v16))
        return -1;
      else
        return 1;
    }
  }
  else if (*v12 <= (int)*v11)
  {
    return -1;
  }
  else
  {
    return 1;
  }
}

_QWORD *std::min[abi:sn180100]<unsigned long>(_QWORD *a1, _QWORD *a2)
{
  return std::min[abi:sn180100]<unsigned long,std::__less<void,void>>(a1, a2);
}

uint64_t std::span<unsigned char const,18446744073709551615ul>::size[abi:sn180100](uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *std::min[abi:sn180100]<unsigned long,std::__less<void,void>>(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>((uint64_t)&v5, a2, a1))
    return a2;
  else
    return a1;
}

BOOL std::__less<void,void>::operator()[abi:sn180100]<unsigned long,unsigned long>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 < *a3;
}

_QWORD *std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::span<unsigned char const,18446744073709551615ul>::span[abi:sn180100]<unsigned char const*>(a1, a2, a3);
  return a1;
}

{
  uint64_t v4;

  std::to_address[abi:sn180100]<unsigned char const>();
  *a1 = v4;
  a1[1] = a3;
  return a1;
}

void std::to_address[abi:sn180100]<unsigned char const>()
{
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::__tree_const_iterator[abi:sn180100](_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

BOOL std::operator==[abi:sn180100](_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>>::__map_const_iterator[abi:sn180100](_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::operator->[abi:sn180100](uint64_t a1)
{
  WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::buffer(a1);
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::leakRef(uint64_t *a1)
{
  _QWORD v2[5];

  v2[2] = a1;
  v2[0] = 0;
  v2[4] = a1;
  v2[3] = v2;
  return std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(a1);
}

uint64_t std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::__map_value_compare[abi:sn180100](uint64_t a1)
{
  std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return a1;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__tree(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__tree(a1, a2);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  std::__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>,WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::__compressed_pair[abi:sn180100]<true,void>((_QWORD *)(a1 + 8));
  v7 = 0;
  std::__compressed_pair<unsigned long,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>>::__compressed_pair[abi:sn180100]<int,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true> const&>((_QWORD *)(a1 + 16), &v7);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]();
  v4 = v3;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  *v5 = v4;
  return a1;
}

_QWORD *std::__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>,WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::__compressed_pair[abi:sn180100]<true,void>(_QWORD *a1)
{
  std::__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>,WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::__compressed_pair[abi:sn180100]<true,void>(a1);
  return a1;
}

{
  std::__compressed_pair_elem<std::__tree_end_node<std::__tree_node_base<void *> *>,0,false>::__compressed_pair_elem[abi:sn180100](a1);
  std::__variant_detail::__access::__union::__get_alt[abi:sn180100]<std::__variant_detail::__union<(std::__variant_detail::_Trait)1,0ul,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>> &>();
  return a1;
}

_QWORD *std::__compressed_pair<unsigned long,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>>::__compressed_pair[abi:sn180100]<int,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true> const&>(_QWORD *a1, int *a2)
{
  std::__compressed_pair<unsigned long,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>>::__compressed_pair[abi:sn180100]<int,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true> const&>(a1, a2);
  return a1;
}

{
  std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:sn180100]<int,void>(a1, a2);
  std::__compressed_pair_elem<std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,1,true>::__compressed_pair_elem[abi:sn180100]<std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true> const&,void>();
  return a1;
}

_QWORD *std::__compressed_pair_elem<std::__tree_end_node<std::__tree_node_base<void *> *>,0,false>::__compressed_pair_elem[abi:sn180100](_QWORD *a1)
{
  std::__tree_end_node<std::__tree_node_base<void *> *>::__tree_end_node[abi:sn180100](a1);
  return a1;
}

_QWORD *std::__tree_end_node<std::__tree_node_base<void *> *>::__tree_end_node[abi:sn180100](_QWORD *a1)
{
  std::__tree_end_node<std::__tree_node_base<void *> *>::__tree_end_node[abi:sn180100](a1);
  return a1;
}

_QWORD *std::__tree_end_node<std::__tree_node_base<void *> *>::__tree_end_node[abi:sn180100](_QWORD *result)
{
  *result = 0;
  return result;
}

_QWORD *std::__compressed_pair_elem<unsigned long,0,false>::__compressed_pair_elem[abi:sn180100]<int,void>(_QWORD *result, int *a2)
{
  *result = *a2;
  return result;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(uint64_t a1)
{
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::~__tree(a1);
  return a1;
}

{
  WTF *v2;

  v2 = (WTF *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(a1, v2);
  return a1;
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(result, *(_QWORD *)a2);
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy(v2, *((_QWORD *)a2 + 1));
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]();
    v6 = v3;
    v4 = v3;
    std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]();
    std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::destroy[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,void,void>(v4, v5);
    return std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](v6, a2);
  }
  return result;
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]()
{
  std::to_address[abi:sn180100]<unsigned char const>();
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::destroy[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,void,void>(uint64_t a1, uint64_t a2)
{
  return std::__destroy_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,0>(a2);
}

void std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]()
{
  std::__value_type<cbor::CBORValue,cbor::CBORValue>::__get_value[abi:sn180100]();
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](uint64_t a1, WTF *a2)
{
  return WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::deallocate(a1, a2);
}

uint64_t std::__destroy_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,0>(uint64_t a1)
{
  if (!a1)
    __break(1u);
  return std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(a1);
}

uint64_t std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(uint64_t a1)
{
  std::pair<cbor::CBORValue const,cbor::CBORValue>::~pair(a1);
  return a1;
}

{
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)(a1 + 32));
  cbor::CBORValue::~CBORValue((cbor::CBORValue *)a1);
  return a1;
}

uint64_t WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::deallocate(uint64_t a1, WTF *a2)
{
  return WTF::fastFree(a2, a2);
}

uint64_t std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>(uint64_t a1, cbor::CBORValue *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v10;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  cbor::CBORValue *v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a1;
  v19 = a2;
  v18 = a3;
  v17 = a4;
  v16 = a5;
  v14 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>(a1, (uint64_t)&v15, a2);
  v13 = *v14;
  v12 = 0;
  if (!*v14)
  {
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>(a1, v18, v17, v16, v11);
    v6 = v15;
    v7 = v14;
    v8 = (_QWORD *)std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::get[abi:sn180100]();
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(a1, v6, v7, v8);
    v13 = std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::release[abi:sn180100]();
    v12 = 1;
    std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::~unique_ptr[abi:sn180100]((uint64_t)v11);
  }
  std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::__tree_const_iterator[abi:sn180100](&v10, v13);
  std::pair<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL>::pair[abi:sn180100]<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL &,0>((uint64_t)&v21, &v10, &v12);
  return v21;
}

uint64_t std::forward_as_tuple[abi:sn180100]<cbor::CBORValue>(uint64_t a1)
{
  uint64_t v2;

  std::tuple<cbor::CBORValue &&>::tuple[abi:sn180100]<cbor::CBORValue,0>(&v2, a1);
  return v2;
}

_QWORD *std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__find_equal<cbor::CBORValue>(uint64_t a1, uint64_t a2, cbor::CBORValue *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;

  v9 = (_QWORD *)std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root[abi:sn180100]();
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root_ptr[abi:sn180100]();
  v8 = v3;
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::value_comp[abi:sn180100]();
        if (!std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::operator()[abi:sn180100](v4, a3))break;
        if (!*v9)
        {
          *(_QWORD *)a2 = v9;
          return *(_QWORD **)a2;
        }
        v8 = v9;
        v9 = (_QWORD *)*v9;
      }
      std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::value_comp[abi:sn180100]();
      if (!std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>::operator()[abi:sn180100](v5, (uint64_t)(v9 + 4), a3))break;
      if (!v9[1])
      {
        *(_QWORD *)a2 = v9;
        return v9 + 1;
      }
      v8 = v9 + 1;
      v9 = (_QWORD *)v9[1];
    }
    *(_QWORD *)a2 = v9;
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]();
    *(_QWORD *)a2 = v6;
    return *(_QWORD **)a2;
  }
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v18 = a5;
  v17 = a1;
  v16 = a2;
  v15 = a3;
  v14 = a4;
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__node_alloc[abi:sn180100]();
  v13 = v6;
  v12 = 0;
  v7 = std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::allocate[abi:sn180100](v6);
  std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::__tree_node_destructor[abi:sn180100]((uint64_t)v11, v13);
  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::unique_ptr[abi:sn180100]<true,void>(a5, v7, v11);
  v8 = v13;
  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::get[abi:sn180100]();
  std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]();
  std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::construct[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>,void,void>(v8, v9, v16, v15);
  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::get_deleter[abi:sn180100]();
  *(_BYTE *)(v10 + 8) = 1;
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__insert_node_at(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD **v4;
  uint64_t **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = (uint64_t)a4;
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
  if (**v4)
  {
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    v6 = **v5;
    std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
    *v7 = v6;
  }
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]();
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*v8, *a3);
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::value_comp[abi:sn180100]();
  ++*v9;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::get[abi:sn180100]()
{
  uint64_t v0;

  std::to_address[abi:sn180100]<unsigned char const>();
  return *(_QWORD *)v0;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::release[abi:sn180100]()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v3;

  std::to_address[abi:sn180100]<unsigned char const>();
  v3 = *v0;
  std::to_address[abi:sn180100]<unsigned char const>();
  *v1 = 0;
  return v3;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::~unique_ptr[abi:sn180100](uint64_t a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::~unique_ptr[abi:sn180100](a1);
  return a1;
}

{
  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100]();
  return a1;
}

uint64_t std::pair<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL>::pair[abi:sn180100]<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL &,0>(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  std::pair<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL>::pair[abi:sn180100]<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL &,0>(a1, a2, a3);
  return a1;
}

void std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__root_ptr[abi:sn180100]()
{
  std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__end_node[abi:sn180100]();
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::allocate[abi:sn180100](uint64_t a1)
{
  return WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::allocate(a1, 1);
}

uint64_t std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::__tree_node_destructor[abi:sn180100](uint64_t a1, uint64_t a2)
{
  std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::__tree_node_destructor[abi:sn180100](a1, a2, 0);
  return a1;
}

_QWORD *std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::unique_ptr[abi:sn180100]<true,void>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::unique_ptr[abi:sn180100]<true,void>(a1, a2, a3);
  return a1;
}

{
  _QWORD v5[2];

  v5[1] = a1;
  v5[0] = a2;
  std::__compressed_pair<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::__compressed_pair[abi:sn180100]<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *&,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>(a1, v5, a3);
  return a1;
}

uint64_t std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::construct[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>,void,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return std::__construct_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>,std::pair<cbor::CBORValue const,cbor::CBORValue>*>(a2, a3, a4);
}

void std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::get_deleter[abi:sn180100]()
{
  std::__compressed_pair<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::second[abi:sn180100]();
}

uint64_t WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>::allocate(uint64_t a1, uint64_t a2)
{
  return WTF::fastMalloc((WTF *)(96 * a2));
}

uint64_t std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::__tree_node_destructor[abi:sn180100](uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = a3 & 1;
  return result;
}

_QWORD *std::__compressed_pair<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::__compressed_pair[abi:sn180100]<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *&,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__compressed_pair<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::__compressed_pair[abi:sn180100]<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *&,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>(a1, a2, a3);
  return a1;
}

{
  std::__compressed_pair_elem<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,0,false>::__compressed_pair_elem[abi:sn180100]<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *&,void>(a1, a2);
  std::__compressed_pair_elem<std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>,1,false>::__compressed_pair_elem[abi:sn180100]<std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>,void>(a1 + 1, a3);
  return a1;
}

_QWORD *std::__compressed_pair_elem<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,0,false>::__compressed_pair_elem[abi:sn180100]<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *&,void>(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *std::__compressed_pair_elem<std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>,1,false>::__compressed_pair_elem[abi:sn180100]<std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>,void>(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  result[1] = a2[1];
  return result;
}

uint64_t std::__construct_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>,std::pair<cbor::CBORValue const,cbor::CBORValue>*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::construct_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>,std::pair<cbor::CBORValue const,cbor::CBORValue>*>(a1, a2, a3);
}

uint64_t std::construct_at[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>,std::pair<cbor::CBORValue const,cbor::CBORValue>*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
    __break(1u);
  return std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue&&>(a1, *a3);
}

uint64_t std::pair<cbor::CBORValue const,cbor::CBORValue>::pair[abi:sn180100]<cbor::CBORValue&&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  _ZNSt3__14pairIKN4cbor9CBORValueES2_EC1B8sn180100IJOS2_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE(a1, (uint64_t)&v4);
  return a1;
}

uint64_t _ZNSt3__14pairIKN4cbor9CBORValueES2_EC1B8sn180100IJOS2_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE(uint64_t a1, uint64_t a2)
{
  _ZNSt3__14pairIKN4cbor9CBORValueES2_EC2B8sn180100IJOS2_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE(a1, a2);
  return a1;
}

uint64_t _ZNSt3__14pairIKN4cbor9CBORValueES2_EC2B8sn180100IJOS2_EJEJLm0EEJEEENS_21piecewise_construct_tERNS_5tupleIJDpT_EEERNS8_IJDpT0_EEENS_15__tuple_indicesIJXspT1_EEEENSH_IJXspT2_EEEE(uint64_t a1, uint64_t a2)
{
  int *v3;

  v3 = (int *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::data(a2);
  cbor::CBORValue::CBORValue(a1, v3);
  cbor::CBORValue::CBORValue((_DWORD *)(a1 + 32));
  return a1;
}

void std::__compressed_pair<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::second[abi:sn180100]()
{
  std::__optional_storage_base<cbor::CBORValue,false>::__get[abi:sn180100]();
}

uint64_t std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v14 = (uint64_t *)result;
  v11 = (uint64_t *)a2;
  *(_BYTE *)(a2 + 24) = a2 == result;
  while (1)
  {
    v2 = 0;
    if (v11 != v14)
    {
      result = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
      v2 = *(_BYTE *)(result + 24) ^ 1;
    }
    if ((v2 & 1) == 0)
      break;
    v3 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
    if (std::__tree_is_left_child[abi:sn180100]<std::__tree_node_base<void *> *>(v3))
    {
      v4 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
      v10 = *(_QWORD *)(std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100](v4) + 8);
      if (!v10 || (*(_BYTE *)(v10 + 24) & 1) != 0)
      {
        if (!std::__tree_is_left_child[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          v11 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
          std::__tree_left_rotate[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v11);
        }
        v6 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
        *(_BYTE *)(v6 + 24) = 1;
        v12 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100](v6);
        *(_BYTE *)(v12 + 24) = 0;
        return std::__tree_right_rotate[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v12);
      }
      v5 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
      *(_BYTE *)(v5 + 24) = 1;
      result = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100](v5);
      v11 = (uint64_t *)result;
      *(_BYTE *)(result + 24) = result == (_QWORD)v14;
      *(_BYTE *)(v10 + 24) = 1;
    }
    else
    {
      v9 = **(_QWORD **)(std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11) + 16);
      if (!v9 || (*(_BYTE *)(v9 + 24) & 1) != 0)
      {
        if (std::__tree_is_left_child[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v11))
        {
          v11 = (uint64_t *)std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
          std::__tree_right_rotate[abi:sn180100]<std::__tree_node_base<void *> *>(v11);
        }
        v8 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
        *(_BYTE *)(v8 + 24) = 1;
        v13 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100](v8);
        *(_BYTE *)(v13 + 24) = 0;
        return std::__tree_left_rotate[abi:sn180100]<std::__tree_node_base<void *> *>(v13);
      }
      v7 = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)v11);
      *(_BYTE *)(v7 + 24) = 1;
      result = std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100](v7);
      v11 = (uint64_t *)result;
      *(_BYTE *)(result + 24) = result == (_QWORD)v14;
      *(_BYTE *)(v9 + 24) = 1;
    }
  }
  return result;
}

uint64_t std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100](uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

BOOL std::__tree_is_left_child[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  return a1 == **(_QWORD **)(a1 + 16);
}

uint64_t std::__tree_left_rotate[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t a1)
{
  uint64_t *v2;

  v2 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *v2;
  if (*(_QWORD *)(a1 + 8))
    std::__tree_node_base<void *>::__set_parent[abi:sn180100](*(_QWORD *)(a1 + 8), a1);
  v2[2] = *(_QWORD *)(a1 + 16);
  if (std::__tree_is_left_child[abi:sn180100]<std::__tree_node_base<void *> *>(a1))
    **(_QWORD **)(a1 + 16) = v2;
  else
    *(_QWORD *)(std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100](a1) + 8) = v2;
  *v2 = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:sn180100](a1, (uint64_t)v2);
}

uint64_t std::__tree_right_rotate[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = *(_QWORD *)(*a1 + 8);
  if (*a1)
    std::__tree_node_base<void *>::__set_parent[abi:sn180100](*a1, (uint64_t)a1);
  *(_QWORD *)(v2 + 16) = a1[2];
  if (std::__tree_is_left_child[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)a1))
    *(_QWORD *)a1[2] = v2;
  else
    *(_QWORD *)(std::__tree_node_base<void *>::__parent_unsafe[abi:sn180100]((uint64_t)a1) + 8) = v2;
  *(_QWORD *)(v2 + 8) = a1;
  return std::__tree_node_base<void *>::__set_parent[abi:sn180100]((uint64_t)a1, v2);
}

uint64_t std::__tree_node_base<void *>::__set_parent[abi:sn180100](uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::reset[abi:sn180100]()
{
  WTF **v0;
  _QWORD *v1;
  uint64_t v2;
  WTF *v3;

  std::to_address[abi:sn180100]<unsigned char const>();
  v3 = *v0;
  std::to_address[abi:sn180100]<unsigned char const>();
  *v1 = 0;
  if (v3)
  {
    std::__compressed_pair<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>>::second[abi:sn180100]();
    std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::operator()[abi:sn180100](v2, v3);
  }
}

uint64_t std::__tree_node_destructor<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::operator()[abi:sn180100](uint64_t result, WTF *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)result;
  if ((*(_BYTE *)(result + 8) & 1) != 0)
  {
    v3 = *(_QWORD *)result;
    std::__tree_key_value_types<std::__value_type<cbor::CBORValue,cbor::CBORValue>>::__get_ptr[abi:sn180100]();
    result = std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::destroy[abi:sn180100]<std::pair<cbor::CBORValue const,cbor::CBORValue>,void,void>(v3, v4);
  }
  if (a2)
    return std::allocator_traits<WTF::FastAllocator<std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *>>>::deallocate[abi:sn180100](*v2, a2);
  return result;
}

uint64_t std::pair<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL>::pair[abi:sn180100]<std::__tree_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>,BOOL &,0>(uint64_t result, _QWORD *a2, _BYTE *a3)
{
  *(_QWORD *)result = *a2;
  *(_BYTE *)(result + 8) = *a3 & 1;
  return result;
}

_QWORD *std::tuple<cbor::CBORValue &&>::tuple[abi:sn180100]<cbor::CBORValue,0>(_QWORD *a1, uint64_t a2)
{
  std::tuple<cbor::CBORValue &&>::tuple[abi:sn180100]<cbor::CBORValue,0>(a1, a2);
  return a1;
}

{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJON4cbor9CBORValueEEEC1B8sn180100IJLm0EEJS5_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS9_IJDpT2_EEEDpOT3_(a1, a2);
  return a1;
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJON4cbor9CBORValueEEEC1B8sn180100IJLm0EEJS5_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS9_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2)
{
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJON4cbor9CBORValueEEEC2B8sn180100IJLm0EEJS5_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS9_IJDpT2_EEEDpOT3_(a1, a2);
  return a1;
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0EEEEJON4cbor9CBORValueEEEC2B8sn180100IJLm0EEJS5_EJEJEJS4_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS9_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2)
{
  std::__tree_const_iterator<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__tree_node<std::__value_type<cbor::CBORValue,cbor::CBORValue>,void *> *,long>::__tree_const_iterator[abi:sn180100](a1, a2);
  return a1;
}

uint64_t WTF::VectorBuffer<unsigned char,0ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, WTF::FastMalloc *a2, int a3)
{
  WTF::VectorBufferBase<WTF::KeyValuePair<WTF::String,WebCore::AuthenticationExtensionsClientInputs::PRFValues>,WTF::FastMalloc>::VectorBufferBase(a1);
  *(_DWORD *)(a1 + 12) = a3;
  if (a2)
    WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
  return a1;
}

void *WTF::VectorTypeOperations<unsigned char>::uninitializedCopy(const void *a1, uint64_t a2, void *a3)
{
  return WTF::VectorCopier<true,unsigned char>::uninitializedCopy(a1, a2, a3);
}

uint64_t WTF::VectorBufferBase<unsigned char,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, WTF::FastMalloc *a2)
{
  uint64_t result;

  if (!WTF::isValidCapacityForVector<unsigned char>((unint64_t)a2))
  {
    __break(0xC471u);
    JUMPOUT(0x194684194);
  }
  result = WTF::FastMalloc::malloc(a2);
  *(_DWORD *)(a1 + 8) = (_DWORD)a2;
  *(_QWORD *)a1 = result;
  return result;
}

BOOL WTF::isValidCapacityForVector<unsigned char>(unint64_t a1)
{
  std::numeric_limits<unsigned int>::max[abi:sn180100](a1);
  return a1 <= 0xFFFFFFFF;
}

uint64_t WTF::FastMalloc::malloc(WTF::FastMalloc *this)
{
  return WTF::fastMalloc(this);
}

uint64_t std::numeric_limits<unsigned int>::max[abi:sn180100](uint64_t a1)
{
  return JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(a1);
}

void *WTF::VectorCopier<true,unsigned char>::uninitializedCopy(const void *a1, uint64_t a2, void *a3)
{
  return memcpy(a3, a1, a2 - (_QWORD)a1);
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::fromCBOR@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;
  BOOL v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  int v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  uint64_t *v30;
  int v31;
  WTF *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  int v36;
  BOOL v37;
  uint64_t *v38;
  WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  int v45;
  BOOL v46;
  uint64_t *v47;
  int v48;
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t *v52;
  int v53;
  BOOL v54;
  uint64_t *v55;
  __int128 v56;
  uint64_t *v57;
  uint64_t *v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  WTF::StringImpl *v62;
  const WTF::StringImpl *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  int v70;
  BOOL v71;
  uint64_t *v72;
  int v73;
  WTF *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t *v77;
  int v78;
  BOOL v79;
  uint64_t *v80;
  BOOL v81;
  uint64_t *v82;
  uint64_t *v83;
  WTF::StringImpl *v84;
  const WTF::StringImpl *v85;
  BOOL v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  int v93;
  BOOL v94;
  uint64_t *v95;
  int v96;
  WTF *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t *v100;
  int v101;
  BOOL v102;
  uint64_t *v103;
  __int16 v104;
  WTF::StringImpl *v105;
  const WTF::StringImpl *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  int v111;
  BOOL v112;
  uint64_t *v113;
  int v114;
  WTF *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t *v118;
  int v119;
  BOOL v120;
  uint64_t *v121;
  _QWORD *v122;
  WTF::StringImpl *v123;
  const WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  int v129;
  BOOL v130;
  uint64_t *v131;
  int v132;
  WTF *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t *v136;
  int v137;
  BOOL v138;
  uint64_t *v139;
  __int16 v140;
  WTF *v141;
  unsigned int v142;
  uint64_t *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t *v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t *v149;
  unsigned int v150;
  WTF *v151;
  unsigned int v152;
  uint64_t *v153;
  unsigned int v154;
  uint64_t *v155;
  unsigned int v156;
  uint64_t *v157;
  unsigned int v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  int v162;
  unsigned int v163;
  __int16 v164;
  unsigned int v165;
  uint64_t *v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t *v169;
  unsigned int v170;
  uint64_t *v171;
  unsigned int v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  int v176;
  unsigned int v177;
  __int16 v178;
  uint64_t v179;
  void *v180;
  WTF *v181;
  WTF *v182;
  int v183;
  uint64_t v184;
  void *v185;
  WTF *v186;
  WTF *v187;
  WTF *v188;
  _QWORD *v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  WTF *v193;
  __int16 v194;
  unsigned __int8 v195;
  __int16 v196;
  __int128 v197;
  char v198;
  char v199;
  _DWORD v200[4];
  _QWORD v201[2];
  unsigned __int8 v202;
  WTF::StringImpl *v203;

  v3 = *((unsigned int *)a1 + 3);
  v191 = *a1;
  v192 = v3;
  result = cbor::CBORReader::read(&v191, 0, 0x10u, (uint64_t)v200);
  v6 = v202;
  if (v202)
    v7 = v200[0] == 5;
  else
    v7 = 0;
  if (!v7)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (v6)
      return cbor::CBORValue::internalCleanup((uint64_t)v200, v5);
    return result;
  }
  LOBYTE(v192) = 0;
  v195 = 0;
  LOBYTE(v196) = 0;
  v199 = 0;
  LODWORD(v191) = 0;
  WTF::String::String((WTF::String *)&v203, "appid");
  LODWORD(v189) = 3;
  v190 = v203;
  v10 = v201[0];
  if (!v201[0])
  {
LABEL_32:
    cbor::CBORValue::internalCleanup((uint64_t)&v189, v8);
    goto LABEL_33;
  }
  v11 = v201;
  do
  {
    v12 = (uint64_t *)v10;
    v13 = v11;
    v14 = *(_DWORD *)(v10 + 32);
    if (v14 == (_DWORD)v189)
    {
      v17 = (WTF *)v12[5];
      if (v17)
        v18 = *((_DWORD *)v17 + 1);
      else
        v18 = 0;
      v8 = v190;
      if (v190)
        v19 = *((_DWORD *)v190 + 1);
      else
        v19 = 0;
      if (v18 == v19)
      {
        if ((WTF::codePointCompare(v17, v190, v9) & 0x80000000) != 0)
          goto LABEL_11;
      }
      else if (v18 < v19)
      {
LABEL_11:
        v15 = v12 + 1;
        v16 = 1;
        v11 = v13;
        goto LABEL_13;
      }
    }
    else if (v14 < (int)v189)
    {
      goto LABEL_11;
    }
    v16 = 0;
    v15 = v12;
    v11 = v12;
LABEL_13:
    v10 = *v15;
  }
  while (v10);
  if (v11 == v201)
    goto LABEL_32;
  if (v16)
    v20 = v13;
  else
    v20 = v12;
  v21 = *((_DWORD *)v20 + 8);
  if ((_DWORD)v189 == v21)
  {
    if (v190)
      v142 = *((_DWORD *)v190 + 1);
    else
      v142 = 0;
    if (v16)
      v143 = v13;
    else
      v143 = v12;
    v8 = (WTF::StringImpl *)v143[5];
    if (v8)
      v144 = *((_DWORD *)v8 + 1);
    else
      v144 = 0;
    if (v142 == v144)
    {
      if ((WTF::codePointCompare(v190, v8, v9) & 0x80000000) == 0)
        goto LABEL_123;
    }
    else if (v142 >= v144)
    {
      goto LABEL_123;
    }
    goto LABEL_32;
  }
  if ((int)v189 < v21)
    goto LABEL_32;
LABEL_123:
  cbor::CBORValue::internalCleanup((uint64_t)&v189, v8);
  if (v16)
    v57 = v13;
  else
    v57 = v12;
  if (*((_DWORD *)v57 + 16) == 7)
  {
    v58 = v16 ? v13 : v12;
    v59 = *((_DWORD *)v58 + 18);
    if ((v59 & 0xFFFFFFFE) == 0x14)
      LOWORD(v191) = (v59 == 21) | 0x100;
  }
LABEL_33:
  WTF::String::String((WTF::String *)&v203, "credProps");
  LODWORD(v189) = 3;
  v190 = v203;
  v24 = v201[0];
  if (!v201[0])
  {
LABEL_72:
    cbor::CBORValue::internalCleanup((uint64_t)&v189, v22);
    goto LABEL_73;
  }
  v25 = v201;
  while (2)
  {
    v26 = (uint64_t *)v24;
    v27 = v25;
    v28 = *(_DWORD *)(v24 + 32);
    v29 = v28 < (int)v189;
    if (v28 != (_DWORD)v189)
    {
LABEL_40:
      if (!v29)
        goto LABEL_44;
      goto LABEL_42;
    }
    switch(v28)
    {
      case 3:
        v32 = (WTF *)v26[5];
        if (v32)
          v33 = *((_DWORD *)v32 + 1);
        else
          v33 = 0;
        v22 = v190;
        if (v190)
          v34 = *((_DWORD *)v190 + 1);
        else
          v34 = 0;
        if (v33 == v34)
        {
          if ((WTF::codePointCompare(v32, v190, v23) & 0x80000000) == 0)
            break;
        }
        else if (v33 >= v34)
        {
          break;
        }
        goto LABEL_42;
      case 1:
        if (v26[5] <= (uint64_t)v190)
          break;
LABEL_42:
        v30 = v26 + 1;
        v31 = 1;
        v25 = v27;
        goto LABEL_45;
      case 0:
        v29 = v26[5] < (uint64_t)v190;
        goto LABEL_40;
    }
LABEL_44:
    v31 = 0;
    v30 = v26;
    v25 = v26;
LABEL_45:
    v24 = *v30;
    if (v24)
      continue;
    break;
  }
  if (v25 == v201)
    goto LABEL_72;
  if (v31)
    v35 = v27;
  else
    v35 = v26;
  v36 = *((_DWORD *)v35 + 8);
  v37 = (int)v189 < v36;
  if ((_DWORD)v189 != v36)
  {
LABEL_70:
    if (!v37)
      goto LABEL_136;
    goto LABEL_72;
  }
  switch((_DWORD)v189)
  {
    case 3:
      if (v190)
        v145 = *((_DWORD *)v190 + 1);
      else
        v145 = 0;
      if (v31)
        v146 = v27;
      else
        v146 = v26;
      v22 = (WTF::StringImpl *)v146[5];
      if (v22)
        v147 = *((_DWORD *)v22 + 1);
      else
        v147 = 0;
      if (v145 == v147)
      {
        if ((WTF::codePointCompare(v190, v22, v23) & 0x80000000) == 0)
          break;
      }
      else if (v145 >= v147)
      {
        break;
      }
      goto LABEL_72;
    case 1:
      if (v31)
        v60 = v27;
      else
        v60 = v26;
      if ((uint64_t)v190 <= v60[5])
        break;
      goto LABEL_72;
    case 0:
      if (v31)
        v38 = v27;
      else
        v38 = v26;
      v37 = (uint64_t)v190 < v38[5];
      goto LABEL_70;
  }
LABEL_136:
  cbor::CBORValue::internalCleanup((uint64_t)&v189, v22);
  if (v31)
    v61 = v27;
  else
    v61 = v26;
  if (*((_DWORD *)v61 + 16) != 5)
    goto LABEL_73;
  WTF::String::String((WTF::String *)&v203, "rk");
  LODWORD(v189) = 3;
  v190 = v203;
  if (v31)
    v64 = v27;
  else
    v64 = v26;
  if (v31)
    v65 = v27 + 10;
  else
    v65 = v26 + 10;
  v66 = v64[10];
  if (!v66)
  {
LABEL_185:
    v67 = v65;
    goto LABEL_186;
  }
  v67 = v65;
  while (2)
  {
    v68 = (uint64_t *)v66;
    v69 = v67;
    v70 = *(_DWORD *)(v66 + 32);
    v71 = v70 < (int)v189;
    if (v70 != (_DWORD)v189)
    {
LABEL_153:
      if (!v71)
        goto LABEL_157;
      goto LABEL_155;
    }
    switch(v70)
    {
      case 3:
        v74 = *(WTF **)(v66 + 40);
        if (v74)
          v75 = *((_DWORD *)v74 + 1);
        else
          v75 = 0;
        v62 = v190;
        if (v190)
          v76 = *((_DWORD *)v190 + 1);
        else
          v76 = 0;
        if (v75 == v76)
        {
          if ((WTF::codePointCompare(v74, v190, v63) & 0x80000000) == 0)
            break;
        }
        else if (v75 >= v76)
        {
          break;
        }
        goto LABEL_155;
      case 1:
        if (*(_QWORD *)(v66 + 40) <= (uint64_t)v190)
          break;
LABEL_155:
        v72 = v68 + 1;
        v73 = 1;
        goto LABEL_158;
      case 0:
        v71 = *(_QWORD *)(v66 + 40) < (uint64_t)v190;
        goto LABEL_153;
    }
LABEL_157:
    v73 = 0;
    v72 = v68;
    v67 = v68;
LABEL_158:
    v66 = *v72;
    if (v66)
      continue;
    break;
  }
  if (v67 == v65)
    goto LABEL_185;
  if (v73)
    v77 = v69;
  else
    v77 = v68;
  v78 = *((_DWORD *)v77 + 8);
  v79 = (int)v189 < v78;
  if ((_DWORD)v189 != v78)
  {
LABEL_183:
    if (!v79)
      goto LABEL_186;
    goto LABEL_185;
  }
  switch((_DWORD)v189)
  {
    case 3:
      if (v190)
        v152 = *((_DWORD *)v190 + 1);
      else
        v152 = 0;
      if (v73)
        v153 = v69;
      else
        v153 = v68;
      v62 = (WTF::StringImpl *)v153[5];
      if (v62)
        v154 = *((_DWORD *)v62 + 1);
      else
        v154 = 0;
      if (v152 == v154)
      {
        if ((WTF::codePointCompare(v190, v62, v63) & 0x80000000) == 0)
          break;
      }
      else if (v152 >= v154)
      {
        break;
      }
      goto LABEL_185;
    case 1:
      if (v73)
        v155 = v69;
      else
        v155 = v68;
      if ((uint64_t)v190 <= v155[5])
        break;
      goto LABEL_185;
    case 0:
      if (v73)
        v80 = v69;
      else
        v80 = v68;
      v79 = (uint64_t)v190 < v80[5];
      goto LABEL_183;
  }
LABEL_186:
  cbor::CBORValue::internalCleanup((uint64_t)&v189, v62);
  if (v67 != v201 && *((_DWORD *)v67 + 16) == 7)
    v81 = *((_DWORD *)v67 + 18) == 21;
  BYTE3(v191) = 1;
  BYTE2(v191) = v81;
LABEL_73:
  WTF::String::String((WTF::String *)&v203, "largeBlob");
  LODWORD(v189) = 3;
  v190 = v203;
  v41 = v201[0];
  if (!v201[0])
    goto LABEL_112;
  v42 = v201;
  while (2)
  {
    v43 = (uint64_t *)v41;
    v44 = v42;
    v45 = *(_DWORD *)(v41 + 32);
    v46 = v45 < (int)v189;
    if (v45 != (_DWORD)v189)
    {
LABEL_80:
      if (!v46)
        goto LABEL_84;
      goto LABEL_82;
    }
    switch(v45)
    {
      case 3:
        v49 = (WTF *)v43[5];
        if (v49)
          v50 = *((_DWORD *)v49 + 1);
        else
          v50 = 0;
        v39 = v190;
        if (v190)
          v51 = *((_DWORD *)v190 + 1);
        else
          v51 = 0;
        if (v50 == v51)
        {
          if ((WTF::codePointCompare(v49, v190, v40) & 0x80000000) == 0)
            break;
        }
        else if (v50 >= v51)
        {
          break;
        }
        goto LABEL_82;
      case 1:
        if (v43[5] <= (uint64_t)v190)
          break;
LABEL_82:
        v47 = v43 + 1;
        v48 = 1;
        v42 = v44;
        goto LABEL_85;
      case 0:
        v46 = v43[5] < (uint64_t)v190;
        goto LABEL_80;
    }
LABEL_84:
    v48 = 0;
    v47 = v43;
    v42 = v43;
LABEL_85:
    v41 = *v47;
    if (v41)
      continue;
    break;
  }
  if (v42 == v201)
  {
LABEL_112:
    cbor::CBORValue::internalCleanup((uint64_t)&v189, v39);
    goto LABEL_113;
  }
  if (v48)
    v52 = v44;
  else
    v52 = v43;
  v53 = *((_DWORD *)v52 + 8);
  v54 = (int)v189 < v53;
  if ((_DWORD)v189 != v53)
  {
LABEL_110:
    if (!v54)
      goto LABEL_193;
    goto LABEL_112;
  }
  switch((_DWORD)v189)
  {
    case 3:
      if (v190)
        v148 = *((_DWORD *)v190 + 1);
      else
        v148 = 0;
      if (v48)
        v149 = v44;
      else
        v149 = v43;
      v39 = (WTF::StringImpl *)v149[5];
      if (v39)
        v150 = *((_DWORD *)v39 + 1);
      else
        v150 = 0;
      if (v148 == v150)
      {
        if ((WTF::codePointCompare(v190, v39, v40) & 0x80000000) == 0)
          break;
      }
      else if (v148 >= v150)
      {
        break;
      }
      goto LABEL_112;
    case 1:
      if (v48)
        v82 = v44;
      else
        v82 = v43;
      if ((uint64_t)v190 <= v82[5])
        break;
      goto LABEL_112;
    case 0:
      if (v48)
        v55 = v44;
      else
        v55 = v43;
      v54 = (uint64_t)v190 < v55[5];
      goto LABEL_110;
  }
LABEL_193:
  cbor::CBORValue::internalCleanup((uint64_t)&v189, v39);
  if (v48)
    v83 = v44;
  else
    v83 = v43;
  if (*((_DWORD *)v83 + 16) != 5)
  {
LABEL_113:
    *(_DWORD *)a2 = v191;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_114;
  }
  WTF::String::String((WTF::String *)&v203, "supported");
  LODWORD(v189) = 3;
  v190 = v203;
  v86 = v48 == 0;
  if (v48)
    v87 = v44;
  else
    v87 = v43;
  if (v86)
    v88 = v43 + 10;
  else
    v88 = v44 + 10;
  v89 = v87[10];
  if (!v89)
    goto LABEL_242;
  v90 = v88;
  while (2)
  {
    v91 = (uint64_t *)v89;
    v92 = v90;
    v93 = *(_DWORD *)(v89 + 32);
    v94 = v93 < (int)v189;
    if (v93 != (_DWORD)v189)
    {
LABEL_210:
      if (!v94)
        goto LABEL_214;
      goto LABEL_212;
    }
    switch(v93)
    {
      case 3:
        v97 = (WTF *)v91[5];
        if (v97)
          v98 = *((_DWORD *)v97 + 1);
        else
          v98 = 0;
        v84 = v190;
        if (v190)
          v99 = *((_DWORD *)v190 + 1);
        else
          v99 = 0;
        if (v98 == v99)
        {
          if ((WTF::codePointCompare(v97, v190, v85) & 0x80000000) == 0)
            break;
        }
        else if (v98 >= v99)
        {
          break;
        }
        goto LABEL_212;
      case 1:
        if (v91[5] <= (uint64_t)v190)
          break;
LABEL_212:
        v95 = v91 + 1;
        v96 = 1;
        v90 = v92;
        goto LABEL_215;
      case 0:
        v94 = v91[5] < (uint64_t)v190;
        goto LABEL_210;
    }
LABEL_214:
    v96 = 0;
    v95 = v91;
    v90 = v91;
LABEL_215:
    v89 = *v95;
    if (v89)
      continue;
    break;
  }
  if (v90 == v88)
  {
LABEL_242:
    cbor::CBORValue::internalCleanup((uint64_t)&v189, v84);
LABEL_243:
    v104 = 0;
    goto LABEL_244;
  }
  if (v96)
    v100 = v92;
  else
    v100 = v91;
  v101 = *((_DWORD *)v100 + 8);
  v102 = (int)v189 < v101;
  if ((_DWORD)v189 != v101)
  {
LABEL_240:
    if (!v102)
      goto LABEL_405;
    goto LABEL_242;
  }
  switch((_DWORD)v189)
  {
    case 3:
      if (v190)
        v156 = *((_DWORD *)v190 + 1);
      else
        v156 = 0;
      if (v96)
        v157 = v92;
      else
        v157 = v91;
      v84 = (WTF::StringImpl *)v157[5];
      if (v84)
        v158 = *((_DWORD *)v84 + 1);
      else
        v158 = 0;
      if (v156 == v158)
      {
        if ((WTF::codePointCompare(v190, v84, v85) & 0x80000000) == 0)
          break;
      }
      else if (v156 >= v158)
      {
        break;
      }
      goto LABEL_242;
    case 1:
      if (v96)
        v159 = v92;
      else
        v159 = v91;
      if ((uint64_t)v190 <= v159[5])
        break;
      goto LABEL_242;
    case 0:
      if (v96)
        v103 = v92;
      else
        v103 = v91;
      v102 = (uint64_t)v190 < v103[5];
      goto LABEL_240;
  }
LABEL_405:
  cbor::CBORValue::internalCleanup((uint64_t)&v189, v84);
  if (v96)
    v160 = v92;
  else
    v160 = v91;
  if (*((_DWORD *)v160 + 16) != 7)
    goto LABEL_243;
  if (v96)
    v161 = v92;
  else
    v161 = v91;
  v162 = *((_DWORD *)v161 + 18);
  v163 = v162 & 0xFFFFFFFE;
  v164 = (v162 == 21) | 0x100;
  if (v163 == 20)
    v104 = v164;
  else
    v104 = 0;
LABEL_244:
  WTF::String::String((WTF::String *)&v203, "blob");
  LODWORD(v189) = 3;
  v190 = v203;
  v107 = v87[10];
  if (!v107)
    goto LABEL_283;
  v108 = v88;
  while (2)
  {
    v109 = (uint64_t *)v107;
    v110 = v108;
    v111 = *(_DWORD *)(v107 + 32);
    v112 = v111 < (int)v189;
    if (v111 != (_DWORD)v189)
    {
LABEL_251:
      if (!v112)
        goto LABEL_255;
      goto LABEL_253;
    }
    switch(v111)
    {
      case 3:
        v115 = (WTF *)v109[5];
        if (v115)
          v116 = *((_DWORD *)v115 + 1);
        else
          v116 = 0;
        v105 = v190;
        if (v190)
          v117 = *((_DWORD *)v190 + 1);
        else
          v117 = 0;
        if (v116 == v117)
        {
          if ((WTF::codePointCompare(v115, v190, v106) & 0x80000000) == 0)
            break;
        }
        else if (v116 >= v117)
        {
          break;
        }
        goto LABEL_253;
      case 1:
        if (v109[5] <= (uint64_t)v190)
          break;
LABEL_253:
        v113 = v109 + 1;
        v114 = 1;
        v108 = v110;
        goto LABEL_256;
      case 0:
        v112 = v109[5] < (uint64_t)v190;
        goto LABEL_251;
    }
LABEL_255:
    v114 = 0;
    v113 = v109;
    v108 = v109;
LABEL_256:
    v107 = *v113;
    if (v107)
      continue;
    break;
  }
  if (v108 == v88)
  {
LABEL_283:
    cbor::CBORValue::internalCleanup((uint64_t)&v189, v105);
LABEL_284:
    v122 = 0;
    goto LABEL_285;
  }
  if (v114)
    v118 = v110;
  else
    v118 = v109;
  v119 = *((_DWORD *)v118 + 8);
  v120 = (int)v189 < v119;
  if ((_DWORD)v189 != v119)
  {
LABEL_281:
    if (!v120)
      goto LABEL_429;
    goto LABEL_283;
  }
  switch((_DWORD)v189)
  {
    case 3:
      if (v190)
        v165 = *((_DWORD *)v190 + 1);
      else
        v165 = 0;
      if (v114)
        v166 = v110;
      else
        v166 = v109;
      v105 = (WTF::StringImpl *)v166[5];
      if (v105)
        v167 = *((_DWORD *)v105 + 1);
      else
        v167 = 0;
      if (v165 == v167)
      {
        if ((WTF::codePointCompare(v190, v105, v106) & 0x80000000) == 0)
          break;
      }
      else if (v165 >= v167)
      {
        break;
      }
      goto LABEL_283;
    case 1:
      if (v114)
        v168 = v110;
      else
        v168 = v109;
      if ((uint64_t)v190 <= v168[5])
        break;
      goto LABEL_283;
    case 0:
      if (v114)
        v121 = v110;
      else
        v121 = v109;
      v120 = (uint64_t)v190 < v121[5];
      goto LABEL_281;
  }
LABEL_429:
  cbor::CBORValue::internalCleanup((uint64_t)&v189, v105);
  if (v114)
    v169 = v110;
  else
    v169 = v109;
  if (*((_DWORD *)v169 + 16) != 2)
    goto LABEL_284;
  JSC::ArrayBuffer::create();
  v122 = v189;
  v189 = 0;
  WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v189);
LABEL_285:
  WTF::String::String((WTF::String *)&v203, "written");
  LODWORD(v189) = 3;
  v190 = v203;
  v125 = v87[10];
  if (!v125)
    goto LABEL_324;
  v126 = v88;
  while (2)
  {
    v127 = (uint64_t *)v125;
    v128 = v126;
    v129 = *(_DWORD *)(v125 + 32);
    v130 = v129 < (int)v189;
    if (v129 != (_DWORD)v189)
    {
LABEL_292:
      if (!v130)
        goto LABEL_296;
      goto LABEL_294;
    }
    switch(v129)
    {
      case 3:
        v133 = (WTF *)v127[5];
        if (v133)
          v134 = *((_DWORD *)v133 + 1);
        else
          v134 = 0;
        v123 = v190;
        if (v190)
          v135 = *((_DWORD *)v190 + 1);
        else
          v135 = 0;
        if (v134 == v135)
        {
          if ((WTF::codePointCompare(v133, v190, v124) & 0x80000000) == 0)
            break;
        }
        else if (v134 >= v135)
        {
          break;
        }
        goto LABEL_294;
      case 1:
        if (v127[5] <= (uint64_t)v190)
          break;
LABEL_294:
        v131 = v127 + 1;
        v132 = 1;
        v126 = v128;
        goto LABEL_297;
      case 0:
        v130 = v127[5] < (uint64_t)v190;
        goto LABEL_292;
    }
LABEL_296:
    v132 = 0;
    v131 = v127;
    v126 = v127;
LABEL_297:
    v125 = *v131;
    if (v125)
      continue;
    break;
  }
  if (v126 == v88)
  {
LABEL_324:
    cbor::CBORValue::internalCleanup((uint64_t)&v189, v123);
LABEL_325:
    v140 = 0;
    goto LABEL_326;
  }
  if (v132)
    v136 = v128;
  else
    v136 = v127;
  v137 = *((_DWORD *)v136 + 8);
  v138 = (int)v189 < v137;
  if ((_DWORD)v189 != v137)
  {
LABEL_322:
    if (!v138)
      goto LABEL_448;
    goto LABEL_324;
  }
  switch((_DWORD)v189)
  {
    case 3:
      if (v190)
        v170 = *((_DWORD *)v190 + 1);
      else
        v170 = 0;
      if (v132)
        v171 = v128;
      else
        v171 = v127;
      v123 = (WTF::StringImpl *)v171[5];
      if (v123)
        v172 = *((_DWORD *)v123 + 1);
      else
        v172 = 0;
      if (v170 == v172)
      {
        if ((WTF::codePointCompare(v190, v123, v124) & 0x80000000) == 0)
          break;
      }
      else if (v170 >= v172)
      {
        break;
      }
      goto LABEL_324;
    case 1:
      if (v132)
        v173 = v128;
      else
        v173 = v127;
      if ((uint64_t)v190 <= v173[5])
        break;
      goto LABEL_324;
    case 0:
      if (v132)
        v139 = v128;
      else
        v139 = v127;
      v138 = (uint64_t)v190 < v139[5];
      goto LABEL_322;
  }
LABEL_448:
  cbor::CBORValue::internalCleanup((uint64_t)&v189, v123);
  if (v132)
    v174 = v128;
  else
    v174 = v127;
  if (*((_DWORD *)v174 + 16) != 7)
    goto LABEL_325;
  if (v132)
    v175 = v128;
  else
    v175 = v127;
  v176 = *((_DWORD *)v175 + 18);
  v177 = v176 & 0xFFFFFFFE;
  v178 = (v176 == 21) | 0x100;
  if (v177 == 20)
    v140 = v178;
  else
    v140 = 0;
LABEL_326:
  LOWORD(v192) = v104;
  if (v195)
  {
    if (v122)
      *(_DWORD *)v122 += 2;
    v141 = v193;
    v193 = (WTF *)v122;
    if (v141)
    {
      v7 = *(_DWORD *)v141 == 2;
      *(_DWORD *)v141 -= 2;
      if (v7)
      {
        v188 = v141;
        v184 = *((_QWORD *)v141 + 10);
        if (v184)
        {
          *(_QWORD *)(v184 + 8) = 3;
          *((_QWORD *)v188 + 10) = 0;
        }
        if ((*((_BYTE *)v188 + 72) & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v188 + 72));
        JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v188 + 16));
        v186 = (WTF *)*((_QWORD *)v188 + 1);
        if ((v186 & 1) == 0 && v186)
        {
          v187 = *(WTF **)v186;
          if (*(_QWORD *)v186)
          {
            *(_QWORD *)v186 = 0;
            *((_DWORD *)v186 + 2) = 0;
            WTF::fastFree(v187, v185);
          }
          WTF::fastFree(v186, v185);
        }
        WTF::fastFree(v188, v185);
      }
    }
    v194 = v140;
  }
  else
  {
    if (v122)
      *(_DWORD *)v122 += 2;
    v193 = (WTF *)v122;
    v194 = v140;
    v195 = 1;
  }
  if (!v122 || (v7 = *(_DWORD *)v122 == 2, *(_DWORD *)v122 -= 2, !v7))
  {
    *(_DWORD *)a2 = v191;
    goto LABEL_369;
  }
  v179 = v122[10];
  if (v179)
  {
    *(_QWORD *)(v179 + 8) = 3;
    v122[10] = 0;
  }
  if ((v122[9] & 1) == 0)
    JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v122 + 9));
  JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v122 + 2));
  v181 = (WTF *)v122[1];
  if ((v181 & 1) == 0 && v181)
  {
    v182 = *(WTF **)v181;
    if (*(_QWORD *)v181)
    {
      *(_QWORD *)v181 = 0;
      *((_DWORD *)v181 + 2) = 0;
      WTF::fastFree(v182, v180);
    }
    WTF::fastFree(v181, v180);
  }
  WTF::fastFree((WTF *)v122, v180);
  v183 = v195;
  *(_DWORD *)a2 = v191;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (v183)
  {
LABEL_369:
    *(_WORD *)(a2 + 8) = v192;
    v151 = v193;
    v193 = 0;
    *(_QWORD *)(a2 + 16) = v151;
    *(_WORD *)(a2 + 24) = v194;
    *(_BYTE *)(a2 + 32) = 1;
  }
LABEL_114:
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (v199)
  {
    *(_WORD *)(a2 + 40) = v196;
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 64) = 0;
    if (v198)
    {
      v56 = v197;
      v197 = 0uLL;
      *(_OWORD *)(a2 + 48) = v56;
      *(_BYTE *)(a2 + 64) = 1;
      *(_BYTE *)(a2 + 72) = 1;
      *(_BYTE *)(a2 + 80) = 1;
      WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)&v197);
      goto LABEL_120;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  *(_BYTE *)(a2 + 80) = 1;
LABEL_120:
  result = std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v192);
  if (v202)
    return cbor::CBORValue::internalCleanup((uint64_t)v200, v5);
  return result;
}

uint64_t WebCore::AuthenticationExtensionsClientOutputs::toCBOR@<X0>(WebCore::AuthenticationExtensionsClientOutputs *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  WTF *v3;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF **v10;
  WTF *v11;
  WTF *v12;
  WTF **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;
  WTF **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  WTF **v31;
  WTF *v32;
  WTF *v33;
  WTF **v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF **v42;
  WTF *v43;
  WTF *v44;
  WTF **v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF *i;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF **v59;
  WTF *v60;
  WTF *v61;
  WTF **v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  WTF **v73;
  WTF *v74;
  WTF *v75;
  WTF **v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  char v79;
  size_t v80;
  void *v81;
  void *v82;
  WTF **v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  _QWORD v88[3];
  int v89;
  WTF **v90;
  WTF *v91;
  uint64_t v92;
  WTF **v93;
  WTF *v94;
  uint64_t v95;
  char v96;
  WTF **v97;

  v3 = this;
  v94 = 0;
  v95 = 0;
  v93 = &v94;
  if (*((_BYTE *)this + 1))
  {
    if (*(_BYTE *)this)
      v5 = 21;
    else
      v5 = 20;
    v89 = 7;
    LODWORD(v90) = v5;
    WTF::String::String((WTF::String *)&v84, "appid");
    LODWORD(v87) = 3;
    v88[0] = v84;
    v84 = &v87;
    v6 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v93, (cbor::CBORValue *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v84, (uint64_t)&v97);
    cbor::CBORValue::internalCleanup(v6 + 64, v7);
    v9 = v89;
    *(_DWORD *)(v6 + 64) = v89;
    switch(v9)
    {
      case 0:
      case 1:
        v10 = v90;
        goto LABEL_12;
      case 2:
      case 4:
        *(_QWORD *)(v6 + 72) = v90;
        v11 = v91;
        v90 = 0;
        v91 = 0;
        *(_QWORD *)(v6 + 80) = v11;
        break;
      case 3:
        v10 = v90;
        v90 = 0;
        goto LABEL_12;
      case 5:
        v13 = v90;
        v12 = v91;
        *(_QWORD *)(v6 + 80) = v91;
        v10 = (WTF **)(v6 + 80);
        *(_QWORD *)(v6 + 72) = v13;
        v14 = v92;
        *(_QWORD *)(v6 + 88) = v92;
        if (v14)
        {
          *((_QWORD *)v12 + 2) = v10;
          v90 = &v91;
          v91 = 0;
          v92 = 0;
        }
        else
        {
LABEL_12:
          *(_QWORD *)(v6 + 72) = v10;
        }
        break;
      case 7:
        *(_DWORD *)(v6 + 72) = (_DWORD)v90;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v87, v8);
    cbor::CBORValue::internalCleanup((uint64_t)&v89, v15);
  }
  if (*((_BYTE *)v3 + 3))
  {
    v85 = 0;
    v86 = 0;
    v84 = &v85;
    if (*((_BYTE *)v3 + 2))
      v16 = 21;
    else
      v16 = 20;
    v89 = 7;
    LODWORD(v90) = v16;
    WTF::String::String((WTF::String *)&v97, "rk");
    v2 = 3;
    LODWORD(v87) = 3;
    v88[0] = v97;
    v97 = &v87;
    v17 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v84, (cbor::CBORValue *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v97, (uint64_t)&v96);
    cbor::CBORValue::internalCleanup(v17 + 64, v18);
    v20 = v89;
    *(_DWORD *)(v17 + 64) = v89;
    switch(v20)
    {
      case 0:
      case 1:
        v21 = v90;
        goto LABEL_25;
      case 2:
      case 4:
        *(_QWORD *)(v17 + 72) = v90;
        v22 = v91;
        v90 = 0;
        v91 = 0;
        *(_QWORD *)(v17 + 80) = v22;
        break;
      case 3:
        v21 = v90;
        v90 = 0;
        goto LABEL_25;
      case 5:
        v24 = v90;
        v23 = v91;
        *(_QWORD *)(v17 + 80) = v91;
        v21 = (WTF **)(v17 + 80);
        *(_QWORD *)(v17 + 72) = v24;
        v25 = v92;
        *(_QWORD *)(v17 + 88) = v92;
        if (v25)
        {
          *((_QWORD *)v23 + 2) = v21;
          v90 = &v91;
          v91 = 0;
          v92 = 0;
        }
        else
        {
LABEL_25:
          *(_QWORD *)(v17 + 72) = v21;
        }
        break;
      case 7:
        *(_DWORD *)(v17 + 72) = (_DWORD)v90;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v87, v19);
    cbor::CBORValue::internalCleanup((uint64_t)&v89, v26);
    cbor::CBORValue::CBORValue((uint64_t)&v89, &v84);
    WTF::String::String((WTF::String *)&v97, "credProps");
    LODWORD(v87) = 3;
    v88[0] = v97;
    v97 = &v87;
    v27 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v93, (cbor::CBORValue *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v97, (uint64_t)&v96);
    cbor::CBORValue::internalCleanup(v27 + 64, v28);
    v30 = v89;
    *(_DWORD *)(v27 + 64) = v89;
    switch(v30)
    {
      case 0:
      case 1:
        v31 = v90;
        goto LABEL_33;
      case 2:
      case 4:
        *(_QWORD *)(v27 + 72) = v90;
        v32 = v91;
        v90 = 0;
        v91 = 0;
        *(_QWORD *)(v27 + 80) = v32;
        break;
      case 3:
        v31 = v90;
        v90 = 0;
        goto LABEL_33;
      case 5:
        v34 = v90;
        v33 = v91;
        *(_QWORD *)(v27 + 80) = v91;
        v31 = (WTF **)(v27 + 80);
        *(_QWORD *)(v27 + 72) = v34;
        v35 = v92;
        *(_QWORD *)(v27 + 88) = v92;
        if (v35)
        {
          *((_QWORD *)v33 + 2) = v31;
          v90 = &v91;
          v91 = 0;
          v92 = 0;
        }
        else
        {
LABEL_33:
          *(_QWORD *)(v27 + 72) = v31;
        }
        break;
      case 7:
        *(_DWORD *)(v27 + 72) = (_DWORD)v90;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v87, v29);
    cbor::CBORValue::internalCleanup((uint64_t)&v89, v36);
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v84, v85);
  }
  if (!*((_BYTE *)v3 + 32))
    goto LABEL_86;
  v85 = 0;
  v86 = 0;
  v84 = &v85;
  if (*((_BYTE *)v3 + 9))
  {
    v37 = *((_BYTE *)v3 + 8) ? 21 : 20;
    v89 = 7;
    LODWORD(v90) = v37;
    WTF::String::String((WTF::String *)&v97, "supported");
    LODWORD(v87) = 3;
    v88[0] = v97;
    v97 = &v87;
    v38 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v84, (cbor::CBORValue *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v97, (uint64_t)&v96);
    cbor::CBORValue::internalCleanup(v38 + 64, v39);
    v41 = v89;
    *(_DWORD *)(v38 + 64) = v89;
    switch(v41)
    {
      case 0:
      case 1:
        v42 = v90;
        goto LABEL_47;
      case 2:
      case 4:
        *(_QWORD *)(v38 + 72) = v90;
        v43 = v91;
        v90 = 0;
        v91 = 0;
        *(_QWORD *)(v38 + 80) = v43;
        break;
      case 3:
        v42 = v90;
        v90 = 0;
        goto LABEL_47;
      case 5:
        v45 = v90;
        v44 = v91;
        *(_QWORD *)(v38 + 80) = v91;
        v42 = (WTF **)(v38 + 80);
        *(_QWORD *)(v38 + 72) = v45;
        v46 = v92;
        *(_QWORD *)(v38 + 88) = v92;
        if (v46)
        {
          *((_QWORD *)v44 + 2) = v42;
          v90 = &v91;
          v91 = 0;
          v92 = 0;
        }
        else
        {
LABEL_47:
          *(_QWORD *)(v38 + 72) = v42;
        }
        break;
      case 7:
        *(_DWORD *)(v38 + 72) = (_DWORD)v90;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v87, v40);
    cbor::CBORValue::internalCleanup((uint64_t)&v89, v47);
    if (!*((_BYTE *)v3 + 32))
      goto LABEL_95;
  }
  v49 = *((_QWORD *)v3 + 2);
  if (!v49)
    goto LABEL_72;
  v2 = *(_QWORD *)(v49 + 16);
  if (v2)
  {
    v50 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v50)
    {
      if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
        goto LABEL_99;
LABEL_53:
      v2 = (v2 & 0x3FFFFFFFFLL) + v50;
      goto LABEL_54;
    }
  }
  while (1)
  {
LABEL_54:
    if (*(_BYTE *)(v49 + 64) && (v54 = *(_QWORD *)(v49 + 32)) != 0)
    {
      v51 = *(WTF **)(v54 + 32);
      if (!v51)
      {
LABEL_62:
        v52 = 0;
        goto LABEL_63;
      }
    }
    else
    {
      v51 = *(WTF **)(v49 + 48);
      if (!v51)
        goto LABEL_62;
    }
    if ((unint64_t)v51 >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x194685B2CLL);
    }
    v52 = WTF::fastMalloc(v51);
    for (i = 0; i != v51; i = (WTF *)((char *)i + 1))
      *((_BYTE *)i + v52) = *((_BYTE *)i + v2);
LABEL_63:
    v89 = 2;
    v90 = (WTF **)v52;
    LODWORD(v91) = (_DWORD)v51;
    HIDWORD(v91) = (_DWORD)v51;
    WTF::String::String((WTF::String *)&v97, "blob");
    LODWORD(v87) = 3;
    v88[0] = v97;
    v97 = &v87;
    v55 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v84, (cbor::CBORValue *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v97, (uint64_t)&v96);
    cbor::CBORValue::internalCleanup(v55 + 64, v56);
    v58 = v89;
    *(_DWORD *)(v55 + 64) = v89;
    switch(v58)
    {
      case 0:
      case 1:
        v59 = v90;
        goto LABEL_70;
      case 2:
      case 4:
        *(_QWORD *)(v55 + 72) = v90;
        v60 = v91;
        v90 = 0;
        v91 = 0;
        *(_QWORD *)(v55 + 80) = v60;
        break;
      case 3:
        v59 = v90;
        v90 = 0;
        goto LABEL_70;
      case 5:
        v62 = v90;
        v61 = v91;
        *(_QWORD *)(v55 + 80) = v91;
        v59 = (WTF **)(v55 + 80);
        *(_QWORD *)(v55 + 72) = v62;
        v63 = v92;
        *(_QWORD *)(v55 + 88) = v92;
        if (v63)
        {
          *((_QWORD *)v61 + 2) = v59;
          v90 = &v91;
          v91 = 0;
          v92 = 0;
        }
        else
        {
LABEL_70:
          *(_QWORD *)(v55 + 72) = v59;
        }
        break;
      case 7:
        *(_DWORD *)(v55 + 72) = (_DWORD)v90;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v87, v57);
    cbor::CBORValue::internalCleanup((uint64_t)&v89, v64);
    if (!*((_BYTE *)v3 + 32))
    {
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
LABEL_72:
    if (*((_BYTE *)v3 + 25))
    {
      if (*((_BYTE *)v3 + 24))
        v2 = 21;
      else
        v2 = 20;
      v89 = 7;
      LODWORD(v90) = v2;
      WTF::String::String((WTF::String *)v88, "written");
      LODWORD(v87) = 3;
      v97 = &v87;
      v65 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v84, (cbor::CBORValue *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v97, (uint64_t)&v96);
      cbor::CBORValue::internalCleanup(v65 + 64, v66);
      *(_DWORD *)(v65 + 64) = 7;
      *(_DWORD *)(v65 + 72) = v2;
      cbor::CBORValue::internalCleanup((uint64_t)&v87, v67);
      cbor::CBORValue::internalCleanup((uint64_t)&v89, v68);
    }
    cbor::CBORValue::CBORValue((uint64_t)&v89, &v84);
    WTF::String::String((WTF::String *)v88, "largeBlob");
    LODWORD(v87) = 3;
    v97 = &v87;
    v69 = std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::__emplace_unique_key_args<cbor::CBORValue,std::piecewise_construct_t const&,std::tuple<cbor::CBORValue&&>,std::tuple<>>((uint64_t)&v93, (cbor::CBORValue *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t *)&v97, (uint64_t)&v96);
    cbor::CBORValue::internalCleanup(v69 + 64, v70);
    v72 = v89;
    *(_DWORD *)(v69 + 64) = v89;
    switch(v72)
    {
      case 0:
      case 1:
        v73 = v90;
        goto LABEL_84;
      case 2:
      case 4:
        *(_QWORD *)(v69 + 72) = v90;
        v74 = v91;
        v90 = 0;
        v91 = 0;
        *(_QWORD *)(v69 + 80) = v74;
        break;
      case 3:
        v73 = v90;
        v90 = 0;
        goto LABEL_84;
      case 5:
        v76 = v90;
        v75 = v91;
        *(_QWORD *)(v69 + 80) = v91;
        v73 = (WTF **)(v69 + 80);
        *(_QWORD *)(v69 + 72) = v76;
        v77 = v92;
        *(_QWORD *)(v69 + 88) = v92;
        if (v77)
        {
          *((_QWORD *)v75 + 2) = v73;
          v90 = &v91;
          v91 = 0;
          v92 = 0;
        }
        else
        {
LABEL_84:
          *(_QWORD *)(v69 + 72) = v73;
        }
        break;
      case 7:
        *(_DWORD *)(v69 + 72) = (_DWORD)v90;
        break;
      default:
        break;
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v87, v71);
    cbor::CBORValue::internalCleanup((uint64_t)&v89, v78);
    std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v84, v85);
LABEL_86:
    v89 = 5;
    v90 = v93;
    v91 = v94;
    v92 = v95;
    if (v95)
    {
      *((_QWORD *)v94 + 2) = &v91;
      v93 = &v94;
      v94 = 0;
      v95 = 0;
    }
    else
    {
      v90 = &v91;
    }
    v87 = 0;
    v88[0] = 0;
    v84 = &v87;
    v79 = cbor::CBORWriter::encodeCBOR((cbor::CBORWriter *)&v84, (const cbor::CBORValue *)&v89, 16);
    v3 = v87;
    if ((v79 & 1) != 0)
      break;
LABEL_96:
    if (v3)
    {
      v87 = 0;
      LODWORD(v88[0]) = 0;
      WTF::fastFree(v3, v48);
    }
    cbor::CBORValue::internalCleanup((uint64_t)&v89, (WTF::StringImpl *)v48);
    __break(1u);
LABEL_99:
    if (!*MEMORY[0x1E0CC10F0])
      goto LABEL_53;
  }
  v80 = HIDWORD(v88[0]);
  cbor::CBORValue::internalCleanup((uint64_t)&v89, (WTF::StringImpl *)v48);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v80;
  if ((_DWORD)v80)
  {
    v82 = (void *)WTF::fastMalloc((WTF *)v80);
    *(_DWORD *)(a2 + 8) = v80;
    *(_QWORD *)a2 = v82;
    memcpy(v82, v3, v80);
  }
  if (v3)
    WTF::fastFree(v3, v81);
  return std::__tree<std::__value_type<cbor::CBORValue,cbor::CBORValue>,std::__map_value_compare<cbor::CBORValue,std::__value_type<cbor::CBORValue,cbor::CBORValue>,cbor::CBORValue::CTAPLess,true>,WTF::FastAllocator<std::__value_type<cbor::CBORValue,cbor::CBORValue>>>::destroy((uint64_t)&v93, v94);
}

void WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues(WebCore::AuthenticationExtensionsClientOutputs::PRFValues *this)
{
  _QWORD *v2;
  BOOL v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  WTF **v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v5 = v2[10];
      if (v5)
      {
        *(_QWORD *)(v5 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v7 = (WTF **)v2[1];
      if ((v7 & 1) == 0 && v7)
      {
        v13 = (WTF *)v2[1];
        v8 = *v7;
        if (*v7)
        {
          *(_QWORD *)v13 = 0;
          *((_DWORD *)v13 + 2) = 0;
          WTF::fastFree(v8, v6);
        }
        WTF::fastFree(v13, v6);
      }
      WTF::fastFree((WTF *)v2, v6);
    }
  }
  v4 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    v3 = *(_DWORD *)v4 == 2;
    *(_DWORD *)v4 -= 2;
    if (v3)
    {
      v9 = v4[10];
      if (v9)
      {
        *(_QWORD *)(v9 + 8) = 3;
        v4[10] = 0;
      }
      if ((v4[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v4 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v4 + 2));
      v11 = (WTF **)v4[1];
      if ((v11 & 1) == 0 && v11)
      {
        v14 = (WTF *)v4[1];
        v12 = *v11;
        if (*v11)
        {
          *(_QWORD *)v14 = 0;
          *((_DWORD *)v14 + 2) = 0;
          WTF::fastFree(v12, v10);
        }
        WTF::fastFree(v14, v10);
      }
      WTF::fastFree((WTF *)v4, v10);
    }
  }
}

uint64_t std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_destruct_base[abi:sn180100](uint64_t result)
{
  _QWORD *v1;
  BOOL v2;
  uint64_t v3;
  void *v4;
  WTF **v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 24))
  {
    v1 = *(_QWORD **)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    if (v1)
    {
      v2 = *(_DWORD *)v1 == 2;
      *(_DWORD *)v1 -= 2;
      if (v2)
      {
        v8 = result;
        v3 = v1[10];
        if (v3)
        {
          *(_QWORD *)(v3 + 8) = 3;
          v1[10] = 0;
        }
        if ((v1[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v1 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v1 + 2));
        v5 = (WTF **)v1[1];
        if ((v5 & 1) == 0 && v5)
        {
          v7 = (WTF *)v1[1];
          v6 = *v5;
          if (*v5)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v6, v4);
          }
          WTF::fastFree(v7, v4);
        }
        WTF::fastFree((WTF *)v1, v4);
        return v8;
      }
    }
  }
  return result;
}

uint64_t WebCore::validateAV1Parameters(unsigned __int8 *a1, uint64_t a2)
{
  CFTypeID v2;
  BOOL v3;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const void *Value;
  const __CFArray *v8;
  CFNumberRef v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  CFTypeID v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  CFTypeID v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const void *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  unint64_t Count;
  void *v24;
  WTF::StringImpl *v25;
  CFIndex v26;
  const void *ValueAtIndex;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  WTF::StringImpl *v31;
  unsigned __int16 v32;
  WTF::StringImpl *v33;
  char *v34;
  int v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  const void *v38;
  const __CFArray *v39;
  const __CFArray *v40;
  unint64_t v41;
  WTF::StringImpl *v42;
  CFIndex v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;
  WTF::StringImpl *v48;
  unsigned __int16 v49;
  WTF::StringImpl *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  unsigned int v56;
  unsigned int v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  CFTypeID v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  void *v63;
  void *v65;
  uint64_t *v66;
  void *v67;
  uint64_t *v68;
  void *v69;
  uint64_t *v70;
  void *v71;
  uint64_t *v72;
  void *v73;
  uint64_t *v74;
  void *v75;
  uint64_t *v76;
  void *v77;
  uint64_t *v78;
  void *v79;
  uint64_t *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  void *key;
  __int16 valuePtr;
  unsigned __int16 v85;
  WTF::StringImpl *v86;
  CFRange v87;

  if (!WebCore::validateAV1PerLevelConstraints(a1, a2))
    goto LABEL_126;
  {
    if (!WebCore::canLoad_VideoToolbox_VTCopyAV1DecoderCapabilitiesDictionary(void)::loaded)
      goto LABEL_126;
  }
  else
  {
    v63 = (void *)WebCore::VideoToolboxLibrary(0);
    WebCore::softLinkVideoToolboxVTCopyAV1DecoderCapabilitiesDictionary = (uint64_t (*)(void))dlsym(v63, "VTCopyAV1DecoderCapabilitiesDictionary");
    WebCore::canLoad_VideoToolbox_VTCopyAV1DecoderCapabilitiesDictionary(void)::loaded = WebCore::softLinkVideoToolboxVTCopyAV1DecoderCapabilitiesDictionary != 0;
    if (!WebCore::softLinkVideoToolboxVTCopyAV1DecoderCapabilitiesDictionary)
      goto LABEL_126;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDecoderCodecCapability_SupportedProfiles(void)::loaded)
      goto LABEL_126;
  }
  else
  {
    v65 = (void *)WebCore::VideoToolboxLibrary(0);
    v66 = (uint64_t *)dlsym(v65, "kVTDecoderCodecCapability_SupportedProfiles");
    if (!v66)
    {
      v35 = 0;
      WebCore::canLoad_VideoToolbox_kVTDecoderCodecCapability_SupportedProfiles(void)::loaded = 0;
      return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
    }
    WebCore::constantVideoToolboxkVTDecoderCodecCapability_SupportedProfiles = *v66;
    WebCore::canLoad_VideoToolbox_kVTDecoderCodecCapability_SupportedProfiles(void)::loaded = 1;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDecoderCodecCapability_PerProfileSupport(void)::loaded)
      goto LABEL_126;
  }
  else
  {
    v67 = (void *)WebCore::VideoToolboxLibrary(0);
    v68 = (uint64_t *)dlsym(v67, "kVTDecoderCodecCapability_PerProfileSupport");
    if (!v68)
    {
      v35 = 0;
      WebCore::canLoad_VideoToolbox_kVTDecoderCodecCapability_PerProfileSupport(void)::loaded = 0;
      return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
    }
    WebCore::constantVideoToolboxkVTDecoderCodecCapability_PerProfileSupport = *v68;
    WebCore::canLoad_VideoToolbox_kVTDecoderCodecCapability_PerProfileSupport(void)::loaded = 1;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_IsHardwareAccelerated(void)::loaded)
      goto LABEL_126;
  }
  else
  {
    v69 = (void *)WebCore::VideoToolboxLibrary(0);
    v70 = (uint64_t *)dlsym(v69, "kVTDecoderProfileCapability_IsHardwareAccelerated");
    if (!v70)
    {
      v35 = 0;
      WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_IsHardwareAccelerated(void)::loaded = 0;
      return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
    }
    WebCore::constantVideoToolboxkVTDecoderProfileCapability_IsHardwareAccelerated = *v70;
    WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_IsHardwareAccelerated(void)::loaded = 1;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxDecodeLevel(void)::loaded)
      goto LABEL_126;
  }
  else
  {
    v71 = (void *)WebCore::VideoToolboxLibrary(0);
    v72 = (uint64_t *)dlsym(v71, "kVTDecoderProfileCapability_MaxDecodeLevel");
    if (!v72)
    {
      v35 = 0;
      WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxDecodeLevel(void)::loaded = 0;
      return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
    }
    WebCore::constantVideoToolboxkVTDecoderProfileCapability_MaxDecodeLevel = *v72;
    WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxDecodeLevel(void)::loaded = 1;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxPlaybackLevel(void)::loaded)
      goto LABEL_126;
  }
  else
  {
    v73 = (void *)WebCore::VideoToolboxLibrary(0);
    v74 = (uint64_t *)dlsym(v73, "kVTDecoderProfileCapability_MaxPlaybackLevel");
    if (!v74)
    {
      v35 = 0;
      WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxPlaybackLevel(void)::loaded = 0;
      return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
    }
    WebCore::constantVideoToolboxkVTDecoderProfileCapability_MaxPlaybackLevel = *v74;
    WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxPlaybackLevel(void)::loaded = 1;
  }
  {
    if (!WebCore::canLoad_VideoToolbox_kVTDecoderCapability_ChromaSubsampling(void)::loaded)
      goto LABEL_126;
  }
  else
  {
    v75 = (void *)WebCore::VideoToolboxLibrary(0);
    v76 = (uint64_t *)dlsym(v75, "kVTDecoderCapability_ChromaSubsampling");
    if (!v76)
    {
      v35 = 0;
      WebCore::canLoad_VideoToolbox_kVTDecoderCapability_ChromaSubsampling(void)::loaded = 0;
      return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
    }
    WebCore::constantVideoToolboxkVTDecoderCapability_ChromaSubsampling = *v76;
    WebCore::canLoad_VideoToolbox_kVTDecoderCapability_ChromaSubsampling(void)::loaded = 1;
  }
  {
    if (WebCore::canLoad_VideoToolbox_kVTDecoderCapability_ColorDepth(void)::loaded)
      goto LABEL_18;
LABEL_126:
    v35 = 0;
    return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
  }
  v77 = (void *)WebCore::VideoToolboxLibrary(0);
  v78 = (uint64_t *)dlsym(v77, "kVTDecoderCapability_ColorDepth");
  if (!v78)
  {
    v35 = 0;
    WebCore::canLoad_VideoToolbox_kVTDecoderCapability_ColorDepth(void)::loaded = 0;
    return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
  }
  WebCore::constantVideoToolboxkVTDecoderCapability_ColorDepth = *v78;
  WebCore::canLoad_VideoToolbox_kVTDecoderCapability_ColorDepth(void)::loaded = 1;
LABEL_18:
  v5 = (const __CFDictionary *)WebCore::softLinkVideoToolboxVTCopyAV1DecoderCapabilitiesDictionary();
  if (!v5)
    goto LABEL_126;
  v6 = v5;
  Value = CFDictionaryGetValue(v5, (const void *)WebCore::constantVideoToolboxkVTDecoderCodecCapability_SupportedProfiles);
  v8 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(Value);
  if (!v8)
  {
    v35 = 0;
    goto LABEL_57;
  }
  valuePtr = a1[8];
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
  v87.length = CFArrayGetCount(v8);
  v87.location = 0;
  if (!CFArrayContainsValue(v8, v87, v9)
    || (v10 = (const __CFDictionary *)CFDictionaryGetValue(v6, (const void *)WebCore::constantVideoToolboxkVTDecoderCodecCapability_PerProfileSupport), (v11 = v10) == 0)|| (v12 = CFGetTypeID(v10), v12 != CFDictionaryGetTypeID()))
  {
    v35 = 0;
    goto LABEL_54;
  }
  WTF::String::number((WTF::String *)valuePtr);
  WTF::String::createCFString((WTF::String *)&v81);
  v14 = v81;
  v81 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (const __CFDictionary *)CFDictionaryGetValue(v11, key);
  v16 = v15;
  if (!v15 || (v17 = CFGetTypeID(v15), v17 != CFDictionaryGetTypeID()))
  {
    v35 = 0;
    goto LABEL_98;
  }
  v3 = CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTDecoderProfileCapability_IsHardwareAccelerated) == (const void *)*MEMORY[0x1E0C9AE50];
  v18 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTDecoderProfileCapability_MaxDecodeLevel);
  v19 = v18;
  if (v18)
  {
    v2 = CFGetTypeID(v18);
    if (v2 == CFNumberGetTypeID())
    {
      LOWORD(v81) = 0;
      if (!CFNumberGetValue(v19, kCFNumberSInt16Type, &v81) || a1[9] > (__int16)v81)
        goto LABEL_97;
    }
  }
  v20 = CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTDecoderCapability_ChromaSubsampling);
  v21 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(v20);
  v22 = v21;
  if (!v21)
    goto LABEL_68;
  v81 = 0;
  v82 = 0;
  Count = CFArrayGetCount(v21);
  v2 = Count;
  if (!Count)
    goto LABEL_60;
  if (HIDWORD(Count))
    goto LABEL_154;
  v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)Count);
  v26 = 0;
  LODWORD(v82) = v2;
  v81 = v25;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v22, v26);
    if (!WTF::dynamic_cf_cast<__CFString const*>(ValueAtIndex))
      goto LABEL_49;
    MEMORY[0x19AEA5508](&v86);
    if (!v86)
    {
      v28 = 0;
      v29 = 0;
LABEL_41:
      v30 = WTF::parseInteger<unsigned char,unsigned char>(v28, v29, 10, 0);
      goto LABEL_42;
    }
    v28 = *((_QWORD *)v86 + 1);
    v29 = *((unsigned int *)v86 + 1);
    if ((*((_BYTE *)v86 + 16) & 4) != 0)
      goto LABEL_41;
    v30 = WTF::parseInteger<unsigned char,char16_t>(v28, v29, 10, 0);
LABEL_42:
    v32 = v30;
    v33 = v86;
    v86 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v31);
      else
        *(_DWORD *)v33 -= 2;
    }
    v85 = v32;
    if (v32 >= 0x100u)
    {
      if (HIDWORD(v82) == (_DWORD)v82)
      {
        v34 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v81, (WTF *)(HIDWORD(v82) + 1), (unint64_t)&v85);
        *((_BYTE *)v81 + HIDWORD(v82)) = *v34;
      }
      else
      {
        *((_BYTE *)v81 + HIDWORD(v82)) = v32;
      }
      ++HIDWORD(v82);
    }
LABEL_49:
    ++v26;
  }
  while (v2 != v26);
  v24 = (void *)HIDWORD(v82);
  if (v82 <= HIDWORD(v82))
    goto LABEL_60;
  v61 = v81;
  if (HIDWORD(v82))
  {
    LODWORD(v82) = HIDWORD(v82);
    v36 = (WTF::StringImpl *)WTF::fastRealloc(v81, (void *)HIDWORD(v82));
    v81 = v36;
  }
  else
  {
    if (!v81)
      goto LABEL_97;
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree(v61, (void *)HIDWORD(v82));
LABEL_60:
    v36 = v81;
  }
  if (!HIDWORD(v82))
  {
LABEL_96:
    if (!v36)
      goto LABEL_97;
LABEL_95:
    v81 = 0;
    LODWORD(v82) = 0;
    WTF::fastFree(v36, v24);
    goto LABEL_97;
  }
  v37 = 0;
  while (*((unsigned __int8 *)v36 + v37) != a1[13])
  {
    if (HIDWORD(v82) == ++v37)
      goto LABEL_95;
  }
  v81 = 0;
  LODWORD(v82) = 0;
  WTF::fastFree(v36, v24);
LABEL_68:
  v38 = CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTDecoderCapability_ColorDepth);
  v39 = (const __CFArray *)WTF::dynamic_cf_cast<__CFArray const*>(v38);
  v40 = v39;
  if (!v39)
    goto LABEL_101;
  v81 = 0;
  v82 = 0;
  v41 = CFArrayGetCount(v39);
  v2 = v41;
  if (!v41)
    goto LABEL_90;
  if (HIDWORD(v41))
  {
LABEL_154:
    __break(0xC471u);
    JUMPOUT(0x194686820);
  }
  v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v41);
  v43 = 0;
  LODWORD(v82) = v2;
  v81 = v42;
  while (2)
  {
    v44 = CFArrayGetValueAtIndex(v40, v43);
    if (!WTF::dynamic_cf_cast<__CFString const*>(v44))
      goto LABEL_85;
    MEMORY[0x19AEA5508](&v86);
    if (!v86)
    {
      v45 = 0;
      v46 = 0;
      goto LABEL_77;
    }
    v45 = *((_QWORD *)v86 + 1);
    v46 = *((unsigned int *)v86 + 1);
    if ((*((_BYTE *)v86 + 16) & 4) != 0)
    {
LABEL_77:
      v47 = WTF::parseInteger<unsigned char,unsigned char>(v45, v46, 10, 0);
      goto LABEL_78;
    }
    v47 = WTF::parseInteger<unsigned char,char16_t>(v45, v46, 10, 0);
LABEL_78:
    v49 = v47;
    v50 = v86;
    v86 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v48);
      else
        *(_DWORD *)v50 -= 2;
    }
    v85 = v49;
    if (v49 >= 0x100u)
    {
      if (HIDWORD(v82) == (_DWORD)v82)
      {
        v51 = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v81, (WTF *)(HIDWORD(v82) + 1), (unint64_t)&v85);
        *((_BYTE *)v81 + HIDWORD(v82)) = *v51;
      }
      else
      {
        *((_BYTE *)v81 + HIDWORD(v82)) = v49;
      }
      ++HIDWORD(v82);
    }
LABEL_85:
    if (v2 != ++v43)
      continue;
    break;
  }
  v24 = (void *)HIDWORD(v82);
  if (v82 <= HIDWORD(v82))
    goto LABEL_90;
  v62 = v81;
  if (HIDWORD(v82))
  {
    LODWORD(v82) = HIDWORD(v82);
    v36 = (WTF::StringImpl *)WTF::fastRealloc(v81, (void *)HIDWORD(v82));
    v81 = v36;
    goto LABEL_91;
  }
  if (!v81)
    goto LABEL_97;
  v81 = 0;
  LODWORD(v82) = 0;
  WTF::fastFree(v62, (void *)HIDWORD(v82));
LABEL_90:
  v36 = v81;
LABEL_91:
  if (!HIDWORD(v82))
    goto LABEL_96;
  v52 = 0;
  while (*((unsigned __int8 *)v36 + v52) != a1[11])
  {
    if (HIDWORD(v82) == ++v52)
      goto LABEL_95;
  }
  v81 = 0;
  LODWORD(v82) = 0;
  WTF::fastFree(v36, v24);
LABEL_101:
  v54 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTDecoderProfileCapability_MaxPlaybackLevel);
  v55 = v54;
  if (!v54 || (v2 = CFGetTypeID(v54), v2 != CFNumberGetTypeID()))
  {
    LOBYTE(v2) = 0;
LABEL_106:
    {
      if (!WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxHDRPlaybackLevel(void)::loaded)
      {
LABEL_118:
        v35 = 1;
        goto LABEL_98;
      }
    }
    else
    {
      v79 = (void *)WebCore::VideoToolboxLibrary(0);
      v80 = (uint64_t *)dlsym(v79, "kVTDecoderProfileCapability_MaxHDRPlaybackLevel");
      if (!v80)
      {
        WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxHDRPlaybackLevel(void)::loaded = 0;
        v35 = 1;
        goto LABEL_98;
      }
      WebCore::constantVideoToolboxkVTDecoderProfileCapability_MaxHDRPlaybackLevel = *v80;
      WebCore::canLoad_VideoToolbox_kVTDecoderProfileCapability_MaxHDRPlaybackLevel(void)::loaded = 1;
    }
    v35 = 1;
    if (a1[11] < 0xAu)
      goto LABEL_98;
    if (a1[14] != 9)
      goto LABEL_98;
    v56 = a1[15];
    if (v56 > 0x12)
      goto LABEL_98;
    if (((1 << v56) & 0x5C000) == 0)
      goto LABEL_98;
    v57 = a1[16];
    if (v57 > 0xE)
      goto LABEL_98;
    if (((1 << v57) & 0x4600) == 0)
      goto LABEL_98;
    v58 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)WebCore::constantVideoToolboxkVTDecoderProfileCapability_MaxHDRPlaybackLevel);
    v59 = v58;
    if (!v58)
      goto LABEL_98;
    v60 = CFGetTypeID(v58);
    if (v60 == CFNumberGetTypeID())
    {
      LOWORD(v81) = 0;
      if (!CFNumberGetValue(v59, kCFNumberSInt16Type, &v81))
        goto LABEL_97;
      LOBYTE(v2) = a1[9] <= (__int16)v81;
    }
    goto LABEL_118;
  }
  LOWORD(v81) = 0;
  if (CFNumberGetValue(v55, kCFNumberSInt16Type, &v81))
  {
    LOBYTE(v2) = a1[9] <= (__int16)v81;
    goto LABEL_106;
  }
LABEL_97:
  v35 = 0;
LABEL_98:
  v53 = key;
  key = 0;
  if (v53)
    CFRelease(v53);
LABEL_54:
  if (v9)
    CFRelease(v9);
LABEL_57:
  CFRelease(v6);
  return (v35 << 24) | (v3 << 16) | (v2 << 8) | v35;
}

void sub_19468682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, int a11, CFTypeRef cf, uint64_t a13, WTF::StringImpl *a14)
{
  const void *v14;
  const void *v15;

  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

const void *WTF::dynamic_cf_cast<__CFArray const*>(const void *result)
{
  const void *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFArrayGetTypeID())
      return v1;
    else
      return 0;
  }
  return result;
}

BOOL WebCore::av1HardwareDecoderAvailable(WebCore *this)
{
  _BOOL8 result;

  result = WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(this);
  if ((_DWORD)result)
    return WebCore::softLink_VideoToolbox_VTIsHardwareDecodeSupported((WebCore *)0x61763031) != 0;
  return result;
}

uint64_t WTF::parseInteger<unsigned char,unsigned char>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v12;
  char v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *i;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned __int8 v19;
  BOOL v20;
  int v21;
  uint64_t v23;
  int v24;

  v4 = 0;
  v5 = 0;
  if (!a1 || !a2)
    return v4 | (v5 << 8);
  v6 = 0;
  while (1)
  {
    v7 = *(unsigned __int8 *)(a1 + v6);
    if ((v7 - 9) >= 5 && v7 != 32)
      break;
    if (a2 == ++v6)
      goto LABEL_51;
  }
  if (v7 == 43)
  {
    if (a2 - 1 == v6)
      goto LABEL_51;
    v8 = ~v6 + a2;
    v9 = (unsigned __int8 *)(a1 + v6 + 1);
    v7 = *v9;
  }
  else
  {
    v9 = (unsigned __int8 *)(a1 + v6);
    v8 = a2 - v6;
  }
  if ((v7 - 48) > 9)
  {
    if ((v7 | 0x20u) >= 0x61)
    {
      v12 = a3 >= 36 ? 36 : a3;
      v11 = v12 + 87;
      if (v12 + 87 > (v7 | 0x20u))
        goto LABEL_23;
    }
LABEL_51:
    v4 = 0;
    v5 = 0;
    return v4 | (v5 << 8);
  }
  if (v7 - 48 >= a3)
    goto LABEL_51;
  if (a3 >= 36)
    v10 = 36;
  else
    v10 = a3;
  v11 = v10 + 87;
LABEL_23:
  v4 = 0;
  v13 = 0;
  v14 = &v9[v8];
  v15 = v8 - 1;
  for (i = v9 + 1; ; ++i)
  {
    v17 = v7 - 48;
    v18 = (v7 - 48);
    v19 = (v7 | 0x20) - 87;
    if (v18 < 0xA)
      v19 = v17;
    v20 = ((v4 * (_WORD)a3) & 0xFF00) == 0;
    if (((v4 * (_WORD)a3) & 0xFF00) == 0)
      v4 *= (_BYTE)a3;
    v21 = v4 + v19;
    if (!v20 || v21 != v21)
      v13 = 1;
    if (v21 == v21)
      v4 = v21;
    if (!v15)
      break;
    ++v9;
    v7 = *i;
    if ((v7 - 48) > 9)
    {
      if ((v7 | 0x20u) < 0x61 || v11 <= (v7 | 0x20u))
      {
        v14 = i;
        break;
      }
    }
    else if (v7 - 48 >= a3)
    {
      v14 = v9;
      break;
    }
    --v15;
  }
  if (v13)
    goto LABEL_51;
  v5 = 1;
  if (!a4 && v15)
  {
    v23 = 0;
    while (1)
    {
      v24 = v14[v23];
      if ((v24 - 9) >= 5 && v24 != 32)
        break;
      ++v23;
      v5 = 1;
      if (v15 == v23)
        return v4 | (v5 << 8);
    }
    goto LABEL_51;
  }
  return v4 | (v5 << 8);
}

uint64_t WTF::parseInteger<unsigned char,char16_t>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned __int8 v4;
  int v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  char v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned __int8 v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  int v22;

  v4 = 0;
  v5 = 0;
  if (!a1 || !a2)
    return v4 | (v5 << 8);
  v6 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v7 = *(v6 - 1);
    if ((v7 - 9) >= 5 && v7 != 32)
      break;
    ++v6;
    if (!--a2)
      goto LABEL_51;
  }
  if (v7 == 43)
  {
    if (!--a2)
      goto LABEL_51;
    v7 = *v6;
  }
  else
  {
    --v6;
  }
  if ((v7 - 48) > 9)
  {
    if ((v7 | 0x20u) >= 0x61)
    {
      v10 = a3 >= 36 ? 36 : a3;
      v9 = v10 + 87;
      if (v10 + 87 > (v7 | 0x20u))
        goto LABEL_23;
    }
LABEL_51:
    v4 = 0;
    v5 = 0;
    return v4 | (v5 << 8);
  }
  if (v7 - 48 >= a3)
    goto LABEL_51;
  if (a3 >= 36)
    v8 = 36;
  else
    v8 = a3;
  v9 = v8 + 87;
LABEL_23:
  v4 = 0;
  v11 = 0;
  v12 = a2 - 1;
  v13 = v6 + 1;
  v14 = &v6[a2];
  while (1)
  {
    v15 = v7 - 48;
    v16 = (unsigned __int16)(v7 - 48);
    v17 = (v7 | 0x20) - 87;
    if (v16 < 0xA)
      v17 = v15;
    v18 = ((v4 * (_WORD)a3) & 0xFF00) == 0;
    if (((v4 * (_WORD)a3) & 0xFF00) == 0)
      v4 *= (_BYTE)a3;
    v19 = v4 + v17;
    if (!v18 || v19 != v19)
      v11 = 1;
    if (v19 == v19)
      v4 = v19;
    if (!v12)
      break;
    ++v6;
    v7 = *v13;
    if ((v7 - 48) > 9)
    {
      if ((v7 | 0x20u) < 0x61 || v9 <= (v7 | 0x20u))
      {
        v14 = v13;
        break;
      }
    }
    else if (v7 - 48 >= a3)
    {
      v14 = v6;
      break;
    }
    --v12;
    ++v13;
  }
  if (v11)
    goto LABEL_51;
  v5 = 1;
  if (!a4 && v12)
  {
    v21 = 0;
    while (1)
    {
      v22 = v14[v21];
      if ((v22 - 9) >= 5 && v22 != 32)
        break;
      ++v21;
      v5 = 1;
      if (v12 == v21)
        return v4 | (v5 << 8);
    }
    goto LABEL_51;
  }
  return v4 | (v5 << 8);
}

uint64_t WebCore::codecsMeetHardwareDecodeRequirements(unsigned int *a1, uint64_t a2, double a3, double a4, float a5)
{
  _BOOL4 inited;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  WTF *v17;
  char v18;
  uint64_t v19;
  _BOOL4 v20;
  WTF *v22;
  int v23;
  unsigned int v24;

  {
    if (WebCore::codecsMeetHardwareDecodeRequirements(WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::hasBattery)
      goto LABEL_3;
    return 1;
  }
  {
    v18 = WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance;
    if ((unsigned __int16)WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance >= 0x100u)
      goto LABEL_28;
  }
  else
  {
    WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance = 0;
    *(_QWORD *)algn_1ECE889C8 = 0;
  }
  if (HIBYTE(WebCore::hasBattery))
  {
    v18 = WebCore::hasBattery;
  }
  else
  {
    WebCore::hasBattery = 257;
    v18 = 1;
  }
LABEL_28:
  v20 = v18 != 0;
  WebCore::codecsMeetHardwareDecodeRequirements(WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::hasBattery = v20;
  if (!v20)
    return 1;
LABEL_3:
  {
    inited = WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded != 0;
  }
  else
  {
    v19 = a2;
    inited = WebCore::init_VideoToolbox_VTIsHardwareDecodeSupported((WebCore *)a1);
    a2 = v19;
    WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded = inited;
  }
  v7 = 1;
  if (inited)
  {
    v8 = *(_DWORD *)(a2 + 12);
    if (v8)
    {
      WebCore::contentTypesToCodecs((uint64_t)&v22, *(WebCore::ContentType **)a2, v8, a3, a4, a5);
      v10 = a1[3];
      if ((_DWORD)v10)
      {
        v11 = v24;
        if (v24)
        {
          v12 = *(unsigned int **)a1;
          v13 = &v12[v10];
LABEL_10:
          v14 = v22;
          v15 = *v12;
          do
          {
            v16 = *(_DWORD *)v14;
            v14 = (WTF *)((char *)v14 + 4);
            if (v16 == (_DWORD)v15)
            {
              if (WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported(v15))
                break;
              v7 = 0;
              goto LABEL_20;
            }
            --v11;
          }
          while (v11);
          while (++v12 != v13)
          {
            v11 = v24;
            if (v24)
              goto LABEL_10;
          }
          v7 = 1;
        }
      }
LABEL_20:
      v17 = v22;
      if (v22)
      {
        v22 = 0;
        v23 = 0;
        WTF::fastFree(v17, v9);
      }
    }
  }
  return v7;
}

uint64_t WebCore::contentTypesToCodecs(uint64_t result, WebCore::ContentType *this, unsigned int a3, double a4, double a5, float a6)
{
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF *v10;
  WTF *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int16x8_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  const char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  int16x8_t v28;
  char *v29;
  int16x8_t *v30;
  int8x16_t v31;
  int16x8_t *v32;
  __int8 *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  WebCore::ContentType *v39;
  uint64_t v40;
  WTF *v41;
  int v42;
  unsigned int v43;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  if (a3)
  {
    v7 = result;
    v38 = (char *)this + 16 * a3;
    while (1)
    {
      v39 = this;
      result = (uint64_t)WebCore::ContentType::codecs(this, (uint64_t)&v41, a6);
      v10 = v41;
      v11 = (WTF *)((char *)v41 + 8 * v43);
      if (v43)
      {
        do
        {
          v12 = v6 & 0xFFFFFF0000000000;
          v13 = *(_QWORD *)v10;
          if (!*(_QWORD *)v10)
          {
            v15 = 0;
            v6 = v12 | 0x100000000;
            goto LABEL_45;
          }
          v14 = *(_DWORD *)(v13 + 16);
          v15 = *(int16x8_t **)(v13 + 8);
          v16 = *(unsigned int *)(v13 + 4);
          v6 = v16 | ((unint64_t)((v14 >> 2) & 1) << 32) | v12;
          if ((v14 & 4) != 0)
          {
            if (!(_DWORD)v16)
              goto LABEL_45;
            v17 = 0;
            if (v16 >= 0x10)
              v18 = 16;
            else
              v18 = v16;
            while (v15->i8[v17] != 46)
            {
              if (v18 == ++v17)
              {
                if (v16 < 0x11)
                  goto LABEL_45;
                v19 = memchr(&v15->i8[v18], 46, v16 - v18);
                if (!v19)
                  goto LABEL_45;
LABEL_16:
                LODWORD(v20) = (_DWORD)v19 - (_DWORD)v15;
                goto LABEL_17;
              }
            }
            LODWORD(v19) = (_DWORD)v15 + v17;
            goto LABEL_16;
          }
          v28.i64[0] = 0x2E002E002E002ELL;
          v28.i64[1] = 0x2E002E002E002ELL;
          if (!(_DWORD)v16)
            goto LABEL_45;
          v29 = &v15->i8[2 * v16];
          if (v16 <= 0x1F)
          {
            v35 = 0;
            v36 = 2 * v16;
            while (v15->i16[v35 / 2] != 46)
            {
              v35 += 2;
              LODWORD(v20) = -1;
              if (v36 == v35)
                goto LABEL_17;
            }
            v34 = &v15->i8[v35];
          }
          else
          {
            v30 = v15;
            while (1)
            {
              v31 = (int8x16_t)vceqq_s16(*v30, v28);
              LOWORD(v9) = vmaxvq_u16((uint16x8_t)v31);
              if (v9)
                break;
              v32 = v30 + 1;
              v33 = &v30[1].i8[14];
              ++v30;
              if (v33 >= v29)
              {
                if (v32 >= (int16x8_t *)v29
                  || (v31 = (int8x16_t)vceqq_s16(*((int16x8_t *)v29 - 1), v28),
                      LOWORD(v9) = vmaxvq_u16((uint16x8_t)v31),
                      !v9))
                {
LABEL_45:
                  LODWORD(v20) = -1;
                  goto LABEL_17;
                }
                v30 = (int16x8_t *)(v29 - 16);
                break;
              }
            }
            v34 = &v30->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v31))];
          }
          if (v34 == v29)
            LODWORD(v20) = -1;
          else
            v20 = (v34 - (char *)v15) >> 1;
LABEL_17:
          v21 = v20;
          if ((v6 & 0xFF00000000) != 0)
            v21 = v20 | 0x100000000;
          if (v6 <= v20)
            v21 = v6;
          if ((v21 & 0xFF00000000) != 0)
            v22 = 0x100000004;
          else
            v22 = 4;
          if (v21 < 5)
            v22 = v21;
          v23 = (_DWORD)v21 == 0;
          if ((_DWORD)v21)
            v24 = (const char *)v15;
          else
            v24 = "";
          if (v23)
            v22 = 0x100000000;
          if ((_DWORD)v6)
            v25 = (unsigned __int8 *)v24;
          else
            v25 = "";
          if ((_DWORD)v6)
            v26 = v22;
          else
            v26 = 0x100000000;
          result = WebCore::FourCC::fromString(v25, v26);
          v40 = result;
          if ((result & 0xFF00000000) != 0)
          {
            v27 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v27 == *(_DWORD *)(v7 + 8))
            {
              result = WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v27 + 1, (unint64_t)&v40);
              *(_DWORD *)(*(_QWORD *)v7 + 4 * *(unsigned int *)(v7 + 12)) = *(_DWORD *)result;
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)v7 + 4 * v27) = result;
            }
            ++*(_DWORD *)(v7 + 12);
          }
          v10 = (WTF *)((char *)v10 + 8);
        }
        while (v10 != v11);
        v10 = v41;
        if (v43)
          break;
      }
      if (v10)
        goto LABEL_75;
LABEL_65:
      this = (WebCore::ContentType *)((char *)v39 + 16);
      if ((char *)v39 + 16 == v38)
        return result;
    }
    v37 = 8 * v43;
    do
    {
      result = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
        else
          *(_DWORD *)result -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v37 -= 8;
    }
    while (v37);
    v10 = v41;
    if (!v41)
      goto LABEL_65;
LABEL_75:
    v41 = 0;
    v42 = 0;
    result = WTF::fastFree(v10, v8);
    goto LABEL_65;
  }
  return result;
}

void sub_194687194(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl **a15, int a16, unsigned int a17)
{
  uint64_t v17;
  WTF *v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  if (a17)
  {
    v20 = a15;
    v21 = 8 * a17;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  if (a15)
    WTF::fastFree((WTF *)a15, a2);
  v19 = *(WTF **)v17;
  if (*(_QWORD *)v17)
  {
    *(_QWORD *)v17 = 0;
    *(_DWORD *)(v17 + 8) = 0;
    WTF::fastFree(v19, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::contentTypeMeetsHardwareDecodeRequirements(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  char v4;
  WebCore::ContentType *v5;
  double v6;
  double v7;
  float v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  float v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  WebCore::ContentType *v18;
  uint64_t v19;
  WTF *v20;
  int v21;

  v3 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1)
    *(_DWORD *)v3 += 2;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = (WebCore::ContentType *)WTF::fastMalloc((WTF *)0x10);
  v19 = 1;
  v18 = v5;
  if (v3)
    *(_DWORD *)v3 += 2;
  *(_QWORD *)v5 = v3;
  *((_BYTE *)v5 + 8) = v4;
  HIDWORD(v19) = 1;
  WebCore::contentTypesToCodecs((uint64_t)&v20, v5, 1u, v6, v7, v8);
  WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v9);
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v10);
    else
      *(_DWORD *)v3 -= 2;
  }
  v15 = WebCore::codecsMeetHardwareDecodeRequirements((unsigned int *)&v20, a2, v11, v12, v13);
  v16 = v20;
  if (v20)
  {
    v20 = 0;
    v21 = 0;
    WTF::fastFree(v16, v14);
  }
  return v15;
}

void sub_1946872EC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::assetTrackMeetsHardwareDecodeRequirements(void *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  float v7;
  uint64_t i;
  PAL *v9;
  const opaqueCMFormatDescription *v10;
  const opaqueCMFormatDescription *v11;
  int v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  WTF *v16;
  int v18;
  WTF *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  v4 = objc_msgSend((id)objc_msgSend(a1, "formatDescriptions"), "count");
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v9 = (PAL *)objc_msgSend((id)objc_msgSend(a1, "formatDescriptions"), "objectAtIndexedSubscript:", i);
      if (PAL::softLinkCoreMediaCMFormatDescriptionGetMediaType[0](v9, v10) == 1986618469)
      {
        v12 = PAL::softLinkCoreMediaCMFormatDescriptionGetMediaSubType[0](v9, v11);
        v18 = v12;
        if (HIDWORD(v20) == (_DWORD)v20)
        {
          v13 = (_DWORD *)WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v19, HIDWORD(v20) + 1, (unint64_t)&v18);
          *((_DWORD *)v19 + HIDWORD(v20)) = *v13;
        }
        else
        {
          *((_DWORD *)v19 + HIDWORD(v20)) = v12;
        }
        ++HIDWORD(v20);
      }
    }
  }
  v15 = WebCore::codecsMeetHardwareDecodeRequirements((unsigned int *)&v19, a2, v5, v6, v7);
  v16 = v19;
  if (v19)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    WTF::fastFree(v16, v14);
  }
  return v15;
}

void sub_194687460(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12)
{
  if (a11)
    WTF::fastFree(a11, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::FourCC,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v23;
  int v24;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (!(v10 >> 30))
      {
        v11 = WTF::fastMalloc((WTF *)(4 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_DWORD *)(v11 + v13) = *(_DWORD *)((char *)v5 + v13);
          v13 += 4;
        }
        while (4 * v6 != v13);
        if (v5)
        {
          if ((WTF *)v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x1946875ECLL);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 30)
      goto LABEL_35;
    v18 = *(unsigned int *)(a1 + 12);
    v19 = WTF::fastMalloc((WTF *)(4 * v17));
    *(_DWORD *)(a1 + 8) = v17;
    *(_QWORD *)a1 = v19;
    if ((_DWORD)v18)
    {
      v21 = 4 * v18;
      v22 = (_DWORD *)v19;
      v23 = v5;
      do
      {
        v24 = *(_DWORD *)v23;
        v23 = (WTF *)((char *)v23 + 4);
        *v22++ = v24;
        v21 -= 4;
      }
      while (v21);
    }
    if (v5)
    {
      if ((WTF *)v19 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::StringImpl ***)a1;
    v7 = 16 * v3;
    do
    {
      WebCore::ContentType::~ContentType(v6, a2);
      v6 = (WTF::StringImpl **)(v8 + 16);
      v7 -= 16;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_19468770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  if (cf)
    CFRelease(cf);
  CFRelease(v14);
  _Unwind_Resume(a1);
}

void sub_1946877D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c72_ZTSKZ59__WebAVAudioSessionAvailableInputsListener_routeDidChange__E3__0(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c72_ZTSKZ59__WebAVAudioSessionAvailableInputsListener_routeDidChange__E3__0(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    CFRelease(v2);
}

id *WebCore::AVAudioSessionCaptureDeviceManager::singleton(WebCore::AVAudioSessionCaptureDeviceManager *this)
{
  {
    WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager((WebCore::AVAudioSessionCaptureDeviceManager *)WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager);
  }
  return WebCore::AVAudioSessionCaptureDeviceManager::singleton(void)::manager;
}

void WebCore::AVAudioSessionCaptureDeviceManager::~AVAudioSessionCaptureDeviceManager(WebCore::AVAudioSessionCaptureDeviceManager *this)
{
  WTF::StringImpl *v2;
  const void *v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(void);
  void (**v12)(void);
  WTF *v13;
  WTF::StringImpl *v14;

  objc_msgSend(*((id *)this + 9), "invalidate");
  v3 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v7 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    CFRelease(v8);
  if (*((_BYTE *)this + 64))
  {
    v9 = *((unsigned int *)this + 15);
    if ((_DWORD)v9)
    {
      v10 = 48 * v9;
      v11 = (void (***)(void))*((_QWORD *)this + 6);
      do
      {
        v12 = *v11;
        v11 += 6;
        (*v12)();
        v10 -= 48;
      }
      while (v10);
    }
    v13 = (WTF *)*((_QWORD *)this + 6);
    if (v13)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v13, v2);
    }
  }
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 8, v2);
  if (*((_BYTE *)this + 24))
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 2, v14);
}

{
  WebCore::AVAudioSessionCaptureDeviceManager::~AVAudioSessionCaptureDeviceManager(this);
  JUMPOUT(0x19AEA7644);
}

void sub_194687990(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(void);
  void (**v12)(void);
  WTF *v13;
  WTF::StringImpl *v14;

  v4 = *(const void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF::StringImpl **)(v2 + 96);
  *(_QWORD *)(v2 + 96) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 88) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v7 = *(const void **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v7)
    CFRelease(v7);
  v8 = *(const void **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v8)
    CFRelease(v8);
  if (*(_BYTE *)(v2 + 64))
  {
    v9 = *(unsigned int *)(v2 + 60);
    if ((_DWORD)v9)
    {
      v10 = 48 * v9;
      v11 = *(void (****)(void))(v2 + 48);
      do
      {
        v12 = *v11;
        v11 += 6;
        (*v12)();
        v10 -= 48;
      }
      while (v10);
    }
    v13 = *(WTF **)(v2 + 48);
    if (v13)
    {
      *(_QWORD *)(v2 + 48) = 0;
      *(_DWORD *)(v2 + 56) = 0;
      WTF::fastFree(v13, a2);
    }
  }
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 32), a2);
  if (*(_BYTE *)(v2 + 24))
    WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v2 + 8), v14);
  _Unwind_Resume(a1);
}

WTF *WebCore::AVAudioSessionCaptureDeviceManager::captureDevices(WebCore::AVAudioSessionCaptureDeviceManager *this)
{
  WebCore::AVAudioSessionCaptureDeviceManager *v3;

  if (*((_BYTE *)this + 24))
    return (WebCore::AVAudioSessionCaptureDeviceManager *)((char *)this + 8);
  WebCore::AVAudioSessionCaptureDeviceManager::refreshAudioCaptureDevices(this);
  if (*((_BYTE *)this + 24))
    return (WebCore::AVAudioSessionCaptureDeviceManager *)((char *)this + 8);
  v3 = (WebCore::AVAudioSessionCaptureDeviceManager *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::AVAudioSessionCaptureDeviceManager::refreshAudioCaptureDevices(v3);
}

WTF *WebCore::AVAudioSessionCaptureDeviceManager::refreshAudioCaptureDevices(WebCore::AVAudioSessionCaptureDeviceManager *this)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  const WTF::StringImpl *v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  void (**v11)(WTF *);
  uint64_t v12;
  WTF *v13;
  void (**v14)(void);
  WTF *result;
  WTF *v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  v2 = *((_QWORD *)this + 11);
  v3 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v3 = off_1E31F6DD8;
  *((_QWORD *)v3 + 1) = &v18;
  *((_QWORD *)v3 + 2) = this;
  v16 = v3;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v2 + 24))(v2, &v16);
  v4 = v16;
  v16 = 0;
  if (v4)
    (*(void (**)(WTF *))(*(_QWORD *)v4 + 8))(v4);
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)&v16, (unint64_t *)&v18);
  WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices((unsigned int *)this, (WTF::StringImpl *)&v16, v5);
  v7 = v16;
  if (v17)
  {
    v8 = 48 * v17;
    v9 = v16;
    v10 = v16;
    do
    {
      v11 = *(void (***)(WTF *))v10;
      v10 = (WTF *)((char *)v10 + 48);
      (*v11)(v9);
      v9 = v10;
      v8 -= 48;
    }
    while (v8);
  }
  if (v7)
    WTF::fastFree(v7, v6);
  if (HIDWORD(v19))
  {
    v12 = 48 * HIDWORD(v19);
    v13 = v18;
    do
    {
      v14 = *(void (***)(void))v13;
      v13 = (WTF *)((char *)v13 + 48);
      (*v14)();
      v12 -= 48;
    }
    while (v12);
  }
  result = v18;
  if (v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

void sub_194687BEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, unsigned int a11, WTF *a12, int a13, unsigned int a14)
{
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  void (**v18)(WTF *);
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  void (**v22)(WTF *);

  if (a11)
  {
    v15 = 48 * a11;
    v16 = a9;
    v17 = a9;
    do
    {
      v18 = *(void (***)(WTF *))v17;
      v17 = (WTF *)((char *)v17 + 48);
      (*v18)(v16);
      v16 = v17;
      v15 -= 48;
    }
    while (v15);
  }
  if (a9)
    WTF::fastFree(a9, a2);
  v19 = a12;
  if (a14)
  {
    v20 = 48 * a14;
    v21 = a12;
    do
    {
      v22 = *(void (***)(WTF *))v21;
      v21 = (WTF *)((char *)v21 + 48);
      (*v22)(v19);
      v19 = v21;
      v20 -= 48;
    }
    while (v20);
    v19 = a12;
  }
  if (v19)
    WTF::fastFree(v19, a2);
  _Unwind_Resume(exception_object);
}

_BYTE *WebCore::AVAudioSessionCaptureDeviceManager::captureDeviceWithPersistentID@<X0>(_BYTE *this@<X0>, const WTF::StringImpl **a2@<X2>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  WTF *v10;
  _DWORD *v11;
  _DWORD *v12;
  id *v13;
  const WTF::String *v14;

  v4 = this;
  if (this[24]
    || (this = WebCore::AVAudioSessionCaptureDeviceManager::refreshAudioCaptureDevices((WebCore::AVAudioSessionCaptureDeviceManager *)this),
        v4[24]))
  {
    v6 = *((unsigned int *)v4 + 5);
    if ((_DWORD)v6)
    {
      v7 = *((_QWORD *)v4 + 1);
      v8 = 40 * v6;
      while (1)
      {
        this = (_BYTE *)WTF::equal(*(WTF **)v7, *a2, (const WTF::StringImpl *)a2);
        if ((_DWORD)this)
          break;
        v7 += 40;
        v8 -= 40;
        if (!v8)
          goto LABEL_7;
      }
      v10 = *(WTF **)v7;
      if (*(_QWORD *)v7)
        *(_DWORD *)v10 += 2;
      *(_QWORD *)a3 = v10;
      *(_BYTE *)(a3 + 8) = *(_BYTE *)(v7 + 8);
      v11 = *(_DWORD **)(v7 + 16);
      if (v11)
        *v11 += 2;
      *(_QWORD *)(a3 + 16) = v11;
      v12 = *(_DWORD **)(v7 + 24);
      if (v12)
        *v12 += 2;
      *(_QWORD *)(a3 + 24) = v12;
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 32);
      v9 = 1;
    }
    else
    {
LABEL_7:
      v9 = 0;
      *(_BYTE *)a3 = 0;
    }
    *(_BYTE *)(a3 + 40) = v9;
  }
  else
  {
    v13 = (id *)std::__throw_bad_optional_access[abi:sn180100]();
    return (_BYTE *)WebCore::AVAudioSessionCaptureDeviceManager::setPreferredAudioSessionDeviceUIDInternal(v13, v14);
  }
  return this;
}

uint64_t WebCore::AVAudioSessionCaptureDeviceManager::setPreferredAudioSessionDeviceUIDInternal(id *this, const WTF::String *a2)
{
  const __CFString *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  PAL *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  NSObject *v16;
  char *v18;
  void *v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  char *v28;
  __int16 v29;
  uint64_t v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a2)
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E3487BC0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v5 = (void *)objc_msgSend(this[10], "availableInputs");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v24;
LABEL_5:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v7)
        objc_enumerationMutation(v5);
      v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v8);
      v10 = (PAL *)objc_msgSend((id)objc_msgSend(v9, "UID"), "isEqualToString:", v4);
      if ((v10 & 1) != 0)
        break;
      if (v6 == ++v8)
      {
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v6)
          goto LABEL_5;
        goto LABEL_20;
      }
    }
    if (!v9)
      goto LABEL_20;
    v22 = 0;
    v11 = objc_msgSend((id)objc_msgSend((id)PAL::getAVAudioSessionClass(v10), "sharedInstance"), "setPreferredInput:error:", v9, &v22);
    if ((v11 & 1) == 0)
    {
      v12 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        WTF::String::ascii(a2);
        v13 = -[WTF localizedDescription](v22, "localizedDescription");
        v14 = (char *)v21 + 16;
        if (!v21)
          v14 = 0;
        *(_DWORD *)buf = 136446466;
        v28 = v14;
        v29 = 2112;
        v30 = v13;
        _os_log_error_impl(&dword_1940B8000, v12, OS_LOG_TYPE_ERROR, "failed to set preferred input to '%{public}s' with error: %@", buf, 0x16u);
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v15);
          else
            --*(_DWORD *)v21;
        }
      }
    }
  }
  else
  {
LABEL_20:
    v16 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      WTF::String::ascii(a2);
      if (v22)
        v18 = (char *)v22 + 16;
      else
        v18 = 0;
      *(_DWORD *)buf = 136446210;
      v28 = v18;
      _os_log_error_impl(&dword_1940B8000, v16, OS_LOG_TYPE_ERROR, "failed to find preferred input '%{public}s'", buf, 0xCu);
      v20 = v22;
      v22 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, v19);
        else
          --*(_DWORD *)v20;
      }
    }
    return 0;
  }
  return v11;
}

void sub_194688020(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::fastFree(a9, a2);
    else
      --*(_DWORD *)a9;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *a2;
  *a2 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = &off_1E31F6E00;
  v5[1] = a1;
  v5[2] = v4;
  v7 = v5;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v3 + 32))(v3, &v7);
  result = (uint64_t)v7;
  v7 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1946880D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(unsigned int *result, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  unsigned int *v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  int v21;
  char v22;
  WTF::StringImpl *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  char v30;
  _DWORD *v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  void (****v35)(void);
  uint64_t v36;
  uint64_t v37;
  void (***v38)(void);
  void (**v39)(void);
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  _QWORD *v57;
  _BOOL4 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  v4 = result;
  v5 = *((unsigned __int8 *)result + 24);
  if (*((_BYTE *)result + 24) && (v6 = *((_DWORD *)a2 + 3), v6 == result[5]))
  {
    v7 = 0;
    v8 = 0;
    if (v6)
    {
      v9 = *(_QWORD *)a2;
      v10 = *(_QWORD *)a2 + 48 * v6;
      while (1)
      {
        v11 = v4[5];
        if (!(_DWORD)v11)
          goto LABEL_42;
        v12 = *((_QWORD *)v4 + 1);
        v13 = 40 * v11;
        while (1)
        {
          if (*(unsigned __int8 *)(v12 + 8) == *(unsigned __int8 *)(v9 + 16))
          {
            result = (unsigned int *)WTF::equal(*(WTF **)v12, *(const WTF::StringImpl **)(v9 + 8), a3);
            if ((_DWORD)result)
              break;
          }
          v12 += 40;
          v13 -= 40;
          if (!v13)
            goto LABEL_42;
        }
        v14 = *(WTF::StringImpl **)v12;
        if (*(_QWORD *)v12)
          *(_DWORD *)v14 += 2;
        v15 = *(WTF::StringImpl **)(v12 + 16);
        if (v15)
          *(_DWORD *)v15 += 2;
        v59 = v10;
        v60 = v7;
        result = *(unsigned int **)(v12 + 24);
        if (result)
          *result += 2;
        v16 = *(_BYTE *)(v9 + 41) != 0;
        v17 = (*(_DWORD *)(v12 + 32) & 0xFF00) != 0;
        v18 = *(_BYTE *)(v9 + 40) != 0;
        v19 = *(_DWORD *)(v12 + 32) != 0;
        if (!result)
          goto LABEL_20;
        if (*result != 2)
          break;
        v58 = *(_BYTE *)(v9 + 41) != 0;
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        v16 = v58;
        if (v15)
        {
LABEL_21:
          if (*(_DWORD *)v15 == 2)
          {
            v23 = v15;
            v24 = v16;
            result = (unsigned int *)WTF::StringImpl::destroy(v23, a2);
            v16 = v24;
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
LABEL_23:
        v7 = v16 ^ v17 | v60;
        v20 = v19 ^ v18;
        v8 |= v19 ^ v18;
        if (v14)
        {
          v21 = *(_DWORD *)v14;
          v9 += 48;
          v10 = v59;
          if (v9 == v59)
            v22 = 1;
          else
            v22 = v20;
          if (v21 == 2)
          {
            result = (unsigned int *)WTF::StringImpl::destroy(v14, a2);
            if ((v22 & 1) != 0)
              goto LABEL_39;
          }
          else
          {
            *(_DWORD *)v14 = v21 - 2;
            if ((v22 & 1) != 0)
              goto LABEL_39;
          }
        }
        else
        {
          v9 += 48;
          v10 = v59;
          if (v9 == v59)
            v20 = 1;
          if (v20 == 1)
            goto LABEL_39;
        }
        if (!*((_BYTE *)v4 + 24))
        {
          result = (unsigned int *)std::__throw_bad_optional_access[abi:sn180100]();
          goto LABEL_91;
        }
      }
      *result -= 2;
LABEL_20:
      if (v15)
        goto LABEL_21;
      goto LABEL_23;
    }
LABEL_39:
    if ((v8 & 1) == 0 && (v7 & 1) == 0)
      return result;
  }
  else
  {
LABEL_42:
    v8 = 1;
  }
  v61 = 0;
  v62 = 0;
  v25 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v25)
  {
    if (v25 >= 0x6666667)
    {
LABEL_91:
      __break(0xC471u);
      return result;
    }
    LODWORD(v62) = 40 * (int)v25 / 0x28u;
    v61 = WTF::fastMalloc((WTF *)(40 * v25));
    v26 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v26)
    {
      v27 = 48 * v26;
      v28 = *(_QWORD *)a2 + 24;
      do
      {
        v29 = *(_DWORD **)(v28 - 16);
        if (v29)
          *v29 += 2;
        v30 = *(_BYTE *)(v28 - 8);
        v31 = *(_DWORD **)v28;
        if (*(_QWORD *)v28)
          *v31 += 2;
        v32 = *(_DWORD **)(v28 + 8);
        if (v32)
          *v32 += 2;
        v33 = *(_DWORD *)(v28 + 16);
        v34 = v61 + 40 * HIDWORD(v62);
        *(_QWORD *)v34 = v29;
        *(_BYTE *)(v34 + 8) = v30;
        *(_QWORD *)(v34 + 16) = v31;
        *(_QWORD *)(v34 + 24) = v32;
        *(_DWORD *)(v34 + 32) = v33;
        ++HIDWORD(v62);
        v28 += 48;
        v27 -= 48;
      }
      while (v27);
    }
  }
  v35 = (void (****)(void))(v4 + 12);
  if (*((_BYTE *)v4 + 64))
  {
    v36 = v4[15];
    if ((_DWORD)v36)
    {
      v37 = 48 * v36;
      v38 = *v35;
      do
      {
        v39 = *v38;
        v38 += 6;
        (*v39)();
        v37 -= 48;
      }
      while (v37);
    }
    v40 = (WTF *)*v35;
    if (*v35)
    {
      *((_QWORD *)v4 + 6) = 0;
      v4[14] = 0;
      WTF::fastFree(v40, a2);
    }
    v41 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v4 + 6) = v41;
    LODWORD(v41) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    v4[14] = v41;
    LODWORD(v41) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    v4[15] = v41;
  }
  else
  {
    *v35 = 0;
    *((_QWORD *)v4 + 7) = 0;
    v42 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v4 + 6) = v42;
    LODWORD(v42) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    v4[14] = v42;
    LODWORD(v42) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    v4[15] = v42;
    *((_BYTE *)v4 + 64) = 1;
  }
  v43 = HIDWORD(v62);
  v44 = 126 - 2 * __clz(HIDWORD(v62));
  if (HIDWORD(v62))
    v45 = v44;
  else
    v45 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *,false>(v61, (WTF::StringImpl *)(v61 + 40 * HIDWORD(v62)), v45, 1);
  if (*((_BYTE *)v4 + 24))
  {
    v47 = v4[5];
    if ((_DWORD)v47)
    {
      v48 = 40 * v47;
      v49 = (WTF::StringImpl **)(*((_QWORD *)v4 + 1) + 24);
      do
      {
        v50 = *v49;
        *v49 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v46);
          else
            *(_DWORD *)v50 -= 2;
        }
        v51 = *(v49 - 1);
        *(v49 - 1) = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v46);
          else
            *(_DWORD *)v51 -= 2;
        }
        v52 = *(v49 - 3);
        *(v49 - 3) = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v46);
          else
            *(_DWORD *)v52 -= 2;
        }
        v49 += 5;
        v48 -= 40;
      }
      while (v48);
    }
    v53 = (WTF *)*((_QWORD *)v4 + 1);
    if (v53)
    {
      *((_QWORD *)v4 + 1) = 0;
      v4[4] = 0;
      WTF::fastFree(v53, v46);
    }
    *((_QWORD *)v4 + 1) = v61;
    v54 = v62;
    v61 = 0;
    v62 = 0;
    *((_QWORD *)v4 + 2) = v54;
  }
  else
  {
    *((_QWORD *)v4 + 1) = v61;
    v55 = v62;
    v61 = 0;
    v62 = 0;
    v4[4] = v55;
    v4[5] = v43;
    *((_BYTE *)v4 + 24) = 1;
  }
  if (v5 != 0 && (v8 & 1) != 0)
  {
    v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v56 = off_1E3417C38;
    v63 = v56;
    WTF::ensureOnMainThread();
    v57 = v63;
    v63 = 0;
    if (v57)
      (*(void (**)(_QWORD *))(*v57 + 8))(v57);
  }
  return WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v61, v46);
}

void sub_194688600(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)va, a2);
  _Unwind_Resume(a1);
}

unint64_t WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(WebCore::AVAudioSessionCaptureDeviceManager *this, uint64_t a2)
{
  AVAudioSessionPortDescription *v4;
  AVAudioSessionPortDescription *v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  const void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const void *v21;
  void *v22;
  unint64_t result;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[8];
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  _BYTE v53[8];
  WTF::StringImpl *v54;
  char v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = (AVAudioSessionPortDescription *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 80), "currentRoute"), "inputs"), "firstObject");
  v5 = v4;
  if (!v4)
    goto LABEL_42;
  if (v4 != *(AVAudioSessionPortDescription **)(a2 + 112))
  {
    WebCore::AVAudioSessionCaptureDevice::AVAudioSessionCaptureDevice((WebCore::AVAudioSessionCaptureDevice *)v53, v4, v4);
    WebCore::AVAudioSessionCaptureDevice::isolatedCopy(v53, (uint64_t)v47);
    v6 = v48;
    if (v48)
      *(_DWORD *)v48 += 2;
    v7 = v49;
    v8 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    v9 = v51;
    if (v51)
      *(_DWORD *)v51 += 2;
    v10 = v52;
    v11 = malloc_type_malloc(0x50uLL, 0x10E00403D8CE953uLL);
    v13 = v11;
    *v11 = MEMORY[0x1E0C809A0];
    v11[1] = 50331650;
    v11[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0>(WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0)::{lambda(void *)#1}::__invoke;
    v11[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0>(WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0)::descriptor;
    if (v6)
      *(_DWORD *)v6 += 2;
    v11[5] = v6;
    *((_BYTE *)v11 + 48) = v7;
    if (v8)
      *(_DWORD *)v8 += 2;
    v11[7] = v8;
    if (v9)
    {
      *(_DWORD *)v9 += 2;
      v11[8] = v9;
      *((_DWORD *)v11 + 18) = v10;
      v11[4] = &off_1E31F6E48;
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v12);
      else
        *(_DWORD *)v9 -= 2;
    }
    else
    {
      v11[8] = 0;
      *((_DWORD *)v11 + 18) = v10;
      v11[4] = &off_1E31F6E48;
    }
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v12);
        if (v6)
        {
LABEL_20:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v12);
          else
            *(_DWORD *)v6 -= 2;
        }
LABEL_22:
        WTF::callOnWebThreadOrDispatchAsyncOnMainThread();
        _Block_release(v13);
        v15 = v51;
        v51 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = v50;
        v50 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v14);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = v48;
        v48 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v14);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = v57;
        v57 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v14);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v56;
        v56 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v14);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = v54;
        v54 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v14);
          else
            *(_DWORD *)v20 -= 2;
        }
        goto LABEL_40;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v6)
      goto LABEL_20;
    goto LABEL_22;
  }
LABEL_40:
  CFRetain(v5);
  v21 = *(const void **)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v5;
  if (v21)
    CFRelease(v21);
LABEL_42:
  v22 = (void *)objc_msgSend(*(id *)(a2 + 80), "availableInputs");
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = objc_msgSend(v22, "count");
  if (result)
  {
    if (result >= 0x5555556)
    {
      __break(0xC471u);
      return result;
    }
    v24 = 48 * result;
    v25 = WTF::fastMalloc((WTF *)(48 * result));
    *((_DWORD *)this + 2) = v24 / 0x30;
    *(_QWORD *)this = v25;
  }
  else
  {
    v25 = 0;
  }
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  result = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v43, v59, 16);
  v26 = result;
  if (result)
  {
    v27 = 0;
    v28 = *(_QWORD *)v44;
    do
    {
      v29 = 0;
      do
      {
        if (*(_QWORD *)v44 != v28)
          objc_enumerationMutation(v22);
        WebCore::AVAudioSessionCaptureDevice::AVAudioSessionCaptureDevice((WebCore::AVAudioSessionCaptureDevice *)v53, *(AVAudioSessionPortDescription **)(*((_QWORD *)&v43 + 1) + 8 * v29), v5);
        if (v27 == *((_DWORD *)this + 2))
        {
          v31 = WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v27 + 1, (unint64_t)v53);
          v32 = *(_DWORD **)(v31 + 8);
          if (v32)
            *v32 += 2;
          v25 = *(_QWORD *)this;
          v33 = *(_QWORD *)this + 48 * *((unsigned int *)this + 3);
          *(_QWORD *)(v33 + 8) = v32;
          *(_BYTE *)(v33 + 16) = *(_BYTE *)(v31 + 16);
          v34 = *(_DWORD **)(v31 + 24);
          if (v34)
            *v34 += 2;
          *(_QWORD *)(v33 + 24) = v34;
          v35 = *(_DWORD **)(v31 + 32);
          if (v35)
            *v35 += 2;
          *(_QWORD *)(v33 + 32) = v35;
          v36 = (uint64_t *)(v31 + 40);
        }
        else
        {
          v37 = v54;
          if (v54)
            *(_DWORD *)v54 += 2;
          v33 = v25 + 48 * v27;
          *(_QWORD *)(v33 + 8) = v37;
          *(_BYTE *)(v33 + 16) = v55;
          v38 = v56;
          if (v56)
            *(_DWORD *)v56 += 2;
          *(_QWORD *)(v33 + 24) = v38;
          v39 = v57;
          if (v57)
            *(_DWORD *)v57 += 2;
          *(_QWORD *)(v33 + 32) = v39;
          v36 = &v58;
        }
        *(_DWORD *)(v33 + 40) = *(_DWORD *)v36;
        *(_QWORD *)v33 = &off_1E31F6E48;
        v27 = *((_DWORD *)this + 3) + 1;
        *((_DWORD *)this + 3) = v27;
        v40 = v57;
        v57 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v30);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = v56;
        v56 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v30);
          else
            *(_DWORD *)v41 -= 2;
        }
        v42 = v54;
        v54 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v30);
          else
            *(_DWORD *)v42 -= 2;
        }
        ++v29;
      }
      while (v26 != v29);
      result = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v43, v59, 16);
      v26 = result;
    }
    while (result);
  }
  return result;
}

void sub_194688B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27)
{
  const void *v27;
  WTF::StringImpl *v29;

  _Block_release(v27);
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, v29);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, v29);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, v29);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, v29);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, v29);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, v29);
    else
      *(_DWORD *)a24 -= 2;
  }
  _Unwind_Resume(a1);
}

void WebCore::AVAudioSessionCaptureDevice::~AVAudioSessionCaptureDevice(WebCore::AVAudioSessionCaptureDevice *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(WTF::StringImpl *result, unint64_t *a2)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;

  v3 = result;
  v4 = *a2;
  v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    v6 = v4 + 48 * v5;
    do
    {
      WebCore::AVAudioSessionCaptureDevice::isolatedCopy((_BYTE *)v4, (uint64_t)&v16);
      v8 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      v9 = *(WTF::StringImpl **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = v8;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      *(_BYTE *)(v4 + 16) = v18;
      v10 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      v11 = *(WTF::StringImpl **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v7);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v20;
      if (v20)
        *(_DWORD *)v20 += 2;
      v13 = *(WTF::StringImpl **)(v4 + 32);
      *(_QWORD *)(v4 + 32) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v7);
          v12 = v20;
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
      *(_DWORD *)(v4 + 40) = v21;
      v20 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v7);
        else
          *(_DWORD *)v14 -= 2;
      }
      result = v17;
      v17 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
      v4 += 48;
    }
    while (v4 < v6);
    v4 = *a2;
    v5 = *((_DWORD *)a2 + 3);
  }
  *(_QWORD *)v3 = v4;
  v15 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)v3 + 2) = v15;
  *((_DWORD *)v3 + 3) = v5;
  return result;
}

WTF::StringImpl *WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0>(WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0)::{lambda(void const*)#1}::__invoke(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0>(WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices(void)::$_0)::{lambda(void *)#1}::__invoke(WebCore::CoreAudioSharedUnit *a1)
{
  uint64_t *v2;

  v2 = WebCore::CoreAudioSharedUnit::unit(a1);
  return WebCore::BaseAudioSharedUnit::handleNewCurrentMicrophoneDevice((uint64_t)v2, (uint64_t)a1 + 40);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *,false>(uint64_t result, WTF::StringImpl *a2, uint64_t a3, char a4)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  BOOL v34;
  BOOL v35;
  uint64_t v37;
  WTF::StringImpl *v38;
  BOOL v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  int v56;
  unint64_t v57;
  int v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  char v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  char v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  WTF::StringImpl *v88;
  char *v89;
  unint64_t v90;
  unsigned __int8 *v91;
  int v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  BOOL v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  BOOL v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  WTF::StringImpl *v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  int64_t v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  unint64_t v140;
  _BOOL4 v141;
  unint64_t v142;
  BOOL v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  uint64_t v153;
  _BOOL4 v154;
  BOOL v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  int64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL4 v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  WTF::StringImpl *v187;
  int v188;
  unint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  BOOL v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  unint64_t v202;
  uint64_t v204;
  int v205;
  unint64_t v206;
  _DWORD *v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  _DWORD *v214;
  int v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  int v219;
  char v220;
  uint64_t v221;
  int v222;
  int v223;
  int v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;

  v7 = a2;
  v8 = result;
LABEL_2:
  v226 = (WTF::StringImpl *)((char *)v7 - 40);
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = (unint64_t)v7 - v9;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v7 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*((_BYTE *)v7 - 7))
          v105 = *(_BYTE *)(v9 + 33) == 0;
        else
          v105 = 0;
        if (v105)
        {
          v106 = v9;
          goto LABEL_434;
        }
        return result;
      case 3:
        v107 = (WTF::StringImpl *)(v9 + 40);
        if (*(_BYTE *)(v9 + 73))
          v108 = *(_BYTE *)(v9 + 33) == 0;
        else
          v108 = 0;
        if (v108)
        {
          result = (uint64_t)std::swap[abi:sn180100]<WebCore::CaptureDevice>(v9, (WTF::StringImpl *)(v9 + 40));
          if (*((_BYTE *)v7 - 7) && !*(_BYTE *)(v9 + 73))
          {
            v106 = v9 + 40;
LABEL_434:
            v111 = (WTF::StringImpl *)((char *)v7 - 40);
            return (uint64_t)std::swap[abi:sn180100]<WebCore::CaptureDevice>(v106, v111);
          }
        }
        else if (!*(_BYTE *)(v9 + 73) && *((_BYTE *)v7 - 7))
        {
          v109 = v9 + 40;
          v110 = (WTF::StringImpl *)((char *)v7 - 40);
          goto LABEL_235;
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>((WTF::StringImpl *)v9, (WTF::StringImpl *)(v9 + 40), (WTF::StringImpl *)(v9 + 80), v226);
      case 5:
        v107 = (WTF::StringImpl *)(v9 + 40);
        result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>((WTF::StringImpl *)v9, (WTF::StringImpl *)(v9 + 40), (WTF::StringImpl *)(v9 + 80), (WTF::StringImpl *)(v9 + 120));
        if (*((_BYTE *)v7 - 7))
        {
          if (!*(_BYTE *)(v9 + 153))
          {
            result = (uint64_t)std::swap[abi:sn180100]<WebCore::CaptureDevice>(v9 + 120, v226);
            if (*(_BYTE *)(v9 + 153))
            {
              if (!*(_BYTE *)(v9 + 113))
              {
                result = (uint64_t)std::swap[abi:sn180100]<WebCore::CaptureDevice>(v9 + 80, (WTF::StringImpl *)(v9 + 120));
                if (*(_BYTE *)(v9 + 113))
                {
                  if (!*(_BYTE *)(v9 + 73))
                  {
                    v109 = v9 + 40;
                    v110 = (WTF::StringImpl *)(v9 + 80);
LABEL_235:
                    result = (uint64_t)std::swap[abi:sn180100]<WebCore::CaptureDevice>(v109, v110);
                    if (*(_BYTE *)(v9 + 73))
                    {
                      if (!*(_BYTE *)(v9 + 33))
                      {
                        v106 = v9;
                        v111 = v107;
                        return (uint64_t)std::swap[abi:sn180100]<WebCore::CaptureDevice>(v106, v111);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result;
      default:
        if ((uint64_t)v10 <= 959)
        {
          v112 = (WTF::StringImpl *)(v9 + 40);
          v114 = (WTF::StringImpl *)v9 == v7 || v112 == v7;
          if ((a4 & 1) != 0)
          {
            if (!v114)
            {
              v115 = 0;
              v116 = v9;
              do
              {
                v117 = v112;
                if (*(_BYTE *)(v116 + 73))
                  v118 = *(_BYTE *)(v116 + 33) == 0;
                else
                  v118 = 0;
                if (v118)
                {
                  v119 = *(_QWORD *)v112;
                  *(_QWORD *)v112 = 0;
                  v234 = *(_BYTE *)(v116 + 48);
                  v120 = *(_QWORD *)(v116 + 56);
                  v240 = *(_QWORD *)(v116 + 64);
                  *(_QWORD *)(v116 + 56) = 0;
                  *(_QWORD *)(v116 + 64) = 0;
                  v121 = *(_DWORD *)(v116 + 72);
                  v122 = v115;
                  do
                  {
                    v123 = v8 + v122;
                    v124 = *(_QWORD *)(v8 + v122);
                    *(_QWORD *)v123 = 0;
                    v125 = *(WTF::StringImpl **)(v8 + v122 + 40);
                    *(_QWORD *)(v123 + 40) = v124;
                    if (v125)
                    {
                      if (*(_DWORD *)v125 == 2)
                        WTF::StringImpl::destroy(v125, a2);
                      else
                        *(_DWORD *)v125 -= 2;
                    }
                    *(_BYTE *)(v123 + 48) = *(_BYTE *)(v123 + 8);
                    v126 = *(_QWORD *)(v123 + 16);
                    *(_QWORD *)(v123 + 16) = 0;
                    v127 = *(WTF::StringImpl **)(v123 + 56);
                    *(_QWORD *)(v123 + 56) = v126;
                    if (v127)
                    {
                      if (*(_DWORD *)v127 == 2)
                        WTF::StringImpl::destroy(v127, a2);
                      else
                        *(_DWORD *)v127 -= 2;
                    }
                    v128 = v8 + v122;
                    v129 = *(_QWORD *)(v8 + v122 + 24);
                    *(_QWORD *)(v128 + 24) = 0;
                    v130 = *(WTF::StringImpl **)(v8 + v122 + 64);
                    *(_QWORD *)(v128 + 64) = v129;
                    if (v130)
                    {
                      if (*(_DWORD *)v130 == 2)
                        WTF::StringImpl::destroy(v130, a2);
                      else
                        *(_DWORD *)v130 -= 2;
                    }
                    *(_DWORD *)(v128 + 72) = *(_DWORD *)(v128 + 32);
                    if (!v122)
                    {
                      v133 = v8;
                      goto LABEL_271;
                    }
                    v131 = v122 - 40;
                    if ((v121 & 0xFF00) == 0)
                      break;
                    v132 = *(unsigned __int8 *)(v8 + v122 - 7);
                    v122 -= 40;
                  }
                  while (!v132);
                  v133 = v8 + v131 + 40;
LABEL_271:
                  v134 = *(WTF::StringImpl **)v133;
                  *(_QWORD *)v133 = v119;
                  if (v134)
                  {
                    if (*(_DWORD *)v134 == 2)
                      WTF::StringImpl::destroy(v134, a2);
                    else
                      *(_DWORD *)v134 -= 2;
                  }
                  *(_BYTE *)(v133 + 8) = v234;
                  v135 = *(WTF::StringImpl **)(v133 + 16);
                  *(_QWORD *)(v133 + 16) = v120;
                  if (v135)
                  {
                    if (*(_DWORD *)v135 == 2)
                      WTF::StringImpl::destroy(v135, a2);
                    else
                      *(_DWORD *)v135 -= 2;
                  }
                  result = *(_QWORD *)(v133 + 24);
                  *(_QWORD *)(v133 + 24) = v240;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                    else
                      *(_DWORD *)result -= 2;
                  }
                  *(_DWORD *)(v133 + 32) = v121;
                }
                v112 = (WTF::StringImpl *)((char *)v117 + 40);
                v115 += 40;
                v116 = (unint64_t)v117;
              }
              while ((WTF::StringImpl *)((char *)v117 + 40) != v7);
            }
          }
          else if (!v114)
          {
            v5 = (WTF::StringImpl *)(v9 + 72);
            v4 = -2;
            v10 = 1;
            v202 = v9;
            while (!*(_BYTE *)(v202 + 73) || *(_BYTE *)(v202 + 33) != 0)
            {
LABEL_470:
              v202 = v8 + 40 * v10++;
              v112 = (WTF::StringImpl *)(v202 + 40);
              v5 = (WTF::StringImpl *)((char *)v5 + 40);
              --v4;
              if ((WTF::StringImpl *)(v202 + 40) == v7)
                return result;
            }
            v204 = *(_QWORD *)v112;
            *(_QWORD *)v112 = 0;
            v238 = *(_BYTE *)(v202 + 48);
            v228 = v204;
            v232 = *(_QWORD *)(v202 + 56);
            v244 = *(_QWORD *)(v202 + 64);
            *(_QWORD *)(v202 + 56) = 0;
            *(_QWORD *)(v202 + 64) = 0;
            v205 = *(_DWORD *)(v202 + 72);
            v9 = (unsigned __int16)v205 & 0xFF00;
            v206 = v4;
            v207 = v5;
            while (1)
            {
              v208 = *((_QWORD *)v207 - 9);
              *((_QWORD *)v207 - 9) = 0;
              v209 = (WTF::StringImpl *)*((_QWORD *)v207 - 4);
              *((_QWORD *)v207 - 4) = v208;
              if (v209)
              {
                if (*(_DWORD *)v209 == 2)
                  WTF::StringImpl::destroy(v209, a2);
                else
                  *(_DWORD *)v209 -= 2;
              }
              *((_BYTE *)v207 - 24) = *((_BYTE *)v207 - 64);
              v210 = *((_QWORD *)v207 - 7);
              *((_QWORD *)v207 - 7) = 0;
              v211 = (WTF::StringImpl *)*((_QWORD *)v207 - 2);
              *((_QWORD *)v207 - 2) = v210;
              if (v211)
              {
                if (*(_DWORD *)v211 == 2)
                  WTF::StringImpl::destroy(v211, a2);
                else
                  *(_DWORD *)v211 -= 2;
              }
              v212 = *((_QWORD *)v207 - 6);
              *((_QWORD *)v207 - 6) = 0;
              v213 = (WTF::StringImpl *)*((_QWORD *)v207 - 1);
              *((_QWORD *)v207 - 1) = v212;
              if (v213)
              {
                if (*(_DWORD *)v213 == 2)
                  WTF::StringImpl::destroy(v213, a2);
                else
                  *(_DWORD *)v213 -= 2;
              }
              v214 = v207 - 10;
              *v207 = *(v207 - 10);
              if (__CFADD__(v206++, 1))
                goto LABEL_475;
              if ((v205 & 0xFF00) != 0)
              {
                v216 = *((unsigned __int8 *)v207 - 79);
                v207 -= 10;
                if (!v216)
                  continue;
              }
              v217 = (WTF::StringImpl *)*((_QWORD *)v214 - 4);
              *((_QWORD *)v214 - 4) = v228;
              if (v217)
              {
                if (*(_DWORD *)v217 == 2)
                  WTF::StringImpl::destroy(v217, a2);
                else
                  *(_DWORD *)v217 -= 2;
              }
              *((_BYTE *)v214 - 24) = v238;
              v218 = (WTF::StringImpl *)*((_QWORD *)v214 - 2);
              *((_QWORD *)v214 - 2) = v232;
              if (v218)
              {
                if (*(_DWORD *)v218 == 2)
                  WTF::StringImpl::destroy(v218, a2);
                else
                  *(_DWORD *)v218 -= 2;
              }
              result = *((_QWORD *)v214 - 1);
              *((_QWORD *)v214 - 1) = v244;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              *v214 = v205;
              goto LABEL_470;
            }
          }
          return result;
        }
        if (!a3)
        {
          if ((WTF::StringImpl *)v9 != v7)
          {
            v136 = (unint64_t)(v11 - 2) >> 1;
            v137 = v136;
            do
            {
              v138 = v137;
              if (v136 >= v137)
              {
                v139 = (2 * v137) | 1;
                v140 = v9 + 40 * v139;
                if (2 * v138 + 2 < v11)
                {
                  v141 = *(_BYTE *)(v140 + 33) != 0 && *(_BYTE *)(v140 + 73) == 0;
                  v140 += 40 * ((*(_BYTE *)(v140 + 33) != 0) & (*(_BYTE *)(v140 + 73) == 0));
                  if (v141)
                    v139 = 2 * v138 + 2;
                }
                v142 = v9 + 40 * v138;
                if (*(_BYTE *)(v140 + 33))
                  v143 = *(_BYTE *)(v142 + 33) == 0;
                else
                  v143 = 0;
                if (!v143)
                {
                  v144 = *(WTF::StringImpl **)v142;
                  *(_QWORD *)v142 = 0;
                  v145 = v9 + 40 * v138;
                  v229 = *(_BYTE *)(v145 + 8);
                  v225 = v144;
                  v227 = *(_QWORD *)(v145 + 16);
                  v235 = *(_QWORD *)(v145 + 24);
                  *(_QWORD *)(v145 + 16) = 0;
                  *(_QWORD *)(v145 + 24) = 0;
                  v241 = *(_DWORD *)(v145 + 32);
                  do
                  {
                    v146 = v140;
                    v147 = *(_QWORD *)v140;
                    *(_QWORD *)v146 = 0;
                    v148 = *(WTF::StringImpl **)v142;
                    *(_QWORD *)v142 = v147;
                    if (v148)
                    {
                      if (*(_DWORD *)v148 == 2)
                        WTF::StringImpl::destroy(v148, a2);
                      else
                        *(_DWORD *)v148 -= 2;
                    }
                    *(_BYTE *)(v142 + 8) = *(_BYTE *)(v146 + 8);
                    v149 = *(_QWORD *)(v146 + 16);
                    *(_QWORD *)(v146 + 16) = 0;
                    v150 = *(WTF::StringImpl **)(v142 + 16);
                    *(_QWORD *)(v142 + 16) = v149;
                    if (v150)
                    {
                      if (*(_DWORD *)v150 == 2)
                        WTF::StringImpl::destroy(v150, a2);
                      else
                        *(_DWORD *)v150 -= 2;
                    }
                    v151 = *(_QWORD *)(v146 + 24);
                    *(_QWORD *)(v146 + 24) = 0;
                    v152 = *(WTF::StringImpl **)(v142 + 24);
                    *(_QWORD *)(v142 + 24) = v151;
                    if (v152)
                    {
                      if (*(_DWORD *)v152 == 2)
                        WTF::StringImpl::destroy(v152, a2);
                      else
                        *(_DWORD *)v152 -= 2;
                    }
                    *(_DWORD *)(v142 + 32) = *(_DWORD *)(v146 + 32);
                    if (v136 < v139)
                      break;
                    v153 = (2 * v139) | 1;
                    v140 = v9 + 40 * v153;
                    if (2 * v139 + 2 < v11)
                    {
                      v154 = *(_BYTE *)(v140 + 33) != 0 && *(_BYTE *)(v140 + 73) == 0;
                      v140 += 40 * ((*(_BYTE *)(v140 + 33) != 0) & (*(_BYTE *)(v140 + 73) == 0));
                      if (v154)
                        v153 = 2 * v139 + 2;
                    }
                    v155 = *(_BYTE *)(v140 + 33) && (v241 & 0xFF00) == 0;
                    v142 = v146;
                    v139 = v153;
                  }
                  while (!v155);
                  v156 = *(WTF::StringImpl **)v146;
                  *(_QWORD *)v146 = v225;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                      WTF::StringImpl::destroy(v156, a2);
                    else
                      *(_DWORD *)v156 -= 2;
                  }
                  *(_BYTE *)(v146 + 8) = v229;
                  v157 = *(WTF::StringImpl **)(v146 + 16);
                  *(_QWORD *)(v146 + 16) = v227;
                  if (v157)
                  {
                    if (*(_DWORD *)v157 == 2)
                      WTF::StringImpl::destroy(v157, a2);
                    else
                      *(_DWORD *)v157 -= 2;
                  }
                  v158 = *(WTF::StringImpl **)(v146 + 24);
                  *(_QWORD *)(v146 + 24) = v235;
                  if (v158)
                  {
                    if (*(_DWORD *)v158 == 2)
                      WTF::StringImpl::destroy(v158, a2);
                    else
                      *(_DWORD *)v158 -= 2;
                  }
                  *(_DWORD *)(v146 + 32) = v241;
                }
              }
              v137 = v138 - 1;
            }
            while (v138);
            v159 = v10 / 0x28;
            do
            {
              v160 = 0;
              v161 = v7;
              v162 = *(WTF::StringImpl **)v8;
              *(_QWORD *)v8 = 0;
              v163 = *(_BYTE *)(v8 + 8);
              v230 = *(_QWORD *)(v8 + 16);
              v236 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 16) = 0;
              *(_QWORD *)(v8 + 24) = 0;
              v164 = v8;
              v242 = *(_DWORD *)(v8 + 32);
              do
              {
                v165 = v164;
                v164 += 40 * v160 + 40;
                v166 = 2 * v160;
                v160 = (2 * v160) | 1;
                v167 = v166 + 2;
                if (v166 + 2 < v159)
                {
                  v168 = *(_BYTE *)(v164 + 33) != 0 && *(_BYTE *)(v164 + 73) == 0;
                  v164 += 40 * ((*(_BYTE *)(v164 + 33) != 0) & (*(_BYTE *)(v164 + 73) == 0));
                  if (v168)
                    v160 = v167;
                }
                v169 = *(WTF::StringImpl **)v164;
                *(_QWORD *)v164 = 0;
                v170 = *(WTF::StringImpl **)v165;
                *(_QWORD *)v165 = v169;
                if (v170)
                {
                  if (*(_DWORD *)v170 == 2)
                    WTF::StringImpl::destroy(v170, a2);
                  else
                    *(_DWORD *)v170 -= 2;
                }
                *(_BYTE *)(v165 + 8) = *(_BYTE *)(v164 + 8);
                v171 = *(_QWORD *)(v164 + 16);
                *(_QWORD *)(v164 + 16) = 0;
                v172 = *(WTF::StringImpl **)(v165 + 16);
                *(_QWORD *)(v165 + 16) = v171;
                if (v172)
                {
                  if (*(_DWORD *)v172 == 2)
                    WTF::StringImpl::destroy(v172, a2);
                  else
                    *(_DWORD *)v172 -= 2;
                }
                v173 = *(_QWORD *)(v164 + 24);
                *(_QWORD *)(v164 + 24) = 0;
                v174 = *(WTF::StringImpl **)(v165 + 24);
                *(_QWORD *)(v165 + 24) = v173;
                if (v174)
                {
                  if (*(_DWORD *)v174 == 2)
                    WTF::StringImpl::destroy(v174, a2);
                  else
                    *(_DWORD *)v174 -= 2;
                }
                *(_DWORD *)(v165 + 32) = *(_DWORD *)(v164 + 32);
              }
              while (v160 <= (uint64_t)((unint64_t)(v159 - 2) >> 1));
              v7 = (WTF::StringImpl *)((char *)v7 - 40);
              if ((WTF::StringImpl *)v164 == (WTF::StringImpl *)((char *)v161 - 40))
              {
                v197 = *(WTF::StringImpl **)v164;
                *(_QWORD *)v164 = v162;
                if (v197)
                {
                  if (*(_DWORD *)v197 == 2)
                    WTF::StringImpl::destroy(v197, a2);
                  else
                    *(_DWORD *)v197 -= 2;
                }
                *(_BYTE *)(v164 + 8) = v163;
                v198 = *(WTF::StringImpl **)(v164 + 16);
                *(_QWORD *)(v164 + 16) = v230;
                if (v198)
                {
                  if (*(_DWORD *)v198 == 2)
                    WTF::StringImpl::destroy(v198, a2);
                  else
                    *(_DWORD *)v198 -= 2;
                }
                result = *(_QWORD *)(v164 + 24);
                *(_QWORD *)(v164 + 24) = v236;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                  else
                    *(_DWORD *)result -= 2;
                }
                *(_DWORD *)(v164 + 32) = v242;
              }
              else
              {
                v175 = *(_QWORD *)v7;
                *(_QWORD *)v7 = 0;
                v176 = *(WTF::StringImpl **)v164;
                *(_QWORD *)v164 = v175;
                if (v176)
                {
                  if (*(_DWORD *)v176 == 2)
                    WTF::StringImpl::destroy(v176, a2);
                  else
                    *(_DWORD *)v176 -= 2;
                }
                *(_BYTE *)(v164 + 8) = *((_BYTE *)v161 - 32);
                v177 = *((_QWORD *)v161 - 3);
                *((_QWORD *)v161 - 3) = 0;
                v178 = *(WTF::StringImpl **)(v164 + 16);
                *(_QWORD *)(v164 + 16) = v177;
                if (v178)
                {
                  if (*(_DWORD *)v178 == 2)
                    WTF::StringImpl::destroy(v178, a2);
                  else
                    *(_DWORD *)v178 -= 2;
                }
                v179 = *((_QWORD *)v161 - 2);
                *((_QWORD *)v161 - 2) = 0;
                v180 = *(WTF::StringImpl **)(v164 + 24);
                *(_QWORD *)(v164 + 24) = v179;
                if (v180)
                {
                  if (*(_DWORD *)v180 == 2)
                    WTF::StringImpl::destroy(v180, a2);
                  else
                    *(_DWORD *)v180 -= 2;
                }
                *(_DWORD *)(v164 + 32) = *((_DWORD *)v161 - 2);
                v181 = (WTF::StringImpl *)*((_QWORD *)v161 - 5);
                *((_QWORD *)v161 - 5) = v162;
                if (v181)
                {
                  if (*(_DWORD *)v181 == 2)
                    WTF::StringImpl::destroy(v181, a2);
                  else
                    *(_DWORD *)v181 -= 2;
                }
                *((_BYTE *)v161 - 32) = v163;
                v182 = (WTF::StringImpl *)*((_QWORD *)v161 - 3);
                *((_QWORD *)v161 - 3) = v230;
                if (v182)
                {
                  if (*(_DWORD *)v182 == 2)
                    WTF::StringImpl::destroy(v182, a2);
                  else
                    *(_DWORD *)v182 -= 2;
                }
                result = *((_QWORD *)v161 - 2);
                *((_QWORD *)v161 - 2) = v236;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                  else
                    *(_DWORD *)result -= 2;
                }
                *((_DWORD *)v161 - 2) = v242;
                v183 = v164 - v8 + 40;
                if (v183 >= 41)
                {
                  v184 = (v183 / 0x28uLL - 2) >> 1;
                  v185 = v8 + 40 * v184;
                  if (*(_BYTE *)(v185 + 33) && *(_BYTE *)(v164 + 33) == 0)
                  {
                    v187 = *(WTF::StringImpl **)v164;
                    *(_QWORD *)v164 = 0;
                    v237 = *(_BYTE *)(v164 + 8);
                    v231 = *(_QWORD *)(v164 + 16);
                    v243 = *(_QWORD *)(v164 + 24);
                    *(_QWORD *)(v164 + 16) = 0;
                    *(_QWORD *)(v164 + 24) = 0;
                    v188 = *(_DWORD *)(v164 + 32);
                    do
                    {
                      v189 = v185;
                      v190 = *(_QWORD *)v185;
                      *(_QWORD *)v189 = 0;
                      v191 = *(WTF::StringImpl **)v164;
                      *(_QWORD *)v164 = v190;
                      if (v191)
                      {
                        if (*(_DWORD *)v191 == 2)
                          WTF::StringImpl::destroy(v191, a2);
                        else
                          *(_DWORD *)v191 -= 2;
                      }
                      *(_BYTE *)(v164 + 8) = *(_BYTE *)(v189 + 8);
                      v192 = *(_QWORD *)(v189 + 16);
                      *(_QWORD *)(v189 + 16) = 0;
                      v193 = *(WTF::StringImpl **)(v164 + 16);
                      *(_QWORD *)(v164 + 16) = v192;
                      if (v193)
                      {
                        if (*(_DWORD *)v193 == 2)
                          WTF::StringImpl::destroy(v193, a2);
                        else
                          *(_DWORD *)v193 -= 2;
                      }
                      v194 = *(_QWORD *)(v189 + 24);
                      *(_QWORD *)(v189 + 24) = 0;
                      v195 = *(WTF::StringImpl **)(v164 + 24);
                      *(_QWORD *)(v164 + 24) = v194;
                      if (v195)
                      {
                        if (*(_DWORD *)v195 == 2)
                          WTF::StringImpl::destroy(v195, a2);
                        else
                          *(_DWORD *)v195 -= 2;
                      }
                      *(_DWORD *)(v164 + 32) = *(_DWORD *)(v189 + 32);
                      if (!v184)
                        break;
                      v184 = (v184 - 1) >> 1;
                      v185 = v8 + 40 * v184;
                      v196 = *(_BYTE *)(v185 + 33) && (v188 & 0xFF00) == 0;
                      v164 = v189;
                    }
                    while (v196);
                    v199 = *(WTF::StringImpl **)v189;
                    *(_QWORD *)v189 = v187;
                    if (v199)
                    {
                      if (*(_DWORD *)v199 == 2)
                        WTF::StringImpl::destroy(v199, a2);
                      else
                        *(_DWORD *)v199 -= 2;
                    }
                    *(_BYTE *)(v189 + 8) = v237;
                    v200 = *(WTF::StringImpl **)(v189 + 16);
                    *(_QWORD *)(v189 + 16) = v231;
                    if (v200)
                    {
                      if (*(_DWORD *)v200 == 2)
                        WTF::StringImpl::destroy(v200, a2);
                      else
                        *(_DWORD *)v200 -= 2;
                    }
                    result = *(_QWORD *)(v189 + 24);
                    *(_QWORD *)(v189 + 24) = v243;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                      else
                        *(_DWORD *)result -= 2;
                    }
                    *(_DWORD *)(v189 + 32) = v188;
                  }
                }
              }
            }
            while (v159-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v9 += 40 * v12;
        if (v10 >= 0x1401)
        {
          if (*(_BYTE *)(v9 + 33))
            v13 = *(_BYTE *)(v8 + 33) == 0;
          else
            v13 = 0;
          if (v13)
          {
            std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8, (WTF::StringImpl *)(v8 + 40 * v12));
            if (!*((_BYTE *)v7 - 7) || *(_BYTE *)(v9 + 33))
              goto LABEL_35;
            v16 = v8 + 40 * v12;
            v17 = (WTF::StringImpl *)((char *)v7 - 40);
          }
          else
          {
            if (*(_BYTE *)(v9 + 33))
              v14 = 1;
            else
              v14 = *((_BYTE *)v7 - 7) == 0;
            if (v14
              || ((std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8 + 40 * v12, v226), *(_BYTE *)(v9 + 33))
                ? (v15 = *(_BYTE *)(v8 + 33) == 0)
                : (v15 = 0),
                  !v15))
            {
LABEL_35:
              v20 = v8 + 40 * v12;
              v10 = v20 - 40;
              v21 = *(unsigned __int8 *)(v20 - 7);
              if (v21)
                v22 = *(_BYTE *)(v8 + 73) == 0;
              else
                v22 = 0;
              if (v22)
              {
                std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8 + 40, (WTF::StringImpl *)v10);
                if (!*((_BYTE *)v7 - 47) || *(_BYTE *)(v10 + 33))
                  goto LABEL_53;
                v25 = v10;
                v26 = (WTF::StringImpl *)((char *)v7 - 80);
              }
              else
              {
                if (v21)
                  v23 = 1;
                else
                  v23 = *((_BYTE *)v7 - 47) == 0;
                if (v23
                  || ((std::swap[abi:sn180100]<WebCore::CaptureDevice>(v10, (WTF::StringImpl *)((char *)v7 - 80)),
                       *(_BYTE *)(v10 + 33))
                    ? (v24 = *(_BYTE *)(v8 + 73) == 0)
                    : (v24 = 0),
                      !v24))
                {
LABEL_53:
                  v5 = (WTF::StringImpl *)(v8 + 80);
                  v27 = v8 + 40 * v12;
                  v4 = v27 + 40;
                  v28 = *(unsigned __int8 *)(v27 + 73);
                  if (v28)
                    v29 = *(_BYTE *)(v8 + 113) == 0;
                  else
                    v29 = 0;
                  if (v29)
                  {
                    std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8 + 80, (WTF::StringImpl *)v4);
                    if (!*((_BYTE *)v7 - 87) || *(_BYTE *)(v4 + 33))
                      goto LABEL_71;
                    v32 = v4;
                    v33 = (WTF::StringImpl *)((char *)v7 - 120);
                  }
                  else
                  {
                    if (v28)
                      v30 = 1;
                    else
                      v30 = *((_BYTE *)v7 - 87) == 0;
                    if (v30
                      || ((std::swap[abi:sn180100]<WebCore::CaptureDevice>(v4, (WTF::StringImpl *)((char *)v7 - 120)),
                           *(_BYTE *)(v4 + 33))
                        ? (v31 = *(_BYTE *)(v8 + 113) == 0)
                        : (v31 = 0),
                          !v31))
                    {
LABEL_71:
                      if (*(_BYTE *)(v9 + 33))
                        v34 = *(_BYTE *)(v10 + 33) == 0;
                      else
                        v34 = 0;
                      if (!v34)
                      {
                        if (*(_BYTE *)(v9 + 33))
                          v35 = 1;
                        else
                          v35 = *(_BYTE *)(v4 + 33) == 0;
                        if (v35)
                          goto LABEL_92;
                        std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8 + 40 * v12, (WTF::StringImpl *)v4);
                        if (!*(_BYTE *)(v9 + 33) || *(_BYTE *)(v10 + 33) != 0)
                          goto LABEL_92;
                        v37 = v10;
                        v38 = (WTF::StringImpl *)(v8 + 40 * v12);
LABEL_91:
                        std::swap[abi:sn180100]<WebCore::CaptureDevice>(v37, v38);
                        goto LABEL_92;
                      }
                      std::swap[abi:sn180100]<WebCore::CaptureDevice>(v10, (WTF::StringImpl *)(v8 + 40 * v12));
                      if (*(_BYTE *)(v4 + 33))
                        v39 = *(_BYTE *)(v9 + 33) == 0;
                      else
                        v39 = 0;
                      if (v39)
                      {
                        v37 = v8 + 40 * v12;
                        v38 = (WTF::StringImpl *)v4;
                        goto LABEL_91;
                      }
LABEL_92:
                      v18 = v8;
                      v19 = (WTF::StringImpl *)(v8 + 40 * v12);
LABEL_93:
                      std::swap[abi:sn180100]<WebCore::CaptureDevice>(v18, v19);
                      goto LABEL_94;
                    }
                    v32 = v8 + 80;
                    v33 = (WTF::StringImpl *)v4;
                  }
                  std::swap[abi:sn180100]<WebCore::CaptureDevice>(v32, v33);
                  goto LABEL_71;
                }
                v25 = v8 + 40;
                v26 = (WTF::StringImpl *)v10;
              }
              std::swap[abi:sn180100]<WebCore::CaptureDevice>(v25, v26);
              goto LABEL_53;
            }
            v16 = v8;
            v17 = (WTF::StringImpl *)(v8 + 40 * v12);
          }
          std::swap[abi:sn180100]<WebCore::CaptureDevice>(v16, v17);
          goto LABEL_35;
        }
        if (!*(_BYTE *)(v8 + 33) || *(_BYTE *)(v9 + 33))
        {
          if (!*(_BYTE *)(v8 + 33))
          {
            if (*((_BYTE *)v7 - 7))
            {
              std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8, v226);
              if (*(_BYTE *)(v8 + 33))
              {
                if (!*(_BYTE *)(v9 + 33))
                {
                  v18 = v8 + 40 * v12;
                  v19 = (WTF::StringImpl *)v8;
                  goto LABEL_93;
                }
              }
            }
          }
        }
        else
        {
          std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8 + 40 * v12, (WTF::StringImpl *)v8);
          if (*((_BYTE *)v7 - 7) && !*(_BYTE *)(v8 + 33))
          {
            v18 = v8;
            v19 = (WTF::StringImpl *)((char *)v7 - 40);
            goto LABEL_93;
          }
        }
LABEL_94:
        v40 = a3 - 1;
        if ((a4 & 1) == 0 && (!*(_BYTE *)(v8 - 7) || *(_BYTE *)(v8 + 33)))
        {
          v79 = *(WTF::StringImpl **)v8;
          *(_QWORD *)v8 = 0;
          v5 = (WTF::StringImpl *)*(unsigned __int8 *)(v8 + 8);
          v80 = *(_QWORD *)(v8 + 16);
          v81 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
          v4 = *(unsigned int *)(v8 + 32);
          v82 = *(_DWORD *)(v8 + 32) & 0xFF00;
          if ((v4 & 0xFF00) == 0 || *((_BYTE *)v7 - 7))
          {
            v85 = v8 + 40;
            if (!v82)
            {
              if ((unint64_t)v7 <= v85)
                v88 = (WTF::StringImpl *)(v8 + 40);
              else
                v88 = v7;
              v89 = (char *)v88 - 40;
              v13 = v89 == (char *)v8;
              v90 = (unint64_t)&v89[-v8 - (v89 != (char *)v8)] / 0x28;
              if (!v13)
                ++v90;
              v9 = v85 + 40 * v90;
              v10 = (unint64_t)v7;
              if (v9 >= (unint64_t)v7)
                goto LABEL_174;
              goto LABEL_173;
            }
            do
            {
              v9 = v85;
              if (v85 >= (unint64_t)v7)
                break;
              v85 += 40;
            }
            while (*(_BYTE *)(v9 + 33));
          }
          else
          {
            v83 = (unsigned __int8 *)(v8 + 40);
            do
            {
              if (v83 == (unsigned __int8 *)v7)
                goto LABEL_475;
              v84 = v83[33];
              v83 += 40;
            }
            while (v84);
            v9 = (unint64_t)(v83 - 40);
          }
          if (v9 >= (unint64_t)v7)
          {
            v10 = (unint64_t)v7;
            goto LABEL_174;
          }
          v86 = v7;
          if (v82)
          {
            while (v86 != (WTF::StringImpl *)v8)
            {
              v10 = (unint64_t)v86 - 40;
              v87 = *((unsigned __int8 *)v86 - 7);
              v86 = (WTF::StringImpl *)((char *)v86 - 40);
              if (v87)
                goto LABEL_174;
            }
            goto LABEL_475;
          }
LABEL_173:
          v10 = (unint64_t)v7 - 40;
          if (v7 == (WTF::StringImpl *)v8)
            goto LABEL_475;
LABEL_174:
          if (v9 < v10)
          {
            if (!v82)
              goto LABEL_477;
            do
            {
              std::swap[abi:sn180100]<WebCore::CaptureDevice>(v9, (WTF::StringImpl *)v10);
              v91 = (unsigned __int8 *)(v9 + 40);
              do
              {
                if (v91 == (unsigned __int8 *)v7)
                  goto LABEL_475;
                v92 = v91[33];
                v91 += 40;
              }
              while (v92);
              v9 = (unint64_t)(v91 - 40);
              do
              {
                if (v10 == v8)
                  goto LABEL_475;
                v93 = v10 - 40;
                v94 = *(unsigned __int8 *)(v10 - 7);
                v10 -= 40;
              }
              while (!v94);
              v10 = v93;
            }
            while (v9 < v93);
          }
          v95 = v40;
          v96 = (WTF::StringImpl **)(v9 - 40);
          if (v9 - 40 != v8)
          {
            v97 = *v96;
            *v96 = 0;
            v98 = *(WTF::StringImpl **)v8;
            *(_QWORD *)v8 = v97;
            if (v98)
            {
              if (*(_DWORD *)v98 == 2)
                WTF::StringImpl::destroy(v98, a2);
              else
                *(_DWORD *)v98 -= 2;
            }
            *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 - 32);
            v99 = *(_QWORD *)(v9 - 24);
            *(_QWORD *)(v9 - 24) = 0;
            v100 = *(WTF::StringImpl **)(v8 + 16);
            *(_QWORD *)(v8 + 16) = v99;
            if (v100)
            {
              if (*(_DWORD *)v100 == 2)
                WTF::StringImpl::destroy(v100, a2);
              else
                *(_DWORD *)v100 -= 2;
            }
            v101 = *(_QWORD *)(v9 - 16);
            *(_QWORD *)(v9 - 16) = 0;
            v102 = *(WTF::StringImpl **)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v101;
            if (v102)
            {
              if (*(_DWORD *)v102 == 2)
                WTF::StringImpl::destroy(v102, a2);
              else
                *(_DWORD *)v102 -= 2;
            }
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 - 8);
          }
          v103 = *v96;
          *v96 = v79;
          a3 = v95;
          if (v103)
          {
            if (*(_DWORD *)v103 == 2)
              WTF::StringImpl::destroy(v103, a2);
            else
              *(_DWORD *)v103 -= 2;
          }
          *(_BYTE *)(v9 - 32) = (_BYTE)v5;
          v104 = *(WTF::StringImpl **)(v9 - 24);
          *(_QWORD *)(v9 - 24) = v80;
          if (v104)
          {
            if (*(_DWORD *)v104 == 2)
              WTF::StringImpl::destroy(v104, a2);
            else
              *(_DWORD *)v104 -= 2;
          }
          result = *(_QWORD *)(v9 - 16);
          *(_QWORD *)(v9 - 16) = v81;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          a4 = 0;
          *(_DWORD *)(v9 - 8) = v4;
          continue;
        }
        v239 = v40;
        v41 = *(WTF::StringImpl **)v8;
        *(_QWORD *)v8 = 0;
        v42 = *(_BYTE *)(v8 + 8);
        v44 = *(_QWORD *)(v8 + 16);
        v43 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
        v45 = *(_DWORD *)(v8 + 32);
        if ((v45 & 0xFF00) == 0)
        {
          v46 = 0;
          do
          {
            if ((WTF::StringImpl *)(v8 + v46 + 40) == v7)
              goto LABEL_475;
            v47 = *(unsigned __int8 *)(v8 + v46 + 73);
            v46 += 40;
          }
          while (v47);
          v4 = v8 + v46;
          v5 = v7;
          v48 = v7;
          if (v46 != 40)
          {
            while (v48 != (WTF::StringImpl *)v8)
            {
              v5 = (WTF::StringImpl *)((char *)v48 - 40);
              v49 = *((unsigned __int8 *)v48 - 7);
              v48 = (WTF::StringImpl *)((char *)v48 - 40);
              if (v49)
                goto LABEL_111;
            }
            goto LABEL_475;
          }
          while (v4 < (unint64_t)v5)
          {
            v50 = (WTF::StringImpl *)((char *)v5 - 40);
            v51 = *((unsigned __int8 *)v5 - 7);
            v5 = (WTF::StringImpl *)((char *)v5 - 40);
            if (v51)
            {
              v5 = v50;
              break;
            }
          }
LABEL_111:
          v9 = v4;
          if (v4 < (unint64_t)v5)
          {
            v219 = *(_DWORD *)(v8 + 32);
            if ((v45 & 0xFF00) != 0)
              goto LABEL_476;
            v52 = v41;
            v53 = v42;
            v54 = v43;
            v9 = v4;
            v10 = (unint64_t)v5;
            do
            {
              std::swap[abi:sn180100]<WebCore::CaptureDevice>(v9, (WTF::StringImpl *)v10);
              v55 = (unsigned __int8 *)(v9 + 40);
              do
              {
                if (v55 == (unsigned __int8 *)v7)
                  goto LABEL_475;
                v56 = v55[33];
                v55 += 40;
              }
              while (v56);
              v9 = (unint64_t)(v55 - 40);
              do
              {
                if (v10 == v8)
                  goto LABEL_475;
                v57 = v10 - 40;
                v58 = *(unsigned __int8 *)(v10 - 7);
                v10 -= 40;
              }
              while (!v58);
              v10 = v57;
            }
            while (v9 < v57);
            v43 = v54;
            v42 = v53;
            v41 = v52;
            v45 = v219;
          }
          v59 = (WTF::StringImpl **)(v9 - 40);
          if (v9 - 40 != v8)
          {
            v60 = *v59;
            *v59 = 0;
            v61 = *(WTF::StringImpl **)v8;
            *(_QWORD *)v8 = v60;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
              {
                v70 = v43;
                v71 = v42;
                v222 = v45;
                v72 = v41;
                WTF::StringImpl::destroy(v61, a2);
                v41 = v72;
                v45 = v222;
                v42 = v71;
                v43 = v70;
              }
              else
              {
                *(_DWORD *)v61 -= 2;
              }
            }
            *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 - 32);
            v62 = *(_QWORD *)(v9 - 24);
            *(_QWORD *)(v9 - 24) = 0;
            v63 = *(WTF::StringImpl **)(v8 + 16);
            *(_QWORD *)(v8 + 16) = v62;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
              {
                v73 = v43;
                v74 = v42;
                v223 = v45;
                v75 = v41;
                WTF::StringImpl::destroy(v63, a2);
                v41 = v75;
                v45 = v223;
                v42 = v74;
                v43 = v73;
              }
              else
              {
                *(_DWORD *)v63 -= 2;
              }
            }
            v64 = *(_QWORD *)(v9 - 16);
            *(_QWORD *)(v9 - 16) = 0;
            v65 = *(WTF::StringImpl **)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v64;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
              {
                v76 = v43;
                v77 = v42;
                v224 = v45;
                v78 = v41;
                WTF::StringImpl::destroy(v65, a2);
                v41 = v78;
                v45 = v224;
                v42 = v77;
                v43 = v76;
              }
              else
              {
                *(_DWORD *)v65 -= 2;
              }
            }
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 - 8);
          }
          v66 = *v59;
          *v59 = v41;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
            {
              v69 = v43;
              v220 = v42;
              WTF::StringImpl::destroy(v66, a2);
              v42 = v220;
              v43 = v69;
            }
            else
            {
              *(_DWORD *)v66 -= 2;
            }
          }
          *(_BYTE *)(v9 - 32) = v42;
          v67 = *(WTF::StringImpl **)(v9 - 24);
          *(_QWORD *)(v9 - 24) = v44;
          a3 = v239;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
            {
              v221 = v43;
              WTF::StringImpl::destroy(v67, a2);
              v43 = v221;
            }
            else
            {
              *(_DWORD *)v67 -= 2;
            }
          }
          v68 = *(WTF::StringImpl **)(v9 - 16);
          *(_QWORD *)(v9 - 16) = v43;
          if (v68)
          {
            if (*(_DWORD *)v68 == 2)
              WTF::StringImpl::destroy(v68, a2);
            else
              *(_DWORD *)v68 -= 2;
          }
          *(_DWORD *)(v9 - 8) = v45;
          if (v4 < (unint64_t)v5)
            goto LABEL_145;
          v4 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>((_BYTE *)v8, (WTF::StringImpl *)(v9 - 40));
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>((_BYTE *)v9, v7);
          if (!(_DWORD)result)
          {
            if ((v4 & 1) != 0)
              continue;
LABEL_145:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *,false>(v8, v9 - 40, v239, a4 & 1);
            a4 = 0;
            continue;
          }
          v7 = (WTF::StringImpl *)(v9 - 40);
          if ((v4 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        v4 = v8 + 40;
        v5 = (WTF::StringImpl *)((char *)v7 + 40);
        if ((WTF::StringImpl *)(v8 + 40) != v7)
        {
          do
            v5 = (WTF::StringImpl *)((char *)v5 - 40);
          while (v4 < (unint64_t)v5);
          goto LABEL_111;
        }
LABEL_475:
        __break(1u);
LABEL_476:
        std::swap[abi:sn180100]<WebCore::CaptureDevice>(v4, v5);
        __break(1u);
LABEL_477:
        result = (uint64_t)std::swap[abi:sn180100]<WebCore::CaptureDevice>(v9, (WTF::StringImpl *)v10);
        __break(1u);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>(_BYTE *a1, WTF::StringImpl *a2)
{
  unint64_t v4;
  _BOOL8 result;
  BOOL v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  BOOL v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _BYTE *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (WTF::StringImpl *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*((_BYTE *)a2 - 7))
        v6 = a1[33] == 0;
      else
        v6 = 0;
      if (v6)
      {
        v7 = (WTF::StringImpl *)((char *)a2 - 40);
        v8 = (uint64_t)a1;
        goto LABEL_82;
      }
      return result;
    case 3uLL:
      v13 = (uint64_t)(a1 + 40);
      v14 = (WTF::StringImpl *)((char *)a2 - 40);
      if (a1[73])
        v15 = a1[33] == 0;
      else
        v15 = 0;
      if (v15)
      {
        std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)a1, (WTF::StringImpl *)(a1 + 40));
        result = 1;
        if (*((_BYTE *)a2 - 7) && !a1[73])
        {
          v8 = (uint64_t)(a1 + 40);
          v7 = (WTF::StringImpl *)((char *)a2 - 40);
          goto LABEL_82;
        }
      }
      else if (!a1[73] && *((_BYTE *)a2 - 7))
      {
        goto LABEL_31;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>((WTF::StringImpl *)a1, (WTF::StringImpl *)(a1 + 40), (WTF::StringImpl *)(a1 + 80), (WTF::StringImpl *)((char *)a2 - 40));
      return 1;
    case 5uLL:
      v13 = (uint64_t)(a1 + 40);
      v14 = (WTF::StringImpl *)(a1 + 80);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>((WTF::StringImpl *)a1, (WTF::StringImpl *)(a1 + 40), (WTF::StringImpl *)(a1 + 80), (WTF::StringImpl *)(a1 + 120));
      result = 1;
      if (!*((_BYTE *)a2 - 7))
        return result;
      if (a1[153])
        return result;
      std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)(a1 + 120), (WTF::StringImpl *)((char *)a2 - 40));
      result = 1;
      if (!a1[153])
        return result;
      if (a1[113])
        return result;
      std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)(a1 + 80), (WTF::StringImpl *)(a1 + 120));
      result = 1;
      if (!a1[113] || a1[73])
        return result;
LABEL_31:
      std::swap[abi:sn180100]<WebCore::CaptureDevice>(v13, v14);
      result = 1;
      if (!a1[73] || a1[33])
        return result;
      v8 = (uint64_t)a1;
      v7 = (WTF::StringImpl *)v13;
LABEL_82:
      std::swap[abi:sn180100]<WebCore::CaptureDevice>(v8, v7);
      return 1;
    default:
      v9 = (WTF::StringImpl *)(a1 + 80);
      if (a1[73])
        v10 = a1[33] == 0;
      else
        v10 = 0;
      if (v10)
      {
        std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)a1, (WTF::StringImpl *)(a1 + 40));
        if (a1[113] && !a1[73])
        {
          v11 = (uint64_t)(a1 + 40);
          v12 = (WTF::StringImpl *)(a1 + 80);
          goto LABEL_37;
        }
      }
      else if (!a1[73])
      {
        if (a1[113])
        {
          std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)(a1 + 40), (WTF::StringImpl *)(a1 + 80));
          if (a1[73])
          {
            if (!a1[33])
            {
              v11 = (uint64_t)a1;
              v12 = (WTF::StringImpl *)(a1 + 40);
LABEL_37:
              std::swap[abi:sn180100]<WebCore::CaptureDevice>(v11, v12);
            }
          }
        }
      }
      v16 = (WTF::StringImpl *)(a1 + 120);
      if (a1 + 120 == (_BYTE *)a2)
        return 1;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        if (*((_BYTE *)v16 + 33) && *((_BYTE *)v9 + 33) == 0)
        {
          v20 = *(_QWORD *)v16;
          *(_QWORD *)v16 = 0;
          v38 = *((_BYTE *)v16 + 8);
          v37 = *((_QWORD *)v16 + 2);
          v39 = *((_QWORD *)v16 + 3);
          *((_QWORD *)v16 + 2) = 0;
          *((_QWORD *)v16 + 3) = 0;
          v21 = *((_DWORD *)v16 + 8);
          v22 = v17;
          do
          {
            v23 = &a1[v22];
            v24 = *(_QWORD *)&a1[v22 + 80];
            *((_QWORD *)v23 + 10) = 0;
            v25 = *(WTF::StringImpl **)&a1[v22 + 120];
            *((_QWORD *)v23 + 15) = v24;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, a2);
              else
                *(_DWORD *)v25 -= 2;
            }
            v23[128] = v23[88];
            v26 = *((_QWORD *)v23 + 12);
            *((_QWORD *)v23 + 12) = 0;
            v27 = (WTF::StringImpl *)*((_QWORD *)v23 + 17);
            *((_QWORD *)v23 + 17) = v26;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, a2);
              else
                *(_DWORD *)v27 -= 2;
            }
            v28 = &a1[v22];
            v29 = *(_QWORD *)&a1[v22 + 104];
            *((_QWORD *)v28 + 13) = 0;
            v30 = *(WTF::StringImpl **)&a1[v22 + 144];
            *((_QWORD *)v28 + 18) = v29;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, a2);
              else
                *(_DWORD *)v30 -= 2;
            }
            *((_DWORD *)v28 + 38) = *((_DWORD *)v28 + 28);
            if (v22 == -80)
            {
              v33 = (uint64_t)a1;
              goto LABEL_64;
            }
            v31 = v22 - 40;
            if ((v21 & 0xFF00) == 0)
              break;
            v32 = a1[v22 + 73];
            v22 -= 40;
          }
          while (!v32);
          v33 = (uint64_t)&a1[v31 + 120];
LABEL_64:
          v34 = *(WTF::StringImpl **)v33;
          *(_QWORD *)v33 = v20;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, a2);
            else
              *(_DWORD *)v34 -= 2;
          }
          *(_BYTE *)(v33 + 8) = v38;
          v35 = *(WTF::StringImpl **)(v33 + 16);
          *(_QWORD *)(v33 + 16) = v37;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, a2);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = *(WTF::StringImpl **)(v33 + 24);
          *(_QWORD *)(v33 + 24) = v39;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, a2);
            else
              *(_DWORD *)v36 -= 2;
          }
          *(_DWORD *)(v33 + 32) = v21;
          if (++v18 == 8)
            return (WTF::StringImpl *)((char *)v16 + 40) == a2;
        }
        v9 = v16;
        v17 += 40;
        v16 = (WTF::StringImpl *)((char *)v16 + 40);
        if (v16 == a2)
          return 1;
      }
  }
}

WTF::StringImpl *std::swap[abi:sn180100]<WebCore::CaptureDevice>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;

  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(_BYTE *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8 = *(_DWORD *)(a1 + 32);
  v9 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v11 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v12 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v14 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  v15 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v4;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  *((_BYTE *)a2 + 8) = v5;
  v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)a2 + 8) = v8;
  return result;
}

WTF::StringImpl *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0 &,WebCore::CaptureDevice *>(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl *a3, WTF::StringImpl *a4)
{
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  BOOL v12;
  BOOL v13;

  v7 = (uint64_t)result;
  if (*((_BYTE *)a2 + 33))
    v8 = *((_BYTE *)result + 33) == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)result, a2);
    if (*((_BYTE *)a3 + 33))
      v12 = *((_BYTE *)a2 + 33) == 0;
    else
      v12 = 0;
    if (v12)
    {
      v10 = (uint64_t)a2;
      v11 = a3;
      goto LABEL_18;
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 33))
      v9 = 1;
    else
      v9 = *((_BYTE *)a3 + 33) == 0;
    if (!v9)
    {
      result = std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)a2, a3);
      if (*((_BYTE *)a2 + 33))
      {
        if (!*(_BYTE *)(v7 + 33))
        {
          v10 = v7;
          v11 = a2;
LABEL_18:
          result = std::swap[abi:sn180100]<WebCore::CaptureDevice>(v10, v11);
        }
      }
    }
  }
  if (*((_BYTE *)a4 + 33))
    v13 = *((_BYTE *)a3 + 33) == 0;
  else
    v13 = 0;
  if (v13)
  {
    result = std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)a3, a4);
    if (*((_BYTE *)a3 + 33))
    {
      if (!*((_BYTE *)a2 + 33))
      {
        result = std::swap[abi:sn180100]<WebCore::CaptureDevice>((uint64_t)a2, a3);
        if (*((_BYTE *)a2 + 33))
        {
          if (!*(_BYTE *)(v7 + 33))
            return std::swap[abi:sn180100]<WebCore::CaptureDevice>(v7, a2);
        }
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::CaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a1 + 24);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v5 - 3);
      *(v5 - 3) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<WebCore::AVAudioSessionCaptureDeviceManager::AVAudioSessionCaptureDeviceManager(void)::$_0,void>::call(PAL *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  PAL *AVFoundation_AVAudioSessionCategoryPlayAndRecord;
  void *v5;
  WebAVAudioSessionAvailableInputsListener *v6;
  const void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 1);
  v2 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVAudioSessionClass(a1)), "initAuxiliarySession");
  v3 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v2;
  if (v3)
  {
    CFRelease(v3);
    v2 = *(void **)(v1 + 80);
  }
  v10 = 0;
  AVFoundation_AVAudioSessionCategoryPlayAndRecord = (PAL *)PAL::get_AVFoundation_AVAudioSessionCategoryPlayAndRecord((PAL *)v3);
  objc_msgSend(v2, "setCategory:mode:options:error:", AVFoundation_AVAudioSessionCategoryPlayAndRecord, PAL::get_AVFoundation_AVAudioSessionModeDefault(AVFoundation_AVAudioSessionCategoryPlayAndRecord), 4, &v10);
  v5 = v10;
  if (!v10
    || (v8 = qword_1ECE7CD60, os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    && (v9 = objc_msgSend(v5, "localizedDescription"),
        *(_DWORD *)buf = 138412290,
        v12 = v9,
        _os_log_error_impl(&dword_1940B8000, v8, OS_LOG_TYPE_ERROR, "Failed to set audio session category with error: %@.", buf, 0xCu), !v10))
  {
    objc_msgSend(*(id *)(v1 + 72), "invalidate");
    v6 = -[WebAVAudioSessionAvailableInputsListener initWithCallback:audioSession:]([WebAVAudioSessionAvailableInputsListener alloc], "initWithCallback:audioSession:", v1, *(_QWORD *)(v1 + 80));
    v7 = *(const void **)(v1 + 72);
    *(_QWORD *)(v1 + 72) = v6;
    if (v7)
      CFRelease(v7);
  }
}

double WTF::Detail::CallableWrapper<WebCore::AVAudioSessionCaptureDeviceManager::refreshAudioCaptureDevices(void)::$_0,void>::call(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (***v6)(void);
  void (**v7)(void);
  WTF *v8;
  double result;
  uint64_t v10;
  double v11;

  WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices((WebCore::AVAudioSessionCaptureDeviceManager *)&v10, *(_QWORD *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v4)
  {
    v5 = 48 * v4;
    v6 = *(void (****)(void))v3;
    do
    {
      v7 = *v6;
      v6 += 6;
      (*v7)();
      v5 -= 48;
    }
    while (v5);
  }
  v8 = *(WTF **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    WTF::fastFree(v8, v2);
  }
  *(_QWORD *)v3 = v10;
  result = v11;
  *(double *)(v3 + 8) = v11;
  return result;
}

void sub_19468AF70(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, unsigned int a11)
{
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  void (**v15)(WTF *);

  if (a11)
  {
    v12 = 48 * a11;
    v13 = a9;
    v14 = a9;
    do
    {
      v15 = *(void (***)(WTF *))v14;
      v14 = (WTF *)((char *)v14 + 48);
      (*v15)(v13);
      v13 = v14;
      v12 -= 48;
    }
    while (v12);
  }
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E31F6E00;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E31F6E00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  void (**v13)(WTF *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  WTF *v18;
  unsigned int v19;

  v2 = *(_QWORD *)(a1 + 8);
  WebCore::AVAudioSessionCaptureDeviceManager::retrieveAudioSessionCaptureDevices((WebCore::AVAudioSessionCaptureDeviceManager *)&v18, v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v14 = v3;
  WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((WTF::StringImpl *)&v15, (unint64_t *)&v18);
  v4 = v15;
  v6 = v16;
  v5 = v17;
  v7 = malloc_type_malloc(0x40uLL, 0x10E0040AE99C5D5uLL);
  *v7 = MEMORY[0x1E0C809A0];
  v7[1] = 50331650;
  v7[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke;
  v7[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::descriptor;
  v7[4] = v2;
  v7[5] = v14;
  v7[6] = v4;
  *((_DWORD *)v7 + 14) = v6;
  *((_DWORD *)v7 + 15) = v5;
  WTF::callOnWebThreadOrDispatchAsyncOnMainThread();
  _Block_release(v7);
  v9 = v18;
  if (v19)
  {
    v10 = 48 * v19;
    v11 = v18;
    v12 = v18;
    do
    {
      v13 = *(void (***)(WTF *))v12;
      v12 = (WTF *)((char *)v12 + 48);
      (*v13)(v11);
      v11 = v12;
      v10 -= 48;
    }
    while (v10);
  }
  if (v9)
    WTF::fastFree(v9, v8);
}

void sub_19468B164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, unsigned int a15)
{
  const void *v15;
  const void *v16;
  void *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  void (**v22)(WTF *);

  v16 = v15;
  _Block_release(v16);
  if (a15)
  {
    v19 = 48 * a15;
    v20 = a13;
    v21 = a13;
    do
    {
      v22 = *(void (***)(WTF *))v21;
      v21 = (WTF *)((char *)v21 + 48);
      (*v22)(v20);
      v20 = v21;
      v19 -= 48;
    }
    while (v19);
  }
  if (a13)
    WTF::fastFree(a13, v18);
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (***v5)(void);
  void (**v6)(void);
  WTF *v7;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = *(void (****)(void))(a1 + 48);
    do
    {
      v6 = *v5;
      v5 += 6;
      (*v6)();
      v4 -= 48;
    }
    while (v4);
  }
  v7 = *(WTF **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v7, a2);
  }
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1}>(WebCore::AVAudioSessionCaptureDeviceManager::computeCaptureDevices(WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1})::{lambda(void *)#1}::__invoke(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;

  WebCore::AVAudioSessionCaptureDeviceManager::setAudioCaptureDevices(*(unsigned int **)(a1 + 32), (WTF::StringImpl *)(a1 + 48), a3);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_19468B300(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unint64_t WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::AVAudioSessionCaptureDevice,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 48 * v4;
        do
        {
          v10 = (char *)v3 + v8;
          v11 = *(_DWORD **)((char *)v3 + v8 + 8);
          if (v11)
            *v11 += 2;
          v12 = v7 + v8;
          *(_QWORD *)(v12 + 8) = v11;
          *(_BYTE *)(v12 + 16) = v10[16];
          v13 = (_DWORD *)*((_QWORD *)v10 + 3);
          if (v13)
            *v13 += 2;
          *(_QWORD *)(v12 + 24) = v13;
          v14 = (char *)v3 + v8;
          v15 = *(_DWORD **)((char *)v3 + v8 + 32);
          if (v15)
            *v15 += 2;
          v16 = v7 + v8;
          *(_QWORD *)(v16 + 32) = v15;
          *(_DWORD *)(v16 + 40) = *((_DWORD *)v14 + 10);
          *(_QWORD *)v16 = &off_1E31F6E48;
          result = (**(uint64_t (***)(void))v14)();
          v8 += 48;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WebCore::AVTrackPrivateAVFObjCImpl *WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(WebCore::AVTrackPrivateAVFObjCImpl *this, void *cf)
{
  const void *v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const void *)objc_msgSend(cf, "assetTrack");
  *((_QWORD *)this + 4) = v4;
  if (v4)
    CFRetain(v4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack(this);
  return this;
}

void sub_19468B580(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int **v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v4 = *v2;
    *v2 = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

WTF *WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack(WTF *this)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD v17[4];
  WTF *v18;

  v1 = (void *)*((_QWORD *)this + 4);
  if (v1)
  {
    v2 = (uint64_t *)this;
    if (_MergedGlobals_91 == 1)
    {
      v3 = qword_1ECE80D68;
    }
    else
    {
      v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("formatDescriptions"), CFSTR("estimatedDataRate"), CFSTR("nominalFrameRate"), 0);
      qword_1ECE80D68 = v3;
      _MergedGlobals_91 = 1;
    }
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3321888768;
    v17[2] = ___ZN7WebCore25AVTrackPrivateAVFObjCImpl20initializeAssetTrackEv_block_invoke;
    v17[3] = &__block_descriptor_40_e8_32c71_ZTSKZN7WebCore25AVTrackPrivateAVFObjCImpl20initializeAssetTrackEvE3__0_e5_v8__0l;
    v4 = *v2;
    if (*v2)
      goto LABEL_26;
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v2;
    v6 = (unsigned int *)*v2;
    *v2 = v4;
    if (!v6)
      goto LABEL_26;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
    v4 = *v2;
    if (*v2)
    {
LABEL_26:
      do
        v9 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v9 + 1, (unsigned int *)v4));
      do
        v10 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v10 + 1, (unsigned int *)v4));
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    v18 = (WTF *)v4;
    objc_msgSend(v1, "loadValuesAsynchronouslyForKeys:completionHandler:", v3, v17);
    if ((v11 & 1) == 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v4);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v4));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v4);
        WTF::fastFree((WTF *)v4, v12);
      }
    }
    this = v18;
    v18 = 0;
    if (this)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)this);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)this));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)this);
        return (WTF *)WTF::fastFree(this, v12);
      }
    }
  }
  return this;
}

void sub_19468B868(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16)
{
  unsigned int *v16;
  char v17;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  if (!a16)
    goto LABEL_4;
  do
  {
    v19 = __ldaxr((unsigned int *)a16);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, (unsigned int *)a16));
  if (!v20)
  {
    atomic_store(1u, (unsigned int *)a16);
    WTF::fastFree(a16, a2);
    if ((v17 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
LABEL_4:
    if ((v17 & 1) != 0)
      goto LABEL_8;
  }
  do
  {
    v21 = __ldaxr(v16);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v16));
  if (!v22)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, a2);
  }
LABEL_8:
  _Unwind_Resume(exception_object);
}

WebCore::AVTrackPrivateAVFObjCImpl *WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(WebCore::AVTrackPrivateAVFObjCImpl *this, CFTypeRef cf)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 4) = cf;
  if (cf)
    CFRetain(cf);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack(this);
  return this;
}

void sub_19468B928(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int **v2;
  WTF *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;

  v4 = (WTF *)v2[3];
  v2[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v10 = (const void *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v10)
        CFRelease(v10);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = v2[2];
  v2[2] = 0;
  if (v5)
    CFRelease(v5);
  v6 = v2[1];
  v2[1] = 0;
  if (v6)
    CFRelease(v6);
  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v7 = *v2;
    *v2 = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

WebCore::AVTrackPrivateAVFObjCImpl *WebCore::AVTrackPrivateAVFObjCImpl::AVTrackPrivateAVFObjCImpl(WebCore::AVTrackPrivateAVFObjCImpl *this, id *a2)
{
  const void *v3;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  ++*(_DWORD *)a2;
  *((_QWORD *)this + 3) = a2;
  v3 = (const void *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(a2);
  *((_QWORD *)this + 4) = v3;
  if (v3)
    CFRetain(v3);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack(this);
  return this;
}

void sub_19468BAB0(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  const void *v18;

  v5 = v2[6];
  v2[6] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *v3;
  *v3 = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = v2[4];
  v2[4] = 0;
  if (v11)
    CFRelease(v11);
  v12 = (WTF *)v2[3];
  v2[3] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      v18 = (const void *)*((_QWORD *)v12 + 2);
      *((_QWORD *)v12 + 2) = 0;
      if (v18)
        CFRelease(v18);
      WTF::fastFree(v12, a2);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = v2[2];
  v2[2] = 0;
  if (v13)
    CFRelease(v13);
  v14 = v2[1];
  v2[1] = 0;
  if (v14)
    CFRelease(v14);
  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v15 = *v2;
    *v2 = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::AVTrackPrivateAVFObjCImpl::~AVTrackPrivateAVFObjCImpl(WebCore::AVTrackPrivateAVFObjCImpl *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  WTF *v10;
  const void *v11;
  const void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;

  v3 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    CFRelease(v9);
  v10 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v16 = (const void *)*((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 2) = 0;
      if (v16)
        CFRelease(v16);
      WTF::fastFree(v10, a2);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
    CFRelease(v12);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v13 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t ___ZN7WebCore25AVTrackPrivateAVFObjCImpl20initializeAssetTrackEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = &off_1E31F6E98;
  v2[1] = v1;
  v4 = v2;
  WTF::callOnMainThread();
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_19468BD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c71_ZTSKZN7WebCore25AVTrackPrivateAVFObjCImpl20initializeAssetTrackEvE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c71_ZTSKZN7WebCore25AVTrackPrivateAVFObjCImpl20initializeAssetTrackEvE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::AVTrackPrivateAVFObjCImpl::audioKind(WebCore::AVTrackPrivateAVFObjCImpl *this)
{
  void *v2;
  PAL *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  PAL *v7;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (PAL *)objc_msgSend(v2, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicIsAuxiliaryContent(this));
    if ((v3 & 1) == 0)
    {
      v4 = objc_msgSend(*((id *)this + 4), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicDescribesVideoForAccessibility(v3));
      if ((v4 & 1) == 0)
      {
        v5 = (void *)*((_QWORD *)this + 4);
        goto LABEL_11;
      }
      return 1;
    }
    return 0;
  }
  v6 = *((_QWORD *)this + 3);
  if (!v6)
    return 6;
  v5 = *(void **)(v6 + 16);
  v7 = (PAL *)objc_msgSend(v5, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicIsAuxiliaryContent(this));
  if ((v7 & 1) != 0)
    return 0;
  v4 = objc_msgSend(v5, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicDescribesVideoForAccessibility(v7));
  if ((v4 & 1) != 0)
    return 1;
LABEL_11:
  if (objc_msgSend(v5, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicIsMainProgramContent((PAL *)v4)))return 2;
  else
    return 6;
}

uint64_t WebCore::AVTrackPrivateAVFObjCImpl::videoKind(WebCore::AVTrackPrivateAVFObjCImpl *this)
{
  void *v2;
  PAL *v3;
  PAL *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  PAL *v8;
  PAL *v10;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (PAL *)objc_msgSend(v2, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicDescribesVideoForAccessibility(this));
    if ((v3 & 1) == 0)
    {
      v4 = (PAL *)objc_msgSend(*((id *)this + 4), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibility(v3));
      if ((v4 & 1) == 0)
      {
        v5 = objc_msgSend(*((id *)this + 4), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicIsAuxiliaryContent(v4));
        if ((v5 & 1) == 0)
        {
          v6 = (void *)*((_QWORD *)this + 4);
          goto LABEL_14;
        }
        return 0;
      }
      return 1;
    }
    return 3;
  }
  v7 = *((_QWORD *)this + 3);
  if (!v7)
    return 6;
  v6 = *(void **)(v7 + 16);
  v8 = (PAL *)objc_msgSend(v6, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicDescribesVideoForAccessibility(this));
  if ((v8 & 1) != 0)
    return 3;
  v10 = (PAL *)objc_msgSend(v6, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibility(v8));
  if ((v10 & 1) != 0)
    return 1;
  v5 = objc_msgSend(v6, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicIsAuxiliaryContent(v10));
  if ((v5 & 1) != 0)
    return 0;
LABEL_14:
  if (objc_msgSend(v6, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicIsMainProgramContent((PAL *)v5)))return 2;
  else
    return 6;
}

PAL *WebCore::AVTrackPrivateAVFObjCImpl::label@<X0>(WebCore::AVTrackPrivateAVFObjCImpl *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  void *v6;
  PAL *v7;
  PAL *AVFoundation_AVMetadataCommonKeyTitle;
  void *v9;
  PAL *result;
  void *v11;
  void *v12;
  _DWORD *v13;
  WTF::AtomStringImpl *v14;
  const __CFString *v15;
  _DWORD *v16;

  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
    goto LABEL_4;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v4 = *(void **)(v5 + 16);
LABEL_4:
    v4 = (void *)objc_msgSend(v4, "commonMetadata");
    v6 = v4;
    goto LABEL_5;
  }
  v6 = 0;
LABEL_5:
  v7 = (PAL *)PAL::getAVMetadataItemClass[0]((PAL *)v4);
  AVFoundation_AVMetadataCommonKeyTitle = (PAL *)PAL::get_AVFoundation_AVMetadataCommonKeyTitle(v7);
  v9 = (void *)-[PAL metadataItemsFromArray:withKey:keySpace:](v7, "metadataItemsFromArray:withKey:keySpace:", v6, AVFoundation_AVMetadataCommonKeyTitle, PAL::get_AVFoundation_AVMetadataKeySpaceCommon(AVFoundation_AVMetadataCommonKeyTitle));
  result = (PAL *)objc_msgSend(v9, "count");
  if (result)
  {
    v11 = (void *)objc_msgSend((id)PAL::getAVMetadataItemClass[0](result), "metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:", v9, objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages"));
    if (objc_msgSend(v11, "count"))
      v12 = v11;
    else
      v12 = v9;
    v14 = (WTF::AtomStringImpl *)objc_msgSend((id)objc_msgSend(v12, "objectAtIndex:", 0), "stringValue");
    result = (PAL *)WTF::AtomStringImpl::add(v14, v15);
    v13 = v16;
  }
  else
  {
    v13 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
    if (*MEMORY[0x1E0CBF3B8])
      *v13 += 2;
  }
  *a2 = v13;
  return result;
}

WTF::StringImpl *WebCore::AVTrackPrivateAVFObjCImpl::language@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  WTF::StringImpl *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (WTF::StringImpl *)objc_msgSend(*((id *)this + 4), "extendedLanguageTag");
    if ((v4 || (this = (WTF::StringImpl *)objc_msgSend(v3, "languageCode"), (v4 = this) != 0))
      && (this = (WTF::StringImpl *)-[WTF::StringImpl isEqualToString:](v4, "isEqualToString:", CFSTR("und")),
          !(_DWORD)this))
    {
      this = (WTF::StringImpl *)MEMORY[0x19AEA5508](&v13, v4);
      v6 = v13;
      v13 = 0;
      if (v6)
      {
LABEL_14:
        v14 = v6;
        if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
        {
LABEL_21:
          WTF::AtomStringImpl::addSlowCase();
          v12 = v14;
          v6 = v15;
          v14 = 0;
          v15 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v5);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
LABEL_22:
        this = v13;
        *a2 = v6;
        v13 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
          else
            *(_DWORD *)this -= 2;
        }
        return this;
      }
    }
    else
    {
      v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *(_DWORD *)v6 += 2;
        v13 = 0;
        goto LABEL_14;
      }
    }
LABEL_29:
    *a2 = 0;
    return this;
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *(void **)(v7 + 16);
    v9 = (WTF::StringImpl *)objc_msgSend(v8, "extendedLanguageTag");
    if ((v9
       || (v10 = (void *)objc_msgSend(v8, "locale"),
           this = (WTF::StringImpl *)objc_msgSend(v10, "objectForKey:", *MEMORY[0x1E0C997E8]),
           (v9 = this) != 0))
      && (this = (WTF::StringImpl *)-[WTF::StringImpl isEqualToString:](v9, "isEqualToString:", CFSTR("und")),
          !(_DWORD)this))
    {
      this = (WTF::StringImpl *)MEMORY[0x19AEA5508](&v13, v9);
      v6 = v13;
      v13 = 0;
      if (!v6)
        goto LABEL_29;
    }
    else
    {
      v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (!*MEMORY[0x1E0CBF738])
        goto LABEL_29;
      *(_DWORD *)v6 += 2;
      v13 = 0;
    }
    v14 = v6;
    if ((*((_BYTE *)v6 + 16) & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_22;
  }
  v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *(_DWORD *)v11 += 2;
  *a2 = v11;
  return this;
}

void sub_19468C2B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *WebCore::AVTrackPrivateAVFObjCImpl::languageForAVAssetTrack@<X0>(WebCore::AVTrackPrivateAVFObjCImpl *this@<X0>, _QWORD *a2@<X8>)
{
  void *v5;
  void *result;
  _DWORD *v7;

  v5 = (void *)-[WebCore::AVTrackPrivateAVFObjCImpl extendedLanguageTag](this, "extendedLanguageTag");
  if (v5
    || (result = (void *)-[WebCore::AVTrackPrivateAVFObjCImpl languageCode](this, "languageCode"), (v5 = result) != 0))
  {
    result = (void *)objc_msgSend(v5, "isEqualToString:", CFSTR("und"));
    if (!(_DWORD)result)
      JUMPOUT(0x19AEA5508);
  }
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v7 += 2;
  *a2 = v7;
  return result;
}

id *WebCore::AVTrackPrivateAVFObjCImpl::videoTrackConfiguration@<X0>(WebCore::AVTrackPrivateAVFObjCImpl *this@<X0>, uint64_t a2@<X8>)
{
  WebCore *v4;
  const opaqueCMFormatDescription *v5;
  void *v6;
  void *v7;
  double v8;
  unsigned int v9;
  id *v10;
  void *v11;
  void *v12;
  double v13;
  unsigned int v14;
  id *v15;
  WebCore *v16;
  const opaqueCMFormatDescription *v17;
  const __CFString *v18;
  PAL *v19;
  char v20;
  char v21;
  PAL *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  double v26;
  float v27;
  id *v28;
  void *v29;
  id *result;
  id *v31;
  int v32;
  float v33;
  unint64_t v34;
  WebCore *v35;

  WebCore::formatDescriptionFor((WebCore *)&v35, this);
  v4 = v35;
  WebCore::codecFromFormatDescription((uint64_t *)v35, v5, (WTF::StringImpl **)a2);
  if (v4)
    CFRelease(v4);
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6 && objc_msgSend(v6, "assetTrack"))
  {
    v7 = (void *)objc_msgSend(*((id *)this + 1), "assetTrack");
  }
  else
  {
    v7 = (void *)*((_QWORD *)this + 4);
    if (v7)
      goto LABEL_9;
    v10 = (id *)*((_QWORD *)this + 3);
    if (!v10 || !WebCore::MediaSelectionOptionAVFObjC::assetTrack(v10))
      goto LABEL_13;
    v7 = (void *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(*((id **)this + 3));
  }
  if (!v7)
  {
LABEL_13:
    v9 = 0;
    goto LABEL_14;
  }
LABEL_9:
  objc_msgSend(v7, "naturalSize");
  v9 = v8;
LABEL_14:
  *(_DWORD *)(a2 + 8) = v9;
  v11 = (void *)*((_QWORD *)this + 1);
  if (v11 && objc_msgSend(v11, "assetTrack"))
  {
    v12 = (void *)objc_msgSend(*((id *)this + 1), "assetTrack");
  }
  else
  {
    v12 = (void *)*((_QWORD *)this + 4);
    if (v12)
      goto LABEL_20;
    v15 = (id *)*((_QWORD *)this + 3);
    if (!v15 || !WebCore::MediaSelectionOptionAVFObjC::assetTrack(v15))
      goto LABEL_24;
    v12 = (void *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(*((id **)this + 3));
  }
  if (v12)
  {
LABEL_20:
    objc_msgSend(v12, "naturalSize");
    v14 = v13;
    goto LABEL_25;
  }
LABEL_24:
  v14 = 0;
LABEL_25:
  *(_DWORD *)(a2 + 12) = v14;
  WebCore::formatDescriptionFor((WebCore *)&v35, this);
  v16 = v35;
  v19 = WebCore::colorSpaceFromFormatDescription(v35, v17, v18);
  v21 = v20;
  if (v16)
    CFRelease(v16);
  if (v21)
    v22 = v19;
  else
    v22 = 0;
  *(_QWORD *)(a2 + 16) = v22;
  v23 = (void *)*((_QWORD *)this + 1);
  if (v23 && objc_msgSend(v23, "assetTrack"))
  {
    v24 = objc_msgSend(*((id *)this + 1), "assetTrack");
LABEL_33:
    v25 = (void *)v24;
    if (!v24)
    {
      v26 = 0.0;
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  v25 = (void *)*((_QWORD *)this + 4);
  if (!v25)
  {
    v28 = (id *)*((_QWORD *)this + 3);
    v26 = 0.0;
    if (!v28 || !WebCore::MediaSelectionOptionAVFObjC::assetTrack(v28))
      goto LABEL_41;
    v24 = WebCore::MediaSelectionOptionAVFObjC::assetTrack(*((id **)this + 3));
    goto LABEL_33;
  }
LABEL_36:
  v26 = 0.0;
  if (objc_msgSend(v25, "statusOfValueForKey:error:", CFSTR("nominalFrameRate"), 0) == 2)
  {
    objc_msgSend(v25, "nominalFrameRate");
    v26 = v27;
  }
LABEL_41:
  *(double *)(a2 + 24) = v26;
  v29 = (void *)*((_QWORD *)this + 1);
  if (v29 && objc_msgSend(v29, "assetTrack"))
  {
    result = (id *)objc_msgSend(*((id *)this + 1), "assetTrack");
  }
  else
  {
    v31 = (id *)*((_QWORD *)this + 4);
    if (v31)
      goto LABEL_47;
    result = (id *)*((_QWORD *)this + 3);
    if (!result)
      goto LABEL_53;
    result = (id *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(result);
    if (!result)
      goto LABEL_53;
    result = (id *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(*((id **)this + 3));
  }
  v31 = result;
  if (!result)
  {
LABEL_53:
    v34 = 0;
    goto LABEL_54;
  }
LABEL_47:
  result = (id *)objc_msgSend(v31, "statusOfValueForKey:error:", CFSTR("estimatedDataRate"), 0);
  if (result != (id *)2)
    goto LABEL_53;
  result = (id *)objc_msgSend(v31, "estimatedDataRate");
  if ((v32 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_53;
  result = (id *)objc_msgSend(v31, "estimatedDataRate");
  v34 = (unint64_t)v33;
LABEL_54:
  *(_QWORD *)(a2 + 32) = v34;
  return result;
}

void sub_19468C610(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  const void *v3;
  WTF::StringImpl *v5;

  if (v3)
    CFRelease(v3);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

id *WebCore::AVTrackPrivateAVFObjCImpl::audioTrackConfiguration@<X0>(WebCore::AVTrackPrivateAVFObjCImpl *this@<X0>, uint64_t a2@<X8>)
{
  WebCore *v4;
  const opaqueCMFormatDescription *v5;
  const opaqueCMFormatDescription *v6;
  WebCore *v7;
  double *v8;
  unsigned int v9;
  const opaqueCMFormatDescription *v10;
  WebCore *v11;
  uint64_t v12;
  int v13;
  void *v14;
  id *result;
  id *v16;
  int v17;
  float v18;
  unint64_t v19;
  WebCore *v20;

  WebCore::formatDescriptionFor((WebCore *)&v20, this);
  v4 = v20;
  WebCore::codecFromFormatDescription((uint64_t *)v20, v5, (WTF::StringImpl **)a2);
  if (v4)
    CFRelease(v4);
  WebCore::formatDescriptionFor((WebCore *)&v20, this);
  v7 = v20;
  if (v20)
  {
    v8 = (double *)PAL::softLinkCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription[0](v20, v6);
    if (v8)
      v9 = *v8;
    else
      v9 = 0;
    CFRelease(v7);
  }
  else
  {
    v9 = 0;
  }
  *(_DWORD *)(a2 + 8) = v9;
  WebCore::formatDescriptionFor((WebCore *)&v20, this);
  v11 = v20;
  if (v20)
  {
    v12 = PAL::softLinkCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription[0](v20, v10);
    if (v12)
      v13 = *(_DWORD *)(v12 + 28);
    else
      v13 = 0;
    CFRelease(v11);
  }
  else
  {
    v13 = 0;
  }
  *(_DWORD *)(a2 + 12) = v13;
  v14 = (void *)*((_QWORD *)this + 1);
  if (v14 && objc_msgSend(v14, "assetTrack"))
  {
    result = (id *)objc_msgSend(*((id *)this + 1), "assetTrack");
  }
  else
  {
    v16 = (id *)*((_QWORD *)this + 4);
    if (v16)
      goto LABEL_21;
    result = (id *)*((_QWORD *)this + 3);
    if (!result)
      goto LABEL_27;
    result = (id *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(result);
    if (!result)
      goto LABEL_27;
    result = (id *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(*((id **)this + 3));
  }
  v16 = result;
  if (!result)
  {
LABEL_27:
    v19 = 0;
    goto LABEL_28;
  }
LABEL_21:
  result = (id *)objc_msgSend(v16, "statusOfValueForKey:error:", CFSTR("estimatedDataRate"), 0);
  if (result != (id *)2)
    goto LABEL_27;
  result = (id *)objc_msgSend(v16, "estimatedDataRate");
  if ((v17 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_27;
  result = (id *)objc_msgSend(v16, "estimatedDataRate");
  v19 = (unint64_t)v18;
LABEL_28:
  *(_QWORD *)(a2 + 16) = v19;
  return result;
}

void sub_19468C7F4(_Unwind_Exception *a1)
{
  WTF::StringImpl **v1;
  const void *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  CFRelease(v2);
  v5 = *v1;
  *v1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(a1);
}

id *WebCore::formatDescriptionFor(WebCore *this, const WebCore::AVTrackPrivateAVFObjCImpl *a2)
{
  void *v4;
  id *result;
  id *v6;

  v4 = (void *)*((_QWORD *)a2 + 1);
  if (v4 && objc_msgSend(v4, "assetTrack"))
  {
    result = (id *)objc_msgSend(*((id *)a2 + 1), "assetTrack");
  }
  else
  {
    v6 = (id *)*((_QWORD *)a2 + 4);
    if (v6)
      goto LABEL_7;
    result = (id *)*((_QWORD *)a2 + 3);
    if (!result)
      goto LABEL_13;
    result = (id *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(result);
    if (!result)
      goto LABEL_13;
    result = (id *)WebCore::MediaSelectionOptionAVFObjC::assetTrack(*((id **)a2 + 3));
  }
  v6 = result;
  if (!result)
    goto LABEL_13;
LABEL_7:
  result = (id *)objc_msgSend(v6, "statusOfValueForKey:error:", CFSTR("formatDescriptions"), 0);
  if (result != (id *)2)
  {
LABEL_13:
    *(_QWORD *)this = 0;
    return result;
  }
  result = (id *)objc_msgSend((id)objc_msgSend(v6, "formatDescriptions"), "firstObject");
  *(_QWORD *)this = result;
  if (result)
    return (id *)CFRetain(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E31F6E98;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E31F6E98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVTrackPrivateAVFObjCImpl::initializeAssetTrack(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 48);
      if (!v3
        || (v4 = *(_QWORD *)(v3 + 8)) == 0
        || (v5 = result,
            result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8)),
            (v6 = *(_QWORD *)(v5 + 8)) != 0)
        && (v2 = *(_QWORD *)(v6 + 8)) != 0)
      {
        v7 = *(_QWORD *)(v2 + 40);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
            return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8));
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::AVVideoCaptureSource::create@<X0>(PAL *a1@<X0>, uint64_t *a2@<X1>, const WebCore::MediaConstraints *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  WebCore::RealtimeMediaSource *v14;
  uint64_t v15;
  PAL *inited;
  PAL *v17;
  double v18;
  uint64_t result;
  uint64_t v20;
  unint64_t StatusReg;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  WTF::StringImpl *v28;
  __int16 v29;
  WTF::StringImpl *v30;
  _BOOL4 v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;

  v10 = (void *)PAL::getAVCaptureDeviceClass[0](a1);
  if (*(_QWORD *)a1)
    v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v11 = &stru_1E3487BC0;
  v12 = objc_msgSend(v10, "deviceWithUniqueID:", v11);
  if (!v12)
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v20 = v32;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = v20;
    *(_WORD *)(a5 + 16) = 6;
    return result;
  }
  v13 = (void *)v12;
  v14 = (WebCore::RealtimeMediaSource *)WTF::fastMalloc((WTF *)0x518);
  WebCore::RealtimeMediaSource::RealtimeMediaSource((uint64_t)v14, (uint64_t)a1, a2, a4);
  v15 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v15 = 0;
  *(_OWORD *)(v15 + 8) = xmmword_19689B170;
  *(_QWORD *)(v15 + 24) = v14;
  *((_QWORD *)v14 + 38) = v15;
  *((_BYTE *)v14 + 312) = 0;
  *((_BYTE *)v14 + 368) = 0;
  *(_OWORD *)((char *)v14 + 417) = 0u;
  *(_OWORD *)((char *)v14 + 392) = 0u;
  *(_OWORD *)((char *)v14 + 408) = 0u;
  *(_OWORD *)((char *)v14 + 376) = 0u;
  *(_QWORD *)v14 = off_1E31F6EC0;
  *((_QWORD *)v14 + 55) = &unk_1E31F70A0;
  *((_QWORD *)v14 + 56) = 0;
  *((_BYTE *)v14 + 488) = 0;
  *((_BYTE *)v14 + 592) = 0;
  *((_BYTE *)v14 + 600) = 0;
  *((_BYTE *)v14 + 792) = 0;
  *((_BYTE *)v14 + 800) = 0;
  *((_BYTE *)v14 + 944) = 0;
  *((_QWORD *)v14 + 58) = 0;
  *((_QWORD *)v14 + 59) = 0;
  *((_QWORD *)v14 + 57) = 0;
  *((_WORD *)v14 + 240) = 0;
  *((_QWORD *)v14 + 119) = -[WebCoreAVVideoCaptureSourceObserver initWithCaptureSource:]([WebCoreAVVideoCaptureSourceObserver alloc], "initWithCaptureSource:", v14);
  *((_QWORD *)v14 + 120) = 0;
  *((_QWORD *)v14 + 121) = v13;
  CFRetain(v13);
  *((_BYTE *)v14 + 1000) = 0;
  *((_BYTE *)v14 + 1056) = 0;
  *((_BYTE *)v14 + 1064) = 0;
  *((_BYTE *)v14 + 1120) = 0;
  *((_QWORD *)v14 + 141) = 0;
  *((_OWORD *)v14 + 61) = 0u;
  *((_BYTE *)v14 + 992) = 0;
  *((_QWORD *)v14 + 142) = 0x3FF0000000000000;
  inited = (PAL *)objc_msgSend(v13, "deviceType");
  v17 = inited;
  {
    if (!PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(void)::loaded)
      goto LABEL_7;
  }
  else
  {
    inited = (PAL *)PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(inited);
    PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(void)::loaded = (char)inited;
    if (!(_DWORD)inited)
      goto LABEL_7;
  }
  if ((PAL *)PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInTripleCamera == v17)
  {
    v18 = 2.0;
    goto LABEL_15;
  }
LABEL_7:
  {
    if (PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(void)::loaded)
      goto LABEL_9;
    v18 = 1.0;
  }
  else
  {
    v31 = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(inited);
    PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(void)::loaded = v31;
    v18 = 1.0;
    if (v31)
    {
LABEL_9:
      v18 = 1.0;
      if ((PAL *)PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInDualWideCamera == v17)
        v18 = 2.0;
    }
  }
LABEL_15:
  *((double *)v14 + 143) = v18;
  *((_QWORD *)v14 + 144) = 0;
  *(_QWORD *)((char *)v14 + 1158) = 0;
  *((_QWORD *)v14 + 146) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)v14 + 1176) = 0u;
  *(_OWORD *)((char *)v14 + 1192) = 0u;
  v22 = *(unsigned int **)(StatusReg + 736);
  if (!v22)
    v22 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *((_QWORD *)v14 + 151) = v22;
  *((_QWORD *)v14 + 146) = off_1E31F7378;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v24 = off_1E31F7138;
  v24[1] = WebCore::AVVideoCaptureSource::startupTimerFired;
  v24[2] = 0;
  v24[3] = v14;
  *((_QWORD *)v14 + 152) = v24;
  *((_QWORD *)v14 + 153) = off_1E3407128;
  *((_OWORD *)v14 + 77) = 0u;
  *((_OWORD *)v14 + 78) = 0u;
  v25 = *(unsigned int **)(StatusReg + 736);
  if (!v25)
    v25 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  *((_QWORD *)v14 + 158) = v25;
  *((_QWORD *)v14 + 153) = off_1E31F7378;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v27 = off_1E31F7138;
  v27[1] = WebCore::AVVideoCaptureSource::verifyIsCapturing;
  v27[2] = 0;
  v27[3] = v14;
  *((_QWORD *)v14 + 159) = v27;
  *((_OWORD *)v14 + 80) = 0u;
  *((_QWORD *)v14 + 162) = objc_msgSend(*((id *)v14 + 121), "torchMode");
  result = objc_msgSend(*((id *)v14 + 121), "addObserver:forKeyPath:options:context:", *((_QWORD *)v14 + 119), CFSTR("suspended"), 1, 0);
  if (a3 && (result = WebCore::RealtimeMediaSource::applyConstraints(v14, a3, &v32), v34))
  {
    v29 = (v32 << 8) | 4;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_WORD *)(a5 + 16) = v29;
    v30 = v33;
    v33 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    return (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)v14 + 144))(v14);
  }
  else
  {
    *(_QWORD *)a5 = v14;
    *(_QWORD *)(a5 + 8) = 0;
    *(_WORD *)(a5 + 16) = 0;
  }
  return result;
}

void sub_19468CDFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::AVVideoCaptureSource::startupTimerFired(unsigned __int8 *this)
{
  int v1;

  v1 = this[1165];
  this[1165] = 0;
  if (v1)
    return WebCore::RealtimeMediaSource::notifyMutedChange(this, this[1161] == 0);
  return this;
}

uint64_t WebCore::AVVideoCaptureSource::verifyIsCapturing(uint64_t this)
{
  double *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v1 = (double *)this;
  v6 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(this + 1280);
  if (*(_QWORD *)(this + 1288) == v2)
  {
    v3 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      v4 = (int)v1[156];
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_error_impl(&dword_1940B8000, v3, OS_LOG_TYPE_ERROR, "AVVideoCaptureSource::verifyIsCapturing - no frame received in %d seconds, failing", (uint8_t *)v5, 8u);
    }
    return (*(uint64_t (**)(double *))(*(_QWORD *)v1 + 240))(v1);
  }
  else
  {
    *(_QWORD *)(this + 1288) = v2;
  }
  return this;
}

void WebCore::AVVideoCaptureSource::~AVVideoCaptureSource(WebCore::AVVideoCaptureSource *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  WTF *v14;
  const void *v15;
  WTF *v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  const void *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char **v38;
  size_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;

  *(_QWORD *)this = off_1E31F6EC0;
  v2 = (char *)this + 440;
  *((_QWORD *)this + 55) = &unk_1E31F70A0;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *((_QWORD *)this + 6);
    v40 = "AVVideoCaptureSource";
    v41 = 21;
    v42 = "~AVVideoCaptureSource";
    v43 = v4;
    if (*(_BYTE *)(v3 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v40);
  }
  objc_msgSend(*((id *)this + 119), "disconnect", v40, v41, v42, v43);
  objc_msgSend(*((id *)this + 121), "removeObserver:forKeyPath:", *((_QWORD *)this + 119), CFSTR("suspended"));
  if (*((_QWORD *)this + 120))
  {
    WebCore::AVVideoCaptureSource::stopSession((id *)this);
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      v6 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
      v7 = *((_QWORD *)this + 6);
      v40 = (const char *)v6;
      v41 = v8;
      v42 = "clearSession";
      v43 = v7;
      if (*(_BYTE *)(v5 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v40);
    }
    objc_msgSend(*((id *)this + 120), "removeObserver:forKeyPath:", *((_QWORD *)this + 119), CFSTR("running"), v40, v41, v42, v43);
    v9 = (const void *)*((_QWORD *)this + 120);
    *((_QWORD *)this + 120) = 0;
    if (v9)
      CFRelease(v9);
  }
  *((_QWORD *)this + 153) = off_1E31F7378;
  v10 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::TimerBase::~TimerBase((WebCore::AVVideoCaptureSource *)((char *)this + 1224));
  *((_QWORD *)this + 146) = off_1E31F7378;
  v11 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::TimerBase::~TimerBase((WebCore::AVVideoCaptureSource *)((char *)this + 1168));
  if (*((_BYTE *)this + 1120))
  {
    v13 = (const void *)*((_QWORD *)this + 139);
    *((_QWORD *)this + 139) = 0;
    if (v13)
      CFRelease(v13);
    v14 = (WTF *)*((_QWORD *)this + 134);
    if (v14)
    {
      *((_QWORD *)this + 134) = 0;
      *((_DWORD *)this + 270) = 0;
      WTF::fastFree(v14, v12);
    }
  }
  if (*((_BYTE *)this + 1056))
  {
    v15 = (const void *)*((_QWORD *)this + 131);
    *((_QWORD *)this + 131) = 0;
    if (v15)
      CFRelease(v15);
    v16 = (WTF *)*((_QWORD *)this + 126);
    if (v16)
    {
      *((_QWORD *)this + 126) = 0;
      *((_DWORD *)this + 254) = 0;
      WTF::fastFree(v16, v12);
    }
  }
  v17 = (uint64_t *)*((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v17)
  {
    if (*v17)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v17);
      v18 = (unsigned int *)*v17;
      *v17 = 0;
      if (v18)
      {
        v19 = v18 + 2;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v18 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        }
      }
    }
    else
    {
      *v17 = 0;
    }
    WTF::fastFree((WTF *)v17, v12);
  }
  v22 = (const void *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v22)
    CFRelease(v22);
  v23 = (const void *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v23)
    CFRelease(v23);
  v24 = (const void *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v24)
    CFRelease(v24);
  v25 = (const void *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v25)
    CFRelease(v25);
  if (*((_BYTE *)this + 944))
  {
    if (*((_BYTE *)this + 936))
    {
      v26 = (WTF *)*((_QWORD *)this + 115);
      if (v26)
      {
        *((_QWORD *)this + 115) = 0;
        *((_DWORD *)this + 232) = 0;
        WTF::fastFree(v26, v12);
      }
    }
  }
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceCapabilities,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 600, v12);
  if (*((_BYTE *)this + 592))
  {
    v28 = (WTF::StringImpl *)*((_QWORD *)this + 68);
    *((_QWORD *)this + 68) = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = (WTF::StringImpl *)*((_QWORD *)this + 67);
    *((_QWORD *)this + 67) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v27);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = (WTF::StringImpl *)*((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v27);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v31 = (const void *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v31)
    CFRelease(v31);
  v32 = (unsigned int *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  *((_QWORD *)this + 55) = off_1E31F70C8;
  v36 = *((_QWORD *)this + 56);
  if (v36)
  {
    v37 = *(unsigned int *)(v36 + 20);
    if ((_DWORD)v37)
    {
      v38 = *(char ***)(v36 + 8);
      v39 = 8 * v37 - 8;
      while (*v38 != v2)
      {
        ++v38;
        v39 -= 8;
        if (v39 == -8)
          goto LABEL_69;
      }
      *((_QWORD *)this + 56) = 0;
      memmove(v38, v38 + 1, v39);
      --*(_DWORD *)(v36 + 20);
    }
  }
LABEL_69:
  WebCore::RealtimeVideoCaptureSource::~RealtimeVideoCaptureSource(this, v27);
}

{
  WTF *v1;
  void *v2;

  WebCore::AVVideoCaptureSource::~AVVideoCaptureSource(this);
  WTF::fastFree(v1, v2);
}

void sub_19468D650(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::RealtimeMediaSource::logger(WebCore::RealtimeMediaSource *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebCore::RealtimeMediaSource::logIdentifier(WebCore::RealtimeMediaSource *this)
{
  return *((_QWORD *)this + 6);
}

WTF::StringImpl *WebCore::AVVideoCaptureSource::stopSession(id *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6[12];

  v6[10] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  objc_msgSend(this[120], "stopRunning");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::AVVideoCaptureSource::rejectPendingPhotoRequest((unsigned __int8 *)this, (const WTF::String *)v6, v2, v3);
  result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19468DA4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31)
{
  if (a31)
  {
    if (*(_DWORD *)a31 == 2)
      WTF::StringImpl::destroy(a31, a2);
    else
      *(_DWORD *)a31 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_19468DA84(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, const char *a18, uint64_t a19, WTF::Logger *a20,uint64_t a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,__int128 buf,int a32,WTF::StringImpl *a33,int a34,WTF::StringImpl *a35,int a36,WTF::StringImpl *a37,int a38,WTF::StringImpl *a39)
{
  _QWORD *v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  NSObject *v52;
  uint64_t v53;
  void *v54;
  char *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  WTF::Logger *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF *v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  void *v82;
  char *v83;

  if (a2 == 1)
  {
    v40 = objc_begin_catch(exc_buf);
    v41 = v39[5];
    if (!v41)
      goto LABEL_87;
    v42 = v40;
    v43 = (*(uint64_t (**)(_QWORD *))(*v39 + 24))(v39);
    v44 = v39[6];
    a16 = v43;
    a17 = v45;
    a18 = "stopSession";
    a19 = v44;
    v83 = (char *)objc_msgSend((id)objc_msgSend(v42, "name"), "UTF8String");
    v82 = (void *)objc_msgSend(v42, "reason");
    if (!*(_BYTE *)(v41 + 12))
      goto LABEL_87;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&a16);
    WTF::String::String((WTF::String *)&a25, "error calling -stopRunning ");
    WTF::String::String((WTF::String *)&a24, v83);
    WTF::String::String((WTF::String *)&a23, ", reason : ");
    MEMORY[0x19AEA5508](&a22, objc_msgSend(v82, "description"));
    a20 = a25;
    a30 = a24;
    *(_QWORD *)&buf = a26;
    a28 = a22;
    a29 = a23;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&a20, (uint64_t *)&a30, (uint64_t *)&a29, (uint64_t *)&a28, &a27);
    if (a27)
    {
      v47 = a22;
      a22 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v46);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = a23;
      a23 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v46);
        else
          *(_DWORD *)v48 -= 2;
      }
      v49 = a24;
      a24 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v46);
        else
          *(_DWORD *)v49 -= 2;
      }
      v50 = a25;
      a25 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v46);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = a26;
      a26 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v46);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = qword_1ECE7CD60;
      v53 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v53)
      {
        WTF::String::utf8();
        v55 = a20 ? (char *)a20 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v55;
        _os_log_impl(&dword_1940B8000, v52, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v53 = (uint64_t)a20;
        a20 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 1)
            v53 = WTF::fastFree((WTF *)v53, v54);
          else
            --*(_DWORD *)v53;
        }
      }
      if (!WebCore::LogWebRTC || !byte_1ECE7CD50)
        goto LABEL_84;
      v56 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      do
      {
        while (1)
        {
          v57 = *v56;
          if ((v57 & 1) != 0)
            goto LABEL_84;
          v58 = __ldaxr(v56);
          if (v58 == v57)
            break;
          __clrex();
        }
      }
      while (__stxr(v57 | 1, v56));
      v59 = WTF::Logger::observers((WTF::Logger *)v53);
      v60 = *(unsigned int *)(v59 + 12);
      if ((_DWORD)v60)
      {
        v61 = *(uint64_t **)v59;
        v81 = *(_QWORD *)v59 + 8 * v60;
        do
        {
          v62 = *v61;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&a16);
          a32 = 0;
          WTF::String::String((WTF::String *)&a33, "error calling -stopRunning ");
          a34 = 0;
          WTF::String::String((WTF::String *)&a35, v83);
          a36 = 0;
          WTF::String::String((WTF::String *)&a37, ", reason : ");
          a38 = 0;
          MEMORY[0x19AEA5508](&a39, objc_msgSend(v82, "description"));
          a20 = 0;
          a21 = 0;
          v63 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
          LODWORD(a21) = 5;
          a20 = v63;
          v64 = HIDWORD(a21);
          *((_DWORD *)v63 + 4 * HIDWORD(a21)) = buf;
          v65 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *((_QWORD *)v63 + 2 * v64 + 1) = v65;
          *((_DWORD *)v63 + 4 * (v64 + 1)) = a32;
          v66 = a33;
          if (a33)
            *(_DWORD *)a33 += 2;
          *((_QWORD *)v63 + 2 * (v64 + 1) + 1) = v66;
          *((_DWORD *)v63 + 4 * (v64 + 2)) = a34;
          v67 = a35;
          if (a35)
            *(_DWORD *)a35 += 2;
          *((_QWORD *)v63 + 2 * (v64 + 2) + 1) = v67;
          *((_DWORD *)v63 + 4 * (v64 + 3)) = a36;
          v68 = a37;
          if (a37)
            *(_DWORD *)a37 += 2;
          *((_QWORD *)v63 + 2 * (v64 + 3) + 1) = v68;
          *((_DWORD *)v63 + 4 * (v64 + 4)) = a38;
          v69 = a39;
          if (a39)
            *(_DWORD *)a39 += 2;
          *((_QWORD *)v63 + 2 * (v64 + 4) + 1) = v69;
          HIDWORD(a21) = v64 + 5;
          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v62 + 16))(v62, &WebCore::LogWebRTC, 1, &a20);
          v70 = a20;
          if (HIDWORD(a21))
          {
            v71 = 16 * HIDWORD(a21);
            v72 = (WTF::StringImpl **)((char *)a20 + 8);
            do
            {
              v73 = *v72;
              *v72 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                  WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v54);
                else
                  *(_DWORD *)v73 -= 2;
              }
              v72 += 2;
              v71 -= 16;
            }
            while (v71);
            v70 = a20;
          }
          if (v70)
          {
            a20 = 0;
            LODWORD(a21) = 0;
            WTF::fastFree(v70, v54);
          }
          v74 = a39;
          a39 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v54);
            else
              *(_DWORD *)v74 -= 2;
          }
          v75 = a37;
          a37 = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
              WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v54);
            else
              *(_DWORD *)v75 -= 2;
          }
          v76 = a35;
          a35 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
              WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v54);
            else
              *(_DWORD *)v76 -= 2;
          }
          v77 = a33;
          a33 = 0;
          if (v77)
          {
            if (*(_DWORD *)v77 == 2)
              WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v54);
            else
              *(_DWORD *)v77 -= 2;
          }
          v78 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v54);
            else
              *(_DWORD *)v78 -= 2;
          }
          ++v61;
        }
        while (v61 != (uint64_t *)v81);
      }
      v79 = __ldxr(v56);
      if (v79 == 1)
      {
        if (!__stlxr(0, v56))
        {
LABEL_84:
          v80 = a27;
          a27 = 0;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
              WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v54);
            else
              *(_DWORD *)v80 -= 2;
          }
LABEL_87:
          objc_end_catch();
          JUMPOUT(0x19468D9CCLL);
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
      goto LABEL_84;
    }
    __break(0xC471u);
  }
  JUMPOUT(0x19468DA7CLL);
}

void sub_19468E04C(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF *a20,int a21,int a22,WTF::StringImpl *a23,WTF::StringImpl *a24,WTF::StringImpl *a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41)
{
  unsigned __int8 *v41;
  int v42;

  v42 = __ldxr(v41);
  if (v42 == 1)
  {
    if (!__stlxr(0, v41))
    {
LABEL_6:
      if (a28)
      {
        if (*(_DWORD *)a28 == 2)
          WTF::StringImpl::destroy(a28, a2);
        else
          *(_DWORD *)a28 -= 2;
      }
      objc_end_catch();
      JUMPOUT(0x19468DA7CLL);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void `non-virtual thunk to'WebCore::AVVideoCaptureSource::~AVVideoCaptureSource(WebCore::AVVideoCaptureSource *this)
{
  WebCore::AVVideoCaptureSource::~AVVideoCaptureSource((WebCore::AVVideoCaptureSource *)((char *)this - 440));
}

{
  WTF *v1;
  void *v2;

  WebCore::AVVideoCaptureSource::~AVVideoCaptureSource((WebCore::AVVideoCaptureSource *)((char *)this - 440));
  WTF::fastFree(v1, v2);
}

void WebCore::AVVideoCaptureSource::startProducingData(WebCore::AVVideoCaptureSource *this, AVCaptureSession *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  PAL *v8;
  id v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  void *v37;
  PAL *v38;
  PAL *v39;
  uint64_t v40;
  const void *v41;
  PAL *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  const void *v46;
  void *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  const void *v53;
  uint64_t v54;
  WTF::Logger *v55;
  WTF::StringImpl *v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  PAL *v65;
  uint64_t v66;
  const void *v67;
  id v68;
  uint64_t v69;
  const void *v70;
  void *v71;
  uint64_t v72;
  char v73;
  double *inited;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  NSObject *v91;
  uint64_t v92;
  char *v93;
  unsigned __int8 *v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  WTF::MonotonicTime *v128;
  double v129;
  void *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  BOOL v136;
  int v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  id v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::Logger *v147;
  WTF::StringImpl *v148[3];
  __int128 buf;
  const char *v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153[3];

  v153[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 120);
  if (v3)
    goto LABEL_219;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v3 = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *(_QWORD *)&buf = v3;
    *((_QWORD *)&buf + 1) = a2;
    v150 = "setupSession";
    v151 = v5;
    if (*(_BYTE *)(v4 + 12))
      v3 = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  }
  {
    v3 = WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  v6 = (WTF::StringImpl *)qword_1ECE91240;
  if (!qword_1ECE91240)
  {
    v7 = *((_QWORD *)this + 5);
    if (!v7)
      goto LABEL_72;
LABEL_15:
    if (!*(_BYTE *)(v7 + 12))
      goto LABEL_71;
    if (!WebCore::LogWebRTC || byte_1ECE7CD50 < 2u)
      goto LABEL_71;
    WTF::String::String((WTF::String *)&v146, "Media environment is empty");
    if (v146)
    {
      v13 = *((unsigned int *)v146 + 1);
      if ((v13 & 0x80000000) != 0)
        goto LABEL_271;
      v14 = (*((unsigned __int8 *)v146 + 16) >> 2) & 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>>(v13, v14, (uint64_t)v146, &buf);
    v141 = (WTF::StringImpl *)buf;
    if ((_QWORD)buf)
    {
      v16 = v146;
      v146 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = qword_1ECE7CD60;
      v18 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v18)
      {
        WTF::String::utf8();
        v19 = v147 ? (char *)v147 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v19;
        _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v18 = (uint64_t)v147;
        v147 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 1)
            v18 = WTF::fastFree((WTF *)v18, a2);
          else
            --*(_DWORD *)v18;
        }
      }
      if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 2u)
      {
        v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v21 = *v20;
          if ((v21 & 1) != 0)
            break;
          v22 = __ldaxr(v20);
          if (v22 == v21)
          {
            if (!__stxr(v21 | 1, v20))
            {
              v138 = v6;
              v23 = WTF::Logger::observers((WTF::Logger *)v18);
              v24 = *(unsigned int *)(v23 + 12);
              if ((_DWORD)v24)
              {
                v25 = *(uint64_t **)v23;
                v26 = *(_QWORD *)v23 + 8 * v24;
                do
                {
                  v27 = *v25;
                  LODWORD(v147) = 0;
                  WTF::String::String((WTF::String *)v148, "Media environment is empty");
                  buf = 0uLL;
                  v28 = WTF::fastMalloc((WTF *)0x10);
                  DWORD2(buf) = 1;
                  *(_QWORD *)&buf = v28;
                  v29 = HIDWORD(buf);
                  *(_DWORD *)(v28 + 16 * HIDWORD(buf)) = (_DWORD)v147;
                  v30 = v148[0];
                  if (v148[0])
                    *(_DWORD *)v148[0] += 2;
                  *(_QWORD *)(v28 + 16 * v29 + 8) = v30;
                  HIDWORD(buf) = v29 + 1;
                  (*(void (**)(uint64_t, char *, uint64_t, __int128 *))(*(_QWORD *)v27 + 16))(v27, &WebCore::LogWebRTC, 2, &buf);
                  v31 = (WTF *)buf;
                  if (HIDWORD(buf))
                  {
                    v32 = 16 * HIDWORD(buf);
                    v33 = (WTF::StringImpl **)(buf + 8);
                    do
                    {
                      v34 = *v33;
                      *v33 = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v34 -= 2;
                      }
                      v33 += 2;
                      v32 -= 16;
                    }
                    while (v32);
                    v31 = (WTF *)buf;
                  }
                  if (v31)
                  {
                    *(_QWORD *)&buf = 0;
                    DWORD2(buf) = 0;
                    WTF::fastFree(v31, a2);
                  }
                  v35 = v148[0];
                  v148[0] = 0;
                  if (v35)
                  {
                    if (*(_DWORD *)v35 == 2)
                      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v35 -= 2;
                  }
                  ++v25;
                }
                while (v25 != (uint64_t *)v26);
              }
              v36 = __ldxr(v20);
              if (v36 == 1)
              {
                v6 = v138;
                if (!__stlxr(0, v20))
                  break;
              }
              else
              {
                __clrex();
                v6 = v138;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v3 = v141;
      v141 = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
        {
          v3 = (WTF::StringImpl *)WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
          if (!v6)
            goto LABEL_72;
          goto LABEL_10;
        }
        *(_DWORD *)v3 -= 2;
      }
LABEL_71:
      if (!v6)
        goto LABEL_72;
      goto LABEL_10;
    }
LABEL_271:
    __break(0xC471u);
LABEL_272:
    JUMPOUT(0x19468F328);
  }
  *(_DWORD *)qword_1ECE91240 += 2;
  v7 = *((_QWORD *)this + 5);
  if (v7 && !*((_DWORD *)v6 + 1))
    goto LABEL_15;
LABEL_10:
  if (*((_DWORD *)v6 + 1))
  {
    v8 = (PAL *)objc_msgSend((id)PAL::getAVCaptureSessionClass[0](v3), "instancesRespondToSelector:", sel_initWithMediaEnvironment_);
    if ((_DWORD)v8)
    {
      v9 = objc_alloc((Class)PAL::getAVCaptureSessionClass[0](v8));
      v10 = objc_msgSend(v9, "initWithMediaEnvironment:", WTF::StringImpl::operator NSString *());
      v11 = (const void *)*((_QWORD *)this + 120);
      *((_QWORD *)this + 120) = v10;
      if (!v11)
        goto LABEL_73;
      CFRelease(v11);
    }
  }
LABEL_72:
  v10 = *((_QWORD *)this + 120);
LABEL_73:
  if (!v10)
  {
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
    }
    v37 = (void *)qword_1ECE91238;
    if (qword_1ECE91238)
    {
      v38 = (PAL *)(id)qword_1ECE91238;
      v39 = (PAL *)objc_msgSend((id)PAL::getAVCaptureSessionClass[0](v38), "instancesRespondToSelector:", sel_initWithAssumedIdentity_);
      if ((_DWORD)v39)
      {
        v40 = objc_msgSend(objc_alloc((Class)PAL::getAVCaptureSessionClass[0](v39)), "initWithAssumedIdentity:", v37);
        v41 = (const void *)*((_QWORD *)this + 120);
        *((_QWORD *)this + 120) = v40;
        if (v41)
          CFRelease(v41);
      }

    }
    else
    {
      v79 = *((_QWORD *)this + 5);
      if (v79)
      {
        v80 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
        v81 = (WTF::StringImpl *)*((_QWORD *)this + 6);
        *(_QWORD *)&buf = v80;
        *((_QWORD *)&buf + 1) = a2;
        v150 = "setupSession";
        v151 = v81;
        if (*(_BYTE *)(v79 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [53]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "RealtimeMediaSourceCenter::identity() returned null!");
      }
    }
  }
  v42 = (PAL *)*((_QWORD *)this + 120);
  if (!v42)
  {
    v43 = *((_QWORD *)this + 5);
    if (v43)
    {
      v42 = (PAL *)(*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
      v44 = (WTF::StringImpl *)*((_QWORD *)this + 6);
      *(_QWORD *)&buf = v42;
      *((_QWORD *)&buf + 1) = v45;
      v150 = "setupSession";
      v151 = v44;
      if (*(_BYTE *)(v43 + 12))
        v42 = (PAL *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [67]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "allocating AVCaptureSession without media environment nor identity");
    }
    v42 = (PAL *)objc_msgSend(objc_alloc((Class)PAL::getAVCaptureSessionClass[0](v42)), "init");
    v46 = (const void *)*((_QWORD *)this + 120);
    *((_QWORD *)this + 120) = v42;
    if (v46)
    {
      CFRelease(v46);
      v42 = (PAL *)*((_QWORD *)this + 120);
    }
    if (!v42)
    {
      v82 = *((_QWORD *)this + 5);
      if (v82)
      {
        v83 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
        v84 = (WTF::StringImpl *)*((_QWORD *)this + 6);
        *(_QWORD *)&buf = v83;
        *((_QWORD *)&buf + 1) = v85;
        v150 = "setupSession";
        v151 = v84;
        if (*(_BYTE *)(v82 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "failed to allocate AVCaptureSession");
      }
      (*(void (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 240))(this);
      goto LABEL_213;
    }
  }
  PAL::softLinkAVFoundationAVCaptureSessionSetAuthorizedToUseCameraInMultipleForegroundAppLayout(v42, a2);
  v47 = (void *)objc_msgSend(*((id *)this + 120), "addObserver:forKeyPath:options:context:", *((_QWORD *)this + 119), CFSTR("running"), 1, 0);
  v48 = *((_QWORD *)this + 5);
  if (v48)
  {
    v47 = (void *)(*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
    v49 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *(_QWORD *)&buf = v47;
    *((_QWORD *)&buf + 1) = v50;
    v150 = "setupCaptureSession";
    v151 = v49;
    if (*(_BYTE *)(v48 + 12))
      v47 = (void *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  }
  v51 = *((_QWORD *)this + 144) + 1;
  *((_QWORD *)this + 144) = v51;
  if (v51 <= 1)
  {
    v47 = (void *)*((_QWORD *)this + 120);
    if (v47)
      v47 = (void *)objc_msgSend(v47, "beginConfiguration");
  }
  v140 = 0;
  v53 = (const void *)objc_msgSend(objc_alloc((Class)PAL::getAVCaptureDeviceInputClass[0]((PAL *)v47)), "initWithDevice:error:", *((_QWORD *)this + 121), &v140);
  if (!v140)
  {
    if ((objc_msgSend(*((id *)this + 120), "canAddInput:", v53) & 1) == 0)
    {
      v76 = *((_QWORD *)this + 5);
      if (v76)
      {
        v77 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
        v78 = (WTF::StringImpl *)*((_QWORD *)this + 6);
        *(_QWORD *)&buf = v77;
        *((_QWORD *)&buf + 1) = v52;
        v150 = "setupCaptureSession";
        v151 = v78;
        if (*(_BYTE *)(v76 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "unable to add video input device");
      }
      goto LABEL_203;
    }
    v65 = (PAL *)objc_msgSend(*((id *)this + 120), "addInput:", v53);
    v66 = objc_msgSend(objc_alloc((Class)PAL::getAVCaptureVideoDataOutputClass[0](v65)), "init");
    v67 = (const void *)*((_QWORD *)this + 58);
    *((_QWORD *)this + 58) = v66;
    if (v67)
      CFRelease(v67);
    v68 = objc_alloc(MEMORY[0x1E0C99E08]);
    v69 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 875704422);
    if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
      dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
    v70 = (const void *)objc_msgSend(v68, "initWithObjectsAndKeys:", v69, WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey, 0);
    objc_msgSend(*((id *)this + 58), "setVideoSettings:", v70);
    objc_msgSend(*((id *)this + 58), "setAlwaysDiscardsLateVideoFrames:", 1);
    v71 = (void *)*((_QWORD *)this + 58);
    v72 = *((_QWORD *)this + 119);
    if (qword_1ECE80D88 != -1)
      dispatch_once(&qword_1ECE80D88, &__block_literal_global_27);
    objc_msgSend(v71, "setSampleBufferDelegate:queue:", v72, qword_1ECE80D80);
    v73 = objc_msgSend(*((id *)this + 120), "canAddOutput:", *((_QWORD *)this + 58));
    if ((v73 & 1) == 0)
    {
      v115 = *((_QWORD *)this + 5);
      if (v115)
      {
        v116 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
        v117 = (WTF::StringImpl *)*((_QWORD *)this + 6);
        *(_QWORD *)&buf = v116;
        *((_QWORD *)&buf + 1) = v52;
        v150 = "setupCaptureSession";
        v151 = v117;
        if (*(_BYTE *)(v115 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "unable to add video output device");
      }
      goto LABEL_251;
    }
    objc_msgSend(*((id *)this + 120), "addOutput:", *((_QWORD *)this + 58));
    inited = WebCore::AVVideoCaptureSource::setSessionSizeFrameRateAndZoom((double *)this);
    if (*((_BYTE *)this + 1163))
      v75 = 1;
    else
      v75 = *((_BYTE *)this + 288) != 0;
    *((_BYTE *)this + 1163) = v75;
    {
      if (PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded)
        goto LABEL_230;
    }
    else
    {
      inited = (double *)PAL::init_AVFoundation_AVCaptureDeviceTypeExternalUnknown((PAL *)inited);
      PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded = (char)inited;
      if ((_DWORD)inited)
      {
LABEL_230:
        inited = (double *)objc_msgSend(*((id *)this + 121), "deviceType");
        if (inited == (double *)PAL::constantAVFoundationAVCaptureDeviceTypeExternalUnknown)
          goto LABEL_234;
      }
    }
    v130 = (void *)objc_msgSend(*((id *)this + 58), "connectionWithMediaType:", PAL::get_AVFoundation_AVMediaTypeVideo((PAL *)inited));
    if (v130)
    {
      v131 = objc_msgSend(v130, "videoOrientation");
      if ((unint64_t)(v131 - 2) > 2)
        v132 = 180;
      else
        v132 = dword_19689B198[v131 - 2];
LABEL_236:
      *((_DWORD *)this + 118) = v132;
      v133 = objc_msgSend(*((id *)this + 121), "position");
      v134 = 0;
      v135 = *((_DWORD *)this + 118) - *((_DWORD *)this + 119);
      if (v135 > 89)
      {
        if (v135 != 90)
        {
          if (v135 == 270)
          {
LABEL_246:
            v136 = v133 == 2;
            v134 = 270;
            v137 = 90;
LABEL_247:
            if (v136)
              v134 = v137;
            goto LABEL_249;
          }
          if (v135 != 180)
            goto LABEL_249;
LABEL_244:
          v134 = 180;
          goto LABEL_249;
        }
      }
      else if (v135 != -270)
      {
        if (v135 != -180)
        {
          if (v135 != -90)
          {
LABEL_249:
            if (v134 != *((unsigned __int16 *)this + 240))
            {
              *((_WORD *)this + 240) = v134;
              WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers((uint64_t)this, 3u);
            }
LABEL_251:
            if (v70)
              CFRelease(v70);
            goto LABEL_204;
          }
          goto LABEL_246;
        }
        goto LABEL_244;
      }
      v136 = v133 == 2;
      v134 = 90;
      v137 = 270;
      goto LABEL_247;
    }
LABEL_234:
    v132 = 0;
    goto LABEL_236;
  }
  v54 = *((_QWORD *)this + 5);
  if (v54)
  {
    v55 = (WTF::Logger *)(*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
    v56 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    v147 = v55;
    v148[0] = v52;
    v148[1] = (WTF::StringImpl *)"setupCaptureSession";
    v148[2] = v56;
    if (*(_BYTE *)(v54 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v147);
      v139 = v6;
      WTF::String::String((WTF::String *)&v144, "failed to allocate AVCaptureDeviceInput ");
      MEMORY[0x19AEA5508](&v143, objc_msgSend(v140, "localizedDescription"));
      if (v145)
      {
        v57 = *((_DWORD *)v145 + 1);
        if (v144)
          goto LABEL_99;
      }
      else
      {
        v57 = 0;
        if (v144)
        {
LABEL_99:
          v58 = *((_DWORD *)v144 + 1);
          if (v143)
          {
LABEL_100:
            v59 = *((_DWORD *)v143 + 1);
LABEL_101:
            if ((v59 | v58) < 0
              || ((v60 = __OFADD__(v58, v59), v61 = v58 + v59, !v60) ? (v62 = 0) : (v62 = 1),
                  v57 < 0 || (v62 & 1) != 0 || (v63 = (v57 + v61), __OFADD__(v57, v61))))
            {
LABEL_270:
              __break(0xC471u);
              goto LABEL_272;
            }
            if (v145 && (*((_BYTE *)v145 + 16) & 4) == 0)
            {
              v64 = 0;
              goto LABEL_135;
            }
            if (v144)
            {
              v86 = *((_DWORD *)v144 + 4);
              v64 = (v86 >> 2) & 1;
              if (v143 && (v86 & 4) != 0)
                goto LABEL_134;
            }
            else
            {
              if (v143)
              {
LABEL_134:
                v64 = (*((unsigned __int8 *)v143 + 16) >> 2) & 1;
                goto LABEL_135;
              }
              v64 = 1;
            }
LABEL_135:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v63, v64, v145, (uint64_t)v144, (uint64_t)v143, &buf);
            v146 = (WTF::StringImpl *)buf;
            if ((_QWORD)buf)
            {
              v88 = v143;
              v143 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, v87);
                else
                  *(_DWORD *)v88 -= 2;
              }
              v89 = v144;
              v144 = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                  WTF::StringImpl::destroy(v89, v87);
                else
                  *(_DWORD *)v89 -= 2;
              }
              v90 = v145;
              v145 = 0;
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, v87);
                else
                  *(_DWORD *)v90 -= 2;
              }
              v91 = qword_1ECE7CD60;
              v92 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v92)
              {
                WTF::String::utf8();
                v93 = v141 ? (char *)v141 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v93;
                _os_log_impl(&dword_1940B8000, v91, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v92 = (uint64_t)v141;
                v141 = 0;
                if (v92)
                {
                  if (*(_DWORD *)v92 == 1)
                    v92 = WTF::fastFree((WTF *)v92, v52);
                  else
                    --*(_DWORD *)v92;
                }
              }
              if (WebCore::LogWebRTC && byte_1ECE7CD50)
              {
                v94 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v95 = *v94;
                  if ((v95 & 1) != 0)
                    break;
                  v96 = __ldaxr(v94);
                  if (v96 == v95)
                  {
                    if (!__stxr(v95 | 1, v94))
                    {
                      v97 = WTF::Logger::observers((WTF::Logger *)v92);
                      v98 = *(unsigned int *)(v97 + 12);
                      if ((_DWORD)v98)
                      {
                        v99 = *(uint64_t **)v97;
                        v100 = *(_QWORD *)v97 + 8 * v98;
                        do
                        {
                          v101 = *v99;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v147);
                          LODWORD(v150) = 0;
                          WTF::String::String((WTF::String *)&v151, "failed to allocate AVCaptureDeviceInput ");
                          v152 = 0;
                          MEMORY[0x19AEA5508](v153, objc_msgSend(v140, "localizedDescription"));
                          v141 = 0;
                          v142 = 0;
                          v102 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v142) = 3;
                          v141 = v102;
                          v103 = HIDWORD(v142);
                          *((_DWORD *)v102 + 4 * HIDWORD(v142)) = buf;
                          v104 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v102 + 2 * v103 + 1) = v104;
                          *((_DWORD *)v102 + 4 * (v103 + 1)) = (_DWORD)v150;
                          v105 = v151;
                          if (v151)
                            *(_DWORD *)v151 += 2;
                          *((_QWORD *)v102 + 2 * (v103 + 1) + 1) = v105;
                          *((_DWORD *)v102 + 4 * (v103 + 2)) = v152;
                          v106 = v153[0];
                          if (v153[0])
                            *(_DWORD *)v153[0] += 2;
                          *((_QWORD *)v102 + 2 * (v103 + 2) + 1) = v106;
                          HIDWORD(v142) = v103 + 3;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v101 + 16))(v101, &WebCore::LogWebRTC, 1, &v141);
                          v107 = v141;
                          if (HIDWORD(v142))
                          {
                            v108 = 16 * HIDWORD(v142);
                            v109 = (WTF::StringImpl **)((char *)v141 + 8);
                            do
                            {
                              v110 = *v109;
                              *v109 = 0;
                              if (v110)
                              {
                                if (*(_DWORD *)v110 == 2)
                                  WTF::StringImpl::destroy(v110, v52);
                                else
                                  *(_DWORD *)v110 -= 2;
                              }
                              v109 += 2;
                              v108 -= 16;
                            }
                            while (v108);
                            v107 = v141;
                          }
                          if (v107)
                          {
                            v141 = 0;
                            LODWORD(v142) = 0;
                            WTF::fastFree(v107, v52);
                          }
                          v111 = v153[0];
                          v153[0] = 0;
                          if (v111)
                          {
                            if (*(_DWORD *)v111 == 2)
                              WTF::StringImpl::destroy(v111, v52);
                            else
                              *(_DWORD *)v111 -= 2;
                          }
                          v112 = v151;
                          v151 = 0;
                          if (v112)
                          {
                            if (*(_DWORD *)v112 == 2)
                              WTF::StringImpl::destroy(v112, v52);
                            else
                              *(_DWORD *)v112 -= 2;
                          }
                          v113 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v113)
                          {
                            if (*(_DWORD *)v113 == 2)
                              WTF::StringImpl::destroy(v113, v52);
                            else
                              *(_DWORD *)v113 -= 2;
                          }
                          ++v99;
                        }
                        while (v99 != (uint64_t *)v100);
                      }
                      v114 = __ldxr(v94);
                      if (v114 == 1)
                      {
                        if (!__stlxr(0, v94))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v118 = v146;
              v146 = 0;
              v6 = v139;
              if (v118)
              {
                if (*(_DWORD *)v118 == 2)
                  WTF::StringImpl::destroy(v118, v52);
                else
                  *(_DWORD *)v118 -= 2;
              }
              goto LABEL_203;
            }
            goto LABEL_270;
          }
LABEL_260:
          v59 = 0;
          goto LABEL_101;
        }
      }
      v58 = 0;
      if (v143)
        goto LABEL_100;
      goto LABEL_260;
    }
  }
LABEL_203:
  v73 = 0;
LABEL_204:
  if (v53)
    CFRelease(v53);
  v119 = *((_QWORD *)this + 144);
  if (v119)
  {
    v120 = v119 - 1;
    *((_QWORD *)this + 144) = v120;
    if (!v120)
    {
      v121 = (void *)*((_QWORD *)this + 120);
      if (v121)
        objc_msgSend(v121, "commitConfiguration");
    }
  }
  if ((v73 & 1) != 0)
  {
    v122 = 1;
    goto LABEL_214;
  }
  (*(void (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 240))(this);
LABEL_213:
  v122 = 0;
LABEL_214:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v52);
      if (!v122)
        return;
      goto LABEL_218;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v122)
    return;
LABEL_218:
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 120);
LABEL_219:
  v123 = -[WTF::StringImpl isRunning](v3, "isRunning");
  LOBYTE(v147) = v123;
  v124 = *((_QWORD *)this + 5);
  if (v124)
  {
    v125 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
    v126 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    *(_QWORD *)&buf = v125;
    *((_QWORD *)&buf + 1) = v127;
    v150 = "startProducingData";
    v151 = v126;
    if (*(_BYTE *)(v124 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
      v123 = v147;
    }
  }
  if (!v123)
  {
    objc_msgSend(*((id *)this + 119), "addNotificationObservers");
    v128 = (WTF::MonotonicTime *)objc_msgSend(*((id *)this + 120), "startRunning");
    *((_BYTE *)this + 1165) = 0;
    *((_QWORD *)this + 149) = 0;
    WTF::MonotonicTime::now(v128);
    WebCore::TimerBase::setNextFireTime((uint64_t)this + 1168, v129 + 1.0);
  }
}

void sub_19468F334(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25,WTF *a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  unsigned __int8 *v31;
  int v33;

  v33 = __ldxr(v31);
  if (v33 == 1)
  {
    if (!__stlxr(0, v31))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      if (a13)
      {
        if (*(_DWORD *)a13 == 2)
          WTF::StringImpl::destroy(a13, a2);
        else
          *(_DWORD *)a13 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WebCore::AVVideoCaptureSource::stopProducingData(WebCore::AVVideoCaptureSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  if (*((_QWORD *)this + 120))
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
    {
      v3 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
      v4 = *((_QWORD *)this + 6);
      v11 = v3;
      v12 = v5;
      v13 = "stopProducingData";
      v14 = v4;
      objc_msgSend(*((id *)this + 120), "isRunning");
      if (*(_BYTE *)(v2 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
    }
    objc_msgSend(*((id *)this + 119), "removeNotificationObservers");
    WebCore::AVVideoCaptureSource::stopSession((id *)this);
    *((_BYTE *)this + 1160) = 0;
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      v7 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
      v8 = *((_QWORD *)this + 6);
      v11 = v7;
      v12 = v9;
      v13 = "clearSession";
      v14 = v8;
      if (*(_BYTE *)(v6 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
    }
    objc_msgSend(*((id *)this + 120), "removeObserver:forKeyPath:", *((_QWORD *)this + 119), CFSTR("running"));
    v10 = (const void *)*((_QWORD *)this + 120);
    *((_QWORD *)this + 120) = 0;
    if (v10)
      CFRelease(v10);
  }
}

unsigned __int8 *WebCore::AVVideoCaptureSource::rejectPendingPhotoRequest(unsigned __int8 *this, const WTF::String *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  unsigned __int8 *v18;
  _BYTE *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned __int8 *v30;
  const WTF::String *v31;
  const char *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::Lock *v35;
  char v36;
  char v37;

  v5 = this;
  v6 = this + 992;
  if (__ldaxr(this + 992))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 992);
LABEL_5:
  v8 = (uint64_t *)*((_QWORD *)v5 + 123);
  if (!v8)
    goto LABEL_52;
  v9 = *((_QWORD *)v5 + 5);
  if (v9)
  {
    this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v5 + 24))(v5);
    v10 = *((_QWORD *)v5 + 6);
    v30 = this;
    v31 = a2;
    v32 = "rejectPendingPhotoRequest";
    v33 = v10;
    if (*(_BYTE *)(v9 + 12))
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WTF::String>((uint64_t)&WebCore::LogWebRTC, 1, (WTF::Logger::LogSiteIdentifier *)&v30, (uint64_t *)a2);
    v8 = (uint64_t *)*((_QWORD *)v5 + 123);
  }
  v30 = 0;
  v31 = 0;
  v32 = "rejectPendingPhotoRequest";
  v33 = 0;
  v11 = *v8;
  if (!*v8)
  {
    v14 = 0;
LABEL_22:
    this = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)this);
    if (*this && this[16] >= 4u)
      this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)this, (WTF::Logger::LogSiteIdentifier *)&v30, v14);
    goto LABEL_43;
  }
  v12 = (unsigned __int8 *)(v11 + 48);
  if (__ldaxr((unsigned __int8 *)(v11 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_16;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v11 + 48);
LABEL_16:
  v15 = *(_DWORD *)(v11 + 88);
  v16 = __ldxr(v12);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v12))
LABEL_20:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
  v14 = *v8;
  if (v15)
    goto LABEL_22;
  v18 = (unsigned __int8 *)(v14 + 48);
  v35 = (WTF::Lock *)(v14 + 48);
  v36 = 1;
  if (__ldaxr((unsigned __int8 *)(v14 + 48)))
  {
    __clrex();
LABEL_28:
    v18 = (unsigned __int8 *)MEMORY[0x19AEA534C](v18, a2, a3, a4);
    goto LABEL_29;
  }
  if (__stxr(1u, v18))
    goto LABEL_28;
LABEL_29:
  v20 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v18);
  if (*v20 && v20[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v20, 4u, (WTF::Logger::LogSiteIdentifier *)&v30, " rejecting ", v14);
  WTF::String::isolatedCopy();
  v21 = v34;
  v34 = 0;
  v22 = *(unsigned int *)(v14 + 88);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_1E31F70E0[v22])(&v37, v14 + 56);
  *(_QWORD *)(v14 + 56) = v21;
  *(_DWORD *)(v14 + 80) = 1;
  *(_DWORD *)(v14 + 88) = 1;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(v14, (unsigned __int8 **)&v35);
  this = (unsigned __int8 *)v34;
  v34 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
    else
      *(_DWORD *)this -= 2;
  }
  if (!v36)
    goto LABEL_43;
  this = (unsigned __int8 *)v35;
  v23 = __ldxr((unsigned __int8 *)v35);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_42:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)this);
LABEL_43:
  v24 = (uint64_t *)*((_QWORD *)v5 + 123);
  *((_QWORD *)v5 + 123) = 0;
  if (v24)
  {
    if (*v24)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v24);
      v25 = (unsigned int *)*v24;
      *v24 = 0;
      if (v25)
      {
        v26 = v25 + 2;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v25 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
        }
      }
    }
    else
    {
      *v24 = 0;
    }
    this = (unsigned __int8 *)WTF::fastFree((WTF *)v24, v17);
  }
LABEL_52:
  v29 = __ldxr(v6);
  if (v29 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return this;
}

void sub_19468FB08(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::Lock *a14, char a15)
{
  unsigned __int8 *v15;
  int v17;
  int v18;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a15)
  {
    v17 = __ldxr((unsigned __int8 *)a14);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a14))
        goto LABEL_11;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a14);
  }
LABEL_11:
  v18 = __ldxr(v15);
  if (v18 == 1)
  {
    if (!__stlxr(0, v15))
LABEL_16:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
  goto LABEL_16;
}

uint64_t WebCore::AVVideoCaptureSource::startApplyingConstraints(uint64_t this)
{
  *(_BYTE *)(this + 1162) = 0;
  return this;
}

uint64_t WebCore::AVVideoCaptureSource::endApplyingConstraints(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(this + 1162))
  {
    *(_BYTE *)(this + 1162) = 0;
    v1 = *(_QWORD *)(this + 1152);
    if (v1)
    {
      v2 = v1 - 1;
      *(_QWORD *)(this + 1152) = v2;
      if (!v2)
      {
        this = *(_QWORD *)(this + 960);
        if (this)
          return objc_msgSend((id)this, "commitConfiguration");
      }
    }
  }
  return this;
}

uint64_t WebCore::AVVideoCaptureSource::settingsDidChange(uint64_t result, WTF::StringImpl *a2)
{
  unsigned int v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = a2;
  v3 = result;
  if (*(_BYTE *)(result + 592))
  {
    v4 = *(WTF::StringImpl **)(result + 544);
    *(_QWORD *)(v3 + 544) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(v3 + 536);
    *(_QWORD *)(v3 + 536) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = *(_QWORD *)(v3 + 528);
    *(_QWORD *)(v3 + 528) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 592) = 0;
  }
  if ((v2 & 0xA000) != 0)
  {
    v6 = (v2 >> 15) & 1;
    v7 = (v2 >> 13) & 1;
    v8 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v8 = off_1E31F7160;
    *(_QWORD *)(v8 + 8) = v3;
    *(_BYTE *)(v8 + 16) = v7;
    *(_BYTE *)(v8 + 17) = v6;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v9 = &off_1E34195B0;
    v9[1] = v3;
    v9[2] = v8;
    v10 = v9;
    WTF::callOnMainThread();
    result = (uint64_t)v10;
    if (v10)
      return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  }
  return result;
}

char *WebCore::AVVideoCaptureSource::settings(WebCore::AVVideoCaptureSource *this)
{
  char *v1;
  char v3;
  WTF::StringImpl *v4;
  float v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  char v21;
  void *v22;
  WTF *v23;
  unsigned int v24;
  void *v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  char v40;
  char *result;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  _QWORD v46[4];
  char v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  __int16 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];

  v1 = (char *)this + 488;
  if (*((_BYTE *)this + 592))
    return v1;
  *(_QWORD *)((char *)v46 + 5) = 0;
  v46[2] = 0;
  v46[3] = 0;
  v46[0] = 0;
  v47 = 0;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v51 = 4;
  v52 = 0;
  v54 = 0;
  memset(v55, 0, 14);
  v53 = 0x3FF0000000000000;
  if (objc_msgSend(*((id *)this + 121), "position") == 2)
  {
    v3 = 1;
LABEL_6:
    BYTE4(v46[1]) = v3;
    goto LABEL_8;
  }
  if (objc_msgSend(*((id *)this + 121), "position") == 1)
  {
    v3 = 2;
    goto LABEL_6;
  }
  BYTE4(v46[1]) = 0;
LABEL_8:
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  if (v4)
    *(_DWORD *)v4 += 2;
  v50 = v4;
  v5 = *((double *)this + 29);
  *(float *)&v46[1] = v5;
  v6 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 96))(this);
  v8 = HIDWORD(v6);
  v9 = *((unsigned __int16 *)this + 240);
  if (v9 == 270 || v9 == 90)
  {
    LODWORD(v10) = v6;
  }
  else
  {
    v10 = HIDWORD(v6);
    LODWORD(v8) = v6;
  }
  v46[0] = __PAIR64__(v10, v8);
  v11 = 104;
  if (!*((_BYTE *)this + 211))
    v11 = 96;
  v12 = *(WTF::StringImpl **)((char *)this + v11);
  if (v12)
    *(_DWORD *)v12 += 2;
  v48 = v12;
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  if (v13 && *((_DWORD *)v13 + 1) || (v13 = (WTF::StringImpl *)*((_QWORD *)this + 22)) != 0)
    *(_DWORD *)v13 += 2;
  v14 = v49;
  v49 = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  BYTE1(v54) = objc_msgSend(*((id *)this + 121), "isPortraitEffectActive");
  v15 = objc_msgSend(*((id *)this + 121), "position") != 0;
  v16 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 440))(this);
  v17 = *(unsigned int *)(v16 + 12);
  if ((_DWORD)v17)
  {
    v18 = (double *)(*(_QWORD *)v16 + 32);
    v19 = 56 * v17;
    while (*(v18 - 1) == 1.0 && *v18 == 1.0)
    {
      v18 += 7;
      v19 -= 56;
      if (!v19)
        goto LABEL_32;
    }
    v53 = *((_QWORD *)this + 35);
    v21 = 1;
  }
  else
  {
LABEL_32:
    v21 = 0;
  }
  v22 = (void *)*((_QWORD *)this + 121);
  v23 = (WTF *)WTF::fastMalloc((WTF *)3);
  if (objc_msgSend(v22, "isWhiteBalanceModeSupported:", 0))
  {
    v24 = 1;
    *(_BYTE *)v23 = 1;
  }
  else
  {
    v24 = 0;
  }
  if (objc_msgSend(v22, "isWhiteBalanceModeSupported:", 1))
    *((_BYTE *)v23 + v24++) = 2;
  if (objc_msgSend(v22, "isWhiteBalanceModeSupported:", 2))
  {
    *((_BYTE *)v23 + v24) = 3;
    WTF::fastFree(v23, v25);
  }
  else
  {
    WTF::fastFree(v23, v25);
    if (!v24)
    {
      v28 = 0;
      goto LABEL_45;
    }
  }
  v26 = objc_msgSend(*((id *)this + 121), "whiteBalanceMode");
  if (v26 < 3)
    v27 = v26 + 1;
  else
    v27 = 0;
  v52 = v27;
  v28 = 1;
LABEL_45:
  if (objc_msgSend(*((id *)this + 121), "hasTorch"))
  {
    LOBYTE(v54) = objc_msgSend(*((id *)this + 121), "torchMode") == 1;
    v29 = 1;
  }
  else
  {
    v29 = 0;
  }
  v30 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 440))(this);
  v31 = *(unsigned int *)(v30 + 12);
  if ((_DWORD)v31)
  {
    v32 = 56 * v31;
    v33 = (unsigned __int8 *)(*(_QWORD *)v30 + 40);
    while (1)
    {
      v34 = *v33;
      v33 += 56;
      if (v34)
        break;
      v32 -= 56;
      if (!v32)
        goto LABEL_64;
    }
    v35 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 440))(this);
    v36 = *(unsigned int *)(v35 + 12);
    if ((_DWORD)v36)
    {
      v37 = 56 * v36;
      v38 = (unsigned __int8 *)(*(_QWORD *)v35 + 40);
      while (1)
      {
        v39 = *v38;
        v38 += 56;
        if (!v39)
          break;
        v37 -= 56;
        if (!v37)
          goto LABEL_64;
      }
      v40 = *((_BYTE *)this + 1056);
      if (v40)
        v40 = *((_BYTE *)this + 1040) != 0;
      BYTE2(v54) = v40;
    }
  }
LABEL_64:
  *(_DWORD *)((char *)&v54 + 3) = 16843009;
  HIBYTE(v54) = v15;
  v55[0] = 0x10100000000;
  LOBYTE(v55[1]) = 0;
  BYTE1(v55[1]) = v28;
  BYTE2(v55[1]) = v21;
  BYTE3(v55[1]) = v29;
  WORD2(v55[1]) = 257;
  result = (char *)std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>((uint64_t)v1, (uint64_t)v46);
  if (*((_BYTE *)this + 592))
  {
    v43 = v50;
    v50 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = v49;
    v49 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v42);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v48;
    v48 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v42);
      else
        *(_DWORD *)v45 -= 2;
    }
    return v1;
  }
  __break(1u);
  return result;
}

void sub_194690154(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<WebCore::RealtimeMediaSourceSettings>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v4 = *(unsigned __int8 *)(a1 + 104);
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  if (v4)
  {
    v8 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v10 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    v12 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = *(_OWORD *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 94) = *(_QWORD *)(a2 + 94);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = v14;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v7;
    v15 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a1 + 48) = v15;
    v16 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a1 + 56) = v16;
    v17 = *(_OWORD *)(a2 + 64);
    v18 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 94) = *(_QWORD *)(a2 + 94);
    *(_OWORD *)(a1 + 64) = v17;
    *(_OWORD *)(a1 + 80) = v18;
    *(_BYTE *)(a1 + 104) = 1;
  }
  return a1;
}

uint64_t WebCore::AVVideoCaptureSource::capabilities(WebCore::AVVideoCaptureSource *this)
{
  char *v1;
  char *v3;
  uint64_t v4;
  int v5;
  WTF::StringImpl *v6;
  void *v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  BOOL v30;
  void *v31;
  WTF *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  uint64_t result;
  char v37;
  _BYTE v38[13];
  _OWORD v39[3];
  WTF *v40[2];
  __int128 v41;
  __int128 v42;
  char v43;
  WTF::StringImpl *v44[2];
  __int128 v45;
  __int128 v46;
  _BYTE v47[19];
  _BYTE v48[19];

  v1 = (char *)this + 600;
  if (*((_BYTE *)this + 792))
    return (uint64_t)v1;
  v3 = WebCore::AVVideoCaptureSource::settings(this);
  v4 = 104;
  if (!*((_BYTE *)this + 211))
    v4 = 96;
  v43 = 0;
  memset(v39, 0, sizeof(v39));
  *(_OWORD *)v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v5 = *(_DWORD *)(v3 + 98);
  *(_OWORD *)v48 = *(_OWORD *)(v3 + 83);
  *(_DWORD *)&v48[15] = v5;
  v6 = *(WTF::StringImpl **)((char *)this + v4);
  if (v6)
    *(_DWORD *)v6 += 2;
  v44[0] = v6;
  v7 = (void *)*((_QWORD *)this + 121);
  if (objc_msgSend(v7, "position") == 2)
  {
    v38[0] = 1;
    v8 = HIDWORD(v40[1]);
    if (HIDWORD(v40[1]) == LODWORD(v40[1]))
    {
      v9 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v40, (WTF *)(HIDWORD(v40[1]) + 1), (unint64_t)v38);
      v8 = HIDWORD(v40[1]);
      *((_BYTE *)v40[0] + HIDWORD(v40[1])) = *v9;
    }
    else
    {
      *((_BYTE *)v40[0] + HIDWORD(v40[1])) = 1;
    }
    HIDWORD(v40[1]) = v8 + 1;
  }
  if (objc_msgSend(v7, "position") == 1)
  {
    v38[0] = 2;
    v10 = HIDWORD(v40[1]);
    if (HIDWORD(v40[1]) == LODWORD(v40[1]))
    {
      v11 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v40, (WTF *)(HIDWORD(v40[1]) + 1), (unint64_t)v38);
      v10 = HIDWORD(v40[1]);
      *((_BYTE *)v40[0] + HIDWORD(v40[1])) = *v11;
    }
    else
    {
      *((_BYTE *)v40[0] + HIDWORD(v40[1])) = 2;
    }
    HIDWORD(v40[1]) = v10 + 1;
  }
  v12 = WebCore::AVVideoCaptureSource::settings(this);
  *(_QWORD *)v38 = *(_QWORD *)(v12 + 83);
  *(_QWORD *)&v38[5] = *((_QWORD *)v12 + 11);
  v13 = v12[96];
  v14 = v12[97];
  v15 = v12[98];
  v16 = v12[99];
  v37 = v12[100];
  v17 = objc_msgSend(v7, "minimumFocusDistance");
  if (v17 != -1)
  {
    if ((double)v17 / 1000.0 > 1.79769313e308)
      goto LABEL_61;
    *(double *)&v45 = (double)v17 / 1000.0;
    *((_QWORD *)&v45 + 1) = 0x7FEFFFFFFFFFFFFFLL;
    v13 = 1;
  }
  v18 = (WTF *)WTF::fastMalloc((WTF *)3);
  if (objc_msgSend(v7, "isWhiteBalanceModeSupported:", 0))
  {
    v19 = 1;
    *(_BYTE *)v18 = 1;
  }
  else
  {
    v19 = 0;
  }
  if (objc_msgSend(v7, "isWhiteBalanceModeSupported:", 1))
    *((_BYTE *)v18 + v19++) = 2;
  if (objc_msgSend(v7, "isWhiteBalanceModeSupported:", 2))
  {
    *((_BYTE *)v18 + v19++) = 3;
LABEL_27:
    v21 = (WTF *)v46;
    if ((_QWORD)v46)
    {
      *(_QWORD *)&v46 = 0;
      DWORD2(v46) = 0;
      WTF::fastFree(v21, v20);
    }
    *(_QWORD *)&v46 = v18;
    DWORD2(v46) = 3;
    HIDWORD(v46) = v19;
    v14 = 1;
    v18 = 0;
    goto LABEL_30;
  }
  if (v19)
    goto LABEL_27;
LABEL_30:
  if (objc_msgSend(v7, "hasTorch"))
  {
    v16 = 1;
    v47[16] = 1;
  }
  v47[17] = objc_msgSend(*((id *)this + 121), "isPortraitEffectActive");
  v22 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 440))(this);
  v23 = *(unsigned int *)(v22 + 12);
  if ((_DWORD)v23)
  {
    v23 *= 56;
    v24 = (unsigned __int8 *)(*(_QWORD *)v22 + 40);
    while (1)
    {
      v25 = *v24;
      v24 += 56;
      if (v25)
        break;
      v23 -= 56;
      if (!v23)
        goto LABEL_44;
    }
    v26 = (*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 440))(this);
    LODWORD(v23) = *(_DWORD *)(v26 + 12);
    if ((_DWORD)v23)
    {
      v27 = 56 * v23 - 56;
      v28 = (unsigned __int8 *)(*(_QWORD *)v26 + 40);
      do
      {
        v29 = *v28;
        v28 += 56;
        LOBYTE(v23) = v29 == 0;
        if (v29)
          v30 = v27 == 0;
        else
          v30 = 1;
        v27 -= 56;
      }
      while (!v30);
    }
  }
LABEL_44:
  v47[18] = v23;
  *(_QWORD *)v48 = *(_QWORD *)v38;
  *(_QWORD *)&v48[5] = *(_QWORD *)&v38[5];
  v48[13] = v13;
  v48[14] = v14;
  v48[15] = v15;
  v48[16] = v16;
  v48[17] = v37;
  v48[18] = 1;
  WebCore::RealtimeVideoCaptureSource::updateCapabilities((uint64_t)this, (uint64_t)v39);
  std::optional<WebCore::RealtimeMediaSourceCapabilities>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceCapabilities,void>((uint64_t)v1, (uint64_t)v39);
  if (*((_BYTE *)this + 792))
  {
    if (v18)
      WTF::fastFree(v18, v31);
    v32 = (WTF *)v46;
    if ((_QWORD)v46)
    {
      *(_QWORD *)&v46 = 0;
      DWORD2(v46) = 0;
      WTF::fastFree(v32, v31);
    }
    v33 = v44[1];
    v44[1] = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v31);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v44[0];
    v44[0] = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v31);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v40[0];
    if (v40[0])
    {
      v40[0] = 0;
      LODWORD(v40[1]) = 0;
      WTF::fastFree(v35, v31);
    }
    return (uint64_t)v1;
  }
  __break(1u);
LABEL_61:
  result = 48;
  __break(0xC471u);
  return result;
}

void sub_194690708(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,WTF *a30,int a31)
{
  WTF *v31;
  void *v33;

  WTF::fastFree(v31, a2);
  if (a30)
    WTF::fastFree(a30, v33);
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a19)
    WTF::fastFree(a19, v33);
  _Unwind_Resume(a1);
}

uint64_t std::optional<WebCore::RealtimeMediaSourceCapabilities>::operator=[abi:sn180100]<WebCore::RealtimeMediaSourceCapabilities,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  WTF::StringImpl *v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  __int128 v14;

  if (*(_BYTE *)(a1 + 192))
  {
    v4 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)a1 = v4;
    WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 48, (const void **)(a2 + 48));
    v7 = *(_OWORD *)(a2 + 64);
    v8 = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *(_DWORD **)(a2 + 104);
    if (v9)
      *v9 += 2;
    v10 = *(WTF::StringImpl **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(_DWORD **)(a2 + 112);
    if (v11)
      *v11 += 2;
    v12 = *(WTF::StringImpl **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 136, (const void **)(a2 + 136));
    v13 = *(_QWORD *)(a2 + 182);
    v14 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v14;
    *(_QWORD *)(a1 + 182) = v13;
  }
  else
  {
    WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities(a1, (__int128 *)a2);
    *(_BYTE *)(a1 + 192) = 1;
  }
  return a1;
}

id WebCore::AVVideoCaptureSource::photoOutput(id *this)
{
  id result;
  uint64_t v3;
  id v4;
  _BYTE *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  id v16;

  WTF::RunLoop::main((WTF::RunLoop *)this);
  result = this[122];
  if (!result)
  {
    v3 = objc_msgSend(objc_alloc((Class)PAL::getAVCapturePhotoOutputClass(0)), "init");
    v4 = this[122];
    this[122] = (id)v3;
    if (v4)
    {
      CFRelease(v4);
      v3 = (uint64_t)this[122];
    }
    if (v3)
    {
      if ((objc_msgSend(this[120], "canAddOutput:") & 1) != 0)
      {
        objc_msgSend(this[120], "addOutput:", this[122]);
        return this[122];
      }
      v9 = this[5];
      if (v9)
      {
        v10 = (*((uint64_t (**)(id *))*this + 3))(this);
        v11 = this[6];
        v13 = v10;
        v14 = v12;
        v15 = "photoOutput";
        v16 = v11;
        if (v9[12])
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v13, "unable to add photo output");
      }
    }
    else
    {
      v5 = this[5];
      if (v5)
      {
        v6 = (*((uint64_t (**)(id *))*this + 3))(this);
        v7 = this[6];
        v13 = v6;
        v14 = v8;
        v15 = "photoOutput";
        v16 = v7;
        if (v5[12])
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v13, "unable to allocate AVCapturePhotoOutput");
      }
    }
    return 0;
  }
  return result;
}

void WebCore::AVVideoCaptureSource::takePhotoInternal(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X8>)
{
  id v6;
  const void *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::RunLoop *v17;
  unsigned int **v18;
  void *v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  PAL *v28;
  BOOL v29;
  int v30;
  int v31;
  PAL *v32;
  void *v33;
  id v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  _QWORD *v64;
  unsigned int *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t AVFoundation_AVVideoQualityKey;
  void *v71;
  PAL *AVFoundation_AVVideoCodecKey;
  PAL *AVFoundation_AVVideoCompressionPropertiesKey;
  PAL *v74[2];
  __int128 v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  WTF::RunLoop::main((WTF::RunLoop *)a1);
  v6 = WebCore::AVVideoCaptureSource::photoOutput((id *)a1);
  if (!v6)
  {
    *(_QWORD *)&v66 = "Internal error";
    *((_QWORD *)&v66 + 1) = 15;
    v75 = 0uLL;
    v76 = "takePhotoInternal";
    v77 = 0;
    v10 = WTF::fastMalloc((WTF *)0x90);
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(v10, &v75);
    *a3 = v10;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(v10, (uint64_t)&v66, (WTF::Logger::LogSiteIdentifier *)&v75);
    return;
  }
  v7 = v6;
  CFRetain(v6);
  v8 = (unsigned __int8 *)(a1 + 992);
  if (__ldaxr((unsigned __int8 *)(a1 + 992)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](a1 + 992);
LABEL_7:
  v11 = *(_QWORD *)(a1 + 984);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v14 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)&v75 = v13;
      *((_QWORD *)&v75 + 1) = v15;
      v76 = "takePhotoInternal";
      v77 = v14;
      if (*(_BYTE *)(v12 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v75, "m_photoProducer should be NULL!");
    }
    *(_QWORD *)&v66 = "Internal error";
    *((_QWORD *)&v66 + 1) = 15;
    v75 = 0uLL;
    v76 = "takePhotoInternal";
    v77 = 0;
    v16 = WTF::fastMalloc((WTF *)0x90);
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(v16, &v75);
    *a3 = v16;
    v17 = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(v16, (uint64_t)&v66, (WTF::Logger::LogSiteIdentifier *)&v75);
LABEL_12:
    v65 = 0;
    goto LABEL_25;
  }
  v18 = (unsigned int **)WTF::fastMalloc((WTF *)0x28);
  v75 = 0uLL;
  v76 = "make_unique";
  v77 = 0;
  v17 = (WTF::RunLoop *)WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v18, 0, &v75);
  v20 = *(uint64_t **)(a1 + 984);
  *(_QWORD *)(a1 + 984) = v18;
  if (v20)
  {
    if (*v20)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v20);
      v21 = (unsigned int *)*v20;
      *v20 = 0;
      if (v21)
      {
        v22 = v21 + 2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v21 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
        }
      }
    }
    else
    {
      *v20 = 0;
    }
    v17 = (WTF::RunLoop *)WTF::fastFree((WTF *)v20, v19);
    v18 = *(unsigned int ***)(a1 + 984);
  }
  if (!*v18)
    goto LABEL_12;
  v65 = *v18;
  v25 = *v18 + 2;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
LABEL_25:
  v27 = __ldxr(v8);
  if (v27 != 1)
  {
    __clrex();
LABEL_30:
    v17 = (WTF::RunLoop *)WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 992));
    if (!v11)
      goto LABEL_31;
    goto LABEL_86;
  }
  if (__stlxr(0, v8))
    goto LABEL_30;
  if (!v11)
  {
LABEL_31:
    v64 = a3;
    v28 = (PAL *)WTF::RunLoop::main(v17);
    if (*((_BYTE *)a2 + 16))
      v29 = *((_BYTE *)a2 + 32) == 0;
    else
      v29 = 1;
    if (v29)
      v30 = 0;
    else
      v30 = (int)a2[3];
    if (v29)
      v31 = 0;
    else
      v31 = (int)a2[1];
    v32 = (PAL *)PAL::getAVCapturePhotoSettingsClass[0](v28);
    AVFoundation_AVVideoCodecKey = (PAL *)PAL::get_AVFoundation_AVVideoCodecKey(v32);
    v74[0] = (PAL *)PAL::get_AVFoundation_AVVideoCodecTypeJPEG(AVFoundation_AVVideoCodecKey);
    AVFoundation_AVVideoCompressionPropertiesKey = (PAL *)PAL::get_AVFoundation_AVVideoCompressionPropertiesKey(v74[0]);
    AVFoundation_AVVideoQualityKey = PAL::get_AVFoundation_AVVideoQualityKey(AVFoundation_AVVideoCompressionPropertiesKey);
    v71 = &unk_1E349D630;
    v74[1] = (PAL *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v71, &AVFoundation_AVVideoQualityKey, 1);
    v33 = (void *)-[PAL photoSettingsWithFormat:](v32, "photoSettingsWithFormat:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v74, &AVFoundation_AVVideoCodecKey, 2));
    v34 = WebCore::AVVideoCaptureSource::photoOutput((id *)a1);
    v35 = v34;
    if (!v34)
    {
LABEL_82:
      v52 = *(_QWORD *)(a1 + 40);
      if (v52)
      {
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        v54 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)&v75 = v53;
        *((_QWORD *)&v75 + 1) = v55;
        v76 = "takePhotoInternal";
        v77 = v54;
        if (*(_BYTE *)(v52 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [28]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v75, "photoConfiguration() failed");
      }
      *(_QWORD *)&v66 = "Internal error";
      *((_QWORD *)&v66 + 1) = 15;
      v75 = 0uLL;
      v76 = "takePhotoInternal";
      v77 = 0;
      v56 = WTF::fastMalloc((WTF *)0x90);
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(v56, &v75);
      *v64 = v56;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(v56, (uint64_t)&v66, (WTF::Logger::LogSiteIdentifier *)&v75);
      goto LABEL_86;
    }
    if (*((_BYTE *)a2 + 1))
    {
      v36 = *(char *)a2;
      v37 = v36 > 2 ? 2 : qword_19689B1A8[v36];
      v38 = (void *)objc_msgSend(v34, "supportedFlashModes");
      if (objc_msgSend(v38, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v37)))objc_msgSend(v33, "setFlashMode:", v37);
    }
    if (*((_BYTE *)a2 + 41) && objc_msgSend(v35, "isAutoRedEyeReductionSupported"))
    {
      if (!*((_BYTE *)a2 + 41))
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        __break(1u);
        return;
      }
      objc_msgSend(v33, "setAutoRedEyeReductionEnabled:", *((unsigned __int8 *)a2 + 40));
    }
    v39 = (void *)objc_msgSend(*(id *)(a1 + 968), "activeFormat");
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v40 = (void *)objc_msgSend(v39, "supportedMaxPhotoDimensions");
      if (!objc_msgSend(v40, "count"))
        goto LABEL_77;
      v41 = objc_msgSend((id)objc_msgSend(v40, "firstObject"), "CMVideoDimensionsValue");
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v66, &v75, 16);
      v63 = v33;
      v43 = HIDWORD(v41);
      if (v42)
      {
        v44 = *(_QWORD *)v67;
        do
        {
          for (i = 0; i != v42; ++i)
          {
            if (*(_QWORD *)v67 != v44)
              objc_enumerationMutation(v40);
            v46 = objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * i), "CMVideoDimensionsValue");
            if (v30 <= (int)v46 && v31 <= SHIDWORD(v46))
            {
              v48 = v43 * v41;
              if (HIDWORD(v46) * (int)v46 < (int)v43 * (int)v41)
                LODWORD(v41) = v46;
              if (HIDWORD(v46) * (int)v46 >= v48)
                v43 = v43;
              else
                v43 = HIDWORD(v46);
            }
          }
          v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v66, &v75, 16);
        }
        while (v42);
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 1056))
        goto LABEL_77;
      v63 = v33;
      LODWORD(v41) = *(_DWORD *)(a1 + 1000);
      v43 = *(unsigned int *)(a1 + 1004);
    }
    v33 = v63;
    if ((int)v41 >= 1 && (int)v43 >= 1 && (objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v63, "setMaxPhotoDimensions:", v41 | (v43 << 32));
LABEL_77:
    if (v33)
    {
      CFRetain(v33);
      if (_MergedGlobals_92 == 1)
      {
        v49 = qword_1ECE80D78;
      }
      else
      {
        WTF::WorkQueue::create();
        v49 = v75;
        qword_1ECE80D78 = v75;
        _MergedGlobals_92 = 1;
      }
      v50 = *(_QWORD *)(a1 + 304);
      if (__ldaxr((unsigned __int8 *)v50))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v50))
      {
        goto LABEL_94;
      }
      MEMORY[0x19AEA534C](v50);
LABEL_94:
      ++*(_QWORD *)(v50 + 8);
      v60 = __ldxr((unsigned __int8 *)v50);
      if (v60 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v50))
          goto LABEL_99;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v50);
LABEL_99:
      v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v61 = &off_1E31F71D0;
      v61[1] = a1;
      v61[2] = a1;
      v61[3] = v33;
      v61[4] = v7;
      *(_QWORD *)&v75 = v61;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v49 + 32))(v49, &v75);
      v62 = v75;
      *(_QWORD *)&v75 = 0;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      *v64 = v65;
      return;
    }
    goto LABEL_82;
  }
LABEL_86:
  if (v65)
  {
    v57 = v65 + 2;
    do
    {
      v58 = __ldaxr(v57);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v57));
    if (!v59)
    {
      atomic_store(1u, v65 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 16))(v65);
    }
  }
  CFRelease(v7);
}

void sub_1946910E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  const void *v27;
  const void *v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;

  CFRelease(v28);
  if (!a12)
    goto LABEL_5;
  v30 = a12 + 2;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
  {
    atomic_store(1u, a12 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 16))(a12);
    if (!v27)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else
  {
LABEL_5:
    if (!v27)
      goto LABEL_7;
  }
  CFRelease(v27);
  goto LABEL_7;
}

WTF::Lock *WebCore::AVVideoCaptureSource::getPhotoCapabilities@<X0>(WebCore::AVVideoCaptureSource *this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  WTF::Lock *result;
  __int128 *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  const char *v22;
  uint64_t v23;
  __int128 v24;
  const char *v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  int v32;

  v3 = (__int128 *)((char *)this + 800);
  if (*((_BYTE *)this + 944))
  {
    v24 = 0uLL;
    v25 = "getPhotoCapabilities";
    v26 = 0;
    v4 = WTF::fastMalloc((WTF *)0x110);
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::NativePromise(v4, &v24);
    *a2 = v4;
    return WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::resolve<WebCore::PhotoCapabilities&,std::enable_if<true,void>>(v4, v3, (WTF::Logger::LogSiteIdentifier *)&v24);
  }
  v7 = (__int128 *)WebCore::AVVideoCaptureSource::capabilities(this);
  WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities((uint64_t)&v24, v7);
  v9 = (double)SHIDWORD(v24);
  v10 = (double)SDWORD2(v24);
  v11 = (double)SDWORD1(v24);
  v12 = (double)(int)v24;
  v13 = *((unsigned __int8 *)this + 944);
  *((_WORD *)this + 400) = 0;
  *((double *)this + 101) = v9;
  LOBYTE(v14) = 1;
  *((_BYTE *)this + 816) = 1;
  *((double *)this + 103) = v10;
  *((_BYTE *)this + 832) = 1;
  *((_QWORD *)this + 105) = 0x3FF0000000000000;
  *((_BYTE *)this + 848) = 1;
  *((_BYTE *)this + 856) = 1;
  *((double *)this + 108) = v11;
  *((_BYTE *)this + 872) = 1;
  *((double *)this + 110) = v12;
  *((_BYTE *)this + 888) = 1;
  *((_QWORD *)this + 112) = 0x3FF0000000000000;
  *((_BYTE *)this + 904) = 1;
  *((_BYTE *)this + 912) = 1;
  if (!v13)
    goto LABEL_8;
  if (*((_BYTE *)this + 936))
  {
    v15 = (WTF *)*((_QWORD *)this + 115);
    if (!v15)
    {
      *((_BYTE *)this + 936) = 0;
      goto LABEL_10;
    }
    *((_QWORD *)this + 115) = 0;
    *((_DWORD *)this + 232) = 0;
    WTF::fastFree(v15, v8);
    v14 = *((unsigned __int8 *)this + 944);
    *((_BYTE *)this + 936) = 0;
    if (!v14)
    {
      __break(1u);
LABEL_8:
      *((_BYTE *)this + 920) = 0;
      *((_BYTE *)this + 936) = 0;
      *((_BYTE *)this + 944) = v14;
    }
  }
LABEL_10:
  v21 = 0uLL;
  v22 = "getPhotoCapabilities";
  v23 = 0;
  v16 = WTF::fastMalloc((WTF *)0x110);
  WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::NativePromise(v16, &v21);
  *a2 = v16;
  WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::resolve<WebCore::PhotoCapabilities&,std::enable_if<true,void>>(v16, v3, (WTF::Logger::LogSiteIdentifier *)&v21);
  v18 = v31;
  if (v31)
  {
    v31 = 0;
    v32 = 0;
    WTF::fastFree(v18, v17);
  }
  v19 = v30;
  v30 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v27;
  if (v27)
  {
    v27 = 0;
    v28 = 0;
    return (WTF::Lock *)WTF::fastFree(result, v17);
  }
  return result;
}

void sub_1946914F8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,uint64_t a28,uint64_t a29,WTF *a30,int a31)
{
  _QWORD *v31;
  unsigned int *v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  *v31 = 0;
  v34 = v32 + 2;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
  {
    atomic_store(1u, v32 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
  }
  if (a30)
    WTF::fastFree(a30, a2);
  if (a27)
  {
    if (*(_DWORD *)a27 == 2)
      WTF::StringImpl::destroy(a27, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a27 -= 2;
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  if (a19)
    WTF::fastFree(a19, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVVideoCaptureSource::getPhotoSettings@<X0>(id *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  __int16 v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t result;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  double v22;
  char v23;
  __int16 v24;

  LOBYTE(v20) = 0;
  v4 = 0;
  v5 = 0;
  if (objc_msgSend(this[121], "hasTorch"))
  {
    v6 = objc_msgSend(this[121], "torchMode");
    if (v6 <= 2)
      v4 = 0x201u >> (8 * v6);
    else
      v4 = 0;
    v5 = 1;
  }
  v7 = WebCore::AVVideoCaptureSource::settings((WebCore::AVVideoCaptureSource *)this);
  v8 = *(_DWORD *)v7;
  v9 = *((_DWORD *)v7 + 1);
  v10 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = (WTF::StringImpl *)*((_QWORD *)v7 + 6);
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = (WTF::StringImpl *)*((_QWORD *)v7 + 7);
  if (v12)
    *(_DWORD *)v12 += 2;
  LOWORD(v20) = v4 | (unsigned __int16)(v5 << 8);
  *((double *)&v20 + 1) = (double)v9;
  v21 = 1;
  v22 = (double)v8;
  v23 = 1;
  v24 = 0;
  v18 = 0uLL;
  *(_QWORD *)&v19 = "getPhotoSettings";
  *((_QWORD *)&v19 + 1) = 0;
  v13 = WTF::fastMalloc((WTF *)0xB0);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E31F7440;
  v14 = v19;
  *(_OWORD *)(v13 + 16) = v18;
  *(_OWORD *)(v13 + 32) = v14;
  *(_BYTE *)(v13 + 48) = 0;
  *(_DWORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 128) = v13 + 144;
  *(_QWORD *)(v13 + 136) = 1;
  *(_QWORD *)(v13 + 152) = 0;
  *(_QWORD *)(v13 + 160) = 0;
  *(_WORD *)(v13 + 168) = 0;
  v15 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v13);
  if (*v15 && v15[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>((uint64_t)v15, 4u, "creating ", v13);
  *a2 = v13;
  result = (uint64_t)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::resolve<WebCore::PhotoSettings&,std::enable_if<true,void>>(v13, &v20, (WTF::Logger::LogSiteIdentifier *)&v18);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      result = WTF::StringImpl::destroy(v12, v17);
      if (!v11)
        goto LABEL_21;
      goto LABEL_19;
    }
    *(_DWORD *)v12 -= 2;
  }
  if (!v11)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v11 == 2)
    result = WTF::StringImpl::destroy(v11, v17);
  else
    *(_DWORD *)v11 -= 2;
LABEL_21:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v17);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

void sub_19469181C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  _QWORD *v6;
  unsigned int *v7;
  _QWORD *v8;
  unsigned int v10;
  unsigned int v11;

  v8 = v6;
  *v8 = 0;
  do
  {
    v10 = __ldaxr(v7);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v7));
  if (!v11)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      if (!v3)
        goto LABEL_11;
      goto LABEL_9;
    }
    *(_DWORD *)v4 -= 2;
  }
  if (!v3)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, a2);
  else
    *(_DWORD *)v3 -= 2;
LABEL_11:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(WebCore::AVVideoCaptureSource *this)
{
  uint64_t result;
  uint64_t inited;
  int v3;

  result = WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities;
  if (WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities)
    return result;
  inited = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 8);
  WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities = inited;
  {
    if (!PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(void)::loaded)
      goto LABEL_5;
    goto LABEL_4;
  }
  inited = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera((PAL *)inited);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTripleCamera(void)::loaded = inited;
  if ((_DWORD)inited)
  {
    inited = WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities;
LABEL_4:
    inited = objc_msgSend((id)inited, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInTripleCamera);
  }
LABEL_5:
  {
    if (!PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(void)::loaded)
      goto LABEL_8;
    goto LABEL_7;
  }
  inited = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera((PAL *)inited);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualWideCamera(void)::loaded = inited;
  if ((_DWORD)inited)
LABEL_7:
    inited = objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInDualWideCamera);
LABEL_8:
  {
    if (!PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(void)::loaded)
      goto LABEL_11;
    goto LABEL_10;
  }
  inited = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera((PAL *)inited);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInUltraWideCamera(void)::loaded = inited;
  if ((_DWORD)inited)
LABEL_10:
    inited = objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInUltraWideCamera);
LABEL_11:
  {
    if (!PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(void)::loaded)
      goto LABEL_14;
    goto LABEL_13;
  }
  inited = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera((PAL *)inited);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInDualCamera(void)::loaded = inited;
  if ((_DWORD)inited)
LABEL_13:
    inited = objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInDualCamera);
LABEL_14:
  {
    if (!PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(void)::loaded)
      goto LABEL_17;
    goto LABEL_16;
  }
  inited = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera((PAL *)inited);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInWideAngleCamera(void)::loaded = inited;
  if ((_DWORD)inited)
LABEL_16:
    inited = objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInWideAngleCamera);
LABEL_17:
  {
    if (!PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(void)::loaded)
      goto LABEL_20;
    goto LABEL_19;
  }
  inited = PAL::init_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera((PAL *)inited);
  PAL::canLoad_AVFoundation_AVCaptureDeviceTypeBuiltInTelephotoCamera(void)::loaded = inited;
  if ((_DWORD)inited)
LABEL_19:
    inited = objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeBuiltInTelephotoCamera);
LABEL_20:
  {
    inited = PAL::init_AVFoundation_AVCaptureDeviceTypeDeskViewCamera((PAL *)inited);
    PAL::canLoad_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(void)::loaded = inited;
    if (!(_DWORD)inited)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (PAL::canLoad_AVFoundation_AVCaptureDeviceTypeDeskViewCamera(void)::loaded)
LABEL_22:
    inited = objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeDeskViewCamera);
LABEL_23:
  {
    v3 = PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded;
  }
  else
  {
    v3 = PAL::init_AVFoundation_AVCaptureDeviceTypeExternalUnknown((PAL *)inited);
    PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded = v3;
  }
  result = WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities;
  if (v3)
  {
    objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities, "addObject:", PAL::constantAVFoundationAVCaptureDeviceTypeExternalUnknown);
    return WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(void)::devicePriorities;
  }
  return result;
}

WTF::StringImpl *WebCore::AVVideoCaptureSource::facingModeFitnessScoreAdjustment(id *this)
{
  WTF::StringImpl *result;
  WebCore::AVVideoCaptureSource *v3;
  WebCore::AVVideoCaptureSource *v4;
  WTF::String *v5;
  _BYTE *v6;
  id v7;
  uint64_t v8;
  WTF::Logger **v9;
  WTF::Logger *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::Logger **v43;
  _QWORD v44[4];
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 buf;
  int v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  result = (WTF::StringImpl *)objc_msgSend(this[121], "position");
  if (result != (WTF::StringImpl *)1)
    return result;
  v3 = (WebCore::AVVideoCaptureSource *)objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes((WebCore::AVVideoCaptureSource *)1), "indexOfObject:", objc_msgSend(this[121], "deviceType"));
  v4 = v3;
  if (v3 == (WebCore::AVVideoCaptureSource *)0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = (WebCore::AVVideoCaptureSource *)objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes((WebCore::AVVideoCaptureSource *)0x7FFFFFFFFFFFFFFFLL), "count");
    v4 = v3;
  }
  result = (WTF::StringImpl *)objc_msgSend((id)WebCore::AVVideoCaptureSource::cameraCaptureDeviceTypes(v3), "count");
  v5 = (WTF::String *)(result - v4);
  v6 = this[5];
  if (!v6)
    return result;
  result = (WTF::StringImpl *)(*((uint64_t (**)(id *))*this + 3))(this);
  v7 = this[6];
  v44[0] = result;
  v44[1] = v8;
  v44[2] = "facingModeFitnessScoreAdjustment";
  v44[3] = v7;
  {
    WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl += 2;
    WebCore::CaptureDevice::label(void)const::airPods = &WebCore::CaptureDevice::label(void)::{lambda(void)#1}::operator() const(void)::impl;
  }
  if (*((unsigned __int8 *)this + 184) - 1 > 1
    || (result = (WTF::StringImpl *)this[24]) == 0
    || (result = (WTF::StringImpl *)WTF::StringImpl::find(), result == (WTF::StringImpl *)-1))
  {
    v9 = (WTF::Logger **)(this + 24);
  }
  else
  {
    v9 = (WTF::Logger **)&WebCore::CaptureDevice::label(void)const::airPods;
  }
  v43 = v9;
  if (!v6[12])
    return result;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v44);
  v10 = *v43;
  if (*v43)
    *(_DWORD *)v10 += 2;
  WTF::String::String((WTF::String *)&v48, " has fitness adjustment ");
  WTF::String::number(v5);
  v45 = v10;
  v52 = v48;
  *(_QWORD *)&buf = v49;
  v51 = v47;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v45, (uint64_t *)&v52, (uint64_t *)&v51, &v50);
  if (!v50)
  {
    __break(0xC471u);
    return result;
  }
  v12 = v47;
  v47 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v48;
  v48 = 0;
  if (!v13)
  {
LABEL_22:
    if (v10)
      goto LABEL_23;
    goto LABEL_25;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v10)
  {
LABEL_23:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v11);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_25:
  v14 = v49;
  v49 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = qword_1ECE7CD60;
  v16 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v45 ? (char *)v45 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v45;
    v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (WebCore::LogWebRTC)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v44);
              v54 = 0;
              v27 = *v43;
              if (*v43)
                *(_DWORD *)v27 += 2;
              v55 = v27;
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, " has fitness adjustment ");
              v58 = 0;
              WTF::String::number(v5);
              v45 = 0;
              v46 = 0;
              v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v46) = 4;
              v45 = v28;
              v29 = HIDWORD(v46);
              *((_DWORD *)v28 + 4 * HIDWORD(v46)) = buf;
              v30 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v28 + 2 * v29 + 1) = v30;
              *((_DWORD *)v28 + 4 * (v29 + 1)) = v54;
              v31 = v55;
              if (v55)
                *(_DWORD *)v55 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
              *((_DWORD *)v28 + 4 * (v29 + 2)) = v56;
              v32 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 2) + 1) = v32;
              *((_DWORD *)v28 + 4 * (v29 + 3)) = v58;
              v33 = v59;
              if (v59)
                *(_DWORD *)v59 += 2;
              *((_QWORD *)v28 + 2 * (v29 + 3) + 1) = v33;
              HIDWORD(v46) = v29 + 4;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogWebRTC, 0, &v45);
              v34 = v45;
              if (HIDWORD(v46))
              {
                v35 = 16 * HIDWORD(v46);
                v36 = (WTF::StringImpl **)((char *)v45 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v45;
              }
              if (v34)
              {
                v45 = 0;
                LODWORD(v46) = 0;
                WTF::fastFree(v34, v17);
              }
              v38 = v59;
              v59 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v57;
              v57 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = v55;
              v55 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v41 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v42 = __ldxr(v19);
          if (v42 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v50;
  v50 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469226C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

double *WebCore::AVVideoCaptureSource::setFrameRateAndZoomWithPreset(double *result, uint64_t a2, double a3, double a4)
{
  double *v6;
  double v7;
  BOOL v8;
  unint64_t v9;
  void *v10;
  _QWORD *v11;
  double *v12;
  double *v13;

  v6 = result;
  v7 = result[143] * a4;
  if (result[141] != a3
    || (result[142] == v7 ? (v8 = *(_BYTE *)(a2 + 56) == 0) : (v8 = 1),
        v8 || !*((_BYTE *)result + 1056) || *(_QWORD *)(a2 + 48) != *((_QWORD *)result + 131)))
  {
    if (!*((_BYTE *)result + 1162))
    {
      *((_BYTE *)result + 1162) = 1;
      v9 = *((_QWORD *)result + 144) + 1;
      *((_QWORD *)result + 144) = v9;
      if (v9 <= 1)
      {
        v10 = (void *)*((_QWORD *)result + 120);
        if (v10)
          objc_msgSend(v10, "beginConfiguration");
      }
    }
    std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::VideoPreset,false>>((uint64_t)(v6 + 125), (_QWORD *)a2);
    if (*((_BYTE *)v6 + 1056))
    {
      v13 = (double *)*((_QWORD *)v6 + 125);
      WebCore::RealtimeMediaSource::setIntrinsicSize(v6, (const WebCore::IntSize *)&v13, 1);
    }
    v6[141] = a3;
    v6[142] = v7;
    result = WebCore::AVVideoCaptureSource::setSessionSizeFrameRateAndZoom(v6);
    if (*((_BYTE *)v6 + 288))
    {
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E31F72D8;
      v11[1] = v6;
      (*(void (**)(double *))(*(_QWORD *)v6 + 136))(v6);
      v12 = (double *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v12 = &off_1E34195B0;
      *((_QWORD *)v12 + 1) = v6;
      *((_QWORD *)v12 + 2) = v11;
      v13 = v12;
      WTF::callOnMainThread();
      result = v13;
      v13 = 0;
      if (result)
        return (double *)(*(uint64_t (**)(double *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

double *WebCore::AVVideoCaptureSource::setSessionSizeFrameRateAndZoom(double *this)
{
  double *v1;
  uint64_t v2;
  WTF::Logger *v3;
  uint64_t v4;
  WTF::Logger *v5;
  uint64_t v6;
  int v7;
  int v8;
  _DWORD *value;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  CMTimeValue v17;
  void *v18;
  CMTimeValue v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  CMTimeValue v30;
  uint64_t flags;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t i;
  void *v55;
  double v56;
  double v57;
  double v58;
  CMTime *v60;
  double v61;
  double v62;
  double v63;
  int v64;
  double v65;
  double v66;
  CMTime *v67;
  CMTime *v68;
  uint64_t v69;
  CMTimeValue v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CMTimeValue v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  double v77;
  void *v78;
  double v79;
  int v80;
  CMTime *v81;
  CMTime *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  CMTimeValue v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t timescale;
  unsigned __int8 v91;
  unsigned __int8 v92;
  _BOOL4 v94;
  char v95;
  BOOL v96;
  CMTimeValue v97;
  WTF::String *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  NSObject *v105;
  WTF *v106;
  void *v107;
  char *v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  WTF::String *v117;
  double v118;
  WTF::Logger *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF *v126;
  uint64_t v127;
  WTF::StringImpl **v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  int v135;
  WTF::StringImpl *v136;
  void *v137;
  void *v138;
  double v139;
  double v140;
  uint64_t v141;
  CMTimeValue v142;
  uint64_t v143;
  uint64_t v144;
  WTF::String *v145;
  int v146;
  int v147;
  int v148;
  BOOL v149;
  int v150;
  BOOL v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  NSObject *v159;
  WTF *v160;
  void *v161;
  char *v162;
  unsigned __int8 *v163;
  int v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  WTF::String *v171;
  double v172;
  WTF::Logger *v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF *v178;
  uint64_t v179;
  WTF::StringImpl **v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  int v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  uint64_t v188;
  double *v189;
  uint64_t v190;
  CMTime v191;
  CMTime v192;
  CMTime v193;
  __int128 v194;
  uint64_t v195;
  CMTime v196;
  __int128 v197;
  uint64_t v198;
  CMTime v199;
  CMTime v200;
  uint64_t v201;
  CMTime v202;
  CMTime v203;
  WTF::Logger *v204[2];
  __int128 v205;
  __int128 v206;
  __int128 v207;
  CMTime v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  CMTime buf;
  WTF::StringImpl *v218;
  int v219;
  WTF::StringImpl *v220;
  int v221;
  WTF::StringImpl *v222;
  int v223;
  WTF::StringImpl *v224;
  CMTime v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 120))
    return this;
  v1 = this;
  if (!*((_BYTE *)this + 1056))
    return this;
  v2 = *((_QWORD *)this + 5);
  v189 = this;
  if (v2)
  {
    v3 = (WTF::Logger *)(*(uint64_t (**)(double *))(*(_QWORD *)this + 24))(this);
    v4 = *((_QWORD *)v1 + 6);
    v204[0] = v3;
    v204[1] = v5;
    *(_QWORD *)&v205 = "setSessionSizeFrameRateAndZoom";
    *((_QWORD *)&v205 + 1) = v4;
    if (!*((_BYTE *)v1 + 1056))
      goto LABEL_367;
    v6 = HIDWORD(*((_QWORD *)v1 + 125));
    LODWORD(v225.value) = *((_QWORD *)v1 + 125);
    BYTE4(v225.value) = 1;
    v225.timescale = v6;
    LOBYTE(v225.flags) = 1;
    v225.epoch = (CMTimeEpoch)v1[141];
    LOBYTE(v226) = 1;
    v227 = *((_QWORD *)v1 + 142);
    v228 = 1;
    v7 = objc_msgSend(*((id *)v1 + 131), "isVideoBinned");
    if (*(_BYTE *)(v2 + 12))
    {
      v8 = v7;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v204);
      WebCore::SizeFrameRateAndZoom::toJSONObject((WebCore::SizeFrameRateAndZoom *)&v225, &buf.value);
      WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)buf.value);
      value = (_DWORD *)buf.value;
      buf.value = 0;
      if (value)
      {
        if (*value == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*value;
      }
      WTF::String::String((WTF::String *)&v216, " binned: ");
      if (v8)
        v10 = 5;
      else
        v10 = 6;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = (WTF::StringImpl *)buf.value;
      buf.value = v202.value;
      v200.value = (CMTimeValue)v215;
      v191.value = (CMTimeValue)v216;
      v208.value = (CMTimeValue)v11;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, &v200.value, &v191.value, &v208.value, &v203);
      if (!v203.value)
      {
        __break(0xC471u);
        JUMPOUT(0x194693C98);
      }
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v12);
        else
          *(_DWORD *)v11 -= 2;
      }
      v13 = v216;
      v216 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v215;
      v215 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = (WTF::StringImpl *)v202.value;
      v202.value = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = qword_1ECE7CD60;
      v17 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v17)
      {
        WTF::String::utf8();
        v19 = v200.value ? v200.value + 16 : 0;
        LODWORD(buf.value) = 136446210;
        *(CMTimeValue *)((char *)&buf.value + 4) = v19;
        _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v17 = v200.value;
        v200.value = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            v17 = WTF::fastFree((WTF *)v17, v18);
          else
            --*(_DWORD *)v17;
        }
      }
      if (WebCore::LogWebRTC)
      {
        v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v21 = *v20;
          if ((v21 & 1) != 0)
            break;
          v22 = __ldaxr(v20);
          if (v22 == v21)
          {
            if (!__stxr(v21 | 1, v20))
            {
              v23 = WTF::Logger::observers((WTF::Logger *)v17);
              v24 = *(unsigned int *)(v23 + 12);
              if ((_DWORD)v24)
              {
                v25 = *(uint64_t **)v23;
                v190 = *(_QWORD *)v23 + 8 * v24;
                v26 = v10 - 1;
                do
                {
                  v27 = *v25;
                  LODWORD(buf.value) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v204);
                  LODWORD(buf.epoch) = 1;
                  WebCore::SizeFrameRateAndZoom::toJSONObject((WebCore::SizeFrameRateAndZoom *)&v225, &v191.value);
                  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v191.value);
                  v28 = (_DWORD *)v191.value;
                  v191.value = 0;
                  if (v28)
                  {
                    if (*v28 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v28;
                  }
                  v219 = 0;
                  WTF::String::String((WTF::String *)&v220, " binned: ");
                  v221 = 0;
                  if (v26)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v29 = (WTF::StringImpl *)v191.value;
                  }
                  else
                  {
                    v45 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                    *MEMORY[0x1E0CBEF70] += 2;
                    v29 = v45;
                  }
                  v222 = v29;
                  v200.value = 0;
                  *(_QWORD *)&v200.timescale = 0;
                  v30 = WTF::fastMalloc((WTF *)0x40);
                  v200.timescale = 4;
                  v200.value = v30;
                  flags = v200.flags;
                  *(_DWORD *)(v30 + 16 * v200.flags) = buf.value;
                  v32 = *(_QWORD *)&buf.timescale;
                  if (*(_QWORD *)&buf.timescale)
                    **(_DWORD **)&buf.timescale += 2;
                  *(_QWORD *)(v30 + 16 * flags + 8) = v32;
                  *(_DWORD *)(v30 + 16 * (flags + 1)) = buf.epoch;
                  v33 = v218;
                  if (v218)
                    *(_DWORD *)v218 += 2;
                  *(_QWORD *)(v30 + 16 * (flags + 1) + 8) = v33;
                  *(_DWORD *)(v30 + 16 * (flags + 2)) = v219;
                  v34 = v220;
                  if (v220)
                    *(_DWORD *)v220 += 2;
                  *(_QWORD *)(v30 + 16 * (flags + 2) + 8) = v34;
                  *(_DWORD *)(v30 + 16 * (flags + 3)) = v221;
                  v35 = v222;
                  if (v222)
                    *(_DWORD *)v222 += 2;
                  *(_QWORD *)(v30 + 16 * (flags + 3) + 8) = v35;
                  v200.flags = flags + 4;
                  (*(void (**)(uint64_t, char *, _QWORD, CMTime *))(*(_QWORD *)v27 + 16))(v27, &WebCore::LogWebRTC, 0, &v200);
                  v36 = (WTF *)v200.value;
                  if (v200.flags)
                  {
                    v37 = v10;
                    v38 = 16 * v200.flags;
                    v39 = (WTF::StringImpl **)(v200.value + 8);
                    do
                    {
                      v40 = *v39;
                      *v39 = 0;
                      if (v40)
                      {
                        if (*(_DWORD *)v40 == 2)
                          WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v18);
                        else
                          *(_DWORD *)v40 -= 2;
                      }
                      v39 += 2;
                      v38 -= 16;
                    }
                    while (v38);
                    v36 = (WTF *)v200.value;
                    v10 = v37;
                  }
                  if (v36)
                  {
                    v200.value = 0;
                    v200.timescale = 0;
                    WTF::fastFree(v36, v18);
                  }
                  v41 = v222;
                  v222 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v42 = v220;
                  v220 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  v43 = v218;
                  v218 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v44 = *(WTF::StringImpl **)&buf.timescale;
                  *(_QWORD *)&buf.timescale = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  ++v25;
                }
                while (v25 != (uint64_t *)v190);
              }
              v46 = __ldxr(v20);
              if (v46 == 1)
              {
                if (!__stlxr(0, v20))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v47 = (WTF::StringImpl *)v203.value;
      v203.value = 0;
      v1 = v189;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
  }
  if (*((_BYTE *)v1 + 1120))
  {
    if (!*((_BYTE *)v1 + 1056))
      goto LABEL_367;
    if (*((_QWORD *)v1 + 139) == *((_QWORD *)v1 + 131))
    {
      objc_msgSend(*((id *)v1 + 121), "videoZoomFactor");
      if (v77 == v1[142])
      {
        v78 = (void *)*((_QWORD *)v1 + 121);
        if (v78)
        {
          v79 = v1[141];
          v204[0] = 0;
          v204[1] = 0;
          *(_QWORD *)&v205 = 0;
          objc_msgSend(v78, "activeVideoMinFrameDuration");
          memset(&v200, 0, sizeof(v200));
          objc_msgSend(v78, "activeVideoMaxFrameDuration");
          if ((BYTE4(v204[1]) & 1) != 0 && (v200.flags & 1) != 0)
          {
            memset(&v191, 0, sizeof(v191));
            PAL::softLinkCoreMediaCMTimeMake((PAL *)1, (int)v79, v80);
            buf = v191;
            *(_OWORD *)&v225.value = *(_OWORD *)v204;
            v225.epoch = v205;
            if ((PAL::softLinkCoreMediaCMTimeCompare((PAL *)&buf, &v225, v81) & 0x80000000) == 0)
            {
              buf = v191;
              v225 = v200;
              this = (double *)PAL::softLinkCoreMediaCMTimeCompare((PAL *)&buf, &v225, v82);
              if ((int)this <= 0)
              {
                v83 = *((_QWORD *)v1 + 5);
                if (v83)
                {
                  this = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)v1 + 24))(v1);
                  v84 = (WTF::StringImpl *)*((_QWORD *)v1 + 6);
                  buf.value = (CMTimeValue)this;
                  *(_QWORD *)&buf.timescale = v85;
                  buf.epoch = (CMTimeEpoch)"setSessionSizeFrameRateAndZoom";
                  v218 = v84;
                  if (*(_BYTE *)(v83 + 12))
                    return (double *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [24]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&buf, " settings already match");
                }
                return this;
              }
            }
          }
        }
      }
    }
  }
  this = (double *)WebCore::AVVideoCaptureSource::lockForConfiguration((id *)v1);
  if (!(_DWORD)this)
    return this;
  v48 = *((_QWORD *)v1 + 144) + 1;
  *((_QWORD *)v1 + 144) = v48;
  if (v48 <= 1)
  {
    v49 = (void *)*((_QWORD *)v1 + 120);
    if (v49)
      objc_msgSend(v49, "beginConfiguration");
  }
  if (!*((_BYTE *)v1 + 1056))
LABEL_367:
    __break(1u);
  objc_msgSend(*((id *)v1 + 121), "setActiveFormat:", *((_QWORD *)v1 + 131));
  v214 = *((WTF::StringImpl **)v1 + 141);
  *(_OWORD *)v204 = 0u;
  v205 = 0u;
  v206 = 0u;
  v207 = 0u;
  v50 = (void *)objc_msgSend((id)objc_msgSend(*((id *)v1 + 121), "activeFormat"), "videoSupportedFrameRateRanges");
  v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", v204, &buf, 16);
  if (!v51)
    goto LABEL_126;
  v52 = 0;
  v53 = *(_QWORD *)v205;
  do
  {
    for (i = 0; i != v51; ++i)
    {
      if (*(_QWORD *)v205 != v53)
        objc_enumerationMutation(v50);
      v55 = (void *)*((_QWORD *)v204[1] + i);
      objc_msgSend(v55, "minFrameRate");
      v57 = v56;
      objc_msgSend(v55, "maxFrameRate");
      if (*(double *)&v214 + 0.001 >= v57 && *(double *)&v214 + -0.001 <= v58)
      {
        if (!v52)
          goto LABEL_114;
        if (v55)
          objc_msgSend(v55, "minFrameDuration");
        else
          memset(&v203, 0, sizeof(v203));
        objc_msgSend(v52, "minFrameDuration");
        v200 = v203;
        v208 = v202;
        if ((int)PAL::softLinkCoreMediaCMTimeCompare((PAL *)&v200, &v208, v60) >= 1)
LABEL_114:
          v52 = v55;
      }
    }
    v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", v204, &buf, 16);
  }
  while (v51);
  if (!v52)
  {
LABEL_126:
    v69 = *((_QWORD *)v1 + 5);
    if (v69)
    {
      v70 = (*(uint64_t (**)(double *))(*(_QWORD *)v1 + 24))(v1);
      v71 = *((_QWORD *)v1 + 6);
      v200.value = v70;
      *(_QWORD *)&v200.timescale = v72;
      v200.epoch = (CMTimeEpoch)"frameDurationForFrameRate";
      v201 = v71;
      if (*(_BYTE *)(v69 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30],double>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&v200, "no frame rate range for rate ", (double *)&v214);
      v73 = *((_QWORD *)v1 + 5);
      if (v73)
      {
        v74 = (*(uint64_t (**)(double *))(*(_QWORD *)v1 + 24))(v1);
        v75 = (WTF::StringImpl *)*((_QWORD *)v1 + 6);
        buf.value = v74;
        *(_QWORD *)&buf.timescale = v76;
        buf.epoch = (CMTimeEpoch)"setSessionSizeFrameRateAndZoom";
        v218 = v75;
        if (*(_BYTE *)(v73 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [61]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "cannot find proper frame rate range for the selected preset\n");
      }
    }
    goto LABEL_257;
  }
  v61 = v1[141];
  objc_msgSend(v52, "minFrameRate");
  v63 = v62;
  objc_msgSend(v52, "maxFrameRate");
  if (v61 > v63)
    v66 = v61;
  else
    v66 = v63;
  if (v61 < v65)
    v65 = v66;
  v1[141] = v65;
  memset(&v200, 0, sizeof(v200));
  PAL::softLinkCoreMediaCMTimeMake((PAL *)1, (int)v65, v64);
  v199 = v200;
  objc_msgSend(v52, "minFrameDuration");
  buf = v199;
  *(_OWORD *)v204 = v197;
  *(_QWORD *)&v205 = v198;
  if ((PAL::softLinkCoreMediaCMTimeCompare((PAL *)&buf, (CMTime *)v204, v67) & 0x80000000) != 0)
  {
    objc_msgSend(v52, "minFrameDuration");
  }
  else
  {
    v196 = v200;
    objc_msgSend(v52, "maxFrameDuration");
    buf = v196;
    *(_OWORD *)v204 = v194;
    *(_QWORD *)&v205 = v195;
    if ((int)PAL::softLinkCoreMediaCMTimeCompare((PAL *)&buf, (CMTime *)v204, v68) < 1)
      goto LABEL_143;
    objc_msgSend(v52, "maxFrameDuration");
  }
  v200 = buf;
LABEL_143:
  v86 = *((_QWORD *)v1 + 5);
  if (v86)
  {
    v87 = (*(uint64_t (**)(double *))(*(_QWORD *)v1 + 24))(v1);
    v88 = *((_QWORD *)v1 + 6);
    v225.value = v87;
    *(_QWORD *)&v225.timescale = v89;
    v225.epoch = (CMTimeEpoch)"setSessionSizeFrameRateAndZoom";
    v226 = v88;
    timescale = v200.timescale;
    v91 = v200.flags & 1;
    if ((~v200.flags & 3) == 0)
      v91 = v200.flags & 1 | 2;
    if ((~v200.flags & 5) == 0)
      v91 |= 4u;
    if ((~v200.flags & 9) == 0)
      v91 |= 8u;
    if ((~v200.flags & 0x11) != 0)
      v92 = v91;
    else
      v92 = v91 | 0x10;
    v94 = (v92 & 1) == 0 || v200.timescale != 0;
    if (v200.value >= 0)
      v95 = 5;
    else
      v95 = 9;
    v96 = !v94;
    if (v94)
    {
      v97 = v200.value;
    }
    else
    {
      v92 = v95;
      v97 = v200.value >> 63;
    }
    if (v96)
      timescale = 1;
    v191.value = v97;
    *(_QWORD *)&v191.timescale = timescale | ((unint64_t)v92 << 32);
    if (*(_BYTE *)(v86 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v225);
      v98 = (WTF::String *)WTF::String::String((WTF::String *)&v212, "setting frame rate to ");
      WTF::String::number(v98, v1[141]);
      WTF::String::String((WTF::String *)&v210, ", duration ");
      WTF::MediaTime::toJSONString((WTF::MediaTime *)&v191);
      buf.value = (CMTimeValue)v213;
      v204[0] = v212;
      v208.value = (CMTimeValue)v211;
      v203.value = (CMTimeValue)v210;
      v202.value = (CMTimeValue)v209;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v204, &v208.value, &v203.value, &v202.value, &v214);
      if (*(double *)&v214 == 0.0)
        goto LABEL_370;
      v100 = v209;
      v209 = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, v99);
        else
          *(_DWORD *)v100 -= 2;
      }
      v101 = v210;
      v210 = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
          WTF::StringImpl::destroy(v101, v99);
        else
          *(_DWORD *)v101 -= 2;
      }
      v102 = v211;
      v211 = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
          WTF::StringImpl::destroy(v102, v99);
        else
          *(_DWORD *)v102 -= 2;
      }
      v103 = v212;
      v212 = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
          WTF::StringImpl::destroy(v103, v99);
        else
          *(_DWORD *)v103 -= 2;
      }
      v104 = v213;
      v213 = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2)
          WTF::StringImpl::destroy(v104, v99);
        else
          *(_DWORD *)v104 -= 2;
      }
      v105 = qword_1ECE7CD60;
      v106 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v106)
      {
        WTF::String::utf8();
        v108 = v204[0] ? (char *)v204[0] + 16 : 0;
        LODWORD(buf.value) = 136446210;
        *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)v108;
        _os_log_impl(&dword_1940B8000, v105, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v106 = v204[0];
        v204[0] = 0;
        if (v106)
        {
          if (*(_DWORD *)v106 == 1)
            v106 = (WTF *)WTF::fastFree(v106, v107);
          else
            --*(_DWORD *)v106;
        }
      }
      if (WebCore::LogWebRTC)
      {
        v109 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v110 = *v109;
          if ((v110 & 1) != 0)
            break;
          v111 = __ldaxr(v109);
          if (v111 == v110)
          {
            if (!__stxr(v110 | 1, v109))
            {
              v112 = WTF::Logger::observers(v106);
              v113 = *(unsigned int *)(v112 + 12);
              if ((_DWORD)v113)
              {
                v114 = *(uint64_t **)v112;
                v115 = *(_QWORD *)v112 + 8 * v113;
                do
                {
                  v116 = *v114;
                  LODWORD(buf.value) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v225);
                  LODWORD(buf.epoch) = 0;
                  v117 = (WTF::String *)WTF::String::String((WTF::String *)&v218, "setting frame rate to ");
                  v118 = v189[141];
                  v219 = 0;
                  WTF::String::number(v117, v118);
                  v221 = 0;
                  WTF::String::String((WTF::String *)&v222, ", duration ");
                  v223 = 1;
                  WTF::MediaTime::toJSONString((WTF::MediaTime *)&v191);
                  v204[0] = 0;
                  v204[1] = 0;
                  v119 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v204[1]) = 5;
                  v204[0] = v119;
                  v120 = HIDWORD(v204[1]);
                  *((_DWORD *)v119 + 4 * HIDWORD(v204[1])) = buf.value;
                  v121 = *(_QWORD *)&buf.timescale;
                  if (*(_QWORD *)&buf.timescale)
                    **(_DWORD **)&buf.timescale += 2;
                  *((_QWORD *)v119 + 2 * v120 + 1) = v121;
                  *((_DWORD *)v119 + 4 * (v120 + 1)) = buf.epoch;
                  v122 = v218;
                  if (v218)
                    *(_DWORD *)v218 += 2;
                  *((_QWORD *)v119 + 2 * (v120 + 1) + 1) = v122;
                  *((_DWORD *)v119 + 4 * (v120 + 2)) = v219;
                  v123 = v220;
                  if (v220)
                    *(_DWORD *)v220 += 2;
                  *((_QWORD *)v119 + 2 * (v120 + 2) + 1) = v123;
                  *((_DWORD *)v119 + 4 * (v120 + 3)) = v221;
                  v124 = v222;
                  if (v222)
                    *(_DWORD *)v222 += 2;
                  *((_QWORD *)v119 + 2 * (v120 + 3) + 1) = v124;
                  *((_DWORD *)v119 + 4 * (v120 + 4)) = v223;
                  v125 = v224;
                  if (v224)
                    *(_DWORD *)v224 += 2;
                  *((_QWORD *)v119 + 2 * (v120 + 4) + 1) = v125;
                  HIDWORD(v204[1]) = v120 + 5;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v116 + 16))(v116, &WebCore::LogWebRTC, 0, v204);
                  v126 = v204[0];
                  if (HIDWORD(v204[1]))
                  {
                    v127 = 16 * HIDWORD(v204[1]);
                    v128 = (WTF::StringImpl **)((char *)v204[0] + 8);
                    do
                    {
                      v129 = *v128;
                      *v128 = 0;
                      if (v129)
                      {
                        if (*(_DWORD *)v129 == 2)
                          WTF::StringImpl::destroy(v129, (WTF::StringImpl *)v107);
                        else
                          *(_DWORD *)v129 -= 2;
                      }
                      v128 += 2;
                      v127 -= 16;
                    }
                    while (v127);
                    v126 = v204[0];
                  }
                  v1 = v189;
                  if (v126)
                  {
                    v204[0] = 0;
                    LODWORD(v204[1]) = 0;
                    WTF::fastFree(v126, v107);
                  }
                  v130 = v224;
                  v224 = 0;
                  if (v130)
                  {
                    if (*(_DWORD *)v130 == 2)
                      WTF::StringImpl::destroy(v130, (WTF::StringImpl *)v107);
                    else
                      *(_DWORD *)v130 -= 2;
                  }
                  v131 = v222;
                  v222 = 0;
                  if (v131)
                  {
                    if (*(_DWORD *)v131 == 2)
                      WTF::StringImpl::destroy(v131, (WTF::StringImpl *)v107);
                    else
                      *(_DWORD *)v131 -= 2;
                  }
                  v132 = v220;
                  v220 = 0;
                  if (v132)
                  {
                    if (*(_DWORD *)v132 == 2)
                      WTF::StringImpl::destroy(v132, (WTF::StringImpl *)v107);
                    else
                      *(_DWORD *)v132 -= 2;
                  }
                  v133 = v218;
                  v218 = 0;
                  if (v133)
                  {
                    if (*(_DWORD *)v133 == 2)
                      WTF::StringImpl::destroy(v133, (WTF::StringImpl *)v107);
                    else
                      *(_DWORD *)v133 -= 2;
                  }
                  v134 = *(WTF::StringImpl **)&buf.timescale;
                  *(_QWORD *)&buf.timescale = 0;
                  if (v134)
                  {
                    if (*(_DWORD *)v134 == 2)
                      WTF::StringImpl::destroy(v134, (WTF::StringImpl *)v107);
                    else
                      *(_DWORD *)v134 -= 2;
                  }
                  ++v114;
                }
                while (v114 != (uint64_t *)v115);
              }
              v135 = __ldxr(v109);
              if (v135 == 1)
              {
                if (!__stlxr(0, v109))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v136 = v214;
      *(double *)&v214 = 0.0;
      if (v136)
      {
        if (*(_DWORD *)v136 == 2)
          WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v107);
        else
          *(_DWORD *)v136 -= 2;
      }
    }
  }
  v137 = (void *)*((_QWORD *)v1 + 121);
  v193 = v200;
  objc_msgSend(v137, "setActiveVideoMinFrameDuration:", &v193);
  v138 = (void *)*((_QWORD *)v1 + 121);
  v192 = v200;
  objc_msgSend(v138, "setActiveVideoMaxFrameDuration:", &v192);
LABEL_257:
  v139 = v1[142];
  objc_msgSend(*((id *)v1 + 121), "videoZoomFactor");
  if (v139 != v140)
  {
    v141 = *((_QWORD *)v1 + 5);
    if (!v141
      || (v142 = (*(uint64_t (**)(double *))(*(_QWORD *)v1 + 24))(v1),
          v143 = *((_QWORD *)v1 + 6),
          v225.value = v142,
          *(_QWORD *)&v225.timescale = v144,
          v225.epoch = (CMTimeEpoch)"setSessionSizeFrameRateAndZoom",
          v226 = v143,
          !*(_BYTE *)(v141 + 12)))
    {
LABEL_342:
      objc_msgSend(*((id *)v1 + 121), "setVideoZoomFactor:", v1[142]);
      goto LABEL_343;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v225);
    v145 = (WTF::String *)WTF::String::String((WTF::String *)&v203, "setting zoom to ");
    WTF::String::number(v145, v1[142]);
    if (v208.value)
    {
      v146 = *(_DWORD *)(v208.value + 4);
      if (v203.value)
        goto LABEL_262;
    }
    else
    {
      v146 = 0;
      if (v203.value)
      {
LABEL_262:
        v147 = *(_DWORD *)(v203.value + 4);
        if (v202.value)
        {
LABEL_263:
          v148 = *(_DWORD *)(v202.value + 4);
LABEL_264:
          if ((v148 | v147) < 0)
            goto LABEL_370;
          v149 = __OFADD__(v147, v148);
          v150 = v147 + v148;
          v151 = v149;
          if (v146 < 0)
            goto LABEL_370;
          if (v151)
            goto LABEL_370;
          v152 = (v146 + v150);
          if (__OFADD__(v146, v150))
            goto LABEL_370;
          if (v208.value && (*(_BYTE *)(v208.value + 16) & 4) == 0)
          {
            v153 = 0;
            goto LABEL_278;
          }
          if (v203.value)
          {
            v154 = *(_DWORD *)(v203.value + 16);
            v153 = (v154 >> 2) & 1;
            if (v202.value && (v154 & 4) != 0)
              goto LABEL_277;
          }
          else
          {
            if (v202.value)
            {
LABEL_277:
              v153 = (*(unsigned __int8 *)(v202.value + 16) >> 2) & 1;
              goto LABEL_278;
            }
            v153 = 1;
          }
LABEL_278:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v152, v153, v208.value, v203.value, v202.value, &buf);
          v200.value = buf.value;
          if (buf.value)
          {
            v156 = (WTF::StringImpl *)v202.value;
            v202.value = 0;
            if (v156)
            {
              if (*(_DWORD *)v156 == 2)
                WTF::StringImpl::destroy(v156, v155);
              else
                *(_DWORD *)v156 -= 2;
            }
            v157 = (WTF::StringImpl *)v203.value;
            v203.value = 0;
            if (v157)
            {
              if (*(_DWORD *)v157 == 2)
                WTF::StringImpl::destroy(v157, v155);
              else
                *(_DWORD *)v157 -= 2;
            }
            v158 = (WTF::StringImpl *)v208.value;
            v208.value = 0;
            if (v158)
            {
              if (*(_DWORD *)v158 == 2)
                WTF::StringImpl::destroy(v158, v155);
              else
                *(_DWORD *)v158 -= 2;
            }
            v159 = qword_1ECE7CD60;
            v160 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v160)
            {
              WTF::String::utf8();
              v162 = v204[0] ? (char *)v204[0] + 16 : 0;
              LODWORD(buf.value) = 136446210;
              *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)v162;
              _os_log_impl(&dword_1940B8000, v159, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v160 = v204[0];
              v204[0] = 0;
              if (v160)
              {
                if (*(_DWORD *)v160 == 1)
                  v160 = (WTF *)WTF::fastFree(v160, v161);
                else
                  --*(_DWORD *)v160;
              }
            }
            if (WebCore::LogWebRTC)
            {
              v163 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v164 = *v163;
                if ((v164 & 1) != 0)
                  break;
                v165 = __ldaxr(v163);
                if (v165 == v164)
                {
                  if (!__stxr(v164 | 1, v163))
                  {
                    v166 = WTF::Logger::observers(v160);
                    v167 = *(unsigned int *)(v166 + 12);
                    if ((_DWORD)v167)
                    {
                      v168 = *(uint64_t **)v166;
                      v169 = *(_QWORD *)v166 + 8 * v167;
                      do
                      {
                        v170 = *v168;
                        LODWORD(buf.value) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v225);
                        LODWORD(buf.epoch) = 0;
                        v171 = (WTF::String *)WTF::String::String((WTF::String *)&v218, "setting zoom to ");
                        v172 = v189[142];
                        v219 = 0;
                        WTF::String::number(v171, v172);
                        v204[0] = 0;
                        v204[1] = 0;
                        v173 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v204[1]) = 3;
                        v204[0] = v173;
                        v174 = HIDWORD(v204[1]);
                        *((_DWORD *)v173 + 4 * HIDWORD(v204[1])) = buf.value;
                        v175 = *(_QWORD *)&buf.timescale;
                        if (*(_QWORD *)&buf.timescale)
                          **(_DWORD **)&buf.timescale += 2;
                        *((_QWORD *)v173 + 2 * v174 + 1) = v175;
                        *((_DWORD *)v173 + 4 * (v174 + 1)) = buf.epoch;
                        v176 = v218;
                        if (v218)
                          *(_DWORD *)v218 += 2;
                        *((_QWORD *)v173 + 2 * (v174 + 1) + 1) = v176;
                        *((_DWORD *)v173 + 4 * (v174 + 2)) = v219;
                        v177 = v220;
                        if (v220)
                          *(_DWORD *)v220 += 2;
                        *((_QWORD *)v173 + 2 * (v174 + 2) + 1) = v177;
                        HIDWORD(v204[1]) = v174 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v170 + 16))(v170, &WebCore::LogWebRTC, 0, v204);
                        v178 = v204[0];
                        if (HIDWORD(v204[1]))
                        {
                          v179 = 16 * HIDWORD(v204[1]);
                          v180 = (WTF::StringImpl **)((char *)v204[0] + 8);
                          do
                          {
                            v181 = *v180;
                            *v180 = 0;
                            if (v181)
                            {
                              if (*(_DWORD *)v181 == 2)
                                WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v161);
                              else
                                *(_DWORD *)v181 -= 2;
                            }
                            v180 += 2;
                            v179 -= 16;
                          }
                          while (v179);
                          v178 = v204[0];
                        }
                        if (v178)
                        {
                          v204[0] = 0;
                          LODWORD(v204[1]) = 0;
                          WTF::fastFree(v178, v161);
                        }
                        v182 = v220;
                        v220 = 0;
                        if (v182)
                        {
                          if (*(_DWORD *)v182 == 2)
                            WTF::StringImpl::destroy(v182, (WTF::StringImpl *)v161);
                          else
                            *(_DWORD *)v182 -= 2;
                        }
                        v183 = v218;
                        v218 = 0;
                        if (v183)
                        {
                          if (*(_DWORD *)v183 == 2)
                            WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v161);
                          else
                            *(_DWORD *)v183 -= 2;
                        }
                        v184 = *(WTF::StringImpl **)&buf.timescale;
                        *(_QWORD *)&buf.timescale = 0;
                        if (v184)
                        {
                          if (*(_DWORD *)v184 == 2)
                            WTF::StringImpl::destroy(v184, (WTF::StringImpl *)v161);
                          else
                            *(_DWORD *)v184 -= 2;
                        }
                        ++v168;
                      }
                      while (v168 != (uint64_t *)v169);
                    }
                    v185 = __ldxr(v163);
                    if (v185 == 1)
                    {
                      v1 = v189;
                      if (!__stlxr(0, v163))
                        break;
                    }
                    else
                    {
                      __clrex();
                      v1 = v189;
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v186 = (WTF::StringImpl *)v200.value;
            v200.value = 0;
            if (v186)
            {
              if (*(_DWORD *)v186 == 2)
                WTF::StringImpl::destroy(v186, (WTF::StringImpl *)v161);
              else
                *(_DWORD *)v186 -= 2;
            }
            goto LABEL_342;
          }
LABEL_370:
          __break(0xC471u);
          JUMPOUT(0x194693C90);
        }
LABEL_363:
        v148 = 0;
        goto LABEL_264;
      }
    }
    v147 = 0;
    if (v202.value)
      goto LABEL_263;
    goto LABEL_363;
  }
LABEL_343:
  std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::VideoPreset,false> const&>((uint64_t)(v1 + 133), (uint64_t)(v1 + 125));
  this = (double *)objc_msgSend(*((id *)v1 + 121), "unlockForConfiguration");
  v187 = *((_QWORD *)v1 + 144);
  if (v187)
  {
    v188 = v187 - 1;
    *((_QWORD *)v1 + 144) = v188;
    if (!v188)
    {
      this = (double *)*((_QWORD *)v1 + 120);
      if (this)
        return (double *)objc_msgSend(this, "commitConfiguration");
    }
  }
  return this;
}

void sub_194693CA4(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, _Unwind_Exception *exception_objecta, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,uint64_t a43,uint64_t a44,WTF::StringImpl *a45,uint64_t a46,uint64_t a47,WTF::StringImpl *a48,uint64_t a49,uint64_t a50,WTF *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,WTF::StringImpl *a62,WTF::StringImpl *a63)
{
  uint64_t a67;
  WTF::StringImpl *a68;
  uint64_t a69;
  WTF::StringImpl *a70;
  WTF::StringImpl *a71;
  WTF::StringImpl *a72;
  uint64_t v72;
  int v74;
  WTF::StringImpl *v75;
  id v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  NSObject *v88;
  uint64_t v89;
  void *v90;
  char *v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl **v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  void *v118;
  _Unwind_Exception *exception_object;

  v74 = (int)a2;
  v75 = (WTF::StringImpl *)a67;
  a67 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, a2);
    else
      *(_DWORD *)v75 -= 2;
  }
  if (v74 != 1)
    _Unwind_Resume(a1);
  v76 = objc_begin_catch(a1);
  v77 = a14[5];
  if (!v77)
    goto LABEL_93;
  v78 = v76;
  v79 = (*(uint64_t (**)(_QWORD *))(*a14 + 24))(a14);
  v80 = a14[6];
  a17 = v79;
  a18 = v81;
  a19 = (uint64_t)"setSessionSizeFrameRateAndZoom";
  a20 = v80;
  exception_object = (_Unwind_Exception *)objc_msgSend(v78, "name");
  v118 = (void *)objc_msgSend(v78, "reason");
  if (!*(_BYTE *)(v77 + 12))
    goto LABEL_93;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&a17);
  WTF::String::String((WTF::String *)&STACK[0x200], "error configuring device ");
  MEMORY[0x19AEA5508](&a72, -[_Unwind_Exception description](exception_object, "description"));
  WTF::String::String((WTF::String *)&a71, ", reason : ");
  MEMORY[0x19AEA5508](&a70, objc_msgSend(v118, "description"));
  *(_QWORD *)(v72 - 224) = STACK[0x208];
  a68 = (WTF::StringImpl *)STACK[0x200];
  STACK[0x228] = (unint64_t)a72;
  STACK[0x220] = (unint64_t)a71;
  STACK[0x218] = (unint64_t)a70;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v72 - 224, (uint64_t *)&a68, (uint64_t *)&STACK[0x228], (uint64_t *)&STACK[0x220], (uint64_t *)&STACK[0x218], &STACK[0x210]);
  if (!STACK[0x210])
  {
    __break(0xC471u);
LABEL_102:
    JUMPOUT(0x194693B68);
  }
  v83 = a70;
  a70 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v82);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = a71;
  a71 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, v82);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = a72;
  a72 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, v82);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = (WTF::StringImpl *)STACK[0x200];
  STACK[0x200] = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v82);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = (WTF::StringImpl *)STACK[0x208];
  STACK[0x208] = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, v82);
    else
      *(_DWORD *)v87 -= 2;
  }
  v88 = qword_1ECE7CD60;
  v89 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v89)
  {
    WTF::String::utf8();
    v91 = a68 ? (char *)a68 + 16 : 0;
    *(_DWORD *)(v72 - 224) = 136446210;
    STACK[0x2B4] = (unint64_t)v91;
    _os_log_impl(&dword_1940B8000, v88, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)(v72 - 224), 0xCu);
    v89 = (uint64_t)a68;
    a68 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 1)
        v89 = WTF::fastFree((WTF *)v89, v90);
      else
        --*(_DWORD *)v89;
    }
  }
  if (WebCore::LogWebRTC && byte_1ECE7CD50)
  {
    v92 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    do
    {
      while (1)
      {
        v93 = *v92;
        if ((v93 & 1) != 0)
          goto LABEL_90;
        v94 = __ldaxr(v92);
        if (v94 == v93)
          break;
        __clrex();
      }
    }
    while (__stxr(v93 | 1, v92));
    v95 = WTF::Logger::observers((WTF::Logger *)v89);
    v96 = *(unsigned int *)(v95 + 12);
    if ((_DWORD)v96)
    {
      v97 = *(uint64_t **)v95;
      v117 = *(_QWORD *)v95 + 8 * v96;
      do
      {
        v98 = *v97;
        *(_DWORD *)(v72 - 224) = 0;
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&a17);
        *(_DWORD *)(v72 - 208) = 0;
        WTF::String::String((WTF::String *)(v72 - 200), "error configuring device ");
        *(_DWORD *)(v72 - 192) = 0;
        MEMORY[0x19AEA5508](v72 - 184, -[_Unwind_Exception description](exception_object, "description"));
        *(_DWORD *)(v72 - 176) = 0;
        WTF::String::String((WTF::String *)(v72 - 168), ", reason : ");
        *(_DWORD *)(v72 - 160) = 0;
        MEMORY[0x19AEA5508](v72 - 152, objc_msgSend(v118, "description"));
        a68 = 0;
        a69 = 0;
        v99 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x50);
        LODWORD(a69) = 5;
        a68 = v99;
        v100 = HIDWORD(a69);
        *((_DWORD *)v99 + 4 * HIDWORD(a69)) = *(_DWORD *)(v72 - 224);
        v101 = *(_DWORD **)(v72 - 216);
        if (v101)
          *v101 += 2;
        *((_QWORD *)v99 + 2 * v100 + 1) = v101;
        *((_DWORD *)v99 + 4 * (v100 + 1)) = *(_DWORD *)(v72 - 208);
        v102 = *(_DWORD **)(v72 - 200);
        if (v102)
          *v102 += 2;
        *((_QWORD *)v99 + 2 * (v100 + 1) + 1) = v102;
        *((_DWORD *)v99 + 4 * (v100 + 2)) = *(_DWORD *)(v72 - 192);
        v103 = *(_DWORD **)(v72 - 184);
        if (v103)
          *v103 += 2;
        *((_QWORD *)v99 + 2 * (v100 + 2) + 1) = v103;
        *((_DWORD *)v99 + 4 * (v100 + 3)) = *(_DWORD *)(v72 - 176);
        v104 = *(_DWORD **)(v72 - 168);
        if (v104)
          *v104 += 2;
        *((_QWORD *)v99 + 2 * (v100 + 3) + 1) = v104;
        *((_DWORD *)v99 + 4 * (v100 + 4)) = *(_DWORD *)(v72 - 160);
        v105 = *(_DWORD **)(v72 - 152);
        if (v105)
          *v105 += 2;
        *((_QWORD *)v99 + 2 * (v100 + 4) + 1) = v105;
        HIDWORD(a69) = v100 + 5;
        (*(void (**)(uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v98 + 16))(v98, &WebCore::LogWebRTC, 1, &a68);
        v106 = a68;
        if (HIDWORD(a69))
        {
          v107 = 16 * HIDWORD(a69);
          v108 = (WTF::StringImpl **)((char *)a68 + 8);
          do
          {
            v109 = *v108;
            *v108 = 0;
            if (v109)
            {
              if (*(_DWORD *)v109 == 2)
                WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v90);
              else
                *(_DWORD *)v109 -= 2;
            }
            v108 += 2;
            v107 -= 16;
          }
          while (v107);
          v106 = a68;
        }
        if (v106)
        {
          a68 = 0;
          LODWORD(a69) = 0;
          WTF::fastFree(v106, v90);
        }
        v110 = *(WTF::StringImpl **)(v72 - 152);
        *(_QWORD *)(v72 - 152) = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
            WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v90);
          else
            *(_DWORD *)v110 -= 2;
        }
        v111 = *(WTF::StringImpl **)(v72 - 168);
        *(_QWORD *)(v72 - 168) = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 2)
            WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v90);
          else
            *(_DWORD *)v111 -= 2;
        }
        v112 = *(WTF::StringImpl **)(v72 - 184);
        *(_QWORD *)(v72 - 184) = 0;
        if (v112)
        {
          if (*(_DWORD *)v112 == 2)
            WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v90);
          else
            *(_DWORD *)v112 -= 2;
        }
        v113 = *(WTF::StringImpl **)(v72 - 200);
        *(_QWORD *)(v72 - 200) = 0;
        if (v113)
        {
          if (*(_DWORD *)v113 == 2)
            WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v90);
          else
            *(_DWORD *)v113 -= 2;
        }
        v114 = *(WTF::StringImpl **)(v72 - 216);
        *(_QWORD *)(v72 - 216) = 0;
        if (v114)
        {
          if (*(_DWORD *)v114 == 2)
            WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v90);
          else
            *(_DWORD *)v114 -= 2;
        }
        ++v97;
      }
      while (v97 != (uint64_t *)v117);
    }
    v115 = __ldxr(v92);
    if (v115 == 1)
    {
      if (!__stlxr(0, v92))
        goto LABEL_90;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  }
LABEL_90:
  v116 = (WTF::StringImpl *)STACK[0x210];
  STACK[0x210] = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v90);
    else
      *(_DWORD *)v116 -= 2;
  }
LABEL_93:
  objc_end_catch();
  goto LABEL_102;
}

void sub_1946949F0(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned __int8 *v2;
  int v3;
  WTF::StringImpl *v4;

  v3 = __ldxr(v2);
  if (v3 == 1)
  {
    if (!__stlxr(0, v2))
    {
LABEL_6:
      v4 = (WTF::StringImpl *)STACK[0x210];
      STACK[0x210] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      objc_end_catch();
      JUMPOUT(0x1946943D4);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebCore::AVVideoCaptureSource::lockForConfiguration(id *this)
{
  uint64_t v2;
  _BYTE *v3;
  id v4;
  BOOL v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  BOOL v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD v53[4];
  id v54;
  WTF::Logger *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  __int128 buf;
  const char *v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65[3];

  v65[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v54 = 0;
  v2 = objc_msgSend(this[121], "lockForConfiguration:", &v54);
  if ((v2 & 1) != 0)
    return v2;
  v3 = this[5];
  v4 = v54;
  if (v3)
    v5 = v54 == 0;
  else
    v5 = 1;
  if (v5)
  {
LABEL_91:
    if (v3)
      v48 = v4 == 0;
    else
      v48 = 0;
    if (v48)
    {
      v49 = (*((uint64_t (**)(id *))*this + 3))(this);
      v50 = (WTF::StringImpl *)this[6];
      *(_QWORD *)&buf = v49;
      *((_QWORD *)&buf + 1) = v51;
      v62 = "lockForConfiguration";
      v63 = v50;
      if (v3[12])
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "unknown error locking configuration");
    }
    return v2;
  }
  v6 = (*((uint64_t (**)(id *))*this + 3))(this);
  v7 = this[6];
  v53[0] = v6;
  v53[1] = v8;
  v53[2] = "lockForConfiguration";
  v53[3] = v7;
  if (!v3[12])
  {
LABEL_90:
    v3 = this[5];
    v4 = v54;
    goto LABEL_91;
  }
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
  WTF::String::String((WTF::String *)&v58, "error locking configuration ");
  result = MEMORY[0x19AEA5508](&v57, objc_msgSend(v54, "localizedDescription"));
  if (v59)
  {
    v10 = *((_DWORD *)v59 + 1);
    if (v58)
      goto LABEL_9;
LABEL_105:
    v11 = 0;
    if (v57)
      goto LABEL_10;
LABEL_106:
    v12 = 0;
    goto LABEL_11;
  }
  v10 = 0;
  if (!v58)
    goto LABEL_105;
LABEL_9:
  v11 = *((_DWORD *)v58 + 1);
  if (!v57)
    goto LABEL_106;
LABEL_10:
  v12 = *((_DWORD *)v57 + 1);
LABEL_11:
  if ((v12 | v11) < 0)
    goto LABEL_109;
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  v15 = v13;
  if (v10 < 0)
    goto LABEL_109;
  if (v15)
    goto LABEL_109;
  result = (v10 + v14);
  if (__OFADD__(v10, v14))
    goto LABEL_109;
  if (v59 && (*((_BYTE *)v59 + 16) & 4) == 0)
  {
    v16 = 0;
    goto LABEL_25;
  }
  if (v58)
  {
    v17 = *((_DWORD *)v58 + 4);
    v16 = (v17 >> 2) & 1;
    if (v57 && (v17 & 4) != 0)
      goto LABEL_24;
  }
  else
  {
    if (v57)
    {
LABEL_24:
      v16 = (*((unsigned __int8 *)v57 + 16) >> 2) & 1;
      goto LABEL_25;
    }
    v16 = 1;
  }
LABEL_25:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v16, v59, (uint64_t)v58, (uint64_t)v57, &buf);
  v60 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    v19 = v57;
    v57 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v58;
    v58 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v59;
    v59 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v18);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = qword_1ECE7CD60;
    v23 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v23)
    {
      WTF::String::utf8();
      v25 = v55 ? (char *)v55 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v25;
      _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v23 = (uint64_t)v55;
      v55 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          v23 = WTF::fastFree((WTF *)v23, v24);
        else
          --*(_DWORD *)v23;
      }
    }
    if (WebCore::LogWebRTC && byte_1ECE7CD50)
    {
      v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v27 = *v26;
        if ((v27 & 1) != 0)
          break;
        v28 = __ldaxr(v26);
        if (v28 == v27)
        {
          if (!__stxr(v27 | 1, v26))
          {
            v52 = v2;
            v29 = WTF::Logger::observers((WTF::Logger *)v23);
            v30 = *(unsigned int *)(v29 + 12);
            if ((_DWORD)v30)
            {
              v31 = *(uint64_t **)v29;
              v32 = *(_QWORD *)v29 + 8 * v30;
              do
              {
                v33 = *v31;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
                LODWORD(v62) = 0;
                WTF::String::String((WTF::String *)&v63, "error locking configuration ");
                v64 = 0;
                MEMORY[0x19AEA5508](v65, objc_msgSend(v54, "localizedDescription"));
                v55 = 0;
                v56 = 0;
                v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                LODWORD(v56) = 3;
                v55 = v34;
                v35 = HIDWORD(v56);
                *((_DWORD *)v34 + 4 * HIDWORD(v56)) = buf;
                v36 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v34 + 2 * v35 + 1) = v36;
                *((_DWORD *)v34 + 4 * (v35 + 1)) = (_DWORD)v62;
                v37 = v63;
                if (v63)
                  *(_DWORD *)v63 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
                *((_DWORD *)v34 + 4 * (v35 + 2)) = v64;
                v38 = v65[0];
                if (v65[0])
                  *(_DWORD *)v65[0] += 2;
                *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
                HIDWORD(v56) = v35 + 3;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, &WebCore::LogWebRTC, 1, &v55);
                v39 = v55;
                if (HIDWORD(v56))
                {
                  v40 = 16 * HIDWORD(v56);
                  v41 = (WTF::StringImpl **)((char *)v55 + 8);
                  do
                  {
                    v42 = *v41;
                    *v41 = 0;
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v24);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                    v41 += 2;
                    v40 -= 16;
                  }
                  while (v40);
                  v39 = v55;
                }
                if (v39)
                {
                  v55 = 0;
                  LODWORD(v56) = 0;
                  WTF::fastFree(v39, v24);
                }
                v43 = v65[0];
                v65[0] = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = v63;
                v63 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                ++v31;
              }
              while (v31 != (uint64_t *)v32);
            }
            v46 = __ldxr(v26);
            if (v46 == 1)
            {
              v2 = v52;
              if (!__stlxr(0, v26))
                break;
            }
            else
            {
              __clrex();
              v2 = v52;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v47 = v60;
    v60 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v24);
      else
        *(_DWORD *)v47 -= 2;
    }
    goto LABEL_90;
  }
LABEL_109:
  __break(0xC471u);
  return result;
}

void sub_19469525C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  unsigned __int8 *v29;
  int v31;

  v31 = __ldxr(v29);
  if (v31 == 1)
  {
    if (!__stlxr(0, v29))
    {
LABEL_6:
      if (a23)
      {
        if (*(_DWORD *)a23 == 2)
          WTF::StringImpl::destroy(a23, a2);
        else
          *(_DWORD *)a23 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_19469544C()
{
  JUMPOUT(0x19469543CLL);
}

uint64_t WebCore::AVVideoCaptureSource::updateWhiteBalanceMode(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;

  v1 = this;
  if (*(_BYTE *)(this + 1161))
  {
    if (!*(_BYTE *)(this + 1162))
    {
      *(_BYTE *)(this + 1162) = 1;
      v2 = *(_QWORD *)(this + 1152) + 1;
      *(_QWORD *)(this + 1152) = v2;
      if (v2 <= 1)
      {
        v3 = *(void **)(this + 960);
        if (v3)
          objc_msgSend(v3, "beginConfiguration");
      }
    }
    this = WebCore::AVVideoCaptureSource::lockForConfiguration((id *)v1);
    if ((_DWORD)this)
    {
      v4 = *(void **)(v1 + 968);
      v5 = *(char *)(v1 + 273);
      if (v5 > 3)
        v6 = 1;
      else
        v6 = qword_19689B1C0[v5];
      objc_msgSend(*(id *)(v1 + 968), "setWhiteBalanceMode:", v6);
      return objc_msgSend(v4, "unlockForConfiguration");
    }
  }
  else
  {
    *(_BYTE *)(this + 1164) = 1;
  }
  return this;
}

void sub_194695548(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AVVideoCaptureSource::updateTorch(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  double v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  _QWORD v52[4];
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::Logger *v58;
  uint64_t v59;
  id v60;
  __int128 buf;
  const char *v62;
  WTF::StringImpl *v63;
  int v64;
  _QWORD v65[9];

  v1 = this;
  v65[6] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 1161))
  {
    *(_BYTE *)(this + 1163) = 1;
    return this;
  }
  if (!*(_BYTE *)(this + 1162))
  {
    *(_BYTE *)(this + 1162) = 1;
    v2 = *(_QWORD *)(this + 1152) + 1;
    *(_QWORD *)(this + 1152) = v2;
    if (v2 <= 1)
    {
      v3 = *(void **)(this + 960);
      if (v3)
        objc_msgSend(v3, "beginConfiguration");
    }
  }
  this = WebCore::AVVideoCaptureSource::lockForConfiguration((id *)v1);
  if ((_DWORD)this)
  {
    v4 = *(void **)(v1 + 968);
    if (*(_BYTE *)(v1 + 288))
    {
      v60 = 0;
      *(float *)&v5 = PAL::get_AVFoundation_AVCaptureMaxAvailableTorchLevel((PAL *)this);
      if ((objc_msgSend(v4, "setTorchModeOnWithLevel:error:", &v60, v5) & 1) == 0)
      {
        v6 = *(_QWORD *)(v1 + 40);
        v7 = v60;
        if (!v6 || !v60)
        {
LABEL_98:
          if (v6 && !v7)
          {
            v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
            v50 = *(WTF::StringImpl **)(v1 + 48);
            *(_QWORD *)&buf = v49;
            *((_QWORD *)&buf + 1) = v51;
            v62 = "updateTorch";
            v63 = v50;
            if (*(_BYTE *)(v6 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23]>((uint64_t)&WebCore::LogWebRTC, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "unknown error on torch");
          }
          return objc_msgSend(v4, "unlockForConfiguration");
        }
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
        v9 = *(_QWORD *)(v1 + 48);
        v52[0] = v8;
        v52[1] = v10;
        v52[2] = "updateTorch";
        v52[3] = v9;
        if (!*(_BYTE *)(v6 + 12))
        {
LABEL_97:
          v6 = *(_QWORD *)(v1 + 40);
          v7 = v60;
          goto LABEL_98;
        }
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
        WTF::String::String((WTF::String *)&v54, "error turning on torch ");
        this = MEMORY[0x19AEA5508](&v53, objc_msgSend(v60, "localizedDescription"));
        if (v55)
        {
          v11 = *((_DWORD *)v55 + 1);
          if (v54)
            goto LABEL_14;
        }
        else
        {
          v11 = 0;
          if (v54)
          {
LABEL_14:
            v12 = *((_DWORD *)v54 + 1);
            if (v53)
            {
LABEL_15:
              v13 = *((_DWORD *)v53 + 1);
LABEL_16:
              if ((v13 | v12) < 0)
                goto LABEL_114;
              v14 = __OFADD__(v12, v13);
              v15 = v12 + v13;
              v16 = v14;
              if (v11 < 0)
                goto LABEL_114;
              if (v16)
                goto LABEL_114;
              this = (v11 + v15);
              if (__OFADD__(v11, v15))
                goto LABEL_114;
              if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0)
              {
                v17 = 0;
                goto LABEL_32;
              }
              if (v54)
              {
                v18 = *((_DWORD *)v54 + 4);
                v17 = (v18 >> 2) & 1;
                if (v53 && (v18 & 4) != 0)
                  goto LABEL_31;
              }
              else
              {
                if (v53)
                {
LABEL_31:
                  v17 = (*((unsigned __int8 *)v53 + 16) >> 2) & 1;
                  goto LABEL_32;
                }
                v17 = 1;
              }
LABEL_32:
              this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(this, v17, v55, (uint64_t)v54, (uint64_t)v53, &v57);
              v56 = v57;
              if (v57)
              {
                v20 = v53;
                v53 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2)
                    WTF::StringImpl::destroy(v20, v19);
                  else
                    *(_DWORD *)v20 -= 2;
                }
                v21 = v54;
                v54 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                    WTF::StringImpl::destroy(v21, v19);
                  else
                    *(_DWORD *)v21 -= 2;
                }
                v22 = v55;
                v55 = 0;
                if (v22)
                {
                  if (*(_DWORD *)v22 == 2)
                    WTF::StringImpl::destroy(v22, v19);
                  else
                    *(_DWORD *)v22 -= 2;
                }
                v23 = qword_1ECE7CD60;
                v24 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v24)
                {
                  WTF::String::utf8();
                  v26 = v58 ? (char *)v58 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v26;
                  _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v24 = (uint64_t)v58;
                  v58 = 0;
                  if (v24)
                  {
                    if (*(_DWORD *)v24 == 1)
                      v24 = WTF::fastFree((WTF *)v24, v25);
                    else
                      --*(_DWORD *)v24;
                  }
                }
                if (WebCore::LogWebRTC && byte_1ECE7CD50)
                {
                  v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v28 = *v27;
                    if ((v28 & 1) != 0)
                      break;
                    v29 = __ldaxr(v27);
                    if (v29 == v28)
                    {
                      if (!__stxr(v28 | 1, v27))
                      {
                        v30 = WTF::Logger::observers((WTF::Logger *)v24);
                        v31 = *(unsigned int *)(v30 + 12);
                        if ((_DWORD)v31)
                        {
                          v32 = *(uint64_t **)v30;
                          v33 = *(_QWORD *)v30 + 8 * v31;
                          do
                          {
                            v34 = *v32;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v52);
                            LODWORD(v62) = 0;
                            WTF::String::String((WTF::String *)&v63, "error turning on torch ");
                            v64 = 0;
                            MEMORY[0x19AEA5508](v65, objc_msgSend(v60, "localizedDescription"));
                            v58 = 0;
                            v59 = 0;
                            v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                            LODWORD(v59) = 3;
                            v58 = v35;
                            v36 = HIDWORD(v59);
                            *((_DWORD *)v35 + 4 * HIDWORD(v59)) = buf;
                            v37 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v35 + 2 * v36 + 1) = v37;
                            *((_DWORD *)v35 + 4 * (v36 + 1)) = (_DWORD)v62;
                            v38 = v63;
                            if (v63)
                              *(_DWORD *)v63 += 2;
                            *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
                            *((_DWORD *)v35 + 4 * (v36 + 2)) = v64;
                            v39 = v65[0];
                            if (v65[0])
                              *(_DWORD *)v65[0] += 2;
                            *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
                            HIDWORD(v59) = v36 + 3;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, &WebCore::LogWebRTC, 1, &v58);
                            v40 = v58;
                            if (HIDWORD(v59))
                            {
                              v41 = 16 * HIDWORD(v59);
                              v42 = (WTF::StringImpl **)((char *)v58 + 8);
                              do
                              {
                                v43 = *v42;
                                *v42 = 0;
                                if (v43)
                                {
                                  if (*(_DWORD *)v43 == 2)
                                    WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v25);
                                  else
                                    *(_DWORD *)v43 -= 2;
                                }
                                v42 += 2;
                                v41 -= 16;
                              }
                              while (v41);
                              v40 = v58;
                            }
                            if (v40)
                            {
                              v58 = 0;
                              LODWORD(v59) = 0;
                              WTF::fastFree(v40, v25);
                            }
                            v44 = (WTF::StringImpl *)v65[0];
                            v65[0] = 0;
                            if (v44)
                            {
                              if (*(_DWORD *)v44 == 2)
                                WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v25);
                              else
                                *(_DWORD *)v44 -= 2;
                            }
                            v45 = v63;
                            v63 = 0;
                            if (v45)
                            {
                              if (*(_DWORD *)v45 == 2)
                                WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                              else
                                *(_DWORD *)v45 -= 2;
                            }
                            v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v46)
                            {
                              if (*(_DWORD *)v46 == 2)
                                WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                              else
                                *(_DWORD *)v46 -= 2;
                            }
                            ++v32;
                          }
                          while (v32 != (uint64_t *)v33);
                        }
                        v47 = __ldxr(v27);
                        if (v47 == 1)
                        {
                          if (!__stlxr(0, v27))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v48 = v56;
                v56 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                goto LABEL_97;
              }
LABEL_114:
              __break(0xC471u);
              return this;
            }
LABEL_111:
            v13 = 0;
            goto LABEL_16;
          }
        }
        v12 = 0;
        if (v53)
          goto LABEL_15;
        goto LABEL_111;
      }
    }
    else
    {
      objc_msgSend(*(id *)(v1 + 968), "setTorchMode:", *(_QWORD *)(v1 + 1296));
    }
    return objc_msgSend(v4, "unlockForConfiguration");
  }
  return this;
}

void sub_1946963F0(_Unwind_Exception *exc_buf, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const char *a19, uint64_t a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,WTF::Logger *a26,uint64_t a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35)
{
  _QWORD *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  int v40;
  WTF::StringImpl *v41;
  id v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  NSObject *v55;
  uint64_t v56;
  void *v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  WTF *v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  void *v85;
  void *v86;

  v38 = (int)a2;
  v40 = __ldxr(v36);
  if (v40 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      v41 = a24;
      a24 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, a2);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (v38 != 1)
        _Unwind_Resume(exc_buf);
      v42 = objc_begin_catch(exc_buf);
      v43 = v35[5];
      if (!v43)
        goto LABEL_97;
      v44 = v42;
      v45 = (*(uint64_t (**)(_QWORD *))(*v35 + 24))(v35);
      v46 = v35[6];
      a17 = v45;
      a18 = v47;
      a19 = "updateTorch";
      a20 = v46;
      v86 = (void *)objc_msgSend(v44, "name");
      v85 = (void *)objc_msgSend(v44, "reason");
      if (!*(_BYTE *)(v43 + 12))
        goto LABEL_97;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&a17);
      WTF::String::String((WTF::String *)&a31, "error turning on torch ");
      MEMORY[0x19AEA5508](&a30, objc_msgSend(v86, "description"));
      WTF::String::String((WTF::String *)&a29, ", reason : ");
      MEMORY[0x19AEA5508](&a28, objc_msgSend(v85, "description"));
      v48 = a32;
      a26 = a31;
      *(_QWORD *)(v37 - 200) = a30;
      *(_QWORD *)(v37 - 192) = v48;
      a34 = a28;
      a35 = a29;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v37 - 192, (uint64_t *)&a26, (uint64_t *)(v37 - 200), (uint64_t *)&a35, (uint64_t *)&a34, &a33);
      if (!a33)
      {
        __break(0xC471u);
LABEL_106:
        JUMPOUT(0x194696358);
      }
      v50 = a28;
      a28 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v49);
        else
          *(_DWORD *)v50 -= 2;
      }
      v51 = a29;
      a29 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v49);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = a30;
      a30 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, v49);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = a31;
      a31 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, v49);
        else
          *(_DWORD *)v53 -= 2;
      }
      v54 = a32;
      a32 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v49);
        else
          *(_DWORD *)v54 -= 2;
      }
      v55 = qword_1ECE7CD60;
      v56 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v56)
      {
        WTF::String::utf8();
        v58 = a26 ? (char *)a26 + 16 : 0;
        *(_DWORD *)(v37 - 192) = 136446210;
        *(_QWORD *)(v37 - 188) = v58;
        _os_log_impl(&dword_1940B8000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)(v37 - 192), 0xCu);
        v56 = (uint64_t)a26;
        a26 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1)
            v56 = WTF::fastFree((WTF *)v56, v57);
          else
            --*(_DWORD *)v56;
        }
      }
      if (WebCore::LogWebRTC && byte_1ECE7CD50)
      {
        v59 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        do
        {
          while (1)
          {
            v60 = *v59;
            if ((v60 & 1) != 0)
              goto LABEL_94;
            v61 = __ldaxr(v59);
            if (v61 == v60)
              break;
            __clrex();
          }
        }
        while (__stxr(v60 | 1, v59));
        v62 = WTF::Logger::observers((WTF::Logger *)v56);
        v63 = *(unsigned int *)(v62 + 12);
        if ((_DWORD)v63)
        {
          v64 = *(uint64_t **)v62;
          v84 = *(_QWORD *)v62 + 8 * v63;
          do
          {
            v65 = *v64;
            *(_DWORD *)(v37 - 192) = 0;
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&a17);
            *(_DWORD *)(v37 - 176) = 0;
            WTF::String::String((WTF::String *)(v37 - 168), "error turning on torch ");
            *(_DWORD *)(v37 - 160) = 0;
            MEMORY[0x19AEA5508](v37 - 152, objc_msgSend(v86, "description"));
            *(_DWORD *)(v37 - 144) = 0;
            WTF::String::String((WTF::String *)(v37 - 136), ", reason : ");
            *(_DWORD *)(v37 - 128) = 0;
            MEMORY[0x19AEA5508](v37 - 120, objc_msgSend(v85, "description"));
            a26 = 0;
            a27 = 0;
            v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
            LODWORD(a27) = 5;
            a26 = v66;
            v67 = HIDWORD(a27);
            *((_DWORD *)v66 + 4 * HIDWORD(a27)) = *(_DWORD *)(v37 - 192);
            v68 = *(_DWORD **)(v37 - 184);
            if (v68)
              *v68 += 2;
            *((_QWORD *)v66 + 2 * v67 + 1) = v68;
            *((_DWORD *)v66 + 4 * (v67 + 1)) = *(_DWORD *)(v37 - 176);
            v69 = *(_DWORD **)(v37 - 168);
            if (v69)
              *v69 += 2;
            *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
            *((_DWORD *)v66 + 4 * (v67 + 2)) = *(_DWORD *)(v37 - 160);
            v70 = *(_DWORD **)(v37 - 152);
            if (v70)
              *v70 += 2;
            *((_QWORD *)v66 + 2 * (v67 + 2) + 1) = v70;
            *((_DWORD *)v66 + 4 * (v67 + 3)) = *(_DWORD *)(v37 - 144);
            v71 = *(_DWORD **)(v37 - 136);
            if (v71)
              *v71 += 2;
            *((_QWORD *)v66 + 2 * (v67 + 3) + 1) = v71;
            *((_DWORD *)v66 + 4 * (v67 + 4)) = *(_DWORD *)(v37 - 128);
            v72 = *(_DWORD **)(v37 - 120);
            if (v72)
              *v72 += 2;
            *((_QWORD *)v66 + 2 * (v67 + 4) + 1) = v72;
            HIDWORD(a27) = v67 + 5;
            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, &WebCore::LogWebRTC, 1, &a26);
            v73 = a26;
            if (HIDWORD(a27))
            {
              v74 = 16 * HIDWORD(a27);
              v75 = (WTF::StringImpl **)((char *)a26 + 8);
              do
              {
                v76 = *v75;
                *v75 = 0;
                if (v76)
                {
                  if (*(_DWORD *)v76 == 2)
                    WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v57);
                  else
                    *(_DWORD *)v76 -= 2;
                }
                v75 += 2;
                v74 -= 16;
              }
              while (v74);
              v73 = a26;
            }
            if (v73)
            {
              a26 = 0;
              LODWORD(a27) = 0;
              WTF::fastFree(v73, v57);
            }
            v77 = *(WTF::StringImpl **)(v37 - 120);
            *(_QWORD *)(v37 - 120) = 0;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2)
                WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v57);
              else
                *(_DWORD *)v77 -= 2;
            }
            v78 = *(WTF::StringImpl **)(v37 - 136);
            *(_QWORD *)(v37 - 136) = 0;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
                WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v57);
              else
                *(_DWORD *)v78 -= 2;
            }
            v79 = *(WTF::StringImpl **)(v37 - 152);
            *(_QWORD *)(v37 - 152) = 0;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
                WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v57);
              else
                *(_DWORD *)v79 -= 2;
            }
            v80 = *(WTF::StringImpl **)(v37 - 168);
            *(_QWORD *)(v37 - 168) = 0;
            if (v80)
            {
              if (*(_DWORD *)v80 == 2)
                WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v57);
              else
                *(_DWORD *)v80 -= 2;
            }
            v81 = *(WTF::StringImpl **)(v37 - 184);
            *(_QWORD *)(v37 - 184) = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2)
                WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v57);
              else
                *(_DWORD *)v81 -= 2;
            }
            ++v64;
          }
          while (v64 != (uint64_t *)v84);
        }
        v82 = __ldxr(v59);
        if (v82 == 1)
        {
          if (!__stlxr(0, v59))
            goto LABEL_94;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
      }
LABEL_94:
      v83 = a33;
      a33 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v57);
        else
          *(_DWORD *)v83 -= 2;
      }
LABEL_97:
      objc_end_catch();
      goto LABEL_106;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_194696C14(int a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,uint64_t a33,WTF::StringImpl *a34)
{
  unsigned __int8 *v34;
  int v35;

  v35 = __ldxr(v34);
  if (v35 == 1)
  {
    if (!__stlxr(0, v34))
    {
LABEL_6:
      if (a34)
      {
        if (*(_DWORD *)a34 == 2)
          WTF::StringImpl::destroy(a34, a2);
        else
          *(_DWORD *)a34 -= 2;
      }
      objc_end_catch();
      JUMPOUT(0x194696630);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

PAL *WebCore::AVVideoCaptureSource::monitorOrientation(PAL *result, uint64_t a2)
{
  PAL *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  PAL **v14;
  size_t v15;

  v3 = result;
  {
    if (PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded)
      goto LABEL_3;
  }
  else
  {
    result = (PAL *)PAL::init_AVFoundation_AVCaptureDeviceTypeExternalUnknown(result);
    PAL::canLoad_AVFoundation_AVCaptureDeviceTypeExternalUnknown(void)::loaded = (char)result;
    if ((_DWORD)result)
    {
LABEL_3:
      result = (PAL *)objc_msgSend(*((id *)v3 + 121), "deviceType");
      if (result == (PAL *)PAL::constantAVFoundationAVCaptureDeviceTypeExternalUnknown)
        return result;
    }
  }
  v4 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v4 == *(_DWORD *)(a2 + 16))
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= v4 + 1)
      v7 = v4 + 1;
    else
      v7 = v6;
    if (v7 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v8 = *(void **)(a2 + 8);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 8) = v9;
    memcpy(v9, v8, 8 * v4);
    if (v8)
    {
      if (*(void **)(a2 + 8) == v8)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
      WTF::fastFree((WTF *)v8, v10);
    }
    v4 = *(unsigned int *)(a2 + 20);
    v11 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4);
  }
  else
  {
    v11 = (_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v4);
  }
  *v11 = (char *)v3 + 440;
  *(_DWORD *)(a2 + 20) = v4 + 1;
  v12 = *((_QWORD *)v3 + 56);
  if (v12 != a2)
  {
    if (v12)
    {
      v13 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v13)
      {
        v14 = *(PAL ***)(v12 + 8);
        v15 = 8 * v13 - 8;
        while (*v14 != (PAL *)((char *)v3 + 440))
        {
          ++v14;
          v15 -= 8;
          if (v15 == -8)
            goto LABEL_27;
        }
        *((_QWORD *)v3 + 56) = 0;
        memmove(v14, v14 + 1, v15);
        --*(_DWORD *)(v12 + 20);
      }
    }
LABEL_27:
    *((_QWORD *)v3 + 56) = a2;
  }
  return WebCore::AVVideoCaptureSource::orientationChanged(v3, *(_DWORD *)(a2 + 24));
}

WTF::StringImpl *WebCore::AVVideoCaptureSource::orientationChanged(WebCore::AVVideoCaptureSource *this, int a2)
{
  WTF::StringImpl *result;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF::String *v28;
  WTF::String *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  uint64_t v47;
  _QWORD v48[4];
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  __int128 buf;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  int v67;
  WTF::StringImpl *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 119) = a2;
  result = (WTF::StringImpl *)objc_msgSend(*((id *)this + 121), "position");
  v4 = 0;
  v5 = *((_DWORD *)this + 118) - *((_DWORD *)this + 119);
  if (v5 <= 89)
  {
    if (v5 != -270)
    {
      if (v5 != -180)
      {
        if (v5 != -90)
          goto LABEL_14;
        goto LABEL_11;
      }
LABEL_9:
      v4 = 180;
      goto LABEL_14;
    }
LABEL_10:
    v6 = result == (WTF::StringImpl *)2;
    v4 = 90;
    v7 = 270;
    goto LABEL_12;
  }
  if (v5 == 90)
    goto LABEL_10;
  if (v5 != 270)
  {
    if (v5 != 180)
      goto LABEL_14;
    goto LABEL_9;
  }
LABEL_11:
  v6 = result == (WTF::StringImpl *)2;
  v4 = 270;
  v7 = 90;
LABEL_12:
  if (v6)
    v4 = v7;
LABEL_14:
  if (v4 != *((unsigned __int16 *)this + 240))
  {
    *((_WORD *)this + 240) = v4;
    result = (WTF::StringImpl *)WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers((uint64_t)this, 3u);
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::AVVideoCaptureSource *))(*(_QWORD *)this + 24))(this);
    v9 = *((_QWORD *)this + 6);
    v48[0] = result;
    v48[1] = v10;
    v48[2] = "orientationChanged";
    v48[3] = v9;
    if (*(_BYTE *)(v8 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
      WTF::String::String((WTF::String *)&v54, "rotation = ");
      WTF::String::number((WTF::String *)*((unsigned __int16 *)this + 240));
      WTF::String::String((WTF::String *)&v52, ", orientation = ");
      WTF::String::number((WTF::String *)*((unsigned int *)this + 119));
      v49 = v54;
      v59 = v53;
      *(_QWORD *)&buf = v55;
      v57 = v51;
      v58 = v52;
      result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v49, (uint64_t *)&v59, (uint64_t *)&v58, (uint64_t *)&v57, &v56);
      if (v56)
      {
        v12 = v51;
        v51 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v52;
        v52 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v11);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v53;
        v53 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v11);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = v54;
        v54 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v11);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = v55;
        v55 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v11);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = qword_1ECE7CD60;
        v18 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v18)
        {
          WTF::String::utf8();
          v20 = v49 ? (char *)v49 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v20;
          _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v18 = (uint64_t)v49;
          v49 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 1)
              v18 = WTF::fastFree((WTF *)v18, v19);
            else
              --*(_DWORD *)v18;
          }
        }
        if (WebCore::LogWebRTC)
        {
          v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v22 = *v21;
            if ((v22 & 1) != 0)
              break;
            v23 = __ldaxr(v21);
            if (v23 == v22)
            {
              if (!__stxr(v22 | 1, v21))
              {
                v24 = WTF::Logger::observers((WTF::Logger *)v18);
                v25 = *(unsigned int *)(v24 + 12);
                if ((_DWORD)v25)
                {
                  v26 = *(uint64_t **)v24;
                  v47 = *(_QWORD *)v24 + 8 * v25;
                  do
                  {
                    v27 = *v26;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
                    v61 = 0;
                    WTF::String::String((WTF::String *)&v62, "rotation = ");
                    v28 = (WTF::String *)*((unsigned __int16 *)this + 240);
                    v63 = 0;
                    WTF::String::number(v28);
                    v65 = 0;
                    WTF::String::String((WTF::String *)&v66, ", orientation = ");
                    v29 = (WTF::String *)*((unsigned int *)this + 119);
                    v67 = 0;
                    WTF::String::number(v29);
                    v49 = 0;
                    v50 = 0;
                    v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                    LODWORD(v50) = 5;
                    v49 = v30;
                    v31 = HIDWORD(v50);
                    *((_DWORD *)v30 + 4 * HIDWORD(v50)) = buf;
                    v32 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                    *((_DWORD *)v30 + 4 * (v31 + 1)) = v61;
                    v33 = v62;
                    if (v62)
                      *(_DWORD *)v62 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                    *((_DWORD *)v30 + 4 * (v31 + 2)) = v63;
                    v34 = v64;
                    if (v64)
                      *(_DWORD *)v64 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                    *((_DWORD *)v30 + 4 * (v31 + 3)) = v65;
                    v35 = v66;
                    if (v66)
                      *(_DWORD *)v66 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                    *((_DWORD *)v30 + 4 * (v31 + 4)) = v67;
                    v36 = v68;
                    if (v68)
                      *(_DWORD *)v68 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                    HIDWORD(v50) = v31 + 5;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, &WebCore::LogWebRTC, 0, &v49);
                    v37 = v49;
                    if (HIDWORD(v50))
                    {
                      v38 = 16 * HIDWORD(v50);
                      v39 = (WTF::StringImpl **)((char *)v49 + 8);
                      do
                      {
                        v40 = *v39;
                        *v39 = 0;
                        if (v40)
                        {
                          if (*(_DWORD *)v40 == 2)
                            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                          else
                            *(_DWORD *)v40 -= 2;
                        }
                        v39 += 2;
                        v38 -= 16;
                      }
                      while (v38);
                      v37 = v49;
                    }
                    if (v37)
                    {
                      v49 = 0;
                      LODWORD(v50) = 0;
                      WTF::fastFree(v37, v19);
                    }
                    v41 = v68;
                    v68 = 0;
                    if (v41)
                    {
                      if (*(_DWORD *)v41 == 2)
                        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v41 -= 2;
                    }
                    v42 = v66;
                    v66 = 0;
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                    v43 = v64;
                    v64 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v44 = v62;
                    v62 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v45 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v19);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    ++v26;
                  }
                  while (v26 != (uint64_t *)v47);
                }
                v46 = __ldxr(v21);
                if (v46 == 1)
                {
                  if (!__stlxr(0, v21))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        result = v56;
        v56 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
  return result;
}

void sub_1946976E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::AVVideoCaptureSource::orientationChanged(WebCore::AVVideoCaptureSource *this, int a2)
{
  return WebCore::AVVideoCaptureSource::orientationChanged((WebCore::AVVideoCaptureSource *)((char *)this - 440), a2);
}

uint64_t WebCore::AVVideoCaptureSource::interrupted(WebCore::AVVideoCaptureSource *this)
{
  return *((unsigned __int8 *)this + 1160);
}

void WebCore::AVVideoCaptureSource::generatePresets(id *this)
{
  WebCore::AVVideoCaptureSource *v1;
  uint64_t v2;
  __n128 v3;
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  void *v7;
  PAL *v8;
  const opaqueCMFormatDescription *v9;
  uint64_t Dimensions;
  WTF *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  WTF *v20;
  WTF *v21;
  char *v22;
  int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char v28;
  void *v29;
  double v30;
  double v31;
  int v32;
  CFTypeRef v33;
  unint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _QWORD *v40;
  CFTypeRef *v41;
  char *v42;
  WTF *v43;
  WTF *v44;
  CFTypeRef v45;
  CFTypeRef v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  uint64_t v50;
  const void **v51;
  const void *v52;
  WTF *v53;
  CFTypeRef *p_cf;
  _QWORD *v55;
  id obj;
  double *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  WTF *v63[2];
  int v64;
  unsigned int v65;
  _QWORD v66[2];
  char v67;
  CFTypeRef cf;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  WTF *v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  WTF *v79;
  uint64_t v80;
  _BYTE v81[128];
  _BYTE v82[128];
  uint64_t v83;

  v1 = (WebCore::AVVideoCaptureSource *)this;
  v83 = *MEMORY[0x1E0C80C00];
  v79 = 0;
  v80 = 0;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  obj = (id)objc_msgSend(this[121], "formats");
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v82, 16);
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v59 = *(_QWORD *)v76;
    p_cf = &cf;
    v55 = v66;
    v57 = (double *)v1;
    do
    {
      v6 = 0;
      v58 = v2;
      do
      {
        if (*(_QWORD *)v76 != v59)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * v6);
        v8 = (PAL *)objc_msgSend(v7, "formatDescription", p_cf, v55);
        Dimensions = PAL::softLinkCoreMediaCMVideoFormatDescriptionGetDimensions(v8, v9);
        v11 = (WTF *)Dimensions;
        if (v4)
        {
          v12 = 0;
          while (Dimensions != *(_QWORD *)((char *)v5 + v12))
          {
            v12 += 56;
            if (56 * v4 == v12)
              goto LABEL_10;
          }
        }
        else
        {
LABEL_10:
          v73 = 0;
          v74 = 0;
          v69 = 0u;
          v70 = 0u;
          v71 = 0u;
          v72 = 0u;
          v13 = (void *)objc_msgSend(v7, "videoSupportedFrameRateRanges");
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v69, v81, 16);
          v60 = v4;
          v61 = v6;
          v62 = v4;
          if (v14)
          {
            v15 = 0;
            v16 = 0;
            v17 = *(_QWORD *)v70;
            do
            {
              for (i = 0; i != v14; ++i)
              {
                if (*(_QWORD *)v70 != v17)
                  objc_enumerationMutation(v13);
                v19 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
                objc_msgSend(v19, "minFrameRate");
                v63[0] = v20;
                objc_msgSend(v19, "maxFrameRate");
                v63[1] = v21;
                if (v16 == (_DWORD)v74)
                {
                  v22 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v73, v16 + 1, (unint64_t)v63);
                  v23 = HIDWORD(v74);
                  v15 = v73;
                  *((_OWORD *)v73 + HIDWORD(v74)) = *(_OWORD *)v22;
                }
                else
                {
                  *((_OWORD *)v15 + v16) = *(_OWORD *)v63;
                  v23 = HIDWORD(v74);
                }
                v16 = v23 + 1;
                HIDWORD(v74) = v23 + 1;
              }
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v69, v81, 16);
            }
            while (v14);
          }
          else
          {
            v16 = 0;
          }
          v1 = (WebCore::AVVideoCaptureSource *)v57;
          v24 = v57[143];
          objc_msgSend(v7, "videoMaxZoomFactor");
          v26 = v25;
          v27 = v57[143];
          v28 = objc_msgSend(v7, "isVideoBinned");
          v30 = 1.0 / v24;
          v31 = v26 / v27;
          if (v26 / v27 > 10.0)
            v31 = 10.0;
          v63[0] = v11;
          v63[1] = v73;
          v32 = v74;
          v73 = 0;
          v74 = 0;
          v64 = v32;
          v65 = v16;
          if (v24 == 1.0)
            v30 = 1.0;
          *(double *)v66 = v30;
          *(double *)&v66[1] = v31;
          v67 = v28;
          cf = 0;
          v2 = v58;
          v6 = v61;
          if (v7)
          {
            CFRetain(v7);
            v33 = cf;
            cf = v7;
            if (v33)
              CFRelease(v33);
          }
          if (v62 == (_DWORD)v80)
          {
            v34 = WTF::Vector<WebCore::VideoPreset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v79, v60 + 1, (unint64_t)v63);
            v35 = HIDWORD(v80);
            v5 = v79;
            v36 = (char *)v79 + 56 * HIDWORD(v80);
            v37 = *(_QWORD *)v34;
            *((_QWORD *)v36 + 1) = 0;
            *((_QWORD *)v36 + 2) = 0;
            *(_QWORD *)v36 = v37;
            v38 = *(_QWORD *)(v34 + 8);
            *(_QWORD *)(v34 + 8) = 0;
            *((_QWORD *)v36 + 1) = v38;
            LODWORD(v38) = *(_DWORD *)(v34 + 16);
            *(_DWORD *)(v34 + 16) = 0;
            *((_DWORD *)v36 + 4) = v38;
            LODWORD(v38) = *(_DWORD *)(v34 + 20);
            *(_DWORD *)(v34 + 20) = 0;
            *((_DWORD *)v36 + 5) = v38;
            v39 = *(_OWORD *)(v34 + 24);
            v36[40] = *(_BYTE *)(v34 + 40);
            *(_OWORD *)(v36 + 24) = v39;
            v40 = v36 + 48;
            v41 = (CFTypeRef *)(v34 + 48);
          }
          else
          {
            v42 = (char *)v5 + 56 * v60;
            v43 = v63[0];
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = 0;
            *(_QWORD *)v42 = v43;
            v44 = v63[1];
            v63[1] = 0;
            *((_QWORD *)v42 + 1) = v44;
            LODWORD(v44) = v64;
            v64 = 0;
            *((_DWORD *)v42 + 4) = (_DWORD)v44;
            LODWORD(v44) = v65;
            v65 = 0;
            *((_DWORD *)v42 + 5) = (_DWORD)v44;
            LOBYTE(v44) = *((_BYTE *)v55 + 16);
            *(_OWORD *)(v42 + 24) = *(_OWORD *)v55;
            v42[40] = (char)v44;
            v40 = v42 + 48;
            v35 = HIDWORD(v80);
            v41 = p_cf;
          }
          v45 = *v41;
          *v41 = 0;
          *v40 = v45;
          v4 = v35 + 1;
          HIDWORD(v80) = v35 + 1;
          v46 = cf;
          cf = 0;
          if (v46)
            CFRelease(v46);
          v47 = v63[1];
          if (v63[1])
          {
            v63[1] = 0;
            v64 = 0;
            WTF::fastFree(v47, v29);
          }
        }
        ++v6;
      }
      while (v6 != v2);
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v82, 16);
    }
    while (v2);
  }
  WebCore::RealtimeVideoCaptureSource::setSupportedPresets((uint64_t)v1, &v79, v3);
  v49 = v79;
  if (HIDWORD(v80))
  {
    v50 = 56 * HIDWORD(v80);
    v51 = (const void **)((char *)v79 + 48);
    do
    {
      v52 = *v51;
      *v51 = 0;
      if (v52)
        CFRelease(v52);
      v53 = (WTF *)*(v51 - 5);
      if (v53)
      {
        *(v51 - 5) = 0;
        *((_DWORD *)v51 - 8) = 0;
        WTF::fastFree(v53, v48);
      }
      v51 += 7;
      v50 -= 56;
    }
    while (v50);
  }
  if (v49)
    WTF::fastFree(v49, v48);
}

void sub_194697E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,int a46)
{
  _Unwind_Resume(exception_object);
}

void sub_194698264(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 304));
  _Unwind_Resume(exception_object);
}

void sub_194698508(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)(v3 - 40) = 0;
  v5 = v2 + 2;
  do
  {
    v6 = __ldaxr(v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v5));
  if (!v7)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 304));
  _Unwind_Resume(a1);
}

void sub_194698B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::Lock *a16, char a17)
{
  uint64_t v17;
  const void *v18;
  const void *v19;

  if (a12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)a12 + 8))(a12);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v17 + 304));
  _Unwind_Resume(a1);
}

void sub_194698FDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 304));
  _Unwind_Resume(a1);
}

void sub_194699140(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 304));
  _Unwind_Resume(a1);
}

void sub_194699850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35)
{
  uint64_t v35;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v35 + 304));
  _Unwind_Resume(a1);
}

void sub_19469A038(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  uint64_t v25;
  const void *v26;

  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  if (v26)
    CFRelease(v26);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v25 + 304));
  _Unwind_Resume(a1);
}

void sub_19469A2E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 304));
  _Unwind_Resume(a1);
}

const char *WebCore::AVVideoCaptureSource::logClassName(WebCore::AVVideoCaptureSource *this)
{
  return "AVVideoCaptureSource";
}

uint64_t WebCore::RealtimeMediaSource::clone@<X0>(WebCore::RealtimeMediaSource *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)this + 136))(this);
  *a2 = this;
  return result;
}

WTF::StringImpl *WebCore::RealtimeMediaSource::whenReady(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5[2];

  v5[0] = 0;
  v5[1] = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 16))(v2, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = v5[0];
  v5[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469A48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v12;

  v10 = v9;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v12);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::RealtimeMediaSource::isProducingData(WebCore::RealtimeMediaSource *this)
{
  return *((unsigned __int8 *)this + 292);
}

uint64_t WebCore::RealtimeMediaSource::isMockSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::AVVideoCaptureSource::isCaptureSource(WebCore::AVVideoCaptureSource *this)
{
  return 1;
}

uint64_t WebCore::AVVideoCaptureSource::deviceType(WebCore::AVVideoCaptureSource *this)
{
  return 3;
}

uint64_t WebCore::AVVideoCaptureSource::videoFrameRotation(WebCore::AVVideoCaptureSource *this)
{
  return *((unsigned __int16 *)this + 240);
}

BOOL WebCore::RealtimeMediaSource::isSameAs(WebCore::RealtimeMediaSource *this, WebCore::RealtimeMediaSource *a2)
{
  return this == a2;
}

uint64_t WebCore::RealtimeMediaSource::isIncomingAudioSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::isIncomingVideoSource(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::setShouldApplyRotation(WebCore::RealtimeMediaSource *this)
{
  return 0;
}

uint64_t WebCore::RealtimeMediaSource::endProducingData(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_BYTE *)(this + 292))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 40);
    if (v2)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v4 = *(_QWORD *)(v1 + 48);
      v6[0] = v3;
      v6[1] = v5;
      v6[2] = "stop";
      v6[3] = v4;
      if (*(_BYTE *)(v2 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    }
    *(_BYTE *)(v1 + 292) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 368))(v1);
  }
  return this;
}

uint64_t WebCore::RealtimeMediaSource::stopBeingObserved(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (*(_BYTE *)(this + 292))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 40);
    if (v2)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
      v4 = *(_QWORD *)(v1 + 48);
      v6[0] = v3;
      v6[1] = v5;
      v6[2] = "stop";
      v6[3] = v4;
      if (*(_BYTE *)(v2 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v6);
    }
    *(_BYTE *)(v1 + 292) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 368))(v1);
  }
  return this;
}

double WebCore::RealtimeVideoCaptureSource::observedFrameRate(WebCore::RealtimeVideoCaptureSource *this)
{
  return *((double *)this + 53);
}

uint64_t WebCore::AVVideoCaptureSource::canResizeVideoFrames(WebCore::AVVideoCaptureSource *this)
{
  return 1;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_19469A6F4(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t std::__optional_destruct_base<WebCore::RealtimeMediaSourceCapabilities,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;

  if (*(_BYTE *)(a1 + 192))
  {
    v3 = *(WTF **)(a1 + 136);
    if (v3)
    {
      *(_QWORD *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 144) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)(a1 + 112);
    *(_QWORD *)(a1 + 112) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF **)(a1 + 48);
    if (v6)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  return a1;
}

char *WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[v3 - (_QWORD)v5];
      }
      if (!HIDWORD(v10))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)v10);
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[v3 - (_QWORD)v5];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x19469A8FCLL);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= (unint64_t)a2)
    v17 = (unint64_t)a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (HIDWORD(v17))
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)v17);
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  unsigned int v8;
  WTF *v9;
  size_t v10;
  void *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;

  if (a2 != (const void **)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4)
            *(_DWORD *)(a1 + 12) = 0;
          v7 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v7, a2);
            v6 = *(_DWORD *)(a1 + 8);
          }
        }
        v8 = *((_DWORD *)a2 + 3);
        if (v6 < v8)
        {
          v9 = *(WTF **)a1;
          v10 = *(unsigned int *)(a1 + 12);
          v11 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 3));
          *(_DWORD *)(a1 + 8) = v8;
          *(_QWORD *)a1 = v11;
          memcpy(v11, v9, v10);
          if (v9)
          {
            if (*(WTF **)a1 == v9)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v9, v12);
          }
        }
      }
      v5 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
    }
    v13 = *(WTF **)a1;
    if (v5)
    {
      memmove(v13, *a2, v5);
      v14 = *(unsigned int *)(a1 + 12);
      v13 = *(WTF **)a1;
    }
    else
    {
      v14 = 0;
    }
    memcpy((char *)v13 + v14, (char *)*a2 + v14, (_BYTE *)*a2 + *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + v14));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

uint64_t WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, __int128 *a3)
{
  uint64_t v6;
  WTF::NativePromiseBase *v7;
  __int128 v8;
  unsigned __int8 *v9;
  _BYTE *v11;
  int v12;

  v6 = WTF::fastMalloc((WTF *)0x90);
  v7 = (WTF::NativePromiseBase *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(v6, a3);
  *(_QWORD *)a1 = v6;
  v8 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v8;
  v9 = (unsigned __int8 *)(v6 + 48);
  if (__ldaxr((unsigned __int8 *)(v6 + 48)))
  {
    __clrex();
LABEL_4:
    v7 = (WTF::NativePromiseBase *)MEMORY[0x19AEA534C](v6 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  v11 = (_BYTE *)WTF::NativePromiseBase::logChannel(v7);
  if (*v11 && v11[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v11, 4u, (WTF::Logger::LogSiteIdentifier *)a3, " runSynchronouslyOnTarget ", v6);
  atomic_store(a2, (unsigned __int8 *)(v6 + 137));
  v12 = __ldxr(v9);
  if (v12 == 1)
  {
    if (!__stlxr(0, v9))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v6 + 48));
  return a1;
}

void sub_19469AB08(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *v1;
  *v1 = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE *v5;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E31F73A0;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v5 && v5[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v5, 4u, "creating ", a1);
  return a1;
}

void sub_19469AC4C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  v17 = v15;
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17, a2);
  v20 = *(unsigned int *)(v13 + 108);
  if ((_DWORD)v20)
  {
    v24 = *(unsigned int ***)(v13 + 96);
    v25 = &v24[v20];
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v21 = *(WTF **)(v13 + 96);
  if (v16 != v21 && v21 != 0)
  {
    *(_QWORD *)(v13 + 96) = 0;
    *(_DWORD *)(v13 + 104) = 0;
    WTF::fastFree(v21, v19);
  }
  v23 = *(unsigned int *)(v13 + 88);
  if ((_DWORD)v23 != -1)
    ((void (*)(char *, uint64_t))off_1E31F70E0[v23])(&a13, v14);
  *(_DWORD *)(v13 + 88) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  _BYTE v17[2];

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [12],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 120, v4);
  v6 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int ***)(a1 + 96);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v13 = *(WTF **)(a1 + 96);
  if ((WTF *)(a1 + 112) != v13 && v13 != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    WTF::fastFree(v13, v5);
  }
  v15 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v15 != -1)
    ((void (*)(_BYTE *, uint64_t))off_1E31F70E0[v15])(v17, a1 + 56);
  *(_DWORD *)(a1 + 88) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469B128(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a2 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_19469B3B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _DWORD *a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>)
{
  int v15;
  _DWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  uint64_t v38;
  _WORD *v39;
  char *v40;
  unint64_t v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  unsigned __int128 *v45;
  unsigned __int128 *v46;
  unsigned __int128 v47;
  char v48;
  char v49;
  uint64_t v50;
  _DWORD *v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v51;
        if (v51)
        {
          v18 = v51 + 5;
          *v51 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a4)
          {
            if (a4 == 1)
              *v18 = *(_BYTE *)a3;
            else
              result = (uint64_t)memcpy(v17 + 5, a3, a4);
          }
          v19 = &v18[a4];
          if (a5)
          {
            v20 = *(_BYTE **)(a5 + 8);
            v21 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v21)
              {
                if ((_DWORD)v21 == 1)
                  *v19 = *v20;
                else
                  result = (uint64_t)memcpy(&v18[a4], v20, v21);
              }
            }
            else
            {
              if (v21 < 0x10)
              {
                v42 = (unsigned __int128 *)&v18[a4];
              }
              else
              {
                v42 = (unsigned __int128 *)&v19[v21 & 0xFFFFFFF0];
                v43 = (unsigned __int128 *)&v18[a4];
                do
                {
                  v44 = (unsigned __int128)vld2q_s8(v20);
                  v20 += 32;
                  *v43++ = v44;
                }
                while (v43 != v42);
              }
              while (v42 != (unsigned __int128 *)&v19[v21])
              {
                v48 = *v20;
                v20 += 2;
                *(_BYTE *)v42 = v48;
                v42 = (unsigned __int128 *)((char *)v42 + 1);
              }
            }
            v22 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v22 = 0;
          }
          v19[v22] = a6;
          v23 = &v19[v22 + 1];
          if (a7)
          {
            v24 = (_BYTE *)*((_QWORD *)a7 + 1);
            v25 = a7[1];
            if ((a7[4] & 4) != 0)
            {
              if ((_DWORD)v25)
              {
                if ((_DWORD)v25 == 1)
                  *v23 = *v24;
                else
                  result = (uint64_t)memcpy(v23, v24, v25);
              }
            }
            else
            {
              if (v25 < 0x10)
              {
                v45 = (unsigned __int128 *)&v19[v22 + 1];
              }
              else
              {
                v45 = (unsigned __int128 *)&v23[v25 & 0xFFFFFFF0];
                v46 = (unsigned __int128 *)&v19[v22 + 1];
                do
                {
                  v47 = (unsigned __int128)vld2q_s8(v24);
                  v24 += 32;
                  *v46++ = v47;
                }
                while (v46 != v45);
              }
              while (v45 != (unsigned __int128 *)&v23[v25])
              {
                v49 = *v24;
                v24 += 2;
                *(_BYTE *)v45 = v49;
                v45 = (unsigned __int128 *)((char *)v45 + 1);
              }
            }
            v26 = a7[1];
          }
          else
          {
            v26 = 0;
          }
          v23[v26] = a8;
        }
        goto LABEL_35;
      }
LABEL_42:
      v17 = 0;
      goto LABEL_35;
    }
LABEL_41:
    v17 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_35;
  }
  if (!(_DWORD)result)
    goto LABEL_41;
  if (result > 0x7FFFFFEF)
    goto LABEL_42;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v51;
  if (v51)
  {
    v27 = (char *)(v51 + 5);
    *v51 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    v28 = (uint64_t)v17 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v29 = &v27[2 * (a4 & 0xFFFFFFC0)];
      v30 = 0uLL;
      do
      {
        v52.val[0] = (int8x16_t)*a3;
        v31 = *((int8x16_t *)a3 + 1);
        v53.val[0] = (int8x16_t)a3[2];
        v32 = a3[3];
        a3 += 4;
        v33 = v32;
        v53.val[1] = 0uLL;
        v54.val[0] = v31;
        v52.val[1] = 0uLL;
        v34 = v27;
        vst2q_s8(v34, v52);
        v34 += 32;
        v54.val[1] = 0uLL;
        vst2q_s8(v34, v54);
        v35 = v27 + 64;
        vst2q_s8(v35, v53);
        v36 = v27 + 96;
        vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
        v27 += 128;
      }
      while (v27 != v29);
      v27 = v29;
    }
    while (v27 != (char *)v28)
    {
      v37 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v27 = v37;
      v27 += 2;
    }
    v50 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v50, (char *)v17 + 2 * a4 + 20);
    v38 = v50;
    if (v50)
      v38 = *(unsigned int *)(v50 + 4);
    v39 = (_WORD *)(v28 + 2 * v38);
    *v39 = a6;
    v40 = (char *)(v39 + 1);
    v51 = a7;
    result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v51, v40);
    v41 = (unint64_t)v51;
    if (v51)
      v41 = v51[1];
    *(_WORD *)&v40[2 * v41] = a8;
  }
LABEL_35:
  *a9 = v17;
  return result;
}

void sub_19469B718(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_19469B7EC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F70F8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSF_SE_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF *result;

  v3 = *(WTF::StringImpl **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSF_SE_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469BA60(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 120, a2);
  v16 = *(unsigned int *)(v13 + 108);
  if ((_DWORD)v16)
  {
    v20 = *(unsigned int ***)(v13 + 96);
    v21 = &v20[v16];
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v17 = *(WTF **)(v13 + 96);
  if ((WTF *)(v13 + 112) != v17 && v17 != 0)
  {
    *(_QWORD *)(v13 + 96) = 0;
    *(_DWORD *)(v13 + 104) = 0;
    WTF::fastFree(v17, v15);
  }
  v19 = *(unsigned int *)(v13 + 88);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_1E31F70E0[v19])(&a13, v13 + 56);
  *(_DWORD *)(v13 + 88) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<char [12],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469BF24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469C574(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WebCore::RealtimeMediaSourceCapabilities::RealtimeMediaSourceCapabilities(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  WTF *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  _DWORD *v10;
  _DWORD *v11;
  WTF *v12;
  void *v13;
  __int128 v14;
  __int128 v15;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = (WTF *)*((unsigned int *)a2 + 15);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = (_DWORD)v6;
  if ((_DWORD)v6)
  {
    v7 = (void *)WTF::fastMalloc(v6);
    *(_DWORD *)(a1 + 56) = (_DWORD)v6;
    *(_QWORD *)(a1 + 48) = v7;
    memcpy(v7, *((const void **)a2 + 6), *((unsigned int *)a2 + 15));
  }
  v8 = a2[4];
  v9 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  v10 = (_DWORD *)*((_QWORD *)a2 + 13);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(a1 + 104) = v10;
  v11 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  v12 = (WTF *)*((unsigned int *)a2 + 37);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    v13 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)(a1 + 144) = (_DWORD)v12;
    *(_QWORD *)(a1 + 136) = v13;
    memcpy(v13, *((const void **)a2 + 17), *((unsigned int *)a2 + 37));
  }
  v14 = *(__int128 *)((char *)a2 + 152);
  v15 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 182) = *(_QWORD *)((char *)a2 + 182);
  *(_OWORD *)(a1 + 168) = v15;
  *(_OWORD *)(a1 + 152) = v14;
  return a1;
}

void sub_19469C860(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;

  v5 = *(WTF::StringImpl **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v7, a2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::VideoPreset,false>>(uint64_t a1, _QWORD *a2)
{
  WTF *v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  const void *v8;
  const void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      *(_QWORD *)a1 = *a2;
      v4 = *(WTF **)(a1 + 8);
      if (v4)
      {
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        WTF::fastFree(v4, a2);
      }
      v5 = a2[1];
      a2[1] = 0;
      *(_QWORD *)(a1 + 8) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      *(_DWORD *)(a1 + 16) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = 0;
      *(_DWORD *)(a1 + 20) = v5;
      result = *(__n128 *)(a2 + 3);
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(__n128 *)(a1 + 24) = result;
      v7 = a2[6];
      a2[6] = 0;
      v8 = *(const void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v7;
      if (v8)
        CFRelease(v8);
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v9 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v9)
      CFRelease(v9);
    v10 = *(WTF **)(a1 + 8);
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v10, a2);
    }
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v11 = *a2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = v11;
    v12 = a2[1];
    a2[1] = 0;
    *(_QWORD *)(a1 + 8) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(a1 + 16) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = 0;
    *(_DWORD *)(a1 + 20) = v12;
    result = *(__n128 *)(a2 + 3);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(__n128 *)(a1 + 24) = result;
    v13 = a2[6];
    a2[6] = 0;
    *(_QWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

void std::__optional_storage_base<WebCore::VideoPreset,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::VideoPreset,false> const&>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  const void *v5;
  const void *v6;
  const void *v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  const void *v12;

  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 8), (WTF *)(a2 + 8));
      v4 = *(_OWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v4;
      v5 = *(const void **)(a2 + 48);
      if (v5)
        CFRetain(v5);
      v6 = *(const void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v5;
      if (v6)
        CFRelease(v6);
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v7 = *(const void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v7)
      CFRelease(v7);
    v8 = *(WTF **)(a1 + 8);
    if (v8)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v8, (void *)a2);
    }
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v9 = *(unsigned int *)(a2 + 20);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = v9;
    if ((_DWORD)v9)
    {
      if (v9 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v10 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
      *(_DWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 8) = v10;
      memcpy(v10, *(const void **)(a2 + 8), 16 * *(unsigned int *)(a2 + 20));
    }
    v11 = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v11;
    v12 = *(const void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v12;
    if (v12)
      CFRetain(v12);
    *(_BYTE *)(a1 + 56) = 1;
  }
}

void sub_19469CB20(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, WTF *a2)
{
  WTF *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)a2 + 3);
  if (v4 > v5)
  {
    *((_DWORD *)result + 3) = v5;
LABEL_17:
    v12 = *(char **)v2;
    if (v5)
    {
      memmove(v12, *(const void **)a2, 16 * v5);
      v13 = *((unsigned int *)v2 + 3);
      v12 = *(char **)v2;
    }
    else
    {
      v13 = 0;
    }
    memcpy(&v12[16 * v13], (const void *)(*(_QWORD *)a2 + 16 * v13), *(_QWORD *)a2 + 16 * *((unsigned int *)a2 + 3) - (*(_QWORD *)a2 + 16 * v13));
    *((_DWORD *)v2 + 3) = *((_DWORD *)a2 + 3);
    return v2;
  }
  v6 = *((_DWORD *)result + 2);
  if (v5 <= v6)
    goto LABEL_16;
  if (v6)
  {
    if (v4)
      *((_DWORD *)result + 3) = 0;
    result = *(WTF **)result;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
      v6 = *((_DWORD *)v2 + 2);
    }
  }
  v7 = *((unsigned int *)a2 + 3);
  if (v6 >= v7)
  {
LABEL_16:
    v5 = *((_DWORD *)v2 + 3);
    goto LABEL_17;
  }
  if (!(v7 >> 28))
  {
    v8 = *(char **)v2;
    v9 = *((unsigned int *)v2 + 3);
    v10 = (void *)WTF::fastMalloc((WTF *)(16 * v7));
    *((_DWORD *)v2 + 2) = v7;
    *(_QWORD *)v2 = v10;
    memcpy(v10, v8, 16 * v9);
    if (v8)
    {
      if (*(char **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree((WTF *)v8, v11);
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

dispatch_queue_t ___ZN7WebCoreL28globaVideoCaptureSerialQueueEv_block_invoke()
{
  NSObject *global_queue;
  dispatch_queue_t result;

  global_queue = dispatch_get_global_queue(2, 0);
  result = dispatch_queue_create_with_target_V2("WebCoreAVVideoCaptureSource video capture queue", 0, global_queue);
  qword_1ECE80D80 = (uint64_t)result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::AVVideoCaptureSource::*&)(void),WebCore::AVVideoCaptureSource*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *this)
{
  uint64_t result;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 buf;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)buf;
  if (!v39)
  {
    v8 = 0;
    if ((_QWORD)buf)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v39 + 1);
  if (!(_QWORD)buf)
    goto LABEL_72;
LABEL_3:
  v9 = *(_DWORD *)(buf + 4);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v39)
  {
    v10 = *((_DWORD *)v39 + 4);
    v11 = (v10 >> 2) & 1;
    if ((_QWORD)buf && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if ((_QWORD)buf)
    {
LABEL_9:
      v11 = (*(unsigned __int8 *)(buf + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v39, buf, &buf);
  v40 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v12);
    else
      *(_DWORD *)v7 -= 2;
  }
  v13 = v39;
  v39 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(NSObject **)(a1 + 32);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v15)
  {
    WTF::String::utf8();
    v17 = v37 ? (char *)v37 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v15 = (uint64_t)v37;
    v37 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        v15 = WTF::fastFree((WTF *)v15, v16);
      else
        --*(_DWORD *)v15;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v18 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v19 = *v18;
      if ((v19 & 1) != 0)
        break;
      v20 = __ldaxr(v18);
      if (v20 == v19)
      {
        if (!__stxr(v19 | 1, v18))
        {
          v21 = WTF::Logger::observers((WTF::Logger *)v15);
          v22 = *(unsigned int *)(v21 + 12);
          if ((_DWORD)v22)
          {
            v23 = *(uint64_t **)v21;
            v24 = *(_QWORD *)v21 + 8 * v22;
            do
            {
              v25 = *v23;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v43 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v44 = v41;
              v37 = 0;
              v38 = 0;
              v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v38) = 2;
              v37 = v26;
              v27 = HIDWORD(v38);
              *((_DWORD *)v26 + 4 * HIDWORD(v38)) = buf;
              v28 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v26 + 2 * v27 + 1) = v28;
              *((_DWORD *)v26 + 4 * (v27 + 1)) = v43;
              v29 = v44;
              if (v44)
                *(_DWORD *)v44 += 2;
              *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
              HIDWORD(v38) = v27 + 2;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, a1, a2, &v37);
              v30 = v37;
              if (HIDWORD(v38))
              {
                v31 = 16 * HIDWORD(v38);
                v32 = (WTF::StringImpl **)((char *)v37 + 8);
                do
                {
                  v33 = *v32;
                  *v32 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  v32 += 2;
                  v31 -= 16;
                }
                while (v31);
                v30 = v37;
              }
              if (v30)
              {
                v37 = 0;
                LODWORD(v38) = 0;
                WTF::fastFree(v30, v16);
              }
              v34 = v44;
              v44 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v35 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                else
                  *(_DWORD *)v35 -= 2;
              }
              ++v23;
            }
            while (v23 != (uint64_t *)v24);
          }
          v36 = __ldxr(v18);
          if (v36 == 1)
          {
            if (!__stlxr(0, v18))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469D170(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, uint64_t a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  int v25;
  char v26;
  int v27;
  unsigned int v28;
  uint64_t v29;

  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v11 = *(_DWORD *)(v10 + 4);
  else
    v11 = 0;
  v12 = *a2;
  if (*a2)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = *a3;
  if (*a3)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  v16 = *a4;
  if (*a4)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *a5;
  if (*a5)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  if ((v19 | v17) < 0)
    goto LABEL_48;
  v20 = __OFADD__(v17, v19);
  v21 = v17 + v19;
  v22 = v20;
  if (v15 < 0
    || v22
    || ((v20 = __OFADD__(v15, v21), v23 = v15 + v21, !v20) ? (v24 = 0) : (v24 = 1),
        v13 < 0
     || (v24 & 1) != 0
     || ((v20 = __OFADD__(v13, v23), v25 = v13 + v23, !v20) ? (v26 = 0) : (v26 = 1),
         v11 < 0 || (v26 & 1) != 0 || (result = (v11 + v25), __OFADD__(v11, v25)))))
  {
LABEL_48:
    *a6 = 0;
    return result;
  }
  if ((!v10 || (*(_BYTE *)(v10 + 16) & 4) != 0)
    && (!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0)
    && (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0))
  {
    if (v16)
    {
      v28 = *(_DWORD *)(v16 + 16);
      v27 = (v28 >> 2) & 1;
      if (!v18 || (v28 & 4) == 0)
        goto LABEL_35;
    }
    else if (!v18)
    {
      v27 = 1;
      goto LABEL_35;
    }
    v27 = (*(unsigned __int8 *)(v18 + 16) >> 2) & 1;
  }
  else
  {
    v27 = 0;
  }
LABEL_35:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v27, v10, v12, v14, v16, v18, &v29);
  *a6 = v29;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int v13;
  _DWORD *v15;
  char *v16;
  _DWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v25;
        if (v25)
        {
          v16 = (char *)(v25 + 5);
          *v25 = 2;
          v15[1] = v13;
          *((_QWORD *)v15 + 1) = v15 + 5;
          v15[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v16, a3, a4, a5, a6, a7);
        }
        goto LABEL_16;
      }
LABEL_18:
      v15 = 0;
      goto LABEL_16;
    }
LABEL_17:
    v15 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_17;
  if (result > 0x7FFFFFEF)
    goto LABEL_18;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v25;
  if (v25)
  {
    v17 = v25 + 5;
    *v25 = 2;
    v15[1] = v13;
    *((_QWORD *)v15 + 1) = v15 + 5;
    v15[4] = 0;
    v23 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v23, (char *)v15 + 20);
    v18 = v23;
    if (v23)
      v18 = *(unsigned int *)(v23 + 4);
    v19 = (char *)v17 + 2 * v18;
    v24 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v24, v19);
    v20 = v24;
    if (v24)
      v20 = *(unsigned int *)(v24 + 4);
    v21 = &v19[2 * v20];
    v25 = (_DWORD *)a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v25, v21);
    v22 = (unint64_t)v25;
    if (v25)
      v22 = v25[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v21[2 * v22], a6, a7);
  }
LABEL_16:
  *a8 = v15;
  return result;
}

void sub_19469D594(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  size_t v21;
  uint64_t v22;
  char *v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  char *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  char v33;
  char v34;
  char v35;

  if (a2)
  {
    v12 = *(char **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 == 1)
          *__dst = *v12;
        else
          memcpy(__dst, v12, v13);
      }
    }
    else
    {
      if (v13 < 0x10)
      {
        v24 = __dst;
      }
      else
      {
        v24 = &__dst[v13 & 0xFFFFFFF0];
        v25 = (unsigned __int128 *)__dst;
        do
        {
          v26 = (unsigned __int128)vld2q_s8(v12);
          v12 += 32;
          *v25++ = v26;
        }
        while (v25 != (unsigned __int128 *)v24);
      }
      while (v24 != &__dst[v13])
      {
        v33 = *v12;
        v12 += 2;
        *v24++ = v33;
      }
    }
    v14 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v14 = 0;
  }
  v15 = &__dst[v14];
  if (a3)
  {
    v16 = *(char **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 == 1)
          *v15 = *v16;
        else
          memcpy(v15, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v27 = v15;
      }
      else
      {
        v27 = &v15[v17 & 0xFFFFFFF0];
        v28 = (unsigned __int128 *)v15;
        do
        {
          v29 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v28++ = v29;
        }
        while (v28 != (unsigned __int128 *)v27);
      }
      while (v27 != &v15[v17])
      {
        v34 = *v16;
        v16 += 2;
        *v27++ = v34;
      }
    }
    v18 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v15[v18];
  if (a4)
  {
    v20 = *(char **)(a4 + 8);
    v21 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
          *v19 = *v20;
        else
          memcpy(v19, v20, v21);
      }
    }
    else
    {
      if (v21 < 0x10)
      {
        v30 = (unsigned __int128 *)&v15[v18];
      }
      else
      {
        v30 = (unsigned __int128 *)&v19[v21 & 0xFFFFFFF0];
        v31 = (unsigned __int128 *)&v15[v18];
        do
        {
          v32 = (unsigned __int128)vld2q_s8(v20);
          v20 += 32;
          *v31++ = v32;
        }
        while (v31 != v30);
      }
      while (v30 != (unsigned __int128 *)&v19[v21])
      {
        v35 = *v20;
        v20 += 2;
        *(_BYTE *)v30 = v35;
        v30 = (unsigned __int128 *)((char *)v30 + 1);
      }
    }
    v22 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v22 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v19[v22], a5, a6);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::settingsDidChange(WTF::OptionSet<WebCore::RealtimeMediaSourceSettings::Flag>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  *(_BYTE *)(v2 + 1162) = 0;
  if (*(_BYTE *)(result + 16))
    result = WebCore::AVVideoCaptureSource::updateWhiteBalanceMode(v2);
  if (*(_BYTE *)(v1 + 17))
    result = WebCore::AVVideoCaptureSource::updateTorch(v2);
  if (*(_BYTE *)(v2 + 1162))
  {
    *(_BYTE *)(v2 + 1162) = 0;
    v3 = *(_QWORD *)(v2 + 1152);
    if (v3)
    {
      v4 = v3 - 1;
      *(_QWORD *)(v2 + 1152) = v4;
      if (!v4)
      {
        result = *(_QWORD *)(v2 + 960);
        if (result)
          return objc_msgSend((id)result, "commitConfiguration");
      }
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469DC30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469E198(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, uint64_t a3)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 buf;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54[3];

  v54[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v47, " ignored already resolved or rejected ");
  result = WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a3, &v46);
  if (v48)
  {
    v5 = *((_DWORD *)v48 + 1);
    if (v47)
      goto LABEL_3;
LABEL_91:
    v6 = 0;
    if (v46)
      goto LABEL_4;
LABEL_92:
    v7 = 0;
    goto LABEL_5;
  }
  v5 = 0;
  if (!v47)
    goto LABEL_91;
LABEL_3:
  v6 = *((_DWORD *)v47 + 1);
  if (!v46)
    goto LABEL_92;
LABEL_4:
  v7 = *((_DWORD *)v46 + 1);
LABEL_5:
  if ((v7 | v6) < 0)
    goto LABEL_95;
  v8 = __OFADD__(v6, v7);
  v9 = v6 + v7;
  v10 = v8;
  if (v5 < 0)
    goto LABEL_95;
  if (v10)
    goto LABEL_95;
  result = (v5 + v9);
  if (__OFADD__(v5, v9))
    goto LABEL_95;
  if (v48 && (*((_BYTE *)v48 + 16) & 4) == 0)
  {
    v11 = 0;
    goto LABEL_19;
  }
  if (v47)
  {
    v12 = *((_DWORD *)v47 + 4);
    v11 = (v12 >> 2) & 1;
    if (v46 && (v12 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v46)
    {
LABEL_18:
      v11 = (*((unsigned __int8 *)v46 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v11 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, v48, (uint64_t)v47, (uint64_t)v46, &buf);
  v49 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v14 = v46;
  v46 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v47;
  v47 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v48;
  v48 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(NSObject **)(a1 + 32);
  v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v44 ? (char *)v44 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v18 = (uint64_t)v44;
    v44 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v51 = 0;
              WTF::String::String((WTF::String *)&v52, " ignored already resolved or rejected ");
              v53 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a3, v54);
              v44 = 0;
              v45 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v45) = 3;
              v44 = v29;
              v30 = HIDWORD(v45);
              *((_DWORD *)v29 + 4 * HIDWORD(v45)) = buf;
              v31 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v51;
              v32 = v52;
              if (v52)
                *(_DWORD *)v52 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              *((_DWORD *)v29 + 4 * (v30 + 2)) = v53;
              v33 = v54[0];
              if (v54[0])
                *(_DWORD *)v54[0] += 2;
              *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
              HIDWORD(v45) = v30 + 3;
              (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, 4, &v44);
              v34 = v44;
              if (HIDWORD(v45))
              {
                v35 = 16 * HIDWORD(v45);
                v36 = (WTF::StringImpl **)((char *)v44 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v44;
              }
              if (v34)
              {
                v44 = 0;
                LODWORD(v45) = 0;
                WTF::fastFree(v34, v19);
              }
              v38 = v54[0];
              v54[0] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v52;
              v52 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v41 = __ldxr(v21);
          if (v41 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469E7D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, int a14, int a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, char a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25)
{
  unsigned __int8 *v25;
  int v27;

  v27 = __ldxr(v25);
  if (v27 == 1)
  {
    if (!__stlxr(0, v25))
    {
LABEL_6:
      if (a19)
      {
        if (*(_DWORD *)a19 == 2)
          WTF::StringImpl::destroy(a19, a2);
        else
          *(_DWORD *)a19 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19469EEB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int **v9;
  void *v10;
  WTF::NativePromiseBase **v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::Lock *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  WTF *v30;
  WTF *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *result;
  unsigned int **v38;
  int v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[2];
  WTF::Lock *v47;
  char v48;
  unsigned int *v49;

  v44 = v46;
  v45 = 1;
  v41 = (WTF *)&v43;
  v42 = 1;
  v4 = *(void **)(a1 + 96);
  if (v4 == (void *)(a1 + 112))
  {
    v6 = *(unsigned int *)(a1 + 108);
    memcpy(&v43, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = a1 + 112;
    v41 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 104);
    LODWORD(v6) = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 104) = 1;
    LODWORD(v42) = v5;
  }
  HIDWORD(v42) = v6;
  *(_QWORD *)(a1 + 104) = 1;
  v7 = *(_DWORD *)(a1 + 128);
  v8 = *(_DWORD *)(a1 + 132);
  v9 = *(unsigned int ***)(a1 + 120);
  v38 = v9;
  v39 = v7;
  v40 = v8;
  v44 = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v45 = 0;
  *(_QWORD *)(a1 + 128) = 0;
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v4);
  if (HIDWORD(v42))
  {
    v11 = (WTF::NativePromiseBase **)v41;
    v12 = 8 * HIDWORD(v42);
    do
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(*v11++, a1, a2);
      v12 -= 8;
    }
    while (v12);
    v9 = v38;
    v8 = v40;
  }
  if (v8)
  {
    v13 = &v9[5 * v8];
    while (1)
    {
      v14 = *v9;
      *v9 = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      v44 = 0;
      v45 = 0;
      v46[0] = "<chained promise>";
      v46[1] = 0;
      v17 = (unsigned __int8 *)(v14 + 12);
      v47 = (WTF::Lock *)(v14 + 12);
      v48 = 1;
      if (__ldaxr((unsigned __int8 *)v14 + 48))
        break;
      if (__stxr(1u, v17))
        goto LABEL_16;
LABEL_17:
      v19 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v17);
      if (*v19 && v19[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v19, 4u, (WTF::Logger::LogSiteIdentifier *)&v44, " settling chained promise ", (uint64_t)v14);
      v20 = v14[22];
      v21 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v20 == -1)
      {
        if ((_DWORD)v21 == -1)
          goto LABEL_25;
      }
      else if ((_DWORD)v21 == -1)
      {
        ((void (*)(unsigned int **, unsigned int *))off_1E31F70E0[v20])(&v49, v14 + 14);
        v14[22] = -1;
        goto LABEL_25;
      }
      v49 = v14 + 14;
      ((void (*)(unsigned int **))off_1E31F7188[v21])(&v49);
LABEL_25:
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(v14, &v47);
      if (!v48)
        goto LABEL_31;
      v22 = v47;
      v23 = __ldxr((unsigned __int8 *)v47);
      if (v23 != 1)
      {
        __clrex();
LABEL_30:
        WTF::Lock::unlockSlow(v22);
        goto LABEL_31;
      }
      if (__stlxr(0, (unsigned __int8 *)v47))
        goto LABEL_30;
LABEL_31:
      v24 = v14 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      }
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead((uint64_t)v14);
      do
      {
        v27 = __ldaxr(v24);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v24));
      if (!v28)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      }
      v9 += 5;
      if (v9 == v13)
        goto LABEL_40;
    }
    __clrex();
LABEL_16:
    v17 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_17;
  }
LABEL_40:
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v10);
  if (HIDWORD(v42))
  {
    v30 = v41;
    v31 = (WTF *)((char *)v41 + 8 * HIDWORD(v42));
    do
    {
      v32 = *(unsigned int **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
      {
        v33 = v32 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v32 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      v30 = (WTF *)((char *)v30 + 8);
    }
    while (v30 != v31);
  }
  result = v41;
  if (&v43 != (uint64_t *)v41 && v41 != 0)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    return (WTF *)WTF::fastFree(result, v29);
  }
  return result;
}

void sub_19469F408(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, char a11, uint64_t a12, WTF *a13, int a14, unsigned int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::Lock *a21,char a22)
{
  unsigned int *v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  WTF *v30;
  unsigned int **v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  if (v22)
  {
    v24 = v22 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
    }
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead((uint64_t)v22);
    do
    {
      v27 = __ldaxr(v24);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v24));
    if (!v28)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a15)
  {
    v32 = (unsigned int **)a13;
    v33 = (unsigned int **)((char *)a13 + 8 * a15);
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
        }
      }
      ++v32;
    }
    while (v32 != v33);
  }
  v30 = a13;
  if (a10 != a13 && a13 != 0)
  {
    a13 = 0;
    a14 = 0;
    WTF::fastFree(v30, v29);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v22;
  int v23;
  _QWORD v25[3];
  int v26;
  char v27;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 137));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E31F73C8;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v25[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v25);
      result = (unsigned __int8 *)v25[0];
      v25[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v25[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v25, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 88);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult((uint64_t)v25, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v25);
    if (v26 != -1)
      ((void (*)(char *, _QWORD *))off_1E31F70F8[v26])(&v27, v25);
    goto LABEL_48;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 88) != 2)
  {
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v22 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v22 + 16))(v25, v22);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v25);
  if (v26 != -1)
    ((void (*)(char *, _QWORD *))off_1E31F70F8[v26])(&v27, v25);
  v26 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_48:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_19469F87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  unsigned __int8 **v18;

  if (__ldaxr(*v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v18))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 88) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 24) = -1;
  v6 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E31F7178[v6])(v8, v3, a2 + 56);
    *(_DWORD *)(v3 + 24) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_19469FAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;

  v16 = *(unsigned int *)(v14 + 24);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E31F70F8[v16])(&a13, v14);
  *(_DWORD *)(v14 + 24) = -1;
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v72 = v64;
  v70 = v62;
  v71 = v63;
  v69 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v52 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a8);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v60);
                  v42 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v59;
                  a4 = v40;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v44 = (WTF::StringImpl *)v86[0];
                v86[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v84;
                v84 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v82;
                v82 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v80;
                v80 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v78;
                v78 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v76;
                v76 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v52);
            }
            v51 = __ldxr(v23);
            if (v51 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1946A0234(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  char v36;
  int v37;
  char v38;
  int v39;
  unsigned int v40;
  uint64_t v41;

  v14 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *a3;
  if (*a3)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  v20 = *a4;
  if (*a4)
    v21 = *(_DWORD *)(v20 + 4);
  else
    v21 = 0;
  v22 = *a5;
  if (*a5)
    v23 = *(_DWORD *)(v22 + 4);
  else
    v23 = 0;
  v24 = *a6;
  if (*a6)
    v25 = *(_DWORD *)(v24 + 4);
  else
    v25 = 0;
  v26 = *a7;
  if (*a7)
    v27 = *(_DWORD *)(v26 + 4);
  else
    v27 = 0;
  if ((v27 | v25) < 0)
    goto LABEL_68;
  v28 = __OFADD__(v25, v27);
  v29 = v25 + v27;
  v30 = v28;
  if (v23 < 0 || v30)
    goto LABEL_68;
  v28 = __OFADD__(v23, v29);
  v31 = v23 + v29;
  v32 = v28;
  if (v21 < 0 || v32)
    goto LABEL_68;
  v28 = __OFADD__(v21, v31);
  v33 = v21 + v31;
  v34 = v28;
  if (v19 < 0
    || v34
    || ((v28 = __OFADD__(v19, v33), v35 = v19 + v33, !v28) ? (v36 = 0) : (v36 = 1),
        v17 < 0
     || (v36 & 1) != 0
     || ((v28 = __OFADD__(v17, v35), v37 = v17 + v35, !v28) ? (v38 = 0) : (v38 = 1),
         v15 < 0 || (v38 & 1) != 0 || (result = (v15 + v37), __OFADD__(v15, v37)))))
  {
LABEL_68:
    *a8 = 0;
    return result;
  }
  if ((!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0)
    && (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0)
    && (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0)
    && (!v20 || (*(_BYTE *)(v20 + 16) & 4) != 0)
    && (!v22 || (*(_BYTE *)(v22 + 16) & 4) != 0))
  {
    if (v24)
    {
      v40 = *(_DWORD *)(v24 + 16);
      v39 = (v40 >> 2) & 1;
      if (!v26 || (v40 & 4) == 0)
        goto LABEL_53;
    }
    else if (!v26)
    {
      v39 = 1;
      goto LABEL_53;
    }
    v39 = (*(unsigned __int8 *)(v26 + 16) >> 2) & 1;
  }
  else
  {
    v39 = 0;
  }
LABEL_53:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v39, v14, v16, v18, v20, v22, v24, &v41, v26);
  *a8 = v41;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int v16;
  _QWORD *i;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  uint64_t v26;
  unsigned __int128 *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 *v32;
  unsigned __int128 v33;
  char v34;
  char v35;
  uint64_t v37;

  v16 = result;
  i = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = v37;
        if (v37)
        {
          v19 = (_BYTE *)(v37 + 20);
          *(_DWORD *)v37 = 2;
          *(_DWORD *)(v37 + 4) = v16;
          *(_QWORD *)(v37 + 8) = v37 + 20;
          *(_DWORD *)(v37 + 16) = 4;
          if (a3)
          {
            v20 = *(_BYTE **)(a3 + 8);
            v21 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v21)
              {
                if ((_DWORD)v21 == 1)
                  *v19 = *v20;
                else
                  memcpy((void *)(v37 + 20), v20, v21);
              }
            }
            else
            {
              if (v21 < 0x10)
              {
                v27 = (unsigned __int128 *)(v37 + 20);
              }
              else
              {
                v27 = (unsigned __int128 *)&v19[v21 & 0xFFFFFFF0];
                v28 = (unsigned __int128 *)(v37 + 20);
                do
                {
                  v29 = (unsigned __int128)vld2q_s8(v20);
                  v20 += 32;
                  *v28++ = v29;
                }
                while (v28 != v27);
              }
              while (v27 != (unsigned __int128 *)&v19[v21])
              {
                v34 = *v20;
                v20 += 2;
                *(_BYTE *)v27 = v34;
                v27 = (unsigned __int128 *)((char *)v27 + 1);
              }
            }
            v22 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v22 = 0;
          }
          v23 = &v19[v22];
          if (a4)
          {
            v24 = *(_BYTE **)(a4 + 8);
            v25 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              i = a9;
              if ((_DWORD)v25)
              {
                if ((_DWORD)v25 == 1)
                  *v23 = *v24;
                else
                  memcpy(v23, v24, v25);
              }
            }
            else
            {
              v30 = (unsigned __int128 *)&v23[v25];
              if (v25 < 0x10)
              {
                v31 = (unsigned __int128 *)v23;
              }
              else
              {
                v31 = (unsigned __int128 *)&v23[v25 & 0xFFFFFFF0];
                v32 = (unsigned __int128 *)v23;
                do
                {
                  v33 = (unsigned __int128)vld2q_s8(v24);
                  v24 += 32;
                  *v32++ = v33;
                }
                while (v32 != v31);
              }
              for (i = a9; v31 != v30; v31 = (unsigned __int128 *)((char *)v31 + 1))
              {
                v35 = *v24;
                v24 += 2;
                *(_BYTE *)v31 = v35;
              }
            }
            v26 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v26 = 0;
            i = a9;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v23[v26], a5, a6, a7, a8, a10);
        }
        goto LABEL_22;
      }
LABEL_28:
      v18 = 0;
      goto LABEL_22;
    }
LABEL_27:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_22;
  }
  if (!(_DWORD)result)
    goto LABEL_27;
  if (result > 0x7FFFFFEF)
    goto LABEL_28;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = v37;
  if (v37)
  {
    *(_DWORD *)v37 = 2;
    *(_DWORD *)(v37 + 4) = v16;
    *(_QWORD *)(v37 + 8) = v37 + 20;
    *(_DWORD *)(v37 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v37 + 20), a3, a4, a5, a6, a7, a8, a10);
  }
LABEL_22:
  *i = v18;
  return result;
}

void sub_1946A09B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v25, __dst);
  v15 = v25;
  if (v25)
    v15 = *(unsigned int *)(v25 + 4);
  v16 = &__dst[2 * v15];
  v26 = a3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, v16);
  v17 = v26;
  if (v26)
    v17 = *(unsigned int *)(v26 + 4);
  v18 = &v16[2 * v17];
  v27 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v27, v18);
  v19 = v27;
  if (v27)
    v19 = *(unsigned int *)(v27 + 4);
  v20 = &v18[2 * v19];
  v28 = a5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v28, v20);
  v21 = v28;
  if (v28)
    v21 = *(unsigned int *)(v28 + 4);
  v22 = &v20[2 * v21];
  v29 = a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v29, v22);
  v23 = v29;
  if (v29)
    v23 = *(unsigned int *)(v29 + 4);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v22[2 * v23], a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_SE_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_SE_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E31F73C8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E31F73C8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  _QWORD v15[3];
  int v16;
  char v17;

  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v15[0] = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v15, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 88);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 88) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(v15, v13);
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
    if (v16 != -1)
      ((void (*)(char *, _QWORD *))off_1E31F70F8[v16])(&v17, v15);
    v16 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult((uint64_t)v15, v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v10, v15);
  if (v16 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))off_1E31F70F8[v16])(&v17, v15);
  return result;
}

void sub_1946A0E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;
  uint64_t v14;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E31F70F8[a13])(v14 - 33, &a10);
  a13 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F70E0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v9[0] = 0;
      v10 = -1;
      v7 = *(unsigned int *)(a3 + 24);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E31F7178[v7])(&v11, v9, a3);
        v10 = v7;
      }
      result = std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::__swap[abi:sn180100]((uint64_t)v9, a2);
      if (v10 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E31F70F8[v10])(&v12, v9);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E31F70E0[v5])(v9, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 24) = -1;
  v8 = *(unsigned int *)(a3 + 24);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E31F7178[v8])(&v12, v4, a3);
    *(_DWORD *)(v4 + 24) = v8;
  }
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

void sub_1946A10A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_1E31F70F8[a13])(v13 - 33, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F70E0[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _WORD v13[12];
  int v14;
  char v15;
  char v16;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 == -1)
  {
    v6 = *(_DWORD *)(a2 + 24);
    if (v6 == -1)
      return result;
    v13[0] = 0;
    goto LABEL_11;
  }
  v5 = (_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 24);
  if (v6 != -1 && v6 == (_DWORD)v4)
    return ((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1E31F71A0[v4])(v13, result, a2);
  v13[0] = 0;
  if (!*((_BYTE *)v13 + v4))
    goto LABEL_17;
  v13[0] = 0;
  if (v6 != -1)
  {
LABEL_11:
    if (*((_BYTE *)v13 + v6))
      v8 = result;
    else
      v8 = a2;
    if (!*((_BYTE *)v13 + v6))
      v2 = result;
    v6 = *(_DWORD *)(v2 + 24);
    v3 = v8;
LABEL_17:
    LOBYTE(v13[0]) = 0;
    v14 = -1;
    v5 = (_DWORD *)(v2 + 24);
    if (v6 != -1)
    {
      result = ((uint64_t (*)(char *, _WORD *, uint64_t))off_1E31F7178[v6])(&v15, v13, v2);
      v14 = v6;
      v9 = *v5;
      if ((_DWORD)v9 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E31F70F8[v9])(&v16, v2);
    }
    goto LABEL_20;
  }
  LOBYTE(v13[0]) = 0;
  v14 = -1;
LABEL_20:
  *(_DWORD *)(v2 + 24) = -1;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E31F71B0[v10])(&v15, v2, v3);
    *v5 = v10;
    v11 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v11 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E31F70F8[v11])(&v16, v3);
  }
  *(_DWORD *)(v3 + 24) = -1;
  v12 = v14;
  if (v14 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, _WORD *))off_1E31F71B0[v14])(&v15, v3, v13);
    *(_DWORD *)(v3 + 24) = v12;
    if (v14 != -1)
      return ((uint64_t (*)(char *, _WORD *))off_1E31F70F8[v14])(&v16, v13);
  }
  return result;
}

void sub_1946A136C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1)
    ((void (*)(char *, char *))off_1E31F70F8[a13])(&a18, &a10);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESD_EE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SD_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
  v4 = a2[2];
  a2[2] = a3[2];
  a3[2] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESD_EE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SD_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_6__implIJSF_SE_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SE_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_6__implIJSF_SE_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SE_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::reject<WTF::ASCIILiteral,std::enable_if<true,void>>(uint64_t a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *result;
  int v14;
  WTF::Lock *v15;
  char v16;
  uint64_t v17;

  v6 = (WTF::Lock *)(a1 + 48);
  v15 = v6;
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>>((uint64_t)v8, 4u, a3, " rejecting ", a1);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = v17;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v12 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E31F70E0[v12])(&v17, a1 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  *(_DWORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 88) = 1;
  result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(a1, (unsigned __int8 **)&v15);
  if (v16)
  {
    result = v15;
    v14 = __ldxr((unsigned __int8 *)v15);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1946A1580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::Lock *a10, char a11)
{
  int v12;

  if (a11)
  {
    v12 = __ldxr((unsigned __int8 *)a10);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a10))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a10);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A19C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [28]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A1F2C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::takePhotoInternal(WebCore::PhotoSettings &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;

  *a1 = &off_1E31F71D0;
  v2 = (const void *)a1[4];
  a1[4] = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  a1[3] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 304));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::takePhotoInternal(WebCore::PhotoSettings &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E31F71D0;
  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v5 + 304));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::takePhotoInternal(WebCore::PhotoSettings &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 24), "maxPhotoDimensions");
    if ((_DWORD)v3 && HIDWORD(v3) != 0)
    {
      v5 = objc_msgSend(*(id *)(a1 + 32), "maxPhotoDimensions");
      if ((int)v3 > (int)v5 || SHIDWORD(v3) > SHIDWORD(v5))
        objc_msgSend(*(id *)(a1 + 32), "setMaxPhotoDimensions:", v3);
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "capturePhotoWithSettings:delegate:", *(_QWORD *)(a1 + 24), *(_QWORD *)(v2 + 952));
}

WTF::Lock *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::resolve<WebCore::PhotoCapabilities&,std::enable_if<true,void>>(uint64_t a1, __int128 *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  int v3;
  unsigned __int8 *v7;
  _BYTE *v9;
  BOOL v10;
  int v11;
  void *v12;
  uint64_t v13;
  WTF::Lock *result;
  void *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  unsigned __int8 *v25;
  char v26;
  char v27;

  v7 = (unsigned __int8 *)(a1 + 48);
  v25 = v7;
  v26 = 1;
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  v7 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
LABEL_5:
  v9 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v7);
  if (*v9)
    v10 = v9[16] >= 4u;
  else
    v10 = 0;
  if (v10)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v9, 4u, a3, " resolving ", a1);
  v21 = a2[4];
  v22 = a2[5];
  v23 = a2[6];
  v24 = *((_BYTE *)a2 + 112);
  v17 = *a2;
  v18 = a2[1];
  v19 = a2[2];
  v20 = a2[3];
  v11 = *((unsigned __int8 *)a2 + 136);
  if (*((_BYTE *)a2 + 136))
  {
    v3 = *((_DWORD *)a2 + 33);
    if (v3)
    {
      v12 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)a2 + 33));
      memcpy(v12, *((const void **)a2 + 15), *((unsigned int *)a2 + 33));
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v13 != -1)
    ((void (*)(char *, uint64_t))off_1E31F71E8[v13])(&v27, a1 + 56);
  *(_DWORD *)(a1 + 216) = -1;
  *(_OWORD *)(a1 + 128) = v21;
  *(_OWORD *)(a1 + 144) = v22;
  *(_OWORD *)(a1 + 160) = v23;
  *(_BYTE *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 80) = v18;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v20;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (v11)
  {
    *(_QWORD *)(a1 + 184) = v12;
    *(_DWORD *)(a1 + 192) = v3;
    *(_DWORD *)(a1 + 196) = v3;
    *(_BYTE *)(a1 + 200) = 1;
    v12 = 0;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1;
  result = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(a1, &v25);
  if (v11)
  {
    if (v12)
      result = (WTF::Lock *)WTF::fastFree((WTF *)v12, v15);
  }
  if (v26)
  {
    result = (WTF::Lock *)v25;
    v16 = __ldxr(v25);
    if (v16 == 1)
    {
      if (!__stlxr(0, v25))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1946A2398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned __int8 *v3;
  int v4;

  if (*(_BYTE *)(v1 - 64))
  {
    v3 = *(unsigned __int8 **)(v1 - 72);
    v4 = __ldxr(v3);
    if (v4 == 1)
    {
      if (!__stlxr(0, v3))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::NativePromise(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE *v5;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E31F73F0;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 1;
  *(_QWORD *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 264) = 0;
  v5 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v5 && v5[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v5, 4u, "creating ", a1);
  return a1;
}

void sub_1946A24A8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  v17 = v15;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17, a2);
  v20 = *(unsigned int *)(v13 + 236);
  if ((_DWORD)v20)
  {
    v24 = *(unsigned int ***)(v13 + 224);
    v25 = &v24[v20];
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v21 = *(WTF **)(v13 + 224);
  if (v16 != v21 && v21 != 0)
  {
    *(_QWORD *)(v13 + 224) = 0;
    *(_DWORD *)(v13 + 232) = 0;
    WTF::fastFree(v21, v19);
  }
  v23 = *(unsigned int *)(v13 + 216);
  if ((_DWORD)v23 != -1)
    ((void (*)(char *, uint64_t))off_1E31F71E8[v23])(&a13, v14);
  *(_DWORD *)(v13 + 216) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 260);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 248);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_1946A260C(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  _BYTE v17[2];

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [12],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 248, v4);
  v6 = *(unsigned int *)(a1 + 236);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int ***)(a1 + 224);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v13 = *(WTF **)(a1 + 224);
  if ((WTF *)(a1 + 240) != v13 && v13 != 0)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    WTF::fastFree(v13, v5);
  }
  v15 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v15 != -1)
    ((void (*)(_BYTE *, uint64_t))off_1E31F71E8[v15])(v17, a1 + 56);
  *(_DWORD *)(a1 + 216) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A2A58(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a2 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_1946A2CE8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1946A2DF0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 152);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F7200[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 152) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v2;

  if (*(_BYTE *)(a2 + 136))
  {
    v2 = *(WTF **)(a2 + 120);
    if (v2)
    {
      *(_QWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 128) = 0;
      WTF::fastFree(v2, (void *)a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A3028(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 248, a2);
  v16 = *(unsigned int *)(v13 + 236);
  if ((_DWORD)v16)
  {
    v20 = *(unsigned int ***)(v13 + 224);
    v21 = &v20[v16];
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v17 = *(WTF **)(v13 + 224);
  if ((WTF *)(v13 + 240) != v17 && v17 != 0)
  {
    *(_QWORD *)(v13 + 224) = 0;
    *(_DWORD *)(v13 + 232) = 0;
    WTF::fastFree(v17, v15);
  }
  v19 = *(unsigned int *)(v13 + 216);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_1E31F71E8[v19])(&a13, v13 + 56);
  *(_DWORD *)(v13 + 216) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<char [12],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A34EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A3B3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int **v9;
  void *v10;
  WTF::NativePromiseBase **v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::Lock *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  WTF *v30;
  WTF *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *result;
  unsigned int **v38;
  int v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[2];
  WTF::Lock *v47;
  char v48;
  unsigned int *v49;

  v44 = v46;
  v45 = 1;
  v41 = (WTF *)&v43;
  v42 = 1;
  v4 = *(void **)(a1 + 224);
  if (v4 == (void *)(a1 + 240))
  {
    v6 = *(unsigned int *)(a1 + 236);
    memcpy(&v43, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 224) = a1 + 240;
    v41 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 232);
    LODWORD(v6) = *(_DWORD *)(a1 + 236);
    *(_DWORD *)(a1 + 232) = 1;
    LODWORD(v42) = v5;
  }
  HIDWORD(v42) = v6;
  *(_QWORD *)(a1 + 232) = 1;
  v7 = *(_DWORD *)(a1 + 260);
  v8 = *(_DWORD *)(a1 + 256);
  v9 = *(unsigned int ***)(a1 + 248);
  v38 = v9;
  v39 = v8;
  v40 = v7;
  v44 = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v45 = 0;
  *(_QWORD *)(a1 + 256) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v4);
  if (HIDWORD(v42))
  {
    v11 = (WTF::NativePromiseBase **)v41;
    v12 = 8 * HIDWORD(v42);
    do
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(*v11++, a1, a2);
      v12 -= 8;
    }
    while (v12);
    v9 = v38;
    v7 = v40;
  }
  if (v7)
  {
    v13 = &v9[5 * v7];
    while (1)
    {
      v14 = *v9;
      *v9 = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      v44 = 0;
      v45 = 0;
      v46[0] = "<chained promise>";
      v46[1] = 0;
      v17 = (unsigned __int8 *)(v14 + 12);
      v47 = (WTF::Lock *)(v14 + 12);
      v48 = 1;
      if (__ldaxr((unsigned __int8 *)v14 + 48))
        break;
      if (__stxr(1u, v17))
        goto LABEL_16;
LABEL_17:
      v19 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v17);
      if (*v19 && v19[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>((uint64_t)v19, 4u, (WTF::Logger::LogSiteIdentifier *)&v44, " settling chained promise ", (uint64_t)v14);
      v20 = v14[54];
      v21 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v20 == -1)
      {
        if ((_DWORD)v21 == -1)
          goto LABEL_25;
      }
      else if ((_DWORD)v21 == -1)
      {
        ((void (*)(unsigned int **, unsigned int *))off_1E31F71E8[v20])(&v49, v14 + 14);
        v14[54] = -1;
        goto LABEL_25;
      }
      v49 = v14 + 14;
      ((void (*)(unsigned int **))off_1E31F7220[v21])(&v49);
LABEL_25:
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::dispatchAll(v14, &v47);
      if (!v48)
        goto LABEL_31;
      v22 = v47;
      v23 = __ldxr((unsigned __int8 *)v47);
      if (v23 != 1)
      {
        __clrex();
LABEL_30:
        WTF::Lock::unlockSlow(v22);
        goto LABEL_31;
      }
      if (__stlxr(0, (unsigned __int8 *)v47))
        goto LABEL_30;
LABEL_31:
      v24 = v14 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      }
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead((uint64_t)v14);
      do
      {
        v27 = __ldaxr(v24);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v24));
      if (!v28)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      }
      v9 += 5;
      if (v9 == v13)
        goto LABEL_40;
    }
    __clrex();
LABEL_16:
    v17 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_17;
  }
LABEL_40:
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v10);
  if (HIDWORD(v42))
  {
    v30 = v41;
    v31 = (WTF *)((char *)v41 + 8 * HIDWORD(v42));
    do
    {
      v32 = *(unsigned int **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
      {
        v33 = v32 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v32 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      v30 = (WTF *)((char *)v30 + 8);
    }
    while (v30 != v31);
  }
  result = v41;
  if (&v43 != (uint64_t *)v41 && v41 != 0)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    return (WTF *)WTF::fastFree(result, v29);
  }
  return result;
}

void sub_1946A4090(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, char a11, uint64_t a12, WTF *a13, int a14, unsigned int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::Lock *a21,char a22)
{
  unsigned int *v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  WTF *v30;
  unsigned int **v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  if (v22)
  {
    v24 = v22 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
    }
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::assertIsDead((uint64_t)v22);
    do
    {
      v27 = __ldaxr(v24);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v24));
    if (!v28)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoCapabilities,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a15)
  {
    v32 = (unsigned int **)a13;
    v33 = (unsigned int **)((char *)a13 + 8 * a15);
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
        }
      }
      ++v32;
    }
    while (v32 != v33);
  }
  v30 = a13;
  if (a10 != a13 && a13 != 0)
  {
    a13 = 0;
    a14 = 0;
    WTF::fastFree(v30, v29);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v22;
  int v23;
  char v25;
  unsigned __int8 *v26;
  _BYTE v27[144];
  int v28;
  uint64_t v29;

  v5 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 265));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E31F7418;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v26 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v26);
      result = v26;
      v26 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v26 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v26, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 216);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult((uint64_t)&v26, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v26);
    if (v28 != -1)
      ((void (*)(char *, _BYTE *))off_1E31F7200[v28])(&v25, v27);
    goto LABEL_48;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 216) != 2)
  {
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v22 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v22 + 16))(&v26, v22);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v26);
  if (v28 != -1)
    ((void (*)(char *, _BYTE *))off_1E31F7200[v28])(&v25, v27);
  v28 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_48:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_1946A4544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  unsigned __int8 **v15;

  if (__ldaxr(*v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v15))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 216) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 152) = -1;
  v6 = *(unsigned int *)(a2 + 208);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E31F7210[v6])(v8, v3 + 8, a2 + 64);
    *(_DWORD *)(v3 + 152) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_1946A4790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;

  v17 = *(unsigned int *)(v14 + 152);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E31F7200[v17])(&a13, v15);
  *(_DWORD *)(v14 + 152) = -1;
  v18 = __ldxr(v13);
  if (v18 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v72 = v64;
  v70 = v62;
  v71 = v63;
  v69 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v52 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a8);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v60);
                  v42 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v59;
                  a4 = v40;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v44 = (WTF::StringImpl *)v86[0];
                v86[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v84;
                v84 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v82;
                v82 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v80;
                v80 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v78;
                v78 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v76;
                v76 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v52);
            }
            v51 = __ldxr(v23);
            if (v51 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1946A4F18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*((_BYTE *)a3 + 136))
  {
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    v9 = *((_QWORD *)a3 + 15);
    *((_QWORD *)a3 + 15) = 0;
    *(_QWORD *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(_BYTE *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E31F7418;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E31F7418;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  _BYTE v17[144];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v16 = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v16, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 216);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 216) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(&v16, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v16);
    if (v18 != -1)
      ((void (*)(char *, _BYTE *))off_1E31F7200[v18])(&v15, v17);
    v18 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult((uint64_t)&v16, v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v16);
  if (v18 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E31F7200[v18])(&v15, v17);
  return result;
}

void sub_1946A56A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = *(unsigned int *)(v17 + 152);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t *))off_1E31F7200[v19])(&a14, &a16);
  *(_DWORD *)(v17 + 152) = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A5C4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F71E8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 160) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _BYTE v11[8];
  _BYTE v12[144];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v12[0] = 0;
      v13 = -1;
      v7 = *(unsigned int *)(a3 + 152);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E31F7210[v7])(&v9, v12, a3 + 8);
        v13 = v7;
      }
      result = std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>::__swap[abi:sn180100]((uint64_t)v12, a2 + 8);
      if (v13 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E31F7200[v13])(&v10, v12);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E31F71E8[v5])(v11, v4);
  }
  *(_BYTE *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 160) = -1;
  *(_DWORD *)(v4 + 152) = -1;
  v8 = *(unsigned int *)(a3 + 152);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E31F7210[v8])(&v10, v4 + 8, a3 + 8);
    *(_DWORD *)(v4 + 152) = v8;
  }
  *(_DWORD *)(v4 + 160) = 1;
  return result;
}

void sub_1946A5FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v14 + 152);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E31F7200[v16])(&a12, v13);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore17PhotoCapabilitiesENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 160);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F71E8[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 160) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<WebCore::PhotoCapabilities,WTF::String>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  _WORD v15[72];
  int v16;
  uint64_t v17;

  v2 = a2;
  v3 = result;
  v17 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(result + 144);
  if ((_DWORD)v4 == -1)
  {
    v6 = *(_DWORD *)(a2 + 144);
    if (v6 == -1)
      return result;
    v15[0] = 0;
    goto LABEL_11;
  }
  v5 = (_DWORD *)(a2 + 144);
  v6 = *(_DWORD *)(a2 + 144);
  if (v6 != -1 && v6 == (_DWORD)v4)
    return ((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1E31F7238[v4])(v15, result, a2);
  v15[0] = 0;
  if (!*((_BYTE *)v15 + v4))
    goto LABEL_17;
  v15[0] = 0;
  if (v6 != -1)
  {
LABEL_11:
    if (*((_BYTE *)v15 + v6))
      v8 = result;
    else
      v8 = a2;
    if (!*((_BYTE *)v15 + v6))
      v2 = result;
    v6 = *(_DWORD *)(v2 + 144);
    v3 = v8;
LABEL_17:
    LOBYTE(v15[0]) = 0;
    v16 = -1;
    v5 = (_DWORD *)(v2 + 144);
    if (v6 != -1)
    {
      result = ((uint64_t (*)(char *, _WORD *, uint64_t))off_1E31F7210[v6])(&v13, v15, v2);
      v16 = v6;
      v9 = *v5;
      if ((_DWORD)v9 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E31F7200[v9])(&v14, v2);
    }
    goto LABEL_20;
  }
  LOBYTE(v15[0]) = 0;
  v16 = -1;
LABEL_20:
  *(_DWORD *)(v2 + 144) = -1;
  v10 = *(unsigned int *)(v3 + 144);
  if ((_DWORD)v10 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E31F7248[v10])(&v13, v2, v3);
    *v5 = v10;
    v11 = *(unsigned int *)(v3 + 144);
    if ((_DWORD)v11 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E31F7200[v11])(&v14, v3);
  }
  *(_DWORD *)(v3 + 144) = -1;
  v12 = v16;
  if (v16 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, _WORD *))off_1E31F7248[v16])(&v13, v3, v15);
    *(_DWORD *)(v3 + 144) = v12;
    if (v16 != -1)
      return ((uint64_t (*)(char *, _WORD *))off_1E31F7200[v16])(&v14, v15);
  }
  return result;
}

void sub_1946A62E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::swap[abi:sn180100]<WebCore::PhotoCapabilities>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

uint64_t std::swap[abi:sn180100]<WebCore::PhotoCapabilities>(uint64_t result, __int128 *a2)
{
  int v2;
  int v3;
  int v5;
  WTF *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;

  v30 = *(_OWORD *)(result + 64);
  v31 = *(_OWORD *)(result + 80);
  v32 = *(_OWORD *)(result + 96);
  v33 = *(_BYTE *)(result + 112);
  v26 = *(_OWORD *)result;
  v27 = *(_OWORD *)(result + 16);
  v28 = *(_OWORD *)(result + 32);
  v29 = *(_OWORD *)(result + 48);
  v5 = *(unsigned __int8 *)(result + 136);
  if (*(_BYTE *)(result + 136))
  {
    v6 = *(WTF **)(result + 120);
    v3 = *(_DWORD *)(result + 128);
    v2 = *(_DWORD *)(result + 132);
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 128) = 0;
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    *(_OWORD *)(result + 32) = a2[2];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)result = v7;
    *(_OWORD *)(result + 16) = v8;
    v10 = a2[4];
    v11 = a2[5];
    v12 = a2[6];
    *(_BYTE *)(result + 112) = *((_BYTE *)a2 + 112);
    *(_OWORD *)(result + 80) = v11;
    *(_OWORD *)(result + 96) = v12;
    *(_OWORD *)(result + 64) = v10;
    v13 = (char *)a2 + 136;
    v14 = (uint64_t *)a2 + 15;
    if (*((_BYTE *)a2 + 136))
    {
      v15 = *((_DWORD *)a2 + 32);
      v16 = *((_QWORD *)a2 + 15);
      *((_QWORD *)a2 + 15) = 0;
      *(_QWORD *)(result + 120) = v16;
      *((_DWORD *)a2 + 32) = 0;
      *(_DWORD *)(result + 128) = v15;
      v17 = *((_DWORD *)a2 + 33);
      *((_DWORD *)a2 + 33) = 0;
      *(_DWORD *)(result + 132) = v17;
    }
    else
    {
      *(_BYTE *)(result + 136) = 0;
    }
    v24 = 1;
  }
  else
  {
    v18 = *a2;
    v19 = a2[1];
    v20 = a2[3];
    *(_OWORD *)(result + 32) = a2[2];
    *(_OWORD *)(result + 48) = v20;
    *(_OWORD *)result = v18;
    *(_OWORD *)(result + 16) = v19;
    v21 = a2[4];
    v22 = a2[5];
    v23 = a2[6];
    *(_BYTE *)(result + 112) = *((_BYTE *)a2 + 112);
    *(_OWORD *)(result + 80) = v22;
    *(_OWORD *)(result + 96) = v23;
    *(_OWORD *)(result + 64) = v21;
    v13 = (char *)a2 + 136;
    v24 = *((unsigned __int8 *)a2 + 136);
    v14 = (uint64_t *)a2 + 15;
    if (*((_BYTE *)a2 + 136))
    {
      v24 = 0;
      v6 = 0;
      *(_QWORD *)(result + 120) = 0;
      *(_QWORD *)(result + 128) = 0;
      v25 = *((_QWORD *)a2 + 15);
      *((_QWORD *)a2 + 15) = 0;
      *(_QWORD *)(result + 120) = v25;
      LODWORD(v25) = *((_DWORD *)a2 + 32);
      *((_DWORD *)a2 + 32) = 0;
      *(_DWORD *)(result + 128) = v25;
      LODWORD(v25) = *((_DWORD *)a2 + 33);
      *((_DWORD *)a2 + 33) = 0;
      *(_DWORD *)(result + 132) = v25;
      *(_BYTE *)(result + 136) = 1;
    }
    else
    {
      v6 = 0;
    }
  }
  a2[4] = v30;
  a2[5] = v31;
  a2[6] = v32;
  *((_BYTE *)a2 + 112) = v33;
  *a2 = v26;
  a2[1] = v27;
  a2[2] = v28;
  a2[3] = v29;
  if (*((unsigned __int8 *)a2 + 136) == v24)
  {
    if (*((_BYTE *)a2 + 136))
    {
      result = *v14;
      if (*v14)
      {
        *((_QWORD *)a2 + 15) = 0;
        *((_DWORD *)a2 + 32) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      *((_QWORD *)a2 + 15) = v6;
      *((_DWORD *)a2 + 32) = v3;
      *((_DWORD *)a2 + 33) = v2;
      return result;
    }
  }
  else
  {
    if (!*((_BYTE *)a2 + 136))
    {
      *((_QWORD *)a2 + 15) = v6;
      *((_DWORD *)a2 + 32) = v3;
      *((_DWORD *)a2 + 33) = v2;
      *((_BYTE *)a2 + 136) = 1;
      return result;
    }
    result = *v14;
    if (*v14)
    {
      *((_QWORD *)a2 + 15) = 0;
      *((_DWORD *)a2 + 32) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *v13 = 0;
  }
  if (v5 && v6)
    return WTF::fastFree(v6, a2);
  return result;
}

void sub_1946A6540(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;
  int v3;

  if (v3)
  {
    if (v2)
      WTF::fastFree(v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*((_BYTE *)a3 + 136))
  {
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    v9 = *((_QWORD *)a3 + 15);
    *((_QWORD *)a3 + 15) = 0;
    *(_QWORD *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(_BYTE *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::resolve<WebCore::PhotoSettings&,std::enable_if<true,void>>(uint64_t a1, __int128 *a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  WTF *result;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  WTF::Lock *v16;
  char v17;
  char v18;

  v6 = (WTF::Lock *)(a1 + 48);
  v16 = v6;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  v6 = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel(v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>((uint64_t)v8, 4u, a3, " resolving ", a1);
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  v10 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v10 != -1)
    ((void (*)(char *, uint64_t))off_1E31F7258[v10])(&v18, a1 + 56);
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 80) = v14;
  *(_OWORD *)(a1 + 96) = v15;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  result = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(a1, (unsigned __int8 **)&v16);
  if (v17)
  {
    result = v16;
    v12 = __ldxr((unsigned __int8 *)v16);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

void sub_1946A66F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::Lock *a16, char a17)
{
  int v18;

  if (a17)
  {
    v18 = __ldxr((unsigned __int8 *)a16);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a16))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a16);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 164);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 152);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

void sub_1946A67D8(_Unwind_Exception *exception_object)
{
  unsigned __int8 *v1;
  int v3;

  v3 = __ldxr(v1);
  if (v3 == 1)
  {
    if (!__stlxr(0, v1))
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v1);
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::~NativePromise(uint64_t a1)
{
  WTF *v1;
  void *v2;

  v1 = (WTF *)WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::~NativePromise(a1);
  return WTF::fastFree(v1, v2);
}

{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  _BYTE v17[2];

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [12],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>((uint64_t)v2, 4u, "destroying ", a1);
  WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead(a1);
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 152, v4);
  v6 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v6)
  {
    v7 = *(unsigned int ***)(a1 + 128);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v13 = *(WTF **)(a1 + 128);
  if ((WTF *)(a1 + 144) != v13 && v13 != 0)
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    WTF::fastFree(v13, v5);
  }
  v15 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v15 != -1)
    ((void (*)(_BYTE *, uint64_t))off_1E31F7258[v15])(v17, a1 + 56);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t WTF::Logger::log<char [10],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A6C24(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  WTF::LogArgument<void const*>::toString();
  result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  if (v16)
  {
    v5 = *((_DWORD *)v16 + 1);
    if (v15)
      goto LABEL_3;
LABEL_29:
    v6 = 0;
    goto LABEL_4;
  }
  v5 = 0;
  if (!v15)
    goto LABEL_29;
LABEL_3:
  v6 = *((_DWORD *)v15 + 1);
  if (v6 < 0)
  {
LABEL_30:
    *a2 = 0;
LABEL_31:
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    goto LABEL_30;
  v7 = __OFADD__(v8, 1);
  v9 = v8 + 1;
  v10 = v7;
  if (v5 < 0)
    goto LABEL_30;
  if (v10)
    goto LABEL_30;
  v7 = __OFADD__(v5, v9);
  v11 = v5 + v9;
  if (v7)
    goto LABEL_30;
  result = (v11 + 13);
  if (__OFADD__(v11, 13))
    goto LABEL_30;
  v12 = (!v16 || (*((_BYTE *)v16 + 16) & 4) != 0) && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0);
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, v12, "NativePromise", 0xDu, (uint64_t)v16, 60, v15, 62, &v17);
  v14 = v17;
  *a2 = v17;
  if (!v14)
    goto LABEL_31;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (uint64_t)v16;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      return WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return result;
}

void sub_1946A6EB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = *(_QWORD *)a1 + 40 * v3;
    do
    {
      if (*v4)
      {
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead(*v4);
        v6 = (unsigned int *)*v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
          }
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
    }
    while (v4 != (uint64_t *)v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

void sub_1946A6FBC(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;

  v4 = v3;
  v6 = *v4;
  *v4 = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  v10 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F7270[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 56) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSF_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A71D8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v13 + 152, a2);
  v16 = *(unsigned int *)(v13 + 140);
  if ((_DWORD)v16)
  {
    v20 = *(unsigned int ***)(v13 + 128);
    v21 = &v20[v16];
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v17 = *(WTF **)(v13 + 128);
  if ((WTF *)(v13 + 144) != v17 && v17 != 0)
  {
    *(_QWORD *)(v13 + 128) = 0;
    *(_DWORD *)(v13 + 136) = 0;
    WTF::fastFree(v17, v15);
  }
  v19 = *(unsigned int *)(v13 + 120);
  if ((_DWORD)v19 != -1)
    ((void (*)(char *, uint64_t))off_1E31F7258[v19])(&a13, v13 + 56);
  *(_DWORD *)(v13 + 120) = -1;
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<char [12],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v42, a3);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a4, &v41);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
              v45 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a4, v46);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A769C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A7CEC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(uint64_t a1, unsigned __int8 **a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int **v9;
  void *v10;
  WTF::NativePromiseBase **v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::Lock *v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  WTF *v30;
  WTF *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *result;
  unsigned int **v38;
  int v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[2];
  WTF::Lock *v47;
  char v48;
  unsigned int *v49;

  v44 = v46;
  v45 = 1;
  v41 = (WTF *)&v43;
  v42 = 1;
  v4 = *(void **)(a1 + 128);
  if (v4 == (void *)(a1 + 144))
  {
    v6 = *(unsigned int *)(a1 + 140);
    memcpy(&v43, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = a1 + 144;
    v41 = (WTF *)v4;
    v5 = *(_DWORD *)(a1 + 136);
    LODWORD(v6) = *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a1 + 136) = 1;
    LODWORD(v42) = v5;
  }
  HIDWORD(v42) = v6;
  *(_QWORD *)(a1 + 136) = 1;
  v7 = *(_DWORD *)(a1 + 160);
  v8 = *(_DWORD *)(a1 + 164);
  v9 = *(unsigned int ***)(a1 + 152);
  v38 = v9;
  v39 = v7;
  v40 = v8;
  v44 = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v45 = 0;
  *(_QWORD *)(a1 + 160) = 0;
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v4);
  if (HIDWORD(v42))
  {
    v11 = (WTF::NativePromiseBase **)v41;
    v12 = 8 * HIDWORD(v42);
    do
    {
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(*v11++, a1, a2);
      v12 -= 8;
    }
    while (v12);
    v9 = v38;
    v8 = v40;
  }
  if (v8)
  {
    v13 = &v9[5 * v8];
    while (1)
    {
      v14 = *v9;
      *v9 = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      v44 = 0;
      v45 = 0;
      v46[0] = "<chained promise>";
      v46[1] = 0;
      v17 = (unsigned __int8 *)(v14 + 12);
      v47 = (WTF::Lock *)(v14 + 12);
      v48 = 1;
      if (__ldaxr((unsigned __int8 *)v14 + 48))
        break;
      if (__stxr(1u, v17))
        goto LABEL_16;
LABEL_17:
      v19 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v17);
      if (*v19 && v19[16] >= 4u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>((uint64_t)v19, 4u, (WTF::Logger::LogSiteIdentifier *)&v44, " settling chained promise ", (uint64_t)v14);
      v20 = v14[30];
      v21 = *(unsigned int *)(a1 + 120);
      if ((_DWORD)v20 == -1)
      {
        if ((_DWORD)v21 == -1)
          goto LABEL_25;
      }
      else if ((_DWORD)v21 == -1)
      {
        ((void (*)(unsigned int **, unsigned int *))off_1E31F7258[v20])(&v49, v14 + 14);
        v14[30] = -1;
        goto LABEL_25;
      }
      v49 = v14 + 14;
      ((void (*)(unsigned int **))off_1E31F7290[v21])(&v49);
LABEL_25:
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::dispatchAll(v14, &v47);
      if (!v48)
        goto LABEL_31;
      v22 = v47;
      v23 = __ldxr((unsigned __int8 *)v47);
      if (v23 != 1)
      {
        __clrex();
LABEL_30:
        WTF::Lock::unlockSlow(v22);
        goto LABEL_31;
      }
      if (__stlxr(0, (unsigned __int8 *)v47))
        goto LABEL_30;
LABEL_31:
      v24 = v14 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      }
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead((uint64_t)v14);
      do
      {
        v27 = __ldaxr(v24);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v24));
      if (!v28)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      }
      v9 += 5;
      if (v9 == v13)
        goto LABEL_40;
    }
    __clrex();
LABEL_16:
    v17 = (unsigned __int8 *)MEMORY[0x19AEA534C]();
    goto LABEL_17;
  }
LABEL_40:
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v10);
  if (HIDWORD(v42))
  {
    v30 = v41;
    v31 = (WTF *)((char *)v41 + 8 * HIDWORD(v42));
    do
    {
      v32 = *(unsigned int **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
      {
        v33 = v32 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v32 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      v30 = (WTF *)((char *)v30 + 8);
    }
    while (v30 != v31);
  }
  result = v41;
  if (&v43 != (uint64_t *)v41 && v41 != 0)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    return (WTF *)WTF::fastFree(result, v29);
  }
  return result;
}

void sub_1946A823C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, char a11, uint64_t a12, WTF *a13, int a14, unsigned int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::Lock *a21,char a22)
{
  unsigned int *v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  WTF *v30;
  unsigned int **v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  if (v22)
  {
    v24 = v22 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
    }
    WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::assertIsDead((uint64_t)v22);
    do
    {
      v27 = __ldaxr(v24);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v24));
    if (!v28)
    {
      atomic_store(1u, v22 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
    }
  }
  WTF::Vector<WTF::NativePromiseProducer<WebCore::PhotoSettings,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a11, a2);
  if (a15)
  {
    v32 = (unsigned int **)a13;
    v33 = (unsigned int **)((char *)a13 + 8 * a15);
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
        }
      }
      ++v32;
    }
    while (v32 != v33);
  }
  v30 = a13;
  if (a10 != a13 && a13 != 0)
  {
    a13 = 0;
    a14 = 0;
    WTF::fastFree(v30, v29);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v22;
  int v23;
  char v25;
  unsigned __int8 *v26;
  _BYTE v27[48];
  int v28;
  uint64_t v29;

  v5 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 169));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E31F7468;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v26 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v26);
      result = v26;
      v26 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v26 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v26, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v15))
LABEL_22:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v17 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_27:
  v19 = *(_DWORD *)(a2 + 120);
  v20 = __ldxr(v17);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v17))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
  if (v19 != 2)
  {
    WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult((uint64_t)&v26, a2);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v26);
    if (v28 != -1)
      ((void (*)(char *, _BYTE *))off_1E31F7270[v28])(&v25, v27);
    goto LABEL_48;
  }
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](a2 + 48);
LABEL_39:
  if (*(_DWORD *)(a2 + 120) != 2)
  {
    result = (unsigned __int8 *)std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  v22 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v23 = __ldxr(v17);
  if (v23 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_45;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 48));
LABEL_45:
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(_QWORD *)v22 + 16))(&v26, v22);
  (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v26);
  if (v28 != -1)
    ((void (*)(char *, _BYTE *))off_1E31F7270[v28])(&v25, v27);
  v28 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_48:
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEA534C]();
}

void sub_1946A86E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22)
{
  unsigned __int8 **v22;

  if (__ldaxr(*v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, *v22))
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x19AEA534C]();
  goto LABEL_6;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  _BYTE v8[2];

  v3 = result;
  v4 = (unsigned __int8 *)(a2 + 48);
  if (__ldaxr((unsigned __int8 *)(a2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](a2 + 48);
LABEL_5:
  if (*(_DWORD *)(a2 + 120) != 1)
  {
    result = std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
    return result;
  }
  *(_BYTE *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 56) = -1;
  v6 = *(unsigned int *)(a2 + 112);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E31F7280[v6])(v8, v3 + 8, a2 + 64);
    *(_DWORD *)(v3 + 56) = v6;
  }
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

void sub_1946A8930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;

  v17 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E31F7270[v17])(&a13, v15);
  *(_DWORD *)(v14 + 56) = -1;
  v18 = __ldxr(v13);
  if (v18 == 1)
  {
    if (!__stlxr(0, v13))
LABEL_8:
      _Unwind_Resume(exception_object);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
  goto LABEL_8;
}

WTF::StringImpl *WTF::Logger::log<char [32],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, const char *a5, int a6, const char *a7, WTF::Logger::LogSiteIdentifier *a8, char *a9)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  __int128 buf;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  WTF::StringImpl *v84;
  int v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v67, a3);
  WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a4, &v66);
  WTF::String::String((WTF::String *)&v65, a5);
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v63, a7);
  WTF::Logger::LogSiteIdentifier::toString(a8);
  WTF::String::String((WTF::String *)&v61, a9);
  v59 = v66;
  v73 = v65;
  *(_QWORD *)&buf = v67;
  v72 = v64;
  v70 = v62;
  v71 = v63;
  v69 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v73, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, &v68);
  if (v68)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v11);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(NSObject **)(a1 + 32);
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v20)
    {
      WTF::String::utf8();
      v22 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v20 = (uint64_t)v59;
      v59 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          v20 = WTF::fastFree((WTF *)v20, v21);
        else
          --*(_DWORD *)v20;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v24 = *v23;
        if ((v24 & 1) != 0)
          break;
        v25 = __ldaxr(v23);
        if (v25 == v24)
        {
          if (!__stxr(v24 | 1, v23))
          {
            v26 = WTF::Logger::observers((WTF::Logger *)v20);
            v27 = *(unsigned int *)(v26 + 12);
            if ((_DWORD)v27)
            {
              v28 = *(uint64_t **)v26;
              v52 = *(_QWORD *)v26 + 8 * v27;
              do
              {
                v29 = *v28;
                LODWORD(buf) = 0;
                WTF::String::String((WTF::String *)((char *)&buf + 8), a3);
                v75 = 0;
                WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a4, &v76);
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, a5);
                v79 = 0;
                WTF::LogArgument<void const*>::toString();
                v81 = 0;
                WTF::String::String((WTF::String *)&v82, a7);
                v83 = 0;
                WTF::Logger::LogSiteIdentifier::toString(a8);
                v85 = 0;
                WTF::String::String((WTF::String *)v86, a9);
                v59 = 0;
                v60 = 0;
                v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                LODWORD(v60) = 7;
                v59 = v30;
                v31 = HIDWORD(v60);
                *((_DWORD *)v30 + 4 * HIDWORD(v60)) = buf;
                v32 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                *((_DWORD *)v30 + 4 * (v31 + 1)) = v75;
                v33 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                *((_DWORD *)v30 + 4 * (v31 + 2)) = v77;
                v34 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                *((_DWORD *)v30 + 4 * (v31 + 3)) = v79;
                v35 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                *((_DWORD *)v30 + 4 * (v31 + 4)) = v81;
                v36 = v82;
                if (v82)
                  *(_DWORD *)v82 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                *((_DWORD *)v30 + 4 * (v31 + 5)) = v83;
                v37 = v84;
                if (v84)
                  *(_DWORD *)v84 += 2;
                *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                *((_DWORD *)v30 + 4 * (v31 + 6)) = v85;
                v38 = v86[0];
                if (v86[0])
                  *(_DWORD *)v86[0] += 2;
                *((_QWORD *)v30 + 2 * (v31 + 6) + 1) = v38;
                HIDWORD(v60) = v31 + 7;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, a1, a2, &v59);
                v39 = v59;
                if (HIDWORD(v60))
                {
                  v40 = a4;
                  v41 = 16 * HIDWORD(v60);
                  v42 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v43 = *v42;
                    *v42 = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v42 += 2;
                    v41 -= 16;
                  }
                  while (v41);
                  v39 = v59;
                  a4 = v40;
                }
                if (v39)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v39, v21);
                }
                v44 = (WTF::StringImpl *)v86[0];
                v86[0] = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = v84;
                v84 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v82;
                v82 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v80;
                v80 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v78;
                v78 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v76;
                v76 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v21);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v28;
              }
              while (v28 != (uint64_t *)v52);
            }
            v51 = __ldxr(v23);
            if (v51 == 1)
            {
              if (!__stlxr(0, v23))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v68;
    v68 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1946A90B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF *a26,int a27,int a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,WTF::StringImpl *a32,WTF::StringImpl *a33,WTF::StringImpl *a34,uint64_t a35,WTF::StringImpl *a36)
{
  unsigned __int8 *v36;
  int v38;

  v38 = __ldxr(v36);
  if (v38 == 1)
  {
    if (!__stlxr(0, v36))
    {
LABEL_6:
      if (a36)
      {
        if (*(_DWORD *)a36 == 2)
          WTF::StringImpl::destroy(a36, a2);
        else
          *(_DWORD *)a36 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E31F7468;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E31F7468;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((WTF::NativePromiseBase *)(a1 + 8));
}

WTF::StringImpl *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(WTF::NativePromiseBase *a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *result;
  BOOL v4;
  unsigned __int8 *v6;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  _BYTE v17[48];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_BYTE *)(*(_QWORD *)a1 + 56))
  {
    v16 = *(_QWORD *)a1;
    result = (WTF::StringImpl *)WTF::NativePromiseBase::logChannel(a1);
    if (*(_BYTE *)result)
      v4 = *((unsigned __int8 *)result + 16) >= 4u;
    else
      v4 = 0;
    if (v4)
      return WTF::Logger::log<char [32],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v16, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
    return result;
  }
  v6 = (unsigned __int8 *)(v2 + 48);
  if (__ldaxr((unsigned __int8 *)(v2 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v2 + 48);
LABEL_12:
  v8 = *(_DWORD *)(v2 + 120);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v6))
LABEL_16:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  v10 = *((_QWORD *)a1 + 2);
  if (v8 == 2)
  {
    v11 = (unsigned __int8 *)(v10 + 48);
    if (__ldaxr((unsigned __int8 *)(v10 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_24;
    }
    MEMORY[0x19AEA534C](v10 + 48);
LABEL_24:
    if (*(_DWORD *)(v10 + 120) != 2)
    {
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return result;
    }
    v13 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    v14 = __ldxr(v11);
    if (v14 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 48));
LABEL_30:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(&v16, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v16);
    if (v18 != -1)
      ((void (*)(char *, _BYTE *))off_1E31F7270[v18])(&v15, v17);
    v18 = -1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult((uint64_t)&v16, v10);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v10, &v16);
  if (v18 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _BYTE *))off_1E31F7270[v18])(&v15, v17);
  return result;
}

void sub_1946A97E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22)
{
  uint64_t v22;

  if (a22 != -1)
    ((void (*)(char *, uint64_t *))off_1E31F7270[a22])(&a14, &a16);
  a22 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27],WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  const char *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[3];

  v59[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v52, a4);
  result = WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a5, &v51);
  if (v53)
  {
    v8 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v51)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v52)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v52 + 1);
  if (!v51)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v51 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v52)
  {
    v15 = *((_DWORD *)v52 + 4);
    v14 = (v15 >> 2) & 1;
    if (v51 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v51)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v51 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v53, (uint64_t)v52, (uint64_t)v51, &buf);
  v54 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v51;
  v51 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v53;
  v53 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v49 ? (char *)v49 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v49;
    v49 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v45 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v56 = 0;
              WTF::String::String((WTF::String *)&v57, a4);
              v58 = 0;
              WTF::LogArgument<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>>::toString(a5, v59);
              v49 = 0;
              v50 = 0;
              v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v50) = 3;
              v49 = v31;
              v32 = HIDWORD(v50);
              *((_DWORD *)v31 + 4 * HIDWORD(v50)) = buf;
              v33 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v31 + 2 * v32 + 1) = v33;
              *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
              v34 = v57;
              if (v57)
                *(_DWORD *)v57 += 2;
              *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
              *((_DWORD *)v31 + 4 * (v32 + 2)) = v58;
              v35 = v59[0];
              if (v59[0])
                *(_DWORD *)v59[0] += 2;
              *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
              HIDWORD(v50) = v32 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v49);
              v36 = v49;
              if (HIDWORD(v50))
              {
                v37 = a4;
                v38 = 16 * HIDWORD(v50);
                v39 = (WTF::StringImpl **)((char *)v49 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v36 = v49;
                a4 = v37;
              }
              if (v36)
              {
                v49 = 0;
                LODWORD(v50) = 0;
                WTF::fastFree(v36, v22);
              }
              v41 = v59[0];
              v59[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v45);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946A9D84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F7258[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 64) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _BYTE v11[8];
  _BYTE v12[48];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v12[0] = 0;
      v13 = -1;
      v7 = *(unsigned int *)(a3 + 56);
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E31F7280[v7])(&v9, v12, a3 + 8);
        v13 = v7;
      }
      result = std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>::__swap[abi:sn180100]((uint64_t)v12, a2 + 8);
      if (v13 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E31F7270[v13])(&v10, v12);
      return result;
    }
    result = ((uint64_t (*)(_BYTE *, uint64_t))off_1E31F7258[v5])(v11, v4);
  }
  *(_BYTE *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 64) = -1;
  *(_DWORD *)(v4 + 56) = -1;
  v8 = *(unsigned int *)(a3 + 56);
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E31F7280[v8])(&v10, v4 + 8, a3 + 8);
    *(_DWORD *)(v4 + 56) = v8;
  }
  *(_DWORD *)(v4 + 64) = 1;
  return result;
}

void sub_1946AA110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  uint64_t v20;

  if (a20 != -1)
    ((void (*)(char *, uint64_t))off_1E31F7270[a20])(&a12, v20);
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseIN7WebCore13PhotoSettingsENS8_6StringELj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISB_SC_EENS8_8FunctionIFSJ_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSR_1EJSF_SJ_SM_EEEOS11_EEEDcST_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E31F7258[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 64) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__variant_detail::__impl<WebCore::PhotoSettings,WTF::String>::__swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  _BYTE v18[48];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(result + 48);
  v3 = *(unsigned int *)(a2 + 48);
  if (v2 != -1 || (_DWORD)v3 != -1)
  {
    v5 = v2 == -1;
    if (v2 == -1)
      v6 = -1;
    else
      v6 = *(unsigned int *)(result + 48);
    if ((_DWORD)v3 != -1)
      v5 = v6 == v3;
    if (v5)
    {
      return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))off_1E31F72A8[v6])(v18, result, a2);
    }
    else
    {
      v8 = (v2 - 1) < 0xFFFFFFFE || (v3 + 1) < 2;
      if (v8)
        v9 = result;
      else
        v9 = a2;
      if (v8)
        v10 = a2;
      else
        v10 = result;
      v18[0] = 0;
      v19 = -1;
      v11 = *(unsigned int *)(v10 + 48);
      if ((_DWORD)v11 != -1)
      {
        result = ((uint64_t (*)(char *, _BYTE *, uint64_t))off_1E31F7280[v11])(&v16, v18, v10);
        v19 = v11;
        v12 = *(unsigned int *)(v10 + 48);
        if ((_DWORD)v12 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E31F7270[v12])(&v17, v10);
      }
      *(_DWORD *)(v10 + 48) = -1;
      v13 = *(unsigned int *)(v9 + 48);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E31F72B8[v13])(&v16, v10, v9);
        *(_DWORD *)(v10 + 48) = v13;
        v14 = *(unsigned int *)(v9 + 48);
        if ((_DWORD)v14 != -1)
          result = ((uint64_t (*)(char *, uint64_t))off_1E31F7270[v14])(&v17, v9);
      }
      *(_DWORD *)(v9 + 48) = -1;
      v15 = v19;
      if (v19 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E31F72B8[v19])(&v16, v9, v18);
        *(_DWORD *)(v9 + 48) = v15;
        if (v19 != -1)
          return ((uint64_t (*)(char *, _BYTE *))off_1E31F7270[v19])(&v17, v18);
      }
    }
  }
  return result;
}

void sub_1946AA3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  if (a20 != -1)
    ((void (*)(char *, char *))off_1E31F7270[a20])(&a13, &a14);
  _Unwind_Resume(exception_object);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _BYTE v7[32];

  v3 = *a2;
  *(_OWORD *)v7 = a2[1];
  *(_OWORD *)&v7[16] = a2[2];
  v4 = *(__int128 *)((char *)a3 + 26);
  v5 = a3[1];
  *a2 = *a3;
  a2[1] = v5;
  *(__int128 *)((char *)a2 + 26) = v4;
  *a3 = v3;
  a3[1] = *(_OWORD *)v7;
  result = *(__n128 *)&v7[10];
  *(__int128 *)((char *)a3 + 26) = *(_OWORD *)&v7[10];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJN7WebCore13PhotoSettingsEN3WTF6StringEEE6__swapB8sn180100ERSB_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS8_SA_EEESM_EEEDcSD_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_6__implIJS9_SB_EEEEEvRSD_OT_EUlRSI_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJS9_SB_EEEOSR_EEEDcSI_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void *WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::setFrameRateAndZoomWithPreset(double,double,std::optional<WebCore::VideoPreset> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  void *result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 1162) = 0;
  result = (void *)WebCore::AVVideoCaptureSource::updateTorch(v1);
  if (*(_BYTE *)(v1 + 1162))
  {
    *(_BYTE *)(v1 + 1162) = 0;
    v3 = *(_QWORD *)(v1 + 1152);
    if (v3)
    {
      v4 = v3 - 1;
      *(_QWORD *)(v1 + 1152) = v4;
      if (!v4)
      {
        result = *(void **)(v1 + 960);
        if (result)
          return (void *)objc_msgSend(result, "commitConfiguration");
      }
    }
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [24]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946AA8E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [61]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946AAE50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946AB3B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946AB920(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [53]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946ABE88(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [67]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946AC3F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [30],double>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, double *a5)
{
  WTF::String *v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::String *v32;
  double v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  const char *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  WTF::Logger *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  __int128 buf;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v7 = (WTF::String *)WTF::String::String((WTF::String *)&v55, a4);
  result = WTF::String::number(v7, *a5);
  if (v56)
  {
    v9 = *((_DWORD *)v56 + 1);
    if (v55)
      goto LABEL_3;
LABEL_91:
    v10 = 0;
    if (v54)
      goto LABEL_4;
LABEL_92:
    v11 = 0;
    goto LABEL_5;
  }
  v9 = 0;
  if (!v55)
    goto LABEL_91;
LABEL_3:
  v10 = *((_DWORD *)v55 + 1);
  if (!v54)
    goto LABEL_92;
LABEL_4:
  v11 = *((_DWORD *)v54 + 1);
LABEL_5:
  if ((v11 | v10) < 0)
    goto LABEL_95;
  v12 = __OFADD__(v10, v11);
  v13 = v10 + v11;
  v14 = v12;
  if (v9 < 0)
    goto LABEL_95;
  if (v14)
    goto LABEL_95;
  result = (v9 + v13);
  if (__OFADD__(v9, v13))
    goto LABEL_95;
  if (v56 && (*((_BYTE *)v56 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_19;
  }
  if (v55)
  {
    v16 = *((_DWORD *)v55 + 4);
    v15 = (v16 >> 2) & 1;
    if (v54 && (v16 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v54)
    {
LABEL_18:
      v15 = (*((unsigned __int8 *)v54 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v15 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v56, (uint64_t)v55, (uint64_t)v54, &buf);
  v57 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v18 = v54;
  v54 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v55;
  v55 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v56;
  v56 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(NSObject **)(a1 + 32);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v52 ? (char *)v52 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v52;
    v52 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v48 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v31 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v59 = 0;
              v32 = (WTF::String *)WTF::String::String((WTF::String *)&v60, a4);
              v33 = *a5;
              v61 = 0;
              WTF::String::number(v32, v33);
              v52 = 0;
              v53 = 0;
              v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v53) = 3;
              v52 = v34;
              v35 = HIDWORD(v53);
              *((_DWORD *)v34 + 4 * HIDWORD(v53)) = buf;
              v36 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v34 + 2 * v35 + 1) = v36;
              *((_DWORD *)v34 + 4 * (v35 + 1)) = v59;
              v37 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
              *((_DWORD *)v34 + 4 * (v35 + 2)) = v61;
              v38 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
              HIDWORD(v53) = v35 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, a1, a2, &v52);
              v39 = v52;
              if (HIDWORD(v53))
              {
                v40 = a4;
                v41 = 16 * HIDWORD(v53);
                v42 = (WTF::StringImpl **)((char *)v52 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v39 = v52;
                a4 = v40;
              }
              if (v39)
              {
                v52 = 0;
                LODWORD(v53) = 0;
                WTF::fastFree(v39, v23);
              }
              v44 = v62;
              v62 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v60;
              v60 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v48);
          }
          v47 = __ldxr(v25);
          if (v47 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v57;
  v57 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946ACA48(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946AD040(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946AD5A8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::captureOutputDidFinishProcessingPhoto(WTF::RetainPtr<AVCapturePhotoOutput>,WTF::RetainPtr<AVCapturePhoto>,WTF::RetainPtr<NSError>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;

  *a1 = &off_1E31F7300;
  v2 = (const void *)a1[7];
  a1[7] = 0;
  if (v2)
    CFRelease(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 304));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::captureOutputDidFinishProcessingPhoto(WTF::RetainPtr<AVCapturePhotoOutput>,WTF::RetainPtr<AVCapturePhoto>,WTF::RetainPtr<NSError>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E31F7300;
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeVideoCaptureSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 304));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::captureOutputDidFinishProcessingPhoto(WTF::RetainPtr<AVCapturePhotoOutput>,WTF::RetainPtr<AVCapturePhoto>,WTF::RetainPtr<NSError>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::Logger *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::Logger *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  int *v37;
  int *v38;
  int *v39;
  uint64_t v40;
  WTF::Logger::LogSiteIdentifier *v41;
  void *v42;
  WTF::String *v43;
  WTF::Logger *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63[3];

  v63[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v1)
  {
    v2 = result;
    result = objc_msgSend(*(id *)(result + 56), "code");
    v43 = (WTF::String *)result;
    if (*(_BYTE *)(v1 + 12))
    {
      v41 = (WTF::Logger::LogSiteIdentifier *)(v2 + 24);
      v42 = *(void **)(v2 + 56);
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v2 + 24));
      WTF::String::String((WTF::String *)&v49, "failed: ");
      WTF::String::number(v43);
      WTF::String::String((WTF::String *)&v47, ", ");
      MEMORY[0x19AEA5508](&v46, objc_msgSend(v42, "localizedDescription"));
      v44 = v49;
      v54 = v48;
      *(_QWORD *)&buf = v50;
      v52 = v46;
      v53 = v47;
      result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v44, (uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52, &v51);
      if (v51)
      {
        v4 = v46;
        v46 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, v3);
          else
            *(_DWORD *)v4 -= 2;
        }
        v5 = v47;
        v47 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, v3);
          else
            *(_DWORD *)v5 -= 2;
        }
        v6 = v48;
        v48 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v3);
          else
            *(_DWORD *)v6 -= 2;
        }
        v7 = v49;
        v49 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, v3);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = v50;
        v50 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v3);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = qword_1ECE7CD60;
        v10 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v10)
        {
          WTF::String::utf8();
          v12 = v44 ? (char *)v44 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v12;
          _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v10 = (uint64_t)v44;
          v44 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1)
              v10 = WTF::fastFree((WTF *)v10, v11);
            else
              --*(_DWORD *)v10;
          }
        }
        if (WebCore::LogWebRTC)
        {
          v13 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v14 = *v13;
            if ((v14 & 1) != 0)
              break;
            v15 = __ldaxr(v13);
            if (v15 == v14)
            {
              if (!__stxr(v14 | 1, v13))
              {
                v16 = WTF::Logger::observers((WTF::Logger *)v10);
                v17 = *(unsigned int *)(v16 + 12);
                if ((_DWORD)v17)
                {
                  v18 = *(uint64_t **)v16;
                  v39 = &v56;
                  v40 = *(_QWORD *)v16 + 8 * v17;
                  v37 = &v60;
                  v38 = &v58;
                  do
                  {
                    v19 = *v18;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString(v41);
                    v56 = 0;
                    WTF::String::String((WTF::String *)&v57, "failed: ");
                    v58 = 0;
                    WTF::String::number(v43);
                    v60 = 0;
                    WTF::String::String((WTF::String *)&v61, ", ");
                    v62 = 0;
                    MEMORY[0x19AEA5508](v63, objc_msgSend(v42, "localizedDescription", v37, v38, v39));
                    v44 = 0;
                    v45 = 0;
                    v20 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                    LODWORD(v45) = 5;
                    v44 = v20;
                    v21 = HIDWORD(v45);
                    *((_DWORD *)v20 + 4 * HIDWORD(v45)) = buf;
                    v22 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v20 + 2 * v21 + 1) = v22;
                    *((_DWORD *)v20 + 4 * (v21 + 1)) = v56;
                    v23 = v57;
                    if (v57)
                      *(_DWORD *)v57 += 2;
                    *((_QWORD *)v20 + 2 * (v21 + 1) + 1) = v23;
                    *((_DWORD *)v20 + 4 * (v21 + 2)) = v58;
                    v24 = v59;
                    if (v59)
                      *(_DWORD *)v59 += 2;
                    *((_QWORD *)v20 + 2 * (v21 + 2) + 1) = v24;
                    *((_DWORD *)v20 + 4 * (v21 + 3)) = v60;
                    v25 = v61;
                    if (v61)
                      *(_DWORD *)v61 += 2;
                    *((_QWORD *)v20 + 2 * (v21 + 3) + 1) = v25;
                    *((_DWORD *)v20 + 4 * (v21 + 4)) = v62;
                    v26 = v63[0];
                    if (v63[0])
                      *(_DWORD *)v63[0] += 2;
                    *((_QWORD *)v20 + 2 * (v21 + 4) + 1) = v26;
                    HIDWORD(v45) = v21 + 5;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v19 + 16))(v19, &WebCore::LogWebRTC, 0, &v44);
                    v27 = v44;
                    if (HIDWORD(v45))
                    {
                      v28 = 16 * HIDWORD(v45);
                      v29 = (WTF::StringImpl **)((char *)v44 + 8);
                      do
                      {
                        v30 = *v29;
                        *v29 = 0;
                        if (v30)
                        {
                          if (*(_DWORD *)v30 == 2)
                            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v11);
                          else
                            *(_DWORD *)v30 -= 2;
                        }
                        v29 += 2;
                        v28 -= 16;
                      }
                      while (v28);
                      v27 = v44;
                    }
                    if (v27)
                    {
                      v44 = 0;
                      LODWORD(v45) = 0;
                      WTF::fastFree(v27, v11);
                    }
                    v31 = v63[0];
                    v63[0] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v11);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                    v32 = v61;
                    v61 = 0;
                    if (v32)
                    {
                      if (*(_DWORD *)v32 == 2)
                        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v11);
                      else
                        *(_DWORD *)v32 -= 2;
                    }
                    v33 = v59;
                    v59 = 0;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 2)
                        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v11);
                      else
                        *(_DWORD *)v33 -= 2;
                    }
                    v34 = v57;
                    v57 = 0;
                    if (v34)
                    {
                      if (*(_DWORD *)v34 == 2)
                        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v11);
                      else
                        *(_DWORD *)v34 -= 2;
                    }
                    v35 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v35)
                    {
                      if (*(_DWORD *)v35 == 2)
                        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v11);
                      else
                        *(_DWORD *)v35 -= 2;
                    }
                    ++v18;
                  }
                  while (v18 != (uint64_t *)v40);
                }
                v36 = __ldxr(v13);
                if (v36 == 1)
                {
                  if (!__stlxr(0, v13))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        result = (uint64_t)v51;
        v51 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
  return result;
}

void sub_1946ADD94(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37)
{
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::captureSessionIsRunningDidChange(BOOL)::$_0,void>::call(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  v1 = result;
  v2 = *((_QWORD *)result + 1);
  v3 = *(_QWORD *)(v2 + 40);
  if (v3 && *(_BYTE *)(v3 + 12))
    result = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)(result + 16));
  v4 = v1[48];
  if (v4 != *(unsigned __int8 *)(v2 + 1161) || v4 != (*(unsigned __int8 *)(v2 + 289) ^ 1))
  {
    *(_BYTE *)(v2 + 1161) = v4;
    if (!v4)
      goto LABEL_20;
    if (*(_BYTE *)(v2 + 1163))
    {
      v5 = (_BYTE *)(v2 + 1162);
      *(_WORD *)(v2 + 1162) = 0;
      result = (unsigned __int8 *)WebCore::AVVideoCaptureSource::updateTorch(v2);
      v6 = *(unsigned __int8 *)(v2 + 1164);
      *(_BYTE *)(v2 + 1164) = 0;
      if (!v6)
        goto LABEL_13;
    }
    else
    {
      if (!*(_BYTE *)(v2 + 1164))
        goto LABEL_18;
      v5 = (_BYTE *)(v2 + 1162);
      *(_WORD *)(v2 + 1162) = 0;
      *(_BYTE *)(v2 + 1164) = 0;
    }
    result = (unsigned __int8 *)WebCore::AVVideoCaptureSource::updateWhiteBalanceMode(v2);
LABEL_13:
    if (*v5)
    {
      *(_BYTE *)(v2 + 1162) = 0;
      v7 = *(_QWORD *)(v2 + 1152);
      if (v7)
      {
        v8 = v7 - 1;
        *(_QWORD *)(v2 + 1152) = v8;
        if (!v8)
        {
          result = *(unsigned __int8 **)(v2 + 960);
          if (result)
            result = (unsigned __int8 *)objc_msgSend(result, "commitConfiguration");
        }
      }
    }
LABEL_18:
    if (*(_BYTE *)(v2 + 1161) && !*(_BYTE *)(v2 + 1160))
    {
      if ((*(_QWORD *)(v2 + 1256) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v2 + 1256) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *(_QWORD *)(v2 + 1248) = 0x403E000000000000;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        result = (unsigned __int8 *)WebCore::TimerBase::setNextFireTime(v2 + 1224, v9 + 30.0);
        *(_OWORD *)(v2 + 1280) = 0u;
      }
      goto LABEL_24;
    }
LABEL_20:
    if ((*(_QWORD *)(v2 + 1256) & 0xFFFFFFFFFFFFLL) != 0)
      result = (unsigned __int8 *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 1224));
LABEL_24:
    if ((*(_QWORD *)(v2 + 1200) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(v2 + 1200) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      return WebCore::RealtimeMediaSource::notifyMutedChange((unsigned __int8 *)v2, *(_BYTE *)(v2 + 1161) == 0);
    }
    else
    {
      *(_BYTE *)(v2 + 1165) = 1;
    }
  }
  return result;
}

unint64_t WTF::Vector<WebCore::VideoPreset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 56 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::VideoPreset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::VideoPreset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::VideoPreset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  const void *v14;

  if (result[2] < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 56 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(56 * a2));
      v2[2] = v5 / 0x38;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 56 * v4;
        v9 = (char *)v3 + 24;
        do
        {
          v10 = *((_QWORD *)v9 - 3);
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 - 2);
          *((_QWORD *)v9 - 2) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *((_DWORD *)v9 - 2);
          *((_DWORD *)v9 - 2) = 0;
          v7[4] = v11;
          LODWORD(v11) = *((_DWORD *)v9 - 1);
          *((_DWORD *)v9 - 1) = 0;
          v7[5] = v11;
          v12 = *(_OWORD *)v9;
          *((_BYTE *)v7 + 40) = v9[16];
          *(_OWORD *)(v7 + 6) = v12;
          v13 = *((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          *((_QWORD *)v7 + 6) = v13;
          v14 = (const void *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v14)
            CFRelease(v14);
          result = (unsigned int *)*((_QWORD *)v9 - 2);
          if (result)
          {
            *((_QWORD *)v9 - 2) = 0;
            *((_DWORD *)v9 - 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 56;
          v7 += 14;
          v8 -= 56;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AVVideoCaptureSource::captureSessionRuntimeError(WTF::RetainPtr<NSError>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::Logger::LogSiteIdentifier *v3;
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Logger *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::Logger *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int128 buf;
  int v42;
  WTF::StringImpl *v43[3];

  v43[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 40);
  if (!v2 || !*(_BYTE *)(v2 + 12))
  {
LABEL_68:
    objc_msgSend(*(id *)(v1 + 960), "startRunning");
    result = objc_msgSend(*(id *)(v1 + 960), "isRunning");
    *(_BYTE *)(v1 + 1161) = result;
    return result;
  }
  v3 = (WTF::Logger::LogSiteIdentifier *)(a1 + 16);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 16));
  result = WTF::String::String((WTF::String *)&v38, "restarting session");
  if (!v39)
  {
    v5 = 0;
    if (v38)
      goto LABEL_5;
LABEL_74:
    v6 = 0;
    goto LABEL_6;
  }
  v5 = *((_DWORD *)v39 + 1);
  if (!v38)
    goto LABEL_74;
LABEL_5:
  v6 = *((_DWORD *)v38 + 1);
LABEL_6:
  if ((v6 | v5) < 0)
    goto LABEL_77;
  result = (v5 + v6);
  if (__OFADD__(v5, v6))
    goto LABEL_77;
  if (v39)
  {
    v7 = *((_DWORD *)v39 + 4);
    v8 = (v7 >> 2) & 1;
    if (v38 && (v7 & 4) != 0)
      goto LABEL_11;
  }
  else
  {
    if (v38)
    {
LABEL_11:
      v8 = (*((unsigned __int8 *)v38 + 16) >> 2) & 1;
      goto LABEL_12;
    }
    v8 = 1;
  }
LABEL_12:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (uint64_t)v39, (uint64_t)v38, &buf);
  v40 = (WTF::StringImpl *)buf;
  if ((_QWORD)buf)
  {
    v10 = v38;
    v38 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v39;
    v39 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = qword_1ECE7CD60;
    v13 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v13)
    {
      WTF::String::utf8();
      v15 = v36 ? (char *)v36 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v15;
      _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v13 = (uint64_t)v36;
      v36 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          v13 = WTF::fastFree((WTF *)v13, v14);
        else
          --*(_DWORD *)v13;
      }
    }
    if (WebCore::LogWebRTC && byte_1ECE7CD50)
    {
      v16 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v17 = *v16;
        if ((v17 & 1) != 0)
          break;
        v18 = __ldaxr(v16);
        if (v18 == v17)
        {
          if (!__stxr(v17 | 1, v16))
          {
            v19 = WTF::Logger::observers((WTF::Logger *)v13);
            v20 = *(unsigned int *)(v19 + 12);
            if ((_DWORD)v20)
            {
              v21 = *(uint64_t **)v19;
              v22 = *(_QWORD *)v19 + 8 * v20;
              do
              {
                v23 = *v21;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(v3);
                v42 = 0;
                WTF::String::String((WTF::String *)v43, "restarting session");
                v36 = 0;
                v37 = 0;
                v24 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                LODWORD(v37) = 2;
                v36 = v24;
                v25 = HIDWORD(v37);
                *((_DWORD *)v24 + 4 * HIDWORD(v37)) = buf;
                v26 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v24 + 2 * v25 + 1) = v26;
                *((_DWORD *)v24 + 4 * (v25 + 1)) = v42;
                v27 = v43[0];
                if (v43[0])
                  *(_DWORD *)v43[0] += 2;
                *((_QWORD *)v24 + 2 * (v25 + 1) + 1) = v27;
                HIDWORD(v37) = v25 + 2;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v23 + 16))(v23, &WebCore::LogWebRTC, 1, &v36);
                v28 = v36;
                if (HIDWORD(v37))
                {
                  v29 = 16 * HIDWORD(v37);
                  v30 = (WTF::StringImpl **)((char *)v36 + 8);
                  do
                  {
                    v31 = *v30;
                    *v30 = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v14);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                    v30 += 2;
                    v29 -= 16;
                  }
                  while (v29);
                  v28 = v36;
                }
                if (v28)
                {
                  v36 = 0;
                  LODWORD(v37) = 0;
                  WTF::fastFree(v28, v14);
                }
                v32 = v43[0];
                v43[0] = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2)
                    WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v32 -= 2;
                }
                v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v33)
                {
                  if (*(_DWORD *)v33 == 2)
                    WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v14);
                  else
                    *(_DWORD *)v33 -= 2;
                }
                ++v21;
              }
              while (v21 != (uint64_t *)v22);
            }
            v34 = __ldxr(v16);
            if (v34 == 1)
            {
              if (!__stlxr(0, v16))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v35 = v40;
    v40 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v35 -= 2;
    }
    goto LABEL_68;
  }
LABEL_77:
  __break(0xC471u);
  return result;
}

void sub_1946AE7F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char const*,char [10],char const*,char [6],char const*>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char **a4, const char *a5, const char **a6, const char *a7, const char **a8)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::Logger *v40;
  const char **v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  __int128 buf;
  int v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  _QWORD v82[3];

  v82[1] = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v65, *a4);
  WTF::String::String((WTF::String *)&v64, a5);
  WTF::String::String((WTF::String *)&v63, *a6);
  WTF::String::String((WTF::String *)&v62, a7);
  WTF::String::String((WTF::String *)&v61, *a8);
  v59 = v65;
  v71 = v64;
  *(_QWORD *)&buf = v66;
  v69 = v62;
  v70 = v63;
  v68 = v61;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v59, (uint64_t *)&v71, (uint64_t *)&v70, (uint64_t *)&v69, (uint64_t *)&v68, &v67);
  if (v67)
  {
    v12 = v61;
    v61 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v63;
    v63 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v11);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v64;
    v64 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v65;
    v65 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v66;
    v66 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v11);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = *(NSObject **)(a1 + 32);
    v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v19)
    {
      WTF::String::utf8();
      v21 = v59 ? (char *)v59 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v21;
      _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v19 = (uint64_t)v59;
      v59 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          v19 = WTF::fastFree((WTF *)v19, v20);
        else
          --*(_DWORD *)v19;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v23 = *v22;
        if ((v23 & 1) != 0)
          break;
        v24 = __ldaxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 | 1, v22))
          {
            v25 = WTF::Logger::observers((WTF::Logger *)v19);
            v26 = *(unsigned int *)(v25 + 12);
            if ((_DWORD)v26)
            {
              v27 = *(uint64_t **)v25;
              v52 = *(_QWORD *)v25 + 8 * v26;
              do
              {
                v28 = *v27;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(this);
                v29 = *a4;
                v73 = 0;
                WTF::String::String((WTF::String *)&v74, v29);
                v75 = 0;
                WTF::String::String((WTF::String *)&v76, a5);
                v30 = *a6;
                v77 = 0;
                WTF::String::String((WTF::String *)&v78, v30);
                v79 = 0;
                WTF::String::String((WTF::String *)&v80, a7);
                v31 = *a8;
                v81 = 0;
                WTF::String::String((WTF::String *)v82, v31);
                v59 = 0;
                v60 = 0;
                v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                LODWORD(v60) = 6;
                v59 = v32;
                v33 = HIDWORD(v60);
                *((_DWORD *)v32 + 4 * HIDWORD(v60)) = buf;
                v34 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                *((_DWORD *)v32 + 4 * (v33 + 1)) = v73;
                v35 = v74;
                if (v74)
                  *(_DWORD *)v74 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                *((_DWORD *)v32 + 4 * (v33 + 2)) = v75;
                v36 = v76;
                if (v76)
                  *(_DWORD *)v76 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                *((_DWORD *)v32 + 4 * (v33 + 3)) = v77;
                v37 = v78;
                if (v78)
                  *(_DWORD *)v78 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 3) + 1) = v37;
                *((_DWORD *)v32 + 4 * (v33 + 4)) = v79;
                v38 = v80;
                if (v80)
                  *(_DWORD *)v80 += 2;
                *((_QWORD *)v32 + 2 * (v33 + 4) + 1) = v38;
                *((_DWORD *)v32 + 4 * (v33 + 5)) = v81;
                v39 = v82[0];
                if (v82[0])
                  *(_DWORD *)v82[0] += 2;
                *((_QWORD *)v32 + 2 * (v33 + 5) + 1) = v39;
                HIDWORD(v60) = v33 + 6;
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, a1, a2, &v59);
                v40 = v59;
                if (HIDWORD(v60))
                {
                  v41 = a4;
                  v42 = 16 * HIDWORD(v60);
                  v43 = (WTF::StringImpl **)((char *)v59 + 8);
                  do
                  {
                    v44 = *v43;
                    *v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v43 += 2;
                    v42 -= 16;
                  }
                  while (v42);
                  v40 = v59;
                  a4 = v41;
                }
                if (v40)
                {
                  v59 = 0;
                  LODWORD(v60) = 0;
                  WTF::fastFree(v40, v20);
                }
                v45 = (WTF::StringImpl *)v82[0];
                v82[0] = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v80;
                v80 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v78;
                v78 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v76;
                v76 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = v74;
                v74 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                v50 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 == 2)
                    WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v20);
                  else
                    *(_DWORD *)v50 -= 2;
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v52);
            }
            v51 = __ldxr(v22);
            if (v51 == 1)
            {
              if (!__stlxr(0, v22))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v20);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1946AEFCC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WTF *a24,int a25,int a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,WTF::StringImpl *a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33)
{
  unsigned __int8 *v33;
  int v35;

  v35 = __ldxr(v33);
  if (v35 == 1)
  {
    if (!__stlxr(0, v33))
    {
LABEL_6:
      if (a33)
      {
        if (*(_DWORD *)a33 == 2)
          WTF::StringImpl::destroy(a33, a2);
        else
          *(_DWORD *)a33 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  char v30;
  int v31;
  char v32;
  int v33;
  unsigned int v34;
  uint64_t v35;

  v12 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 + 4);
  else
    v15 = 0;
  v16 = *a3;
  if (*a3)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *a4;
  if (*a4)
    v19 = *(_DWORD *)(v18 + 4);
  else
    v19 = 0;
  v20 = *a5;
  if (*a5)
    v21 = *(_DWORD *)(v20 + 4);
  else
    v21 = 0;
  v22 = *a6;
  if (*a6)
    v23 = *(_DWORD *)(v22 + 4);
  else
    v23 = 0;
  if ((v23 | v21) < 0)
    goto LABEL_58;
  v24 = __OFADD__(v21, v23);
  v25 = v21 + v23;
  v26 = v24;
  if (v19 < 0 || v26)
    goto LABEL_58;
  v24 = __OFADD__(v19, v25);
  v27 = v19 + v25;
  v28 = v24;
  if (v17 < 0
    || v28
    || ((v24 = __OFADD__(v17, v27), v29 = v17 + v27, !v24) ? (v30 = 0) : (v30 = 1),
        v15 < 0
     || (v30 & 1) != 0
     || ((v24 = __OFADD__(v15, v29), v31 = v15 + v29, !v24) ? (v32 = 0) : (v32 = 1),
         v13 < 0 || (v32 & 1) != 0 || (result = (v13 + v31), __OFADD__(v13, v31)))))
  {
LABEL_58:
    *a7 = 0;
    return result;
  }
  if ((!v12 || (*(_BYTE *)(v12 + 16) & 4) != 0)
    && (!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0)
    && (!v16 || (*(_BYTE *)(v16 + 16) & 4) != 0)
    && (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0))
  {
    if (v20)
    {
      v34 = *(_DWORD *)(v20 + 16);
      v33 = (v34 >> 2) & 1;
      if (!v22 || (v34 & 4) == 0)
        goto LABEL_44;
    }
    else if (!v22)
    {
      v33 = 1;
      goto LABEL_44;
    }
    v33 = (*(unsigned __int8 *)(v22 + 16) >> 2) & 1;
  }
  else
  {
    v33 = 0;
  }
LABEL_44:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v33, v12, v14, v16, v18, v20, v22, &v35);
  *a7 = v35;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v15;
  _DWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unsigned __int128 *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v17 = v37;
        if (v37)
        {
          v18 = v37 + 5;
          *v37 = 2;
          v17[1] = v15;
          *((_QWORD *)v17 + 1) = v17 + 5;
          v17[4] = 4;
          if (a3)
          {
            v19 = *(_BYTE **)(a3 + 8);
            v20 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v20)
              {
                if ((_DWORD)v20 == 1)
                  *v18 = *v19;
                else
                  memcpy(v17 + 5, v19, v20);
              }
            }
            else
            {
              if (v20 < 0x10)
              {
                v30 = (unsigned __int128 *)(v17 + 5);
              }
              else
              {
                v30 = (unsigned __int128 *)&v18[v20 & 0xFFFFFFF0];
                v31 = (unsigned __int128 *)(v17 + 5);
                do
                {
                  v32 = (unsigned __int128)vld2q_s8(v19);
                  v19 += 32;
                  *v31++ = v32;
                }
                while (v31 != v30);
              }
              while (v30 != (unsigned __int128 *)&v18[v20])
              {
                v33 = *v19;
                v19 += 2;
                *(_BYTE *)v30 = v33;
                v30 = (unsigned __int128 *)((char *)v30 + 1);
              }
            }
            v21 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v21 = 0;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v18[v21], a4, a5, a6, a7, a8);
        }
        goto LABEL_24;
      }
LABEL_28:
      v17 = 0;
      goto LABEL_24;
    }
LABEL_27:
    v17 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_24;
  }
  if (!(_DWORD)result)
    goto LABEL_27;
  if (result > 0x7FFFFFEF)
    goto LABEL_28;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v17 = v37;
  if (v37)
  {
    v22 = v37 + 5;
    *v37 = 2;
    v17[1] = v15;
    *((_QWORD *)v17 + 1) = v17 + 5;
    v17[4] = 0;
    v34 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v34, (char *)v17 + 20);
    v23 = v34;
    if (v34)
      v23 = *(unsigned int *)(v34 + 4);
    v24 = (char *)v22 + 2 * v23;
    v35 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v35, v24);
    v25 = v35;
    if (v35)
      v25 = *(unsigned int *)(v35 + 4);
    v26 = &v24[2 * v25];
    v36 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v36, v26);
    v27 = v36;
    if (v36)
      v27 = *(unsigned int *)(v36 + 4);
    v28 = &v26[2 * v27];
    v37 = (_DWORD *)a6;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v37, v28);
    v29 = (unint64_t)v37;
    if (v37)
      v29 = v37[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v28[2 * v29], a7, a8);
  }
LABEL_24:
  *a9 = v17;
  return result;
}

void sub_1946AF67C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

WebCore::CDM *WebCore::CDM::CDM(WebCore::CDM *this, WebCore::Document *a2, const WTF::String *a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E31F74E0;
  *((_QWORD *)this + 3) = &off_1E33A18C0;
  v6 = (_QWORD *)((char *)this + 24);
  *((_QWORD *)this + 4) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::CDM *)((char *)this + 24), (WebCore::Document *)((char *)a2 + 192));
  *(_QWORD *)this = off_1E31F7490;
  *v6 = &unk_1E31F74B8;
  v7 = WebCore::Document::logger(a2);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 5) = v7;
  *((_QWORD *)this + 6) = WTF::cryptographicallyRandomNumber<unsigned long long>();
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  *((_QWORD *)this + 7) = v10;
  *((_QWORD *)this + 8) = 0;
  {
    WebCore::CDMFactory::registeredFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8AB8 = 0;
  }
  std::call_once[abi:sn180100]<WebCore::CDMFactory::registeredFactories(void)::$_0>((uint64_t)&v19);
  if (dword_1EE2F8ABC)
  {
    v11 = (_QWORD *)WebCore::CDMFactory::registeredFactories(void)::factories;
    v12 = 8 * dword_1EE2F8ABC;
    while (1)
    {
      v13 = *v11;
      if ((*(unsigned int (**)(_QWORD, const WTF::String *))(*(_QWORD *)*v11 + 24))(*v11, a3))
        break;
      ++v11;
      v12 -= 8;
      if (!v12)
        return this;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, const WTF::String *, WebCore::CDM *))(*(_QWORD *)v13 + 16))(&v18, v13, a3, this);
    v14 = v18;
    v18 = 0;
    v15 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = v18;
      v18 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8), *((_QWORD *)this + 6));
  }
  return this;
}

void WebCore::CDM::~CDM(WebCore::CDM *this, WTF::StringImpl *a2)
{
  WebCore::ContextDestructionObserver *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)this = off_1E31F7490;
  *((_QWORD *)this + 3) = &unk_1E31F74B8;
  v3 = (WebCore::CDM *)((char *)this + 24);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(v3, a2);
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CDM::~CDM(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::CDM::~CDM(WebCore::CDM *this, WTF::StringImpl *a2)
{
  WebCore::CDM::~CDM((WebCore::CDM *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CDM::~CDM((WebCore::CDM *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::CDM::getSupportedConfiguration(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WebCore::SecurityOrigin *v14;
  int v15;
  WebCore::SecurityOrigin *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BYTE v20[80];
  char v21;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1946AFA98);
      }
      if (*(_QWORD *)(a1 + 64))
      {
        v8 = *(_QWORD *)(v5 + 240);
        if (!v8)
          goto LABEL_26;
        v9 = *(_QWORD *)(v8 + 8);
        if (!v9)
          goto LABEL_26;
        v10 = *(_QWORD *)(v9 + 24);
        if (!v10)
          goto LABEL_26;
        v11 = *(_QWORD *)(v10 + 8);
        if (!v11)
          goto LABEL_26;
        v12 = *(_QWORD *)(v11 + 1008);
        if (v12 < 0 && v12 != -1)
          goto LABEL_26;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), a2);
        if (!v13)
          goto LABEL_26;
        v14 = (const WebCore::SecurityOrigin *)v13;
        if (*(_DWORD *)(v13 + 32) == 1 || *(_BYTE *)(v13 + 63) && !*(_BYTE *)(v13 + 60) && !*(_BYTE *)(v13 + 56))
          goto LABEL_26;
        v15 = *(unsigned __int8 *)(v5 + 176);
        if (v15 == 1)
        {
          v16 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 256))(v5 - 96);
          WebCore::SecurityOrigin::isSameOriginAs(v16, v14);
        }
        else if (v15 == 2)
        {
LABEL_26:
          v17 = 0;
          goto LABEL_27;
        }
        v17 = 1;
LABEL_27:
        (*(void (**)(_QWORD, WTF::StringImpl *, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), a2, v17, a3);
        return;
      }
    }
  }
  v18 = *a3;
  v20[0] = 0;
  v21 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 16))(v18, v20);
  if (v21)
    WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v20, v19);
}

uint64_t WebCore::CDM::createInstance@<X0>(WebCore::CDM *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  result = *((_QWORD *)this + 8);
  if (result)
  {
    result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)result + 96))(a2);
    v6 = *a2;
    if (v6)
    {
      v7 = *((_QWORD *)this + 4);
      if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
      {
        if (*(_BYTE *)(v8 + 178))
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v8 - 264) += 2;
        WebCore::Document::mediaKeysStorageDirectory((WebCore::Document *)(v8 - 288), v5, &v12);
        if (*(_DWORD *)(v8 - 264) == 2)
        {
          if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288), v9);
        }
        else
        {
          *(_DWORD *)(v8 - 264) -= 2;
        }
      }
      else
      {
        v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v11 += 2;
        v12 = v11;
      }
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v6 + 64))(v6, &v12);
      result = (uint64_t)v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::CDM::logger(WebCore::CDM *this)
{
  return *((_QWORD *)this + 5);
}

void WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(WebCore::CDMKeySystemConfiguration *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  v3 = (WTF *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4)
  {
    v5 = 24 * v4;
    v6 = (WTF::StringImpl **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v9 = (WTF *)*((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((unsigned int *)this + 9);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *(v12 - 1);
      *(v12 - 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v12 += 3;
      v11 -= 24;
    }
    while (v11);
  }
  v15 = (WTF *)*((_QWORD *)this + 3);
  if (v15)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((unsigned int *)this + 5);
  if ((_DWORD)v16)
  {
    v19 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    v20 = 8 * v16;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  v17 = (WTF *)*((_QWORD *)this + 1);
  if (v17)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v18 -= 2;
  }
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsSinf@<X0>(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  WTF *v5;
  WTF *v6;
  char v7;
  uint64_t v8;
  _OWORD *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  WTF *v25;
  uint64_t *result;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  unsigned int v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;

  v31 = 0;
  v32 = 0;
  WebCore::extractSchemeAndKeyIdFromSinf((WTF::StringImpl *)&v29, this);
  if (v30)
  {
    v5 = v29;
    v6 = (WTF *)((char *)v29 + 24 * v30);
    do
    {
      if ((v7 & 1) != 0)
      {
        v8 = dword_1EE2EE45C;
        if (dword_1EE2EE45C)
        {
          v9 = (_OWORD *)WebCore::CDMPrivateFairPlayStreaming::validFairPlayStreamingSchemes(void)::validSchemes;
          goto LABEL_6;
        }
LABEL_8:
        v7 = 1;
      }
      else
      {
        v9 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
        *v9 = xmmword_19689B1E0;
        WebCore::CDMPrivateFairPlayStreaming::validFairPlayStreamingSchemes(void)::validSchemes = (uint64_t)v9;
        unk_1EE2EE458 = 0x400000004;
        v8 = 4;
LABEL_6:
        while (1)
        {
          v10 = *(_DWORD *)v9;
          v9 = (_OWORD *)((char *)v9 + 4);
          if (v10 == *(_DWORD *)v5)
            break;
          if (!--v8)
            goto LABEL_8;
        }
        WebCore::FragmentedSharedBuffer::create((_DWORD *)v5 + 2, &v33);
        v11 = WTF::fastMalloc((WTF *)0x38);
        v28 = WebCore::SharedBuffer::SharedBuffer(v11, &v33);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v33, v12);
        LODWORD(v14) = HIDWORD(v32);
        if (HIDWORD(v32) == (_DWORD)v32)
        {
          v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v31, HIDWORD(v32) + 1, (unint64_t)&v28);
          v14 = HIDWORD(v32);
          v16 = v31;
          v17 = *(_QWORD *)v15;
          *(_QWORD *)v15 = 0;
          *((_QWORD *)v16 + v14) = v17;
        }
        else
        {
          v18 = v28;
          v28 = 0;
          *((_QWORD *)v31 + HIDWORD(v32)) = v18;
        }
        HIDWORD(v32) = v14 + 1;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v28, v13);
      }
      v5 = (WTF *)((char *)v5 + 24);
    }
    while (v5 != v6);
    v19 = v30;
    *(_QWORD *)a2 = v31;
    v20 = v32;
    v31 = 0;
    v32 = 0;
    *(_QWORD *)(a2 + 8) = v20;
    *(_BYTE *)(a2 + 16) = 1;
    v21 = v29;
    if ((_DWORD)v19)
    {
      v22 = 0;
      v23 = 24 * v19;
      do
      {
        v24 = (char *)v21 + v22;
        v25 = *(WTF **)((char *)v21 + v22 + 8);
        if (v25)
        {
          *((_QWORD *)v24 + 1) = 0;
          *((_DWORD *)v24 + 4) = 0;
          WTF::fastFree(v25, v4);
        }
        v22 += 24;
      }
      while (v23 != v22);
    }
    if (v21)
      goto LABEL_22;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    v21 = v29;
    if (v29)
LABEL_22:
      WTF::fastFree(v21, v4);
  }
  result = (uint64_t *)v31;
  if (HIDWORD(v32))
  {
    v27 = 8 * HIDWORD(v32);
    do
    {
      result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(result, v4)+ 1;
      v27 -= 8;
    }
    while (v27);
    result = (uint64_t *)v31;
  }
  if (result)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (uint64_t *)WTF::fastFree((WTF *)result, v4);
  }
  return result;
}

WTF::StringImpl *WebCore::extractSchemeAndKeyIdFromSinf(WTF::StringImpl *this, const WebCore::SharedBuffer *a2)
{
  WTF::JSONImpl::ObjectBase *v2;
  WTF *v3;
  unint64_t v4;
  WebCore::FragmentedSharedBuffer **v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  WTF::JSONImpl::ObjectBase *v11;
  uint64_t v12;
  WTF *v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  const void **v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF *v39;
  uint64_t v40;
  WTF::JSONImpl::Value **v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  void *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  char *v49;
  WTF *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  WTF *v56;
  _DWORD *v57;
  unsigned int *v58;
  WebCore::FragmentedSharedBuffer **v59;
  int v60;
  void *v61;
  WTF *v62;
  WTF *v63;
  int v64;
  int v65;
  WTF *v66;
  uint64_t v67;
  const void **v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  WTF *v73;
  uint64_t v74;
  _DWORD *v75;
  WTF::JSONImpl::ObjectBase *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;

  v4 = (unint64_t)this;
  if (*((_DWORD *)a2 + 13))
  {
    v5 = 0;
    v74 = 0;
LABEL_79:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    goto LABEL_84;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v70);
  v6 = (_BYTE *)v70;
  if (*(_DWORD *)(v70 + 20))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v70 + 8) + 8);
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_143;
    }
    v62 = (WTF *)&v73;
    ((void (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v62, v7 + 8);
  }
  WTF::String::String();
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v70, v9);
  WTF::JSONImpl::Value::parseJSON();
  v2 = v76;
  v58 = (unsigned int *)v4;
  if (v76)
  {
    v10 = *((_DWORD *)v76 + 1);
    if (v10 < 5)
    {
LABEL_8:
      v73 = 0;
      v74 = 0;
      goto LABEL_9;
    }
    if (v10 != 5)
    {
      if (v10 == 6)
        goto LABEL_8;
LABEL_145:
      __break(0xC471u);
      JUMPOUT(0x1946B05A8);
    }
    ++*(_DWORD *)v76;
    v6 = &unk_1EE2EE000;
    {
LABEL_91:
      WTF::JSONImpl::ObjectBase::getArray(v2, (const WTF::String *)&WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf);
      v38 = v75;
      if (!v75)
      {
        v73 = 0;
        v74 = 0;
LABEL_137:
        if (*(_DWORD *)v2 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v2;
LABEL_9:
        v11 = v76;
        v76 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v11;
        }
        goto LABEL_13;
      }
      v73 = 0;
      v74 = 0;
      v3 = (WTF *)v75[7];
      if ((_DWORD)v3)
      {
        if (v3 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1946B08C4);
        }
        v39 = (WTF *)WTF::fastMalloc((WTF *)(8 * (_QWORD)v3));
        LODWORD(v74) = (_DWORD)v3;
        v73 = v39;
        v40 = v38[7];
        if ((_DWORD)v40)
        {
          v41 = (WTF::JSONImpl::Value **)*((_QWORD *)v38 + 2);
          v42 = 8 * v40;
          while (1)
          {
            WTF::JSONImpl::Value::asString(*v41);
            if (!v78)
              goto LABEL_110;
            WTF::base64Decode();
            if ((_BYTE)v64)
            {
              WebCore::FragmentedSharedBuffer::create(&v62, &v70);
              v43 = (WTF *)WTF::fastMalloc((WTF *)0x38);
              WebCore::SharedBuffer::SharedBuffer((uint64_t)v43, &v70);
              WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v70, v44);
              v70 = 0;
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v70, v45);
              if ((_BYTE)v64)
              {
                v46 = v62;
                if (v62)
                {
                  v62 = 0;
                  LODWORD(v63) = 0;
                  WTF::fastFree(v46, a2);
                }
              }
            }
            else
            {
              v43 = 0;
            }
            v47 = v78;
            v78 = 0;
            if (!v47)
              goto LABEL_105;
            if (*(_DWORD *)v47 != 2)
              break;
            WTF::StringImpl::destroy(v47, a2);
            if (v43)
            {
LABEL_106:
              v62 = v43;
              LODWORD(v48) = HIDWORD(v74);
              if (HIDWORD(v74) == (_DWORD)v74)
              {
                v49 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v73, HIDWORD(v74) + 1, (unint64_t)&v62);
                v48 = HIDWORD(v74);
                v50 = v73;
                v51 = *(_QWORD *)v49;
                *(_QWORD *)v49 = 0;
                *((_QWORD *)v50 + v48) = v51;
              }
              else
              {
                v62 = 0;
                *((_QWORD *)v73 + HIDWORD(v74)) = v43;
              }
              HIDWORD(v74) = v48 + 1;
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v62, a2);
            }
LABEL_110:
            ++v41;
            v42 -= 8;
            if (!v42)
            {
              LODWORD(v3) = v74;
              v52 = HIDWORD(v74);
              v4 = (unint64_t)v58;
              goto LABEL_118;
            }
          }
          *(_DWORD *)v47 -= 2;
LABEL_105:
          if (v43)
            goto LABEL_106;
          goto LABEL_110;
        }
      }
      v52 = 0;
LABEL_118:
      if (v52 < v3)
      {
        v53 = HIDWORD(v74);
        v3 = v73;
        if (v52 < HIDWORD(v74))
        {
          v54 = (uint64_t *)((char *)v73 + 8 * v52);
          v55 = 8 * HIDWORD(v74) - 8 * v52;
          do
          {
            v54 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v54, a2)+ 1;
            v55 -= 8;
          }
          while (v55);
          HIDWORD(v74) = v52;
          v3 = v73;
          v53 = v52;
        }
        if (v52)
        {
          if ((_DWORD)v74)
          {
            LODWORD(v74) = v52;
            v73 = (WTF *)WTF::fastRealloc(v3, (void *)(8 * v52));
            v4 = (unint64_t)v58;
            goto LABEL_134;
          }
          if (v52 >> 29)
            goto LABEL_145;
          v56 = (WTF *)WTF::fastMalloc((WTF *)(8 * v52));
          LODWORD(v74) = v52;
          v73 = v56;
          if (v56 != v3)
            memcpy(v56, v3, 8 * v53);
        }
        v4 = (unint64_t)v58;
        if (v3)
        {
          if (v73 == v3)
          {
            v73 = 0;
            LODWORD(v74) = 0;
          }
          WTF::fastFree(v3, a2);
        }
      }
LABEL_134:
      v57 = v75;
      v75 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
      goto LABEL_137;
    }
LABEL_143:
    WTF::AtomStringImpl::add();
    WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf = (uint64_t)v62;
    v6[1136] = 1;
    goto LABEL_91;
  }
  v73 = 0;
  v74 = 0;
LABEL_13:
  this = v77;
  v77 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  v12 = HIDWORD(v74);
  v5 = (WebCore::FragmentedSharedBuffer **)v73;
  if (!HIDWORD(v74))
    goto LABEL_79;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v59 = &v5[v12];
  do
  {
    WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(*v5, &v62);
    JSC::DataView::create();
    v13 = v62;
    v62 = 0;
    if (v13)
    {
      v14 = *(_DWORD *)v13 == 2;
      *(_DWORD *)v13 -= 2;
      if (v14)
      {
        v33 = *((_QWORD *)v13 + 10);
        if (v33)
        {
          *(_QWORD *)(v33 + 8) = 3;
          *((_QWORD *)v13 + 10) = 0;
        }
        if ((*((_BYTE *)v13 + 72) & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((WTF *)((char *)v13 + 72));
        JSC::ArrayBufferContents::~ArrayBufferContents((WTF *)((char *)v13 + 16));
        v35 = (WTF *)*((_QWORD *)v13 + 1);
        if ((v35 & 1) == 0 && v35)
        {
          v36 = *(WTF **)v35;
          if (*(_QWORD *)v35)
          {
            *(_QWORD *)v35 = 0;
            *((_DWORD *)v35 + 2) = 0;
            WTF::fastFree(v36, v34);
          }
          WTF::fastFree(v35, v34);
        }
        WTF::fastFree(v13, v34);
      }
    }
    v15 = 0;
    v16 = 0;
    v17 = 0;
    LODWORD(v3) = v3 & 0xFFFFFF00;
    v4 &= 0xFFFFFFFFFFFFFF00;
    while (1)
    {
      WebCore::ISOBox::peekBox((uint64_t)v78, v15, (uint64_t)&v70);
      if (!v72)
      {
LABEL_49:
        if (!v17)
          goto LABEL_57;
        goto LABEL_50;
      }
      if ((_DWORD)v70 == 1935894633)
      {
        v64 = 0;
        v66 = 0;
        v67 = 0;
        v62 = (WTF *)off_1E3416C28;
        v63 = 0;
        v68 = 0;
        LODWORD(v77) = v15;
        if ((WebCore::ISOSchemeInformationBox::parse((uint64_t)&v62, (uint64_t)v78, (unsigned int *)&v77) & 1) != 0)
        {
          v15 += v63;
          v23 = v68;
          if (!v68)
          {
            v22 = 4;
LABEL_46:
            if (v66)
              WTF::fastFree(v66, a2);
            goto LABEL_48;
          }
          if (*((_DWORD *)v68 + 4) != 1952804451)
          {
            __break(0xC471u);
            JUMPOUT(0x1946B07F0);
          }
          v24 = (WTF *)*((unsigned int *)v68 + 17);
          LODWORD(v61) = (_DWORD)v24;
          if ((_DWORD)v24)
          {
            v25 = (void *)WTF::fastMalloc(v24);
            memcpy(v25, v23[7], *((unsigned int *)v23 + 17));
          }
          else
          {
            v25 = 0;
          }
          v22 = 4;
          if (v16 && v4)
            WTF::fastFree((WTF *)v4, a2);
          v16 = 1;
          v60 = (int)v61;
          v4 = (unint64_t)v25;
        }
        else
        {
          v22 = 5;
        }
        if (v68)
          (*((void (**)(const void **))*v68 + 1))(v68);
        goto LABEL_46;
      }
      if ((_DWORD)v70 != 1935894637)
      {
        v22 = 0;
        v15 += v71;
        goto LABEL_48;
      }
      v66 = 0;
      v67 = 0;
      LOBYTE(v68) = 0;
      v62 = (WTF *)off_1E3416C50;
      v63 = 0;
      v64 = 0;
      HIDWORD(v68) = 0;
      v69 = 0;
      LODWORD(v77) = v15;
      v18 = WebCore::ISOSchemeTypeBox::parse((uint64_t)&v62, (uint64_t)v78, (unsigned int *)&v77);
      v19 = v18;
      if (v18)
        v20 = (int)v63;
      else
        v20 = 0;
      v21 = v69;
      if (v66)
        WTF::fastFree(v66, a2);
      if ((v19 & 1) == 0)
        break;
      v15 += v20;
      v22 = 4;
      v17 = 1;
      LODWORD(v3) = v21;
LABEL_48:
      if (v22 == 5)
        goto LABEL_49;
    }
    if (!v17)
      goto LABEL_57;
LABEL_50:
    if (v16)
    {
      LODWORD(v62) = (_DWORD)v3;
      v63 = (WTF *)v4;
      v64 = v60;
      v65 = (int)v61;
      v26 = v58[3];
      if ((_DWORD)v26 == v58[2])
      {
        v27 = WTF::Vector<std::pair<WebCore::FourCC,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v58, v26 + 1, (unint64_t)&v62);
        LODWORD(v26) = v58[3];
        v28 = *(_QWORD *)v58 + 24 * v26;
        *(_DWORD *)v28 = *(_DWORD *)v27;
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v28 + 16) = 0;
        v29 = *(_QWORD *)(v27 + 8);
        *(_QWORD *)(v27 + 8) = 0;
        *(_QWORD *)(v28 + 8) = v29;
        LODWORD(v29) = *(_DWORD *)(v27 + 16);
        *(_DWORD *)(v27 + 16) = 0;
        *(_DWORD *)(v28 + 16) = v29;
        v30 = *(_DWORD *)(v27 + 20);
        *(_DWORD *)(v27 + 20) = 0;
      }
      else
      {
        v28 = *(_QWORD *)v58 + 24 * v26;
        *(_DWORD *)v28 = (_DWORD)v3;
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v28 + 16) = 0;
        v31 = v63;
        v63 = 0;
        *(_QWORD *)(v28 + 8) = v31;
        *(_DWORD *)(v28 + 16) = v64;
        v30 = v65;
        v65 = 0;
      }
      *(_DWORD *)(v28 + 20) = v30;
      v58[3] = v26 + 1;
      v32 = v63;
      if (v63)
      {
        v63 = 0;
        v64 = 0;
        WTF::fastFree(v32, a2);
      }
      LODWORD(v61) = 0;
      v60 = 0;
      v4 = 0;
    }
LABEL_57:
    this = v78;
    v78 = 0;
    if (!this)
    {
LABEL_60:
      if (!v16)
        goto LABEL_63;
LABEL_61:
      if (v4)
      {
        this = (WTF::StringImpl *)WTF::fastFree((WTF *)v4, a2);
        v60 = 0;
        v4 = 0;
      }
      goto LABEL_63;
    }
    if (*(_DWORD *)this != 1)
    {
      --*(_DWORD *)this;
      goto LABEL_60;
    }
    this = (WTF::StringImpl *)JSC::ArrayBufferView::operator delete();
    if (v16)
      goto LABEL_61;
LABEL_63:
    ++v5;
  }
  while (v5 != v59);
  v5 = (WebCore::FragmentedSharedBuffer **)v73;
  if (HIDWORD(v74))
  {
    v37 = 8 * HIDWORD(v74);
    do
    {
      this = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v5++, a2);
      v37 -= 8;
    }
    while (v37);
    v5 = (WebCore::FragmentedSharedBuffer **)v73;
  }
LABEL_84:
  if (v5)
  {
    v73 = 0;
    LODWORD(v74) = 0;
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v5, a2);
  }
  return this;
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::sanitizeSinf@<X0>(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;

  WebCore::FragmentedSharedBuffer::makeContiguous(this, &v7);
  v4 = v7;
  v7 = 0;
  *a2 = v4;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v7, v5);
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::sanitizeSkd@<X0>(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;

  WebCore::FragmentedSharedBuffer::makeContiguous(this, &v7);
  v4 = v7;
  v7 = 0;
  *a2 = v4;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v7, v5);
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsSkd@<X0>(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  WebCore::FragmentedSharedBuffer::makeContiguous(this, v9);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v6 = (unsigned int *)v9[0];
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *v4 = v6;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  *(_BYTE *)(a2 + 16) = 1;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v9, v5);
}

WTF::StringImpl *WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsMpts@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t Integer;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  unsigned int **v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  unsigned int *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  if (*((_DWORD *)this + 13))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return this;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous(this, &v34);
  v4 = v34;
  if (*((_DWORD *)v34 + 5))
  {
    v5 = *(_QWORD *)(*((_QWORD *)v34 + 1) + 8);
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_56;
    }
    v35 = (WTF::StringImpl *)&v33;
    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v35, v5 + 8);
  }
  WTF::String::String();
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v34, v7);
  WTF::JSONImpl::Value::parseJSON();
  v4 = v32;
  if (!v32)
    goto LABEL_8;
  v9 = *((_DWORD *)v32 + 1);
  if (v9 < 5)
    goto LABEL_8;
  if (v9 == 5)
  {
    ++*(_DWORD *)v32;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = v35;
    WTF::JSONImpl::ObjectBase::getString(v32, (const WTF::String *)&v34);
    v11 = v34;
    v34 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (!MEMORY[0x19AEA53F4](v31, "mpts", 4))
      goto LABEL_43;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = v35;
    Integer = WTF::JSONImpl::ObjectBase::getInteger(v32, (const WTF::String *)&v34);
    v13 = v34;
    v34 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    if ((Integer & 0xFF00000000) == 0)
      goto LABEL_43;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = WTF::JSONImpl::ObjectBase::getInteger(v32, (const WTF::String *)&v35);
    v15 = v35;
    v35 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    if ((v14 & 0xFF00000000) == 0)
    {
LABEL_43:
      v23 = 0;
      *(_BYTE *)a2 = 0;
      goto LABEL_44;
    }
    {
      v16 = dword_1EE2EE4A4;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 12) = v16;
      if (!(_DWORD)v16)
      {
LABEL_40:
        v23 = 1;
LABEL_44:
        *(_BYTE *)(a2 + 16) = v23;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v8);
          else
            *(_DWORD *)v31 -= 2;
        }
        if (*(_DWORD *)v4 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v4;
        goto LABEL_9;
      }
      if (v16 >> 29)
      {
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1946B0B28);
      }
      v17 = v16;
LABEL_35:
      v18 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v16));
      *(_DWORD *)(a2 + 8) = v17;
      *(_QWORD *)a2 = v18;
      if (dword_1EE2EE4A4)
      {
        v19 = (unsigned int **)WebCore::CDMPrivateFairPlayStreaming::mptsKeyIDs(void)::mptsKeyID;
        v20 = WebCore::CDMPrivateFairPlayStreaming::mptsKeyIDs(void)::mptsKeyID + 8 * dword_1EE2EE4A4;
        do
        {
          v21 = *v19;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
          *v18++ = v21;
          ++v19;
        }
        while (v19 != (unsigned int **)v20);
      }
      goto LABEL_40;
    }
LABEL_56:
    v24 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 8) = v24 + 24;
    *(_QWORD *)(v24 + 16) = 1;
    *(_BYTE *)(v24 + 40) = 0;
    *(_QWORD *)(v24 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v24, (WTF *)"TransportStreamIdentifier", (WTF *)0x19);
    v35 = (WTF::StringImpl *)v24;
    v25 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    v34 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer((uint64_t)v25, (uint64_t *)&v35);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v35, v26);
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v29 = (uint64_t)v27;
    do
      v30 = __ldaxr(v25);
    while (__stlxr(v30 + 1, v25));
    *v27 = v25;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v34, v28);
    WebCore::CDMPrivateFairPlayStreaming::mptsKeyIDs(void)::mptsKeyID = v29;
    unk_1EE2EE4A0 = 0x100000001;
    v17 = 1;
    *(_DWORD *)(a2 + 12) = 1;
    v16 = 1;
    goto LABEL_35;
  }
  if (v9 != 6)
    goto LABEL_59;
LABEL_8:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_9:
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v32;
  }
  this = v33;
  v33 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v8);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::mptsKeyIDs(WebCore::CDMPrivateFairPlayStreaming *this)
{
  uint64_t v2;
  unsigned int *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  {
    v2 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 8) = v2 + 24;
    *(_QWORD *)(v2 + 16) = 1;
    *(_BYTE *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v2, (WTF *)"TransportStreamIdentifier", (WTF *)0x19);
    v10 = v2;
    v3 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    v9 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v3, &v10);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v10, v4);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v7 = (uint64_t)v5;
    do
      v8 = __ldaxr(v3);
    while (__stlxr(v8 + 1, v3));
    *v5 = v3;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, v6);
    WebCore::CDMPrivateFairPlayStreaming::mptsKeyIDs(void)::mptsKeyID = v7;
    unk_1EE2EE4A0 = 0x100000001;
  }
  return &WebCore::CDMPrivateFairPlayStreaming::mptsKeyIDs(void)::mptsKeyID;
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::sanitizeMpts@<X0>(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;

  WebCore::FragmentedSharedBuffer::makeContiguous(this, &v7);
  v4 = v7;
  v7 = 0;
  *a2 = v4;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v7, v5);
}

void std::call_once[abi:sn180100]<WebCore::CDMFactory::platformRegisterFactories(WTF::Vector<WebCore::CDMFactory*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::CDMFactory::platformRegisterFactories(WTF::Vector<WebCore::CDMFactory*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::CDMFactory::platformRegisterFactories(WTF::Vector<WebCore::CDMFactory*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CDMFactory::platformRegisterFactories(WTF::Vector<WebCore::CDMFactory*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &&>>);
  }
}

uint64_t WebCore::CDMFactoryFairPlayStreaming::createCDM@<X0>(const WTF::String *a1@<X1>, const WebCore::CDMPrivateClient *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a1, "com.apple.fps", 13) & 1) != 0
    || (result = *(_QWORD *)a1) != 0 && (result = WTF::StringImpl::startsWith(), (_DWORD)result))
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = off_1E31F7538;
    v8[1] = 0;
    result = (*(uint64_t (**)(const WebCore::CDMPrivateClient *))(*(_QWORD *)a2 + 16))(a2);
    v9 = (unsigned int *)(result + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v8[2] = result;
    v8[3] = 0;
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t WebCore::CDMFactoryFairPlayStreaming::supportsKeySystem(WebCore::CDMFactoryFairPlayStreaming *this, const WTF::String *a2)
{
  uint64_t result;

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, "com.apple.fps", 13) & 1) != 0)
    return 1;
  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    return WTF::StringImpl::startsWith();
  return result;
}

void WebCore::CDMPrivateFairPlayStreaming::~CDMPrivateFairPlayStreaming(WebCore::CDMPrivateFairPlayStreaming *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

void WebCore::CDMPrivateFairPlayStreaming::supportedInitDataTypes(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;

  WebCore::validInitDataTypes(this);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = dword_1ECE80DA4;
  if (dword_1ECE80DA4)
  {
    if (dword_1ECE80DA4 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = WTF::fastMalloc((WTF *)(8 * dword_1ECE80DA4));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v4;
      if (dword_1ECE80DA4)
      {
        if (dword_1ECE80DA0)
        {
          v5 = 8 * dword_1ECE80DA0;
          for (i = (_QWORD *)qword_1ECE80D98; !*i; ++i)
          {
            v5 -= 8;
            if (!v5)
              return;
          }
        }
        else
        {
          i = (_QWORD *)qword_1ECE80D98;
        }
        v7 = qword_1ECE80D98 + 8 * dword_1ECE80DA0;
        if (i != (_QWORD *)v7)
        {
          v8 = 0;
          v9 = (_DWORD *)*i;
LABEL_12:
          if (v9)
            *v9 += 2;
          v10 = v8 + 1;
          *(_QWORD *)(v4 + 8 * v8) = v9;
          while (++i != (_QWORD *)v7)
          {
            v9 = (_DWORD *)*i;
            if (*i)
            {
              ++v8;
              if (i != (_QWORD *)v7)
                goto LABEL_12;
              break;
            }
          }
          *(_DWORD *)(a2 + 12) = v10;
        }
      }
    }
  }
}

void WebCore::validInitDataTypes(WebCore *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD v10[3];
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[2];

  v14[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_93 & 1) != 0)
    return;
  {
    v1 = (WTF::StringImpl *)WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf;
    if (!WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf)
      goto LABEL_5;
    goto LABEL_4;
  }
  WTF::AtomStringImpl::add();
  v1 = v11;
  WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf = (uint64_t)v11;
  if (v11)
LABEL_4:
    *(_DWORD *)v1 += 2;
LABEL_5:
  v11 = v1;
  {
    v2 = (WTF::StringImpl *)WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd;
    if (!WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd)
      goto LABEL_8;
    goto LABEL_7;
  }
  WTF::AtomStringImpl::add();
  v2 = (WTF::StringImpl *)v10[0];
  WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd = v10[0];
  if (v10[0])
LABEL_7:
    *(_DWORD *)v2 += 2;
LABEL_8:
  v12 = v2;
  {
    v3 = (WTF::StringImpl *)WebCore::InitDataRegistry::cencName(void)::sinf;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v3 = (WTF::StringImpl *)v10[0];
    WebCore::InitDataRegistry::cencName(void)::sinf = v10[0];
  }
  if (v3)
    *(_DWORD *)v3 += 2;
  v13 = v3;
  {
    WTF::AtomStringImpl::add();
    v4 = (WTF::StringImpl *)v10[0];
    WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts = v10[0];
    if (!v10[0])
      goto LABEL_15;
    goto LABEL_14;
  }
  v4 = (WTF::StringImpl *)WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts;
  if (WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts)
LABEL_14:
    *(_DWORD *)v4 += 2;
LABEL_15:
  v14[0] = v4;
  qword_1ECE80D98 = 0;
  *(_QWORD *)&dword_1ECE80DA0 = 0;
  *(_QWORD *)((char *)&dword_1ECE80DA4 + 1) = 0;
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE80D98, (uint64_t)&v11, (uint64_t)v10);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE80D98, (uint64_t)&v12, (uint64_t)v10);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE80D98, (uint64_t)&v13, (uint64_t)v10);
  WTF::RobinHoodHashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&qword_1ECE80D98, (uint64_t)v14, (uint64_t)v10);
  v6 = v14[0];
  v14[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v13;
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  _MergedGlobals_93 = 1;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::supportsConfiguration(WebCore::CDMPrivateFairPlayStreaming *this, const WebCore::CDMKeySystemConfiguration *a2)
{
  WebCore::CDMPrivateFairPlayStreaming *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  PAL *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v34;
  uint64_t v35;
  PAL *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;

  v2 = this;
  v3 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v3)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = v5 + 8 * v3;
    do
    {
      WebCore::validInitDataTypes(this);
      if (qword_1ECE80D98)
      {
        v7 = dword_1ECE80DA0 - 1;
        v8 = *(_DWORD *)(*(_QWORD *)v5 + 16);
        v9 = (dword_1ECE80DA8 ^ (v8 >> 8)) & (dword_1ECE80DA0 - 1);
        v10 = *(_QWORD *)(qword_1ECE80D98 + 8 * v9);
        if (v10)
        {
          v11 = v8 >> 8;
          v12 = -1;
          do
          {
            v13 = *(_DWORD *)(v10 + 16);
            this = (WebCore::CDMPrivateFairPlayStreaming *)((v9 + dword_1ECE80DA0 - ((dword_1ECE80DA8 ^ (v13 >> 8)) & v7)) & v7);
            if (++v12 > this)
              break;
            if (v10 == *(_QWORD *)v5 && v13 >> 8 == v11)
            {
              if (!*((_BYTE *)a2 + 56))
              {
                v23 = *((_QWORD *)v2 + 2);
                v24 = *((_QWORD *)v2 + 3);
                v48 = "CDMPrivateFairPlayStreaming";
                v49 = 28;
                v50 = "supportsConfiguration";
                v51 = v24;
                if (*(_BYTE *)(v23 + 12))
                {
                  if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 3u, (WTF::Logger::LogSiteIdentifier *)&v48, "false, requried distinctiveIdentifier not supported");
                }
                return 0;
              }
              if (!*((_BYTE *)a2 + 57))
              {
                this = (WebCore::CDMPrivateFairPlayStreaming *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::supportsPersistableState(this);
                if ((this & 1) == 0)
                {
                  v26 = *((_QWORD *)v2 + 2);
                  v27 = *((_QWORD *)v2 + 3);
                  v48 = "CDMPrivateFairPlayStreaming";
                  v49 = 28;
                  v50 = "supportsConfiguration";
                  v51 = v27;
                  if (*(_BYTE *)(v26 + 12) && WebCore::LogEME && byte_1ECE7CE20 >= 3u)
                    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 3u, (WTF::Logger::LogSiteIdentifier *)&v48, "false, required persistentState not supported");
                  return 0;
                }
              }
              v17 = *((unsigned int *)a2 + 19);
              if ((_DWORD)v17)
              {
                v18 = (unsigned __int8 *)*((_QWORD *)a2 + 8);
                v19 = v18;
                v20 = *((unsigned int *)a2 + 19);
                while (1)
                {
                  v21 = *v19++;
                  if (v21 == 2)
                    break;
                  if (!--v20)
                    goto LABEL_41;
                }
                while (*v18++)
                {
                  if (!--v17)
                  {
                    if (PAL::getAVPersistableContentKeyRequestClass[0](this))
                      break;
                    v45 = *((_QWORD *)v2 + 2);
                    v46 = *((_QWORD *)v2 + 3);
                    v48 = "CDMPrivateFairPlayStreaming";
                    v49 = 28;
                    v50 = "supportsConfiguration";
                    v51 = v46;
                    if (*(_BYTE *)(v45 + 12))
                    {
                      if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
                        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 3u, (WTF::Logger::LogSiteIdentifier *)&v48, "false, sessionType PersistentLicense not supported");
                    }
                    return 0;
                  }
                }
              }
LABEL_41:
              v28 = *((unsigned int *)a2 + 9);
              if ((_DWORD)v28)
              {
                v29 = (PAL *)*((_QWORD *)a2 + 3);
                v30 = 24 * v28;
                while ((WebCore::CDMInstanceFairPlayStreamingAVFObjC::supportsMediaCapability(v29) & 1) == 0)
                {
                  v29 = (PAL *)((char *)v29 + 24);
                  v30 -= 24;
                  if (!v30)
                  {
                    v31 = *((_QWORD *)v2 + 2);
                    v32 = *((_QWORD *)v2 + 3);
                    v48 = "CDMPrivateFairPlayStreaming";
                    v49 = 28;
                    v50 = "supportsConfiguration";
                    v51 = v32;
                    if (*(_BYTE *)(v31 + 12))
                    {
                      if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
                      {
                        v34 = "false, no audio configuration supported";
LABEL_63:
                        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogEME, 3u, (WTF::Logger::LogSiteIdentifier *)&v48, v34);
                      }
                    }
                    return 0;
                  }
                }
              }
              v35 = *((unsigned int *)a2 + 13);
              if ((_DWORD)v35)
              {
                v36 = (PAL *)*((_QWORD *)a2 + 5);
                v37 = 24 * v35;
                while ((WebCore::CDMInstanceFairPlayStreamingAVFObjC::supportsMediaCapability(v36) & 1) == 0)
                {
                  v36 = (PAL *)((char *)v36 + 24);
                  v37 -= 24;
                  if (!v37)
                  {
                    v38 = *((_QWORD *)v2 + 2);
                    v39 = *((_QWORD *)v2 + 3);
                    v48 = "CDMPrivateFairPlayStreaming";
                    v49 = 28;
                    v50 = "supportsConfiguration";
                    v51 = v39;
                    if (*(_BYTE *)(v38 + 12))
                    {
                      if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
                      {
                        v34 = "false, no video configuration supported";
                        goto LABEL_63;
                      }
                    }
                    return 0;
                  }
                }
              }
              v42 = *((_QWORD *)v2 + 2);
              v43 = *((_QWORD *)v2 + 3);
              v48 = "CDMPrivateFairPlayStreaming";
              v49 = 28;
              v50 = "supportsConfiguration";
              v51 = v43;
              if (*(_BYTE *)(v42 + 12))
              {
                if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
                  WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 3u, (WTF::Logger::LogSiteIdentifier *)&v48, "true, supported");
              }
              return 1;
            }
            v9 = (v9 + 1) & v7;
            v10 = *(_QWORD *)(qword_1ECE80D98 + 8 * v9);
          }
          while (v10);
        }
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  v14 = *((_QWORD *)v2 + 2);
  v15 = *((_QWORD *)v2 + 3);
  v48 = "CDMPrivateFairPlayStreaming";
  v49 = 28;
  v50 = "supportsConfiguration";
  v51 = v15;
  if (*(_BYTE *)(v14 + 12))
  {
    if (WebCore::LogEME)
      v16 = byte_1ECE7CE20 >= 3u;
    else
      v16 = 0;
    if (v16)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogEME, 3u, (WTF::Logger::LogSiteIdentifier *)&v48, " false, no initDataType supported");
  }
  return 0;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::supportsConfigurationWithRestrictions(WebCore::CDMPrivateFairPlayStreaming *this, WebCore::CDMKeySystemConfiguration *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  _DWORD *v17;
  size_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;

  if (*(_BYTE *)(a3 + 1))
  {
    v6 = *((unsigned int *)a2 + 19);
    if ((_DWORD)v6)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)a2 + 8);
      while (*v7++)
      {
        if (!--v6)
          return 0;
      }
    }
    if (!*((_BYTE *)a2 + 57))
      return 0;
  }
  v9 = *(_QWORD *)(a3 + 8);
  if (!v9 || (v10 = *(unsigned int *)(v9 - 12), !(_DWORD)v10))
  {
    v17 = 0;
    goto LABEL_46;
  }
  v11 = (v10 - 1) | ((v10 - 1) >> 1) | ((((_DWORD)v10 - 1) | ((v10 - 1) >> 1)) >> 2);
  v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  v13 = (v12 | HIWORD(v12)) + 1;
  if (v13 > 0x400)
  {
    if (v13 > 2 * v10)
      goto LABEL_16;
  }
  else if (3 * v13 > 4 * v10)
  {
LABEL_13:
    v14 = (double)v10;
    v15 = (double)v13;
    v16 = 0.604166667;
    goto LABEL_17;
  }
  LODWORD(v13) = 2 * v13;
  if (v13 <= 0x400)
    goto LABEL_13;
LABEL_16:
  v14 = (double)v10;
  v15 = (double)v13;
  v16 = 0.416666667;
LABEL_17:
  if (v15 * v16 <= v14)
    LODWORD(v13) = 2 * v13;
  if (v13 <= 8)
    v18 = 8;
  else
    v18 = v13;
  v19 = (_DWORD *)WTF::fastMalloc((WTF *)(v18 + 16));
  v17 = v19 + 4;
  memset(v19 + 4, 255, v18);
  LODWORD(v20) = v18 - 1;
  v19[2] = v18 - 1;
  v19[3] = v18;
  *v19 = 0;
  v19[1] = v10;
  v21 = *(unsigned __int8 **)(a3 + 8);
  if (v21)
  {
    v22 = *((unsigned int *)v21 - 1);
    v23 = &v21[v22];
    if (*((_DWORD *)v21 - 3))
    {
      v24 = *(unsigned __int8 **)(a3 + 8);
      if ((_DWORD)v22)
      {
        v24 = *(unsigned __int8 **)(a3 + 8);
        while (*v24 >= 0xFEu)
        {
          ++v24;
          if (!--v22)
          {
            v24 = v23;
            goto LABEL_32;
          }
        }
      }
      goto LABEL_32;
    }
    v24 = &v21[v22];
  }
  else
  {
    v24 = 0;
    v22 = 0;
  }
  v23 = &v21[v22];
LABEL_32:
  if (v21)
    v21 += *((unsigned int *)v21 - 1);
  if (v21 != v24)
  {
    if (v19 == (_DWORD *)-16)
      v20 = 0;
    else
      v20 = v20;
    do
    {
      v25 = 0;
      v26 = *v24;
      v27 = 9 * ((~(v26 << 15) + v26) ^ ((~(v26 << 15) + v26) >> 10));
      v28 = ((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) ^ (((v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11)) >> 16);
      do
      {
        v29 = v28 & v20;
        v30 = *((unsigned __int8 *)v17 + (v28 & v20));
        v28 = ++v25 + (v28 & v20);
      }
      while (v30 != 255);
      *((_BYTE *)v17 + v29) = v26;
      v31 = v24 + 1;
      v24 = v23;
      if (v31 != v23)
      {
        v24 = v31;
        while (*v24 >= 0xFEu)
        {
          if (++v24 == v23)
          {
            v24 = v23;
            break;
          }
        }
      }
    }
    while (v24 != v21);
  }
LABEL_46:
  v32 = *((unsigned int *)a2 + 19);
  if (!(_DWORD)v32)
  {
    if (v17)
LABEL_56:
      WTF::fastFree((WTF *)(v17 - 4), a2);
    return 0;
  }
  if (v17)
  {
    v33 = (unsigned __int8 *)*((_QWORD *)a2 + 8);
    v34 = &v33[v32];
    v35 = *(v17 - 2);
    while (1)
    {
      v36 = *v33;
      v37 = 9 * ((~(v36 << 15) + v36) ^ ((~(v36 << 15) + v36) >> 10));
      v38 = (v37 ^ (v37 >> 6)) + ~((v37 ^ (v37 >> 6)) << 11);
      v39 = (v38 ^ HIWORD(v38)) & v35;
      v40 = *((unsigned __int8 *)v17 + v39);
      if (v40 != v36)
        break;
LABEL_53:
      if (++v33 == v34)
        goto LABEL_56;
    }
    v41 = 1;
    while (v40 != 255)
    {
      v39 = ((_DWORD)v39 + v41) & v35;
      v40 = *((unsigned __int8 *)v17 + v39);
      ++v41;
      if (v40 == v36)
        goto LABEL_53;
    }
    WTF::fastFree((WTF *)(v17 - 4), a2);
  }
  return WebCore::CDMPrivateFairPlayStreaming::supportsConfiguration(this, a2);
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::supportsSessionTypeWithConfiguration(WebCore::CDMPrivateFairPlayStreaming *a1, _BYTE *a2, WebCore::CDMKeySystemConfiguration *a3)
{
  if (*a2)
  {
    if (*((_BYTE *)a3 + 57) == 2)
      return 0;
  }
  else if (!*((_BYTE *)a3 + 57))
  {
    return 0;
  }
  return WebCore::CDMPrivateFairPlayStreaming::supportsConfiguration(a1, a3);
}

_QWORD *WebCore::CDMPrivateFairPlayStreaming::supportedRobustnesses@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *v3;
  _QWORD *result;
  WTF::StringImpl *v5;
  int v6;

  v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *(_DWORD *)v3 += 2;
  *(_QWORD *)(a1 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a1 = result;
  if (v3)
  {
    v6 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    *result = v3;
    *(_DWORD *)(a1 + 12) = 1;
    if (v6)
      *(_DWORD *)v3 = v6;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v5);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a1 + 12) = 1;
  }
  return result;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::distinctiveIdentifiersRequirement()
{
  return 2;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::persistentStateRequirement()
{
  return 1;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::distinctiveIdentifiersAreUniquePerOriginAndClearable()
{
  return 1;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::createInstance@<X0>(WebCore::CDMPrivateFairPlayStreaming *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  result = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E31F7680;
  *(_QWORD *)(result + 16) = &unk_1E31F7760;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_BYTE *)(result + 72) = 1;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  v5 = *((_QWORD *)this + 2);
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *((_QWORD *)this + 3);
  *(_QWORD *)(result + 128) = v5;
  *(_QWORD *)(result + 136) = v8;
  *a2 = result;
  return result;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::supportsServerCertificates(WebCore::CDMPrivateFairPlayStreaming *this)
{
  return 1;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::supportsSessions(WebCore::CDMPrivateFairPlayStreaming *this)
{
  return 1;
}

BOOL WebCore::CDMPrivateFairPlayStreaming::supportsInitData(WebCore::CDMPrivateFairPlayStreaming *this, WTF **a2, const WebCore::SharedBuffer *a3)
{
  int v5;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  _BOOL8 v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  char v22;
  __int128 v23;
  WTF *v24;
  uint64_t v25;
  _OWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  int v32;
  int v33;
  _OWORD *v34;
  uint64_t v36;
  char *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  char v45;

  WebCore::validInitDataTypes(this);
  if (!qword_1ECE80D98)
    return 0;
  v5 = dword_1ECE80DA0 - 1;
  v6 = *a2;
  v7 = *((_DWORD *)*a2 + 4);
  v8 = (dword_1ECE80DA8 ^ (v7 >> 8)) & (dword_1ECE80DA0 - 1);
  v9 = *(WTF **)(qword_1ECE80D98 + 8 * v8);
  if (!v9)
    return 0;
  v10 = v7 >> 8;
  v11 = -1;
  while (1)
  {
    v12 = *((_DWORD *)v9 + 4);
    if (++v11 > ((v8 + dword_1ECE80DA0 - ((dword_1ECE80DA8 ^ (v12 >> 8)) & v5)) & v5))
      return 0;
    if (v9 == v6 && v12 >> 8 == v10)
      break;
    v8 = (v8 + 1) & v5;
    v9 = *(WTF **)(qword_1ECE80D98 + 8 * v8);
    if (!v9)
      return 0;
  }
  {
    v13 = (WTF *)WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v13 = v42;
    WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf = (uint64_t)v42;
    v6 = *a2;
  }
  if (v6 != v13)
  {
    {
      v14 = (WTF *)WebCore::InitDataRegistry::cencName(void)::sinf;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v14 = v42;
      WebCore::InitDataRegistry::cencName(void)::sinf = (uint64_t)v42;
      v6 = *a2;
    }
    if (v6 != v14)
    {
      {
        v15 = (WTF *)WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd;
      }
      else
      {
        WTF::AtomStringImpl::add();
        v15 = v42;
        WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd = (uint64_t)v42;
        v6 = *a2;
      }
      if (v6 == v15)
        return 1;
      {
        v16 = (WTF *)WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts;
      }
      else
      {
        WTF::AtomStringImpl::add();
        v16 = v42;
        WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts = (uint64_t)v42;
        v6 = *a2;
      }
      return v6 == v16;
    }
    WebCore::InitDataRegistry::extractPsshBoxesFromCenc(a3, (uint64_t)&v42);
    if (v45)
    {
      v19 = v42;
      if (!v44)
      {
        v17 = 0;
        goto LABEL_70;
      }
      v28 = 8 * v44 - 8;
      while (1)
      {
        v29 = *(_QWORD *)v19;
        v30 = *(unsigned int *)(*(_QWORD *)v19 + 60);
        if ((_DWORD)v30)
        {
          v31 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(*(_QWORD *)v19 + 60));
          memcpy(v31, *(const void **)(v29 + 48), *(unsigned int *)(v29 + 60));
        }
        else
        {
          v31 = 0;
        }
        {
          v32 = dword_1EE2F8C8C;
        }
        else
        {
          v34 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
          v32 = 16;
          *v34 = xmmword_19689B1F0;
          WebCore::ISOFairPlayStreamingPsshBox::fairPlaySystemID(void)::systemID = (uint64_t)v34;
          unk_1EE2F8C88 = 0x1000000010;
        }
        if ((_DWORD)v30 == v32)
        {
          v17 = memcmp(v31, (const void *)WebCore::ISOFairPlayStreamingPsshBox::fairPlaySystemID(void)::systemID, v30) == 0;
          if (v31)
            goto LABEL_43;
        }
        else
        {
          v17 = 0;
          if (v31)
LABEL_43:
            WTF::fastFree((WTF *)v31, v18);
        }
        v19 = (WTF *)((char *)v19 + 8);
        if (v28)
          v33 = v17;
        else
          v33 = 1;
        v28 -= 8;
        if (v33 == 1)
        {
          if (v45)
          {
            v19 = v42;
            if (v44)
            {
              v39 = 8 * v44;
              do
              {
                v40 = *(_QWORD *)v19;
                *(_QWORD *)v19 = 0;
                if (v40)
                  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
                v19 = (WTF *)((char *)v19 + 8);
                v39 -= 8;
              }
              while (v39);
              v19 = v42;
            }
LABEL_70:
            if (v19)
            {
              v42 = 0;
              v43 = 0;
              goto LABEL_72;
            }
          }
          return v17;
        }
      }
    }
    return 0;
  }
  WebCore::extractSchemeAndKeyIdFromSinf((WTF::StringImpl *)&v42, a3);
  v19 = v42;
  v20 = v44;
  if (!v44)
  {
    v17 = 0;
    if (v42)
      goto LABEL_72;
    return v17;
  }
  v21 = (WTF *)((char *)v42 + 24 * v44);
  v23 = xmmword_19689B1E0;
  v24 = v42;
  while ((v22 & 1) != 0)
  {
    v25 = dword_1EE2EE45C;
    if (dword_1EE2EE45C)
    {
      v26 = (_OWORD *)WebCore::CDMPrivateFairPlayStreaming::validFairPlayStreamingSchemes(void)::validSchemes;
      goto LABEL_26;
    }
LABEL_28:
    v24 = (WTF *)((char *)v24 + 24);
    v22 = 1;
    if (v24 == v21)
    {
      v17 = 0;
      goto LABEL_53;
    }
  }
  v41 = v23;
  v26 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  v23 = v41;
  *v26 = v41;
  WebCore::CDMPrivateFairPlayStreaming::validFairPlayStreamingSchemes(void)::validSchemes = (uint64_t)v26;
  unk_1EE2EE458 = 0x400000004;
  v25 = 4;
LABEL_26:
  while (1)
  {
    v27 = *(_DWORD *)v26;
    v26 = (_OWORD *)((char *)v26 + 4);
    if (v27 == *(_DWORD *)v24)
      break;
    if (!--v25)
      goto LABEL_28;
  }
  v17 = 1;
LABEL_53:
  v36 = 24 * v20;
  v37 = (char *)v19 + 8;
  do
  {
    v38 = *(WTF **)v37;
    if (*(_QWORD *)v37)
    {
      *(_QWORD *)v37 = 0;
      *((_DWORD *)v37 + 2) = 0;
      WTF::fastFree(v38, v18);
    }
    v37 += 24;
    v36 -= 24;
  }
  while (v36);
  if (v19)
LABEL_72:
    WTF::fastFree(v19, v18);
  return v17;
}

uint64_t *WebCore::CDMPrivateFairPlayStreaming::sanitizeResponse@<X0>(const WebCore::SharedBuffer *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;

  WebCore::FragmentedSharedBuffer::makeContiguous(a1, &v7);
  v4 = v7;
  v7 = 0;
  *a2 = v4;
  return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v7, v5);
}

void WebCore::CDMPrivateFairPlayStreaming::sanitizeSessionId(const WTF::String *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 1;
}

uint64_t WebCore::CDMPrivateFairPlayStreaming::setLogIdentifier(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 24) = a2;
  return this;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(int a1, WTF::FileSystemImpl::MappedFileData *this)
{
  WTF::FileSystemImpl::MappedFileData::~MappedFileData(this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_9RetainPtrIPK8__CFDataEENS8_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSC_SH_SJ_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a2[1];
  a2[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t WTF::Vector<std::pair<WebCore::FourCC,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WebCore::FourCC,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<std::pair<WebCore::FourCC,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<std::pair<WebCore::FourCC,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 24 * v4;
        v9 = (_DWORD *)((char *)v3 + 16);
        do
        {
          *v7 = *(v9 - 4);
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          v10 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 1) = v10;
          LODWORD(v10) = *v9;
          *v9 = 0;
          v7[4] = v10;
          LODWORD(v10) = v9[1];
          v9[1] = 0;
          v7[5] = v10;
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          if (result)
          {
            *((_QWORD *)v9 - 1) = 0;
            *v9 = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 6;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v3));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v3 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              v18 = (WTF *)v10;
              v20 = v3;
              atomic_store(1u, v10);
              v15 = v10[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v15])(&v21, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v3 = v20;
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v19 = v3;
        WTF::fastFree(v13, a2);
        v3 = v19;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::AtomString>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;

  v4 = *a1;
  *a1 = 0;
  v5 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *a1;
  *a1 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v3 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              v18 = (WTF *)v10;
              v20 = v3;
              atomic_store(1u, v10);
              v15 = v10[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v15])(&v21, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v3 = v20;
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v19 = v3;
        WTF::fastFree(v13, a2);
        v3 = v19;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CDMFactory::platformRegisterFactories(WTF::Vector<WebCore::CDMFactory*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0 &&>>()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[3];

  {
    WebCore::InitDataRegistry::InitDataRegistry((WebCore::InitDataRegistry *)&WebCore::InitDataRegistry::shared(void)::registry);
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf = v14[0];
  }
  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E31F7600;
  v0[1] = WebCore::CDMPrivateFairPlayStreaming::sanitizeSinf;
  v12 = v0;
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E31F7628;
  v1[1] = WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsSinf;
  v13 = v1;
  WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::InitDataRegistry::InitDataTypeCallbacks>((uint64_t)&WebCore::InitDataRegistry::shared(void)::registry, (WTF::StringImpl *)&WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf, (uint64_t *)&v12, (uint64_t)v14);
  v2 = v13;
  v13 = 0;
  if (v2)
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  v3 = (uint64_t)v12;
  v12 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  {
    WebCore::InitDataRegistry::InitDataRegistry((WebCore::InitDataRegistry *)&WebCore::InitDataRegistry::shared(void)::registry);
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd = v14[0];
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E31F7600;
  v4[1] = WebCore::CDMPrivateFairPlayStreaming::sanitizeSkd;
  v12 = v4;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = off_1E31F7628;
  v5[1] = WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsSkd;
  v13 = v5;
  WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::InitDataRegistry::InitDataTypeCallbacks>((uint64_t)&WebCore::InitDataRegistry::shared(void)::registry, (WTF::StringImpl *)&WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd, (uint64_t *)&v12, (uint64_t)v14);
  v6 = v13;
  v13 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v7 = (uint64_t)v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  {
    WebCore::InitDataRegistry::InitDataRegistry((WebCore::InitDataRegistry *)&WebCore::InitDataRegistry::shared(void)::registry);
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts = v14[0];
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E31F7600;
  v8[1] = WebCore::CDMPrivateFairPlayStreaming::sanitizeMpts;
  v12 = v8;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E31F7628;
  v9[1] = WebCore::CDMPrivateFairPlayStreaming::extractKeyIDsMpts;
  v13 = v9;
  WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::AtomString const&,WebCore::InitDataRegistry::InitDataTypeCallbacks>((uint64_t)&WebCore::InitDataRegistry::shared(void)::registry, (WTF::StringImpl *)&WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts, (uint64_t *)&v12, (uint64_t)v14);
  v10 = v13;
  v13 = 0;
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> (*)(WebCore::SharedBuffer const&),WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::SharedBuffer const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> (*)(WebCore::SharedBuffer const&),std::optional<WTF::Vector<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WebCore::SharedBuffer const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint8_t buf[4];
  _BYTE v45[12];
  int v46;
  WTF::StringImpl *v47[3];

  v47[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0 || (result = (v8 + v9), __OFADD__(v8, v9)))
  {
    v43 = 0;
    goto LABEL_76;
  }
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &v43);
  if (!v43)
  {
LABEL_76:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v45 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v46 = 0;
              WTF::String::String((WTF::String *)v47, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v45[4];
              if (*(_QWORD *)&v45[4])
                **(_DWORD **)&v45[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v46;
              v30 = v47[0];
              if (v47[0])
                *(_DWORD *)v47[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v47[0];
              v47[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v45[4];
              *(_QWORD *)&v45[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946B311C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, unsigned int a17)
{
  WTF *v18;
  uint64_t v19;
  const void *v20;

  v18 = a15;
  if (a17)
  {
    v19 = 8 * a17;
    do
    {
      v20 = *(const void **)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
        CFRelease(v20);
      v18 = (WTF *)((char *)v18 + 8);
      v19 -= 8;
    }
    while (v19);
    v18 = a15;
  }
  if (v18)
    WTF::fastFree(v18, a2);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c122_ZTSKZ108__WebCoreFPSContentKeySessionDelegate_contentKeySession_didProvideContentKeyRequests_forInitializationData__E3__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

PAL *WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  PAL *result;
  uint64_t v3;
  int v4;
  BOOL v5;
  char v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  WebCoreFPSContentKeySessionDelegate *v12;
  const void *v13;

  result = (PAL *)*((_QWORD *)this + 6);
  if (result)
    return result;
  {
    if (PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded)
      goto LABEL_4;
    return 0;
  }
  result = (PAL *)PAL::init_AVFoundation_AVContentKeySystemFairPlayStreaming(0);
  PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded = (char)result;
  if (!(_DWORD)result)
    return 0;
LABEL_4:
  v3 = *((_QWORD *)this + 10);
  v4 = WebCore::s_sampleBufferContentKeySessionSupportEnabled;
  if (*((_BYTE *)this + 72))
    v5 = v3 == 0;
  else
    v5 = 1;
  v6 = !v5;
  v7 = (void *)PAL::getAVContentKeySessionClass[0](result);
  if (v4)
  {
    if ((v6 & 1) != 0)
      v8 = (const void *)objc_msgSend(v7, "contentKeySessionWithKeySystem:storageDirectoryAtURL:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming, v3);
    else
      v8 = (const void *)objc_msgSend(v7, "contentKeySessionWithKeySystem:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming);
  }
  else
  {
    if ((v6 & 1) != 0)
      v9 = v3;
    else
      v9 = 0;
    v8 = (const void *)objc_msgSend(v7, "contentKeySessionWithLegacyWebKitCompatibilityModeAndKeySystem:storageDirectoryAtURL:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming, v9);
  }
  v10 = v8;
  if (v8)
    CFRetain(v8);
  v11 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v10;
  if (v11)
  {
    CFRelease(v11);
    v10 = (const void *)*((_QWORD *)this + 6);
  }
  if (!v10)
    return 0;
  v12 = (WebCoreFPSContentKeySessionDelegate *)*((_QWORD *)this + 7);
  if (!v12)
  {
    v12 = -[WebCoreFPSContentKeySessionDelegate initWithParent:]([WebCoreFPSContentKeySessionDelegate alloc], "initWithParent:", (char *)this + 16);
    v13 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v12;
    if (v13)
    {
      CFRelease(v13);
      v12 = (WebCoreFPSContentKeySessionDelegate *)*((_QWORD *)this + 7);
    }
  }
  objc_msgSend(*((id *)this + 6), "setDelegate:queue:", v12, MEMORY[0x1E0C80D38]);
  return (PAL *)*((_QWORD *)this + 6);
}

uint64_t WebCore::initTypeForRequest(WebCore *this, AVContentKeyRequest *a2)
{
  uint64_t result;
  _DWORD *v5;
  WTF::AtomStringImpl *v6;
  const __CFString *v7;
  uint64_t v8;

  -[AVContentKeyRequest identifier](a2, "identifier");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (result = objc_msgSend(-[AVContentKeyRequest identifier](a2, "identifier"), "hasPrefix:", CFSTR("skd://")),
        (_DWORD)result))
  {
    {
      v5 = (_DWORD *)WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd;
    }
    else
    {
      result = WTF::AtomStringImpl::add();
      v5 = (_DWORD *)v8;
      WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd = v8;
    }
  }
  else
  {
    v6 = -[NSDictionary valueForKey:](-[AVContentKeyRequest options](a2, "options"), "valueForKey:", CFSTR("InitializationDataType"));
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) != 0)
    {
      result = WTF::AtomStringImpl::add(v6, v7);
      v5 = (_DWORD *)v8;
      goto LABEL_11;
    }
    {
      v5 = (_DWORD *)WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf;
    }
    else
    {
      result = WTF::AtomStringImpl::add();
      v5 = (_DWORD *)v8;
      WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf = v8;
    }
  }
  if (v5)
    *v5 += 2;
LABEL_11:
  *(_QWORD *)this = v5;
  return result;
}

uint64_t *WebCore::initializationDataForRequest(WebCore *this, AVContentKeyRequest *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *result;
  void *v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  if (a2)
  {
    WebCore::initTypeForRequest((WebCore *)&v10, a2);
    {
      v5 = WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v5 = v11;
      WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd = v11;
    }
    v6 = v10;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v4);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v6 == (WTF::StringImpl *)v5)
      WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)objc_msgSend(-[AVContentKeyRequest identifier](a2, "identifier"), "dataUsingEncoding:allowLossyConversion:", 4, 1), &v11);
    else
      WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)-[AVContentKeyRequest initializationData](a2, "initializationData"), &v11);
    v7 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)this = WebCore::SharedBuffer::SharedBuffer(v7, &v11);
    return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v11, v9);
  }
  else
  {
    result = (uint64_t *)WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)result = 1;
    result[1] = (uint64_t)(result + 3);
    result[2] = 1;
    result[6] = 0;
    *((_BYTE *)result + 40) = 1;
    *(_QWORD *)this = result;
  }
  return result;
}

void sub_1946B37D4(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)va, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::supportsPersistableState(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  PAL::getAVContentKeySessionClass[0](this);
  return objc_opt_respondsToSelector() & 1;
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::supportsMediaCapability(PAL *a1)
{
  void *v2;
  const __CFString *v3;
  uint64_t result;
  BOOL v5;

  v2 = (void *)PAL::getAVURLAssetClass[0](a1);
  if (*(_QWORD *)a1)
    v3 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v3 = &stru_1E3487BC0;
  result = objc_msgSend(v2, "isPlayableExtendedMIMEType:", v3);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)a1 + 17))
      v5 = *((_BYTE *)a1 + 16) == 0;
    else
      v5 = 0;
    return !v5;
  }
  return result;
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::initializeWithConfiguration(PAL *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  PAL *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BOOL4 inited;
  uint64_t v15;

  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_22;
  v7 = a1;
  if (*(_BYTE *)(a2 + 57))
  {
    v8 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *(unsigned __int8 **)(a2 + 64);
      while (v10[v9] != 1)
      {
        if (v8 == ++v9)
        {
          v11 = 0;
          while (v10[v11] != 2)
          {
            if (v8 == ++v11)
            {
LABEL_14:
              while (1)
              {
                v12 = *v10++;
                if (v12 == 2)
                  break;
                if (!--v8)
                  goto LABEL_18;
              }
              a1 = (PAL *)PAL::getAVPersistableContentKeyRequestClass[0](a1);
              if (!a1)
                goto LABEL_22;
              goto LABEL_18;
            }
          }
          goto LABEL_22;
        }
      }
      goto LABEL_22;
    }
  }
  else
  {
    if (!*((_QWORD *)a1 + 10))
      goto LABEL_22;
    v8 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v8)
    {
      v10 = *(unsigned __int8 **)(a2 + 64);
      goto LABEL_14;
    }
  }
LABEL_18:
  {
    inited = PAL::init_AVFoundation_AVContentKeySystemFairPlayStreaming(a1);
    PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded = inited;
    if (inited)
      goto LABEL_20;
LABEL_22:
    v13 = 0;
    goto LABEL_23;
  }
  if (!PAL::canLoad_AVFoundation_AVContentKeySystemFairPlayStreaming(void)::loaded)
    goto LABEL_22;
LABEL_20:
  *((_BYTE *)v7 + 72) = a4;
  v13 = 1;
LABEL_23:
  v15 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

void sub_1946B39B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::setServerCertificate(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  _QWORD v28[4];

  v6 = a1[16];
  v7 = a1[17];
  v28[0] = "CDMInstanceFairPlayStreamingAVFObjC";
  v28[1] = 36;
  v28[2] = "setServerCertificate";
  v28[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 3, (WTF::Logger::LogSiteIdentifier *)v28);
  }
  v9 = *a2;
  *a2 = 0;
  v10 = a1[8];
  a1[8] = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v15 = *(unsigned int *)(v10 + 20);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v10 + 8);
        v17 = v16 + 16 * v15;
        do
        {
          v18 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v25 = v10;
              v26 = v17;
              atomic_store(1u, v18);
              v27 = (WTF *)v18;
              v21 = v18[6];
              if ((_DWORD)v21 != -1)
                ((void (*)(_QWORD *, unsigned int *))off_1E31F7A98[v21])(v28, v18 + 2);
              *((_DWORD *)v27 + 6) = -1;
              WTF::fastFree(v27, a2);
              v10 = v25;
              v17 = v26;
            }
          }
          v16 += 16;
        }
        while (v16 != v17);
      }
      v22 = *(WTF **)(v10 + 8);
      if ((WTF *)(v10 + 24) != v22 && v22 != 0)
      {
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = 0;
        v24 = v10;
        WTF::fastFree(v22, a2);
        v10 = v24;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

void sub_1946B3B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::logger(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::logIdentifier(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 17);
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::setStorageDirectory(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, const WTF::String *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v7;
  const WTF::String *v8;
  uint64_t v9;
  const WTF::String *v10;
  uint64_t TemporaryDirectory;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  const WTF::String *v14;
  const WTF::String *v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  id v19;
  const __CFString *v20;
  uint64_t v21;
  const void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27[4];

  v4 = *((_QWORD *)this + 16);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  v27[0] = (WTF::StringImpl *)"CDMInstanceFairPlayStreamingAVFObjC";
  v27[1] = (WTF::StringImpl *)36;
  v27[2] = (WTF::StringImpl *)"setStorageDirectory";
  v27[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 3, (WTF::Logger::LogSiteIdentifier *)v27);
  }
  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    v7 = (const void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v7)
      CFRelease(v7);
    return;
  }
  WTF::FileSystemImpl::pathByAppendingComponent();
  v9 = WTF::FileSystemImpl::fileTypeFollowingSymlinks(a2, v8);
  if ((v9 & 0xFF00000000) == 0)
  {
    if ((WTF::FileSystemImpl::makeAllDirectories(a2, v10) & 1) != 0)
      goto LABEL_30;
    goto LABEL_34;
  }
  if ((_DWORD)v9 == 1)
    goto LABEL_30;
  TemporaryDirectory = WTF::FileSystemImpl::createTemporaryDirectory((WTF::FileSystemImpl *)CFSTR("MediaKeys"), (NSString *)v10);
  MEMORY[0x19AEA5508](&v26, TemporaryDirectory);
  if (!v26)
    goto LABEL_34;
  WTF::FileSystemImpl::pathFileName((WTF::FileSystemImpl *)v27, v12);
  WTF::FileSystemImpl::pathByAppendingComponent();
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v13);
    else
      *(_DWORD *)v24 -= 2;
  }
  if ((WTF::FileSystemImpl::moveFile(a2, (const WTF::String *)&v25, v14) & 1) != 0)
    v16 = WTF::FileSystemImpl::moveFile((WTF::FileSystemImpl *)&v26, a2, v15) ^ 1;
  else
    v16 = 1;
  v17 = v25;
  v25 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v26;
  v26 = 0;
  if (!v18)
    goto LABEL_29;
  if (*(_DWORD *)v18 != 2)
  {
    *(_DWORD *)v18 -= 2;
LABEL_29:
    if (!v16)
      goto LABEL_30;
    goto LABEL_34;
  }
  WTF::StringImpl::destroy(v18, v12);
  if (!v16)
  {
LABEL_30:
    v19 = objc_alloc(MEMORY[0x1E0C99E98]);
    if (v27[0])
      v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v20 = &stru_1E3487BC0;
    v21 = objc_msgSend(v19, "initFileURLWithPath:isDirectory:", v20, 0);
    v22 = (const void *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v21;
    if (v22)
      CFRelease(v22);
  }
LABEL_34:
  v23 = v27[0];
  v27[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v12);
    else
      *(_DWORD *)v23 -= 2;
  }
}

void sub_1946B3E34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCoreFPSContentKeySessionDelegate *WebCore::CDMInstanceFairPlayStreamingAVFObjC::createSession@<X0>(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  DefaultWeakPtrImpl *v5;
  WebCoreFPSContentKeySessionDelegate *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  v4 = WTF::fastMalloc((WTF *)0x120);
  ++*((_DWORD *)this + 2);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = &unk_1E31F78F0;
  v5 = (DefaultWeakPtrImpl *)(v4 + 16);
  *(_QWORD *)v4 = off_1E31F77F0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = &unk_1E31F7980;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = this;
  *(_BYTE *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  result = -[WebCoreFPSContentKeySessionDelegate initWithParent:]([WebCoreFPSContentKeySessionDelegate alloc], "initWithParent:", v4 + 16);
  *(_QWORD *)(v4 + 104) = result;
  *(_BYTE *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 193) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 128);
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *(_QWORD *)(v4 + 272) = v7;
  *(_QWORD *)(v4 + 280) = 0;
  v10 = *((unsigned int *)this + 25);
  if ((_DWORD)v10 != *((_DWORD *)this + 24))
  {
    v23 = *((_QWORD *)this + 11);
    result = *(WebCoreFPSContentKeySessionDelegate **)(v4 + 24);
    if (result)
      goto LABEL_43;
    result = (WebCoreFPSContentKeySessionDelegate *)WTF::fastCompactMalloc((WTF *)0x10);
    LODWORD(result->super.isa) = 1;
    result->_parent.m_impl.m_ptr = v5;
    v25 = *(unsigned int **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = result;
    if (!v25)
      goto LABEL_43;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v24);
    }
    result = *(WebCoreFPSContentKeySessionDelegate **)(v4 + 24);
    if (result)
    {
LABEL_43:
      do
        v28 = __ldaxr((unsigned int *)result);
      while (__stlxr(v28 + 1, (unsigned int *)result));
    }
    *(_QWORD *)(v23 + 8 * v10) = result;
    goto LABEL_39;
  }
  v11 = v10 + (v10 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v10 + 1)
    v13 = v10 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = (WTF *)*((_QWORD *)this + 11);
    v16 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)this + 24) = v13;
    *((_QWORD *)this + 11) = v16;
    if ((_DWORD)v10)
    {
      v17 = (unsigned int **)((char *)v14 + 8 * v10);
      v18 = (unsigned int **)v14;
      do
      {
        v19 = *v18;
        *v18 = 0;
        *(_QWORD *)v16 = v19;
        v20 = *v18;
        *v18 = 0;
        if (v20)
        {
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            atomic_store(1u, v20);
            WTF::fastFree((WTF *)v20, v15);
          }
        }
        v16 = (WTF *)((char *)v16 + 8);
        ++v18;
      }
      while (v18 != v17);
      v16 = (WTF *)*((_QWORD *)this + 11);
    }
    if (v14)
    {
      if (v16 == v14)
      {
        *((_QWORD *)this + 11) = 0;
        *((_DWORD *)this + 24) = 0;
      }
      WTF::fastFree(v14, v15);
      v16 = (WTF *)*((_QWORD *)this + 11);
    }
    v29 = *((unsigned int *)this + 25);
    result = *(WebCoreFPSContentKeySessionDelegate **)(v4 + 24);
    if (result)
      goto LABEL_44;
    result = (WebCoreFPSContentKeySessionDelegate *)WTF::fastCompactMalloc((WTF *)0x10);
    LODWORD(result->super.isa) = 1;
    result->_parent.m_impl.m_ptr = v5;
    v31 = *(unsigned int **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = result;
    if (!v31)
      goto LABEL_44;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v30);
    }
    result = *(WebCoreFPSContentKeySessionDelegate **)(v4 + 24);
    if (result)
    {
LABEL_44:
      do
        v34 = __ldaxr((unsigned int *)result);
      while (__stlxr(v34 + 1, (unsigned int *)result));
    }
    *((_QWORD *)v16 + v29) = result;
LABEL_39:
    ++*((_DWORD *)this + 25);
    *a2 = v4;
    return result;
  }
  __break(0xC471u);
  return result;
}

void sub_1946B4190(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::CDMInstanceFairPlayStreamingAVFObjC::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebCore::CDMInstanceFairPlayStreamingAVFObjC::clearClient(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *WebCore::CDMInstanceFairPlayStreamingAVFObjC::keySystem(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  uint64_t v2;

  if ((_MergedGlobals_94 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    qword_1ECE80DB8 = v2;
    _MergedGlobals_94 = 1;
  }
  return &qword_1ECE80DB8;
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  const void *v12;
  WTF *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v4 = (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(this, a2);
  if (v4)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest(v4, a2);
  }
  else
  {
    v5 = *((_QWORD *)this + 16);
    v6 = *((_QWORD *)this + 17);
    v13 = (WTF *)"CDMInstanceFairPlayStreamingAVFObjC";
    v14 = 36;
    v15 = "didProvideRequest";
    v16 = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v13, "- Unexpected request");
    if (a2)
      CFRetain(a2);
    v7 = (WTF *)WTF::fastMalloc((WTF *)8);
    LODWORD(v14) = 1;
    v13 = v7;
    *(_QWORD *)v7 = a2;
    if (a2)
      CFRetain(a2);
    HIDWORD(v14) = 1;
    WebCore::CDMInstanceFairPlayStreamingAVFObjC::handleUnexpectedRequests((uint64_t)this, (uint64_t)&v13);
    v9 = v13;
    if (HIDWORD(v14))
    {
      v10 = 8 * HIDWORD(v14);
      v11 = v13;
      do
      {
        v12 = *(const void **)v11;
        *(_QWORD *)v11 = 0;
        if (v12)
          CFRelease(v12);
        v11 = (WTF *)((char *)v11 + 8);
        v10 -= 8;
      }
      while (v10);
    }
    if (v9)
      WTF::fastFree(v9, v8);
    if (a2)
      CFRelease(a2);
  }
}

void sub_1946B4508(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11)
{
  const void *v11;
  WTF *v12;

  WTF::fastFree(v12, a2);
  CFRelease(v11);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  AVContentKeyRequest *v11;
  BOOL v12;
  uint64_t v14;
  WTF *v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v36;
  unsigned int v37;

  if (!*((_DWORD *)this + 25))
  {
LABEL_33:
    v22 = -[NSDictionary valueForKey:](-[AVContentKeyRequest options](a2, "options"), "valueForKey:", CFSTR("ContentKeyReportGroup"));
    if (!*((_DWORD *)this + 25))
      return 0;
    v24 = v22;
    v25 = 0;
    while (1)
    {
      v26 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v25);
      if (v26)
      {
        do
          v27 = __ldaxr((unsigned int *)v26);
        while (__stlxr(v27 + 1, (unsigned int *)v26));
        v28 = *(_QWORD *)(v26 + 8);
        if (v28)
        {
          v29 = *(id *)(v28 + 40);
          do
          {
            v30 = __ldaxr((unsigned int *)v26);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, (unsigned int *)v26));
          if (!v31)
          {
            atomic_store(1u, (unsigned int *)v26);
            WTF::fastFree((WTF *)v26, v23);
          }
          if (v29 == v24)
          {
            if (v25 < *((unsigned int *)this + 25))
            {
              v21 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v25);
              if (v21)
                goto LABEL_51;
              return 0;
            }
LABEL_55:
            __break(0xC471u);
            JUMPOUT(0x1946B47C8);
          }
        }
        else
        {
          do
          {
            v32 = __ldaxr((unsigned int *)v26);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, (unsigned int *)v26));
          if (!v33)
          {
            atomic_store(1u, (unsigned int *)v26);
            WTF::fastFree((WTF *)v26, v23);
          }
        }
      }
      if (++v25 >= *((unsigned int *)this + 25))
        return 0;
    }
  }
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v4);
    if (!v5)
      goto LABEL_27;
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
    v7 = *(_QWORD *)(v5 + 8);
    if (!v7)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v5);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v5));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v5);
        WTF::fastFree((WTF *)v5, a2);
      }
      goto LABEL_27;
    }
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyRequests((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)&v36, *(char **)(v7 + 176), *(_DWORD *)(v7 + 188));
    v8 = v36;
    if (!v37)
    {
      v12 = 0;
      if (!v36)
        goto LABEL_24;
LABEL_23:
      WTF::fastFree(v8, a2);
      goto LABEL_24;
    }
    v9 = v37 - 1;
    v10 = v36;
    do
    {
      v11 = *(AVContentKeyRequest **)v10;
      v10 = (WTF *)((char *)v10 + 8);
      v12 = v11 == a2;
    }
    while (v11 != a2 && v9-- != 0);
    v14 = 8 * v37;
    v15 = v36;
    do
    {
      v16 = *(const void **)v15;
      *(_QWORD *)v15 = 0;
      if (v16)
        CFRelease(v16);
      v15 = (WTF *)((char *)v15 + 8);
      v14 -= 8;
    }
    while (v14);
    if (v8)
      goto LABEL_23;
    do
    {
LABEL_24:
      v19 = __ldaxr((unsigned int *)v5);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v5));
    if (v20)
    {
      if (v12)
        break;
      goto LABEL_27;
    }
    atomic_store(1u, (unsigned int *)v5);
    WTF::fastFree((WTF *)v5, a2);
    if (v12)
      break;
LABEL_27:
    if (++v4 >= *((unsigned int *)this + 25))
      goto LABEL_33;
  }
  if (v4 >= *((unsigned int *)this + 25))
    goto LABEL_55;
  v21 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v4);
  if (!v21)
    return 0;
LABEL_51:
  v34 = *(_QWORD *)(v21 + 8);
  if (v34)
    return v34 - 16;
  else
    return 0;
}

void sub_1946B47D4(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF *v24;
  uint64_t v25;
  const void *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF *v36;
  WebCoreSharedBufferData *v37;
  void *v38;
  void *v39;
  CFTypeRef v40;
  uint64_t v41;
  void *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  CFTypeRef v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  uint64_t v62;
  const void *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WebCore::SharedBuffer *v66[5];
  _QWORD v67[4];
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v68;
  WTF *v69;
  CFTypeRef cf;
  WTF *v71;
  int v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  WTF *v75;
  uint64_t v76;
  WebCoreSharedBufferData *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  WTF::StringImpl *v81;

  WebCore::initTypeForRequest((WebCore *)&v81, a2);
  v5 = v81;
  if (v81 == (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8])
  {
    v6 = *((_QWORD *)this + 34);
    v7 = *((_QWORD *)this + 35);
    v77 = (WebCoreSharedBufferData *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
    v78 = 43;
    v79 = "didProvideRequest";
    v80 = v7;
    if (*(_BYTE *)(v6 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v77, "- request has empty initDataType");
  }
  else
  {
    if (v81)
      *(_DWORD *)v81 += 2;
    v74 = v5;
    if (a2)
      CFRetain(a2);
    v76 = 1;
    v75 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v75 = a2;
    if (a2)
    {
      CFRetain(a2);
      ++HIDWORD(v76);
      CFRelease(a2);
    }
    else
    {
      HIDWORD(v76) = 1;
    }
    if (*((_BYTE *)this + 96))
    {
      v8 = *((unsigned int *)this + 47);
      if ((_DWORD)v8 == *((_DWORD *)this + 46))
      {
        v9 = WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 176, v8 + 1, (unint64_t)&v74);
        v10 = *((_QWORD *)this + 22) + 24 * *((unsigned int *)this + 47);
        v11 = *(_QWORD *)v9;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = v11;
        v12 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v9 + 1) = 0;
        *(_QWORD *)(v10 + 8) = v12;
        LODWORD(v12) = *((_DWORD *)v9 + 4);
        *((_DWORD *)v9 + 4) = 0;
        *(_DWORD *)(v10 + 16) = v12;
        v13 = *((_DWORD *)v9 + 5);
        *((_DWORD *)v9 + 5) = 0;
      }
      else
      {
        v10 = *((_QWORD *)this + 22) + 24 * v8;
        v19 = v74;
        v74 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
        *(_QWORD *)v10 = v19;
        v20 = v75;
        v75 = 0;
        *(_QWORD *)(v10 + 8) = v20;
        LODWORD(v20) = v76;
        LODWORD(v76) = 0;
        *(_DWORD *)(v10 + 16) = (_DWORD)v20;
        v13 = HIDWORD(v76);
        HIDWORD(v76) = 0;
      }
      *(_DWORD *)(v10 + 20) = v13;
      ++*((_DWORD *)this + 47);
    }
    else
    {
      v14 = *((_QWORD *)this + 34);
      v15 = *((_QWORD *)this + 35);
      v77 = (WebCoreSharedBufferData *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
      v78 = 43;
      v79 = "didProvideRequest";
      v80 = v15;
      if (*(_BYTE *)(v14 + 12)
        && (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v77), *((_BYTE *)this + 96)))
      {
        v17 = v74;
        if (v74)
          *(_DWORD *)v74 += 2;
        v18 = (WTF::StringImpl *)*((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v17;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v16);
          else
            *(_DWORD *)v18 -= 2;
        }
        WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)this + 10, (unsigned int *)&v75);
      }
      else
      {
        v21 = v74;
        if (v74)
          *(_DWORD *)v74 += 2;
        *((_QWORD *)this + 10) = 0;
        *((_QWORD *)this + 9) = v21;
        v22 = HIDWORD(v76);
        *((_QWORD *)this + 11) = 0;
        *((_DWORD *)this + 23) = v22;
        if ((_DWORD)v22)
        {
          if (v22 >> 29)
          {
            __break(0xC471u);
            return;
          }
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v22));
          *((_DWORD *)this + 22) = v22;
          *((_QWORD *)this + 10) = v23;
          if (HIDWORD(v76))
          {
            v24 = v75;
            v25 = 8 * HIDWORD(v76);
            do
            {
              v26 = *(const void **)v24;
              *v23 = *(_QWORD *)v24;
              if (v26)
                CFRetain(v26);
              ++v23;
              v24 = (WTF *)((char *)v24 + 8);
              v25 -= 8;
            }
            while (v25);
          }
        }
        *((_BYTE *)this + 96) = 1;
      }
      v27 = (_QWORD *)((char *)this + 192);
      v28 = *((unsigned int *)this + 51);
      if ((_DWORD)v28 == *((_DWORD *)this + 50))
      {
        v29 = WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)&v74);
        v30 = *((_QWORD *)this + 24) + 24 * *((unsigned int *)this + 51);
        v31 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        *(_QWORD *)v30 = v31;
        v32 = *((_QWORD *)v29 + 1);
        *((_QWORD *)v29 + 1) = 0;
        *(_QWORD *)(v30 + 8) = v32;
        LODWORD(v32) = *((_DWORD *)v29 + 4);
        *((_DWORD *)v29 + 4) = 0;
        *(_DWORD *)(v30 + 16) = v32;
        v33 = *((_DWORD *)v29 + 5);
        *((_DWORD *)v29 + 5) = 0;
      }
      else
      {
        v30 = *v27 + 24 * v28;
        v34 = v74;
        v74 = 0;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        *(_QWORD *)v30 = v34;
        v35 = v75;
        v75 = 0;
        *(_QWORD *)(v30 + 8) = v35;
        LODWORD(v35) = v76;
        LODWORD(v76) = 0;
        *(_DWORD *)(v30 + 16) = (_DWORD)v35;
        v33 = HIDWORD(v76);
        HIDWORD(v76) = 0;
      }
      *(_DWORD *)(v30 + 20) = v33;
      ++*((_DWORD *)this + 51);
      v36 = *(WTF **)(*((_QWORD *)this + 6) + 64);
      if (v36)
      {
        WebCore::FragmentedSharedBuffer::makeContiguous(v36, v66);
        WebCore::SharedBuffer::createNSData(v66[0], &v77);
        v37 = v77;
        v77 = 0;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v66, v38);
      }
      else
      {
        v37 = 0;
      }
      WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest((WebCore::CDMPrivateFairPlayStreaming *)a2, (uint64_t)&v71);
      if (v73)
      {
        WebCore::FragmentedSharedBuffer::makeContiguous(*(WTF **)v71, &v77);
        WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)v77, (WebCoreSharedBufferData **)&cf);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v77, v39);
        v40 = cf;
        v67[0] = MEMORY[0x1E0C809B0];
        v67[1] = 3321888768;
        v67[2] = ___ZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC17didProvideRequestEP19AVContentKeyRequest_block_invoke;
        v67[3] = &__block_descriptor_48_e8_32c106_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC17didProvideRequestEP19AVContentKeyRequestE3__0_e28_v24__0__NSData_8__NSError_16l;
        v41 = *((_QWORD *)this + 3);
        if (v41)
          goto LABEL_92;
        v41 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v41 = 1;
        *(_QWORD *)(v41 + 8) = (char *)this + 16;
        v43 = (unsigned int *)*((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v41;
        if (!v43)
          goto LABEL_92;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          WTF::fastFree((WTF *)v43, v42);
        }
        v41 = *((_QWORD *)this + 3);
        if (v41)
        {
LABEL_92:
          do
            v46 = __ldaxr((unsigned int *)v41);
          while (__stlxr(v46 + 1, (unsigned int *)v41));
          v68 = this;
          do
            v47 = __ldaxr((unsigned int *)v41);
          while (__stlxr(v47 + 1, (unsigned int *)v41));
          v48 = 0;
        }
        else
        {
          v68 = this;
          v48 = 1;
        }
        v69 = (WTF *)v41;
        -[AVContentKeyRequest makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:](a2, "makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:", v37, v40, 0, v67);
        if ((v48 & 1) == 0)
        {
          do
          {
            v49 = __ldaxr((unsigned int *)v41);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, (unsigned int *)v41));
          if (!v50)
          {
            atomic_store(1u, (unsigned int *)v41);
            WTF::fastFree((WTF *)v41, v4);
          }
        }
        v51 = (unsigned int *)v69;
        v69 = 0;
        if (v51)
        {
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            atomic_store(1u, v51);
            WTF::fastFree((WTF *)v51, v4);
          }
        }
        v54 = cf;
        cf = 0;
        if (v54)
          CFRelease(v54);
      }
      else if (*((_QWORD *)this + 30))
      {
        v55 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v55 = 1;
        *(_QWORD *)(v55 + 8) = v55 + 24;
        *(_QWORD *)(v55 + 16) = 1;
        *(_QWORD *)(v55 + 48) = 0;
        *(_BYTE *)(v55 + 40) = 1;
        v77 = (WebCoreSharedBufferData *)v55;
        v56 = *((_QWORD *)this + 30);
        *((_QWORD *)this + 30) = 0;
        (*(void (**)(uint64_t, WebCoreSharedBufferData **, char *, _QWORD, _QWORD))(*(_QWORD *)v56 + 16))(v56, &v77, (char *)this + 136, 0, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v77, v57);
      }
      if (v73)
      {
        v58 = (uint64_t *)v71;
        v59 = 8 * v73;
        do
        {
          v58 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v58, v4)+ 1;
          v59 -= 8;
        }
        while (v59);
      }
      v60 = v71;
      if (v71)
      {
        v71 = 0;
        v72 = 0;
        WTF::fastFree(v60, v4);
      }
      if (v37)
        CFRelease(v37);
    }
    if (HIDWORD(v76))
    {
      v61 = v75;
      v62 = 8 * HIDWORD(v76);
      do
      {
        v63 = *(const void **)v61;
        *(_QWORD *)v61 = 0;
        if (v63)
          CFRelease(v63);
        v61 = (WTF *)((char *)v61 + 8);
        v62 -= 8;
      }
      while (v62);
    }
    v64 = v75;
    if (v75)
    {
      v75 = 0;
      LODWORD(v76) = 0;
      WTF::fastFree(v64, v4);
    }
    v65 = v74;
    v74 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v4);
      else
        *(_DWORD *)v65 -= 2;
    }
    v5 = v81;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v5 -= 2;
  }
}

void sub_1946B4EA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, CFTypeRef cf,WTF *a21,int a22,unsigned int a23,WTF::StringImpl *a24,const void **a25,int a26,unsigned int a27)
{
  _QWORD *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  WTF *v41;
  CFTypeRef v42;
  uint64_t *v43;
  uint64_t v44;
  WTF *v45;
  const void **v46;
  uint64_t v47;
  const void *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  _DWORD *v51;

  if ((_DWORD)a2 == 1)
  {
    v33 = objc_begin_catch(exception_object);
    v35 = v27[34];
    v34 = v27[35];
    *(_QWORD *)(v31 - 120) = v29;
    *(_QWORD *)(v31 - 112) = 43;
    *(_QWORD *)(v31 - 104) = v30;
    *(_QWORD *)(v31 - 96) = v34;
    a9 = objc_msgSend(v33, "name");
    a12 = objc_msgSend(v33, "reason");
    if (*(_BYTE *)(v35 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [110],NSString *,char [12],NSString *>((WTF::Logger::LogSiteIdentifier *)(v31 - 120), (id *)&a9, (id *)&a12);
    v36 = v27[31];
    if (v36)
    {
      *(_BYTE *)(v31 - 120) = 0;
      *(_BYTE *)(v31 - 104) = 0;
      LOBYTE(a12) = 0;
      a13 = 0;
      LOBYTE(a9) = 0;
      a11 = 0;
      v27[31] = 0;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)v36 + 16))(v36, 0, v31 - 120, &a12, &a9, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      if (a11)
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a10, v37);
      if (*(_BYTE *)(v31 - 104))
      {
        v38 = *(unsigned int *)(v31 - 108);
        if ((_DWORD)v38)
        {
          v39 = *(uint64_t **)(v31 - 120);
          v40 = 16 * v38;
          do
          {
            v39 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v39, v37)+ 2;
            v40 -= 16;
          }
          while (v40);
        }
        v41 = *(WTF **)(v31 - 120);
        if (v41)
        {
          *(_QWORD *)(v31 - 120) = 0;
          *(_DWORD *)(v31 - 112) = 0;
          WTF::fastFree(v41, v37);
        }
      }
    }
    objc_end_catch();
    JUMPOUT(0x1946B4CE0);
  }
  v42 = cf;
  cf = 0;
  if (v42)
    CFRelease(v42);
  if (a23)
  {
    v43 = (uint64_t *)a21;
    v44 = 8 * a23;
    do
    {
      v43 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v43, a2)+ 1;
      v44 -= 8;
    }
    while (v44);
  }
  v45 = a21;
  if (a21)
  {
    a21 = 0;
    a22 = 0;
    WTF::fastFree(v45, a2);
  }
  if (v28)
    CFRelease(v28);
  if (a27)
  {
    v46 = a25;
    v47 = 8 * a27;
    do
    {
      v48 = *v46;
      *v46 = 0;
      if (v48)
        CFRelease(v48);
      ++v46;
      v47 -= 8;
    }
    while (v47);
  }
  v49 = (WTF *)a25;
  if (a25)
  {
    a25 = 0;
    a26 = 0;
    WTF::fastFree(v49, a2);
  }
  v50 = a24;
  a24 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = *(_DWORD **)(v31 - 88);
  if (v51)
  {
    if (*v51 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)(v31 - 88), (WTF::StringImpl *)a2);
    else
      *v51 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::handleUnexpectedRequests(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  int v6;
  AVContentKeyRequest *v7;
  const void *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  AVContentKeyRequest **v15;
  AVContentKeyRequest *v16;
  AVContentKeyRequest **v17;
  int v18;
  AVContentKeyRequest *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v5 = (uint64_t *)(a1 + 104);
    do
    {
      v6 = v2 - 1;
      v7 = *(AVContentKeyRequest **)(*(_QWORD *)a2 + 8 * (v2 - 1));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * (v2 - 1)) = 0;
      v8 = *(const void **)(*(_QWORD *)a2 + 8 * (v2 - 1));
      *(_QWORD *)(*(_QWORD *)a2 + 8 * (v2 - 1)) = 0;
      if (v8)
        CFRelease(v8);
      *(_DWORD *)(a2 + 12) = v6;
      v9 = *v5;
      if (*v5
        || (WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<AVContentKeyRequest>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(v5, 8u), (v9 = *v5) != 0))
      {
        v10 = *(_DWORD *)(v9 - 8);
      }
      else
      {
        v10 = 0;
      }
      v11 = ((unint64_t)v7 + ~((_QWORD)v7 << 32)) ^ (((unint64_t)v7 + ~((_QWORD)v7 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = (AVContentKeyRequest **)(v9 + 8 * v14);
      v16 = *v15;
      if (*v15)
      {
        v17 = 0;
        v18 = 1;
        while (v16 != v7)
        {
          if (v16 == (AVContentKeyRequest *)-1)
            v17 = v15;
          v14 = (v14 + v18) & v10;
          v15 = (AVContentKeyRequest **)(v9 + 8 * v14);
          v16 = *v15;
          ++v18;
          if (!*v15)
          {
            if (v17)
            {
              *v17 = 0;
              --*(_DWORD *)(*v5 - 16);
              v15 = v17;
            }
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        if (v7)
        {
          CFRetain(v7);
          v19 = *v15;
          *v15 = v7;
          if (v19)
            CFRelease(v19);
        }
        else
        {
          *v15 = 0;
        }
        v20 = *v5;
        if (*v5)
          v21 = *(_DWORD *)(v20 - 12) + 1;
        else
          v21 = 1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v5;
        if (*v5)
          v23 = *(_DWORD *)(v22 - 12);
        else
          v23 = 0;
        v24 = (*(_DWORD *)(v22 - 16) + v23);
        v25 = *(unsigned int *)(v22 - 4);
        if (v25 > 0x400)
        {
          if (v25 > 2 * v24)
            goto LABEL_33;
LABEL_29:
          v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_32:
          WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<AVContentKeyRequest>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(v5, v26);
          goto LABEL_33;
        }
        if (3 * v25 <= 4 * v24)
        {
          if ((_DWORD)v25)
            goto LABEL_29;
          v26 = 8;
          goto LABEL_32;
        }
      }
LABEL_33:
      v27 = *(_QWORD *)(a1 + 40);
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
        {
          WebCore::initTypeForRequest((WebCore *)&v33, v7);
          WebCore::initializationDataForRequest((WebCore *)&v32, v7);
          (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v28 + 16))(v28, &v33, &v32);
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v32, v29);
          v31 = v33;
          v33 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::destroy(v31, v30);
              if (!v7)
                goto LABEL_40;
LABEL_39:
              CFRelease(v7);
              goto LABEL_40;
            }
            *(_DWORD *)v31 -= 2;
          }
        }
      }
      if (v7)
        goto LABEL_39;
LABEL_40:
      v2 = *(unsigned int *)(a2 + 12);
    }
    while ((_DWORD)v2);
  }
}

void sub_1946B54B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  v13 = a10;
  a10 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRequests(WebCore::CDMInstanceFairPlayStreamingAVFObjC *a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_DWORD *)(a2 + 12))
  {
    v4 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(a1, **(AVContentKeyRequest ***)a2);
    if (v4)
      WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(v4, (AVContentKeyRequest ***)a2);
    else
      WebCore::CDMInstanceFairPlayStreamingAVFObjC::handleUnexpectedRequests((uint64_t)a1, a2);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(uint64_t a1, AVContentKeyRequest ***a2)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  AVContentKeyRequest **v7;
  AVContentKeyRequest *v8;
  _QWORD *v9;
  AVContentKeyRequest **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  AVContentKeyRequest **v14;
  AVContentKeyRequest *v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  const void *v28;
  WTF *v29;
  WTF::StringImpl *v30;
  AVContentKeyRequest **v31;
  AVContentKeyRequest **v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  _QWORD *v45;
  WTF *v46;
  uint64_t v47;
  const void *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  WTF *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  CFTypeRef *v70;
  CFTypeRef *v71;
  WebCore::CDMPrivateFairPlayStreaming *v72;
  uint64_t v73;
  void *v74;
  CFTypeRef v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  void *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  WTF *v83;
  unsigned int v84;
  unsigned int v85;
  CFTypeRef v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int **v93;
  WTF *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  WTF *v99;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  WTF *v116;
  WTF *v118;
  WTF *v120;
  uint64_t v121;
  const void *v122;
  WTF *v123;
  WTF::StringImpl *v124;
  WTF *v125;
  WTF::StringImpl *v126;
  _QWORD v127[4];
  WTF *v128;
  uint64_t v129;
  WebCore::SharedBuffer *v130;
  CFTypeRef cf;
  WTF::StringImpl *v132;
  WTF *v133;
  const char *v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF *v137;
  AVContentKeyRequest **v138;
  WTF::StringImpl *v139;

  if (!*((_DWORD *)a2 + 3))
    return;
  WebCore::initTypeForRequest((WebCore *)&v139, **a2);
  {
    v5 = (WTF::StringImpl *)WebCore::InitDataRegistry::cencName(void)::sinf;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v5 = v132;
    WebCore::InitDataRegistry::cencName(void)::sinf = (uint64_t)v132;
  }
  v6 = v139;
  if (v139 != v5)
  {
    if (!*((_DWORD *)a2 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1946B5F7CLL);
    }
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)a1, **a2);
    v7 = *a2;
    v8 = **a2;
    **a2 = 0;
    if (v8)
      CFRelease(v8);
    v9 = v7 + 1;
    v10 = *a2;
    v11 = *((unsigned int *)a2 + 3);
    v12 = (uint64_t)&(*a2)[v11];
    if (v7 + 1 != (AVContentKeyRequest **)v12)
    {
      do
      {
        *(v9 - 1) = *v9;
        *v9++ = 0;
      }
      while (v9 != (_QWORD *)v12);
      v10 = *a2;
    }
    v13 = v11 - 1;
    *((_DWORD *)a2 + 3) = v13;
    if (v13)
    {
      v14 = &v10[v13];
      while (1)
      {
        if (v6)
          *(_DWORD *)v6 += 2;
        v132 = v6;
        v15 = *v10;
        *v10 = 0;
        v133 = 0;
        v134 = 0;
        v16 = (WTF *)WTF::fastMalloc((WTF *)8);
        LODWORD(v134) = 1;
        v133 = v16;
        v17 = HIDWORD(v134);
        *((_QWORD *)v16 + HIDWORD(v134)) = v15;
        if (v15)
        {
          CFRetain(v15);
          v17 = HIDWORD(v134);
        }
        HIDWORD(v134) = v17 + 1;
        v18 = *(unsigned int *)(a1 + 188);
        if ((_DWORD)v18 == *(_DWORD *)(a1 + 184))
        {
          v19 = WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 176, v18 + 1, (unint64_t)&v132);
          v20 = *(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(a1 + 188);
          v21 = *(_QWORD *)v19;
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)v20 = v21;
          v22 = *((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          *(_QWORD *)(v20 + 8) = v22;
          LODWORD(v22) = *((_DWORD *)v19 + 4);
          *((_DWORD *)v19 + 4) = 0;
          *(_DWORD *)(v20 + 16) = v22;
          v23 = *((_DWORD *)v19 + 5);
          *((_DWORD *)v19 + 5) = 0;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 176) + 24 * v18;
          v24 = v132;
          v132 = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)v20 = v24;
          v25 = v133;
          v133 = 0;
          *(_QWORD *)(v20 + 8) = v25;
          LODWORD(v25) = (_DWORD)v134;
          LODWORD(v134) = 0;
          *(_DWORD *)(v20 + 16) = (_DWORD)v25;
          v23 = HIDWORD(v134);
          HIDWORD(v134) = 0;
        }
        *(_DWORD *)(v20 + 20) = v23;
        ++*(_DWORD *)(a1 + 188);
        if (HIDWORD(v134))
        {
          v26 = v133;
          v27 = 8 * HIDWORD(v134);
          do
          {
            v28 = *(const void **)v26;
            *(_QWORD *)v26 = 0;
            if (v28)
              CFRelease(v28);
            v26 = (WTF *)((char *)v26 + 8);
            v27 -= 8;
          }
          while (v27);
        }
        v29 = v133;
        if (v133)
        {
          v133 = 0;
          LODWORD(v134) = 0;
          WTF::fastFree(v29, v4);
        }
        v30 = v132;
        v132 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v4);
            if (!v15)
              goto LABEL_32;
LABEL_31:
            CFRelease(v15);
            goto LABEL_32;
          }
          *(_DWORD *)v30 -= 2;
        }
        if (v15)
          goto LABEL_31;
LABEL_32:
        if (++v10 == v14)
          goto LABEL_176;
      }
    }
    goto LABEL_176;
  }
  if (v5)
    *(_DWORD *)v5 += 2;
  v31 = *a2;
  v136 = v5;
  v137 = (WTF *)v31;
  v32 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v138 = v32;
  if (!*(_BYTE *)(a1 + 96))
  {
    v38 = *(_QWORD *)(a1 + 272);
    v39 = *(_QWORD *)(a1 + 280);
    v132 = (WTF::StringImpl *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
    v133 = (WTF *)43;
    v134 = "didProvideRequests";
    v135 = v39;
    if (*(_BYTE *)(v38 + 12)
      && (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v132), v5 = v136, *(_BYTE *)(a1 + 96)))
    {
      if (v136)
        *(_DWORD *)v136 += 2;
      v41 = *(WTF::StringImpl **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v5;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v40);
        else
          *(_DWORD *)v41 -= 2;
      }
      WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 80), (unsigned int *)&v137);
    }
    else
    {
      if (v5)
        *(_DWORD *)v5 += 2;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 72) = v5;
      v44 = HIDWORD(v138);
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 92) = v44;
      if ((_DWORD)v44)
      {
        if (v44 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1946B5F84);
        }
        v45 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v44));
        *(_DWORD *)(a1 + 88) = v44;
        *(_QWORD *)(a1 + 80) = v45;
        if (HIDWORD(v138))
        {
          v46 = v137;
          v47 = 8 * HIDWORD(v138);
          do
          {
            v48 = *(const void **)v46;
            *v45 = *(_QWORD *)v46;
            if (v48)
              CFRetain(v48);
            ++v45;
            v46 = (WTF *)((char *)v46 + 8);
            v47 -= 8;
          }
          while (v47);
        }
      }
      *(_BYTE *)(a1 + 96) = 1;
    }
    v49 = (_QWORD *)(a1 + 192);
    v50 = *(unsigned int *)(a1 + 204);
    if ((_DWORD)v50 == *(_DWORD *)(a1 + 200))
    {
      v51 = WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v136);
      v52 = *(_QWORD *)(a1 + 192) + 24 * *(unsigned int *)(a1 + 204);
      v53 = *(_QWORD *)v51;
      *(_QWORD *)v51 = 0;
      *(_QWORD *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 16) = 0;
      *(_QWORD *)v52 = v53;
      v54 = *((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = 0;
      *(_QWORD *)(v52 + 8) = v54;
      LODWORD(v54) = *((_DWORD *)v51 + 4);
      *((_DWORD *)v51 + 4) = 0;
      *(_DWORD *)(v52 + 16) = v54;
      v55 = *((_DWORD *)v51 + 5);
      *((_DWORD *)v51 + 5) = 0;
    }
    else
    {
      v52 = *v49 + 24 * v50;
      v56 = v136;
      v136 = 0;
      *(_QWORD *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 16) = 0;
      *(_QWORD *)v52 = v56;
      v57 = v137;
      v137 = 0;
      *(_QWORD *)(v52 + 8) = v57;
      LODWORD(v57) = (_DWORD)v138;
      LODWORD(v138) = 0;
      *(_DWORD *)(v52 + 16) = (_DWORD)v57;
      v55 = HIDWORD(v138);
      HIDWORD(v138) = 0;
    }
    *(_DWORD *)(v52 + 20) = v55;
    ++*(_DWORD *)(a1 + 204);
    v58 = *(WTF **)(*(_QWORD *)(a1 + 48) + 64);
    if (v58)
    {
      WebCore::FragmentedSharedBuffer::makeContiguous(v58, &cf);
      WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)cf, (WebCoreSharedBufferData **)&v132);
      v59 = v132;
      v132 = 0;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&cf, v60);
    }
    else
    {
      v59 = 0;
    }
    v61 = *(_QWORD *)(a1 + 24);
    v126 = v59;
    if (v61)
      goto LABEL_187;
    v61 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v61 = 1;
    *(_QWORD *)(v61 + 8) = a1 + 16;
    v63 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v61;
    if (!v63)
      goto LABEL_187;
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      WTF::fastFree((WTF *)v63, v62);
    }
    v61 = *(_QWORD *)(a1 + 24);
    if (v61)
    {
LABEL_187:
      do
        v66 = __ldaxr((unsigned int *)v61);
      while (__stlxr(v66 + 1, (unsigned int *)v61));
    }
    v67 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v67 = &off_1E31F7B90;
    v67[1] = a1;
    v67[2] = v61;
    v68 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v68 = 1;
    *(_QWORD *)(v68 + 16) = 0;
    *(_QWORD *)(v68 + 24) = 0;
    *(_QWORD *)(v68 + 8) = v67;
    if (*(_BYTE *)(a1 + 96))
    {
      v69 = *(unsigned int *)(a1 + 92);
      if (!(_DWORD)v69)
      {
LABEL_163:
        WTF::ThreadSafeRefCounted<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator,(WTF::DestructionThread)0>::deref(v68);
        if (v59)
          CFRelease(v59);
        goto LABEL_165;
      }
      v70 = *(CFTypeRef **)(a1 + 80);
      v71 = &v70[v69];
      while (1)
      {
        v72 = (WebCore::CDMPrivateFairPlayStreaming *)*v70;
        if (*v70)
          CFRetain(*v70);
        WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest(v72, (uint64_t)&v132);
        if (!HIDWORD(v133))
          break;
        v73 = *(_QWORD *)v132;
        *(_QWORD *)v132 = 0;
        WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v73, &v130);
        WebCore::SharedBuffer::createNSData(v130, (WebCoreSharedBufferData **)&cf);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v130, v74);
        v75 = cf;
        v127[0] = MEMORY[0x1E0C809B0];
        v127[1] = 3321888768;
        v127[2] = ___ZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC18didProvideRequestsEON3WTF6VectorINS1_9RetainPtrI19AVContentKeyRequestEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE_block_invoke;
        v127[3] = &__block_descriptor_48_e8_32c187_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC18didProvideRequestsEON3WTF6VectorINS1_9RetainPtrI19AVContentKeyRequestEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEE3__1_e28_v24__0__NSData_8__NSError_16l;
        do
          v76 = __ldaxr((unsigned int *)v68);
        while (__stlxr(v76 + 1, (unsigned int *)v68));
        if (v73)
        {
          do
            v77 = __ldaxr((unsigned int *)v73);
          while (__stlxr(v77 + 1, (unsigned int *)v73));
        }
        v128 = (WTF *)v73;
        do
          v78 = __ldaxr((unsigned int *)v68);
        while (__stlxr(v78 + 1, (unsigned int *)v68));
        v129 = v68;
        -[WebCore::CDMPrivateFairPlayStreaming makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:](v72, "makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:", v59, v75, 0, v127);
        WTF::ThreadSafeRefCounted<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator,(WTF::DestructionThread)0>::deref(v68);
        if (v73)
        {
          do
          {
            v80 = __ldaxr((unsigned int *)v73);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, (unsigned int *)v73));
          if (!v81)
          {
            atomic_store(1u, (unsigned int *)v73);
            v102 = *(unsigned int *)(v73 + 20);
            if ((_DWORD)v102)
            {
              v103 = *(_QWORD *)(v73 + 8);
              v104 = v103 + 16 * v102;
              do
              {
                v105 = *(unsigned int **)(v103 + 8);
                *(_QWORD *)(v103 + 8) = 0;
                if (v105)
                {
                  do
                  {
                    v106 = __ldaxr(v105);
                    v107 = v106 - 1;
                  }
                  while (__stlxr(v107, v105));
                  if (!v107)
                  {
                    atomic_store(1u, v105);
                    v108 = v105[6];
                    if ((_DWORD)v108 != -1)
                      ((void (*)(WebCore::SharedBuffer **, unsigned int *))off_1E31F7A98[v108])(&v130, v105 + 2);
                    v105[6] = -1;
                    WTF::fastFree((WTF *)v105, v79);
                  }
                }
                v103 += 16;
              }
              while (v103 != v104);
            }
            v116 = *(WTF **)(v73 + 8);
            if ((WTF *)(v73 + 24) != v116 && v116 != 0)
            {
              *(_QWORD *)(v73 + 8) = 0;
              *(_DWORD *)(v73 + 16) = 0;
              WTF::fastFree(v116, v79);
            }
            WTF::fastFree((WTF *)v73, v79);
          }
        }
        v82 = v129;
        v129 = 0;
        if (v82)
          WTF::ThreadSafeRefCounted<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator,(WTF::DestructionThread)0>::deref(v82);
        v83 = v128;
        v128 = 0;
        if (v83)
        {
          do
          {
            v84 = __ldaxr((unsigned int *)v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, (unsigned int *)v83));
          if (!v85)
          {
            atomic_store(1u, (unsigned int *)v83);
            v109 = *((unsigned int *)v83 + 5);
            if ((_DWORD)v109)
            {
              v110 = *((_QWORD *)v83 + 1);
              v111 = v110 + 16 * v109;
              do
              {
                v112 = *(unsigned int **)(v110 + 8);
                *(_QWORD *)(v110 + 8) = 0;
                if (v112)
                {
                  do
                  {
                    v113 = __ldaxr(v112);
                    v114 = v113 - 1;
                  }
                  while (__stlxr(v114, v112));
                  if (!v114)
                  {
                    atomic_store(1u, v112);
                    v115 = v112[6];
                    if ((_DWORD)v115 != -1)
                      ((void (*)(WebCore::SharedBuffer **, unsigned int *))off_1E31F7A98[v115])(&v130, v112 + 2);
                    v112[6] = -1;
                    WTF::fastFree((WTF *)v112, v79);
                  }
                }
                v110 += 16;
              }
              while (v110 != v111);
            }
            v118 = (WTF *)*((_QWORD *)v83 + 1);
            if ((WTF *)((char *)v83 + 24) != v118 && v118 != 0)
            {
              *((_QWORD *)v83 + 1) = 0;
              *((_DWORD *)v83 + 4) = 0;
              WTF::fastFree(v118, v79);
            }
            WTF::fastFree(v83, v79);
          }
        }
        v86 = cf;
        cf = 0;
        if (v86)
          CFRelease(v86);
        if (HIDWORD(v133))
        {
          v87 = v132;
          v88 = (WTF::StringImpl *)((char *)v132 + 8 * HIDWORD(v133));
          do
          {
            v89 = *(_QWORD *)v87;
            *(_QWORD *)v87 = 0;
            if (v89)
            {
              do
              {
                v90 = __ldaxr((unsigned int *)v89);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, (unsigned int *)v89));
              if (!v91)
              {
                atomic_store(1u, (unsigned int *)v89);
                v92 = *(unsigned int *)(v89 + 20);
                if ((_DWORD)v92)
                {
                  v93 = *(unsigned int ***)(v89 + 8);
                  v94 = (WTF *)&v93[2 * v92];
                  do
                  {
                    v95 = v93[1];
                    v93[1] = 0;
                    if (v95)
                    {
                      do
                      {
                        v96 = __ldaxr(v95);
                        v97 = v96 - 1;
                      }
                      while (__stlxr(v97, v95));
                      if (!v97)
                      {
                        v125 = v94;
                        atomic_store(1u, v95);
                        v98 = v95[6];
                        if ((_DWORD)v98 != -1)
                          ((void (*)(CFTypeRef *, unsigned int *))off_1E31F7A98[v98])(&cf, v95 + 2);
                        v95[6] = -1;
                        WTF::fastFree((WTF *)v95, v79);
                        v94 = v125;
                      }
                    }
                    v93 += 2;
                  }
                  while (v93 != (unsigned int **)v94);
                }
                v99 = *(WTF **)(v89 + 8);
                if ((WTF *)(v89 + 24) != v99 && v99 != 0)
                {
                  *(_QWORD *)(v89 + 8) = 0;
                  *(_DWORD *)(v89 + 16) = 0;
                  WTF::fastFree(v99, v79);
                }
                WTF::fastFree((WTF *)v89, v79);
              }
            }
            v87 = (WTF::StringImpl *)((char *)v87 + 8);
          }
          while (v87 != v88);
        }
        v101 = v132;
        if (v132)
        {
          v132 = 0;
          LODWORD(v133) = 0;
          WTF::fastFree(v101, v79);
        }
        v59 = v126;
        if (v72)
          CFRelease(v72);
        if (++v70 == v71)
          goto LABEL_163;
      }
    }
    else
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      __break(1u);
    }
    __break(0xC471u);
    JUMPOUT(0x1946B5F74);
  }
  v33 = *(unsigned int *)(a1 + 188);
  if ((_DWORD)v33 == *(_DWORD *)(a1 + 184))
  {
    v34 = WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 176, v33 + 1, (unint64_t)&v136);
    v35 = *(_QWORD *)(a1 + 176) + 24 * *(unsigned int *)(a1 + 188);
    v36 = *(_QWORD *)v34;
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)v35 = v36;
    v37 = *((_QWORD *)v34 + 1);
    *((_QWORD *)v34 + 1) = 0;
    *(_QWORD *)(v35 + 8) = v37;
    LODWORD(v37) = *((_DWORD *)v34 + 4);
    *((_DWORD *)v34 + 4) = 0;
    *(_DWORD *)(v35 + 16) = v37;
    LODWORD(v37) = *((_DWORD *)v34 + 5);
    *((_DWORD *)v34 + 5) = 0;
    *(_DWORD *)(v35 + 20) = v37;
  }
  else
  {
    v42 = *(_QWORD *)(a1 + 176) + 24 * v33;
    v136 = 0;
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)v42 = v5;
    v43 = v137;
    v137 = 0;
    *(_QWORD *)(v42 + 8) = v43;
    LODWORD(v138) = 0;
    *(_DWORD *)(v42 + 16) = (_DWORD)v32;
    LODWORD(v43) = HIDWORD(v138);
    HIDWORD(v138) = 0;
    *(_DWORD *)(v42 + 20) = (_DWORD)v43;
  }
  ++*(_DWORD *)(a1 + 188);
LABEL_165:
  if (HIDWORD(v138))
  {
    v120 = v137;
    v121 = 8 * HIDWORD(v138);
    do
    {
      v122 = *(const void **)v120;
      *(_QWORD *)v120 = 0;
      if (v122)
        CFRelease(v122);
      v120 = (WTF *)((char *)v120 + 8);
      v121 -= 8;
    }
    while (v121);
  }
  v123 = v137;
  if (v137)
  {
    v137 = 0;
    LODWORD(v138) = 0;
    WTF::fastFree(v123, v4);
  }
  v124 = v136;
  v136 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v124 -= 2;
  }
  v6 = v139;
LABEL_176:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v6 -= 2;
  }
}

void sub_1946B6614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v14;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)va, v14);
  objc_end_catch();
  JUMPOUT(0x1946B6644);
}

void sub_1946B6650(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,const void **a23,int a24,unsigned int a25)
{
  WTF::StringImpl *v25;
  const void *v26;
  const void **v28;
  uint64_t v29;
  const void *v30;

  if (a25)
  {
    v28 = a23;
    v29 = 8 * a25;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
        CFRelease(v30);
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  if (a23)
    WTF::fastFree((WTF *)a23, a2);
  if (a22)
  {
    if (*(_DWORD *)a22 == 2)
      WTF::StringImpl::destroy(a22, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a22 -= 2;
  }
  if (v26)
    CFRelease(v26);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRequests(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a2 + 12))
  {
    v3 = a1 - 16;
    v4 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)(a1 - 16), **(AVContentKeyRequest ***)a2);
    if (v4)
      WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(v4, (AVContentKeyRequest ***)a2);
    else
      WebCore::CDMInstanceFairPlayStreamingAVFObjC::handleUnexpectedRequests(v3, a2);
  }
  else
  {
    __break(0xC471u);
  }
}

WTF::StringImpl *WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRenewingRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  result = (WTF::StringImpl *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(this, a2);
  if (result)
    return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest(result, a2);
  v5 = *((_QWORD *)this + 16);
  v6 = *((_QWORD *)this + 17);
  v7[0] = "CDMInstanceFairPlayStreamingAVFObjC";
  v7[1] = 36;
  v7[2] = "didProvideRenewingRequest";
  v7[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    return (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v7, "- no responsible session; dropping");
  return result;
}

WTF::StringImpl *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  void *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF *v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  WebCore::SharedBuffer *v26;
  uint64_t v27;
  id v28;
  void *v29;
  int isa_high;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  NSObject *v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::Logger *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  id *v71;
  unint64_t v72;
  id *v73;
  unint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF *v79;
  uint64_t v80;
  const void *v81;
  WTF *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  const void *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  const void *v92;
  void *v93;
  void *v94;
  WebCoreSharedBufferData *v95;
  uint64_t v96;
  void *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  char v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  WebCoreSharedBufferData *v109;
  WTF::Logger *v110;
  uint64_t v111;
  uint64_t *v112;
  WTF::StringImpl *v113;
  _QWORD v114[4];
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v115;
  WTF *v116;
  WebCore::SharedBuffer *v117[4];
  WTF::StringImpl *v118;
  WTF *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::Logger *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WebCoreSharedBufferData *v126;
  __int128 buf;
  const char *v128;
  WTF::StringImpl *v129;
  int v130;
  _QWORD v131[3];

  v131[1] = *MEMORY[0x1E0C80C00];
  WebCore::initTypeForRequest((WebCore *)&v121, a2);
  result = v121;
  if (v121 == (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8])
    goto LABEL_152;
  if (v121)
    *(_DWORD *)v121 += 2;
  v118 = result;
  if (a2)
    CFRetain(a2);
  v120 = 1;
  v119 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v119 = a2;
  if (a2)
  {
    CFRetain(a2);
    ++HIDWORD(v120);
    CFRelease(a2);
  }
  else
  {
    HIDWORD(v120) = 1;
  }
  if (*((_BYTE *)this + 96))
  {
    v6 = *((unsigned int *)this + 47);
    if ((_DWORD)v6 == *((_DWORD *)this + 46))
    {
      v7 = WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 176, v6 + 1, (unint64_t)&v118);
      v8 = *((_QWORD *)this + 22) + 24 * *((unsigned int *)this + 47);
      v9 = *(_QWORD *)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = v9;
      v10 = *((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      *(_QWORD *)(v8 + 8) = v10;
      LODWORD(v10) = *((_DWORD *)v7 + 4);
      *((_DWORD *)v7 + 4) = 0;
      *(_DWORD *)(v8 + 16) = v10;
      v11 = *((_DWORD *)v7 + 5);
      *((_DWORD *)v7 + 5) = 0;
    }
    else
    {
      v8 = *((_QWORD *)this + 22) + 24 * v6;
      v17 = v118;
      v118 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)v8 = v17;
      v18 = v119;
      v119 = 0;
      *(_QWORD *)(v8 + 8) = v18;
      LODWORD(v18) = v120;
      LODWORD(v120) = 0;
      *(_DWORD *)(v8 + 16) = (_DWORD)v18;
      v11 = HIDWORD(v120);
      HIDWORD(v120) = 0;
    }
    *(_DWORD *)(v8 + 20) = v11;
    ++*((_DWORD *)this + 47);
    goto LABEL_141;
  }
  v12 = *((_QWORD *)this + 34);
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
  *((_QWORD *)&buf + 1) = 43;
  v128 = "didProvideRenewingRequest";
  v129 = v13;
  if (*(_BYTE *)(v12 + 12)
    && (WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf), *((_BYTE *)this + 96)))
  {
    v15 = v118;
    if (v118)
      *(_DWORD *)v118 += 2;
    v16 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v15;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)this + 10, (unsigned int *)&v119);
  }
  else
  {
    v19 = v118;
    if (v118)
      *(_DWORD *)v118 += 2;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 9) = v19;
    v20 = HIDWORD(v120);
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 23) = v20;
    if ((_DWORD)v20)
    {
      if (v20 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1946B7480);
      }
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v20));
      *((_DWORD *)this + 22) = v20;
      *((_QWORD *)this + 10) = v21;
      if (HIDWORD(v120))
      {
        v22 = v119;
        v23 = 8 * HIDWORD(v120);
        do
        {
          v24 = *(const void **)v22;
          *v21 = *(_QWORD *)v22;
          if (v24)
            CFRetain(v24);
          ++v21;
          v22 = (WTF *)((char *)v22 + 8);
          v23 -= 8;
        }
        while (v23);
      }
    }
    *((_BYTE *)this + 96) = 1;
  }
  if (*((_BYTE *)this + 232) && *((_DWORD *)this + 57))
  {
    v25 = 0;
    do
    {
      if ((objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)this + 27) + 8 * v25), "identifier"), "isEqual:", -[AVContentKeyRequest identifier](a2, "identifier")) & 1) != 0)
      {
        if (!*((_BYTE *)this + 232))
          goto LABEL_227;
        v67 = *((unsigned int *)this + 51);
        if (!(_DWORD)v67)
        {
LABEL_134:
          v77 = *((_QWORD *)this + 34);
          v78 = (WTF::StringImpl *)*((_QWORD *)this + 35);
          *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
          *((_QWORD *)&buf + 1) = 43;
          v128 = "didProvideRenewingRequest";
          v129 = v78;
          if (*(_BYTE *)(v77 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [50]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "failed to find renewing request index in requests");
          goto LABEL_141;
        }
        v68 = 0;
        v69 = *((_QWORD *)this + 24);
        v70 = *((_DWORD *)this + 57);
        v71 = (id *)*((_QWORD *)this + 27);
        while (1)
        {
          if (*(_QWORD *)(v69 + 24 * v68) == *((_QWORD *)this + 26))
          {
            v72 = *(unsigned int *)(v69 + 24 * v68 + 20);
            if ((_DWORD)v72 == v70)
            {
              if (!v70)
              {
                if (v68 < v67)
                  goto LABEL_177;
                goto LABEL_230;
              }
              v73 = *(id **)(v69 + 24 * v68 + 8);
              if (*v73 == *v71)
              {
                v74 = 0;
                v4 = (void *)(v72 - 1);
                do
                {
                  if (v4 == (void *)v74)
                    goto LABEL_158;
                  v75 = v73[v74 + 1];
                  v76 = v71[++v74];
                }
                while (v75 == v76);
                if (v74 >= v72)
                {
LABEL_158:
                  if (v68 < v67)
                  {
                    v84 = 8 * v72;
                    while (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(*v73, "contentKeySpecifier"), "identifier"), "isEqual:", -[AVContentKeySpecifier identifier](-[AVContentKeyRequest contentKeySpecifier](a2, "contentKeySpecifier"), "identifier")))
                    {
                      ++v73;
                      v84 -= 8;
                      if (!v84)
                        goto LABEL_177;
                    }
                    if (a2)
                      CFRetain(a2);
                    v85 = *v73;
                    *v73 = a2;
                    if (v85)
                      CFRelease(v85);
LABEL_177:
                    if (*((_BYTE *)this + 232))
                    {
                      v86 = *((unsigned int *)this + 57);
                      v87 = (WTF *)*((_QWORD *)this + 27);
                      if ((_DWORD)v86)
                      {
                        v88 = 8 * v86;
                        do
                        {
                          v89 = *(const void **)v87;
                          *(_QWORD *)v87 = 0;
                          if (v89)
                            CFRelease(v89);
                          v87 = (WTF *)((char *)v87 + 8);
                          v88 -= 8;
                        }
                        while (v88);
                        v87 = (WTF *)*((_QWORD *)this + 27);
                      }
                      if (v87)
                      {
                        *((_QWORD *)this + 27) = 0;
                        *((_DWORD *)this + 56) = 0;
                        WTF::fastFree(v87, v4);
                      }
                      v90 = (WTF::StringImpl *)*((_QWORD *)this + 26);
                      *((_QWORD *)this + 26) = 0;
                      if (v90)
                      {
                        if (*(_DWORD *)v90 == 2)
                          WTF::StringImpl::destroy(v90, (WTF::StringImpl *)v4);
                        else
                          *(_DWORD *)v90 -= 2;
                      }
                      *((_BYTE *)this + 232) = 0;
                    }
                    v91 = *(WTF **)(*((_QWORD *)this + 6) + 64);
                    if (v91)
                    {
                      WebCore::FragmentedSharedBuffer::makeContiguous(v91, v117);
                      WebCore::SharedBuffer::createNSData(v117[0], (WebCoreSharedBufferData **)&buf);
                      v92 = (const void *)buf;
                      *(_QWORD *)&buf = 0;
                      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v117, v93);
                    }
                    else
                    {
                      v92 = 0;
                    }
                    if (*((_BYTE *)this + 96))
                    {
                      WebCore::keyIDsForRequest((WTF *)&v122, *((WebCore::CDMPrivateFairPlayStreaming ***)this + 10), *((_DWORD *)this + 23));
                      if (HIDWORD(v123))
                      {
                        WebCore::FragmentedSharedBuffer::makeContiguous(*(WTF **)v122, &buf);
                        WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)buf, &v126);
                        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, v94);
                        v95 = v126;
                        v114[0] = MEMORY[0x1E0C809B0];
                        v114[1] = 3321888768;
                        v114[2] = ___ZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC25didProvideRenewingRequestEP19AVContentKeyRequest_block_invoke;
                        v114[3] = &__block_descriptor_48_e8_32c114_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC25didProvideRenewingRequestEP19AVContentKeyRequestE3__1_e28_v24__0__NSData_8__NSError_16l;
                        v96 = *((_QWORD *)this + 3);
                        if (v96)
                          goto LABEL_237;
                        v96 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v96 = 1;
                        *(_QWORD *)(v96 + 8) = (char *)this + 16;
                        v98 = (unsigned int *)*((_QWORD *)this + 3);
                        *((_QWORD *)this + 3) = v96;
                        if (!v98)
                          goto LABEL_237;
                        do
                        {
                          v99 = __ldaxr(v98);
                          v100 = v99 - 1;
                        }
                        while (__stlxr(v100, v98));
                        if (!v100)
                        {
                          atomic_store(1u, v98);
                          WTF::fastFree((WTF *)v98, v97);
                        }
                        v96 = *((_QWORD *)this + 3);
                        if (v96)
                        {
LABEL_237:
                          do
                            v101 = __ldaxr((unsigned int *)v96);
                          while (__stlxr(v101 + 1, (unsigned int *)v96));
                          v115 = this;
                          do
                            v102 = __ldaxr((unsigned int *)v96);
                          while (__stlxr(v102 + 1, (unsigned int *)v96));
                          v103 = 0;
                        }
                        else
                        {
                          v115 = this;
                          v103 = 1;
                        }
                        v116 = (WTF *)v96;
                        -[AVContentKeyRequest makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:](a2, "makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:", v92, v95, 0, v114);
                        if ((v103 & 1) == 0)
                        {
                          do
                          {
                            v104 = __ldaxr((unsigned int *)v96);
                            v105 = v104 - 1;
                          }
                          while (__stlxr(v105, (unsigned int *)v96));
                          if (!v105)
                          {
                            atomic_store(1u, (unsigned int *)v96);
                            WTF::fastFree((WTF *)v96, v4);
                          }
                        }
                        v106 = (unsigned int *)v116;
                        v116 = 0;
                        if (v106)
                        {
                          do
                          {
                            v107 = __ldaxr(v106);
                            v108 = v107 - 1;
                          }
                          while (__stlxr(v108, v106));
                          if (!v108)
                          {
                            atomic_store(1u, v106);
                            WTF::fastFree((WTF *)v106, v4);
                          }
                        }
                        v109 = v126;
                        v126 = 0;
                        if (v109)
                          CFRelease(v109);
                        v110 = v122;
                        if (HIDWORD(v123))
                        {
                          v111 = 8 * HIDWORD(v123);
                          v112 = (uint64_t *)v122;
                          do
                          {
                            v112 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v112, v4)+ 1;
                            v111 -= 8;
                          }
                          while (v111);
                        }
                        if (v110)
                          WTF::fastFree(v110, v4);
                        if (v92)
                          CFRelease(v92);
                        goto LABEL_141;
                      }
LABEL_231:
                      __break(0xC471u);
                      JUMPOUT(0x1946B7478);
                    }
                    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_227:
                    __break(1u);
                    goto LABEL_231;
                  }
LABEL_230:
                  __break(0xC471u);
                  JUMPOUT(0x1946B7488);
                }
              }
            }
          }
          if (++v68 == v67)
            goto LABEL_134;
        }
      }
      ++v25;
    }
    while (v25 < *((unsigned int *)this + 57));
  }
  v27 = *((_QWORD *)this + 34);
  v26 = (WebCore::SharedBuffer *)*((_QWORD *)this + 35);
  v117[0] = (WebCore::SharedBuffer *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
  v117[1] = (WebCore::SharedBuffer *)43;
  v117[2] = (WebCore::SharedBuffer *)"didProvideRenewingRequest";
  v117[3] = v26;
  v28 = -[AVContentKeyRequest identifier](a2, "identifier");
  if (!*(_BYTE *)(v27 + 12))
    goto LABEL_141;
  v29 = v28;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v117);
  WTF::String::String((WTF::String *)&v125, "failed to find renewing request matching identifier ");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    MEMORY[0x19AEA5508](&v124, objc_msgSend(v29, "description"));
  else
    WTF::LogArgument<void const*>::toString();
  if (v126)
  {
    isa_high = HIDWORD(v126->super.super.isa);
    if (v125)
      goto LABEL_43;
LABEL_174:
    v31 = 0;
    if (v124)
      goto LABEL_44;
LABEL_175:
    v32 = 0;
    goto LABEL_45;
  }
  isa_high = 0;
  if (!v125)
    goto LABEL_174;
LABEL_43:
  v31 = *((_DWORD *)v125 + 1);
  if (!v124)
    goto LABEL_175;
LABEL_44:
  v32 = *((_DWORD *)v124 + 1);
LABEL_45:
  if ((v32 | v31) < 0)
    goto LABEL_231;
  v33 = __OFADD__(v31, v32);
  v34 = v31 + v32;
  v35 = v33;
  if (isa_high < 0)
    goto LABEL_231;
  if (v35)
    goto LABEL_231;
  v36 = (isa_high + v34);
  if (__OFADD__(isa_high, v34))
    goto LABEL_231;
  if (!v126 || (v126->_position & 4) != 0)
  {
    if (v125)
    {
      v38 = *((_DWORD *)v125 + 4);
      v37 = (v38 >> 2) & 1;
      if (!v124 || (v38 & 4) == 0)
        goto LABEL_59;
    }
    else if (!v124)
    {
      v37 = 1;
      goto LABEL_59;
    }
    v37 = (*((unsigned __int8 *)v124 + 16) >> 2) & 1;
  }
  else
  {
    v37 = 0;
  }
LABEL_59:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v36, v37, v126, (uint64_t)v125, (uint64_t)v124, &buf);
  v113 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
    goto LABEL_231;
  v40 = v124;
  v124 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v125;
  v125 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v39);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = (WTF::StringImpl *)v126;
  v126 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v39);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = qword_1ECE7CE30;
  v44 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v44)
  {
    WTF::String::utf8();
    v45 = v122 ? (char *)v122 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v45;
    _os_log_impl(&dword_1940B8000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v44 = (uint64_t)v122;
    v122 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1)
        v44 = WTF::fastFree((WTF *)v44, v4);
      else
        --*(_DWORD *)v44;
    }
  }
  if (WebCore::LogEME && byte_1ECE7CE20)
  {
    v46 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v47 = *v46;
      if ((v47 & 1) != 0)
        break;
      v48 = __ldaxr(v46);
      if (v48 == v47)
      {
        if (!__stxr(v47 | 1, v46))
        {
          v49 = WTF::Logger::observers((WTF::Logger *)v44);
          v50 = *(unsigned int *)(v49 + 12);
          if ((_DWORD)v50)
          {
            v51 = *(uint64_t **)v49;
            v52 = *(_QWORD *)v49 + 8 * v50;
            do
            {
              v53 = *v51;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v117);
              LODWORD(v128) = 0;
              WTF::String::String((WTF::String *)&v129, "failed to find renewing request matching identifier ");
              v130 = 0;
              if ((objc_opt_respondsToSelector() & 1) != 0)
                MEMORY[0x19AEA5508](v131, objc_msgSend(v29, "description"));
              else
                WTF::LogArgument<void const*>::toString();
              v122 = 0;
              v123 = 0;
              v54 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v123) = 3;
              v122 = v54;
              v55 = HIDWORD(v123);
              *((_DWORD *)v54 + 4 * HIDWORD(v123)) = buf;
              v56 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v54 + 2 * v55 + 1) = v56;
              *((_DWORD *)v54 + 4 * (v55 + 1)) = (_DWORD)v128;
              v57 = v129;
              if (v129)
                *(_DWORD *)v129 += 2;
              *((_QWORD *)v54 + 2 * (v55 + 1) + 1) = v57;
              *((_DWORD *)v54 + 4 * (v55 + 2)) = v130;
              v58 = v131[0];
              if (v131[0])
                *(_DWORD *)v131[0] += 2;
              *((_QWORD *)v54 + 2 * (v55 + 2) + 1) = v58;
              HIDWORD(v123) = v55 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v53 + 16))(v53, &WebCore::LogEME, 1, &v122);
              v59 = v122;
              if (HIDWORD(v123))
              {
                v60 = 16 * HIDWORD(v123);
                v61 = (WTF::StringImpl **)((char *)v122 + 8);
                do
                {
                  v62 = *v61;
                  *v61 = 0;
                  if (v62)
                  {
                    if (*(_DWORD *)v62 == 2)
                      WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v4);
                    else
                      *(_DWORD *)v62 -= 2;
                  }
                  v61 += 2;
                  v60 -= 16;
                }
                while (v60);
                v59 = v122;
              }
              if (v59)
              {
                v122 = 0;
                LODWORD(v123) = 0;
                WTF::fastFree(v59, v4);
              }
              v63 = (WTF::StringImpl *)v131[0];
              v131[0] = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v4);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v64 = v129;
              v129 = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v4);
                else
                  *(_DWORD *)v64 -= 2;
              }
              v65 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                  WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v4);
                else
                  *(_DWORD *)v65 -= 2;
              }
              ++v51;
            }
            while (v51 != (uint64_t *)v52);
          }
          v66 = __ldxr(v46);
          if (v66 == 1)
          {
            if (!__stlxr(0, v46))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v113 -= 2;
  }
LABEL_141:
  if (HIDWORD(v120))
  {
    v79 = v119;
    v80 = 8 * HIDWORD(v120);
    do
    {
      v81 = *(const void **)v79;
      *(_QWORD *)v79 = 0;
      if (v81)
        CFRelease(v81);
      v79 = (WTF *)((char *)v79 + 8);
      v80 -= 8;
    }
    while (v80);
  }
  v82 = v119;
  if (v119)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree(v82, v4);
  }
  v83 = v118;
  v118 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v83 -= 2;
  }
  result = v121;
LABEL_152:
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946B7494(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,WTF::StringImpl *a24,const void **a25,int a26,unsigned int a27,WTF::StringImpl *a28,WTF *a29,int a30,int a31,WTF::StringImpl *a32)
{
  const void **v33;
  uint64_t v34;
  const void *v35;

  if (a27)
  {
    v33 = a25;
    v34 = 8 * a27;
    do
    {
      v35 = *v33;
      *v33 = 0;
      if (v35)
        CFRelease(v35);
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  if (a25)
    WTF::fastFree((WTF *)a25, a2);
  if (a24)
  {
    if (*(_DWORD *)a24 == 2)
      WTF::StringImpl::destroy(a24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a24 -= 2;
  }
  if (a28)
  {
    if (*(_DWORD *)a28 == 2)
      WTF::StringImpl::destroy(a28, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a28 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvideRenewingRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  result = (WTF::StringImpl *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  if (result)
    return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest(result, a2);
  v5 = *((_QWORD *)this + 14);
  v6 = *((_QWORD *)this + 15);
  v7[0] = "CDMInstanceFairPlayStreamingAVFObjC";
  v7[1] = 36;
  v7[2] = "didProvideRenewingRequest";
  v7[3] = v6;
  if (*(_BYTE *)(v5 + 12))
    return (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v7, "- no responsible session; dropping");
  return result;
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvidePersistableRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  result = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(this, a2);
  if (!result)
  {
    v4 = *((_QWORD *)this + 16);
    v5 = *((_QWORD *)this + 17);
    v6[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v6[1] = 36;
    v6[2] = "didProvidePersistableRequest";
    v6[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v6, "- no responsible session; dropping");
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::didProvidePersistableRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  result = WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  if (!result)
  {
    v4 = *((_QWORD *)this + 14);
    v5 = *((_QWORD *)this + 15);
    v6[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v6[1] = 36;
    v6[2] = "didProvidePersistableRequest";
    v6[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v6, "- no responsible session; dropping");
  }
  return result;
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::didFailToProvideRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSError *a3)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v6 = (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(this, a2);
  if (v6)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didFailToProvideRequest(v6, a2, a3);
  }
  else
  {
    v7 = *((_QWORD *)this + 16);
    v8 = *((_QWORD *)this + 17);
    v9[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v9[1] = 36;
    v9[2] = "didFailToProvideRequest";
    v9[3] = v8;
    if (*(_BYTE *)(v7 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v9, "- no responsible session; dropping");
  }
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didFailToProvideRequest(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSError *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::Logger *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  WTF::StringImpl *v46;
  void *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  AVContentKeyRequest **v56;
  AVContentKeyRequest *v57;
  AVContentKeyRequest **v58;
  int v59;
  AVContentKeyRequest *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  const void **v68;
  uint64_t v69;
  const void *v70;
  WTF *v71;
  WTF::StringImpl *v72;
  AVContentKeyRequest *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const void *v86;
  const void *v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  WTF::Logger *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  __int128 buf;
  int v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102[3];

  v102[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 34);
  v7 = *((_QWORD *)this + 35);
  v88 = "CDMInstanceSessionFairPlayStreamingAVFObjC";
  v89 = 43;
  v90 = "didFailToProvideRequest";
  v91 = v7;
  if (!*(_BYTE *)(v6 + 12))
    goto LABEL_85;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v88);
  WTF::String::String((WTF::String *)&v95, "- error: ");
  MEMORY[0x19AEA5508](&v94, -[NSError localizedDescription](a3, "localizedDescription"));
  if (v96)
  {
    v8 = *((_DWORD *)v96 + 1);
    if (v95)
      goto LABEL_4;
LABEL_162:
    v9 = 0;
    if (v94)
      goto LABEL_5;
LABEL_163:
    v10 = 0;
    goto LABEL_6;
  }
  v8 = 0;
  if (!v95)
    goto LABEL_162;
LABEL_4:
  v9 = *((_DWORD *)v95 + 1);
  if (!v94)
    goto LABEL_163;
LABEL_5:
  v10 = *((_DWORD *)v94 + 1);
LABEL_6:
  if ((v10 | v9) < 0)
    goto LABEL_169;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_169;
  if (v13)
    goto LABEL_169;
  v14 = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_169;
  if (v96 && (*((_BYTE *)v96 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_20;
  }
  if (v95)
  {
    v16 = *((_DWORD *)v95 + 4);
    v15 = (v16 >> 2) & 1;
    if (v94 && (v16 & 4) != 0)
      goto LABEL_19;
  }
  else
  {
    if (v94)
    {
LABEL_19:
      v15 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
      goto LABEL_20;
    }
    v15 = 1;
  }
LABEL_20:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14, v15, v96, (uint64_t)v95, (uint64_t)v94, &buf);
  v97 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_169:
    __break(0xC471u);
    return;
  }
  v18 = v94;
  v94 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v95;
  v95 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v96;
  v96 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = qword_1ECE7CE30;
  v22 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v24 = v92 ? (char *)v92 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v24;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v22 = (uint64_t)v92;
    v92 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v23);
      else
        --*(_DWORD *)v22;
    }
  }
  if (WebCore::LogEME && byte_1ECE7CE20)
  {
    v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v26 = *v25;
      if ((v26 & 1) != 0)
        break;
      v27 = __ldaxr(v25);
      if (v27 == v26)
      {
        if (!__stxr(v26 | 1, v25))
        {
          v28 = WTF::Logger::observers((WTF::Logger *)v22);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29)
          {
            v30 = *(uint64_t **)v28;
            v31 = *(_QWORD *)v28 + 8 * v29;
            do
            {
              v32 = *v30;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v88);
              v99 = 0;
              WTF::String::String((WTF::String *)&v100, "- error: ");
              v101 = 0;
              MEMORY[0x19AEA5508](v102, -[NSError localizedDescription](a3, "localizedDescription"));
              v92 = 0;
              v93 = 0;
              v33 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v93) = 3;
              v92 = v33;
              v34 = HIDWORD(v93);
              *((_DWORD *)v33 + 4 * HIDWORD(v93)) = buf;
              v35 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v33 + 2 * v34 + 1) = v35;
              *((_DWORD *)v33 + 4 * (v34 + 1)) = v99;
              v36 = v100;
              if (v100)
                *(_DWORD *)v100 += 2;
              *((_QWORD *)v33 + 2 * (v34 + 1) + 1) = v36;
              *((_DWORD *)v33 + 4 * (v34 + 2)) = v101;
              v37 = v102[0];
              if (v102[0])
                *(_DWORD *)v102[0] += 2;
              *((_QWORD *)v33 + 2 * (v34 + 2) + 1) = v37;
              HIDWORD(v93) = v34 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v32 + 16))(v32, &WebCore::LogEME, 1, &v92);
              v38 = v92;
              if (HIDWORD(v93))
              {
                v39 = 16 * HIDWORD(v93);
                v40 = (WTF::StringImpl **)((char *)v92 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v38 = v92;
              }
              if (v38)
              {
                v92 = 0;
                LODWORD(v93) = 0;
                WTF::fastFree(v38, v23);
              }
              v42 = v102[0];
              v102[0] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v100;
              v100 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v30;
            }
            while (v30 != (uint64_t *)v31);
          }
          v45 = __ldxr(v25);
          if (v45 == 1)
          {
            if (!__stlxr(0, v25))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v46 = v97;
  v97 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v46 -= 2;
  }
LABEL_85:
  if (-[NSError code](a3, "code") == -42811)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestDidSucceed(this, a2);
    return;
  }
  v48 = (_QWORD *)*((_QWORD *)this + 19);
  if (v48)
  {
    if (a2)
      CFRetain(a2);
    v49 = v48 + 2;
    v50 = v48[2];
    if (v50
      || (WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<NSData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(v48 + 2, 8u), (v50 = *v49) != 0))
    {
      v51 = *(_DWORD *)(v50 - 8);
    }
    else
    {
      v51 = 0;
    }
    v52 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
    v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
    v55 = v51 & ((v54 >> 31) ^ v54);
    v56 = (AVContentKeyRequest **)(v50 + 16 * v55);
    v57 = *v56;
    if (*v56)
    {
      v58 = 0;
      v59 = 1;
      while (v57 != a2)
      {
        if (v57 == (AVContentKeyRequest *)-1)
          v58 = v56;
        v55 = (v55 + v59) & v51;
        v56 = (AVContentKeyRequest **)(v50 + 16 * v55);
        v57 = *v56;
        ++v59;
        if (!*v56)
        {
          if (v58)
          {
            *v58 = 0;
            v58[1] = 0;
            --*(_DWORD *)(*v49 - 16);
            v56 = v58;
          }
          goto LABEL_101;
        }
      }
      v73 = v56[1];
      v56[1] = 0;
      if (!v73)
      {
        if (!a2)
          goto LABEL_145;
        goto LABEL_129;
      }
      CFRelease(v73);
      if (a2)
      {
LABEL_129:
        CFRelease(a2);
        goto LABEL_145;
      }
      goto LABEL_145;
    }
LABEL_101:
    v60 = v56[1];
    *v56 = a2;
    v56[1] = 0;
    if (v60)
      CFRelease(v60);
    v61 = *v49;
    if (*v49)
      v62 = *(_DWORD *)(v61 - 12) + 1;
    else
      v62 = 1;
    *(_DWORD *)(v61 - 12) = v62;
    v74 = *v49;
    if (*v49)
      v75 = *(_DWORD *)(v74 - 12);
    else
      v75 = 0;
    v76 = (*(_DWORD *)(v74 - 16) + v75);
    v77 = *(unsigned int *)(v74 - 4);
    if (v77 > 0x400)
    {
      if (v77 > 2 * v76)
        goto LABEL_145;
    }
    else
    {
      if (3 * v77 > 4 * v76)
      {
LABEL_145:
        if ((*v48)-- == 1)
        {
          BYTE8(buf) = 1;
          v80 = v48[1];
          v81 = v48[2];
          v48[2] = 0;
          *(_QWORD *)&buf = v81;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v80 + 16))(v80, &buf);
          if (BYTE8(buf))
          {
            v83 = buf;
            if ((_QWORD)buf)
            {
              v84 = *(unsigned int *)(buf - 4);
              if ((_DWORD)v84)
              {
                v85 = buf;
                do
                {
                  v86 = *(const void **)v85;
                  if (*(_QWORD *)v85 != -1)
                  {
                    v87 = *(const void **)(v85 + 8);
                    *(_QWORD *)(v85 + 8) = 0;
                    if (v87)
                    {
                      CFRelease(v87);
                      v86 = *(const void **)v85;
                    }
                    *(_QWORD *)v85 = 0;
                    if (v86)
                      CFRelease(v86);
                  }
                  v85 += 16;
                  --v84;
                }
                while (v84);
              }
              WTF::fastFree((WTF *)(v83 - 16), v82);
            }
          }
        }
        return;
      }
      if (!(_DWORD)v77)
      {
        v78 = 8;
        goto LABEL_144;
      }
    }
    v78 = (_DWORD)v77 << (6 * *(_DWORD *)(v74 - 12) >= (2 * v77));
LABEL_144:
    WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<NSData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(v48 + 2, v78);
    goto LABEL_145;
  }
  v63 = *((_QWORD *)this + 31);
  if (v63)
  {
    LOBYTE(buf) = 0;
    LOBYTE(v99) = 0;
    LOBYTE(v92) = 0;
    LOBYTE(v93) = 0;
    LOBYTE(v88) = 0;
    LOBYTE(v90) = 0;
    *((_QWORD *)this + 31) = 0;
    (*(void (**)(uint64_t, _QWORD, __int128 *, WTF::Logger **, const char **, _QWORD))(*(_QWORD *)v63 + 16))(v63, 0, &buf, &v92, &v88, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    if ((_BYTE)v90)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v89, v47);
    if ((_BYTE)v99)
    {
      if (HIDWORD(buf))
      {
        v64 = (uint64_t *)buf;
        v65 = 16 * HIDWORD(buf);
        do
        {
          v64 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v64, v47)+ 2;
          v65 -= 16;
        }
        while (v65);
      }
      v66 = (WTF *)buf;
      if ((_QWORD)buf)
      {
        *(_QWORD *)&buf = 0;
        DWORD2(buf) = 0;
        WTF::fastFree(v66, v47);
      }
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v67 = *((unsigned int *)this + 23);
    if ((_DWORD)v67)
    {
      v68 = (const void **)*((_QWORD *)this + 10);
      v69 = 8 * v67;
      do
      {
        v70 = *v68;
        *v68 = 0;
        if (v70)
          CFRelease(v70);
        ++v68;
        v69 -= 8;
      }
      while (v69);
    }
    v71 = (WTF *)*((_QWORD *)this + 10);
    if (v71)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v71, v47);
    }
    v72 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v47);
      else
        *(_DWORD *)v72 -= 2;
    }
    *((_BYTE *)this + 96) = 0;
  }
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::nextRequest(this, v47);
}

void sub_1946B84C4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, WTF *a17, int a18, int a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,WTF::StringImpl *a23,WTF *a24,WTF::StringImpl *a25,char a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  uint64_t v30;
  WTF *v31;
  const void *v32;
  const void *v33;

  if ((_BYTE)a25 && a24)
  {
    v30 = *((unsigned int *)a24 - 1);
    if ((_DWORD)v30)
    {
      v31 = a24;
      do
      {
        v32 = *(const void **)v31;
        if (*(_QWORD *)v31 != -1)
        {
          v33 = (const void *)*((_QWORD *)v31 + 1);
          *((_QWORD *)v31 + 1) = 0;
          if (v33)
          {
            CFRelease(v33);
            v32 = *(const void **)v31;
          }
          *(_QWORD *)v31 = 0;
          if (v32)
            CFRelease(v32);
        }
        v31 = (WTF *)((char *)v31 + 16);
        --v30;
      }
      while (v30);
    }
    WTF::fastFree((WTF *)((char *)a24 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::didFailToProvideRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSError *a3)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v6 = (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  if (v6)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didFailToProvideRequest(v6, a2, a3);
  }
  else
  {
    v7 = *((_QWORD *)this + 14);
    v8 = *((_QWORD *)this + 15);
    v9[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v9[1] = 36;
    v9[2] = "didFailToProvideRequest";
    v9[3] = v8;
    if (*(_BYTE *)(v7 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v9, "- no responsible session; dropping");
  }
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::requestDidSucceed(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  v4 = (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(this, a2);
  if (v4)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestDidSucceed(v4, a2);
  }
  else
  {
    v5 = *((_QWORD *)this + 16);
    v6 = *((_QWORD *)this + 17);
    v7[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v7[1] = 36;
    v7[2] = "requestDidSucceed";
    v7[3] = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v7, "- no responsible session; dropping");
  }
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestDidSucceed(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  AVContentKeyRequest **v15;
  AVContentKeyRequest *v16;
  AVContentKeyRequest **v17;
  int v18;
  AVContentKeyRequest *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  void *v34;
  AVContentKeyRequest *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  const void **v46;
  uint64_t v47;
  const void *v48;
  WTF *v49;
  WTF::StringImpl *v50;
  uint64_t v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  const void *v58;
  const void *v59;
  unsigned int *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  WTF *v65;
  unint64_t v66;
  const char *v67;
  uint64_t v68;

  v4 = *((_QWORD *)this + 34);
  v5 = *((_QWORD *)this + 35);
  v65 = (WTF *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
  v66 = 43;
  v67 = "requestDidSucceed";
  v68 = v5;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v65);
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateKeyStatuses(this);
  v7 = (_QWORD *)*((_QWORD *)this + 19);
  if (v7)
  {
    v8 = v7 + 2;
    if (a2)
      CFRetain(a2);
    v9 = *v8;
    if (*v8
      || (WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<NSData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(v7 + 2, 8u), (v9 = *v8) != 0))
    {
      v10 = *(_DWORD *)(v9 - 8);
    }
    else
    {
      v10 = 0;
    }
    v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = (AVContentKeyRequest **)(v9 + 16 * v14);
    v16 = *v15;
    if (*v15)
    {
      v17 = 0;
      v18 = 1;
      while (v16 != a2)
      {
        if (v16 == (AVContentKeyRequest *)-1)
          v17 = v15;
        v14 = (v14 + v18) & v10;
        v15 = (AVContentKeyRequest **)(v9 + 16 * v14);
        v16 = *v15;
        ++v18;
        if (!*v15)
        {
          if (v17)
          {
            *v17 = 0;
            v17[1] = 0;
            --*(_DWORD *)(*v8 - 16);
            v15 = v17;
          }
          goto LABEL_17;
        }
      }
      v35 = v15[1];
      v15[1] = 0;
      if (!v35)
      {
        if (!a2)
          goto LABEL_67;
        goto LABEL_32;
      }
      CFRelease(v35);
      if (a2)
      {
LABEL_32:
        CFRelease(a2);
        goto LABEL_67;
      }
      goto LABEL_67;
    }
LABEL_17:
    v19 = v15[1];
    *v15 = a2;
    v15[1] = 0;
    if (v19)
      CFRelease(v19);
    v20 = *v8;
    if (*v8)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v36 = *v8;
    if (*v8)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38)
        goto LABEL_67;
    }
    else
    {
      if (3 * v39 > 4 * v38)
      {
LABEL_67:
        if ((*v7)-- == 1)
        {
          LOBYTE(v66) = 1;
          v52 = v7[1];
          v53 = (WTF *)v7[2];
          v7[2] = 0;
          v65 = v53;
          (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v52 + 16))(v52, &v65);
          if ((_BYTE)v66)
          {
            v55 = v65;
            if (v65)
            {
              v56 = *((unsigned int *)v65 - 1);
              if ((_DWORD)v56)
              {
                v57 = v65;
                do
                {
                  v58 = *(const void **)v57;
                  if (*(_QWORD *)v57 != -1)
                  {
                    v59 = (const void *)*((_QWORD *)v57 + 1);
                    *((_QWORD *)v57 + 1) = 0;
                    if (v59)
                    {
                      CFRelease(v59);
                      v58 = *(const void **)v57;
                    }
                    *(_QWORD *)v57 = 0;
                    if (v58)
                      CFRelease(v58);
                  }
                  v57 = (WTF *)((char *)v57 + 16);
                  --v56;
                }
                while (v56);
              }
              WTF::fastFree((WTF *)((char *)v55 - 16), v54);
            }
          }
        }
        return;
      }
      if (!(_DWORD)v39)
      {
        v40 = 8;
        goto LABEL_66;
      }
    }
    v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_66:
    WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<NSData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(v7 + 2, v40);
    goto LABEL_67;
  }
  if (*((_QWORD *)this + 31))
  {
    v22 = *((unsigned int *)this + 43);
    if ((_DWORD)v22)
    {
      if (v22 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v24 = (WTF *)WTF::fastMalloc((WTF *)(16 * v22));
      v25 = *((unsigned int *)this + 43);
      if ((_DWORD)v25)
      {
        v26 = 0;
        v27 = *((_QWORD *)this + 20);
        v28 = v27 + 16 * v25;
        do
        {
          v29 = *(unsigned int **)v27;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          v63 = 0;
          v60 = v29;
          LOBYTE(v61) = *(_BYTE *)(v27 + 8);
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v63, v23);
          v31 = v26 + 1;
          v32 = (char *)v24 + 16 * v26;
          v33 = (uint64_t)v60;
          v60 = 0;
          *(_QWORD *)v32 = v33;
          v32[8] = v61;
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v60, v34);
          v27 += 16;
          ++v26;
        }
        while (v27 != v28);
        goto LABEL_43;
      }
    }
    else
    {
      v24 = 0;
    }
    v31 = 0;
LABEL_43:
    v65 = v24;
    v66 = __PAIR64__(v31, v22);
    LOBYTE(v67) = 1;
    LOBYTE(v63) = 0;
    v64 = 0;
    LOBYTE(v60) = 0;
    v62 = 0;
    v41 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = 0;
    (*(void (**)(uint64_t, _QWORD, WTF **, uint64_t *, unsigned int **, uint64_t))(*(_QWORD *)v41 + 16))(v41, 0, &v65, &v63, &v60, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (v62)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v61, v6);
    if ((_BYTE)v67)
    {
      if (HIDWORD(v66))
      {
        v42 = (uint64_t *)v65;
        v43 = 16 * HIDWORD(v66);
        do
        {
          v42 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v42, v6)+ 2;
          v43 -= 16;
        }
        while (v43);
      }
      v44 = v65;
      if (v65)
      {
        v65 = 0;
        LODWORD(v66) = 0;
        WTF::fastFree(v44, v6);
      }
    }
  }
  if (*((_BYTE *)this + 96))
  {
    v45 = *((unsigned int *)this + 23);
    if ((_DWORD)v45)
    {
      v46 = (const void **)*((_QWORD *)this + 10);
      v47 = 8 * v45;
      do
      {
        v48 = *v46;
        *v46 = 0;
        if (v48)
          CFRelease(v48);
        ++v46;
        v47 -= 8;
      }
      while (v47);
    }
    v49 = (WTF *)*((_QWORD *)this + 10);
    if (v49)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v49, v6);
    }
    v50 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v50 -= 2;
    }
    *((_BYTE *)this + 96) = 0;
  }
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::nextRequest(this, v6);
}

void sub_1946B8D60(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, WTF *a15, char a16, int a17, char a18)
{
  uint64_t v19;
  WTF *v20;
  const void *v21;
  const void *v22;

  if (a16 && a15)
  {
    v19 = *((unsigned int *)a15 - 1);
    if ((_DWORD)v19)
    {
      v20 = a15;
      do
      {
        v21 = *(const void **)v20;
        if (*(_QWORD *)v20 != -1)
        {
          v22 = (const void *)*((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v22)
          {
            CFRelease(v22);
            v21 = *(const void **)v20;
          }
          *(_QWORD *)v20 = 0;
          if (v21)
            CFRelease(v21);
        }
        v20 = (WTF *)((char *)v20 + 16);
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)((char *)a15 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::requestDidSucceed(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  v4 = (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  if (v4)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestDidSucceed(v4, a2);
  }
  else
  {
    v5 = *((_QWORD *)this + 14);
    v6 = *((_QWORD *)this + 15);
    v7[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v7[1] = 36;
    v7[2] = "requestDidSucceed";
    v7[3] = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v7, "- no responsible session; dropping");
  }
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::shouldRetryRequestForReason(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSString *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  if (!WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(this, a2))
  {
    v4 = *((_QWORD *)this + 16);
    v5 = *((_QWORD *)this + 17);
    v7[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v7[1] = 36;
    v7[2] = "shouldRetryRequestForReason";
    v7[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v7, "- no responsible session; dropping");
  }
  return 0;
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::shouldRetryRequestForReason(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSString *a3)
{
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::shouldRetryRequestForReason(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSString *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  if (!WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2))
  {
    v4 = *((_QWORD *)this + 14);
    v5 = *((_QWORD *)this + 15);
    v7[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v7[1] = 36;
    v7[2] = "shouldRetryRequestForReason";
    v7[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v7, "- no responsible session; dropping");
  }
  return 0;
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::groupSessionIdentifierChanged(uint64_t a1, uint64_t a2, NSData *a3)
{
  uint64_t result;
  void *v7;
  const WTF::StringImpl *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;

  result = objc_msgSend(*(id *)(a1 + 48), "defaultContentKeyGroup");
  if (result == a2)
  {
    v17 = *(_QWORD *)(a1 + 128);
    v18 = *(_QWORD *)(a1 + 136);
    v24 = "CDMInstanceFairPlayStreamingAVFObjC";
    v25 = 36;
    v26 = "groupSessionIdentifierChanged";
    v27 = v18;
    if (*(_BYTE *)(v17 + 12))
    {
      if (WebCore::LogEME && byte_1ECE7CE20 >= 3u)
        return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 3u, (WTF::Logger::LogSiteIdentifier *)&v24, "- default unused group identifier changed; dropping");
    }
    return result;
  }
  if (!*(_DWORD *)(a1 + 100))
    goto LABEL_29;
  v9 = 0;
  while (1)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v9);
    if (result)
    {
      do
        v10 = __ldaxr((unsigned int *)result);
      while (__stlxr(v10 + 1, (unsigned int *)result));
      v11 = *(_QWORD *)(result + 8);
      if (!v11)
      {
        do
        {
          v15 = __ldaxr((unsigned int *)result);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)result));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v7);
        }
        goto LABEL_16;
      }
      v12 = *(_QWORD *)(v11 + 40);
      do
      {
        v13 = __ldaxr((unsigned int *)result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)result));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v7);
      }
      if (v12 == a2)
        break;
    }
LABEL_16:
    if (++v9 >= *(unsigned int *)(a1 + 100))
      goto LABEL_29;
  }
  if (v9 >= *(unsigned int *)(a1 + 100))
  {
    __break(0xC471u);
  }
  else
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v9);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 + 8);
      if (v21)
        return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::sessionIdentifierChanged((WTF **)(v21 - 16), a3, v8);
    }
LABEL_29:
    v22 = *(_QWORD *)(a1 + 128);
    v23 = *(_QWORD *)(a1 + 136);
    v24 = "CDMInstanceFairPlayStreamingAVFObjC";
    v25 = 36;
    v26 = "groupSessionIdentifierChanged";
    v27 = v23;
    if (*(_BYTE *)(v22 + 12))
      return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v24, "- no responsible session; dropping");
  }
  return result;
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::groupSessionIdentifierChanged(WTF **a1, int a2, NSData *a3)
{
  return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::sessionIdentifierChanged(a1, a3, (const WTF::StringImpl *)a3);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::groupSessionIdentifierChanged(uint64_t a1, uint64_t a2, NSData *a3)
{
  return WebCore::CDMInstanceFairPlayStreamingAVFObjC::groupSessionIdentifierChanged(a1 - 16, a2, a3);
}

WTF *WebCore::CDMInstanceFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged(WTF *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((unsigned int *)this + 25);
  if ((_DWORD)v2)
  {
    v4 = *((_QWORD *)this + 11);
    v5 = 8 * v2;
    do
    {
      if (*(_QWORD *)v4)
      {
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if (v6)
          this = WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged((WTF *)(v6 - 16), a2);
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

WTF *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged(WTF *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  char *v15;
  const char *v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v27 = a2;
  if (*((unsigned __int8 *)this + 144) != a2)
  {
    v2 = (uint64_t)this;
    v3 = *((_QWORD *)this + 34);
    v4 = *((_QWORD *)this + 35);
    v23 = "CDMInstanceSessionFairPlayStreamingAVFObjC";
    v24 = 43;
    v25 = "outputObscuredDueToInsufficientExternalProtectionChanged";
    v26 = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v23);
      LOBYTE(a2) = v27;
    }
    *(_BYTE *)(v2 + 144) = a2;
    this = WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateKeyStatuses((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)v2);
    v5 = *(_QWORD *)(v2 + 128);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v21 = 0;
        v22 = 0;
        v7 = *(unsigned int *)(v2 + 172);
        if ((_DWORD)v7)
        {
          if (v7 >> 28)
          {
            __break(0xC471u);
            return this;
          }
          LODWORD(v22) = *(_DWORD *)(v2 + 172);
          v21 = (WTF *)WTF::fastMalloc((WTF *)(16 * v7));
          v9 = *(unsigned int *)(v2 + 172);
          if ((_DWORD)v9)
          {
            v10 = *(_QWORD *)(v2 + 160);
            v11 = v10 + 16 * v9;
            do
            {
              v12 = *(unsigned int **)v10;
              do
                v13 = __ldaxr(v12);
              while (__stlxr(v13 + 1, v12));
              v28 = 0;
              v23 = (const char *)v12;
              LOBYTE(v24) = *(_BYTE *)(v10 + 8);
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v28, v8);
              v14 = HIDWORD(v22) + 1;
              v15 = (char *)v21 + 16 * HIDWORD(v22);
              v16 = v23;
              v23 = 0;
              *(_QWORD *)v15 = v16;
              v15[8] = v24;
              HIDWORD(v22) = v14;
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v23, v17);
              v10 += 16;
            }
            while (v10 != v11);
          }
        }
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v6 + 16))(v6, &v21);
        if (HIDWORD(v22))
        {
          v19 = (uint64_t *)v21;
          v20 = 16 * HIDWORD(v22);
          do
          {
            v19 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v19, v18)+ 2;
            v20 -= 16;
          }
          while (v20);
        }
        this = v21;
        if (v21)
        {
          v21 = 0;
          LODWORD(v22) = 0;
          return (WTF *)WTF::fastFree(this, v18);
        }
      }
    }
  }
  return this;
}

void sub_1946B939C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, unsigned int a11)
{
  uint64_t *v12;
  uint64_t v13;

  if (a11)
  {
    v12 = (uint64_t *)a9;
    v13 = 16 * a11;
    do
    {
      v12 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v12, a2)+ 2;
      v13 -= 16;
    }
    while (v13);
  }
  if (a9)
    WTF::fastFree(a9, a2);
  _Unwind_Resume(exception_object);
}

WTF *`non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged(WTF *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((unsigned int *)this + 21);
  if ((_DWORD)v2)
  {
    v4 = *((_QWORD *)this + 9);
    v5 = 8 * v2;
    do
    {
      if (*(_QWORD *)v4)
      {
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if (v6)
          this = WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged((WTF *)(v6 - 16), a2);
      }
      v4 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::externalProtectionStatusDidChangeForContentKey(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKey *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKey(this, a2);
  if (v3)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateProtectionStatus(v3);
  }
  else
  {
    v4 = *((_QWORD *)this + 16);
    v5 = *((_QWORD *)this + 17);
    v6[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v6[1] = 36;
    v6[2] = "externalProtectionStatusDidChangeForContentKey";
    v6[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v6, "- no responsible session; dropping");
  }
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKey(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKey *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  AVContentKey *v11;
  BOOL v12;
  uint64_t v14;
  WTF *v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  unsigned int v22;

  if (*((_DWORD *)this + 25))
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v4);
      if (!v5)
        goto LABEL_27;
      do
        v6 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v6 + 1, (unsigned int *)v5));
      v7 = *(_QWORD *)(v5 + 8);
      if (!v7)
      {
        do
        {
          v17 = __ldaxr((unsigned int *)v5);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v5));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)v5);
          WTF::fastFree((WTF *)v5, a2);
        }
        goto LABEL_27;
      }
      WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeys((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)&v21, *(char **)(v7 + 176), *(_DWORD *)(v7 + 188));
      v8 = v21;
      if (!v22)
        break;
      v9 = v22 - 1;
      v10 = v21;
      do
      {
        v11 = *(AVContentKey **)v10;
        v10 = (WTF *)((char *)v10 + 8);
        v12 = v11 == a2;
      }
      while (v11 != a2 && v9-- != 0);
      v14 = 8 * v22;
      v15 = v21;
      do
      {
        v16 = *(const void **)v15;
        *(_QWORD *)v15 = 0;
        if (v16)
          CFRelease(v16);
        v15 = (WTF *)((char *)v15 + 8);
        v14 -= 8;
      }
      while (v14);
      if (v8)
        goto LABEL_23;
      do
      {
LABEL_24:
        v19 = __ldaxr((unsigned int *)v5);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v5));
      if (v20)
      {
        if (v12)
          goto LABEL_30;
      }
      else
      {
        atomic_store(1u, (unsigned int *)v5);
        WTF::fastFree((WTF *)v5, a2);
        if (v12)
        {
LABEL_30:
          if (v4 >= *((unsigned int *)this + 25))
            __break(0xC471u);
          return;
        }
      }
LABEL_27:
      if (++v4 >= *((unsigned int *)this + 25))
        return;
    }
    v12 = 0;
    if (!v21)
      goto LABEL_24;
LABEL_23:
    WTF::fastFree(v8, a2);
    goto LABEL_24;
  }
}

void sub_1946B9644(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    atomic_store(1u, v2);
    WTF::fastFree((WTF *)v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::externalProtectionStatusDidChangeForContentKey(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKey *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKey((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  if (v3)
  {
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateProtectionStatus(v3);
  }
  else
  {
    v4 = *((_QWORD *)this + 14);
    v5 = *((_QWORD *)this + 15);
    v6[0] = "CDMInstanceFairPlayStreamingAVFObjC";
    v6[1] = 36;
    v6[2] = "externalProtectionStatusDidChangeForContentKey";
    v6[3] = v5;
    if (*(_BYTE *)(v4 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v6, "- no responsible session; dropping");
  }
}

WTF *WebCore::CDMInstanceFairPlayStreamingAVFObjC::externalProtectionStatusDidChangeForContentKeyRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  result = (WTF *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest(this, a2);
  if (result)
    return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateProtectionStatus(result);
  v4 = *((_QWORD *)this + 16);
  v5 = *((_QWORD *)this + 17);
  v6[0] = "CDMInstanceFairPlayStreamingAVFObjC";
  v6[1] = 36;
  v6[2] = "externalProtectionStatusDidChangeForContentKeyRequest";
  v6[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    return (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v6, "- no responsible session; dropping");
  return result;
}

WTF *`non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::externalProtectionStatusDidChangeForContentKeyRequest(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WTF *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  result = (WTF *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForRequest((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  if (result)
    return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateProtectionStatus(result);
  v4 = *((_QWORD *)this + 14);
  v5 = *((_QWORD *)this + 15);
  v6[0] = "CDMInstanceFairPlayStreamingAVFObjC";
  v6[1] = 36;
  v6[2] = "externalProtectionStatusDidChangeForContentKeyRequest";
  v6[3] = v5;
  if (*(_BYTE *)(v4 + 12))
    return (WTF *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v6, "- no responsible session; dropping");
  return result;
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::attachContentKeyToSample(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, const WebCore::MediaSampleAVFObjC *a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v4;
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v5;
  opaqueCMSampleBuffer *v6;
  opaqueCMSampleBuffer *v7;
  NSError **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  AVContentKey v17;

  if (*((_DWORD *)a2 + 23))
  {
    v4 = (WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKeyIDs((uint64_t)this, (uint64_t)a2 + 80);
    if (v4)
    {
      v5 = v4;
      WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyForSample(v4, a2);
      if (v6)
      {
        v7 = v6;
        v17.super.isa = 0;
        (*(void (**)(const char **__return_ptr, const WebCore::MediaSampleAVFObjC *))(*(_QWORD *)a2 + 112))(&v13, a2);
        if ((PAL::softLinkAVFoundationAVSampleBufferAttachContentKey((PAL *)v14, v7, &v17, v8) & 1) == 0)
        {
          v9 = *((_QWORD *)v5 + 34);
          v10 = *((_QWORD *)v5 + 35);
          v13 = "CDMInstanceSessionFairPlayStreamingAVFObjC";
          v14 = 43;
          v15 = "attachContentKeyToSample";
          v16 = v10;
          if (*(_BYTE *)(v9 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52],NSError *>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v13, "Failed to attach content key with error: %{public}@", (id *)&v17.super.isa);
        }
      }
    }
    else
    {
      v11 = *((_QWORD *)this + 16);
      v12 = *((_QWORD *)this + 17);
      v13 = "CDMInstanceFairPlayStreamingAVFObjC";
      v14 = 36;
      v15 = "attachContentKeyToSample";
      v16 = v12;
      if (*(_BYTE *)(v11 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v13, "- no responsible session; dropping");
    }
  }
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionForKeyIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  unsigned int v58;
  char v59;

  v2 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)(a1 + 88);
    v5 = v4 + 8 * v2;
    v53 = v5;
    do
    {
      if (*(_QWORD *)v4)
      {
        v6 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 176);
          v8 = *(_DWORD *)(v6 + 188);
          v55 = 0;
          v56 = 0;
          if (v8)
          {
            v9 = v7 + 24 * v8;
            do
            {
              WebCore::keyIDsForRequest((WTF *)&v57, *(WebCore::CDMPrivateFairPlayStreaming ***)(v7 + 8), *(_DWORD *)(v7 + 20));
              v11 = v57;
              if (v58)
              {
                v12 = 0;
                v13 = HIDWORD(v56);
                v14 = 8 * v58;
                v15 = (WTF *)((char *)v57 + v14);
                do
                {
                  v16 = (char *)v11 + v12;
                  if (v13 == (_DWORD)v56)
                  {
                    v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v55, v13 + 1, (unint64_t)v16);
                    v13 = HIDWORD(v56);
                    v17 = (char *)v55 + 8 * HIDWORD(v56);
                  }
                  else
                  {
                    v17 = (char *)v55 + 8 * v13;
                  }
                  v18 = *(_QWORD *)v16;
                  *(_QWORD *)v16 = 0;
                  *(_QWORD *)v17 = v18;
                  HIDWORD(v56) = ++v13;
                  v12 += 8;
                }
                while (v14 != v12);
                do
                {
                  v28 = *(_QWORD *)v11;
                  *(_QWORD *)v11 = 0;
                  if (v28)
                  {
                    do
                    {
                      v29 = __ldaxr((unsigned int *)v28);
                      v30 = v29 - 1;
                    }
                    while (__stlxr(v30, (unsigned int *)v28));
                    if (!v30)
                    {
                      atomic_store(1u, (unsigned int *)v28);
                      v19 = *(unsigned int *)(v28 + 20);
                      if ((_DWORD)v19)
                      {
                        v20 = *(_QWORD *)(v28 + 8);
                        v21 = v20 + 16 * v19;
                        do
                        {
                          v22 = *(unsigned int **)(v20 + 8);
                          *(_QWORD *)(v20 + 8) = 0;
                          if (v22)
                          {
                            do
                            {
                              v23 = __ldaxr(v22);
                              v24 = v23 - 1;
                            }
                            while (__stlxr(v24, v22));
                            if (!v24)
                            {
                              atomic_store(1u, v22);
                              v25 = v22[6];
                              if ((_DWORD)v25 != -1)
                                ((void (*)(char *, unsigned int *))off_1E31F7A98[v25])(&v59, v22 + 2);
                              v22[6] = -1;
                              WTF::fastFree((WTF *)v22, v10);
                            }
                          }
                          v20 += 16;
                        }
                        while (v20 != v21);
                      }
                      v26 = *(WTF **)(v28 + 8);
                      if ((WTF *)(v28 + 24) != v26 && v26 != 0)
                      {
                        *(_QWORD *)(v28 + 8) = 0;
                        *(_DWORD *)(v28 + 16) = 0;
                        WTF::fastFree(v26, v10);
                      }
                      WTF::fastFree((WTF *)v28, v10);
                      v5 = v53;
                    }
                  }
                  v11 = (WTF *)((char *)v11 + 8);
                }
                while (v11 != v15);
                v11 = v57;
              }
              if (v11)
                WTF::fastFree(v11, v10);
              v7 += 24;
            }
            while (v7 != v9);
            v31 = (uint64_t *)v55;
            if (HIDWORD(v56))
            {
              if (*(_DWORD *)(a2 + 12))
              {
                v32 = (uint64_t *)((char *)v55 + 8 * HIDWORD(v56));
                LODWORD(v33) = 1;
                while (!(_DWORD)v33)
                {
LABEL_45:
                  if (++v31 == v32)
                    goto LABEL_46;
                }
                v34 = 0;
                while (1)
                {
                  WebCore::FragmentedSharedBuffer::operator==(*(_QWORD *)(*(_QWORD *)a2 + 8 * v34), *v31);
                  if ((v35 & 1) != 0)
                    break;
                  ++v34;
                  v33 = *(unsigned int *)(a2 + 12);
                  if (v34 >= v33)
                    goto LABEL_45;
                }
                if (*(_QWORD *)v4)
                {
                  v36 = 0;
                  v37 = *(_QWORD *)(*(_QWORD *)v4 + 8);
                  if (v37)
                    v38 = v37 - 16;
                  else
                    v38 = 0;
                  v54 = v38;
                }
                else
                {
                  v36 = 0;
                  v54 = 0;
                }
              }
              else
              {
LABEL_46:
                v36 = 1;
              }
              v31 = (uint64_t *)v55;
              if (HIDWORD(v56))
              {
                v39 = (uint64_t *)((char *)v55 + 8 * HIDWORD(v56));
                do
                {
                  v40 = *v31;
                  *v31 = 0;
                  if (v40)
                  {
                    do
                    {
                      v41 = __ldaxr((unsigned int *)v40);
                      v42 = v41 - 1;
                    }
                    while (__stlxr(v42, (unsigned int *)v40));
                    if (!v42)
                    {
                      atomic_store(1u, (unsigned int *)v40);
                      v43 = *(unsigned int *)(v40 + 20);
                      if ((_DWORD)v43)
                      {
                        v44 = *(_QWORD *)(v40 + 8);
                        v45 = v44 + 16 * v43;
                        do
                        {
                          v46 = *(unsigned int **)(v44 + 8);
                          *(_QWORD *)(v44 + 8) = 0;
                          if (v46)
                          {
                            do
                            {
                              v47 = __ldaxr(v46);
                              v48 = v47 - 1;
                            }
                            while (__stlxr(v48, v46));
                            if (!v48)
                            {
                              atomic_store(1u, v46);
                              v49 = v46[6];
                              if ((_DWORD)v49 != -1)
                                ((void (*)(WTF **, unsigned int *))off_1E31F7A98[v49])(&v57, v46 + 2);
                              v46[6] = -1;
                              WTF::fastFree((WTF *)v46, v10);
                            }
                          }
                          v44 += 16;
                        }
                        while (v44 != v45);
                      }
                      v50 = *(WTF **)(v40 + 8);
                      if ((WTF *)(v40 + 24) != v50 && v50 != 0)
                      {
                        *(_QWORD *)(v40 + 8) = 0;
                        *(_DWORD *)(v40 + 16) = 0;
                        WTF::fastFree(v50, v10);
                      }
                      WTF::fastFree((WTF *)v40, v10);
                      v5 = v53;
                    }
                  }
                  ++v31;
                }
                while (v31 != v39);
                v31 = (uint64_t *)v55;
              }
            }
            else
            {
              v36 = 1;
            }
            if (v31)
            {
              v55 = 0;
              LODWORD(v56) = 0;
              WTF::fastFree((WTF *)v31, v10);
              if ((v36 & 1) == 0)
                return v54;
            }
            else if (!v36)
            {
              return v54;
            }
          }
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return 0;
}

void sub_1946B9CF8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12, int a13, unsigned int a14)
{
  uint64_t *v15;
  uint64_t v16;

  if (a14)
  {
    v15 = (uint64_t *)a12;
    v16 = 8 * a14;
    do
    {
      v15 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v15, a2)+ 1;
      v16 -= 8;
    }
    while (v16);
  }
  if (a12)
    WTF::fastFree(a12, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int **v27;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  int v34;
  WTF *v35;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_24;
    v25 = 0;
    v26 = v24 - 1;
    do
    {
      v27 = (unsigned int **)(v8 + 8 * v26);
      if ((unint64_t)*v27 + 1 >= 2 && !*((_QWORD *)*v27 + 1))
      {
        v34 = v25;
        v33 = v26;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v27, a2);
        v26 = v33;
        v25 = v34 + 1;
      }
    }
    while ((unint64_t)v26--);
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v29 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v30 = *(_DWORD *)(v29 - 12);
      else
        v30 = 0;
      *(_DWORD *)(v29 - 12) = v30 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v31 = *(_DWORD *)(v8 - 4);
    if (v31 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v31)
    {
LABEL_24:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = *a2;
  if (!*a2)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)*a2;
    *a2 = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = *a2;
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v35 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v35, a3);
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    do
    {
      v22 = __ldaxr(result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, result));
    if (!v23)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  if (v11)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v11);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v11));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v11);
      return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
    }
  }
  return result;
}

void sub_1946B9F8C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a12)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)a12);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)a12));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)a12);
      WTF::fastFree(a12, a2);
    }
  }
  if (v12)
  {
    do
    {
      v14 = __ldaxr(v12);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v12));
    if (!v15)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF *WebCore::keyIDsForRequest(WTF *result, WebCore::CDMPrivateFairPlayStreaming **a2, int a3)
{
  WebCore::CDMPrivateFairPlayStreaming **v3;
  WTF *v4;
  WebCore::CDMPrivateFairPlayStreaming **v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  WTF *v33;
  WTF *v34;
  int v35;
  unsigned int v36;
  char v37;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  if (a3)
  {
    v3 = a2;
    v4 = result;
    v5 = &a2[a3];
    do
    {
      result = (WTF *)WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest(*v3, (uint64_t)&v34);
      v7 = *((unsigned int *)v4 + 2);
      v8 = *((unsigned int *)v4 + 3);
      v9 = v36 + v8;
      if (v9 > v7)
      {
        v10 = v7 + (v7 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= v9)
          v12 = v36 + v8;
        else
          v12 = v11;
        if (v12 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v13 = *(_QWORD **)v4;
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v12));
        *((_DWORD *)v4 + 2) = v12;
        *(_QWORD *)v4 = v14;
        memcpy(v14, v13, 8 * v8);
        if (v13)
        {
          if (v14 == v13)
          {
            *(_QWORD *)v4 = 0;
            *((_DWORD *)v4 + 2) = 0;
          }
          WTF::fastFree((WTF *)v13, v6);
        }
      }
      result = v34;
      v15 = v36;
      if (v36)
      {
        v16 = *(_QWORD **)v4;
        v17 = 8 * v36;
        do
        {
          v18 = *(_QWORD *)result;
          *(_QWORD *)result = 0;
          result = (WTF *)((char *)result + 8);
          v16[v8] = v18;
          LODWORD(v8) = v8 + 1;
          v17 -= 8;
        }
        while (v17);
        *((_DWORD *)v4 + 3) = v8;
        v19 = v34;
        v20 = (WTF *)((char *)v34 + 8 * v15);
        do
        {
          v21 = *(_QWORD *)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr((unsigned int *)v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, (unsigned int *)v21));
            if (!v23)
            {
              atomic_store(1u, (unsigned int *)v21);
              v24 = *(unsigned int *)(v21 + 20);
              if ((_DWORD)v24)
              {
                v25 = *(_QWORD *)(v21 + 8);
                v26 = v25 + 16 * v24;
                do
                {
                  v27 = *(unsigned int **)(v25 + 8);
                  *(_QWORD *)(v25 + 8) = 0;
                  if (v27)
                  {
                    do
                    {
                      v28 = __ldaxr(v27);
                      v29 = v28 - 1;
                    }
                    while (__stlxr(v29, v27));
                    if (!v29)
                    {
                      atomic_store(1u, v27);
                      v30 = v27[6];
                      if ((_DWORD)v30 != -1)
                      {
                        v33 = (WTF *)v27;
                        ((void (*)(char *, unsigned int *))off_1E31F7A98[v30])(&v37, v27 + 2);
                        v27 = (unsigned int *)v33;
                      }
                      v27[6] = -1;
                      WTF::fastFree((WTF *)v27, v6);
                    }
                  }
                  v25 += 16;
                }
                while (v25 != v26);
              }
              v31 = *(WTF **)(v21 + 8);
              if ((WTF *)(v21 + 24) != v31 && v31 != 0)
              {
                *(_QWORD *)(v21 + 8) = 0;
                *(_DWORD *)(v21 + 16) = 0;
                WTF::fastFree(v31, v6);
              }
              WTF::fastFree((WTF *)v21, v6);
            }
          }
          v19 = (WTF *)((char *)v19 + 8);
        }
        while (v19 != v20);
        result = v34;
      }
      if (result)
      {
        v34 = 0;
        v35 = 0;
        result = (WTF *)WTF::fastFree(result, v6);
      }
      ++v3;
    }
    while (v3 != v5);
  }
  return result;
}

void sub_1946BA220(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, unsigned int a12)
{
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  if (a12)
  {
    v16 = (uint64_t *)a10;
    v17 = 8 * a12;
    do
    {
      v16 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v16, a2)+ 1;
      v17 -= 8;
    }
    while (v17);
  }
  if (a10)
    WTF::fastFree(a10, a2);
  if (v14)
  {
    v18 = 8 * v14;
    v19 = (uint64_t *)v13;
    do
    {
      v19 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v19, a2)+ 1;
      v18 -= 8;
    }
    while (v18);
  }
  if (v13)
  {
    *(_QWORD *)v12 = 0;
    *(_DWORD *)(v12 + 8) = 0;
    WTF::fastFree(v13, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestLicense(uint64_t a1, WTF::String *a2, char a3, WTF::StringImpl **a4, AVContentKeyRequest *a5, uint64_t *a6)
{
  WebCore::CDMInstanceFairPlayStreamingAVFObjC *v11;
  uint64_t v12;
  uint64_t isa;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  AVContentKeyRequest **v18;
  AVContentKeyRequest **v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  WTF::Logger *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  void *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  char v61;
  char v62;
  uint64_t v63;
  AVContentKeyRequest **v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  WTF::StringImpl *v70;
  AVContentKeyRequest **v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  const void *v85;
  void *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  void *v89;
  id v90;
  void *v91;
  uint64_t v92;
  const void *v93;
  PAL *v94;
  uint64_t v95;
  const void *v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  const __CFString *v102;
  const void *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  const __CFString *v110;
  const __CFString *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  BOOL v115;
  char v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void *v120;
  const void *v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF **p_isa;
  uint64_t v126;
  WTF::StringImpl *v127[4];
  WTF::Logger *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  const __CFString *v137;
  const __CFString *v138;
  _QWORD v139[2];
  _QWORD v140[2];
  const __CFString *v141;
  const __CFString *v142;
  __int128 buf;
  const char *v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  int v148;
  _QWORD v149[3];

  v149[1] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 1)
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 72)
      || (PAL::getAVContentKeySessionClass[0]((PAL *)a1), (objc_opt_respondsToSelector() & 1) == 0))
    {
LABEL_20:
      v21 = *(_QWORD *)(a1 + 272);
      v22 = *(WTF::StringImpl **)(a1 + 280);
      v127[0] = (WTF::StringImpl *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
      v127[1] = (WTF::StringImpl *)43;
      v127[2] = (WTF::StringImpl *)"requestLicense";
      v127[3] = v22;
      if (!*(_BYTE *)(v21 + 12))
        goto LABEL_159;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v127);
      WTF::String::String((WTF::String *)&v132, " false, licenseType \"");
      WTF::String::number(a2);
      WTF::String::String((WTF::String *)&v130, "\" not supported");
      *(_QWORD *)&buf = v133;
      v128 = v132;
      v135 = v130;
      v136 = v131;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v128, (uint64_t *)&v136, (uint64_t *)&v135, &v134);
      if (v134)
      {
        v24 = v130;
        v130 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = v131;
        v131 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v23);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v132;
        v132 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v23);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = v133;
        v133 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v23);
          else
            *(_DWORD *)v27 -= 2;
        }
        v28 = qword_1ECE7CE30;
        v29 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v29)
        {
          WTF::String::utf8();
          v31 = v128 ? (char *)v128 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v31;
          _os_log_impl(&dword_1940B8000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v29 = (uint64_t)v128;
          v128 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
              v29 = WTF::fastFree((WTF *)v29, v30);
            else
              --*(_DWORD *)v29;
          }
        }
        if (WebCore::LogEME && byte_1ECE7CE20)
        {
          v32 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v33 = *v32;
            if ((v33 & 1) != 0)
              break;
            v34 = __ldaxr(v32);
            if (v34 == v33)
            {
              if (!__stxr(v33 | 1, v32))
              {
                v39 = WTF::Logger::observers((WTF::Logger *)v29);
                v40 = *(unsigned int *)(v39 + 12);
                if ((_DWORD)v40)
                {
                  v41 = *(uint64_t **)v39;
                  v126 = *(_QWORD *)v39 + 8 * v40;
                  do
                  {
                    v42 = *v41;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v127);
                    LODWORD(v144) = 0;
                    WTF::String::String((WTF::String *)&v145, " false, licenseType \"");
                    v146 = 0;
                    WTF::String::number(a2);
                    v148 = 0;
                    WTF::String::String((WTF::String *)v149, "\" not supported");
                    v128 = 0;
                    v129 = 0;
                    v43 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v129) = 4;
                    v128 = v43;
                    v44 = HIDWORD(v129);
                    *((_DWORD *)v43 + 4 * HIDWORD(v129)) = buf;
                    v45 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v43 + 2 * v44 + 1) = v45;
                    *((_DWORD *)v43 + 4 * (v44 + 1)) = (_DWORD)v144;
                    v46 = v145;
                    if (v145)
                      *(_DWORD *)v145 += 2;
                    *((_QWORD *)v43 + 2 * (v44 + 1) + 1) = v46;
                    *((_DWORD *)v43 + 4 * (v44 + 2)) = v146;
                    v47 = v147;
                    if (v147)
                      *(_DWORD *)v147 += 2;
                    *((_QWORD *)v43 + 2 * (v44 + 2) + 1) = v47;
                    *((_DWORD *)v43 + 4 * (v44 + 3)) = v148;
                    v48 = v149[0];
                    if (v149[0])
                      *(_DWORD *)v149[0] += 2;
                    *((_QWORD *)v43 + 2 * (v44 + 3) + 1) = v48;
                    HIDWORD(v129) = v44 + 4;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v42 + 16))(v42, &WebCore::LogEME, 1, &v128);
                    v49 = v128;
                    if (HIDWORD(v129))
                    {
                      v50 = 16 * HIDWORD(v129);
                      v51 = (WTF::StringImpl **)((char *)v128 + 8);
                      do
                      {
                        v52 = *v51;
                        *v51 = 0;
                        if (v52)
                        {
                          if (*(_DWORD *)v52 == 2)
                            WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v30);
                          else
                            *(_DWORD *)v52 -= 2;
                        }
                        v51 += 2;
                        v50 -= 16;
                      }
                      while (v50);
                      v49 = v128;
                    }
                    if (v49)
                    {
                      v128 = 0;
                      LODWORD(v129) = 0;
                      WTF::fastFree(v49, v30);
                    }
                    v53 = (WTF::StringImpl *)v149[0];
                    v149[0] = 0;
                    if (v53)
                    {
                      if (*(_DWORD *)v53 == 2)
                        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v30);
                      else
                        *(_DWORD *)v53 -= 2;
                    }
                    v54 = v147;
                    v147 = 0;
                    if (v54)
                    {
                      if (*(_DWORD *)v54 == 2)
                        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v30);
                      else
                        *(_DWORD *)v54 -= 2;
                    }
                    v55 = v145;
                    v145 = 0;
                    if (v55)
                    {
                      if (*(_DWORD *)v55 == 2)
                        WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v30);
                      else
                        *(_DWORD *)v55 -= 2;
                    }
                    v56 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v56)
                    {
                      if (*(_DWORD *)v56 == 2)
                        WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v30);
                      else
                        *(_DWORD *)v56 -= 2;
                    }
                    ++v41;
                  }
                  while (v41 != (uint64_t *)v126);
                }
                v57 = __ldxr(v32);
                if (v57 == 1)
                {
                  if (!__stlxr(0, v32))
                    break;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v87 = v134;
        v134 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v30);
          else
            *(_DWORD *)v87 -= 2;
        }
LABEL_159:
        v88 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v88 = 1;
        *(_QWORD *)(v88 + 8) = v88 + 24;
        *(_QWORD *)(v88 + 16) = 1;
        *(_QWORD *)(v88 + 48) = 0;
        *(_BYTE *)(v88 + 40) = 1;
        *(_QWORD *)&buf = v88;
        v38 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v38 + 16))(v38, &buf, MEMORY[0x1E0CBF738], 0, 0);
        goto LABEL_160;
      }
LABEL_235:
      __break(0xC471u);
      return;
    }
  }
  else if ((_DWORD)a2 == 2
         && (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 72) || !PAL::getAVPersistableContentKeyRequestClass[0]((PAL *)a1)))
  {
    goto LABEL_20;
  }
  v11 = *(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(a1 + 48);
  if (!*((_QWORD *)v11 + 8))
  {
    v35 = *(_QWORD *)(a1 + 272);
    v36 = *(WTF::StringImpl **)(a1 + 280);
    *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
    *((_QWORD *)&buf + 1) = 43;
    v144 = "requestLicense";
    v145 = v36;
    if (*(_BYTE *)(v35 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, " false, no serverCertificate");
    goto LABEL_51;
  }
  if (*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 56))
    goto LABEL_11;
  v94 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(v11);
  if (v94)
  {
    WebCore::ContentKeyGroupFactoryAVFObjC::createContentKeyGroup(a3, v94, a1 + 32, (WebAVContentKeyGroup **)&buf);
    v95 = buf;
    *(_QWORD *)&buf = 0;
    v96 = *(const void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v95;
    if (v96)
    {
      CFRelease(v96);
      v97 = (const void *)buf;
      *(_QWORD *)&buf = 0;
      if (v97)
        CFRelease(v97);
    }
    goto LABEL_11;
  }
  v112 = *(_QWORD *)(a1 + 48);
  v113 = *(_QWORD *)(v112 + 80);
  v114 = WebCore::s_sampleBufferContentKeySessionSupportEnabled;
  if (*(_BYTE *)(v112 + 72))
    v115 = v113 == 0;
  else
    v115 = 1;
  v116 = !v115;
  v117 = (void *)PAL::getAVContentKeySessionClass[0](0);
  if (v114)
  {
    if ((v116 & 1) != 0)
      v118 = (void *)objc_msgSend(v117, "contentKeySessionWithKeySystem:storageDirectoryAtURL:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming, v113);
    else
      v118 = (void *)objc_msgSend(v117, "contentKeySessionWithKeySystem:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming);
  }
  else
  {
    if ((v116 & 1) != 0)
      v119 = v113;
    else
      v119 = 0;
    v118 = (void *)objc_msgSend(v117, "contentKeySessionWithLegacyWebKitCompatibilityModeAndKeySystem:storageDirectoryAtURL:", PAL::constantAVFoundationAVContentKeySystemFairPlayStreaming, v119);
  }
  v120 = v118;
  if (v118)
    CFRetain(v118);
  v121 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v120;
  if (v121)
  {
    CFRelease(v121);
    v120 = *(void **)(a1 + 64);
  }
  if (!v120)
  {
    v122 = *(_QWORD *)(a1 + 272);
    v123 = *(WTF::StringImpl **)(a1 + 280);
    *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
    *((_QWORD *)&buf + 1) = 43;
    v144 = "requestLicense";
    v145 = v123;
    if (*(_BYTE *)(v122 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [49]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, " false, could not create session or group object");
LABEL_51:
    v37 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = v37 + 24;
    *(_QWORD *)(v37 + 16) = 1;
    *(_QWORD *)(v37 + 48) = 0;
    *(_BYTE *)(v37 + 40) = 1;
    *(_QWORD *)&buf = v37;
    v38 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v38 + 16))(v38, &buf, MEMORY[0x1E0CBF738], 0, 0);
LABEL_160:
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, v89);
    return;
  }
  objc_msgSend(v120, "setDelegate:queue:", *(_QWORD *)(a1 + 104), MEMORY[0x1E0C80D38]);
LABEL_11:
  v12 = *(_QWORD *)(a1 + 48);
  isa = (uint64_t)a5->super.isa;
  v16 = *(_QWORD *)(v12 + 104);
  v15 = (uint64_t *)(v12 + 104);
  v14 = v16;
  p_isa = &a5->super.isa;
  if (v16)
  {
    v17 = *(unsigned int *)(v14 - 4);
    v18 = (AVContentKeyRequest **)(v14 + 8 * v17);
    if (*(_DWORD *)(v14 - 12))
    {
      v19 = (AVContentKeyRequest **)v14;
      if ((_DWORD)v17)
      {
        v20 = 8 * v17;
        v19 = (AVContentKeyRequest **)v14;
        do
        {
          if ((unint64_t)&(*v19)->super.isa + 1 > 1)
            goto LABEL_18;
          ++v19;
          v20 -= 8;
        }
        while (v20);
        v19 = v18;
      }
LABEL_18:
      if (v14)
        goto LABEL_96;
      goto LABEL_97;
    }
    v19 = (AVContentKeyRequest **)(v14 + 8 * v17);
  }
  else
  {
    v19 = 0;
    v17 = 0;
  }
  v18 = (AVContentKeyRequest **)(v14 + 8 * v17);
  if (v14)
    goto LABEL_96;
  while (1)
  {
LABEL_97:
    if (v19 == (AVContentKeyRequest **)v14)
      goto LABEL_138;
    WebCore::initTypeForRequest((WebCore *)&buf, *v19);
    WebCore::initializationDataForRequest((WebCore *)v127, *v19);
    v59 = *a4;
    v60 = (WTF::StringImpl *)buf;
    if (*a4 == (WTF::StringImpl *)buf)
    {
      WebCore::FragmentedSharedBuffer::operator==(isa, (uint64_t)v127[0]);
      if ((v62 & 1) != 0)
      {
        v63 = *v15;
        if (*v15)
          v63 += 8 * *(unsigned int *)(v63 - 4);
        if ((AVContentKeyRequest **)v63 == v19)
        {
          a5 = 0;
        }
        else
        {
          a5 = *v19;
          *v19 = 0;
          v64 = (AVContentKeyRequest **)*v15;
          if (!*v15 || (v64 += *((unsigned int *)v64 - 1), v64 != v19))
          {
            if (v64 != v19)
            {
              *v19 = (AVContentKeyRequest *)-1;
              ++*(_DWORD *)(*v15 - 16);
              v65 = *v15;
              v66 = *v15 ? *(_DWORD *)(v65 - 12) - 1 : -1;
              *(_DWORD *)(v65 - 12) = v66;
              v67 = *v15;
              if (*v15)
              {
                v68 = 6 * *(_DWORD *)(v67 - 12);
                v69 = *(_DWORD *)(v67 - 4);
                if (v68 < v69 && v69 >= 9)
                  WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<AVContentKeyRequest>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(v15, v69 >> 1);
              }
            }
          }
        }
        v61 = 0;
        v60 = (WTF::StringImpl *)buf;
      }
      else
      {
        v61 = 1;
        v60 = v59;
      }
    }
    else
    {
      v61 = 1;
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v127, v58);
    if (!v60)
      goto LABEL_120;
    if (*(_DWORD *)v60 == 2)
      break;
    *(_DWORD *)v60 -= 2;
LABEL_120:
    if ((v61 & 1) == 0)
      goto LABEL_129;
LABEL_121:
    v71 = v19 + 1;
    v19 = v18;
    if (v71 != v18)
    {
      v19 = v71;
      while ((unint64_t)&(*v19)->super.isa + 1 <= 1)
      {
        if (++v19 == v18)
        {
          v19 = v18;
          break;
        }
      }
    }
    v14 = *v15;
    if (*v15)
LABEL_96:
      v14 += 8 * *(unsigned int *)(v14 - 4);
  }
  WTF::StringImpl::destroy(v60, v70);
  if ((v61 & 1) != 0)
    goto LABEL_121;
LABEL_129:
  if (a5)
  {
    v72 = *(_QWORD *)(a1 + 272);
    v73 = *(WTF::StringImpl **)(a1 + 280);
    *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
    *((_QWORD *)&buf + 1) = 43;
    v144 = "requestLicense";
    v145 = v73;
    if (*(_BYTE *)(v72 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, " found unexpectedRequest matching initData");
    v74 = *(void **)(a1 + 56);
    if (v74)
      objc_msgSend(v74, "associateContentKeyRequest:", a5);
    v75 = *a6;
    *a6 = 0;
    v76 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v75;
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)a1, a5);
    v77 = a5;
    goto LABEL_137;
  }
LABEL_138:
  {
    v78 = WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v78 = buf;
    WebCore::CDMPrivateFairPlayStreaming::sinfName(void)::sinf = buf;
  }
  v79 = *a4;
  if (*a4 == (WTF::StringImpl *)v78)
    goto LABEL_153;
  {
    v80 = WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v80 = buf;
    WebCore::CDMPrivateFairPlayStreaming::skdName(void)::skd = buf;
    v79 = *a4;
  }
  if (v79 == (WTF::StringImpl *)v80)
  {
    v90 = objc_alloc(MEMORY[0x1E0CB3940]);
    WebCore::FragmentedSharedBuffer::makeContiguous(*p_isa, v127);
    WebCore::SharedBuffer::createNSData(v127[0], (WebCoreSharedBufferData **)&buf);
    v92 = objc_msgSend(v90, "initWithData:encoding:", (_QWORD)buf, 4);
    v93 = (const void *)buf;
    *(_QWORD *)&buf = 0;
    if (v93)
      CFRelease(v93);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v127, v91);
    v85 = 0;
    goto LABEL_179;
  }
  {
    v81 = WebCore::InitDataRegistry::cencName(void)::sinf;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v81 = buf;
    WebCore::InitDataRegistry::cencName(void)::sinf = buf;
    v79 = *a4;
  }
  if (v79 == (WTF::StringImpl *)v81)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(*p_isa, &v128);
    if (*((_DWORD *)v128 + 5))
    {
      v98 = *(_QWORD *)(*((_QWORD *)v128 + 1) + 8);
      v99 = *(unsigned int *)(v98 + 24);
      if ((_DWORD)v99 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_235;
      }
      *(_QWORD *)&buf = &v136;
      ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v99])(&buf, v98 + 8);
    }
    WTF::base64EncodeToString();
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v128, v100);
    v101 = (void *)MEMORY[0x1E0CB36D8];
    v141 = CFSTR("pssh");
    if (v127[0])
      v102 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v102 = &stru_1E3487BC0;
    v142 = v102;
    v103 = (const void *)objc_msgSend(v101, "dataWithJSONObject:options:error:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v142, &v141, 1), 1, 0);
    v85 = v103;
    if (v103)
      CFRetain(v103);
    v105 = v127[0];
    v127[0] = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v104);
      else
        *(_DWORD *)v105 -= 2;
    }
    goto LABEL_178;
  }
  {
    v82 = WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v82 = buf;
    WebCore::CDMPrivateFairPlayStreaming::mptsName(void)::mpts = buf;
    v79 = *a4;
  }
  if (v79 != (WTF::StringImpl *)v82)
  {
    v83 = *(_QWORD *)(a1 + 272);
    v84 = *(WTF::StringImpl **)(a1 + 280);
    *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
    *((_QWORD *)&buf + 1) = 43;
    v144 = "requestLicense";
    v145 = v84;
    if (*(_BYTE *)(v83 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, " false, initDataType not suppported");
    goto LABEL_159;
  }
LABEL_153:
  WebCore::FragmentedSharedBuffer::makeContiguous(*p_isa, v127);
  WebCore::SharedBuffer::createNSData(v127[0], (WebCoreSharedBufferData **)&buf);
  v85 = (const void *)buf;
  *(_QWORD *)&buf = 0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v127, v86);
LABEL_178:
  v92 = 0;
LABEL_179:
  v106 = *(_QWORD *)(a1 + 272);
  v107 = *(WTF::StringImpl **)(a1 + 280);
  *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
  *((_QWORD *)&buf + 1) = 43;
  v144 = "requestLicense";
  v145 = v107;
  if (*(_BYTE *)(v106 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, " processing request");
  v108 = *a6;
  *a6 = 0;
  v109 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v108;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  if (*(_QWORD *)(a1 + 56))
  {
    v140[0] = *(_QWORD *)(a1 + 56);
    v139[0] = CFSTR("ContentKeyReportGroup");
    v139[1] = CFSTR("InitializationDataType");
    if (*a4)
      v110 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v110 = &stru_1E3487BC0;
    v140[1] = v110;
    objc_msgSend(*(id *)(a1 + 56), "processContentKeyRequestWithIdentifier:initializationData:options:", v92, v85, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v140, v139, 2));
  }
  else
  {
    v137 = CFSTR("InitializationDataType");
    if (*a4)
      v111 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v111 = &stru_1E3487BC0;
    v138 = v111;
    objc_msgSend(*(id *)(a1 + 64), "processContentKeyRequestWithIdentifier:initializationData:options:", v92, v85, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v138, &v137, 1));
  }
  if (!v85)
  {
    if (!v92)
      return;
LABEL_225:
    v77 = (const void *)v92;
LABEL_137:
    CFRelease(v77);
    return;
  }
  CFRelease(v85);
  if (v92)
    goto LABEL_225;
}

void sub_1946BB270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v28;

  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)(v26 - 160), v28);
  _Unwind_Resume(a1);
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::logger(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 34);
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::logIdentifier(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 35);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateLicense(uint64_t a1, uint64_t a2, uint64_t a3, WTF **a4, _QWORD *a5)
{
  WebCore *v8;
  WTF::StringImpl *v9;
  const WTF::String *v10;
  int isEqual;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  WTF *v59;
  CFTypeRef v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::Logger *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::Logger *v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  int v76;
  WebCore *v77;
  WTF::StringImpl *v78;
  const WTF::String *v79;
  int v80;
  WTF::StringImpl *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  _DWORD *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *types;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  WTF *v108;
  PAL *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  const void *v117;
  objc_method_description MethodDescription;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  WTF *v153;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const void *v161;
  const void *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  WTF *v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  WTF *v187;
  WTF *v189;
  _QWORD *v190;
  uint64_t v191;
  const void **v192;
  uint64_t v193;
  const void *v194;
  uint64_t v195;
  uint64_t v196;
  PAL *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  WTF *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  WTF *v219;
  int v220;
  WTF::Logger *v221;
  WTF::Logger *v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  WTF *v233;
  uint64_t v235;
  WTF::JSONImpl::ObjectBase **v236;
  WTF::JSONImpl::ObjectBase *v237;
  int v238;
  unsigned int v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  uint64_t v242;
  void *v243;
  void *v244;
  unint64_t v245;
  unint64_t v246;
  __n128 v247;
  char v248;
  char v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int *v262;
  uint64_t v263;
  WTF *v264;
  uint64_t v266;
  WTF::StringImpl *v267;
  int v268;
  WTF::StringImpl *v269;
  const WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  int i;
  uint64_t v277;
  WTF *v278;
  uint64_t v279;
  uint64_t v280;
  const WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  int v286;
  int j;
  uint64_t v288;
  WTF *v289;
  uint64_t v290;
  uint64_t v291;
  BOOL v292;
  int v293;
  uint64_t v294;
  const void *v295;
  uint64_t v296;
  void *v297;
  uint64_t *v298;
  void *v299;
  void *v300;
  void *v301;
  CFTypeRef v302;
  void *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  WTF *v306;
  WTF::StringImpl *v307;
  int v308;
  int v309;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  WTF *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  WTF::JSONImpl::ObjectBase **v321;
  _QWORD *v322;
  uint64_t v323;
  CFTypeRef cf;
  char v325;
  WTF::StringImpl *v326;
  uint64_t v327;
  const char *v328;
  uint64_t v329;
  WebCore::SharedBuffer *v330;
  WebCore::FragmentedSharedBuffer *v331;
  WTF::StringImpl *v332;
  WTF::Logger *v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  WTF::StringImpl *v336;
  __int128 buf;
  const char *v338;
  _QWORD v339[3];

  v339[1] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 124))
    goto LABEL_111;
  v8 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = (WTF::StringImpl *)buf;
  v326 = (WTF::StringImpl *)buf;
  isEqual = WebCore::isEqual(v8, &v326, v10);
  v13 = isEqual;
  if (!v9)
    goto LABEL_5;
  if (*(_DWORD *)v9 != 2)
  {
    *(_DWORD *)v9 -= 2;
LABEL_5:
    if (isEqual)
      goto LABEL_6;
    goto LABEL_111;
  }
  WTF::StringImpl::destroy(v9, v12);
  if (v13)
  {
LABEL_6:
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(WTF **)(v14 + 64);
    v16 = *(_QWORD *)(v14 + 80);
    v17 = *(_QWORD *)(a1 + 272);
    if (v15)
      v18 = v16 == 0;
    else
      v18 = 1;
    if (!v18)
    {
      v35 = *(_QWORD *)(a1 + 280);
      *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
      *((_QWORD *)&buf + 1) = 43;
      v338 = "updateLicense";
      v339[0] = v35;
      if (*(_BYTE *)(v17 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [59]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "\"acknowledged\", Succeeded, removing expired session report");
      v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 124));
      v37 = *(unsigned int *)(a1 + 124);
      if ((_DWORD)v37)
      {
        v38 = *(_QWORD **)(a1 + 112);
        v39 = 8 * v37;
        do
        {
          if (*v38)
            objc_msgSend(v36, "addObject:");
          ++v38;
          v39 -= 8;
        }
        while (v39);
      }
      WebCore::FragmentedSharedBuffer::makeContiguous(v15, &buf);
      WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)buf, (WebCoreSharedBufferData **)&cf);
      v41 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, v40);
      v42 = (void *)PAL::getAVContentKeySessionClass[0]((PAL *)v41);
      objc_msgSend(v42, "removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:", v36, cf, v16);
      LOBYTE(buf) = 0;
      LOBYTE(v338) = 0;
      LOBYTE(v333) = 0;
      LOBYTE(v334) = 0;
      LOBYTE(v326) = 0;
      LOBYTE(v328) = 0;
      v43 = *a5;
      *a5 = 0;
      (*(void (**)(uint64_t, _QWORD, __int128 *, WTF::Logger **, WTF::StringImpl **, uint64_t))(*(_QWORD *)v43 + 16))(v43, 0, &buf, &v333, &v326, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      if ((_BYTE)v328)
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, v44);
      if ((_BYTE)v338)
      {
        if (HIDWORD(buf))
        {
          v45 = (uint64_t *)buf;
          v46 = (uint64_t *)(buf + 16 * HIDWORD(buf));
          do
          {
            v47 = *v45;
            *v45 = 0;
            if (v47)
            {
              do
              {
                v48 = __ldaxr((unsigned int *)v47);
                v49 = v48 - 1;
              }
              while (__stlxr(v49, (unsigned int *)v47));
              if (!v49)
              {
                atomic_store(1u, (unsigned int *)v47);
                v50 = *(unsigned int *)(v47 + 20);
                if ((_DWORD)v50)
                {
                  v51 = *(_QWORD *)(v47 + 8);
                  v52 = v51 + 16 * v50;
                  do
                  {
                    v53 = *(unsigned int **)(v51 + 8);
                    *(_QWORD *)(v51 + 8) = 0;
                    if (v53)
                    {
                      do
                      {
                        v54 = __ldaxr(v53);
                        v55 = v54 - 1;
                      }
                      while (__stlxr(v55, v53));
                      if (!v55)
                      {
                        atomic_store(1u, v53);
                        v56 = v53[6];
                        if ((_DWORD)v56 != -1)
                          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E31F7A98[v56])(&v326, v53 + 2);
                        v53[6] = -1;
                        WTF::fastFree((WTF *)v53, v44);
                      }
                    }
                    v51 += 16;
                  }
                  while (v51 != v52);
                }
                v57 = *(WTF **)(v47 + 8);
                if ((WTF *)(v47 + 24) != v57 && v57 != 0)
                {
                  *(_QWORD *)(v47 + 8) = 0;
                  *(_DWORD *)(v47 + 16) = 0;
                  WTF::fastFree(v57, v44);
                }
                WTF::fastFree((WTF *)v47, v44);
              }
            }
            v45 += 2;
          }
          while (v45 != v46);
        }
        v59 = (WTF *)buf;
        if ((_QWORD)buf)
        {
          *(_QWORD *)&buf = 0;
          DWORD2(buf) = 0;
          WTF::fastFree(v59, v44);
        }
      }
      v60 = cf;
      cf = 0;
      if (v60)
      {
        CFRelease(v60);
        if (v36)
          goto LABEL_80;
      }
      else if (v36)
      {
LABEL_80:
        CFRelease(v36);
        return;
      }
      return;
    }
    v19 = *(_QWORD *)(a1 + 280);
    v326 = (WTF::StringImpl *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
    v327 = 43;
    v328 = "updateLicense";
    v329 = v19;
    if (!*(_BYTE *)(v17 + 12))
      goto LABEL_255;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v326);
    WTF::String::String((WTF::String *)&v335, "\"acknowledged\", Failed, no certificate and storageURL");
    if (v336)
    {
      v20 = *((_DWORD *)v336 + 1);
      if (v335)
      {
LABEL_14:
        v21 = *((_DWORD *)v335 + 1);
LABEL_15:
        if ((v21 | v20) < 0)
          goto LABEL_540;
        v22 = (v20 + v21);
        if (__OFADD__(v20, v21))
          goto LABEL_540;
        if (v336)
        {
          v23 = *((_DWORD *)v336 + 4);
          v24 = (v23 >> 2) & 1;
          if (v335 && (v23 & 4) != 0)
            goto LABEL_20;
        }
        else
        {
          if (v335)
          {
LABEL_20:
            v24 = (*((unsigned __int8 *)v335 + 16) >> 2) & 1;
            goto LABEL_21;
          }
          v24 = 1;
        }
LABEL_21:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v22, v24, (uint64_t)v336, (uint64_t)v335, &buf);
        cf = (CFTypeRef)buf;
        if ((_QWORD)buf)
        {
          v26 = v335;
          v335 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v25);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v336;
          v336 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v25);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = qword_1ECE7CE30;
          v29 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v29)
          {
            WTF::String::utf8();
            v31 = v333 ? (char *)v333 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v31;
            _os_log_impl(&dword_1940B8000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v29 = (uint64_t)v333;
            v333 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
                v29 = WTF::fastFree((WTF *)v29, v30);
              else
                --*(_DWORD *)v29;
            }
          }
          if (WebCore::LogEME && byte_1ECE7CE20)
          {
            v32 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v33 = *v32;
              if ((v33 & 1) != 0)
                break;
              v34 = __ldaxr(v32);
              if (v34 == v33)
              {
                if (!__stxr(v33 | 1, v32))
                {
                  v61 = WTF::Logger::observers((WTF::Logger *)v29);
                  v62 = *(unsigned int *)(v61 + 12);
                  if ((_DWORD)v62)
                  {
                    v63 = *(uint64_t **)v61;
                    v64 = *(_QWORD *)v61 + 8 * v62;
                    do
                    {
                      v65 = *v63;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v326);
                      LODWORD(v338) = 0;
                      WTF::String::String((WTF::String *)v339, "\"acknowledged\", Failed, no certificate and storageURL");
                      v333 = 0;
                      v334 = 0;
                      v66 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v334) = 2;
                      v333 = v66;
                      v67 = HIDWORD(v334);
                      *((_DWORD *)v66 + 4 * HIDWORD(v334)) = buf;
                      v68 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v66 + 2 * v67 + 1) = v68;
                      *((_DWORD *)v66 + 4 * (v67 + 1)) = (_DWORD)v338;
                      v69 = v339[0];
                      if (v339[0])
                        *(_DWORD *)v339[0] += 2;
                      *((_QWORD *)v66 + 2 * (v67 + 1) + 1) = v69;
                      HIDWORD(v334) = v67 + 2;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v65 + 16))(v65, &WebCore::LogEME, 1, &v333);
                      v70 = v333;
                      if (HIDWORD(v334))
                      {
                        v71 = 16 * HIDWORD(v334);
                        v72 = (WTF::StringImpl **)((char *)v333 + 8);
                        do
                        {
                          v73 = *v72;
                          *v72 = 0;
                          if (v73)
                          {
                            if (*(_DWORD *)v73 == 2)
                              WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v30);
                            else
                              *(_DWORD *)v73 -= 2;
                          }
                          v72 += 2;
                          v71 -= 16;
                        }
                        while (v71);
                        v70 = v333;
                      }
                      if (v70)
                      {
                        v333 = 0;
                        LODWORD(v334) = 0;
                        WTF::fastFree(v70, v30);
                      }
                      v74 = (WTF::StringImpl *)v339[0];
                      v339[0] = 0;
                      if (v74)
                      {
                        if (*(_DWORD *)v74 == 2)
                          WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v30);
                        else
                          *(_DWORD *)v74 -= 2;
                      }
                      v75 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v75)
                      {
                        if (*(_DWORD *)v75 == 2)
                          WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v30);
                        else
                          *(_DWORD *)v75 -= 2;
                      }
                      ++v63;
                    }
                    while (v63 != (uint64_t *)v64);
                  }
                  v76 = __ldxr(v32);
                  if (v76 == 1)
                  {
                    if (!__stlxr(0, v32))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v173 = (WTF::StringImpl *)cf;
          cf = 0;
          if (v173)
          {
            if (*(_DWORD *)v173 == 2)
              WTF::StringImpl::destroy(v173, (WTF::StringImpl *)v30);
            else
              *(_DWORD *)v173 -= 2;
          }
LABEL_255:
          LOBYTE(buf) = 0;
          LOBYTE(v338) = 0;
          LOBYTE(v333) = 0;
          LOBYTE(v334) = 0;
          LOBYTE(v326) = 0;
          LOBYTE(v328) = 0;
          v174 = *a5;
          *a5 = 0;
          (*(void (**)(uint64_t, _QWORD, __int128 *, WTF::Logger **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v174 + 16))(v174, 0, &buf, &v333, &v326, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
          if ((_BYTE)v328)
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
          if (!(_BYTE)v338)
            return;
          if (HIDWORD(buf))
          {
            v175 = (uint64_t *)buf;
            v176 = (uint64_t *)(buf + 16 * HIDWORD(buf));
            do
            {
              v177 = *v175;
              *v175 = 0;
              if (v177)
              {
                do
                {
                  v178 = __ldaxr((unsigned int *)v177);
                  v179 = v178 - 1;
                }
                while (__stlxr(v179, (unsigned int *)v177));
                if (!v179)
                {
                  atomic_store(1u, (unsigned int *)v177);
                  v180 = *(unsigned int *)(v177 + 20);
                  if ((_DWORD)v180)
                  {
                    v181 = *(_QWORD *)(v177 + 8);
                    v182 = v181 + 16 * v180;
                    do
                    {
                      v183 = *(unsigned int **)(v181 + 8);
                      *(_QWORD *)(v181 + 8) = 0;
                      if (v183)
                      {
                        do
                        {
                          v184 = __ldaxr(v183);
                          v185 = v184 - 1;
                        }
                        while (__stlxr(v185, v183));
                        if (!v185)
                        {
                          atomic_store(1u, v183);
                          v186 = v183[6];
                          if ((_DWORD)v186 != -1)
                            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E31F7A98[v186])(&v326, v183 + 2);
                          v183[6] = -1;
                          WTF::fastFree((WTF *)v183, types);
                        }
                      }
                      v181 += 16;
                    }
                    while (v181 != v182);
                  }
                  v187 = *(WTF **)(v177 + 8);
                  if ((WTF *)(v177 + 24) != v187 && v187 != 0)
                  {
                    *(_QWORD *)(v177 + 8) = 0;
                    *(_DWORD *)(v177 + 16) = 0;
                    WTF::fastFree(v187, types);
                  }
                  WTF::fastFree((WTF *)v177, types);
                }
              }
              v175 += 2;
            }
            while (v175 != v176);
          }
          goto LABEL_281;
        }
LABEL_540:
        __break(0xC471u);
        JUMPOUT(0x1946BD490);
      }
    }
    else
    {
      v20 = 0;
      if (v335)
        goto LABEL_14;
    }
    v21 = 0;
    goto LABEL_15;
  }
LABEL_111:
  if (!*(_DWORD *)(a1 + 204))
    goto LABEL_155;
  v77 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v78 = (WTF::StringImpl *)buf;
  v326 = (WTF::StringImpl *)buf;
  v80 = WebCore::isEqual(v77, &v326, v79);
  v82 = v80;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::destroy(v78, v81);
      if (v82)
        goto LABEL_116;
LABEL_155:
      if (!*(_BYTE *)(a1 + 96))
      {
        v121 = *(_QWORD *)(a1 + 272);
        v122 = *(_QWORD *)(a1 + 280);
        *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
        *((_QWORD *)&buf + 1) = 43;
        v338 = "updateLicense";
        v339[0] = v122;
        if (*(_BYTE *)(v121 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [27]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, " Failed, no currentRequest");
        LOBYTE(buf) = 0;
        LOBYTE(v338) = 0;
        LOBYTE(v333) = 0;
        LOBYTE(v334) = 0;
        LOBYTE(v326) = 0;
        LOBYTE(v328) = 0;
        v123 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _QWORD, __int128 *, WTF::Logger **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v123 + 16))(v123, 0, &buf, &v333, &v326, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
        if ((_BYTE)v328)
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
        if (!(_BYTE)v338)
          return;
        if (HIDWORD(buf))
        {
          v124 = (uint64_t *)buf;
          v125 = (uint64_t *)(buf + 16 * HIDWORD(buf));
          do
          {
            v126 = *v124;
            *v124 = 0;
            if (v126)
            {
              do
              {
                v127 = __ldaxr((unsigned int *)v126);
                v128 = v127 - 1;
              }
              while (__stlxr(v128, (unsigned int *)v126));
              if (!v128)
              {
                atomic_store(1u, (unsigned int *)v126);
                v129 = *(unsigned int *)(v126 + 20);
                if ((_DWORD)v129)
                {
                  v130 = *(_QWORD *)(v126 + 8);
                  v131 = v130 + 16 * v129;
                  do
                  {
                    v132 = *(unsigned int **)(v130 + 8);
                    *(_QWORD *)(v130 + 8) = 0;
                    if (v132)
                    {
                      do
                      {
                        v133 = __ldaxr(v132);
                        v134 = v133 - 1;
                      }
                      while (__stlxr(v134, v132));
                      if (!v134)
                      {
                        atomic_store(1u, v132);
                        v135 = v132[6];
                        if ((_DWORD)v135 != -1)
                          ((void (*)(WTF::StringImpl **, unsigned int *))off_1E31F7A98[v135])(&v326, v132 + 2);
                        v132[6] = -1;
                        WTF::fastFree((WTF *)v132, types);
                      }
                    }
                    v130 += 16;
                  }
                  while (v130 != v131);
                }
                v136 = *(WTF **)(v126 + 8);
                if ((WTF *)(v126 + 24) != v136 && v136 != 0)
                {
                  *(_QWORD *)(v126 + 8) = 0;
                  *(_DWORD *)(v126 + 16) = 0;
                  WTF::fastFree(v136, types);
                }
                WTF::fastFree((WTF *)v126, types);
              }
            }
            v124 += 2;
          }
          while (v124 != v125);
        }
        goto LABEL_281;
      }
      v110 = WebCore::keyIDsForRequest((WTF *)&v333, *(WebCore::CDMPrivateFairPlayStreaming ***)(a1 + 80), *(_DWORD *)(a1 + 92));
      if (!HIDWORD(v334))
      {
        v138 = *(_QWORD *)(a1 + 272);
        v139 = *(_QWORD *)(a1 + 280);
        *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
        *((_QWORD *)&buf + 1) = 43;
        v338 = "updateLicense";
        v339[0] = v139;
        if (*(_BYTE *)(v138 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, " Failed, no keyIDs in currentRequest");
        LOBYTE(buf) = 0;
        LOBYTE(v338) = 0;
        LOBYTE(cf) = 0;
        v325 = 0;
        LOBYTE(v326) = 0;
        LOBYTE(v328) = 0;
        v140 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _QWORD, __int128 *, CFTypeRef *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v140 + 16))(v140, 0, &buf, &cf, &v326, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
        if ((_BYTE)v328)
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
        if ((_BYTE)v338)
        {
          if (HIDWORD(buf))
          {
            v141 = (uint64_t *)buf;
            v142 = (uint64_t *)(buf + 16 * HIDWORD(buf));
            do
            {
              v143 = *v141;
              *v141 = 0;
              if (v143)
              {
                do
                {
                  v144 = __ldaxr((unsigned int *)v143);
                  v145 = v144 - 1;
                }
                while (__stlxr(v145, (unsigned int *)v143));
                if (!v145)
                {
                  atomic_store(1u, (unsigned int *)v143);
                  v146 = *(unsigned int *)(v143 + 20);
                  if ((_DWORD)v146)
                  {
                    v147 = *(_QWORD *)(v143 + 8);
                    v148 = v147 + 16 * v146;
                    do
                    {
                      v149 = *(unsigned int **)(v147 + 8);
                      *(_QWORD *)(v147 + 8) = 0;
                      if (v149)
                      {
                        do
                        {
                          v150 = __ldaxr(v149);
                          v151 = v150 - 1;
                        }
                        while (__stlxr(v151, v149));
                        if (!v151)
                        {
                          atomic_store(1u, v149);
                          v152 = v149[6];
                          if ((_DWORD)v152 != -1)
                            ((void (*)(WTF::StringImpl **, unsigned int *))off_1E31F7A98[v152])(&v326, v149 + 2);
                          v149[6] = -1;
                          WTF::fastFree((WTF *)v149, types);
                        }
                      }
                      v147 += 16;
                    }
                    while (v147 != v148);
                  }
                  v153 = *(WTF **)(v143 + 8);
                  if ((WTF *)(v143 + 24) != v153 && v153 != 0)
                  {
                    *(_QWORD *)(v143 + 8) = 0;
                    *(_DWORD *)(v143 + 16) = 0;
                    WTF::fastFree(v153, types);
                  }
                  WTF::fastFree((WTF *)v143, types);
                }
              }
              v141 += 2;
            }
            while (v141 != v142);
          }
LABEL_248:
          v172 = (WTF *)buf;
          if ((_QWORD)buf)
          {
            *(_QWORD *)&buf = 0;
            DWORD2(buf) = 0;
            WTF::fastFree(v172, types);
          }
        }
LABEL_335:
        v221 = v333;
        if (HIDWORD(v334))
        {
          v222 = (WTF::Logger *)((char *)v333 + 8 * HIDWORD(v334));
          do
          {
            v223 = *(_QWORD *)v221;
            *(_QWORD *)v221 = 0;
            if (v223)
            {
              do
              {
                v224 = __ldaxr((unsigned int *)v223);
                v225 = v224 - 1;
              }
              while (__stlxr(v225, (unsigned int *)v223));
              if (!v225)
              {
                atomic_store(1u, (unsigned int *)v223);
                v226 = *(unsigned int *)(v223 + 20);
                if ((_DWORD)v226)
                {
                  v227 = *(_QWORD *)(v223 + 8);
                  v228 = v227 + 16 * v226;
                  do
                  {
                    v229 = *(unsigned int **)(v227 + 8);
                    *(_QWORD *)(v227 + 8) = 0;
                    if (v229)
                    {
                      do
                      {
                        v230 = __ldaxr(v229);
                        v231 = v230 - 1;
                      }
                      while (__stlxr(v231, v229));
                      if (!v231)
                      {
                        atomic_store(1u, v229);
                        v232 = v229[6];
                        if ((_DWORD)v232 != -1)
                          ((void (*)(__int128 *, unsigned int *))off_1E31F7A98[v232])(&buf, v229 + 2);
                        v229[6] = -1;
                        WTF::fastFree((WTF *)v229, types);
                      }
                    }
                    v227 += 16;
                  }
                  while (v227 != v228);
                }
                v233 = *(WTF **)(v223 + 8);
                if ((WTF *)(v223 + 24) != v233 && v233 != 0)
                {
                  *(_QWORD *)(v223 + 8) = 0;
                  *(_DWORD *)(v223 + 16) = 0;
                  WTF::fastFree(v233, types);
                }
                WTF::fastFree((WTF *)v223, types);
              }
            }
            v221 = (WTF::Logger *)((char *)v221 + 8);
          }
          while (v221 != v222);
          v221 = v333;
        }
        if (!v221)
          return;
        v189 = v221;
LABEL_360:
        WTF::fastFree(v189, types);
        return;
      }
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_535;
      {
        v111 = WebCore::InitDataRegistry::cencName(void)::sinf;
      }
      else
      {
        v110 = (PAL *)WTF::AtomStringImpl::add();
        v111 = buf;
        WebCore::InitDataRegistry::cencName(void)::sinf = buf;
      }
      if (*(_QWORD *)(a1 + 72) != v111)
      {
        v112 = *(_QWORD *)(a1 + 272);
        v113 = *(_QWORD *)(a1 + 280);
        *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
        *((_QWORD *)&buf + 1) = 43;
        v338 = "updateLicense";
        v339[0] = v113;
        if (*(_BYTE *)(v112 + 12))
          v110 = (PAL *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "'sinf' initData, processing response");
        if (*(_BYTE *)(a1 + 96))
        {
          if (!*(_DWORD *)(a1 + 92))
          {
            __break(0xC471u);
            JUMPOUT(0x1946BD498);
          }
          v114 = **(void ***)(a1 + 80);
          v115 = (void *)PAL::getAVContentKeyResponseClass[0](v110);
          WebCore::FragmentedSharedBuffer::makeContiguous(*a4, &v326);
          WebCore::SharedBuffer::createNSData(v326, (WebCoreSharedBufferData **)&buf);
          objc_msgSend(v114, "processContentKeyResponse:", objc_msgSend(v115, "contentKeyResponseWithFairPlayStreamingKeyResponseData:", (_QWORD)buf));
          v117 = (const void *)buf;
          *(_QWORD *)&buf = 0;
          if (v117)
            CFRelease(v117);
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v326, v116);
          goto LABEL_168;
        }
        goto LABEL_535;
      }
      v155 = *(_QWORD *)(a1 + 152);
      if (v155)
      {
        v156 = *(_QWORD *)(v155 + 8);
        LOBYTE(buf) = 0;
        BYTE8(buf) = 0;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v156 + 16))(v156, &buf);
        if (BYTE8(buf))
        {
          v158 = buf;
          if ((_QWORD)buf)
          {
            v159 = *(unsigned int *)(buf - 4);
            if ((_DWORD)v159)
            {
              v160 = buf;
              do
              {
                v161 = *(const void **)v160;
                if (*(_QWORD *)v160 != -1)
                {
                  v162 = *(const void **)(v160 + 8);
                  *(_QWORD *)(v160 + 8) = 0;
                  if (v162)
                  {
                    CFRelease(v162);
                    v161 = *(const void **)v160;
                  }
                  *(_QWORD *)v160 = 0;
                  if (v161)
                    CFRelease(v161);
                }
                v160 += 16;
                --v159;
              }
              while (v159);
            }
            WTF::fastFree((WTF *)(v158 - 16), v157);
          }
        }
        std::unique_ptr<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::UpdateResponseCollector>::reset[abi:sn180100]((WTF **)(a1 + 152), 0);
      }
      if (!*(_BYTE *)(a1 + 96))
      {
LABEL_535:
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_539:
        __break(1u);
        goto LABEL_540;
      }
      v200 = *(unsigned int *)(a1 + 92);
      v201 = *(_QWORD *)(a1 + 24);
      if (v201)
        goto LABEL_553;
      v201 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v201 = 1;
      *(_QWORD *)(v201 + 8) = a1 + 16;
      v203 = *(unsigned int **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v201;
      if (!v203)
        goto LABEL_553;
      do
      {
        v204 = __ldaxr(v203);
        v205 = v204 - 1;
      }
      while (__stlxr(v205, v203));
      if (!v205)
      {
        atomic_store(1u, v203);
        WTF::fastFree((WTF *)v203, v202);
      }
      v201 = *(_QWORD *)(a1 + 24);
      if (v201)
      {
LABEL_553:
        do
          v206 = __ldaxr((unsigned int *)v201);
        while (__stlxr(v206 + 1, (unsigned int *)v201));
      }
      v207 = (WTF *)WTF::fastMalloc((WTF *)0x18);
      v208 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v208 = &off_1E31F7A80;
      v208[1] = v201;
      v208[2] = a1;
      *(_QWORD *)v207 = v200;
      *((_QWORD *)v207 + 1) = v208;
      *((_QWORD *)v207 + 2) = 0;
      *(_QWORD *)&buf = 0;
      std::unique_ptr<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::UpdateResponseCollector>::reset[abi:sn180100]((WTF **)(a1 + 152), v207);
      std::unique_ptr<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::UpdateResponseCollector>::reset[abi:sn180100]((WTF **)&buf, 0);
      if (*((_DWORD *)*a4 + 13))
      {
        v323 = 0;
LABEL_322:
        LOBYTE(buf) = 0;
        LOBYTE(v338) = 0;
        LOBYTE(cf) = 0;
        v325 = 0;
        LOBYTE(v326) = 0;
        LOBYTE(v328) = 0;
        v216 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _QWORD, __int128 *, CFTypeRef *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v216 + 16))(v216, 0, &buf, &cf, &v326, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
        if ((_BYTE)v328)
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
        if (!(_BYTE)v338)
          goto LABEL_330;
        if (HIDWORD(buf))
        {
          v217 = (uint64_t *)buf;
          v218 = 16 * HIDWORD(buf);
          do
          {
            v217 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v217, types)+ 2;
            v218 -= 16;
          }
          while (v218);
        }
LABEL_328:
        v219 = (WTF *)buf;
        if ((_QWORD)buf)
        {
          *(_QWORD *)&buf = 0;
          DWORD2(buf) = 0;
          WTF::fastFree(v219, types);
        }
LABEL_330:
        v220 = 1;
        goto LABEL_331;
      }
      WebCore::FragmentedSharedBuffer::makeContiguous(*a4, &v326);
      if (*((_DWORD *)v326 + 5))
      {
        v209 = *(_QWORD *)(*((_QWORD *)v326 + 1) + 8);
        v210 = *(unsigned int *)(v209 + 24);
        if ((_DWORD)v210 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_544;
        }
        *(_QWORD *)&buf = &cf;
        ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v210])(&buf, v209 + 8);
      }
      WTF::JSONImpl::Value::parseJSON();
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v326, v211);
      if (!v323)
        goto LABEL_322;
      v212 = *(_DWORD *)(v323 + 4);
      if (v212 < 6)
      {
        LOBYTE(buf) = 0;
        LOBYTE(v338) = 0;
        LOBYTE(cf) = 0;
        v325 = 0;
        LOBYTE(v326) = 0;
        LOBYTE(v328) = 0;
        v213 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, _QWORD, __int128 *, CFTypeRef *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v213 + 16))(v213, 0, &buf, &cf, &v326, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
        if ((_BYTE)v328)
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
        if (!(_BYTE)v338)
          goto LABEL_330;
        if (HIDWORD(buf))
        {
          v214 = (uint64_t *)buf;
          v215 = 16 * HIDWORD(buf);
          do
          {
            v214 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v214, types)+ 2;
            v215 -= 16;
          }
          while (v215);
        }
        goto LABEL_328;
      }
      if (v212 != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1946BD480);
      }
      ++*(_DWORD *)v323;
      v235 = *(unsigned int *)(v323 + 28);
      if (!(_DWORD)v235)
        goto LABEL_504;
      v236 = *(WTF::JSONImpl::ObjectBase ***)(v323 + 16);
      v321 = &v236[v235];
      v322 = a5;
LABEL_376:
      v237 = *v236;
      v238 = *(_DWORD *)*v236;
      v239 = *((_DWORD *)*v236 + 1);
      *(_DWORD *)*v236 = v238 + 1;
      if (v239 == 5)
      {
        *(_DWORD *)v237 = v238 + 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v326 = (WTF::StringImpl *)buf;
        WTF::JSONImpl::ObjectBase::getString(v237, (const WTF::String *)&v326);
        v241 = v326;
        v326 = 0;
        if (v241)
        {
          if (*(_DWORD *)v241 == 2)
            WTF::StringImpl::destroy(v241, v240);
          else
            *(_DWORD *)v241 -= 2;
        }
        if (!v336)
        {
          if (*(_DWORD *)v237 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v237;
          goto LABEL_509;
        }
        WTF::base64Decode();
        if (!(_BYTE)v338)
        {
          v268 = 0;
          goto LABEL_486;
        }
        WebCore::FragmentedSharedBuffer::create(&buf, (uint64_t *)&v326);
        v242 = WTF::fastMalloc((WTF *)0x38);
        v335 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v242, (uint64_t *)&v326);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v326, v243);
        if (!*(_BYTE *)(a1 + 96))
          goto LABEL_538;
        if (!*(_DWORD *)(a1 + 92))
        {
          v268 = 0;
          goto LABEL_483;
        }
        v245 = 0;
        while (1)
        {
          WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest(*(WebCore::CDMPrivateFairPlayStreaming **)(*(_QWORD *)(a1 + 80) + 8 * v245), (uint64_t)&v326);
          if (HIDWORD(v327))
          {
            v246 = 0;
            while (1)
            {
              v247.n128_f64[0] = WebCore::FragmentedSharedBuffer::operator==(*((_QWORD *)v326 + v246), (uint64_t)v335);
              v249 = v248;
              if ((v248 & 1) != 0)
                break;
              ++v246;
              v250 = HIDWORD(v327);
              if (v246 >= HIDWORD(v327))
                goto LABEL_392;
            }
            v250 = HIDWORD(v327);
LABEL_392:
            if (v250)
            {
              v251 = v326;
              v252 = (WTF::StringImpl *)((char *)v326 + 8 * v250);
              do
              {
                v253 = *(_QWORD *)v251;
                *(_QWORD *)v251 = 0;
                if (v253)
                {
                  do
                  {
                    v254 = __ldaxr((unsigned int *)v253);
                    v255 = v254 - 1;
                  }
                  while (__stlxr(v255, (unsigned int *)v253));
                  if (!v255)
                  {
                    atomic_store(1u, (unsigned int *)v253);
                    v256 = *(unsigned int *)(v253 + 20);
                    if ((_DWORD)v256)
                    {
                      v257 = *(_QWORD *)(v253 + 8);
                      v258 = v257 + 16 * v256;
                      do
                      {
                        v259 = *(unsigned int **)(v257 + 8);
                        *(_QWORD *)(v257 + 8) = 0;
                        if (v259)
                        {
                          do
                          {
                            v260 = __ldaxr(v259);
                            v261 = v260 - 1;
                          }
                          while (__stlxr(v261, v259));
                          if (!v261)
                          {
                            v317 = v258;
                            v319 = v253;
                            atomic_store(1u, v259);
                            v262 = v259;
                            v263 = v259[6];
                            if ((_DWORD)v263 != -1)
                              ((void (*)(CFTypeRef *, unsigned int *, __n128))off_1E31F7A98[v263])(&cf, v262 + 2, v247);
                            v262[6] = -1;
                            WTF::fastFree((WTF *)v262, v244);
                            v258 = v317;
                            v253 = v319;
                          }
                        }
                        v257 += 16;
                      }
                      while (v257 != v258);
                    }
                    v264 = *(WTF **)(v253 + 8);
                    if ((WTF *)(v253 + 24) != v264 && v264 != 0)
                    {
                      *(_QWORD *)(v253 + 8) = 0;
                      *(_DWORD *)(v253 + 16) = 0;
                      v266 = v253;
                      WTF::fastFree(v264, v244);
                      v253 = v266;
                    }
                    WTF::fastFree((WTF *)v253, v244);
                  }
                }
                v251 = (WTF::StringImpl *)((char *)v251 + 8);
              }
              while (v251 != v252);
            }
          }
          else
          {
            v249 = 0;
          }
          v267 = v326;
          if (v326)
          {
            v326 = 0;
            LODWORD(v327) = 0;
            WTF::fastFree(v267, v244);
          }
          if ((v249 & 1) != 0)
            break;
          if (++v245 >= *(unsigned int *)(a1 + 92))
            goto LABEL_419;
        }
        if (!*(_BYTE *)(a1 + 96))
        {
LABEL_538:
          std::__throw_bad_optional_access[abi:sn180100]();
          goto LABEL_539;
        }
        if (v245 < *(unsigned int *)(a1 + 92))
        {
          v318 = *(_QWORD *)(a1 + 80);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v271 = v326;
          v272 = *((_QWORD *)v237 + 2);
          if (!v272)
          {
LABEL_436:
            v280 = 0;
            goto LABEL_438;
          }
          v273 = *(_DWORD *)(v272 - 8);
          v274 = *((_DWORD *)v326 + 4);
          if (v274 < 0x100)
            v275 = WTF::StringImpl::hashSlowCase(v326);
          else
            v275 = v274 >> 8;
          for (i = 0; ; v275 = i + v277)
          {
            v277 = v275 & v273;
            v278 = *(WTF **)(v272 + 16 * v277);
            if (v278 != (WTF *)-1)
            {
              if (!v278)
              {
                v279 = *((_QWORD *)v237 + 2);
                if (!v279)
                  goto LABEL_436;
                v280 = v279 + 16 * *(unsigned int *)(v279 - 4);
LABEL_438:
                if (v271)
                {
                  if (*(_DWORD *)v271 == 2)
                    WTF::StringImpl::destroy(v271, v269);
                  else
                    *(_DWORD *)v271 -= 2;
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v282 = v326;
                v283 = *((_QWORD *)v237 + 2);
                if (v283)
                {
                  v284 = *(_DWORD *)(v283 - 8);
                  v285 = *((_DWORD *)v326 + 4);
                  v320 = v280;
                  if (v285 < 0x100)
                    v286 = WTF::StringImpl::hashSlowCase(v326);
                  else
                    v286 = v285 >> 8;
                  for (j = 0; ; v286 = j + v288)
                  {
                    v288 = v286 & v284;
                    v289 = *(WTF **)(v283 + 16 * v288);
                    if (v289 != (WTF *)-1)
                    {
                      if (!v289)
                      {
                        v290 = *((_QWORD *)v237 + 2);
                        v280 = v320;
                        if (v290)
                          v283 = v290 + 16 * *(unsigned int *)(v290 - 4);
                        else
                          v283 = 0;
                        break;
                      }
                      if ((WTF::equal(v289, v282, v281) & 1) != 0)
                      {
                        v283 += 16 * v288;
                        v280 = v320;
                        break;
                      }
                    }
                    ++j;
                  }
                }
                if (v282)
                {
                  if (*(_DWORD *)v282 == 2)
                    WTF::StringImpl::destroy(v282, (WTF::StringImpl *)v244);
                  else
                    *(_DWORD *)v282 -= 2;
                }
                v291 = *((_QWORD *)v237 + 2);
                if (v291)
                {
                  v291 += 16 * *(unsigned int *)(v291 - 4);
                  v292 = v291 == v280;
                }
                else
                {
                  v292 = v280 == 0;
                }
                v293 = v292;
                if (((v293 ^ (v291 == v283)) & 1) == 0)
                {
                  v268 = 0;
                  a5 = v322;
                  goto LABEL_483;
                }
                if (v291 == v283)
                {
                  if ((v293 & 1) != 0)
                    goto LABEL_481;
                  WTF::JSONImpl::Value::asString(*(WTF::JSONImpl::Value **)(v280 + 8));
                  if (v332)
                  {
                    WTF::base64Decode();
                    v268 = v328;
                    if ((_BYTE)v328)
                    {
                      WebCore::FragmentedSharedBuffer::create(&v326, (uint64_t *)&cf);
                      v296 = WTF::fastMalloc((WTF *)0x38);
                      v331 = (WebCore::FragmentedSharedBuffer *)WebCore::SharedBuffer::SharedBuffer(v296, (uint64_t *)&cf);
                      v298 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&cf, v297);
                      v299 = *(void **)(v318 + 8 * v245);
                      v300 = (void *)PAL::getAVContentKeyResponseClass[0]((PAL *)v298);
                      WebCore::FragmentedSharedBuffer::makeContiguous(v331, &v330);
                      WebCore::SharedBuffer::createNSData(v330, (WebCoreSharedBufferData **)&cf);
                      objc_msgSend(v299, "processContentKeyResponse:", objc_msgSend(v300, "contentKeyResponseWithFairPlayStreamingKeyResponseData:", cf));
                      v302 = cf;
                      cf = 0;
                      if (v302)
                        CFRelease(v302);
                      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v330, v301);
                      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v331, v303);
                      if ((_BYTE)v328)
                      {
                        v304 = v326;
                        if (v326)
                        {
                          v326 = 0;
                          LODWORD(v327) = 0;
                          WTF::fastFree(v304, v244);
                        }
                      }
                    }
                    v305 = v332;
                    v332 = 0;
                    if (v305)
                    {
                      if (*(_DWORD *)v305 == 2)
                      {
                        WTF::StringImpl::destroy(v305, (WTF::StringImpl *)v244);
                        if (v268)
                          goto LABEL_481;
                        goto LABEL_482;
                      }
                      *(_DWORD *)v305 -= 2;
                    }
                    if (v268)
                      goto LABEL_481;
                    goto LABEL_482;
                  }
                }
                else
                {
                  v294 = WTF::JSONImpl::Value::asInteger(*(WTF::JSONImpl::Value **)(v283 + 8));
                  if ((v294 & 0xFF00000000) != 0)
                  {
                    v295 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("org.webkit.eme"), (int)v294, 0);
                    objc_msgSend(*(id *)(v318 + 8 * v245), "processContentKeyResponseError:", v295);
                    if (v295)
                      CFRelease(v295);
LABEL_481:
                    v268 = 1;
LABEL_482:
                    a5 = v322;
LABEL_483:
                    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v335, v244);
                    if ((_BYTE)v338)
                    {
                      v306 = (WTF *)buf;
                      if ((_QWORD)buf)
                      {
                        *(_QWORD *)&buf = 0;
                        DWORD2(buf) = 0;
                        WTF::fastFree(v306, types);
                      }
                    }
LABEL_486:
                    v307 = v336;
                    v336 = 0;
                    if (v307)
                    {
                      if (*(_DWORD *)v307 == 2)
                        WTF::StringImpl::destroy(v307, (WTF::StringImpl *)types);
                      else
                        *(_DWORD *)v307 -= 2;
                    }
                    v308 = *(_DWORD *)v237 - 1;
                    if (*(_DWORD *)v237 != 1)
                    {
                      *(_DWORD *)v237 = v308;
                      if ((v268 & 1) != 0)
                        goto LABEL_491;
LABEL_509:
                      v311 = *(_QWORD *)(a1 + 272);
                      v312 = *(_QWORD *)(a1 + 280);
                      *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
                      *((_QWORD *)&buf + 1) = 43;
                      v338 = "updateLicense";
                      v339[0] = v312;
                      if (*(_BYTE *)(v311 + 12))
                        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [50]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "'cenc' initData, Failed, could not parse response");
                      LOBYTE(buf) = 0;
                      LOBYTE(v338) = 0;
                      LOBYTE(cf) = 0;
                      v325 = 0;
                      LOBYTE(v326) = 0;
                      LOBYTE(v328) = 0;
                      v313 = *a5;
                      *a5 = 0;
                      (*(void (**)(uint64_t, _QWORD, __int128 *, CFTypeRef *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v313 + 16))(v313, 0, &buf, &cf, &v326, 0);
                      (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
                      if ((_BYTE)v328)
                        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
                      if (!(_BYTE)v338)
                        goto LABEL_520;
                      if (HIDWORD(buf))
                      {
                        v314 = (uint64_t *)buf;
                        v315 = 16 * HIDWORD(buf);
                        do
                        {
                          v314 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v314, types)+ 2;
                          v315 -= 16;
                        }
                        while (v315);
                      }
                      v316 = (WTF *)buf;
                      if ((_QWORD)buf)
                      {
                        *(_QWORD *)&buf = 0;
                        DWORD2(buf) = 0;
                        WTF::fastFree(v316, types);
                      }
                      if (v237)
                      {
LABEL_520:
                        if (*(_DWORD *)v237 == 1)
                          WTF::JSONImpl::Value::operator delete();
                        else
                          --*(_DWORD *)v237;
                      }
                      v220 = 1;
LABEL_523:
                      if (*(_DWORD *)v323 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*(_DWORD *)v323;
LABEL_331:
                      if (v323)
                      {
                        if (*(_DWORD *)v323 != 1)
                        {
                          --*(_DWORD *)v323;
                          goto LABEL_334;
                        }
                        WTF::JSONImpl::Value::operator delete();
                        if (!v220)
                        {
LABEL_168:
                          MethodDescription = protocol_getMethodDescription((Protocol *)&unk_1EE33A320, sel_contentKeySession_contentKeyRequestDidSucceed_, 0, 1);
                          types = MethodDescription.types;
                          if (MethodDescription.name)
                          {
                            v119 = *a5;
                            *a5 = 0;
                            v120 = *(_QWORD *)(a1 + 248);
                            *(_QWORD *)(a1 + 248) = v119;
                            if (v120)
                              (*(void (**)(uint64_t, char *))(*(_QWORD *)v120 + 8))(v120, MethodDescription.types);
                            goto LABEL_335;
                          }
                          if (!HIDWORD(v334))
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1946BD4A0);
                          }
                          v163 = *(_QWORD *)v333;
                          *(_QWORD *)v333 = 0;
                          *(_QWORD *)&buf = v163;
                          BYTE8(buf) = 0;
                          v164 = WTF::fastMalloc((WTF *)0x10);
                          v166 = v164;
                          v167 = (unsigned int *)buf;
                          do
                            v168 = __ldaxr(v167);
                          while (__stlxr(v168 + 1, v167));
                          *(_QWORD *)v164 = v167;
                          *(_BYTE *)(v164 + 8) = BYTE8(buf);
                          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, v165);
                          *(_QWORD *)&buf = v166;
                          *((_QWORD *)&buf + 1) = 0x100000001;
                          LOBYTE(v338) = 1;
                          LOBYTE(cf) = 0;
                          v325 = 0;
                          LOBYTE(v326) = 0;
                          LOBYTE(v328) = 0;
                          v169 = *a5;
                          *a5 = 0;
                          (*(void (**)(uint64_t, _QWORD, __int128 *, CFTypeRef *, WTF::StringImpl **, uint64_t))(*(_QWORD *)v169 + 16))(v169, 0, &buf, &cf, &v326, 1);
                          (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
                          if ((_BYTE)v328)
                            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
                          if ((_BYTE)v338)
                          {
                            if (HIDWORD(buf))
                            {
                              v170 = (uint64_t *)buf;
                              v171 = 16 * HIDWORD(buf);
                              do
                              {
                                v170 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v170, types)+ 2;
                                v171 -= 16;
                              }
                              while (v171);
                            }
                            goto LABEL_248;
                          }
                        }
                      }
                      else
                      {
LABEL_334:
                        if (!v220)
                          goto LABEL_168;
                      }
                      goto LABEL_335;
                    }
                    WTF::JSONImpl::Value::operator delete();
                    if (!v268)
                      goto LABEL_509;
                    v308 = *(_DWORD *)v237;
LABEL_491:
                    v309 = v308 - 1;
                    if (v309)
                      *(_DWORD *)v237 = v309;
                    else
                      WTF::JSONImpl::Value::operator delete();
                    if (++v236 == v321)
                    {
LABEL_504:
                      v220 = 0;
                      goto LABEL_523;
                    }
                    goto LABEL_376;
                  }
                }
LABEL_419:
                v268 = 0;
                goto LABEL_482;
              }
              if ((WTF::equal(v278, v271, v270) & 1) != 0)
              {
                v280 = v272 + 16 * v277;
                goto LABEL_438;
              }
            }
            ++i;
          }
        }
      }
      else if (v239 <= 6 && v239 != 5)
      {
        goto LABEL_509;
      }
LABEL_544:
      __break(0xC471u);
      JUMPOUT(0x1946BD458);
    }
    *(_DWORD *)v78 -= 2;
  }
  if (!v80)
    goto LABEL_155;
LABEL_116:
  v83 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v83)
  {
    v84 = v83 - 1;
    v85 = *(_QWORD *)(a1 + 192);
    v86 = v85 + 24 * (v83 - 1);
    v87 = *(unsigned int *)(v86 + 20);
    if ((_DWORD)v87)
    {
      v88 = (unsigned int *)(v86 + 8);
      v89 = *(_QWORD *)(*(_QWORD *)(v86 + 8) + 8 * v87 - 8);
      if (v89)
      {
        v90 = *(_DWORD **)(v85 + 24 * v84);
        if (*(_BYTE *)(a1 + 232))
        {
          if (v90)
            *v90 += 2;
          v91 = *(WTF::StringImpl **)(a1 + 208);
          *(_QWORD *)(a1 + 208) = v90;
          if (v91)
          {
            if (*(_DWORD *)v91 == 2)
              WTF::StringImpl::destroy(v91, v81);
            else
              *(_DWORD *)v91 -= 2;
          }
          WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(a1 + 216), v88);
        }
        else
        {
          if (v90)
            *v90 += 2;
          *(_QWORD *)(a1 + 216) = 0;
          *(_QWORD *)(a1 + 208) = v90;
          *(_QWORD *)(a1 + 224) = 0;
          *(_DWORD *)(a1 + 228) = v87;
          if (v87 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1946BD4A8);
          }
          v190 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v87));
          *(_DWORD *)(a1 + 224) = v87;
          *(_QWORD *)(a1 + 216) = v190;
          v191 = *(unsigned int *)(v85 + 24 * v84 + 20);
          if ((_DWORD)v191)
          {
            v192 = *(const void ***)v88;
            v193 = 8 * v191;
            do
            {
              v194 = *v192;
              *v190 = *v192;
              if (v194)
                CFRetain(v194);
              ++v190;
              ++v192;
              v193 -= 8;
            }
            while (v193);
          }
          *(_BYTE *)(a1 + 232) = 1;
        }
        v195 = *(_QWORD *)(a1 + 272);
        v196 = *(_QWORD *)(a1 + 280);
        *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
        *((_QWORD *)&buf + 1) = 43;
        v338 = "updateLicense";
        v339[0] = v196;
        if (*(_BYTE *)(v195 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [28]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "\"renew\", processing renewal");
        v197 = *(PAL **)(a1 + 64);
        if (!v197)
          v197 = WebCore::CDMInstanceFairPlayStreamingAVFObjC::contentKeySession(*(WebCore::CDMInstanceFairPlayStreamingAVFObjC **)(a1 + 48));
        -[PAL renewExpiringResponseDataForContentKeyRequest:](v197, "renewExpiringResponseDataForContentKeyRequest:", v89);
        v198 = *a5;
        *a5 = 0;
        v199 = *(_QWORD *)(a1 + 248);
        *(_QWORD *)(a1 + 248) = v198;
        if (v199)
          (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
        return;
      }
    }
  }
  v92 = *(_QWORD *)(a1 + 272);
  v93 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
  *((_QWORD *)&buf + 1) = 43;
  v338 = "updateLicense";
  v339[0] = v93;
  if (*(_BYTE *)(v92 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, "\"renew\", Failed, no outstanding keys");
  LOBYTE(buf) = 0;
  LOBYTE(v338) = 0;
  LOBYTE(v333) = 0;
  LOBYTE(v334) = 0;
  LOBYTE(v326) = 0;
  LOBYTE(v328) = 0;
  v94 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD, __int128 *, WTF::Logger **, WTF::StringImpl **, _QWORD))(*(_QWORD *)v94 + 16))(v94, 0, &buf, &v333, &v326, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  if ((_BYTE)v328)
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v327, types);
  if ((_BYTE)v338)
  {
    if (HIDWORD(buf))
    {
      v96 = (uint64_t *)buf;
      v97 = (uint64_t *)(buf + 16 * HIDWORD(buf));
      do
      {
        v98 = *v96;
        *v96 = 0;
        if (v98)
        {
          do
          {
            v99 = __ldaxr((unsigned int *)v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, (unsigned int *)v98));
          if (!v100)
          {
            atomic_store(1u, (unsigned int *)v98);
            v101 = *(unsigned int *)(v98 + 20);
            if ((_DWORD)v101)
            {
              v102 = *(_QWORD *)(v98 + 8);
              v103 = v102 + 16 * v101;
              do
              {
                v104 = *(unsigned int **)(v102 + 8);
                *(_QWORD *)(v102 + 8) = 0;
                if (v104)
                {
                  do
                  {
                    v105 = __ldaxr(v104);
                    v106 = v105 - 1;
                  }
                  while (__stlxr(v106, v104));
                  if (!v106)
                  {
                    atomic_store(1u, v104);
                    v107 = v104[6];
                    if ((_DWORD)v107 != -1)
                      ((void (*)(WTF::StringImpl **, unsigned int *))off_1E31F7A98[v107])(&v326, v104 + 2);
                    v104[6] = -1;
                    WTF::fastFree((WTF *)v104, types);
                  }
                }
                v102 += 16;
              }
              while (v102 != v103);
            }
            v108 = *(WTF **)(v98 + 8);
            if ((WTF *)(v98 + 24) != v108 && v108 != 0)
            {
              *(_QWORD *)(v98 + 8) = 0;
              *(_DWORD *)(v98 + 16) = 0;
              WTF::fastFree(v108, types);
            }
            WTF::fastFree((WTF *)v98, types);
          }
        }
        v96 += 2;
      }
      while (v96 != v97);
    }
LABEL_281:
    v189 = (WTF *)buf;
    if (!(_QWORD)buf)
      return;
    *(_QWORD *)&buf = 0;
    DWORD2(buf) = 0;
    goto LABEL_360;
  }
}

void sub_1946BD4B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13, CFTypeRef cf, uint64_t a15, WTF *a16, int a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23,WTF *a24,int a25,unsigned int a26,WTF::StringImpl *a27,WTF::StringImpl *a28)
{
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  void *v32;
  void *v33;
  WTF::StringImpl *v34;
  void *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;

  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a21, a2);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a22, v32);
  if (a19 && a16)
    WTF::fastFree(a16, v33);
  v34 = a23;
  a23 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v33);
    else
      *(_DWORD *)v34 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&a27, v33);
  if (*(_BYTE *)(v30 - 112))
  {
    v36 = *(WTF **)(v30 - 128);
    if (v36)
    {
      *(_QWORD *)(v30 - 128) = 0;
      *(_DWORD *)(v30 - 120) = 0;
      WTF::fastFree(v36, v35);
    }
  }
  v37 = a28;
  a28 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (*v29 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*v29;
  if (*v29 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*v29;
  if (*v28 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*v28;
  if (a13)
  {
    if (*a13 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*a13;
  }
  if (a26)
  {
    v38 = (uint64_t *)a24;
    v39 = 8 * a26;
    do
    {
      v38 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v38, v35)+ 1;
      v39 -= 8;
    }
    while (v39);
  }
  if (a24)
    WTF::fastFree(a24, v35);
  _Unwind_Resume(a1);
}

uint64_t WebCore::isEqual(WebCore *this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  WebCore::TextDecoder *v7;
  _QWORD *v8;
  const WTF::StringImpl *v9;
  int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v14;
  void *v15;
  WTF *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  int v19;
  _QWORD *v20;
  int v21;
  char v22;
  WTF *v23[2];
  int v24;
  _QWORD v25[2];
  int v26;
  _QWORD *v27;
  char v28;

  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(this, &v27);
  if (!v27)
    return 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::TextDecoder::create(0, (uint64_t)v25);
  v18 = 0;
  if (v23[0])
  {
    if (*(_DWORD *)v23[0] == 2)
      WTF::StringImpl::destroy(v23[0], v4);
    else
      *(_DWORD *)v23[0] -= 2;
  }
  v5 = v26;
  if (v26)
  {
    v6 = 0;
  }
  else
  {
    v7 = (WebCore::TextDecoder *)v25[0];
    v25[0] = 0;
    v8 = v27;
    v27 = 0;
    v19 = 1;
    v18 = 0;
    v20 = v8;
    v21 = 1;
    v22 = 1;
    WebCore::TextDecoder::decode((uint64_t)v7, (uint64_t)&v20, 0, (uint64_t)v23);
    if (v22)
    {
      if (v21 != -1)
        ((void (*)(char *, _QWORD **))off_1E31F7A40[v21])(&v28, &v20);
      v21 = -1;
    }
    ((void (*)(char *, WTF::StringImpl **))off_1E31F7A40[v19])(&v28, &v18);
    v10 = v24;
    if (v24)
    {
      v6 = 0;
    }
    else
    {
      v6 = WTF::equal(v23[0], *a2, v9);
      v10 = v24;
    }
    if (v10 != -1)
      ((void (*)(WTF::StringImpl **, WTF **))off_1E31F7A50[v10])(&v18, v23);
    if (v7)
      WTF::RefCounted<WebCore::TextDecoder>::deref(v7);
    v5 = v26;
  }
  if (v5 != -1)
    ((void (*)(WTF **, _QWORD *))off_1E31F7A60[v5])(v23, v25);
  v11 = v27;
  v27 = 0;
  if (v11)
  {
    v12 = *(_DWORD *)v11 == 2;
    *(_DWORD *)v11 -= 2;
    if (v12)
    {
      v14 = v11[10];
      if (v14)
      {
        *(_QWORD *)(v14 + 8) = 3;
        v11[10] = 0;
      }
      if ((v11[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v11 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v11 + 2));
      v16 = (WTF *)v11[1];
      if ((v16 & 1) == 0 && v16)
      {
        v17 = *(WTF **)v16;
        if (*(_QWORD *)v16)
        {
          *(_QWORD *)v16 = 0;
          *((_DWORD *)v16 + 2) = 0;
          WTF::fastFree(v17, v15);
        }
        WTF::fastFree(v16, v15);
      }
      WTF::fastFree((WTF *)v11, v15);
    }
  }
  return v6;
}

void sub_1946BDF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12, int a13, char a14, int a15, int a16, int a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,int a25,char a26,uint64_t a27,int a28)
{
  WebCore::TextDecoder *v28;
  uint64_t v29;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WTF *v36;

  if (a24 != -1)
    ((void (*)(char *, __int16 *))off_1E31F7A50[a24])(&a10, &a20);
  if (v28)
    WTF::RefCounted<WebCore::TextDecoder>::deref(v28);
  if (a28 != -1)
    ((void (*)(__int16 *, char *))off_1E31F7A60[a28])(&a20, &a26);
  v31 = *(_QWORD **)(v29 - 48);
  *(_QWORD *)(v29 - 48) = 0;
  if (v31)
  {
    v32 = *(_DWORD *)v31 == 2;
    *(_DWORD *)v31 -= 2;
    if (v32)
    {
      v33 = v31[10];
      if (v33)
      {
        *(_QWORD *)(v33 + 8) = 3;
        v31[10] = 0;
      }
      if ((v31[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v31 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v31 + 2));
      v35 = (WTF *)v31[1];
      if ((v35 & 1) == 0 && v35)
      {
        v36 = *(WTF **)v35;
        if (*(_QWORD *)v35)
        {
          *(_QWORD *)v35 = 0;
          *((_DWORD *)v35 + 2) = 0;
          WTF::fastFree(v36, v34);
        }
        WTF::fastFree(v35, v34);
      }
      WTF::fastFree((WTF *)v31, v34);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::loadSession(uint64_t a1, int a2, WTF **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  void *v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  uint64_t v60;
  WTF *v61;
  CFTypeRef v62;
  WTF **v63;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  CFTypeRef cf;
  CFTypeRef v72;
  uint64_t v73;
  char v74;
  WTF *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  const char *v79;
  uint64_t v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (a2 != 1)
    return;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 80);
  if (*(_BYTE *)(v7 + 72))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 272);
    v11 = *(_QWORD *)(a1 + 280);
    v77 = (WTF::StringImpl *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
    v78 = 43;
    v79 = "loadSession";
    v80 = v11;
    if (*(_BYTE *)(v10 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v77, " Failed, mismatched session type");
    LOBYTE(v77) = 0;
    LOBYTE(v79) = 0;
    LOBYTE(v75) = 0;
    LOBYTE(v76) = 0;
    LOBYTE(v72) = 0;
    v74 = 0;
    v12 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, CFTypeRef *, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, &v77, &v75, &v72, 0, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v74)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v73, v13);
    if (!(_BYTE)v79)
      return;
    if (HIDWORD(v78))
    {
      v14 = (uint64_t *)v77;
      v15 = 16 * HIDWORD(v78);
      do
      {
        v14 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v14, v13)+ 2;
        v15 -= 16;
      }
      while (v15);
    }
LABEL_58:
    v53 = v77;
    if (v77)
    {
      v77 = 0;
      LODWORD(v78) = 0;
      WTF::fastFree(v53, v13);
    }
    return;
  }
  v16 = *(WTF **)(v7 + 64);
  if (!v16)
  {
    v48 = *(_QWORD *)(a1 + 272);
    v49 = *(_QWORD *)(a1 + 280);
    v77 = (WTF::StringImpl *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
    v78 = 43;
    v79 = "loadSession";
    v80 = v49;
    if (*(_BYTE *)(v48 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [31]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v77, " Failed, no sessionCertificate");
    LOBYTE(v77) = 0;
    LOBYTE(v79) = 0;
    LOBYTE(v75) = 0;
    LOBYTE(v76) = 0;
    LOBYTE(v72) = 0;
    v74 = 0;
    v50 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, CFTypeRef *, _QWORD, uint64_t))(*(_QWORD *)v50 + 16))(v50, &v77, &v75, &v72, 0, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    if (v74)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v73, v13);
    if (!(_BYTE)v79)
      return;
    if (HIDWORD(v78))
    {
      v51 = (uint64_t *)v77;
      v52 = 16 * HIDWORD(v78);
      do
      {
        v51 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v51, v13)+ 2;
        v52 -= 16;
      }
      while (v52);
    }
    goto LABEL_58;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous(v16, &v77);
  WebCore::SharedBuffer::createNSData(v77, (WebCoreSharedBufferData **)&cf);
  v18 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v77, v17);
  v75 = 0;
  v76 = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v19 = (void *)PAL::getAVContentKeySessionClass[0]((PAL *)v18);
  v20 = (void *)objc_msgSend(v19, "pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:", cf, v8);
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
  if (!v21)
    goto LABEL_40;
  v22 = *(_QWORD *)v68;
  v63 = (WTF **)(a1 + 112);
  do
  {
    v23 = 0;
    do
    {
      if (*(_QWORD *)v68 != v22)
        objc_enumerationMutation(v20);
      v24 = *(const void **)(*((_QWORD *)&v67 + 1) + 8 * v23);
      v72 = v24;
      v25 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v24, 0, 0, 0), "objectForKey:", CFSTR("PlaybackSessionID"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        MEMORY[0x19AEA5508](&v77, v25);
        v28 = WTF::equal(*a3, v77, v26);
        v29 = v77;
        v77 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 != 2)
          {
            *(_DWORD *)v29 -= 2;
            goto LABEL_26;
          }
          WTF::StringImpl::destroy(v29, v27);
          if (!v28)
            goto LABEL_35;
        }
        else
        {
LABEL_26:
          if (!v28)
            goto LABEL_35;
        }
        v30 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v30 = 1;
        *(_QWORD *)(v30 + 8) = v30 + 24;
        *(_QWORD *)(v30 + 16) = 1;
        *(_QWORD *)(v30 + 48) = 0;
        *(_BYTE *)(v30 + 40) = 1;
        v65 = 0;
        v77 = (WTF::StringImpl *)v30;
        LOBYTE(v78) = 2;
        v32 = HIDWORD(v76);
        if (HIDWORD(v76) == (_DWORD)v76)
        {
          v33 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v75, HIDWORD(v76) + 1, (unint64_t)&v77);
          v32 = HIDWORD(v76);
          v34 = (char *)v75 + 16 * HIDWORD(v76);
          v35 = *(_QWORD *)v33;
          *(_QWORD *)v33 = 0;
          *(_QWORD *)v34 = v35;
          v34[8] = v33[8];
        }
        else
        {
          v77 = 0;
          v36 = (char *)v75 + 16 * HIDWORD(v76);
          *(_QWORD *)v36 = v30;
          v36[8] = 2;
        }
        HIDWORD(v76) = v32 + 1;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v77, v31);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v65, v37);
        v38 = *(unsigned int *)(a1 + 124);
        if ((_DWORD)v38 == *(_DWORD *)(a1 + 120))
        {
          WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSData*&>(v63, &v72);
        }
        else
        {
          *((_QWORD *)*v63 + v38) = v24;
          if (v24)
          {
            CFRetain(v24);
            LODWORD(v38) = *(_DWORD *)(a1 + 124);
          }
          *(_DWORD *)(a1 + 124) = v38 + 1;
        }
      }
LABEL_35:
      ++v23;
    }
    while (v21 != v23);
    v39 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
    v21 = v39;
  }
  while (v39);
LABEL_40:
  v40 = HIDWORD(v76);
  v41 = *(_QWORD *)(a1 + 272);
  if (HIDWORD(v76))
  {
    v42 = *(_QWORD *)(a1 + 280);
    v77 = (WTF::StringImpl *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
    v78 = 43;
    v79 = "loadSession";
    v80 = v42;
    if (*(_BYTE *)(v41 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11]>((WTF::Logger::LogSiteIdentifier *)&v77);
      v40 = HIDWORD(v76);
    }
    v77 = v75;
    v43 = v76;
    v75 = 0;
    v76 = 0;
    v78 = __PAIR64__(v40, v43);
    LOBYTE(v79) = 1;
    LOBYTE(v65) = 0;
    v66 = 0;
    LOBYTE(v72) = 0;
    v74 = 0;
    v44 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *, CFTypeRef *, uint64_t, _QWORD))(*(_QWORD *)v44 + 16))(v44, &v77, &v65, &v72, 1, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    if (v74)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v73, v45);
    if ((_BYTE)v79)
    {
      if (HIDWORD(v78))
      {
        v46 = (uint64_t *)v77;
        v47 = 16 * HIDWORD(v78);
        do
        {
          v46 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v46, v45)+ 2;
          v47 -= 16;
        }
        while (v47);
      }
      goto LABEL_68;
    }
  }
  else
  {
    v54 = *(_QWORD *)(a1 + 280);
    v77 = (WTF::StringImpl *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
    v78 = 43;
    v79 = "loadSession";
    v80 = v54;
    if (*(_BYTE *)(v41 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [31]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v77, " Failed, no session data found");
    LOBYTE(v77) = 0;
    LOBYTE(v79) = 0;
    LOBYTE(v65) = 0;
    v66 = 0;
    LOBYTE(v72) = 0;
    v74 = 0;
    v55 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t *, CFTypeRef *, _QWORD, uint64_t))(*(_QWORD *)v55 + 16))(v55, &v77, &v65, &v72, 0, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    if (v74)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v73, v45);
    if ((_BYTE)v79)
    {
      if (HIDWORD(v78))
      {
        v56 = (uint64_t *)v77;
        v57 = 16 * HIDWORD(v78);
        do
        {
          v56 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v56, v45)+ 2;
          v57 -= 16;
        }
        while (v57);
      }
LABEL_68:
      v58 = v77;
      if (v77)
      {
        v77 = 0;
        LODWORD(v78) = 0;
        WTF::fastFree(v58, v45);
      }
    }
  }
  if (HIDWORD(v76))
  {
    v59 = (uint64_t *)v75;
    v60 = 16 * HIDWORD(v76);
    do
    {
      v59 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v59, v45)+ 2;
      v60 -= 16;
    }
    while (v60);
  }
  v61 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v61, v45);
  }
  v62 = cf;
  cf = 0;
  if (v62)
    CFRelease(v62);
}

void sub_1946BE788(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,CFTypeRef cf,char a24,uint64_t a25,char a26,WTF *a27,int a28,unsigned int a29,WTF::StringImpl *a30,int a31,int a32,char a33)
{
  uint64_t *v34;
  uint64_t v35;

  if (a29)
  {
    v34 = (uint64_t *)a27;
    v35 = 16 * a29;
    do
    {
      v34 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v34, a2)+ 2;
      v35 -= 16;
    }
    while (v35);
  }
  if (a27)
    WTF::fastFree(a27, a2);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::closeSession(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  const void *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  char v44;
  _BYTE v45[16];
  WTF *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;

  v5 = *(_QWORD *)(a1 + 272);
  v6 = *(_QWORD *)(a1 + 280);
  v46 = (WTF *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
  v47 = 43;
  v48 = "closeSession";
  v49 = v6;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v46);
  if (*(_QWORD *)(a1 + 240))
  {
    v7 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v7 + 24;
    *(_QWORD *)(v7 + 16) = 1;
    *(_QWORD *)(v7 + 48) = 0;
    *(_BYTE *)(v7 + 40) = 1;
    v46 = (WTF *)v7;
    v8 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    (*(void (**)(uint64_t, WTF **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 16))(v8, &v46, a1 + 136, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v46, v9);
  }
  v10 = *(_QWORD *)(a1 + 248);
  if (v10)
  {
    LOBYTE(v46) = 0;
    LOBYTE(v48) = 0;
    v45[0] = 0;
    v45[8] = 0;
    LOBYTE(v42) = 0;
    v44 = 0;
    *(_QWORD *)(a1 + 248) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF **, _BYTE *, WTF **, _QWORD))(*(_QWORD *)v10 + 16))(v10, 1, &v46, v45, &v42, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v44)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v43, a2);
    if ((_BYTE)v48)
    {
      if (HIDWORD(v47))
      {
        v11 = (uint64_t *)v46;
        v12 = 16 * HIDWORD(v47);
        do
        {
          v11 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v11, a2)+ 2;
          v12 -= 16;
        }
        while (v12);
      }
      v13 = v46;
      if (v46)
      {
        v46 = 0;
        LODWORD(v47) = 0;
        WTF::fastFree(v13, a2);
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 264);
  if (v14)
  {
    v46 = 0;
    v47 = 0;
    v42 = 0;
    *(_QWORD *)(a1 + 264) = 0;
    (*(void (**)(uint64_t, WTF **, WTF **, _QWORD))(*(_QWORD *)v14 + 16))(v14, &v46, &v42, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v42;
    v42 = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v30 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v30)
        {
          v31 = *((_QWORD *)v15 + 1);
          v32 = v31 + 16 * v30;
          do
          {
            v33 = *(unsigned int **)(v31 + 8);
            *(_QWORD *)(v31 + 8) = 0;
            if (v33)
            {
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                v41 = v31;
                v36 = v15;
                atomic_store(1u, v33);
                v37 = v33[6];
                if ((_DWORD)v37 != -1)
                  ((void (*)(_BYTE *, unsigned int *))off_1E31F7A98[v37])(v45, v33 + 2);
                v33[6] = -1;
                WTF::fastFree((WTF *)v33, a2);
                v15 = v36;
                v31 = v41;
              }
            }
            v31 += 16;
          }
          while (v31 != v32);
        }
        v38 = (WTF *)*((_QWORD *)v15 + 1);
        if ((WTF *)((char *)v15 + 24) != v38 && v38 != 0)
        {
          *((_QWORD *)v15 + 1) = 0;
          *((_DWORD *)v15 + 4) = 0;
          v40 = v15;
          WTF::fastFree(v38, a2);
          v15 = v40;
        }
        WTF::fastFree(v15, a2);
      }
    }
    if (HIDWORD(v47))
    {
      v18 = (uint64_t *)v46;
      v19 = 16 * HIDWORD(v47);
      do
      {
        v18 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v18, a2)+ 2;
        v19 -= 16;
      }
      while (v19);
    }
    v20 = v46;
    if (v46)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      WTF::fastFree(v20, a2);
    }
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v21 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v21)
    {
      v22 = *(const void ***)(a1 + 80);
      v23 = 8 * v21;
      do
      {
        v24 = *v22;
        *v22 = 0;
        if (v24)
          CFRelease(v24);
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
    v25 = *(WTF **)(a1 + 80);
    if (v25)
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v25, a2);
    }
    v26 = *(WTF::StringImpl **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v26 -= 2;
    }
    *(_BYTE *)(a1 + 96) = 0;
  }
  WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 176), a2);
  WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 192), v27);
  v28 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
}

void sub_1946BED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, WTF *a18, int a19, unsigned int a20,char a21)
{
  uint64_t v21;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  WTF *v37;

  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (a10)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)a10);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)a10));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)a10);
      v28 = *((unsigned int *)a10 + 5);
      if ((_DWORD)v28)
      {
        v29 = *((_QWORD *)a10 + 1);
        v30 = v29 + 16 * v28;
        do
        {
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              v34 = v31[6];
              if ((_DWORD)v34 != -1)
                ((void (*)(__int16 *, unsigned int *))off_1E31F7A98[v34])(&a14, v31 + 2);
              v31[6] = -1;
              WTF::fastFree((WTF *)v31, v23);
            }
          }
          v29 += 16;
        }
        while (v29 != v30);
      }
      v35 = (WTF *)*((_QWORD *)a10 + 1);
      if ((WTF *)((char *)a10 + 24) != v35 && v35 != 0)
      {
        *((_QWORD *)a10 + 1) = 0;
        *((_DWORD *)a10 + 4) = 0;
        WTF::fastFree(v35, v23);
      }
      WTF::fastFree(a10, v23);
    }
  }
  if (a20)
  {
    v26 = (uint64_t *)a18;
    v27 = 16 * a20;
    do
    {
      v26 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v26, v23)+ 2;
      v27 -= 16;
    }
    while (v27);
  }
  v37 = a18;
  if (a18)
  {
    a18 = 0;
    a19 = 0;
    WTF::fastFree(v37, v23);
  }
  _Unwind_Resume(a1);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::removeSessionData(uint64_t a1, WTF **a2, int a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  BOOL v11;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  const WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  void *v44;
  int v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  WebCore::FragmentedSharedBuffer *v85;
  WebCore::FragmentedSharedBuffer *v86;
  uint64_t v87;
  WTF *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  NSObject *v96;
  uint64_t v97;
  void *v98;
  char *v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  WTF *v107;
  WTF::Logger *v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  WTF::Logger *v116;
  uint64_t v117;
  WTF::StringImpl **v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  void *v131;
  WTF::Logger *v132;
  uint64_t v133;
  void *v134;
  WTF *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t *v138;
  uint64_t v139;
  WTF *v140;
  CFTypeRef v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  WTF *v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  WTF *v158;
  WTF *v160;
  WebCore::FragmentedSharedBuffer *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  WTF *v170;
  uint64_t v172;
  uint64_t *v173;
  WTF **v174;
  PAL *cf;
  uint64_t v176;
  WTF *v178[4];
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  WTF *v183;
  uint64_t v184;
  CFTypeRef v185;
  WTF::Logger *v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  _BYTE v198[128];
  __int128 buf;
  const char *v200;
  WTF::StringImpl *v201;
  int v202;
  WTF::StringImpl *v203;
  int v204;
  WTF::StringImpl *v205;
  int v206;
  WTF::StringImpl *v207;
  int v208;
  _QWORD v209[3];

  v209[1] = *MEMORY[0x1E0C80C00];
  v7 = *(void **)(a1 + 56);
  if (!v7)
    v7 = *(void **)(a1 + 64);
  objc_msgSend(v7, "expire");
  if (a3 == 1)
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(v8 + 80);
    v10 = *(WTF **)(v8 + 64);
    if (*(_BYTE *)(v8 + 72))
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      WebCore::FragmentedSharedBuffer::makeContiguous(v10, &buf);
      WebCore::SharedBuffer::createNSData((WebCore::SharedBuffer *)buf, (WebCoreSharedBufferData **)&v185);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, v29);
      cf = (PAL *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v176 = a1;
      v173 = a4;
      v183 = 0;
      v184 = 0;
      v179 = 0u;
      v180 = 0u;
      v181 = 0u;
      v182 = 0u;
      v30 = (void *)PAL::getAVContentKeySessionClass[0](cf);
      v31 = (void *)objc_msgSend(v30, "pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:", v185, v9);
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v179, v198, 16);
      v33 = v32;
      if (v32)
      {
        v34 = *(_QWORD *)v180;
        v174 = (WTF **)(a1 + 112);
        do
        {
          v35 = 0;
          do
          {
            if (*(_QWORD *)v180 != v34)
              objc_enumerationMutation(v31);
            v36 = *(WTF **)(*((_QWORD *)&v179 + 1) + 8 * v35);
            v178[0] = v36;
            v37 = (void *)objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v36, 0, 0, 0);
            v38 = objc_msgSend(v37, "objectForKey:", CFSTR("PlaybackSessionID"));
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              MEMORY[0x19AEA5508](&buf, v38);
              v41 = WTF::equal(*a2, (const WTF::StringImpl *)buf, v39);
              v42 = (WTF::StringImpl *)buf;
              *(_QWORD *)&buf = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 != 2)
                {
                  *(_DWORD *)v42 -= 2;
                  goto LABEL_38;
                }
                WTF::StringImpl::destroy(v42, v40);
                if (!v41)
                  goto LABEL_49;
              }
              else
              {
LABEL_38:
                if (!v41)
                  goto LABEL_49;
              }
              v43 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)v43 = 1;
              *(_QWORD *)(v43 + 8) = v43 + 24;
              *(_QWORD *)(v43 + 16) = 1;
              *(_QWORD *)(v43 + 48) = 0;
              *(_BYTE *)(v43 + 40) = 1;
              v186 = 0;
              *(_QWORD *)&buf = v43;
              BYTE8(buf) = 2;
              v45 = HIDWORD(v184);
              if (HIDWORD(v184) == (_DWORD)v184)
              {
                v46 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v183, HIDWORD(v184) + 1, (unint64_t)&buf);
                v45 = HIDWORD(v184);
                v47 = (char *)v183 + 16 * HIDWORD(v184);
                v48 = *(_QWORD *)v46;
                *(_QWORD *)v46 = 0;
                *(_QWORD *)v47 = v48;
                v47[8] = v46[8];
              }
              else
              {
                *(_QWORD *)&buf = 0;
                v49 = (char *)v183 + 16 * HIDWORD(v184);
                *(_QWORD *)v49 = v43;
                v49[8] = 2;
              }
              HIDWORD(v184) = v45 + 1;
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, v44);
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v186, v50);
              v51 = *(unsigned int *)(a1 + 124);
              if ((_DWORD)v51 == *(_DWORD *)(a1 + 120))
              {
                WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSData*&>(v174, (CFTypeRef *)v178);
              }
              else
              {
                *((_QWORD *)*v174 + v51) = v36;
                if (v36)
                {
                  CFRetain(v36);
                  v52 = a1;
                  LODWORD(v51) = *(_DWORD *)(a1 + 124);
                }
                else
                {
                  v52 = a1;
                }
                *(_DWORD *)(v52 + 124) = v51 + 1;
              }
              -[PAL addObject:](cf, "addObject:", v37);
            }
LABEL_49:
            ++v35;
          }
          while (v33 != v35);
          v53 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v179, v198, 16);
          v33 = v53;
        }
        while (v53);
      }
      v54 = v173;
      v55 = v176;
      if (!-[PAL count](cf, "count"))
      {
        v73 = *(_QWORD *)(v176 + 272);
        v74 = *(WTF::StringImpl **)(v176 + 280);
        *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
        *((_QWORD *)&buf + 1) = 43;
        v200 = "removeSessionData";
        v201 = v74;
        if (*(_BYTE *)(v73 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [32]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&buf, " Succeeded, no expired sessions");
        *(_QWORD *)&buf = 0;
        v75 = *v173;
        *v173 = 0;
        (*(void (**)(uint64_t, WTF **, __int128 *, uint64_t))(*(_QWORD *)v75 + 16))(v75, &v183, &buf, 1);
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
        v63 = buf;
        *(_QWORD *)&buf = 0;
        if (!v63)
          goto LABEL_195;
        do
        {
          v76 = __ldaxr((unsigned int *)v63);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, (unsigned int *)v63));
        if (v77)
          goto LABEL_195;
        atomic_store(1u, (unsigned int *)v63);
        v78 = *(unsigned int *)(v63 + 20);
        if ((_DWORD)v78)
        {
          v79 = *(_QWORD *)(v63 + 8);
          v80 = v79 + 16 * v78;
          do
          {
            v81 = *(unsigned int **)(v79 + 8);
            *(_QWORD *)(v79 + 8) = 0;
            if (v81)
            {
              do
              {
                v82 = __ldaxr(v81);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, v81));
              if (!v83)
              {
                atomic_store(1u, v81);
                v84 = v81[6];
                if ((_DWORD)v84 != -1)
                  ((void (*)(WTF **, unsigned int *))off_1E31F7A98[v84])(v178, v81 + 2);
                v81[6] = -1;
                WTF::fastFree((WTF *)v81, v62);
              }
            }
            v79 += 16;
          }
          while (v79 != v80);
        }
        goto LABEL_246;
      }
      v56 = -[PAL count](cf, "count");
      v57 = (WTF::String *)v56;
      if (v56 == 1)
      {
        v58 = -[PAL firstObject](cf, "firstObject");
      }
      else
      {
        v58 = (uint64_t)cf;
        if (!v56)
        {
          v59 = *(_QWORD *)(v176 + 272);
          v60 = *(WTF::StringImpl **)(v176 + 280);
          *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
          *((_QWORD *)&buf + 1) = 43;
          v200 = "removeSessionData";
          v201 = v60;
          if (*(_BYTE *)(v59 + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, " Failed, no expired session data");
          *(_QWORD *)&buf = 0;
          v61 = *v173;
          *v173 = 0;
          (*(void (**)(uint64_t, WTF **, __int128 *, _QWORD))(*(_QWORD *)v61 + 16))(v61, &v183, &buf, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
          v63 = buf;
          *(_QWORD *)&buf = 0;
          if (!v63)
            goto LABEL_195;
          do
          {
            v64 = __ldaxr((unsigned int *)v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, (unsigned int *)v63));
          if (v65)
            goto LABEL_195;
          atomic_store(1u, (unsigned int *)v63);
          v66 = *(unsigned int *)(v63 + 20);
          if ((_DWORD)v66)
          {
            v67 = *(_QWORD *)(v63 + 8);
            v68 = v67 + 16 * v66;
            do
            {
              v69 = *(unsigned int **)(v67 + 8);
              *(_QWORD *)(v67 + 8) = 0;
              if (v69)
              {
                do
                {
                  v70 = __ldaxr(v69);
                  v71 = v70 - 1;
                }
                while (__stlxr(v71, v69));
                if (!v71)
                {
                  atomic_store(1u, v69);
                  v72 = v69[6];
                  if ((_DWORD)v72 != -1)
                    ((void (*)(WTF **, unsigned int *))off_1E31F7A98[v72])(v178, v69 + 2);
                  v69[6] = -1;
                  WTF::fastFree((WTF *)v69, v62);
                }
              }
              v67 += 16;
            }
            while (v67 != v68);
          }
LABEL_246:
          v160 = *(WTF **)(v63 + 8);
          if ((WTF *)(v63 + 24) != v160 && v160 != 0)
          {
            *(_QWORD *)(v63 + 8) = 0;
            *(_DWORD *)(v63 + 16) = 0;
            WTF::fastFree(v160, v62);
          }
          WTF::fastFree((WTF *)v63, v62);
LABEL_195:
          if (HIDWORD(v184))
          {
            v138 = (uint64_t *)v183;
            v139 = 16 * HIDWORD(v184);
            do
            {
              v138 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v138, v62)+ 2;
              v139 -= 16;
            }
            while (v139);
          }
          v140 = v183;
          if (v183)
          {
            v183 = 0;
            LODWORD(v184) = 0;
            WTF::fastFree(v140, v62);
          }
          if (cf)
            CFRelease(cf);
          v141 = v185;
          v185 = 0;
          if (v141)
            CFRelease(v141);
          return;
        }
      }
      v85 = (WebCore::FragmentedSharedBuffer *)objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v58, 200, 0, 0);
      v86 = v85;
      if (v85)
        CFRetain(v85);
      if ((unint64_t)v57 < 2
        || (v87 = *(_QWORD *)(v176 + 272),
            v88 = *(WTF **)(v176 + 280),
            v178[0] = (WTF *)"CDMInstanceSessionFairPlayStreamingAVFObjC",
            v178[1] = (WTF *)43,
            v178[2] = (WTF *)"removeSessionData",
            v178[3] = v88,
            !*(_BYTE *)(v87 + 12)))
      {
LABEL_188:
        v128 = *(_QWORD *)(v55 + 272);
        v129 = *(WTF::StringImpl **)(v55 + 280);
        *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
        *((_QWORD *)&buf + 1) = 43;
        v200 = "removeSessionData";
        v201 = v129;
        if (*(_BYTE *)(v128 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11]>((WTF::Logger::LogSiteIdentifier *)&buf);
        WebCore::FragmentedSharedBuffer::create(v86, (CFIndex *)&buf);
        v130 = WTF::fastMalloc((WTF *)0x38);
        v186 = (WTF::Logger *)WebCore::SharedBuffer::SharedBuffer(v130, (uint64_t *)&buf);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&buf, v131);
        v132 = v186;
        v186 = 0;
        v178[0] = v132;
        v133 = *v54;
        *v54 = 0;
        (*(void (**)(uint64_t, WTF **, WTF **, uint64_t))(*(_QWORD *)v133 + 16))(v133, &v183, v178, 1);
        (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
        v135 = v178[0];
        v178[0] = 0;
        if (v135)
        {
          do
          {
            v136 = __ldaxr((unsigned int *)v135);
            v137 = v136 - 1;
          }
          while (__stlxr(v137, (unsigned int *)v135));
          if (!v137)
          {
            v162 = v86;
            atomic_store(1u, (unsigned int *)v135);
            v163 = *((unsigned int *)v135 + 5);
            if ((_DWORD)v163)
            {
              v164 = *((_QWORD *)v135 + 1);
              v165 = v164 + 16 * v163;
              do
              {
                v166 = *(unsigned int **)(v164 + 8);
                *(_QWORD *)(v164 + 8) = 0;
                if (v166)
                {
                  do
                  {
                    v167 = __ldaxr(v166);
                    v168 = v167 - 1;
                  }
                  while (__stlxr(v168, v166));
                  if (!v168)
                  {
                    atomic_store(1u, v166);
                    v169 = v166[6];
                    if ((_DWORD)v169 != -1)
                      ((void (*)(__int128 *, unsigned int *))off_1E31F7A98[v169])(&buf, v166 + 2);
                    v166[6] = -1;
                    WTF::fastFree((WTF *)v166, v134);
                  }
                }
                v164 += 16;
              }
              while (v164 != v165);
            }
            v170 = (WTF *)*((_QWORD *)v135 + 1);
            if ((WTF *)((char *)v135 + 24) != v170 && v170 != 0)
            {
              *((_QWORD *)v135 + 1) = 0;
              *((_DWORD *)v135 + 4) = 0;
              WTF::fastFree(v170, v134);
            }
            WTF::fastFree(v135, v134);
            v86 = v162;
          }
        }
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v186, v134);
        if (v86)
          CFRelease(v86);
        goto LABEL_195;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v178);
      WTF::String::String((WTF::String *)&v191, "Multiple(");
      WTF::String::number(v57);
      WTF::String::String((WTF::String *)&v189, ") expired session reports found with same sessionID(");
      v89 = *a2;
      if (*a2)
        *(_DWORD *)v89 += 2;
      WTF::String::String((WTF::String *)&v188, ")!");
      *(_QWORD *)&buf = v192;
      v186 = v191;
      v196 = v189;
      v197 = v190;
      v194 = v188;
      v195 = v89;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v186, (uint64_t *)&v197, (uint64_t *)&v196, (uint64_t *)&v195, (uint64_t *)&v194, &v193);
      if (!v193)
      {
        __break(0xC471u);
        return;
      }
      v91 = v188;
      v188 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
        {
          WTF::StringImpl::destroy(v91, v90);
          if (v89)
          {
LABEL_99:
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, v90);
            else
              *(_DWORD *)v89 -= 2;
          }
LABEL_101:
          v92 = v189;
          v189 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, v90);
            else
              *(_DWORD *)v92 -= 2;
          }
          v93 = v190;
          v190 = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 2)
              WTF::StringImpl::destroy(v93, v90);
            else
              *(_DWORD *)v93 -= 2;
          }
          v94 = v191;
          v191 = 0;
          if (v94)
          {
            if (*(_DWORD *)v94 == 2)
              WTF::StringImpl::destroy(v94, v90);
            else
              *(_DWORD *)v94 -= 2;
          }
          v95 = v192;
          v192 = 0;
          if (v95)
          {
            if (*(_DWORD *)v95 == 2)
              WTF::StringImpl::destroy(v95, v90);
            else
              *(_DWORD *)v95 -= 2;
          }
          v96 = qword_1ECE7CE30;
          v97 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v97)
          {
            WTF::String::utf8();
            v99 = v186 ? (char *)v186 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v99;
            _os_log_impl(&dword_1940B8000, v96, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v97 = (uint64_t)v186;
            v186 = 0;
            if (v97)
            {
              if (*(_DWORD *)v97 == 1)
                v97 = WTF::fastFree((WTF *)v97, v98);
              else
                --*(_DWORD *)v97;
            }
          }
          if (WebCore::LogEME && byte_1ECE7CE20)
          {
            v100 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v101 = *v100;
              if ((v101 & 1) != 0)
                break;
              v102 = __ldaxr(v100);
              if (v102 == v101)
              {
                if (!__stxr(v101 | 1, v100))
                {
                  v103 = WTF::Logger::observers((WTF::Logger *)v97);
                  v104 = *(unsigned int *)(v103 + 12);
                  if ((_DWORD)v104)
                  {
                    v105 = *(uint64_t **)v103;
                    v172 = *(_QWORD *)v103 + 8 * v104;
                    do
                    {
                      v106 = *v105;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v178);
                      LODWORD(v200) = 0;
                      WTF::String::String((WTF::String *)&v201, "Multiple(");
                      v202 = 0;
                      WTF::String::number(v57);
                      v204 = 0;
                      WTF::String::String((WTF::String *)&v205, ") expired session reports found with same sessionID(");
                      v206 = 0;
                      v107 = *a2;
                      if (*a2)
                        *(_DWORD *)v107 += 2;
                      v207 = v107;
                      v208 = 0;
                      WTF::String::String((WTF::String *)v209, ")!");
                      v186 = 0;
                      v187 = 0;
                      v108 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                      LODWORD(v187) = 6;
                      v186 = v108;
                      v109 = HIDWORD(v187);
                      *((_DWORD *)v108 + 4 * HIDWORD(v187)) = buf;
                      v110 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v108 + 2 * v109 + 1) = v110;
                      *((_DWORD *)v108 + 4 * (v109 + 1)) = (_DWORD)v200;
                      v111 = v201;
                      if (v201)
                        *(_DWORD *)v201 += 2;
                      *((_QWORD *)v108 + 2 * (v109 + 1) + 1) = v111;
                      *((_DWORD *)v108 + 4 * (v109 + 2)) = v202;
                      v112 = v203;
                      if (v203)
                        *(_DWORD *)v203 += 2;
                      *((_QWORD *)v108 + 2 * (v109 + 2) + 1) = v112;
                      *((_DWORD *)v108 + 4 * (v109 + 3)) = v204;
                      v113 = v205;
                      if (v205)
                        *(_DWORD *)v205 += 2;
                      *((_QWORD *)v108 + 2 * (v109 + 3) + 1) = v113;
                      *((_DWORD *)v108 + 4 * (v109 + 4)) = v206;
                      v114 = v207;
                      if (v207)
                        *(_DWORD *)v207 += 2;
                      *((_QWORD *)v108 + 2 * (v109 + 4) + 1) = v114;
                      *((_DWORD *)v108 + 4 * (v109 + 5)) = v208;
                      v115 = v209[0];
                      if (v209[0])
                        *(_DWORD *)v209[0] += 2;
                      *((_QWORD *)v108 + 2 * (v109 + 5) + 1) = v115;
                      HIDWORD(v187) = v109 + 6;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v106 + 16))(v106, &WebCore::LogEME, 1, &v186);
                      v116 = v186;
                      if (HIDWORD(v187))
                      {
                        v117 = 16 * HIDWORD(v187);
                        v118 = (WTF::StringImpl **)((char *)v186 + 8);
                        do
                        {
                          v119 = *v118;
                          *v118 = 0;
                          if (v119)
                          {
                            if (*(_DWORD *)v119 == 2)
                              WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v98);
                            else
                              *(_DWORD *)v119 -= 2;
                          }
                          v118 += 2;
                          v117 -= 16;
                        }
                        while (v117);
                        v116 = v186;
                      }
                      if (v116)
                      {
                        v186 = 0;
                        LODWORD(v187) = 0;
                        WTF::fastFree(v116, v98);
                      }
                      v120 = (WTF::StringImpl *)v209[0];
                      v209[0] = 0;
                      if (v120)
                      {
                        if (*(_DWORD *)v120 == 2)
                          WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v98);
                        else
                          *(_DWORD *)v120 -= 2;
                      }
                      v121 = v207;
                      v207 = 0;
                      if (v121)
                      {
                        if (*(_DWORD *)v121 == 2)
                          WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v98);
                        else
                          *(_DWORD *)v121 -= 2;
                      }
                      v122 = v205;
                      v205 = 0;
                      if (v122)
                      {
                        if (*(_DWORD *)v122 == 2)
                          WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v98);
                        else
                          *(_DWORD *)v122 -= 2;
                      }
                      v123 = v203;
                      v203 = 0;
                      if (v123)
                      {
                        if (*(_DWORD *)v123 == 2)
                          WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v98);
                        else
                          *(_DWORD *)v123 -= 2;
                      }
                      v124 = v201;
                      v201 = 0;
                      if (v124)
                      {
                        if (*(_DWORD *)v124 == 2)
                          WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v98);
                        else
                          *(_DWORD *)v124 -= 2;
                      }
                      v125 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v125)
                      {
                        if (*(_DWORD *)v125 == 2)
                          WTF::StringImpl::destroy(v125, (WTF::StringImpl *)v98);
                        else
                          *(_DWORD *)v125 -= 2;
                      }
                      ++v105;
                    }
                    while (v105 != (uint64_t *)v172);
                  }
                  v126 = __ldxr(v100);
                  if (v126 == 1)
                  {
                    v54 = v173;
                    v55 = v176;
                    if (!__stlxr(0, v100))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v54 = v173;
                    v55 = v176;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v127 = v193;
          v193 = 0;
          if (v127)
          {
            if (*(_DWORD *)v127 == 2)
              WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v98);
            else
              *(_DWORD *)v127 -= 2;
          }
          goto LABEL_188;
        }
        *(_DWORD *)v91 -= 2;
      }
      if (v89)
        goto LABEL_99;
      goto LABEL_101;
    }
    v13 = *(_QWORD *)(a1 + 272);
    v14 = *(WTF::StringImpl **)(a1 + 280);
    *(_QWORD *)&buf = "CDMInstanceSessionFairPlayStreamingAVFObjC";
    *((_QWORD *)&buf + 1) = 43;
    v200 = "removeSessionData";
    v201 = v14;
    if (*(_BYTE *)(v13 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [72]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&buf, " Failed, persistentState not allowed or no storageURL or no certificate");
    buf = 0uLL;
    v178[0] = 0;
    v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int128 *, WTF **, _QWORD))(*(_QWORD *)v15 + 16))(v15, &buf, v178, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v17 = v178[0];
    v178[0] = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr((unsigned int *)v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unsigned int *)v17));
      if (!v19)
      {
        atomic_store(1u, (unsigned int *)v17);
        v151 = *((unsigned int *)v17 + 5);
        if ((_DWORD)v151)
        {
          v152 = *((_QWORD *)v17 + 1);
          v153 = v152 + 16 * v151;
          do
          {
            v154 = *(unsigned int **)(v152 + 8);
            *(_QWORD *)(v152 + 8) = 0;
            if (v154)
            {
              do
              {
                v155 = __ldaxr(v154);
                v156 = v155 - 1;
              }
              while (__stlxr(v156, v154));
              if (!v156)
              {
                atomic_store(1u, v154);
                v157 = v154[6];
                if ((_DWORD)v157 != -1)
                  ((void (*)(WTF::Logger **, unsigned int *))off_1E31F7A98[v157])(&v186, v154 + 2);
                v154[6] = -1;
                WTF::fastFree((WTF *)v154, v16);
              }
            }
            v152 += 16;
          }
          while (v152 != v153);
        }
        v158 = (WTF *)*((_QWORD *)v17 + 1);
        if ((WTF *)((char *)v17 + 24) != v158 && v158 != 0)
        {
          *((_QWORD *)v17 + 1) = 0;
          *((_DWORD *)v17 + 4) = 0;
          WTF::fastFree(v158, v16);
        }
        WTF::fastFree(v17, v16);
      }
    }
    if (HIDWORD(buf))
    {
      v20 = (uint64_t *)buf;
      v21 = 16 * HIDWORD(buf);
      do
      {
        v20 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v20, v16)+ 2;
        v21 -= 16;
      }
      while (v21);
    }
  }
  else
  {
    buf = 0uLL;
    v178[0] = 0;
    v22 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, __int128 *, WTF **, _QWORD))(*(_QWORD *)v22 + 16))(v22, &buf, v178, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v178[0];
    v178[0] = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr((unsigned int *)v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)v23));
      if (!v25)
      {
        atomic_store(1u, (unsigned int *)v23);
        v142 = *((unsigned int *)v23 + 5);
        if ((_DWORD)v142)
        {
          v143 = *((_QWORD *)v23 + 1);
          v144 = v143 + 16 * v142;
          do
          {
            v145 = *(unsigned int **)(v143 + 8);
            *(_QWORD *)(v143 + 8) = 0;
            if (v145)
            {
              do
              {
                v146 = __ldaxr(v145);
                v147 = v146 - 1;
              }
              while (__stlxr(v147, v145));
              if (!v147)
              {
                atomic_store(1u, v145);
                v148 = v145[6];
                if ((_DWORD)v148 != -1)
                  ((void (*)(WTF::Logger **, unsigned int *))off_1E31F7A98[v148])(&v186, v145 + 2);
                v145[6] = -1;
                WTF::fastFree((WTF *)v145, v16);
              }
            }
            v143 += 16;
          }
          while (v143 != v144);
        }
        v149 = (WTF *)*((_QWORD *)v23 + 1);
        if ((WTF *)((char *)v23 + 24) != v149 && v149 != 0)
        {
          *((_QWORD *)v23 + 1) = 0;
          *((_DWORD *)v23 + 4) = 0;
          WTF::fastFree(v149, v16);
        }
        WTF::fastFree(v23, v16);
      }
    }
    if (HIDWORD(buf))
    {
      v26 = (uint64_t *)buf;
      v27 = 16 * HIDWORD(buf);
      do
      {
        v26 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v26, v16)+ 2;
        v27 -= 16;
      }
      while (v27);
    }
  }
  v28 = (WTF *)buf;
  if ((_QWORD)buf)
  {
    *(_QWORD *)&buf = 0;
    DWORD2(buf) = 0;
    WTF::fastFree(v28, v16);
  }
}

void sub_1946C0018(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf, uint64_t a19, uint64_t a20,WTF *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF *a34,int a35,unsigned int a36,CFTypeRef a37,WTF *a38,int a39,int a40,WTF::StringImpl *a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44,uint64_t a45,WTF::StringImpl *a46)
{
  unsigned __int8 *v46;
  const void *v47;
  int v49;
  uint64_t *v50;
  uint64_t v51;

  v49 = __ldxr(v46);
  if (v49 == 1)
  {
    if (!__stlxr(0, v46))
    {
LABEL_6:
      if (a46)
      {
        if (*(_DWORD *)a46 == 2)
        {
          WTF::StringImpl::destroy(a46, a2);
          if (!v47)
          {
LABEL_12:
            if (a36)
            {
              v50 = (uint64_t *)a34;
              v51 = 16 * a36;
              do
              {
                v50 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v50, a2)+ 2;
                v51 -= 16;
              }
              while (v51);
            }
            if (a34)
              WTF::fastFree(a34, a2);
            if (cf)
              CFRelease(cf);
            if (a37)
              CFRelease(a37);
            _Unwind_Resume(exception_object);
          }
LABEL_10:
          CFRelease(v47);
          goto LABEL_12;
        }
        *(_DWORD *)a46 -= 2;
      }
      if (!v47)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateProtectionStatus(WTF *this)
{
  WTF *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  char v21;
  uint64_t v22;

  if (*((_DWORD *)this + 51))
  {
    v1 = this;
    this = WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateKeyStatuses(this);
    v2 = *((_QWORD *)v1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v18 = 0;
        v19 = 0;
        v4 = *((unsigned int *)v1 + 43);
        if ((_DWORD)v4)
        {
          if (v4 >> 28)
          {
            __break(0xC471u);
            return this;
          }
          LODWORD(v19) = *((_DWORD *)v1 + 43);
          v18 = (WTF *)WTF::fastMalloc((WTF *)(16 * v4));
          v6 = *((unsigned int *)v1 + 43);
          if ((_DWORD)v6)
          {
            v7 = *((_QWORD *)v1 + 20);
            v8 = v7 + 16 * v6;
            do
            {
              v9 = *(unsigned int **)v7;
              do
                v10 = __ldaxr(v9);
              while (__stlxr(v10 + 1, v9));
              v22 = 0;
              v20 = v9;
              v21 = *(_BYTE *)(v7 + 8);
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v22, v5);
              v11 = HIDWORD(v19) + 1;
              v12 = (char *)v18 + 16 * HIDWORD(v19);
              v13 = (uint64_t)v20;
              v20 = 0;
              *(_QWORD *)v12 = v13;
              v12[8] = v21;
              HIDWORD(v19) = v11;
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v20, v14);
              v7 += 16;
            }
            while (v7 != v8);
          }
        }
        (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, &v18);
        if (HIDWORD(v19))
        {
          v16 = (uint64_t *)v18;
          v17 = 16 * HIDWORD(v19);
          do
          {
            v16 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v16, v15)+ 2;
            v17 -= 16;
          }
          while (v17);
        }
        this = v18;
        if (v18)
        {
          v18 = 0;
          LODWORD(v19) = 0;
          return (WTF *)WTF::fastFree(this, v15);
        }
      }
    }
  }
  return this;
}

void sub_1946C0A28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, unsigned int a12)
{
  uint64_t *v13;
  uint64_t v14;

  if (a12)
  {
    v13 = (uint64_t *)a10;
    v14 = 16 * a12;
    do
    {
      v13 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v13, a2)+ 2;
      v14 -= 16;
    }
    while (v14);
  }
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::setClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  *a2 = 0;
  result = *(unsigned int **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v3;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::clearClient(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t ___ZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC17didProvideRequestEP19AVContentKeyRequest_block_invoke(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (a3)
    CFRetain(a3);
  if (cf)
    CFRetain(cf);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E31F7AC8;
  v7[1] = v6;
  v7[2] = v5;
  v7[3] = a3;
  v7[4] = cf;
  v9 = (uint64_t)v7;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

void sub_1946C0B6C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c106_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC17didProvideRequestEP19AVContentKeyRequestE3__0(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c106_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC17didProvideRequestEP19AVContentKeyRequestE3__0(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
}

void sub_1946C0D40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;

  if (v18)
    WTF::ThreadSafeRefCounted<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator,(WTF::DestructionThread)0>::deref(v18);
  if (v17)
  {
    do
    {
      v20 = __ldaxr((unsigned int *)v17);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v17));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)v17);
      v22 = *(unsigned int *)(v17 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v17 + 8);
        v24 = v23 + 16 * v22;
        do
        {
          v25 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              v28 = v25[6];
              if ((_DWORD)v28 != -1)
                ((void (*)(char *, unsigned int *))off_1E31F7A98[v28])(&a17, v25 + 2);
              v25[6] = -1;
              WTF::fastFree((WTF *)v25, a2);
            }
          }
          v23 += 16;
        }
        while (v23 != v24);
      }
      v29 = *(WTF **)(v17 + 8);
      if ((WTF *)(v17 + 24) != v29 && v29 != 0)
      {
        *(_QWORD *)(v17 + 8) = 0;
        *(_DWORD *)(v17 + 16) = 0;
        WTF::fastFree(v29, a2);
      }
      WTF::fastFree((WTF *)v17, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c187_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC18didProvideRequestsEON3WTF6VectorINS1_9RetainPtrI19AVContentKeyRequestEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEE3__1(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a2 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 32) = v2;
  v4 = *(unsigned int **)(a2 + 40);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 40) = v4;
  return result;
}

uint64_t __destroy_helper_block_e8_32c187_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC18didProvideRequestsEON3WTF6VectorINS1_9RetainPtrI19AVContentKeyRequestEELm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEEE3__1(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  char v21;

  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator,(WTF::DestructionThread)0>::deref(v3);
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)result);
      v7 = *(unsigned int *)(result + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(result + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v18 = v8;
              v19 = v9;
              v17 = result;
              atomic_store(1u, v10);
              v20 = (WTF *)v10;
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))off_1E31F7A98[v13])(&v21, v10 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              result = v17;
              v8 = v18;
              v9 = v19;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v16 = result;
        WTF::fastFree(v14, a2);
        result = v16;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(uint64_t a1, AVContentKeyRequest ***a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(a1 - 16, a2);
}

uint64_t ___ZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC25didProvideRenewingRequestEP19AVContentKeyRequest_block_invoke(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (a3)
    CFRetain(a3);
  if (cf)
    CFRetain(cf);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v7 = &off_1E31F7B18;
  v7[1] = v6;
  v7[2] = v5;
  v7[3] = a3;
  v7[4] = cf;
  v9 = (uint64_t)v7;
  WTF::callOnMainThread();
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

void sub_1946C1058(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;

  if (v10)
  {
    do
    {
      v12 = __ldaxr(v10);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v10));
    if (!v13)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c114_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC25didProvideRenewingRequestEP19AVContentKeyRequestE3__1(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 40) = v2;
  return result;
}

unsigned int *__destroy_helper_block_e8_32c114_ZTSKZN7WebCore42CDMInstanceSessionFairPlayStreamingAVFObjC25didProvideRenewingRequestEP19AVContentKeyRequestE3__1(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
}

WTF::StringImpl *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::nextRequest(WTF::StringImpl *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  AVContentKeyRequest **v4;
  WTF::StringImpl *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  void *v15;
  uint64_t v16;
  AVContentKeyRequest *v17;
  uint64_t v18;
  AVContentKeyRequest *v19;
  AVContentKeyRequest **v20;
  int v21;
  int v22;
  uint64_t v23;

  if (!*((_DWORD *)this + 47))
    return this;
  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 22);
  v5 = *(WTF::StringImpl **)v3;
  v4 = *(AVContentKeyRequest ***)(v3 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  v20 = v4;
  v6 = *(_DWORD *)(v3 + 16);
  v7 = *(_DWORD *)(v3 + 20);
  *(_QWORD *)(v3 + 16) = 0;
  v21 = v6;
  v22 = v7;
  v8 = *((_QWORD *)this + 22);
  v9 = *(unsigned int *)(v8 + 20);
  if ((_DWORD)v9)
  {
    v10 = *(const void ***)(v8 + 8);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
        CFRelease(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v13 = *(WTF **)(v8 + 8);
  if (v13)
  {
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = *(WTF::StringImpl **)v8;
  *(_QWORD *)v8 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::VectorMover<false,WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request>::move((WTF::StringImpl *)(v8 + 24), (WTF::StringImpl *)(*(_QWORD *)(v2 + 176) + 24 * *(unsigned int *)(v2 + 188)), v8);
  --*(_DWORD *)(v2 + 188);
  if (v7)
  {
    {
      v16 = WebCore::InitDataRegistry::cencName(void)::sinf;
    }
    else
    {
      WTF::AtomStringImpl::add();
      v16 = v23;
      WebCore::InitDataRegistry::cencName(void)::sinf = v23;
    }
    if (v5 != (WTF::StringImpl *)v16)
    {
      v17 = *v4;
      if (-[AVContentKeyRequest renewsExpiringResponseData](*v4, "renewsExpiringResponseData"))
        WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)v2, v17);
      else
        WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)v2, v17);
LABEL_21:
      v18 = 0;
      do
      {
        v19 = v4[v18];
        v4[v18] = 0;
        if (v19)
          CFRelease(v19);
        ++v18;
      }
      while (v7 != v18);
      goto LABEL_25;
    }
    WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(v2, &v20);
    v7 = v22;
    v4 = v20;
    if (v22)
      goto LABEL_21;
  }
LABEL_25:
  if (v4)
    WTF::fastFree((WTF *)v4, v15);
  this = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v5 -= 2;
  }
  return this;
}

void sub_1946C1350(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF *a10, int a11, unsigned int a12)
{
  uint64_t v13;
  const void *v14;

  if (a12)
  {
    v13 = 0;
    do
    {
      v14 = *(const void **)((char *)a10 + v13);
      *(_QWORD *)((char *)a10 + v13) = 0;
      if (v14)
        CFRelease(v14);
      v13 += 8;
    }
    while (8 * a12 != v13);
  }
  if (a10)
    WTF::fastFree(a10, a2);
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didFailToProvideRequest(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSError *a3)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didFailToProvideRequest((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16), a2, a3);
}

WTF *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateKeyStatuses(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v1;
  void *v2;
  WebCore::CDMPrivateFairPlayStreaming **v3;
  WebCore::CDMPrivateFairPlayStreaming **v4;
  unint64_t v5;
  unsigned int v6;
  WebCore::CDMPrivateFairPlayStreaming *v7;
  void *v8;
  unint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int **v22;
  WTF *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  WTF *v30;
  WTF *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  unint64_t v43;
  uint64_t v44;
  WebCore::CDMPrivateFairPlayStreaming *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  uint64_t *v55;
  uint64_t v56;
  WTF *result;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v61;
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *v62;
  WTF *v63;
  char v64;
  WTF *v65;
  int v66;
  unsigned int v67;
  WTF *v68;
  unsigned int v69;
  WTF *v70;
  uint64_t v71;
  char v72;

  v1 = this;
  v70 = 0;
  v71 = 0;
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyRequests((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)&v68, *((char **)this + 24), *((_DWORD *)this + 51));
  v3 = (WebCore::CDMPrivateFairPlayStreaming **)v68;
  if (!v69)
    goto LABEL_71;
  v4 = (WebCore::CDMPrivateFairPlayStreaming **)((char *)v68 + 8 * v69);
  do
  {
    WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest(*v3, (uint64_t)&v65);
    v5 = -[WebCore::CDMPrivateFairPlayStreaming status](*v3, "status");
    if (v5 >= 6)
      LOBYTE(v6) = 5;
    else
      LOBYTE(v6) = 0x60205000005uLL >> (8 * v5);
    if (objc_msgSend((id)-[WebCore::CDMPrivateFairPlayStreaming error](*v3, "error"), "code") == -42811)
      LOBYTE(v6) = 3;
    v7 = *v3;
    v8 = (void *)-[WebCore::CDMPrivateFairPlayStreaming contentKey](*v3, "contentKey");
    if (v8)
    {
      if (!WebCore::s_sampleBufferContentKeySessionSupportEnabled || (objc_opt_respondsToSelector() & 1) == 0)
      {
        v9 = -[WebCore::CDMPrivateFairPlayStreaming externalContentProtectionStatus](v7, "externalContentProtectionStatus");
        if (v9 > 2)
          goto LABEL_15;
LABEL_14:
        v6 = 0x30005u >> (8 * v9);
        goto LABEL_15;
      }
      v9 = objc_msgSend(v8, "externalContentProtectionStatus");
      if (v9 < 3)
        goto LABEL_14;
    }
LABEL_15:
    v10 = v65;
    v11 = (WTF *)((char *)v65 + 8 * v67);
    if (v67)
    {
      do
      {
        v12 = *(WTF **)v10;
        *(_QWORD *)v10 = 0;
        v63 = v12;
        v64 = v6;
        v13 = HIDWORD(v71);
        if (HIDWORD(v71) == (_DWORD)v71)
        {
          v14 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v70, HIDWORD(v71) + 1, (unint64_t)&v63);
          v13 = HIDWORD(v71);
          v15 = (char *)v70 + 16 * HIDWORD(v71);
          v16 = *(_QWORD *)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v15 = v16;
          v15[8] = v14[8];
        }
        else
        {
          v63 = 0;
          v17 = (char *)v70 + 16 * HIDWORD(v71);
          *(_QWORD *)v17 = v12;
          v17[8] = v6;
        }
        HIDWORD(v71) = v13 + 1;
        v18 = v63;
        v63 = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr((unsigned int *)v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, (unsigned int *)v18));
          if (!v20)
          {
            v61 = v1;
            atomic_store(1u, (unsigned int *)v18);
            v21 = *((unsigned int *)v18 + 5);
            if ((_DWORD)v21)
            {
              v22 = (unsigned int **)*((_QWORD *)v18 + 1);
              v23 = (WTF *)&v22[2 * v21];
              do
              {
                v24 = v22[1];
                v22[1] = 0;
                if (v24)
                {
                  do
                  {
                    v25 = __ldaxr(v24);
                    v26 = v25 - 1;
                  }
                  while (__stlxr(v26, v24));
                  if (!v26)
                  {
                    v59 = v23;
                    atomic_store(1u, v24);
                    v27 = v24[6];
                    if ((_DWORD)v27 != -1)
                    {
                      v58 = (WTF *)v24;
                      ((void (*)(char *, unsigned int *))off_1E31F7A98[v27])(&v72, v24 + 2);
                      v24 = (unsigned int *)v58;
                    }
                    v24[6] = -1;
                    WTF::fastFree((WTF *)v24, v2);
                    v23 = v59;
                  }
                }
                v22 += 2;
              }
              while (v22 != (unsigned int **)v23);
            }
            v28 = (WTF *)*((_QWORD *)v18 + 1);
            if ((WTF *)((char *)v18 + 24) != v28 && v28 != 0)
            {
              *((_QWORD *)v18 + 1) = 0;
              *((_DWORD *)v18 + 4) = 0;
              WTF::fastFree(v28, v2);
            }
            WTF::fastFree(v18, v2);
            v1 = v61;
          }
        }
        v10 = (WTF *)((char *)v10 + 8);
      }
      while (v10 != v11);
      v10 = v65;
      if (v67)
      {
        v30 = (WTF *)((char *)v65 + 8 * v67);
        do
        {
          v31 = *(WTF **)v10;
          *(_QWORD *)v10 = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr((unsigned int *)v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, (unsigned int *)v31));
            if (!v33)
            {
              v62 = v1;
              atomic_store(1u, (unsigned int *)v31);
              v34 = *((unsigned int *)v31 + 5);
              if ((_DWORD)v34)
              {
                v35 = *((_QWORD *)v31 + 1);
                v36 = v35 + 16 * v34;
                do
                {
                  v37 = *(unsigned int **)(v35 + 8);
                  *(_QWORD *)(v35 + 8) = 0;
                  if (v37)
                  {
                    do
                    {
                      v38 = __ldaxr(v37);
                      v39 = v38 - 1;
                    }
                    while (__stlxr(v39, v37));
                    if (!v39)
                    {
                      atomic_store(1u, v37);
                      v40 = v37[6];
                      if ((_DWORD)v40 != -1)
                      {
                        v60 = (WTF *)v37;
                        ((void (*)(WTF **, unsigned int *))off_1E31F7A98[v40])(&v63, v37 + 2);
                        v37 = (unsigned int *)v60;
                      }
                      v37[6] = -1;
                      WTF::fastFree((WTF *)v37, v2);
                    }
                  }
                  v35 += 16;
                }
                while (v35 != v36);
              }
              v41 = (WTF *)*((_QWORD *)v31 + 1);
              if ((WTF *)((char *)v31 + 24) != v41 && v41 != 0)
              {
                *((_QWORD *)v31 + 1) = 0;
                *((_DWORD *)v31 + 4) = 0;
                WTF::fastFree(v41, v2);
              }
              WTF::fastFree(v31, v2);
              v1 = v62;
            }
          }
          v10 = (WTF *)((char *)v10 + 8);
        }
        while (v10 != v30);
        v10 = v65;
      }
    }
    if (v10)
    {
      v65 = 0;
      v66 = 0;
      WTF::fastFree(v10, v2);
    }
    ++v3;
  }
  while (v3 != v4);
  v3 = (WebCore::CDMPrivateFairPlayStreaming **)v68;
  if (v69)
  {
    v43 = 0;
    v44 = 8 * v69;
    do
    {
      v45 = v3[v43 / 8];
      v3[v43 / 8] = 0;
      if (v45)
        CFRelease(v45);
      v43 += 8;
    }
    while (v44 != v43);
  }
LABEL_71:
  if (v3)
    WTF::fastFree((WTF *)v3, v2);
  v46 = *((unsigned int *)v1 + 43);
  if ((_DWORD)v46)
  {
    v47 = (uint64_t *)*((_QWORD *)v1 + 20);
    v48 = 16 * v46;
    do
    {
      v47 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v47, v2)+ 2;
      v48 -= 16;
    }
    while (v48);
  }
  v49 = (WTF *)*((_QWORD *)v1 + 20);
  if (v49)
  {
    *((_QWORD *)v1 + 20) = 0;
    *((_DWORD *)v1 + 42) = 0;
    WTF::fastFree(v49, v2);
  }
  *((_QWORD *)v1 + 20) = v70;
  v50 = v71;
  v70 = 0;
  v71 = 0;
  *((_QWORD *)v1 + 21) = v50;
  v51 = *((_QWORD *)v1 + 6);
  v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v52 = off_1E31F7B40;
  v68 = v52;
  WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(v51 + 112), &v68);
  v54 = v68;
  v68 = 0;
  if (v54)
    (*(void (**)(WTF *))(*(_QWORD *)v54 + 8))(v54);
  if (HIDWORD(v71))
  {
    v55 = (uint64_t *)v70;
    v56 = 16 * HIDWORD(v71);
    do
    {
      v55 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v55, v53)+ 2;
      v56 -= 16;
    }
    while (v56);
  }
  result = v70;
  if (v70)
  {
    v70 = 0;
    LODWORD(v71) = 0;
    return (WTF *)WTF::fastFree(result, v53);
  }
  return result;
}

void sub_1946C188C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF *a16, int a17, int a18, WTF *a19, int a20,int a21,WTF *a22,int a23,unsigned int a24)
{
  uint64_t *v25;
  uint64_t v26;

  if (a19)
    (*(void (**)(WTF *))(*(_QWORD *)a19 + 8))(a19);
  v25 = (uint64_t *)a22;
  if (a24)
  {
    v26 = 16 * a24;
    do
    {
      v25 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v25, a2)+ 2;
      v26 -= 16;
    }
    while (v26);
    v25 = (uint64_t *)a22;
  }
  if (v25)
    WTF::fastFree((WTF *)v25, a2);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestDidSucceed(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::requestDidSucceed((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeys(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, char *a2, int a3)
{
  void *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  unsigned int v8;
  id *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  WTF *v17;
  WTF *v18;
  const void *v19;
  WTF *v20;
  unsigned int v21;

  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyRequests((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)&v20, a2, a3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v5 = v21;
  if (v21)
  {
    if (!(v21 >> 29))
    {
      v6 = (WTF *)(8 * v21);
      v7 = (WTF *)WTF::fastMalloc(v6);
      v8 = 0;
      *((_DWORD *)this + 2) = v5;
      *(_QWORD *)this = v7;
      v9 = (id *)v20;
      v10 = 8 * v5;
      do
      {
        v11 = (const void *)objc_msgSend(*v9, "contentKey");
        v12 = v11;
        if (v11)
        {
          CFRetain(v11);
          *((_QWORD *)v7 + v8) = v12;
          *((_DWORD *)this + 3) = ++v8;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      if (v5 <= v8)
      {
LABEL_18:
        v17 = 0;
        v18 = v20;
        do
        {
          v19 = *(const void **)((char *)v17 + (_QWORD)v18);
          *(_QWORD *)((char *)v17 + (_QWORD)v18) = 0;
          if (v19)
            CFRelease(v19);
          v17 = (WTF *)((char *)v17 + 8);
        }
        while (v6 != v17);
        if (v18)
          goto LABEL_23;
        return;
      }
      if (!v8)
      {
LABEL_16:
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
LABEL_17:
        WTF::fastFree(v7, v4);
        goto LABEL_18;
      }
      if (!(v8 >> 29))
      {
        v13 = WTF::fastMalloc((WTF *)(8 * v8));
        *((_DWORD *)this + 2) = v8;
        *(_QWORD *)this = v13;
        if ((WTF *)v13 != v7)
        {
          v14 = 0;
          do
          {
            v15 = *(_QWORD *)((char *)v7 + v14);
            *(_QWORD *)((char *)v7 + v14) = 0;
            *(_QWORD *)(v13 + v14) = v15;
            v16 = *(const void **)((char *)v7 + v14);
            *(_QWORD *)((char *)v7 + v14) = 0;
            if (v16)
              CFRelease(v16);
            v14 += 8;
          }
          while (8 * v8 != v14);
          if ((WTF *)v13 != v7)
            goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1946C1B2CLL);
  }
  v18 = v20;
  if (v20)
LABEL_23:
    WTF::fastFree(v18, v4);
}

void sub_1946C1B38(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  unsigned int v12;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;

  if (v12)
  {
    v14 = 8 * v12;
    do
    {
      v15 = *(const void **)v11;
      *(_QWORD *)v11 = 0;
      if (v15)
        CFRelease(v15);
      v11 = (WTF *)((char *)v11 + 8);
      v14 -= 8;
    }
    while (v14);
    v11 = *(WTF **)v10;
  }
  if (v11)
  {
    *(_QWORD *)v10 = 0;
    *(_DWORD *)(v10 + 8) = 0;
    WTF::fastFree(v11, a2);
  }
  v16 = 0;
  while (1)
  {
    v17 = *(const void **)((char *)a9 + v16);
    *(_QWORD *)((char *)a9 + v16) = 0;
    if (v17)
      CFRelease(v17);
    v16 += 8;
    if (v9 == v16)
    {
      if (a9)
        WTF::fastFree(a9, a2);
      _Unwind_Resume(exception_object);
    }
  }
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyRequests(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, char *a2, int a3)
{
  char *v3;
  const void **v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const void **v23;
  const void *v24;
  const void *v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  const void *v29;
  const void **v30;
  const void *v31;
  uint64_t v32;
  WTF *v33;
  const void **v34;
  uint64_t v35;
  const void *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int v42;
  char *v43;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!a3)
    return;
  v3 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v43 = &a2[24 * a3];
  do
  {
    v7 = *((unsigned int *)v3 + 5);
    v8 = 8 * v7;
    if ((_DWORD)v7)
    {
      if (v7 >> 29)
        goto LABEL_64;
      v9 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
      v10 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v10)
      {
        v11 = v7;
        v12 = 0;
        v13 = *((_QWORD *)v3 + 1);
        v14 = 8 * v10;
        do
        {
          v15 = *(const void **)(v13 + v12);
          *(_QWORD *)((char *)v9 + v12) = v15;
          if (v15)
            CFRetain(v15);
          v12 += 8;
        }
        while (v14 != v12);
        v7 = v11;
      }
    }
    else
    {
      v9 = 0;
    }
    v16 = v7 + v6;
    if (v16 > v5)
    {
      v17 = v5 + (v5 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v16)
        v5 = v7 + v6;
      else
        v5 = v18;
      if (v5 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1946C1EACLL);
      }
      v19 = WTF::fastMalloc((WTF *)(8 * v5));
      v20 = v19;
      v42 = v7;
      *((_DWORD *)this + 2) = v5;
      *(_QWORD *)this = v19;
      if (v6)
      {
        v21 = 8 * v6;
        v22 = (_QWORD *)v19;
        v23 = v4;
        do
        {
          v24 = *v23;
          *v23 = 0;
          *v22 = v24;
          v25 = *v23;
          *v23 = 0;
          if (v25)
            CFRelease(v25);
          ++v22;
          ++v23;
          v21 -= 8;
        }
        while (v21);
      }
      v5 = v5;
      if (!v4)
      {
        v4 = (const void **)v20;
        if (!v42)
          goto LABEL_36;
        goto LABEL_30;
      }
      LODWORD(v7) = v42;
      if ((const void **)v20 == v4)
      {
        v20 = 0;
        v5 = 0;
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
      }
      v26 = (WTF *)v4;
      v4 = (const void **)v20;
      WTF::fastFree(v26, a2);
    }
    if (!(_DWORD)v7)
      goto LABEL_36;
LABEL_30:
    v27 = v8;
    v28 = v9;
    do
    {
      v29 = *(const void **)v28;
      *(_QWORD *)v28 = 0;
      v28 = (WTF *)((char *)v28 + 8);
      v4[v6++] = v29;
      v27 -= 8;
    }
    while (v27);
    *((_DWORD *)this + 3) = v6;
    v30 = (const void **)v9;
    do
    {
      v31 = *v30;
      *v30 = 0;
      if (v31)
        CFRelease(v31);
      ++v30;
      v8 -= 8;
    }
    while (v8);
LABEL_36:
    if (v9)
      WTF::fastFree(v9, a2);
    v3 += 24;
  }
  while (v3 != v43);
  if (v6 < *((_DWORD *)this + 2))
  {
    v32 = *((unsigned int *)this + 3);
    v33 = *(WTF **)this;
    if (v6 < v32)
    {
      v34 = (const void **)((char *)v33 + 8 * v6);
      v35 = 8 * v32 - 8 * v6;
      do
      {
        v36 = *v34;
        *v34 = 0;
        if (v36)
          CFRelease(v36);
        ++v34;
        v35 -= 8;
      }
      while (v35);
      *((_DWORD *)this + 3) = v6;
      LODWORD(v32) = v6;
    }
    v37 = v33;
    if (v6)
    {
      if (v6 >> 29)
      {
LABEL_64:
        __break(0xC471u);
        JUMPOUT(0x1946C1EA4);
      }
      v38 = WTF::fastMalloc((WTF *)(8 * v6));
      v37 = (WTF *)v38;
      *((_DWORD *)this + 2) = v6;
      *(_QWORD *)this = v38;
      if ((_DWORD)v32 && (WTF *)v38 != v33)
      {
        v39 = 0;
        do
        {
          v40 = *(_QWORD *)((char *)v33 + v39);
          *(_QWORD *)((char *)v33 + v39) = 0;
          *(_QWORD *)((char *)v37 + v39) = v40;
          v41 = *(const void **)((char *)v33 + v39);
          *(_QWORD *)((char *)v33 + v39) = 0;
          if (v41)
            CFRelease(v41);
          v39 += 8;
        }
        while (8 * v32 != v39);
      }
    }
    if (v33)
    {
      if (v37 == v33)
      {
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
      }
      WTF::fastFree(v33, a2);
    }
  }
}

void sub_1946C1EB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WTF *v12;
  unsigned int v13;
  uint64_t v15;
  const void *v16;

  if (v13)
  {
    v15 = 8 * v13;
    do
    {
      v16 = *(const void **)v12;
      *(_QWORD *)v12 = 0;
      if (v16)
        CFRelease(v16);
      v12 = (WTF *)((char *)v12 + 8);
      v15 -= 8;
    }
    while (v15);
    v12 = *(WTF **)a12;
  }
  if (v12)
  {
    *(_QWORD *)a12 = 0;
    *(_DWORD *)(a12 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::shouldRetryRequestForReason(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2, NSString *a3)
{
  return 0;
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::sessionIdentifierChanged(WTF **this, NSData *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  const void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t *v8;
  uint64_t result;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v4 += 2;
  if (a2)
  {
    v5 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", a2, 4);
    MEMORY[0x19AEA5508](&v14, v5);
    v7 = v14;
    v14 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
      {
        WTF::StringImpl::destroy(v4, v6);
        v13 = v14;
        v14 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v4 -= 2;
        v14 = 0;
      }
    }
    if (v5)
      CFRelease(v5);
    v4 = v7;
  }
  v8 = (uint64_t *)(this + 17);
  result = WTF::equal(this[17], v4, a3);
  if ((result & 1) == 0)
  {
    if (v4)
      *(_DWORD *)v4 += 2;
    result = *v8;
    *v8 = (uint64_t)v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
    v11 = this[16];
    if (v11)
    {
      result = *((_QWORD *)v11 + 1);
      if (result)
        result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 32))(result, (char *)this + 136);
    }
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return WTF::StringImpl::destroy(v4, v10);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

void sub_1946C20C0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  const void *v3;

  if (v3)
    CFRelease(v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::sessionIdentifierChanged(WTF **this, NSData *a2, const WTF::StringImpl *a3)
{
  return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::sessionIdentifierChanged(this - 2, a2, a3);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::groupSessionIdentifierChanged(uint64_t a1, int a2, NSData *a3)
{
  return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::sessionIdentifierChanged((WTF **)(a1 - 16), a3, (const WTF::StringImpl *)a3);
}

WTF *`non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, int a2)
{
  return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::outputObscuredDueToInsufficientExternalProtectionChanged((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
}

WTF *`non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::externalProtectionStatusDidChangeForContentKey(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKey *a2)
{
  return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateProtectionStatus((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16));
}

WTF *`non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::externalProtectionStatusDidChangeForContentKeyRequest(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, AVContentKeyRequest *a2)
{
  return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateProtectionStatus((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16));
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyForSample(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, const WebCore::MediaSampleAVFObjC *a2)
{
  uint64_t v2;
  void *v5;
  WebCore::CDMPrivateFairPlayStreaming **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  unint64_t v32;
  uint64_t v33;
  WebCore::CDMPrivateFairPlayStreaming *v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  char v38;
  WebCore::CDMPrivateFairPlayStreaming **v39;
  WTF *v40;
  int v41;
  unsigned int v42;
  WTF *v43;
  unsigned int v44;
  char v45;

  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyRequests((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)&v43, *((char **)this + 24), *((_DWORD *)this + 51));
  v6 = (WebCore::CDMPrivateFairPlayStreaming **)v43;
  if (v44)
  {
    v7 = 0;
    v39 = (WebCore::CDMPrivateFairPlayStreaming **)((char *)v43 + 8 * v44);
    while (1)
    {
      WebCore::CDMPrivateFairPlayStreaming::keyIDsForRequest(*v6, (uint64_t)&v40);
      v8 = (uint64_t *)v40;
      v9 = (uint64_t *)((char *)v40 + 8 * v42);
      if (v42)
      {
        while (1)
        {
          if (v7 >= *((unsigned int *)this + 43))
          {
            __break(0xC471u);
            return;
          }
          v10 = v7++;
          LODWORD(v10) = *(unsigned __int8 *)(*((_QWORD *)this + 20) + 16 * v10 + 8);
          v11 = v10 > 5;
          v12 = (1 << v10) & 0x39;
          v13 = v11 || v12 == 0;
          if (!v13 && *((_DWORD *)a2 + 23))
          {
            v14 = 0;
            while (1)
            {
              v15 = WebCore::FragmentedSharedBuffer::operator==(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8 * v14), *v8);
              if ((v16 & 1) != 0)
                break;
              if (++v14 >= (unint64_t)*((unsigned int *)a2 + 23))
                goto LABEL_15;
            }
            v17 = -[WebCore::CDMPrivateFairPlayStreaming contentKey](*v6, "contentKey", v15);
            if (v17)
              break;
          }
LABEL_15:
          if (++v8 == v9)
          {
            v18 = 1;
            v17 = v2;
            goto LABEL_20;
          }
        }
        v18 = 0;
LABEL_20:
        v8 = (uint64_t *)v40;
        if (!v42)
        {
          v2 = v17;
          if (v40)
            goto LABEL_44;
          goto LABEL_45;
        }
        v38 = v18;
        v19 = (uint64_t *)((char *)v40 + 8 * v42);
        do
        {
          v20 = *v8;
          *v8 = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr((unsigned int *)v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, (unsigned int *)v20));
            if (!v22)
            {
              atomic_store(1u, (unsigned int *)v20);
              v23 = *(unsigned int *)(v20 + 20);
              if ((_DWORD)v23)
              {
                v24 = *(_QWORD *)(v20 + 8);
                v25 = v24 + 16 * v23;
                do
                {
                  v26 = *(unsigned int **)(v24 + 8);
                  *(_QWORD *)(v24 + 8) = 0;
                  if (v26)
                  {
                    do
                    {
                      v27 = __ldaxr(v26);
                      v28 = v27 - 1;
                    }
                    while (__stlxr(v28, v26));
                    if (!v28)
                    {
                      v35 = v25;
                      v36 = v24;
                      atomic_store(1u, v26);
                      v37 = (WTF *)v26;
                      v29 = v26[6];
                      if ((_DWORD)v29 != -1)
                        ((void (*)(char *, char *))off_1E31F7A98[v29])(&v45, (char *)v37 + 8);
                      *((_DWORD *)v37 + 6) = -1;
                      WTF::fastFree(v37, v5);
                      v25 = v35;
                      v24 = v36;
                    }
                  }
                  v24 += 16;
                }
                while (v24 != v25);
              }
              v30 = *(WTF **)(v20 + 8);
              if ((WTF *)(v20 + 24) != v30 && v30 != 0)
              {
                *(_QWORD *)(v20 + 8) = 0;
                *(_DWORD *)(v20 + 16) = 0;
                WTF::fastFree(v30, v5);
              }
              WTF::fastFree((WTF *)v20, v5);
            }
          }
          ++v8;
        }
        while (v8 != v19);
        v8 = (uint64_t *)v40;
        v2 = v17;
        v18 = v38;
        if (v40)
        {
LABEL_44:
          v40 = 0;
          v41 = 0;
          WTF::fastFree((WTF *)v8, v5);
        }
      }
      else
      {
        v18 = 1;
        if (v40)
          goto LABEL_44;
      }
LABEL_45:
      if ((v18 & 1) != 0 && ++v6 != v39)
        continue;
      v6 = (WebCore::CDMPrivateFairPlayStreaming **)v43;
      if (v44)
      {
        v32 = 0;
        v33 = 8 * v44;
        do
        {
          v34 = v6[v32 / 8];
          v6[v32 / 8] = 0;
          if (v34)
            CFRelease(v34);
          v32 += 8;
        }
        while (v33 != v32);
      }
      break;
    }
  }
  if (v6)
    WTF::fastFree((WTF *)v6, v5);
}

void sub_1946C2400(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, const void **a17, int a18, unsigned int a19)
{
  uint64_t v20;
  const void **v21;
  const void *v22;

  if (a19)
  {
    v20 = 8 * a19;
    v21 = a17;
    do
    {
      v22 = *v21;
      *v21 = 0;
      if (v22)
        CFRelease(v22);
      ++v21;
      v20 -= 8;
    }
    while (v20);
  }
  if (a17)
    WTF::fastFree((WTF *)a17, a2);
  _Unwind_Resume(exception_object);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceKeys(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this@<X0>, WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *a2@<X8>)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeys(a2, *((char **)this + 24), *((_DWORD *)this + 51));
}

void `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceKeys(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this@<X0>, WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *a2@<X8>)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeys(a2, *((char **)this + 20), *((_DWORD *)this + 43));
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceLogIdentifier(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 35);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceLogIdentifier(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceLogger(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 34);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceLogger(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 30);
}

char *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceLogChannel(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return &WebCore::LogEME;
}

char *`non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::contentKeyGroupDataSourceLogChannel(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return &WebCore::LogEME;
}

void WebCore::CDMInstanceFairPlayStreamingAVFObjC::~CDMInstanceFairPlayStreamingAVFObjC(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CDMInstanceFairPlayStreamingAVFObjC::~CDMInstanceFairPlayStreamingAVFObjC(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  const void *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  const void *v23;
  const void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t i;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t (**v49)();
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v3 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 14);
  if (v7)
  {
    v36 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v36)
    {
      for (i = 0; i != v36; ++i)
      {
        v38 = *(unsigned int **)(v7 + 8 * i);
        if (v38 != (unsigned int *)-1)
        {
          *(_QWORD *)(v7 + 8 * i) = 0;
          if (v38)
          {
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v38);
              v57 = v7;
              v41 = i;
              WTF::fastFree((WTF *)v38, a2);
              i = v41;
              v7 = v57;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v8 = *((_QWORD *)this + 13);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (const void **)*((_QWORD *)this + 13);
      do
      {
        v11 = *v10;
        if (*v10 != (const void *)-1)
        {
          *v10 = 0;
          if (v11)
            CFRelease(v11);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
  v12 = *((unsigned int *)this + 25);
  if ((_DWORD)v12)
  {
    v13 = (unsigned int **)*((_QWORD *)this + 11);
    v14 = &v13[v12];
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, a2);
        }
      }
      ++v13;
    }
    while (v13 != v14);
  }
  v18 = (WTF *)*((_QWORD *)this + 11);
  if (v18)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v18, a2);
  }
  v19 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v19)
    CFRelease(v19);
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v42 = *(unsigned int *)(v20 + 20);
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD *)(v20 + 8);
        v44 = v43 + 16 * v42;
        v45 = off_1E31F7A98;
        do
        {
          v46 = *(unsigned int **)(v43 + 8);
          *(_QWORD *)(v43 + 8) = 0;
          if (v46)
          {
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              v49 = v45;
              v56 = v44;
              v58 = v43;
              v50 = v20;
              atomic_store(1u, v46);
              v51 = v46;
              v52 = v46[6];
              if ((_DWORD)v52 != -1)
                ((void (*)(char *, unsigned int *))v45[v52])(&v59, v46 + 2);
              v51[6] = -1;
              WTF::fastFree((WTF *)v51, a2);
              v20 = v50;
              v44 = v56;
              v43 = v58;
              v45 = v49;
            }
          }
          v43 += 16;
        }
        while (v43 != v44);
      }
      v53 = *(WTF **)(v20 + 8);
      if ((WTF *)(v20 + 24) != v53 && v53 != 0)
      {
        *(_QWORD *)(v20 + 8) = 0;
        *(_DWORD *)(v20 + 16) = 0;
        v55 = v20;
        WTF::fastFree(v53, a2);
        v20 = v55;
      }
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  v23 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v23)
    CFRelease(v23);
  v24 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v24)
    CFRelease(v24);
  v25 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, a2);
    }
  }
  v28 = *((_QWORD *)this + 4);
  if (v28)
  {
    *(_QWORD *)(v28 + 8) = 0;
    v29 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v32 = *((_QWORD *)this + 3);
  if (v32)
  {
    *(_QWORD *)(v32 + 8) = 0;
    v33 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::setLogIdentifier(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 136) = a2;
  return this;
}

uint64_t WebCore::CDMInstanceFairPlayStreamingAVFObjC::implementationType(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  return 2;
}

uint64_t WebCore::CDMInstance::setHDCPStatus()
{
  return 0;
}

void `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::~CDMInstanceFairPlayStreamingAVFObjC(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this, void *a2)
{
  WebCore::CDMInstanceFairPlayStreamingAVFObjC::~CDMInstanceFairPlayStreamingAVFObjC((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CDMInstanceFairPlayStreamingAVFObjC::~CDMInstanceFairPlayStreamingAVFObjC((WebCore::CDMInstanceFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::logger(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceFairPlayStreamingAVFObjC::logIdentifier(WebCore::CDMInstanceFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 15);
}

void WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::~CDMInstanceSessionFairPlayStreamingAVFObjC(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::~CDMInstanceSessionFairPlayStreamingAVFObjC(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  const void *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  const void **v29;
  uint64_t v30;
  const void *v31;
  WTF *v32;
  const void *v33;
  uint64_t v34;
  const void **v35;
  uint64_t v36;
  const void *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  const void *v40;
  const void *v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;

  v3 = (unsigned int *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (*((_BYTE *)this + 232))
  {
    v11 = *((unsigned int *)this + 57);
    if ((_DWORD)v11)
    {
      v12 = (const void **)*((_QWORD *)this + 27);
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
          CFRelease(v14);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    v15 = (WTF *)*((_QWORD *)this + 27);
    if (v15)
    {
      *((_QWORD *)this + 27) = 0;
      *((_DWORD *)this + 56) = 0;
      WTF::fastFree(v15, a2);
    }
    v16 = (WTF::StringImpl *)*((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 192, a2);
  WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 176, v17);
  v19 = *((unsigned int *)this + 43);
  if ((_DWORD)v19)
  {
    v20 = (uint64_t *)*((_QWORD *)this + 20);
    v21 = 16 * v19;
    do
    {
      v20 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v20, v18)+ 2;
      v21 -= 16;
    }
    while (v21);
  }
  v22 = (WTF *)*((_QWORD *)this + 20);
  if (v22)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v22, v18);
  }
  std::unique_ptr<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::UpdateResponseCollector>::reset[abi:sn180100]((WTF **)this + 19, 0);
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v23);
    }
  }
  v28 = *((unsigned int *)this + 31);
  if ((_DWORD)v28)
  {
    v29 = (const void **)*((_QWORD *)this + 14);
    v30 = 8 * v28;
    do
    {
      v31 = *v29;
      *v29 = 0;
      if (v31)
        CFRelease(v31);
      ++v29;
      v30 -= 8;
    }
    while (v30);
  }
  v32 = (WTF *)*((_QWORD *)this + 14);
  if (v32)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v32, v23);
  }
  v33 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v33)
    CFRelease(v33);
  if (*((_BYTE *)this + 96))
  {
    v34 = *((unsigned int *)this + 23);
    if ((_DWORD)v34)
    {
      v35 = (const void **)*((_QWORD *)this + 10);
      v36 = 8 * v34;
      do
      {
        v37 = *v35;
        *v35 = 0;
        if (v37)
          CFRelease(v37);
        ++v35;
        v36 -= 8;
      }
      while (v36);
    }
    v38 = (WTF *)*((_QWORD *)this + 10);
    if (v38)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v38, v23);
    }
    v39 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v23);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
  v40 = (const void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v40)
    CFRelease(v40);
  v41 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v41)
    CFRelease(v41);
  v42 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v42)
  {
    if (v42[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    else
      --v42[2];
  }
  v43 = *((_QWORD *)this + 5);
  if (v43)
  {
    *(_QWORD *)(v43 + 8) = 0;
    v44 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v44)
    {
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v44);
        WTF::fastFree((WTF *)v44, v23);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  v47 = *((_QWORD *)this + 3);
  if (v47)
  {
    *(_QWORD *)(v47 + 8) = 0;
    v48 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v48)
    {
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v48);
        WTF::fastFree((WTF *)v48, v23);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

uint64_t WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::setLogIdentifier(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 280) = a2;
  return this;
}

void `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::~CDMInstanceSessionFairPlayStreamingAVFObjC(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this, void *a2)
{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::~CDMInstanceSessionFairPlayStreamingAVFObjC((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::~CDMInstanceSessionFairPlayStreamingAVFObjC((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::~CDMInstanceSessionFairPlayStreamingAVFObjC((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::~CDMInstanceSessionFairPlayStreamingAVFObjC((WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::logger(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 32);
}

uint64_t `non-virtual thunk to'WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::logIdentifier(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC *this)
{
  return *((_QWORD *)this + 33);
}

WTF **std::unique_ptr<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::UpdateResponseCollector>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  uint64_t v8;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 2);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = *((_QWORD *)v2 + 2);
        do
        {
          v6 = *(const void **)v5;
          if (*(_QWORD *)v5 != -1)
          {
            v7 = *(const void **)(v5 + 8);
            *(_QWORD *)(v5 + 8) = 0;
            if (v7)
            {
              CFRelease(v7);
              v6 = *(const void **)v5;
            }
            *(_QWORD *)v5 = 0;
            if (v6)
              CFRelease(v6);
          }
          v5 += 16;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    v8 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::TextDecoder *WTF::RefCounted<WebCore::TextDecoder>::deref(WebCore::TextDecoder *result)
{
  WTF *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::TextDecoder::~TextDecoder(result);
    return (WebCore::TextDecoder *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebCore::TextDecoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11TextDecoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::TextDecoder **a2)
{
  WebCore::TextDecoder *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return WTF::RefCounted<WebCore::TextDecoder>::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11TextDecoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

const void **WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(const void **result, unsigned int *a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;
  const void *v21;
  const void *v22;
  CFTypeRef *v23;
  const void **v24;
  uint64_t v25;
  CFTypeRef v26;
  const void *v27;
  unsigned int v28;
  uint64_t v29;
  const void **v30;
  const void **v31;
  uint64_t v32;
  const void *v33;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = (const void **)((char *)*result + 8 * v5);
    v7 = 8 * v4 - 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
        CFRelease(v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    *((_DWORD *)v2 + 3) = v5;
    goto LABEL_30;
  }
  v9 = *((_DWORD *)result + 2);
  if (v5 <= v9)
    goto LABEL_29;
  if (v9)
  {
    if ((_DWORD)v4)
    {
      v10 = (const void **)*result;
      v11 = 8 * v4;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
          CFRelease(v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = (const void **)*v2;
    if (*v2)
    {
      *v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (const void **)WTF::fastFree((WTF *)result, a2);
    }
  }
  v13 = a2[3];
  if (*((_DWORD *)v2 + 2) >= v13)
  {
LABEL_29:
    v5 = *((unsigned int *)v2 + 3);
LABEL_30:
    v23 = *(CFTypeRef **)a2;
    v24 = (const void **)*v2;
    if ((_DWORD)v5)
    {
      v25 = 8 * v5;
      do
      {
        v26 = *v23;
        if (*v23)
          CFRetain(*v23);
        v27 = *v24;
        *v24 = v26;
        if (v27)
          CFRelease(v27);
        ++v23;
        ++v24;
        v25 -= 8;
      }
      while (v25);
      v23 = *(CFTypeRef **)a2;
      v28 = *((_DWORD *)v2 + 3);
      v24 = (const void **)*v2;
    }
    else
    {
      v28 = 0;
    }
    v29 = a2[3];
    if (v28 != (_DWORD)v29)
    {
      v30 = &v24[v28];
      v31 = &v23[v28];
      v32 = 8 * v29 - 8 * v28;
      do
      {
        v33 = *v31;
        *v30 = *v31;
        if (v33)
          CFRetain(v33);
        ++v30;
        ++v31;
        v32 -= 8;
      }
      while (v32);
      v28 = a2[3];
    }
    *((_DWORD *)v2 + 3) = v28;
    return v2;
  }
  if (!(v13 >> 29))
  {
    v14 = (WTF *)*v2;
    v15 = *((unsigned int *)v2 + 3);
    v16 = WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)v2 + 2) = v13;
    *v2 = (const void *)v16;
    if ((_DWORD)v15)
    {
      v18 = (_QWORD *)v16;
      v19 = 8 * v15;
      v20 = v14;
      do
      {
        v21 = *(const void **)v20;
        *(_QWORD *)v20 = 0;
        *v18 = v21;
        v22 = *(const void **)v20;
        *(_QWORD *)v20 = 0;
        if (v22)
          CFRelease(v22);
        ++v18;
        v20 = (WTF *)((char *)v20 + 8);
        v19 -= 8;
      }
      while (v19);
    }
    if (v14)
    {
      if (*v2 == v14)
      {
        *v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v14, v17);
    }
    goto LABEL_29;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0,void,std::__1<WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)><NSData>,WTF::DefaultHash<WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>,WTF::RetainPtr<AVContentKeyRequest><WTF::HashMap>,WTF::HashTableTraits>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E31F7A80;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0,void,std::__1<WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)><NSData>,WTF::DefaultHash<WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>,WTF::RetainPtr<AVContentKeyRequest><WTF::HashMap>,WTF::HashTableTraits>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E31F7A80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0,void,std::__1<WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)><NSData>,WTF::DefaultHash<WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&>,WTF::RetainPtr<AVContentKeyRequest><WTF::HashMap>,WTF::HashTableTraits>> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  const void **v21;
  uint64_t v22;
  const void *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  _BYTE v31[8];
  uint64_t v32;
  char v33;
  _BYTE v34[8];
  char v35;
  WTF *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = *((_QWORD *)result + 2);
      v4 = *(_QWORD *)(v3 + 248);
      if (v4)
      {
        if (*(_BYTE *)(a2 + 8) && *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 - 12))
        {
          v5 = *(_QWORD *)(v3 + 272);
          v6 = *(_QWORD *)(v3 + 280);
          v36 = (WTF *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
          v37 = 43;
          v38 = "operator()";
          v39 = v6;
          if (*(_BYTE *)(v5 + 12))
            result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [56]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v36, "'cenc' initData, Succeeded, no keyIDs in currentRequest");
          v7 = *(unsigned int *)(v3 + 172);
          v36 = 0;
          LODWORD(v37) = 0;
          HIDWORD(v37) = v7;
          if ((_DWORD)v7)
          {
            if (v7 >> 28)
            {
              __break(0xC471u);
              return result;
            }
            v8 = (WTF *)WTF::fastMalloc((WTF *)(16 * v7));
            LODWORD(v37) = v7;
            v36 = v8;
            v9 = *(unsigned int *)(v3 + 172);
            if ((_DWORD)v9)
            {
              v10 = *(_QWORD *)(v3 + 160);
              v11 = v10 + 16 * v9;
              do
              {
                v12 = *(unsigned int **)v10;
                do
                  v13 = __ldaxr(v12);
                while (__stlxr(v13 + 1, v12));
                *(_QWORD *)v8 = v12;
                *((_BYTE *)v8 + 8) = *(_BYTE *)(v10 + 8);
                v8 = (WTF *)((char *)v8 + 16);
                v10 += 16;
              }
              while (v10 != v11);
            }
          }
          LOBYTE(v38) = 1;
          v34[0] = 0;
          v35 = 0;
          v31[0] = 0;
          v33 = 0;
          v14 = *(_QWORD *)(v3 + 248);
          *(_QWORD *)(v3 + 248) = 0;
          (*(void (**)(uint64_t, _QWORD, WTF **, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v14 + 16))(v14, 0, &v36, v34, v31, 1);
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          if (v33)
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v32, v15);
          if ((_BYTE)v38)
          {
            if (HIDWORD(v37))
            {
              v16 = (uint64_t *)v36;
              v17 = 16 * HIDWORD(v37);
              do
              {
                v16 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v16, v15)+ 2;
                v17 -= 16;
              }
              while (v17);
            }
            v18 = v36;
            if (v36)
            {
              v36 = 0;
              LODWORD(v37) = 0;
              WTF::fastFree(v18, v15);
            }
          }
          std::unique_ptr<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::UpdateResponseCollector>::reset[abi:sn180100]((WTF **)(v3 + 152), 0);
          if (*(_BYTE *)(v3 + 96))
          {
            v20 = *(unsigned int *)(v3 + 92);
            if ((_DWORD)v20)
            {
              v21 = *(const void ***)(v3 + 80);
              v22 = 8 * v20;
              do
              {
                v23 = *v21;
                *v21 = 0;
                if (v23)
                  CFRelease(v23);
                ++v21;
                v22 -= 8;
              }
              while (v22);
            }
            v24 = *(WTF **)(v3 + 80);
            if (v24)
            {
              *(_QWORD *)(v3 + 80) = 0;
              *(_DWORD *)(v3 + 88) = 0;
              WTF::fastFree(v24, v19);
            }
            v25 = *(WTF::StringImpl **)(v3 + 72);
            *(_QWORD *)(v3 + 72) = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v19);
              else
                *(_DWORD *)v25 -= 2;
            }
            *(_BYTE *)(v3 + 96) = 0;
          }
          return WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::nextRequest((WTF::StringImpl *)v3, v19);
        }
        else
        {
          v26 = *(_QWORD *)(v3 + 272);
          v27 = *(_QWORD *)(v3 + 280);
          v36 = (WTF *)"CDMInstanceSessionFairPlayStreamingAVFObjC";
          v37 = 43;
          v38 = "operator()";
          v39 = v27;
          if (*(_BYTE *)(v26 + 12))
          {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v36, "'cenc' initData, Failed, no responses");
            v4 = *(_QWORD *)(v3 + 248);
          }
          LOBYTE(v36) = 0;
          LOBYTE(v38) = 0;
          v34[0] = 0;
          v35 = 0;
          v31[0] = 0;
          v33 = 0;
          *(_QWORD *)(v3 + 248) = 0;
          (*(void (**)(uint64_t, uint64_t, WTF **, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)v4 + 16))(v4, 1, &v36, v34, v31, 0);
          result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
          if (v33)
            result = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v32, v28);
          if ((_BYTE)v38)
          {
            if (HIDWORD(v37))
            {
              v29 = (uint64_t *)v36;
              v30 = 16 * HIDWORD(v37);
              do
              {
                v29 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v29, v28)+ 2;
                v30 -= 16;
              }
              while (v30);
            }
            result = v36;
            if (v36)
            {
              v36 = 0;
              LODWORD(v37) = 0;
              return (WTF::StringImpl *)WTF::fastFree(result, v28);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1946C2CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, unsigned int a17, char a18)
{
  uint64_t v18;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  WTF *v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a12)
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a11, v20);
  if (a18)
  {
    if (a17)
    {
      v21 = (uint64_t *)a15;
      v22 = 16 * a17;
      do
      {
        v21 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v21, v20)+ 2;
        v22 -= 16;
      }
      while (v22);
    }
    v23 = a15;
    if (a15)
    {
      a15 = 0;
      a16 = 0;
      WTF::fastFree(v23, v20);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [38]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C3198(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [56]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C3700(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest(AVContentKeyRequest *)::$_0::operator()(NSData *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E31F7AC8;
  v3 = (const void *)a1[4];
  a1[4] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  a1[3] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest(AVContentKeyRequest *)::$_0::operator()(NSData *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E31F7AC8;
  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequest(AVContentKeyRequest *)::$_0::operator()(NSData *,NSError *)::{lambda(void)#1},void>::call(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSData *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = result[2];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result;
    v3 = result[1];
    v5 = v3 + 136;
    v4 = *(_QWORD *)(v3 + 136);
    if (!v4 || !*(_DWORD *)(v4 + 4))
    {
      v6 = *(void **)(v3 + 56);
      if (!v6)
        v6 = *(void **)(v3 + 64);
      v7 = (NSData *)objc_msgSend(v6, "contentProtectionSessionIdentifier");
      result = (uint64_t *)WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::sessionIdentifierChanged((WTF **)v3, v7, v8);
    }
    v9 = *(_QWORD *)(v3 + 240);
    if (v2[3])
    {
      if (v9)
      {
        v10 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v10 = 1;
        *(_QWORD *)(v10 + 8) = v10 + 24;
        *(_QWORD *)(v10 + 16) = 1;
        *(_QWORD *)(v10 + 48) = 0;
        *(_BYTE *)(v10 + 40) = 1;
        v22 = v10;
        v11 = *(_QWORD *)(v3 + 240);
        *(_QWORD *)(v3 + 240) = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 16))(v11, &v22, v5, 0, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v13 = &v22;
        return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v13, v12);
      }
    }
    else if (v9)
    {
      WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)v2[4], &v22);
      v14 = WTF::fastMalloc((WTF *)0x38);
      v21 = WebCore::SharedBuffer::SharedBuffer(v14, &v22);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v22, v15);
      v16 = *(_QWORD *)(v3 + 240);
      *(_QWORD *)(v3 + 240) = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 16))(v16, &v21, v5, 0, 1);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_15:
      v13 = &v21;
      return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v13, v12);
    }
    v17 = *(_QWORD *)(v3 + 128);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)v2[4], &v22);
        v19 = WTF::fastMalloc((WTF *)0x38);
        v21 = WebCore::SharedBuffer::SharedBuffer(v19, &v22);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v22, v20);
        (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v18 + 24))(v18, 0, &v21);
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_1946C3B20(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1}::~NSError(uint64_t *a1, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = (const void *)a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator,(WTF::DestructionThread)0>::deref(v4);
  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v9 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v5 + 8);
        v11 = v10 + 16 * v9;
        do
        {
          v12 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
            {
              v18 = v11;
              v19 = v10;
              v20 = (WTF *)v12;
              v21 = v5;
              atomic_store(1u, v12);
              v15 = v12[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))off_1E31F7A98[v15])(&v23, v12 + 2);
              *((_DWORD *)v20 + 6) = -1;
              WTF::fastFree(v20, a2);
              v5 = v21;
              v11 = v18;
              v10 = v19;
            }
          }
          v10 += 16;
        }
        while (v10 != v11);
      }
      v16 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v16 && v16 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v22 = v5;
        WTF::fastFree(v16, a2);
        v5 = v22;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E31F7AF0;
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1}::~NSError(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E31F7AF0;
  WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1}::~NSError(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1},void>::call(_QWORD *a1, void *a2)
{
  WTF *v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t *v6;
  WTF **v7;
  CFTypeRef *p_cf;
  WTF *v9;
  CFTypeRef v10;
  WTF *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  WTF *v23;
  CFTypeRef cf;
  char v25;

  v2 = (WTF *)a1[1];
  v3 = a1[2];
  a1[1] = 0;
  v4 = (const void *)a1[3];
  a1[3] = 0;
  v23 = v2;
  cf = v4;
  v5 = *(unsigned int *)(v3 + 28);
  if ((_DWORD)v5 == *(_DWORD *)(v3 + 24))
  {
    v6 = WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 16, v5 + 1, (unint64_t)&v23);
    v5 = *(unsigned int *)(v3 + 28);
    v7 = (WTF **)(*(_QWORD *)(v3 + 16) + 16 * v5);
    v2 = (WTF *)*v6;
    *v6 = 0;
    p_cf = (CFTypeRef *)(v6 + 1);
  }
  else
  {
    p_cf = &cf;
    v7 = (WTF **)(*(_QWORD *)(v3 + 16) + 16 * v5);
    v23 = 0;
  }
  *v7 = v2;
  v9 = (WTF *)*p_cf;
  *p_cf = 0;
  v7[1] = v9;
  *(_DWORD *)(v3 + 28) = v5 + 1;
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  v11 = v23;
  v23 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v14 = *((unsigned int *)v11 + 5);
      if ((_DWORD)v14)
      {
        v15 = *((_QWORD *)v11 + 1);
        v16 = v15 + 16 * v14;
        do
        {
          v17 = *(unsigned int **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              v20 = v17[6];
              if ((_DWORD)v20 != -1)
                ((void (*)(char *, unsigned int *))off_1E31F7A98[v20])(&v25, v17 + 2);
              v17[6] = -1;
              WTF::fastFree((WTF *)v17, a2);
            }
          }
          v15 += 16;
        }
        while (v15 != v16);
      }
      v21 = (WTF *)*((_QWORD *)v11 + 1);
      if ((WTF *)((char *)v11 + 24) != v21 && v21 != 0)
      {
        *((_QWORD *)v11 + 1) = 0;
        *((_DWORD *)v11 + 4) = 0;
        WTF::fastFree(v21, a2);
      }
      WTF::fastFree(v11, a2);
    }
  }
}

void sub_1946C3EB8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, CFTypeRef cf, int a12, __int16 a13, char a14, char a15)
{
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;

  if (cf)
    CFRelease(cf);
  if (a10)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)a10);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)a10));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)a10);
      v18 = *((unsigned int *)a10 + 5);
      if ((_DWORD)v18)
      {
        v19 = *((_QWORD *)a10 + 1);
        v20 = v19 + 16 * v18;
        do
        {
          v21 = *(unsigned int **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              v24 = v21[6];
              if ((_DWORD)v24 != -1)
                ((void (*)(char *, unsigned int *))off_1E31F7A98[v24])(&a15, v21 + 2);
              v21[6] = -1;
              WTF::fastFree((WTF *)v21, a2);
            }
          }
          v19 += 16;
        }
        while (v19 != v20);
      }
      v25 = (WTF *)*((_QWORD *)a10 + 1);
      if ((WTF *)((char *)a10 + 24) != v25 && v25 != 0)
      {
        *((_QWORD *)a10 + 1) = 0;
        *((_DWORD *)a10 + 4) = 0;
        WTF::fastFree(v25, a2);
      }
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  void *v20;

  v3 = a3;
  v5 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[2 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1946C4108);
      }
      v18 = &v5[2 * *(unsigned int *)(a1 + 12)];
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::move(v5, v18, v19);
      if (v5)
      {
        if (*(uint64_t **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(uint64_t **)a1;
    }
    else
    {
      if (v10 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1946C4110);
      }
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::move(v5, v6, v11);
      v13 = *(uint64_t **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v5, v12);
        v13 = *(uint64_t **)a1;
      }
    }
    return &v13[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
  }
  return (uint64_t *)v3;
}

void WTF::VectorMover<false,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::move(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v27 = v3;
    v28 = v4;
    v7 = a1;
    do
    {
      v8 = *v7;
      *v7 = 0;
      *a3 = v8;
      v9 = v7[1];
      v7[1] = 0;
      a3[1] = v9;
      v10 = (const void *)v7[1];
      v7[1] = 0;
      if (v10)
        CFRelease(v10);
      v11 = *v7;
      *v7 = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          v14 = *(unsigned int *)(v11 + 20);
          if ((_DWORD)v14)
          {
            v15 = *(_QWORD *)(v11 + 8);
            v16 = v15 + 16 * v14;
            do
            {
              v17 = *(unsigned int **)(v15 + 8);
              *(_QWORD *)(v15 + 8) = 0;
              if (v17)
              {
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  v23 = v15;
                  v24 = v16;
                  atomic_store(1u, v17);
                  v25 = (WTF *)v17;
                  v20 = v17[6];
                  if ((_DWORD)v20 != -1)
                    ((void (*)(char *, unsigned int *))off_1E31F7A98[v20])(&v26, v17 + 2);
                  *((_DWORD *)v25 + 6) = -1;
                  WTF::fastFree(v25, a2);
                  v15 = v23;
                  v16 = v24;
                }
              }
              v15 += 16;
            }
            while (v15 != v16);
          }
          v21 = *(WTF **)(v11 + 8);
          if ((WTF *)(v11 + 24) != v21 && v21 != 0)
          {
            *(_QWORD *)(v11 + 8) = 0;
            *(_DWORD *)(v11 + 16) = 0;
            WTF::fastFree(v21, a2);
          }
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      a3 += 2;
      v7 += 2;
    }
    while (v7 != a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest(AVContentKeyRequest *)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E31F7B18;
  v3 = (const void *)a1[4];
  a1[4] = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  a1[3] = 0;
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest(AVContentKeyRequest *)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E31F7B18;
  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRenewingRequest(AVContentKeyRequest *)::$_1::operator()(NSData *,NSError *)::{lambda(void)#1},void>::call(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _BYTE v22[16];
  WTF *v23;
  int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v1 = result[2];
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = result[1];
      v3 = *(_QWORD *)(v2 + 128);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (!result[3])
          {
            if (*(_QWORD *)(v2 + 248))
            {
              LOBYTE(v23) = 0;
              v26 = 0;
              v22[0] = 0;
              v22[8] = 0;
              WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)result[4], &v27);
              v5 = WTF::fastMalloc((WTF *)0x38);
              WebCore::SharedBuffer::SharedBuffer(v5, &v27);
              WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v27, v6);
              v17 = 1;
              v16 = 0;
              LOBYTE(v19) = 1;
              v18 = 0;
              v20 = v5;
              v21 = 1;
              v7 = *(_QWORD *)(v2 + 248);
              *(_QWORD *)(v2 + 248) = 0;
              (*(void (**)(uint64_t, _QWORD, WTF **, _BYTE *, uint64_t *, uint64_t))(*(_QWORD *)v7 + 16))(v7, 0, &v23, v22, &v19, 1);
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
              if (v21)
                WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v20, v8);
              WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v18, v8);
              result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v16, v9);
              if (v26)
              {
                if (v25)
                {
                  v11 = (uint64_t *)v23;
                  v12 = 16 * v25;
                  do
                  {
                    v11 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v11, v10)+ 2;
                    v12 -= 16;
                  }
                  while (v12);
                }
                result = (uint64_t *)v23;
                if (v23)
                {
                  v23 = 0;
                  v24 = 0;
                  return (uint64_t *)WTF::fastFree((WTF *)result, v10);
                }
              }
            }
            else
            {
              WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)result[4], (CFIndex *)&v23);
              v13 = WTF::fastMalloc((WTF *)0x38);
              v19 = WebCore::SharedBuffer::SharedBuffer(v13, (uint64_t *)&v23);
              WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v23, v14);
              (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 24))(v4, 1, &v19);
              return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v19, v15);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1946C4534(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, WTF *a17, int a18, int a19, char a20)
{
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>>>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashMap<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<NSData>,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<NSData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  const void *v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (const void **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (const void *)-1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = v14 + 16 * v21;
          v24 = *(const void **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            CFRelease(v24);
            v29 = *(const void **)v23;
            *(_QWORD *)v23 = 0;
            if (v29)
              CFRelease(v29);
          }
          else
          {
            *(_QWORD *)v23 = 0;
          }
          v25 = *v10;
          *v10 = 0;
          *(_QWORD *)v23 = v25;
          v26 = v4 + 16 * v9;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v27;
          v28 = *(const void **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
            CFRelease(v28);
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_23;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(const void **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            CFRelease(v13);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_23;
        }
        CFRelease(v11);
      }
LABEL_23:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::RetainPtr<AVContentKeyRequest>,WTF::RetainPtr<AVContentKeyRequest>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>,WTF::HashTraits<WTF::RetainPtr<AVContentKeyRequest>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  const void **v10;
  const void *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  const void *v22;
  const void *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (const void **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (const void *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
            CFRelease(v23);
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C5448(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C59B0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetINS_8ObserverIFvvEEES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSL_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  int v16;
  uint64_t *v17;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = v4 - 1;
      do
      {
        v7 = v2 + 8 * v6;
        if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
        {
          v17 = a1;
          v16 = v5;
          v15 = v6;
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)(v2 + 8 * v6), a2);
          v6 = v15;
          a1 = v17;
          v5 = v16 + 1;
        }
      }
      while ((unint64_t)v6--);
      v9 = *a1;
      v2 = v5 != 0;
      if (v5)
      {
        *(_DWORD *)(v9 - 16) += v5;
        v10 = *a1;
        if (*a1)
          v11 = *(_DWORD *)(v10 - 12);
        else
          v11 = 0;
        *(_DWORD *)(v10 - 12) = v11 - v5;
        v9 = *a1;
      }
      if (v9)
      {
        v12 = *(_DWORD *)(v9 - 4);
        v13 = 6 * *(_DWORD *)(v9 - 12);
        if (v12 >= 9 && v13 < v12)
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(a1);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(unsigned int **result, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int **v5;

  v2 = *result;
  *result = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = result;
      WTF::fastFree((WTF *)v2, a2);
      result = v5;
    }
  }
  *result = (unsigned int *)-1;
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, WTF *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(WTF **)(v2 + 8 * v7);
    if (v10 != (WTF *)-1)
    {
      if (!v10)
        return 0;
      if (v10 == this)
        break;
    }
  }
  if ((_DWORD)v9 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 8 * v9) = 0;
  if (this)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)this);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)this));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)this);
      v22 = a1;
      v20 = v9;
      v21 = v2;
      WTF::fastFree(this, this);
      v9 = v20;
      v2 = v21;
      a1 = v22;
    }
  }
  *(_QWORD *)(v2 + 8 * v9) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v11 = *a1;
  if (*a1)
    v12 = *(_DWORD *)(v11 - 12) - 1;
  else
    v12 = -1;
  *(_DWORD *)(v11 - 12) = v12;
  v13 = *a1;
  if (*a1)
  {
    v17 = 6 * *(_DWORD *)(v13 - 12);
    v18 = *(_DWORD *)(v13 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v18 >> 1, 0);
  }
  return 1;
}

uint64_t WTF::Mapper<WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::Observer<void ()(void)>&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  if (*a2)
  {
    v2 = *((unsigned int *)*a2 - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        result = WTF::fastMalloc((WTF *)(8 * v2));
        *(_DWORD *)(v4 + 8) = v2;
        *(_QWORD *)v4 = result;
        v5 = *a2;
        if (*a2 && *((_DWORD *)v5 - 3))
        {
          v6 = *((unsigned int *)v5 - 1);
          if ((_DWORD)v6)
          {
            v7 = 8 * v6;
            for (i = *a2; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v7 -= 8;
              if (!v7)
                return result;
            }
          }
          else
          {
            i = *a2;
          }
          v9 = &v5[v6];
          if (i != v9)
          {
            v10 = *i;
LABEL_15:
            v11 = *(uint64_t **)(v10 + 8);
            if (v11)
            {
              result = *v11;
              if (*v11)
                goto LABEL_33;
              result = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)result = 1;
              *(_QWORD *)(result + 8) = v11;
              v13 = (unsigned int *)*v11;
              *v11 = result;
              if (!v13)
                goto LABEL_33;
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                atomic_store(1u, v13);
                WTF::fastFree((WTF *)v13, v12);
              }
              result = *v11;
              if (*v11)
              {
LABEL_33:
                do
                  v16 = __ldaxr((unsigned int *)result);
                while (__stlxr(v16 + 1, (unsigned int *)result));
              }
            }
            else
            {
              result = 0;
            }
            v17 = *(unsigned int *)(v4 + 12);
            *(_QWORD *)(*(_QWORD *)v4 + 8 * v17) = result;
            *(_DWORD *)(v4 + 12) = v17 + 1;
            while (++i != v9)
            {
              v10 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                if (i != v9)
                  goto LABEL_15;
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceFairPlayStreamingAVFObjC::sessionKeyStatusesChanged(WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC const&)::$_0,void,WTF::Observer<void ()(void)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
}

uint64_t WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  const void *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 24 * v3;
    do
    {
      v6 = *((unsigned int *)v4 + 5);
      if ((_DWORD)v6)
      {
        v7 = (const void **)*((_QWORD *)v4 + 1);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
            CFRelease(v9);
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v10 = (WTF *)*((_QWORD *)v4 + 1);
      if (v10)
      {
        *((_QWORD *)v4 + 1) = 0;
        *((_DWORD *)v4 + 4) = 0;
        WTF::fastFree(v10, a2);
      }
      v11 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 24);
    }
    while (v4 != (WTF *)v5);
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [29]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C6404(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [49]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C696C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [43]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C6ED4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C743C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [59]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C79A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [37]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C7F0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [50]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C8474(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [31]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C89DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

WTF **WTF::Vector<WTF::RetainPtr<NSData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,NSData*&>(WTF **result, CFTypeRef *a2)
{
  WTF **v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;

  v3 = result;
  v4 = *((unsigned int *)result + 2);
  v5 = *((unsigned int *)result + 3);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *result;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *((_DWORD *)v3 + 2) = v8;
    *v3 = v11;
    if ((_DWORD)v5)
    {
      v12 = 8 * v5;
      v13 = v9;
      do
      {
        v14 = *(const void **)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)v11 = v14;
        v15 = *(const void **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
          CFRelease(v15);
        v11 = (WTF *)((char *)v11 + 8);
        v13 = (WTF *)((char *)v13 + 8);
        v12 -= 8;
      }
      while (v12);
      v11 = *v3;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      WTF::fastFree(v9, v10);
      v9 = *v3;
    }
    else
    {
      v9 = v11;
    }
  }
  v16 = *((unsigned int *)v3 + 3);
  result = (WTF **)*a2;
  *((_QWORD *)v9 + v16) = *a2;
  if (result)
  {
    result = (WTF **)CFRetain(result);
    LODWORD(v16) = *((_DWORD *)v3 + 3);
  }
  *((_DWORD *)v3 + 3) = v16 + 1;
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11]>(WTF::Logger::LogSiteIdentifier *a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::Logger *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::Logger *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  __int128 buf;
  int v39;
  WTF::StringImpl *v40[3];

  v40[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  result = WTF::String::String((WTF::String *)&v35, " Succeeded");
  if (!v36)
  {
    v3 = 0;
    if (v35)
      goto LABEL_3;
LABEL_71:
    v4 = 0;
    goto LABEL_4;
  }
  v3 = *((_DWORD *)v36 + 1);
  if (!v35)
    goto LABEL_71;
LABEL_3:
  v4 = *((_DWORD *)v35 + 1);
LABEL_4:
  if ((v4 | v3) < 0)
    goto LABEL_74;
  result = (v3 + v4);
  if (__OFADD__(v3, v4))
    goto LABEL_74;
  if (v36)
  {
    v5 = *((_DWORD *)v36 + 4);
    v6 = (v5 >> 2) & 1;
    if (v35 && (v5 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v35)
    {
LABEL_9:
      v6 = (*((unsigned __int8 *)v35 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v6 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v6, (uint64_t)v36, (uint64_t)v35, &buf);
  v37 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_74:
    __break(0xC471u);
    return result;
  }
  v8 = v35;
  v35 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v36;
  v36 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = qword_1ECE7CE30;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v33 ? (char *)v33 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v11 = (uint64_t)v33;
    v33 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = WTF::fastFree((WTF *)v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (WebCore::LogEME)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v17 = WTF::Logger::observers((WTF::Logger *)v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v20 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v21 = *v19;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v39 = 0;
              WTF::String::String((WTF::String *)v40, " Succeeded");
              v33 = 0;
              v34 = 0;
              v22 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v34) = 2;
              v33 = v22;
              v23 = HIDWORD(v34);
              *((_DWORD *)v22 + 4 * HIDWORD(v34)) = buf;
              v24 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v22 + 2 * v23 + 1) = v24;
              *((_DWORD *)v22 + 4 * (v23 + 1)) = v39;
              v25 = v40[0];
              if (v40[0])
                *(_DWORD *)v40[0] += 2;
              *((_QWORD *)v22 + 2 * (v23 + 1) + 1) = v25;
              HIDWORD(v34) = v23 + 2;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v21 + 16))(v21, &WebCore::LogEME, 0, &v33);
              v26 = v33;
              if (HIDWORD(v34))
              {
                v27 = 16 * HIDWORD(v34);
                v28 = (WTF::StringImpl **)((char *)v33 + 8);
                do
                {
                  v29 = *v28;
                  *v28 = 0;
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 2)
                      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v29 -= 2;
                  }
                  v28 += 2;
                  v27 -= 16;
                }
                while (v27);
                v26 = v33;
              }
              if (v26)
              {
                v33 = 0;
                LODWORD(v34) = 0;
                WTF::fastFree(v26, v12);
              }
              v30 = v40[0];
              v40[0] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v31 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                  WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v31 -= 2;
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          v32 = __ldxr(v14);
          if (v32 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C9048(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF *WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  const void *v9;
  WTF *v10;
  WTF::StringImpl *v11;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((_DWORD *)result + 3);
    if (v3)
    {
      v4 = *(_QWORD *)result;
      v5 = *(_QWORD *)result + 24 * v3;
      do
      {
        v6 = *(unsigned int *)(v4 + 20);
        if ((_DWORD)v6)
        {
          v7 = *(const void ***)(v4 + 8);
          v8 = 8 * v6;
          do
          {
            v9 = *v7;
            *v7 = 0;
            if (v9)
              CFRelease(v9);
            ++v7;
            v8 -= 8;
          }
          while (v8);
        }
        v10 = *(WTF **)(v4 + 8);
        if (v10)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v10, a2);
        }
        v11 = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        v4 += 24;
      }
      while (v4 != v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  const void *v11;
  WTF *v12;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v6;
      v7 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 4);
      *((_DWORD *)v5 + 4) = 0;
      *(_DWORD *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 5);
      *((_DWORD *)v5 + 5) = 0;
      *(_DWORD *)(a3 + 20) = v7;
      v8 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v8)
      {
        v9 = (const void **)*((_QWORD *)v5 + 1);
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
            CFRelease(v11);
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v12 = (WTF *)*((_QWORD *)v5 + 1);
      if (v12)
      {
        *((_QWORD *)v5 + 1) = 0;
        *((_DWORD *)v5 + 4) = 0;
        WTF::fastFree(v12, a2);
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      a3 += 24;
      v5 = (WTF::StringImpl *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [72]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::Logger *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  __int128 buf;
  int v45;
  WTF::StringImpl *v46[3];

  v46[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v41, a4);
  if (!v42)
  {
    v8 = 0;
    if (v41)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v42 + 1);
  if (!v41)
    goto LABEL_72;
LABEL_3:
  v9 = *((_DWORD *)v41 + 1);
LABEL_4:
  if ((v9 | v8) < 0)
    goto LABEL_75;
  result = (v8 + v9);
  if (__OFADD__(v8, v9))
    goto LABEL_75;
  if (v42)
  {
    v10 = *((_DWORD *)v42 + 4);
    v11 = (v10 >> 2) & 1;
    if (v41 && (v10 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v41)
    {
LABEL_9:
      v11 = (*((unsigned __int8 *)v41 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v11 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, (uint64_t)v42, (uint64_t)v41, &buf);
  v43 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v13 = v41;
  v41 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v42;
  v42 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v39 ? (char *)v39 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v16 = (uint64_t)v39;
    v39 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v45 = 0;
              WTF::String::String((WTF::String *)v46, a4);
              v39 = 0;
              v40 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v40) = 2;
              v39 = v27;
              v28 = HIDWORD(v40);
              *((_DWORD *)v27 + 4 * HIDWORD(v40)) = buf;
              v29 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v45;
              v30 = v46[0];
              if (v46[0])
                *(_DWORD *)v46[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v40) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v39);
              v31 = v39;
              if (HIDWORD(v40))
              {
                v32 = 16 * HIDWORD(v40);
                v33 = (WTF::StringImpl **)((char *)v39 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v39;
              }
              if (v31)
              {
                v39 = 0;
                LODWORD(v40) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v46[0];
              v46[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946C977C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

char *WTF::Vector<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *(WTF::StringImpl **)a1;
        return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request>::move(v5, v6, v11);
        v13 = *(WTF::StringImpl **)a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v13 = *(WTF::StringImpl **)a1;
        }
        return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x1946C9A90);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0xAAAAAAB)
      goto LABEL_28;
    v17 = (WTF::StringImpl *)((char *)v5 + 24 * *(unsigned int *)(a1 + 12));
    v18 = 24 * v16;
    v19 = WTF::fastMalloc((WTF *)(24 * v16));
    *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v19;
    WTF::VectorMover<false,WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::Request>::move(v5, v17, v19);
    if (v5)
    {
      if (*(WTF::StringImpl **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [110],NSString *,char [12],NSString *>(WTF::Logger::LogSiteIdentifier *a1, id *a2, id *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  id v22;
  WTF::Logger *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  int *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  WTF::Logger *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  __int128 buf;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66[3];

  v66[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v52, "exception thrown from -makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler: ");
  MEMORY[0x19AEA5508](&v51, objc_msgSend(*a2, "description"));
  WTF::String::String((WTF::String *)&v50, ", reason : ");
  MEMORY[0x19AEA5508](&v49, objc_msgSend(*a3, "description"));
  v47 = v52;
  v57 = v51;
  *(_QWORD *)&buf = v53;
  v55 = v49;
  v56 = v50;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v47, (uint64_t *)&v57, (uint64_t *)&v56, (uint64_t *)&v55, &v54);
  if (v54)
  {
    v5 = v49;
    v49 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v50;
    v50 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = v51;
    v51 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = v52;
    v52 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v53;
    v53 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v4);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = qword_1ECE7CE30;
    v11 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v11)
    {
      WTF::String::utf8();
      v13 = v47 ? (char *)v47 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v13;
      _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v11 = (uint64_t)v47;
      v47 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
          v11 = WTF::fastFree((WTF *)v11, v12);
        else
          --*(_DWORD *)v11;
      }
    }
    if (WebCore::LogEME && byte_1ECE7CE20)
    {
      v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v15 = *v14;
        if ((v15 & 1) != 0)
          break;
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stxr(v15 | 1, v14))
          {
            v17 = WTF::Logger::observers((WTF::Logger *)v11);
            v18 = *(unsigned int *)(v17 + 12);
            if ((_DWORD)v18)
            {
              v19 = *(uint64_t **)v17;
              v42 = &v61;
              v43 = *(_QWORD *)v17 + 8 * v18;
              v40 = &v63;
              v41 = &v59;
              do
              {
                v20 = *v19;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString(a1);
                v59 = 0;
                WTF::String::String((WTF::String *)&v60, "exception thrown from -makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler: ");
                v21 = *a2;
                v61 = 0;
                MEMORY[0x19AEA5508](&v62, objc_msgSend(v21, "description", v40, v41, v42));
                v63 = 0;
                WTF::String::String((WTF::String *)&v64, ", reason : ");
                v22 = *a3;
                v65 = 0;
                MEMORY[0x19AEA5508](v66, objc_msgSend(v22, "description"));
                v47 = 0;
                v48 = 0;
                v23 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v48) = 5;
                v47 = v23;
                v24 = HIDWORD(v48);
                *((_DWORD *)v23 + 4 * HIDWORD(v48)) = buf;
                v25 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v23 + 2 * v24 + 1) = v25;
                *((_DWORD *)v23 + 4 * (v24 + 1)) = v59;
                v26 = v60;
                if (v60)
                  *(_DWORD *)v60 += 2;
                *((_QWORD *)v23 + 2 * (v24 + 1) + 1) = v26;
                *((_DWORD *)v23 + 4 * (v24 + 2)) = v61;
                v27 = v62;
                if (v62)
                  *(_DWORD *)v62 += 2;
                *((_QWORD *)v23 + 2 * (v24 + 2) + 1) = v27;
                *((_DWORD *)v23 + 4 * (v24 + 3)) = v63;
                v28 = v64;
                if (v64)
                  *(_DWORD *)v64 += 2;
                *((_QWORD *)v23 + 2 * (v24 + 3) + 1) = v28;
                *((_DWORD *)v23 + 4 * (v24 + 4)) = v65;
                v29 = v66[0];
                if (v66[0])
                  *(_DWORD *)v66[0] += 2;
                *((_QWORD *)v23 + 2 * (v24 + 4) + 1) = v29;
                HIDWORD(v48) = v24 + 5;
                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v20 + 16))(v20, &WebCore::LogEME, 1, &v47);
                v30 = v47;
                if (HIDWORD(v48))
                {
                  v31 = 16 * HIDWORD(v48);
                  v32 = (WTF::StringImpl **)((char *)v47 + 8);
                  do
                  {
                    v33 = *v32;
                    *v32 = 0;
                    if (v33)
                    {
                      if (*(_DWORD *)v33 == 2)
                        WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v12);
                      else
                        *(_DWORD *)v33 -= 2;
                    }
                    v32 += 2;
                    v31 -= 16;
                  }
                  while (v31);
                  v30 = v47;
                }
                if (v30)
                {
                  v47 = 0;
                  LODWORD(v48) = 0;
                  WTF::fastFree(v30, v12);
                }
                v34 = v66[0];
                v66[0] = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v34 -= 2;
                }
                v35 = v64;
                v64 = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                v36 = v62;
                v62 = 0;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 2)
                    WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v36 -= 2;
                }
                v37 = v60;
                v60 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                v38 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                ++v19;
              }
              while (v19 != (uint64_t *)v43);
            }
            v39 = __ldxr(v14);
            if (v39 == 1)
            {
              if (!__stlxr(0, v14))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v54;
    v54 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1946CA07C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16, int a17, int a18, WTF::StringImpl *a19, WTF::StringImpl *a20,WTF::StringImpl *a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37)
{
  unsigned __int8 *v37;
  int v39;

  v39 = __ldxr(v37);
  if (v39 == 1)
  {
    if (!__stlxr(0, v37))
    {
LABEL_6:
      if (a24)
      {
        if (*(_DWORD *)a24 == 2)
          WTF::StringImpl::destroy(a24, a2);
        else
          *(_DWORD *)a24 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::ThreadSafeRefCounted<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator,(WTF::DestructionThread)0>::deref(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  do
  {
    v2 = __ldaxr((unsigned int *)result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)result));
  if (!v3)
  {
    atomic_store(1u, (unsigned int *)result);
    v4 = *(_QWORD *)(result + 8);
    v5 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v7 = *(_DWORD *)(result + 24);
    v6 = *(_DWORD *)(result + 28);
    *(_QWORD *)(result + 24) = 0;
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v8 = &off_1E31F7B68;
    *(_QWORD *)(v8 + 8) = v4;
    *(_QWORD *)(v8 + 16) = v5;
    *(_DWORD *)(v8 + 24) = v7;
    *(_DWORD *)(v8 + 28) = v6;
    v13 = v8;
    WTF::callOnMainThread();
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v10 = *(unsigned int *)(v1 + 28);
    if ((_DWORD)v10)
      WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::destruct(*(uint64_t **)(v1 + 16), (uint64_t *)(*(_QWORD *)(v1 + 16) + 16 * v10));
    v11 = *(WTF **)(v1 + 16);
    if (v11)
    {
      *(_QWORD *)(v1 + 16) = 0;
      *(_DWORD *)(v1 + 24) = 0;
      WTF::fastFree(v11, v9);
    }
    v12 = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return WTF::fastFree((WTF *)v1, v9);
  }
  return result;
}

void sub_1946CA41C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v12 = *(unsigned int *)(v10 + 28);
  if ((_DWORD)v12)
    WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::destruct(*(uint64_t **)(v10 + 16), (uint64_t *)(*(_QWORD *)(v10 + 16) + 16 * v12));
  v13 = *(WTF **)(v10 + 16);
  if (v13)
  {
    *(_QWORD *)(v10 + 16) = 0;
    *(_DWORD *)(v10 + 24) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E31F7B68;
  v3 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::destruct(*(uint64_t **)(a1 + 16), (uint64_t *)(*(_QWORD *)(a1 + 16) + 16 * v3));
  v4 = *(WTF **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::~CallableWrapper(uint64_t **this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t *v5;

  *this = (uint64_t *)&off_1E31F7B68;
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::destruct(this[2], &this[2][2 * v3]);
  v4 = (WTF *)this[2];
  if (v4)
  {
    this[2] = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = this[1];
  this[1] = 0;
  if (v5)
    (*(void (**)(uint64_t *))(*v5 + 8))(v5);
  return WTF::fastFree((WTF *)this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::CallbackAggregator::~CallbackAggregator()::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1946CA5DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WTF::VectorDestructor<true,std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RetainPtr<NSData>>>::destruct(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  const void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 != a2)
  {
    v23 = v2;
    v24 = v3;
    v5 = a1;
    do
    {
      v6 = (const void *)v5[1];
      v5[1] = 0;
      if (v6)
        CFRelease(v6);
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(unsigned int *)(v7 + 20);
          if ((_DWORD)v10)
          {
            v11 = *(_QWORD *)(v7 + 8);
            v12 = v11 + 16 * v10;
            do
            {
              v13 = *(unsigned int **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = 0;
              if (v13)
              {
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                {
                  v19 = v11;
                  v20 = v12;
                  atomic_store(1u, v13);
                  v21 = (WTF *)v13;
                  v16 = v13[6];
                  if ((_DWORD)v16 != -1)
                    ((void (*)(char *, unsigned int *))off_1E31F7A98[v16])(&v22, v13 + 2);
                  *((_DWORD *)v21 + 6) = -1;
                  WTF::fastFree(v21, a2);
                  v11 = v19;
                  v12 = v20;
                }
              }
              v11 += 16;
            }
            while (v11 != v12);
          }
          v17 = *(WTF **)(v7 + 8);
          if ((WTF *)(v7 + 24) != v17 && v17 != 0)
          {
            *(_QWORD *)(v7 + 8) = 0;
            *(_DWORD *)(v7 + 16) = 0;
            WTF::fastFree(v17, a2);
          }
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      v5 += 2;
    }
    while (v5 != a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<NSData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E31F7B90;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<NSData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E31F7B90;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionFairPlayStreamingAVFObjC::didProvideRequests(WTF::Vector<WTF::RetainPtr<AVContentKeyRequest>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void,WTF::Vector<std::pair<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,WTF::RetainPtr<NSData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  WTF::JSONImpl::Object *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const char *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::JSONImpl::Value *v22;
  unint64_t v23;
  const char *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::JSONImpl::Value *v58;
  char v59;
  WTF::StringImpl *v60;

  v2 = result[2];
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v53 = result[1];
      if (*(_QWORD *)(v53 + 240))
      {
        if (!*((_DWORD *)a2 + 3))
        {
          v36 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)v36 = 1;
          *(_QWORD *)(v36 + 8) = v36 + 24;
          *(_QWORD *)(v36 + 16) = 1;
          *(_QWORD *)(v36 + 48) = 0;
          *(_BYTE *)(v36 + 40) = 1;
          v60 = (WTF::StringImpl *)v36;
          v37 = *(_QWORD *)(v53 + 240);
          *(_QWORD *)(v53 + 240) = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 16))(v37, &v60, v53 + 136, 0, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v60, v38);
        }
        v4 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Array::create((WTF::JSONImpl::Array *)result);
        v5 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v5)
        {
          v6 = *a2;
          v7 = *a2 + 16 * v5;
          v8 = (WTF::StringImpl *)"keyID";
          v9 = "payload";
          do
          {
            WTF::JSONImpl::Object::create(v4);
            v10 = v57;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v56 = v60;
            WebCore::FragmentedSharedBuffer::makeContiguous(*(WTF **)v6, &v54);
            if (*(_DWORD *)(v54 + 20))
            {
              v11 = *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8);
              v12 = *(unsigned int *)(v11 + 24);
              if ((_DWORD)v12 == -1)
              {
                v51 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
                goto LABEL_82;
              }
              v60 = (WTF::StringImpl *)&v59;
              ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v60, v11 + 8);
            }
            WTF::base64EncodeToString();
            WTF::JSONImpl::ObjectBase::setString(v10, (const WTF::String *)&v56, (const WTF::String *)&v55);
            v14 = v55;
            v55 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v13);
              else
                *(_DWORD *)v14 -= 2;
            }
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v54, v13);
            v16 = v56;
            v56 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v15);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = v57;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v56 = v60;
            v18 = *(void **)(v6 + 8);
            if (v18)
            {
              objc_msgSend(*(id *)(v6 + 8), "bytes");
              objc_msgSend(v18, "length");
            }
            WTF::base64EncodeToString();
            WTF::JSONImpl::ObjectBase::setString(v17, (const WTF::String *)&v56, (const WTF::String *)&v60);
            v20 = v60;
            v60 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v19);
              else
                *(_DWORD *)v20 -= 2;
            }
            result = (uint64_t *)v56;
            v56 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
              else
                *(_DWORD *)result -= 2;
            }
            v21 = v57;
            v22 = v58;
            v57 = 0;
            v23 = *((unsigned int *)v58 + 7);
            if ((_DWORD)v23 == *((_DWORD *)v58 + 6))
            {
              v24 = v9;
              v25 = v8;
              v26 = v23 + (v23 >> 2);
              if (v26 >= 0x10)
                v27 = v26 + 1;
              else
                v27 = 16;
              if (v27 <= v23 + 1)
                v28 = v23 + 1;
              else
                v28 = v27;
              if (v28 >> 29)
              {
                __break(0xC471u);
                return result;
              }
              v29 = (void *)*((_QWORD *)v58 + 2);
              v30 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
              *((_DWORD *)v22 + 6) = v28;
              *((_QWORD *)v22 + 2) = v30;
              memcpy(v30, v29, 8 * v23);
              if (v29)
              {
                if (*((void **)v22 + 2) == v29)
                {
                  *((_QWORD *)v22 + 2) = 0;
                  *((_DWORD *)v22 + 6) = 0;
                }
                WTF::fastFree((WTF *)v29, v31);
              }
              v23 = *((unsigned int *)v22 + 7);
              v32 = (WTF::StringImpl **)(*((_QWORD *)v22 + 2) + 8 * v23);
              v8 = v25;
              v9 = v24;
            }
            else
            {
              v32 = (WTF::StringImpl **)(*((_QWORD *)v58 + 2) + 8 * v23);
            }
            *v32 = v21;
            *((_DWORD *)v22 + 7) = v23 + 1;
            v4 = v57;
            v57 = 0;
            if (v4)
            {
              if (*(_DWORD *)v4 == 1)
                v4 = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v4;
            }
            v6 += 16;
          }
          while (v6 != v7);
        }
        WTF::JSONImpl::Value::toJSONString(v58);
        WebCore::utf8Buffer((uint64_t *)&v57, (uint64_t *)&v60);
        v34 = v57;
        v57 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v33);
          else
            *(_DWORD *)v34 -= 2;
        }
        if (v60)
        {
          v57 = v60;
          v60 = 0;
          v35 = *(_QWORD *)(v53 + 240);
          *(_QWORD *)(v53 + 240) = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 16))(v35, &v57, v53 + 136, 0, 1);
        }
        else
        {
          v39 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)v39 = 1;
          *(_QWORD *)(v39 + 8) = v39 + 24;
          *(_QWORD *)(v39 + 16) = 1;
          *(_QWORD *)(v39 + 48) = 0;
          *(_BYTE *)(v39 + 40) = 1;
          v57 = (WTF::StringImpl *)v39;
          v35 = *(_QWORD *)(v53 + 240);
          *(_QWORD *)(v53 + 240) = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v35 + 16))(v35, &v57, v53 + 136, 0, 0);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v57, v40);
        v8 = v60;
        v60 = 0;
        if (v8)
        {
          do
          {
            v42 = __ldaxr((unsigned int *)v8);
            v43 = v42 - 1;
          }
          while (__stlxr(v43, (unsigned int *)v8));
          if (!v43)
          {
            atomic_store(1u, (unsigned int *)v8);
            v44 = *((unsigned int *)v8 + 5);
            if ((_DWORD)v44)
            {
              v45 = *((_QWORD *)v8 + 1);
              v46 = v45 + 16 * v44;
              do
              {
                v47 = *(unsigned int **)(v45 + 8);
                *(_QWORD *)(v45 + 8) = 0;
                if (v47)
                {
                  do
                  {
                    v48 = __ldaxr(v47);
                    v49 = v48 - 1;
                  }
                  while (__stlxr(v49, v47));
                  if (!v49)
                  {
                    atomic_store(1u, v47);
                    v50 = v47[6];
                    if ((_DWORD)v50 != -1)
                      ((void (*)(WTF::StringImpl **, unsigned int *))off_1E31F7A98[v50])(&v57, v47 + 2);
                    v47[6] = -1;
                    WTF::fastFree((WTF *)v47, v41);
                  }
                }
                v45 += 16;
              }
              while (v45 != v46);
            }
            v51 = (WTF *)*((_QWORD *)v8 + 1);
            if ((WTF::StringImpl *)((char *)v8 + 24) != v51 && v51 != 0)
            {
LABEL_82:
              *((_QWORD *)v8 + 1) = 0;
              *((_DWORD *)v8 + 4) = 0;
              WTF::fastFree(v51, v41);
            }
            WTF::fastFree(v8, v41);
          }
        }
        result = (uint64_t *)v58;
        v58 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            return (uint64_t *)WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

void sub_1946CAD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, _DWORD *a14, uint64_t a15, WTF::StringImpl *a16)
{
  uint64_t v16;
  void *v18;
  void *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v32;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&a13, v18);
  v20 = a16;
  a16 = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v23 = *((unsigned int *)v20 + 5);
      if ((_DWORD)v23)
      {
        v24 = *((_QWORD *)v20 + 1);
        v25 = v24 + 16 * v23;
        do
        {
          v26 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              v29 = v26[6];
              if ((_DWORD)v29 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))off_1E31F7A98[v29])(&a13, v26 + 2);
              v26[6] = -1;
              WTF::fastFree((WTF *)v26, v19);
            }
          }
          v24 += 16;
        }
        while (v24 != v25);
      }
      v30 = (WTF *)*((_QWORD *)v20 + 1);
      if ((WTF::StringImpl *)((char *)v20 + 24) != v30 && v30 != 0)
      {
        *((_QWORD *)v20 + 1) = 0;
        *((_DWORD *)v20 + 4) = 0;
        WTF::fastFree(v30, v19);
      }
      WTF::fastFree(v20, v19);
    }
  }
  v32 = a14;
  a14 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  _Unwind_Resume(a1);
}

_DWORD *WTF::JSONImpl::ObjectBase::setString(WTF::JSONImpl::ObjectBase *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *result;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _BYTE v14[24];

  WTF::JSONImpl::Value::create(a3, a2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, (WTF::StringImpl **)a2, (const WTF::StringImpl *)&v13, (uint64_t)v14);
  if (v14[16])
  {
    v5 = (uint64_t *)((char *)this + 24);
    v6 = *((unsigned int *)this + 9);
    if ((_DWORD)v6 == *((_DWORD *)this + 8))
    {
      v10 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, (unint64_t)a2);
      v6 = *((unsigned int *)this + 9);
      v11 = *((_QWORD *)this + 3);
      v12 = *v10;
      if (*v10)
        *v12 += 2;
      *(_QWORD *)(v11 + 8 * v6) = v12;
    }
    else
    {
      v7 = *v5;
      v8 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v8 += 2;
      *(_QWORD *)(v7 + 8 * v6) = v8;
    }
    *((_DWORD *)this + 9) = v6 + 1;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

void sub_1946CB0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  if (a9)
  {
    if (*a9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*a9;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WTF::StringImpl **v12;
  int i;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF::StringImpl **)(v8 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF::StringImpl *)-1)
      break;
    v12 = (WTF::StringImpl **)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = v12;
    }
    v17 = *a2;
    if (*a2)
      *(_DWORD *)v17 += 2;
    *v15 = v17;
    v18 = *(WTF::StringImpl **)a3;
    *(_QWORD *)a3 = 0;
    result = (WTF::StringImpl **)v15[1];
    v15[1] = v18;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF::StringImpl **)WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)result;
    }
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_32;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_39:
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v28, v15);
        v15 = result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_43;
      }
LABEL_32:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_39;
    }
LABEL_43:
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v24 + 16 * v27;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v22 = *a1;
  if (*a1)
    v23 = *(unsigned int *)(v22 - 4);
  else
    v23 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v22 + 16 * v23;
  *(_BYTE *)(a4 + 16) = 0;
  v29 = v8 + 16 * v14;
  v30 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  result = *(WTF::StringImpl ***)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v30;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF::StringImpl **)WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = *((_DWORD *)v14 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v14);
          else
            v20 = v19 >> 8;
          v21 = 0;
          do
          {
            v22 = v20 & v18;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v17 + 16 * v22));
          v23 = v17 + 16 * v22;
          v24 = *(_DWORD **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            if (*v24 != 1)
            {
              --*v24;
              goto LABEL_25;
            }
            WTF::JSONImpl::Value::operator delete();
            v30 = *(WTF::StringImpl **)v23;
            *(_QWORD *)v23 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v10);
              else
                *(_DWORD *)v30 -= 2;
            }
          }
          else
          {
LABEL_25:
            *(_QWORD *)v23 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v23 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v23 + 8) = v27;
          v28 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*v28 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v28;
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v23;
          goto LABEL_34;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*v16 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v14 = *v13;
          }
          else
          {
            --*v16;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_34:
      if (++v11 == v7)
        goto LABEL_45;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

