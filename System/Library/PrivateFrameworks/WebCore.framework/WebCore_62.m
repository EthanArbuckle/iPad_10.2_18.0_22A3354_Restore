void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcAndSymbolsHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeRelativeComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &,WebCore::CSSCalcSymbolsAllowed)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw,WebCore::SymbolRaw> &>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 5;
}

void _ZN7WebCore24CSSPropertyParserHelpersL21callWithColorFunctionIZNS0_L17consumeColorSpaceIZNS0_L20consumeColorFunctionERNS_19CSSParserTokenRangeERNS0_16ColorParserStateEE3__1EEDTcldtfp0_onclINS_16ColorRGBFunctionINS_20ExtendedGammaEncodedIfNS_15SRGBADescriptorEEEEEEEES4_OT_EUlTyvE_EESD_NS_10CSSValueIDESF_(uint64_t a1, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned __int16 *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  int v39;
  int v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  void *v49;
  int v50;
  int v51;
  uint64_t v52;
  void *v53;
  int v54;
  int v55;
  uint64_t v56;
  void *v57;
  int v58;
  int v59;
  uint64_t v60;
  void *v61;
  int v62;
  int v63;
  uint64_t v64;
  void *v65;
  int v66;
  int v67;
  uint64_t v68;
  void *v69;
  int v70;
  int v71;
  uint64_t v72;
  void *v73;
  int v74;
  __int128 *v75;
  __int128 *v76;
  __int128 *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  void *v99;
  unsigned int v100;
  uint64_t v101;
  void *v102;
  unsigned int v103;
  uint64_t v104;
  void *v105;
  unsigned int v106;
  uint64_t v107;
  void *v108;
  unsigned int v109;
  uint64_t v110;
  void *v111;
  unsigned int v112;
  uint64_t v113;
  void *v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  unsigned int v120;
  __int128 *v121;
  __int128 *v122;
  __int128 *v123;
  unsigned int v124;
  unsigned int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  __int128 *v142;
  __int128 *v143;
  __int128 *v144;
  unsigned int v145;
  unsigned int v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char v162;
  __int128 *v163;
  __int128 *v164;
  __int128 *v165;
  unsigned int v166;
  unsigned int v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  char v183;
  __int128 *v184;
  __int128 *v185;
  __int128 *v186;
  unsigned int v187;
  unsigned int v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204;
  __int128 *v205;
  __int128 *v206;
  __int128 *v207;
  unsigned int v208;
  unsigned int v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  __int128 *v226;
  __int128 *v227;
  __int128 *v228;
  __int128 *v229;
  __int128 *v230;
  __int128 *v231;
  unsigned int v232;
  unsigned int v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  unsigned int v250;
  unsigned int v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  _BYTE *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  float v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  char v333;
  __int128 *v334;
  char v335;
  unsigned int v336;
  uint64_t v337;
  void *v338;
  int v339;
  __int128 *v340;
  char v341;
  unsigned int v342;
  uint64_t v343;
  void *v344;
  int v345;
  __int128 *v346;
  char v347;
  unsigned int v348;
  uint64_t v349;
  void *v350;
  int v351;
  __int128 *v352;
  char v353;
  unsigned int v354;
  uint64_t v355;
  void *v356;
  int v357;
  __int128 *v358;
  char v359;
  unsigned int v360;
  __int128 *v361;
  char v362;
  unsigned int v363;
  uint64_t v364;
  void *v365;
  int v366;
  uint64_t v367;
  void *v368;
  int v369;
  __int128 *v370;
  char v371;
  unsigned int v372;
  uint64_t v373;
  void *v374;
  int v375;
  __int128 *v376;
  char v377;
  unsigned int v378;
  uint64_t v379;
  void *v380;
  int v381;
  unsigned int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char v398[8];
  int v399;
  char v400[8];
  int v401;
  char v402;
  unsigned __int16 **v403;
  unsigned int v404;
  char v405[8];
  unsigned int v406;
  char v407[8];
  unsigned int v408;
  char v409[8];
  unsigned int v410;
  char v411;
  int v412;
  unsigned __int16 *v413;
  unsigned int v414;
  unsigned __int8 v415;
  unsigned __int16 ***v416;
  unsigned int v417;
  unsigned __int8 v418;
  unsigned __int16 **v419;
  int v420;
  unsigned __int8 v421;
  unsigned __int16 **v422;
  int v423;
  unsigned __int16 ***v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _BYTE *v429;
  unint64_t v430;
  char *v431;
  char v432;
  _BYTE v433[7];
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unsigned __int16 *v437[2];

  switch((int)a2)
  {
    case 935:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v24 = *(uint64_t **)(a3 + 8);
      v6 = *v24;
      v7 = v24[1];
      v25 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v25 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v26);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D358[v404])(&v424, &v419, &v403);
        v400[0] = 0;
        v401 = -1;
        v27 = v425;
        if ((_DWORD)v425 == -1)
        {
          v402 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
          v401 = v27;
          v402 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        v400[0] = 0;
        v402 = 0;
      }
      if (!v402)
        goto LABEL_670;
      v398[0] = 0;
      v399 = -1;
      v59 = v401;
      if (v401 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
        v399 = v59;
      }
      v60 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v60 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v61);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D380[v404])(&v424, &v419, &v403);
        LOBYTE(v419) = 0;
        v420 = -1;
        v62 = v425;
        if ((_DWORD)v425 == -1)
        {
          v421 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
          v420 = v62;
          v421 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v419) = 0;
        v421 = 0;
      }
      if (!v421)
        goto LABEL_305;
      v107 = *(unsigned __int8 *)(v7 + 4);
      v413 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v107 | 0x10100000000);
      if (v413)
        WTF::fastFree((WTF *)(v413 - 8), v108);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v416 = &v422;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D3A8[v404])(&v424, &v416, &v403);
        LOBYTE(v416) = 0;
        v417 = -1;
        v109 = v425;
        if ((_DWORD)v425 == -1)
        {
          v418 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
          v417 = v109;
          v418 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v416) = 0;
        v418 = 0;
      }
      if (!v418)
        goto LABEL_482;
      LOBYTE(v413) = 0;
      v415 = 0;
      v185 = *(__int128 **)v6;
      v184 = *(__int128 **)(v6 + 8);
      if (*(_QWORD *)v6 >= (unint64_t)v184)
      {
        v186 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v185 = *(__int128 **)v6;
        }
      }
      else
      {
        v186 = *(__int128 **)v6;
      }
      v78 = 0;
      if ((*(_DWORD *)v186 & 0x3F) != 6 || *((_WORD *)v186 + 8) != 47)
        goto LABEL_420;
      if (v185 == v184)
      {
        v359 = 1;
        v358 = v184;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v358 = *(__int128 **)v6;
        }
      }
      else
      {
        v358 = (__int128 *)((char *)v185 + 24);
        *(_QWORD *)v6 = (char *)v185 + 24;
      }
      while (1)
      {
        if (v358 < v184 || (v359 & 1) != 0)
        {
          if (v358 >= v184)
            v358 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v360 = *(_DWORD *)v358;
        }
        else
        {
          v360 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v360;
          v359 = 1;
        }
        if ((v360 & 0x3F) != 0x10)
          break;
        v358 = (__int128 *)(*(_QWORD *)v6 + 24);
        *(_QWORD *)v6 = v358;
      }
      v364 = *(unsigned __int8 *)(v7 + 4);
      v437[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v364 | 0x10100000000);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v365);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v424 = (unsigned __int16 ***)&v436;
        ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D3D0[v404])(&v422, &v424, &v403);
        LOBYTE(v424) = 0;
        LODWORD(v425) = -1;
        v366 = v423;
        if (v423 == -1)
        {
          LOBYTE(v426) = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
          LODWORD(v425) = v366;
          LOBYTE(v426) = 1;
          if (v423 != -1)
            ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
      }
      else
      {
        LOBYTE(v424) = 0;
        LOBYTE(v426) = 0;
      }
      if (v415 != v426)
      {
        if (v415)
        {
          if (v414 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
          v414 = -1;
          v415 = 0;
        }
        else
        {
          LOBYTE(v413) = 0;
          v414 = -1;
          v386 = v425;
          if ((_DWORD)v425 != -1)
          {
            ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
            v414 = v386;
          }
          v415 = 1;
        }
        goto LABEL_989;
      }
      if (!v415)
      {
LABEL_992:
        if (!v415)
          goto LABEL_1008;
        v185 = *(__int128 **)v6;
        v184 = *(__int128 **)(v6 + 8);
        v78 = 1;
LABEL_420:
        if (v185 != v184)
          goto LABEL_481;
        v79 = v421;
        if (!v421)
          goto LABEL_965;
        v79 = v418;
        if (!v418)
          goto LABEL_965;
        LOBYTE(v403) = 0;
        v404 = -1;
        v187 = v399;
        if (v399 != -1)
        {
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
          v404 = v187;
        }
        v405[0] = 0;
        v406 = -1;
        v188 = v420;
        if (v420 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
          v406 = v188;
        }
        v189 = v407;
        v407[0] = 0;
        v408 = -1;
        v6 = v417;
        if (v417 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
          v408 = v6;
        }
        v409[0] = 0;
        v411 = 0;
        if (v415)
        {
          v410 = -1;
          v6 = v414;
          if (v414 != -1)
          {
            ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
            v410 = v6;
          }
          v411 = 1;
        }
        v412 = *(_DWORD *)(v7 + 8);
        v437[0] = 0;
        v422 = v437;
        if (v404 == -1)
          goto LABEL_1017;
        v424 = &v422;
        v6 = (uint64_t)&off_1E339BF48;
        v190 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
        v436 = 0;
        v422 = (unsigned __int16 **)&v436;
        if (v406 == -1)
          goto LABEL_1017;
        v7 = v190;
        v192 = v191;
        v424 = &v422;
        v193 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
        v435 = 0;
        v422 = (unsigned __int16 **)&v435;
        if (v408 == -1)
          goto LABEL_1017;
        v195 = v193;
        v196 = v194;
        v424 = &v422;
        v198 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
        v199 = v197;
        v434 = 0;
        v394 = v196;
        if (v411)
        {
          v422 = (unsigned __int16 **)&v434;
          if (v410 == -1)
            goto LABEL_1017;
          v200 = v195;
          v424 = &v422;
          v201 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
          v189 = v197;
          v202 = v201 & 0xFFFFFFFFFFFFFF00;
          v203 = v201;
          if (v434)
            WTF::fastFree((WTF *)(v434 - 16), v197);
          v204 = 1;
        }
        else
        {
          v200 = v195;
          v204 = 0;
          v202 = 0;
          v203 = 0;
        }
        if (v435)
          WTF::fastFree((WTF *)(v435 - 16), v197);
        if (v436)
          WTF::fastFree((WTF *)(v436 - 16), v197);
        if (v437[0])
          WTF::fastFree((WTF *)(v437[0] - 8), v197);
        v424 = (unsigned __int16 ***)v7;
        v425 = v192;
        v426 = v200;
        v427 = v394;
        v428 = v198;
        v429 = v199;
        v430 = v203 | v202;
        v431 = v189;
        v432 = v204;
        *(_DWORD *)v433 = (_DWORD)v422;
        *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
        WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>>((uint64_t)&v424);
        v303 = v302;
        v305 = v304;
        v307 = v306;
        v309 = v308;
        v276 = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)v276 = 1;
        *(_DWORD *)(v276 + 4) = v303;
        *(_DWORD *)(v276 + 8) = v305;
        *(_DWORD *)(v276 + 12) = v307;
        *(_DWORD *)(v276 + 16) = v309;
        if (v411)
        {
          if (v410 != -1)
            ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
          v410 = -1;
        }
        if (v408 != -1)
          ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
        v277 = 0x60E000000000000;
        goto LABEL_649;
      }
      if (v414 == -1)
      {
        if ((_DWORD)v425 == -1)
          goto LABEL_989;
      }
      else if ((_DWORD)v425 == -1)
      {
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
        v414 = -1;
LABEL_989:
        if ((_BYTE)v426 && (_DWORD)v425 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
        goto LABEL_992;
      }
      v403 = &v413;
      ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v425])(&v403, &v413, &v424);
      goto LABEL_989;
    case 936:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v28 = *(uint64_t **)(a3 + 8);
      v6 = *v28;
      v7 = v28[1];
      v29 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v29 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v30);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D3F8[v404])(&v424, &v419, &v403);
        v400[0] = 0;
        v401 = -1;
        v31 = v425;
        if ((_DWORD)v425 == -1)
        {
          v402 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
          v401 = v31;
          v402 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        v400[0] = 0;
        v402 = 0;
      }
      if (!v402)
        goto LABEL_670;
      v398[0] = 0;
      v399 = -1;
      v63 = v401;
      if (v401 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
        v399 = v63;
      }
      v64 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v64 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v65);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D420[v404])(&v424, &v419, &v403);
        LOBYTE(v419) = 0;
        v420 = -1;
        v66 = v425;
        if ((_DWORD)v425 == -1)
        {
          v421 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
          v420 = v66;
          v421 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v419) = 0;
        v421 = 0;
      }
      if (!v421)
        goto LABEL_305;
      v110 = *(unsigned __int8 *)(v7 + 4);
      v413 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v110 | 0x10100000000);
      if (v413)
        WTF::fastFree((WTF *)(v413 - 8), v111);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v416 = &v422;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D448[v404])(&v424, &v416, &v403);
        LOBYTE(v416) = 0;
        v417 = -1;
        v112 = v425;
        if ((_DWORD)v425 == -1)
        {
          v418 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
          v417 = v112;
          v418 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v416) = 0;
        v418 = 0;
      }
      if (!v418)
        goto LABEL_482;
      LOBYTE(v413) = 0;
      v415 = 0;
      v206 = *(__int128 **)v6;
      v205 = *(__int128 **)(v6 + 8);
      if (*(_QWORD *)v6 >= (unint64_t)v205)
      {
        v207 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v206 = *(__int128 **)v6;
        }
      }
      else
      {
        v207 = *(__int128 **)v6;
      }
      v78 = 0;
      if ((*(_DWORD *)v207 & 0x3F) != 6 || *((_WORD *)v207 + 8) != 47)
        goto LABEL_450;
      if (v206 == v205)
      {
        v362 = 1;
        v361 = v205;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v361 = *(__int128 **)v6;
        }
      }
      else
      {
        v361 = (__int128 *)((char *)v206 + 24);
        *(_QWORD *)v6 = (char *)v206 + 24;
      }
      while (1)
      {
        if (v361 < v205 || (v362 & 1) != 0)
        {
          if (v361 >= v205)
            v361 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v363 = *(_DWORD *)v361;
        }
        else
        {
          v363 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v363;
          v362 = 1;
        }
        if ((v363 & 0x3F) != 0x10)
          break;
        v361 = (__int128 *)(*(_QWORD *)v6 + 24);
        *(_QWORD *)v6 = v361;
      }
      v367 = *(unsigned __int8 *)(v7 + 4);
      v437[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v367 | 0x10100000000);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v368);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v424 = (unsigned __int16 ***)&v436;
        ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D470[v404])(&v422, &v424, &v403);
        LOBYTE(v424) = 0;
        LODWORD(v425) = -1;
        v369 = v423;
        if (v423 == -1)
        {
          LOBYTE(v426) = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
          LODWORD(v425) = v369;
          LOBYTE(v426) = 1;
          if (v423 != -1)
            ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
      }
      else
      {
        LOBYTE(v424) = 0;
        LOBYTE(v426) = 0;
      }
      if (v415 == v426)
      {
        if (!v415)
          goto LABEL_999;
        if (v414 == -1)
        {
          if ((_DWORD)v425 == -1)
            goto LABEL_996;
        }
        else if ((_DWORD)v425 == -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
          v414 = -1;
          goto LABEL_996;
        }
        v403 = &v413;
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v425])(&v403, &v413, &v424);
      }
      else if (v415)
      {
        if (v414 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
        v414 = -1;
        v415 = 0;
      }
      else
      {
        LOBYTE(v413) = 0;
        v414 = -1;
        v387 = v425;
        if ((_DWORD)v425 != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
          v414 = v387;
        }
        v415 = 1;
      }
LABEL_996:
      if ((_BYTE)v426 && (_DWORD)v425 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
LABEL_999:
      if (!v415)
        goto LABEL_1008;
      v206 = *(__int128 **)v6;
      v205 = *(__int128 **)(v6 + 8);
      v78 = 1;
LABEL_450:
      if (v206 != v205)
        goto LABEL_481;
      v79 = v421;
      if (!v421)
        goto LABEL_965;
      v79 = v418;
      if (!v418)
        goto LABEL_965;
      LOBYTE(v403) = 0;
      v404 = -1;
      v208 = v399;
      if (v399 != -1)
      {
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
        v404 = v208;
      }
      v405[0] = 0;
      v406 = -1;
      v209 = v420;
      if (v420 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
        v406 = v209;
      }
      v210 = v407;
      v407[0] = 0;
      v408 = -1;
      v6 = v417;
      if (v417 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
        v408 = v6;
      }
      v409[0] = 0;
      v411 = 0;
      if (v415)
      {
        v410 = -1;
        v6 = v414;
        if (v414 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
          v410 = v6;
        }
        v411 = 1;
      }
      v412 = *(_DWORD *)(v7 + 8);
      v437[0] = 0;
      v422 = v437;
      if (v404 == -1)
        goto LABEL_1017;
      v424 = &v422;
      v6 = (uint64_t)&off_1E339BF48;
      v211 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
      v436 = 0;
      v422 = (unsigned __int16 **)&v436;
      if (v406 == -1)
        goto LABEL_1017;
      v7 = v211;
      v213 = v212;
      v424 = &v422;
      v214 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
      v435 = 0;
      v422 = (unsigned __int16 **)&v435;
      if (v408 == -1)
        goto LABEL_1017;
      v216 = v214;
      v217 = v215;
      v424 = &v422;
      v219 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
      v220 = v218;
      v434 = 0;
      v395 = v217;
      if (v411)
      {
        v422 = (unsigned __int16 **)&v434;
        if (v410 == -1)
          goto LABEL_1017;
        v221 = v216;
        v424 = &v422;
        v222 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
        v210 = v218;
        v223 = v222 & 0xFFFFFFFFFFFFFF00;
        v224 = v222;
        if (v434)
          WTF::fastFree((WTF *)(v434 - 16), v218);
        v225 = 1;
      }
      else
      {
        v221 = v216;
        v225 = 0;
        v223 = 0;
        v224 = 0;
      }
      if (v435)
        WTF::fastFree((WTF *)(v435 - 16), v218);
      if (v436)
        WTF::fastFree((WTF *)(v436 - 16), v218);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v218);
      v424 = (unsigned __int16 ***)v7;
      v425 = v213;
      v426 = v221;
      v427 = v395;
      v428 = v219;
      v429 = v220;
      v430 = v224 | v223;
      v431 = v210;
      v432 = v225;
      *(_DWORD *)v433 = (_DWORD)v422;
      *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
      v310 = WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>>((uint64_t)&v424);
      v312 = v311;
      v314 = v313;
      v316 = v315;
      v276 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v276 = 1;
      *(float *)(v276 + 4) = v310;
      *(_DWORD *)(v276 + 8) = v312;
      *(_DWORD *)(v276 + 12) = v314;
      *(_DWORD *)(v276 + 16) = v316;
      if (v411)
      {
        if (v410 != -1)
          ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
        v410 = -1;
      }
      if (v408 != -1)
        ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
      v277 = 0x70E000000000000;
      goto LABEL_649;
    case 937:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v16 = *(uint64_t **)(a3 + 8);
      v6 = *v16;
      v7 = v16[1];
      v17 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v17 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v18);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D178[v404])(&v424, &v419, &v403);
        v400[0] = 0;
        v401 = -1;
        v19 = v425;
        if ((_DWORD)v425 == -1)
        {
          v402 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
          v401 = v19;
          v402 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        v400[0] = 0;
        v402 = 0;
      }
      if (!v402)
        goto LABEL_670;
      v398[0] = 0;
      v399 = -1;
      v51 = v401;
      if (v401 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
        v399 = v51;
      }
      v52 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v52 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v53);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D1A0[v404])(&v424, &v419, &v403);
        LOBYTE(v419) = 0;
        v420 = -1;
        v54 = v425;
        if ((_DWORD)v425 == -1)
        {
          v421 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
          v420 = v54;
          v421 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v419) = 0;
        v421 = 0;
      }
      if (!v421)
        goto LABEL_305;
      v101 = *(unsigned __int8 *)(v7 + 4);
      v413 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v101 | 0x10100000000);
      if (v413)
        WTF::fastFree((WTF *)(v413 - 8), v102);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v416 = &v422;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D1C8[v404])(&v424, &v416, &v403);
        LOBYTE(v416) = 0;
        v417 = -1;
        v103 = v425;
        if ((_DWORD)v425 == -1)
        {
          v418 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
          v417 = v103;
          v418 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v416) = 0;
        v418 = 0;
      }
      if (!v418)
        goto LABEL_482;
      LOBYTE(v413) = 0;
      v415 = 0;
      v143 = *(__int128 **)v6;
      v142 = *(__int128 **)(v6 + 8);
      if (*(_QWORD *)v6 >= (unint64_t)v142)
      {
        v144 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v143 = *(__int128 **)v6;
        }
      }
      else
      {
        v144 = *(__int128 **)v6;
      }
      v78 = 0;
      if ((*(_DWORD *)v144 & 0x3F) != 6 || *((_WORD *)v144 + 8) != 47)
        goto LABEL_360;
      if (v143 == v142)
      {
        v347 = 1;
        v346 = v142;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v346 = *(__int128 **)v6;
        }
      }
      else
      {
        v346 = (__int128 *)((char *)v143 + 24);
        *(_QWORD *)v6 = (char *)v143 + 24;
      }
      while (1)
      {
        if (v346 < v142 || (v347 & 1) != 0)
        {
          if (v346 >= v142)
            v346 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v348 = *(_DWORD *)v346;
        }
        else
        {
          v348 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v348;
          v347 = 1;
        }
        if ((v348 & 0x3F) != 0x10)
          break;
        v346 = (__int128 *)(*(_QWORD *)v6 + 24);
        *(_QWORD *)v6 = v346;
      }
      v349 = *(unsigned __int8 *)(v7 + 4);
      v437[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v349 | 0x10100000000);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v350);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v424 = (unsigned __int16 ***)&v436;
        ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D1F0[v404])(&v422, &v424, &v403);
        LOBYTE(v424) = 0;
        LODWORD(v425) = -1;
        v351 = v423;
        if (v423 == -1)
        {
          LOBYTE(v426) = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
          LODWORD(v425) = v351;
          LOBYTE(v426) = 1;
          if (v423 != -1)
            ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
      }
      else
      {
        LOBYTE(v424) = 0;
        LOBYTE(v426) = 0;
      }
      if (v415 == v426)
      {
        if (!v415)
          goto LABEL_978;
        if (v414 == -1)
        {
          if ((_DWORD)v425 == -1)
            goto LABEL_975;
        }
        else if ((_DWORD)v425 == -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
          v414 = -1;
          goto LABEL_975;
        }
        v403 = &v413;
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v425])(&v403, &v413, &v424);
      }
      else if (v415)
      {
        if (v414 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
        v414 = -1;
        v415 = 0;
      }
      else
      {
        LOBYTE(v413) = 0;
        v414 = -1;
        v384 = v425;
        if ((_DWORD)v425 != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
          v414 = v384;
        }
        v415 = 1;
      }
LABEL_975:
      if ((_BYTE)v426 && (_DWORD)v425 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
LABEL_978:
      if (!v415)
        goto LABEL_1008;
      v143 = *(__int128 **)v6;
      v142 = *(__int128 **)(v6 + 8);
      v78 = 1;
LABEL_360:
      if (v143 != v142)
        goto LABEL_481;
      v79 = v421;
      if (!v421)
        goto LABEL_965;
      v79 = v418;
      if (!v418)
        goto LABEL_965;
      LOBYTE(v403) = 0;
      v404 = -1;
      v145 = v399;
      if (v399 != -1)
      {
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
        v404 = v145;
      }
      v405[0] = 0;
      v406 = -1;
      v146 = v420;
      if (v420 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
        v406 = v146;
      }
      v147 = v407;
      v407[0] = 0;
      v408 = -1;
      v6 = v417;
      if (v417 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
        v408 = v6;
      }
      v409[0] = 0;
      v411 = 0;
      if (v415)
      {
        v410 = -1;
        v6 = v414;
        if (v414 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
          v410 = v6;
        }
        v411 = 1;
      }
      v412 = *(_DWORD *)(v7 + 8);
      v437[0] = 0;
      v422 = v437;
      if (v404 == -1)
        goto LABEL_1017;
      v424 = &v422;
      v6 = (uint64_t)&off_1E339BF48;
      v148 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
      v436 = 0;
      v422 = (unsigned __int16 **)&v436;
      if (v406 == -1)
        goto LABEL_1017;
      v7 = v148;
      v150 = v149;
      v424 = &v422;
      v151 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
      v435 = 0;
      v422 = (unsigned __int16 **)&v435;
      if (v408 == -1)
        goto LABEL_1017;
      v153 = v151;
      v154 = v152;
      v424 = &v422;
      v156 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
      v157 = v155;
      v434 = 0;
      v392 = v154;
      if (v411)
      {
        v422 = (unsigned __int16 **)&v434;
        if (v410 == -1)
          goto LABEL_1017;
        v158 = v153;
        v424 = &v422;
        v159 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
        v147 = v155;
        v160 = v159 & 0xFFFFFFFFFFFFFF00;
        v161 = v159;
        if (v434)
          WTF::fastFree((WTF *)(v434 - 16), v155);
        v162 = 1;
      }
      else
      {
        v158 = v153;
        v162 = 0;
        v160 = 0;
        v161 = 0;
      }
      if (v435)
        WTF::fastFree((WTF *)(v435 - 16), v155);
      if (v436)
        WTF::fastFree((WTF *)(v436 - 16), v155);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v155);
      v424 = (unsigned __int16 ***)v7;
      v425 = v150;
      v426 = v158;
      v427 = v392;
      v428 = v156;
      v429 = v157;
      v430 = v161 | v160;
      v431 = v147;
      v432 = v162;
      *(_DWORD *)v433 = (_DWORD)v422;
      *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
      WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>>((uint64_t)&v424);
      v287 = v286;
      v289 = v288;
      v291 = v290;
      v293 = v292;
      v276 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v276 = 1;
      *(_DWORD *)(v276 + 4) = v287;
      *(_DWORD *)(v276 + 8) = v289;
      *(_DWORD *)(v276 + 12) = v291;
      *(_DWORD *)(v276 + 16) = v293;
      if (v411)
      {
        if (v410 != -1)
          ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
        v410 = -1;
      }
      if (v408 != -1)
        ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
      v277 = 0x20E000000000000;
      goto LABEL_649;
    case 938:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v20 = *(uint64_t **)(a3 + 8);
      v6 = *v20;
      v7 = v20[1];
      v21 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v21 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v22);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D218[v404])(&v424, &v419, &v403);
        v400[0] = 0;
        v401 = -1;
        v23 = v425;
        if ((_DWORD)v425 == -1)
        {
          v402 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
          v401 = v23;
          v402 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        v400[0] = 0;
        v402 = 0;
      }
      if (!v402)
        goto LABEL_670;
      v398[0] = 0;
      v399 = -1;
      v55 = v401;
      if (v401 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
        v399 = v55;
      }
      v56 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v56 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v57);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D240[v404])(&v424, &v419, &v403);
        LOBYTE(v419) = 0;
        v420 = -1;
        v58 = v425;
        if ((_DWORD)v425 == -1)
        {
          v421 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
          v420 = v58;
          v421 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v419) = 0;
        v421 = 0;
      }
      if (!v421)
        goto LABEL_305;
      v104 = *(unsigned __int8 *)(v7 + 4);
      v413 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v104 | 0x10100000000);
      if (v413)
        WTF::fastFree((WTF *)(v413 - 8), v105);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v416 = &v422;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D268[v404])(&v424, &v416, &v403);
        LOBYTE(v416) = 0;
        v417 = -1;
        v106 = v425;
        if ((_DWORD)v425 == -1)
        {
          v418 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
          v417 = v106;
          v418 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v416) = 0;
        v418 = 0;
      }
      if (!v418)
        goto LABEL_482;
      LOBYTE(v413) = 0;
      v415 = 0;
      v164 = *(__int128 **)v6;
      v163 = *(__int128 **)(v6 + 8);
      if (*(_QWORD *)v6 >= (unint64_t)v163)
      {
        v165 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v164 = *(__int128 **)v6;
        }
      }
      else
      {
        v165 = *(__int128 **)v6;
      }
      v78 = 0;
      if ((*(_DWORD *)v165 & 0x3F) != 6 || *((_WORD *)v165 + 8) != 47)
        goto LABEL_390;
      if (v164 == v163)
      {
        v353 = 1;
        v352 = v163;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v352 = *(__int128 **)v6;
        }
      }
      else
      {
        v352 = (__int128 *)((char *)v164 + 24);
        *(_QWORD *)v6 = (char *)v164 + 24;
      }
      while (1)
      {
        if (v352 < v163 || (v353 & 1) != 0)
        {
          if (v352 >= v163)
            v352 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v354 = *(_DWORD *)v352;
        }
        else
        {
          v354 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v354;
          v353 = 1;
        }
        if ((v354 & 0x3F) != 0x10)
          break;
        v352 = (__int128 *)(*(_QWORD *)v6 + 24);
        *(_QWORD *)v6 = v352;
      }
      v355 = *(unsigned __int8 *)(v7 + 4);
      v437[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v355 | 0x10100000000);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v356);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v424 = (unsigned __int16 ***)&v436;
        ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D290[v404])(&v422, &v424, &v403);
        LOBYTE(v424) = 0;
        LODWORD(v425) = -1;
        v357 = v423;
        if (v423 == -1)
        {
          LOBYTE(v426) = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
          LODWORD(v425) = v357;
          LOBYTE(v426) = 1;
          if (v423 != -1)
            ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
      }
      else
      {
        LOBYTE(v424) = 0;
        LOBYTE(v426) = 0;
      }
      if (v415 == v426)
      {
        if (!v415)
          goto LABEL_985;
        if (v414 == -1)
        {
          if ((_DWORD)v425 == -1)
            goto LABEL_982;
        }
        else if ((_DWORD)v425 == -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
          v414 = -1;
          goto LABEL_982;
        }
        v403 = &v413;
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v425])(&v403, &v413, &v424);
      }
      else if (v415)
      {
        if (v414 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
        v414 = -1;
        v415 = 0;
      }
      else
      {
        LOBYTE(v413) = 0;
        v414 = -1;
        v385 = v425;
        if ((_DWORD)v425 != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
          v414 = v385;
        }
        v415 = 1;
      }
LABEL_982:
      if ((_BYTE)v426 && (_DWORD)v425 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
LABEL_985:
      if (!v415)
        goto LABEL_1008;
      v164 = *(__int128 **)v6;
      v163 = *(__int128 **)(v6 + 8);
      v78 = 1;
LABEL_390:
      if (v164 != v163)
        goto LABEL_481;
      v79 = v421;
      if (!v421)
        goto LABEL_965;
      v79 = v418;
      if (!v418)
        goto LABEL_965;
      LOBYTE(v403) = 0;
      v404 = -1;
      v166 = v399;
      if (v399 != -1)
      {
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
        v404 = v166;
      }
      v405[0] = 0;
      v406 = -1;
      v167 = v420;
      if (v420 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
        v406 = v167;
      }
      v168 = v407;
      v407[0] = 0;
      v408 = -1;
      v6 = v417;
      if (v417 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
        v408 = v6;
      }
      v409[0] = 0;
      v411 = 0;
      if (v415)
      {
        v410 = -1;
        v6 = v414;
        if (v414 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
          v410 = v6;
        }
        v411 = 1;
      }
      v412 = *(_DWORD *)(v7 + 8);
      v437[0] = 0;
      v422 = v437;
      if (v404 == -1)
        goto LABEL_1017;
      v424 = &v422;
      v6 = (uint64_t)&off_1E339BF48;
      v169 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
      v436 = 0;
      v422 = (unsigned __int16 **)&v436;
      if (v406 == -1)
        goto LABEL_1017;
      v7 = v169;
      v171 = v170;
      v424 = &v422;
      v172 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
      v435 = 0;
      v422 = (unsigned __int16 **)&v435;
      if (v408 == -1)
        goto LABEL_1017;
      v174 = v172;
      v175 = v173;
      v424 = &v422;
      v177 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
      v178 = v176;
      v434 = 0;
      v393 = v175;
      if (v411)
      {
        v422 = (unsigned __int16 **)&v434;
        if (v410 == -1)
          goto LABEL_1017;
        v179 = v174;
        v424 = &v422;
        v180 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
        v168 = v176;
        v181 = v180 & 0xFFFFFFFFFFFFFF00;
        v182 = v180;
        if (v434)
          WTF::fastFree((WTF *)(v434 - 16), v176);
        v183 = 1;
      }
      else
      {
        v179 = v174;
        v183 = 0;
        v181 = 0;
        v182 = 0;
      }
      if (v435)
        WTF::fastFree((WTF *)(v435 - 16), v176);
      if (v436)
        WTF::fastFree((WTF *)(v436 - 16), v176);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v176);
      v424 = (unsigned __int16 ***)v7;
      v425 = v171;
      v426 = v179;
      v427 = v393;
      v428 = v177;
      v429 = v178;
      v430 = v182 | v181;
      v431 = v168;
      v432 = v183;
      *(_DWORD *)v433 = (_DWORD)v422;
      *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
      WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>>((uint64_t)&v424);
      v295 = v294;
      v297 = v296;
      v299 = v298;
      v301 = v300;
      v276 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v276 = 1;
      *(_DWORD *)(v276 + 4) = v295;
      *(_DWORD *)(v276 + 8) = v297;
      *(_DWORD *)(v276 + 12) = v299;
      *(_DWORD *)(v276 + 16) = v301;
      if (v411)
      {
        if (v410 != -1)
          ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
        v410 = -1;
      }
      if (v408 != -1)
        ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
      v277 = 0x30E000000000000;
      goto LABEL_649;
    case 939:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v12 = *(uint64_t **)(a3 + 8);
      v6 = *v12;
      v7 = v12[1];
      v13 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v13 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v14);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D2B8[v404])(&v424, &v419, &v403);
        v400[0] = 0;
        v401 = -1;
        v15 = v425;
        if ((_DWORD)v425 == -1)
        {
          v402 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
          v401 = v15;
          v402 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        v400[0] = 0;
        v402 = 0;
      }
      if (!v402)
        goto LABEL_670;
      v398[0] = 0;
      v399 = -1;
      v47 = v401;
      if (v401 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
        v399 = v47;
      }
      v48 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v48 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v49);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D2E0[v404])(&v424, &v419, &v403);
        LOBYTE(v419) = 0;
        v420 = -1;
        v50 = v425;
        if ((_DWORD)v425 == -1)
        {
          v421 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
          v420 = v50;
          v421 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v419) = 0;
        v421 = 0;
      }
      if (!v421)
        goto LABEL_305;
      v98 = *(unsigned __int8 *)(v7 + 4);
      v413 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v98 | 0x10100000000);
      if (v413)
        WTF::fastFree((WTF *)(v413 - 8), v99);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v416 = &v422;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D308[v404])(&v424, &v416, &v403);
        LOBYTE(v416) = 0;
        v417 = -1;
        v100 = v425;
        if ((_DWORD)v425 == -1)
        {
          v418 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
          v417 = v100;
          v418 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v416) = 0;
        v418 = 0;
      }
      if (!v418)
        goto LABEL_482;
      LOBYTE(v413) = 0;
      v415 = 0;
      v122 = *(__int128 **)v6;
      v121 = *(__int128 **)(v6 + 8);
      if (*(_QWORD *)v6 >= (unint64_t)v121)
      {
        v123 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v122 = *(__int128 **)v6;
        }
      }
      else
      {
        v123 = *(__int128 **)v6;
      }
      v78 = 0;
      if ((*(_DWORD *)v123 & 0x3F) != 6 || *((_WORD *)v123 + 8) != 47)
        goto LABEL_330;
      if (v122 == v121)
      {
        v341 = 1;
        v340 = v121;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v340 = *(__int128 **)v6;
        }
      }
      else
      {
        v340 = (__int128 *)((char *)v122 + 24);
        *(_QWORD *)v6 = (char *)v122 + 24;
      }
      while (1)
      {
        if (v340 < v121 || (v341 & 1) != 0)
        {
          if (v340 >= v121)
            v340 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v342 = *(_DWORD *)v340;
        }
        else
        {
          v342 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v342;
          v341 = 1;
        }
        if ((v342 & 0x3F) != 0x10)
          break;
        v340 = (__int128 *)(*(_QWORD *)v6 + 24);
        *(_QWORD *)v6 = v340;
      }
      v343 = *(unsigned __int8 *)(v7 + 4);
      v437[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v343 | 0x10100000000);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v344);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v424 = (unsigned __int16 ***)&v436;
        ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D330[v404])(&v422, &v424, &v403);
        LOBYTE(v424) = 0;
        LODWORD(v425) = -1;
        v345 = v423;
        if (v423 == -1)
        {
          LOBYTE(v426) = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
          LODWORD(v425) = v345;
          LOBYTE(v426) = 1;
          if (v423 != -1)
            ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
      }
      else
      {
        LOBYTE(v424) = 0;
        LOBYTE(v426) = 0;
      }
      if (v415 != v426)
      {
        if (v415)
        {
          if (v414 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
          v414 = -1;
          v415 = 0;
        }
        else
        {
          LOBYTE(v413) = 0;
          v414 = -1;
          v383 = v425;
          if ((_DWORD)v425 != -1)
          {
            ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
            v414 = v383;
          }
          v415 = 1;
        }
        goto LABEL_968;
      }
      if (!v415)
        goto LABEL_971;
      v79 = v425;
      if (v414 == -1)
        goto LABEL_966;
      if ((_DWORD)v425 != -1)
        goto LABEL_967;
      ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
      v414 = -1;
      goto LABEL_968;
    case 940:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v32 = *(uint64_t **)(a3 + 8);
      v6 = *v32;
      v7 = v32[1];
      v33 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v33 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v34);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D498[v404])(&v424, &v419, &v403);
        v400[0] = 0;
        v401 = -1;
        v35 = v425;
        if ((_DWORD)v425 == -1)
        {
          v402 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
          v401 = v35;
          v402 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        v400[0] = 0;
        v402 = 0;
      }
      if (!v402)
        goto LABEL_670;
      v398[0] = 0;
      v399 = -1;
      v67 = v401;
      if (v401 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
        v399 = v67;
      }
      v68 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v68 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v69);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D4C0[v404])(&v424, &v419, &v403);
        LOBYTE(v419) = 0;
        v420 = -1;
        v70 = v425;
        if ((_DWORD)v425 == -1)
        {
          v421 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
          v420 = v70;
          v421 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v419) = 0;
        v421 = 0;
      }
      if (!v421)
      {
LABEL_305:
        v116 = 0;
        v117 = 0;
        goto LABEL_663;
      }
      v113 = *(unsigned __int8 *)(v7 + 4);
      v413 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v113 | 0x10100000000);
      if (v413)
        WTF::fastFree((WTF *)(v413 - 8), v114);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v416 = &v422;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D4E8[v404])(&v424, &v416, &v403);
        LOBYTE(v416) = 0;
        v417 = -1;
        v115 = v425;
        if ((_DWORD)v425 == -1)
        {
          v418 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
          v417 = v115;
          v418 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v416) = 0;
        v418 = 0;
      }
      if (!v418)
      {
LABEL_482:
        v116 = 0;
        v117 = 0;
        goto LABEL_660;
      }
      LOBYTE(v413) = 0;
      v415 = 0;
      v227 = *(__int128 **)v6;
      v226 = *(__int128 **)(v6 + 8);
      if (*(_QWORD *)v6 >= (unint64_t)v226)
      {
        v228 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v227 = *(__int128 **)v6;
        }
      }
      else
      {
        v228 = *(__int128 **)v6;
      }
      v78 = 0;
      if ((*(_DWORD *)v228 & 0x3F) != 6 || *((_WORD *)v228 + 8) != 47)
        goto LABEL_480;
      if (v227 == v226)
      {
        v371 = 1;
        v370 = v226;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          v370 = *(__int128 **)v6;
        }
      }
      else
      {
        v370 = (__int128 *)((char *)v227 + 24);
        *(_QWORD *)v6 = (char *)v227 + 24;
      }
      while (1)
      {
        if (v370 < v226 || (v371 & 1) != 0)
        {
          if (v370 >= v226)
            v370 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v372 = *(_DWORD *)v370;
        }
        else
        {
          v372 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v372;
          v371 = 1;
        }
        if ((v372 & 0x3F) != 0x10)
          break;
        v370 = (__int128 *)(*(_QWORD *)v6 + 24);
        *(_QWORD *)v6 = v370;
      }
      v373 = *(unsigned __int8 *)(v7 + 4);
      v437[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v373 | 0x10100000000);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v374);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v424 = (unsigned __int16 ***)&v436;
        ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D510[v404])(&v422, &v424, &v403);
        LOBYTE(v424) = 0;
        LODWORD(v425) = -1;
        v375 = v423;
        if (v423 == -1)
        {
          LOBYTE(v426) = 1;
        }
        else
        {
          ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
          LODWORD(v425) = v375;
          LOBYTE(v426) = 1;
          if (v423 != -1)
            ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
      }
      else
      {
        LOBYTE(v424) = 0;
        LOBYTE(v426) = 0;
      }
      if (v415 == v426)
      {
        if (!v415)
          goto LABEL_1006;
        if (v414 == -1)
        {
          if ((_DWORD)v425 == -1)
            goto LABEL_1003;
        }
        else if ((_DWORD)v425 == -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
          v414 = -1;
          goto LABEL_1003;
        }
        v403 = &v413;
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v425])(&v403, &v413, &v424);
      }
      else if (v415)
      {
        if (v414 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
        v414 = -1;
        v415 = 0;
      }
      else
      {
        LOBYTE(v413) = 0;
        v414 = -1;
        v388 = v425;
        if ((_DWORD)v425 != -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
          v414 = v388;
        }
        v415 = 1;
      }
LABEL_1003:
      if ((_BYTE)v426 && (_DWORD)v425 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
LABEL_1006:
      if (!v415)
        goto LABEL_1008;
      v227 = *(__int128 **)v6;
      v226 = *(__int128 **)(v6 + 8);
      v78 = 1;
LABEL_480:
      if (v227 != v226)
        goto LABEL_481;
      v79 = v421;
      if (!v421)
        goto LABEL_965;
      v79 = v418;
      if (!v418)
        goto LABEL_965;
      LOBYTE(v403) = 0;
      v404 = -1;
      v232 = v399;
      if (v399 != -1)
      {
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
        v404 = v232;
      }
      v405[0] = 0;
      v406 = -1;
      v233 = v420;
      if (v420 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
        v406 = v233;
      }
      v234 = v407;
      v407[0] = 0;
      v408 = -1;
      v6 = v417;
      if (v417 != -1)
      {
        ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
        v408 = v6;
      }
      v409[0] = 0;
      v411 = 0;
      if (v415)
      {
        v410 = -1;
        v6 = v414;
        if (v414 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
          v410 = v6;
        }
        v411 = 1;
      }
      v412 = *(_DWORD *)(v7 + 8);
      v437[0] = 0;
      v422 = v437;
      if (v404 == -1)
        goto LABEL_1017;
      v424 = &v422;
      v6 = (uint64_t)&off_1E339BF48;
      v235 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
      v436 = 0;
      v422 = (unsigned __int16 **)&v436;
      if (v406 == -1)
        goto LABEL_1017;
      v7 = v235;
      v237 = v236;
      v424 = &v422;
      v238 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
      v435 = 0;
      v422 = (unsigned __int16 **)&v435;
      if (v408 == -1)
        goto LABEL_1017;
      v240 = v238;
      v241 = v239;
      v424 = &v422;
      v243 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
      v244 = v242;
      v434 = 0;
      v396 = v241;
      if (v411)
      {
        v422 = (unsigned __int16 **)&v434;
        if (v410 == -1)
          goto LABEL_1017;
        v245 = v240;
        v424 = &v422;
        v246 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
        v234 = v242;
        v247 = v246 & 0xFFFFFFFFFFFFFF00;
        v248 = v246;
        if (v434)
          WTF::fastFree((WTF *)(v434 - 16), v242);
        v249 = 1;
      }
      else
      {
        v245 = v240;
        v249 = 0;
        v247 = 0;
        v248 = 0;
      }
      if (v435)
        WTF::fastFree((WTF *)(v435 - 16), v242);
      if (v436)
        WTF::fastFree((WTF *)(v436 - 16), v242);
      if (v437[0])
        WTF::fastFree((WTF *)(v437[0] - 8), v242);
      v424 = (unsigned __int16 ***)v7;
      v425 = v237;
      v426 = v245;
      v427 = v396;
      v428 = v243;
      v429 = v244;
      v430 = v248 | v247;
      v431 = v234;
      v432 = v249;
      *(_DWORD *)v433 = (_DWORD)v422;
      *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
      WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>>((uint64_t)&v424);
      v318 = v317;
      v320 = v319;
      v322 = v321;
      v324 = v323;
      v276 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v276 = 1;
      *(_DWORD *)(v276 + 4) = v318;
      *(_DWORD *)(v276 + 8) = v320;
      *(_DWORD *)(v276 + 12) = v322;
      *(_DWORD *)(v276 + 16) = v324;
      if (v411)
      {
        if (v410 != -1)
          ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
        v410 = -1;
      }
      if (v408 != -1)
        ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
      v277 = 0x40E000000000000;
      goto LABEL_649;
    case 941:
    case 943:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v5 = *(uint64_t **)(a3 + 8);
      v6 = *v5;
      v7 = v5[1];
      v8 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v8 | 0x10100000000);
      v10 = (unsigned __int16 *)v416;
      if (!v416)
        goto LABEL_3;
      goto LABEL_1018;
    case 942:
      WebCore::CSSPropertyParserHelpers::consumeIdentRaw(*(__int128 ***)a3, a2);
      v36 = *(uint64_t **)(a3 + 8);
      v6 = *v36;
      v7 = v36[1];
      v37 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v37 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v38);
      if (!v405[0])
      {
        v400[0] = 0;
        v402 = 0;
        goto LABEL_187;
      }
      if (v404 == -1)
      {
        while (1)
        {
LABEL_1017:
          while (1)
          {
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_1018:
            WTF::fastFree((WTF *)(v10 - 8), v9);
LABEL_3:
            if (v405[0])
              break;
            v400[0] = 0;
            v402 = 0;
LABEL_62:
            if (!v402)
              goto LABEL_670;
            v398[0] = 0;
            v399 = -1;
            v40 = v401;
            if (v401 != -1)
            {
              ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
              v399 = v40;
            }
            v41 = *(unsigned __int8 *)(v7 + 4);
            v416 = 0;
            WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v41 | 0x10100000000);
            if (v416)
              WTF::fastFree((WTF *)(v416 - 2), v42);
            if (v405[0])
            {
              if (v404 != -1)
              {
                v419 = &v413;
                ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D600[v404])(&v424, &v419, &v403);
                LOBYTE(v419) = 0;
                v420 = -1;
                v43 = v425;
                if ((_DWORD)v425 == -1)
                {
                  v421 = 1;
                }
                else
                {
                  ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
                  v420 = v43;
                  v421 = 1;
                  if ((_DWORD)v425 != -1)
                    ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
                }
                if (v405[0] && v404 != -1)
                  ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
                goto LABEL_84;
              }
            }
            else
            {
              LOBYTE(v419) = 0;
              v421 = 0;
LABEL_84:
              if (!v421)
                goto LABEL_319;
              v44 = *(unsigned __int8 *)(v7 + 4);
              v413 = 0;
              WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v44 | 0x10100000000);
              if (v413)
                WTF::fastFree((WTF *)(v413 - 8), v45);
              if (v405[0])
              {
                if (v404 != -1)
                {
                  v416 = &v422;
                  ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D628[v404])(&v424, &v416, &v403);
                  LOBYTE(v416) = 0;
                  v417 = -1;
                  v46 = v425;
                  if ((_DWORD)v425 == -1)
                  {
                    v418 = 1;
                  }
                  else
                  {
                    ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
                    v417 = v46;
                    v418 = 1;
                    if ((_DWORD)v425 != -1)
                      ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
                  }
                  if (v405[0] && v404 != -1)
                    ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
                  goto LABEL_202;
                }
              }
              else
              {
                LOBYTE(v416) = 0;
                v418 = 0;
LABEL_202:
                if (!v418)
                  goto LABEL_494;
                LOBYTE(v413) = 0;
                v415 = 0;
                v76 = *(__int128 **)v6;
                v75 = *(__int128 **)(v6 + 8);
                if (*(_QWORD *)v6 >= (unint64_t)v75)
                {
                  v77 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  {
                    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                    v76 = *(__int128 **)v6;
                  }
                }
                else
                {
                  v77 = *(__int128 **)v6;
                }
                v78 = 0;
                if ((*(_DWORD *)v77 & 0x3F) == 6 && *((_WORD *)v77 + 8) == 47)
                {
                  if (v76 == v75)
                  {
                    v335 = 1;
                    v334 = v75;
                    {
                      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
                      v334 = *(__int128 **)v6;
                    }
                  }
                  else
                  {
                    v334 = (__int128 *)((char *)v76 + 24);
                    *(_QWORD *)v6 = (char *)v76 + 24;
                  }
                  while (1)
                  {
                    if (v334 < v75 || (v335 & 1) != 0)
                    {
                      if (v334 >= v75)
                        v334 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                      v336 = *(_DWORD *)v334;
                    }
                    else
                    {
                      v336 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
                      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v336;
                      v335 = 1;
                    }
                    if ((v336 & 0x3F) != 0x10)
                      break;
                    v334 = (__int128 *)(*(_QWORD *)v6 + 24);
                    *(_QWORD *)v6 = v334;
                  }
                  v337 = *(unsigned __int8 *)(v7 + 4);
                  v437[0] = 0;
                  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v337 | 0x10100000000);
                  if (v437[0])
                    WTF::fastFree((WTF *)(v437[0] - 8), v338);
                  if (!v405[0])
                  {
                    LOBYTE(v424) = 0;
                    LOBYTE(v426) = 0;
                    goto LABEL_827;
                  }
                  if (v404 != -1)
                  {
                    v424 = (unsigned __int16 ***)&v436;
                    ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D650[v404])(&v422, &v424, &v403);
                    LOBYTE(v424) = 0;
                    LODWORD(v425) = -1;
                    v339 = v423;
                    if (v423 == -1)
                    {
                      LOBYTE(v426) = 1;
                    }
                    else
                    {
                      ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
                      LODWORD(v425) = v339;
                      LOBYTE(v426) = 1;
                      if (v423 != -1)
                        ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
                    }
                    if (v405[0] && v404 != -1)
                      ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
LABEL_827:
                    if (v415 == v426)
                    {
                      if (v415)
                      {
                        if (v414 == -1)
                        {
                          if ((_DWORD)v425 != -1)
                            goto LABEL_847;
                        }
                        else
                        {
                          if ((_DWORD)v425 == -1)
                          {
                            ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
                            v414 = -1;
                            goto LABEL_848;
                          }
LABEL_847:
                          v403 = &v413;
                          ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v425])(&v403, &v413, &v424);
                        }
LABEL_848:
                        if ((_BYTE)v426 && (_DWORD)v425 != -1)
                          ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
                      }
                      if (!v415)
                        goto LABEL_1016;
                      v76 = *(__int128 **)v6;
                      v75 = *(__int128 **)(v6 + 8);
                      v78 = 1;
                      goto LABEL_207;
                    }
                    if (v415)
                    {
                      if (v414 != -1)
                        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
                      v414 = -1;
                      v415 = 0;
                    }
                    else
                    {
                      LOBYTE(v413) = 0;
                      v414 = -1;
                      v382 = v425;
                      if ((_DWORD)v425 != -1)
                      {
                        ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
                        v414 = v382;
                      }
                      v415 = 1;
                    }
                    goto LABEL_848;
                  }
                }
                else
                {
LABEL_207:
                  if (v76 != v75)
                    goto LABEL_493;
                  v79 = v421;
                  if (!v421)
                    goto LABEL_965;
                  v79 = v418;
                  if (!v418)
                    goto LABEL_965;
                  LOBYTE(v403) = 0;
                  v404 = -1;
                  v80 = v399;
                  if (v399 != -1)
                  {
                    ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
                    v404 = v80;
                  }
                  v405[0] = 0;
                  v406 = -1;
                  v81 = v420;
                  if (v420 != -1)
                  {
                    ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
                    v406 = v81;
                  }
                  v82 = v407;
                  v407[0] = 0;
                  v408 = -1;
                  v6 = v417;
                  if (v417 != -1)
                  {
                    ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
                    v408 = v6;
                  }
                  v409[0] = 0;
                  v411 = 0;
                  if (v415)
                  {
                    v410 = -1;
                    v6 = v414;
                    if (v414 != -1)
                    {
                      ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
                      v410 = v6;
                    }
                    v411 = 1;
                  }
                  v412 = *(_DWORD *)(v7 + 8);
                  v437[0] = 0;
                  v422 = v437;
                  if (v404 != -1)
                  {
                    v424 = &v422;
                    v6 = (uint64_t)&off_1E339BF48;
                    v83 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
                    v436 = 0;
                    v422 = (unsigned __int16 **)&v436;
                    if (v406 != -1)
                    {
                      v7 = v83;
                      v85 = v84;
                      v424 = &v422;
                      v86 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
                      v435 = 0;
                      v422 = (unsigned __int16 **)&v435;
                      if (v408 != -1)
                      {
                        v88 = v86;
                        v89 = v87;
                        v424 = &v422;
                        v91 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
                        v92 = v90;
                        v434 = 0;
                        v390 = v89;
                        if (!v411)
                        {
                          v93 = v88;
                          v97 = 0;
                          v95 = 0;
                          v96 = 0;
LABEL_536:
                          if (v435)
                            WTF::fastFree((WTF *)(v435 - 16), v90);
                          if (v436)
                            WTF::fastFree((WTF *)(v436 - 16), v90);
                          if (v437[0])
                            WTF::fastFree((WTF *)(v437[0] - 8), v90);
                          v424 = (unsigned __int16 ***)v7;
                          v425 = v85;
                          v426 = v93;
                          v427 = v390;
                          v428 = v91;
                          v429 = v92;
                          v430 = v96 | v95;
                          v431 = v82;
                          v432 = v97;
                          *(_DWORD *)v433 = (_DWORD)v422;
                          *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
                          WebCore::convertToTypedColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>>((uint64_t)&v424);
                          v269 = v268;
                          v271 = v270;
                          v273 = v272;
                          v275 = v274;
                          v276 = WTF::fastMalloc((WTF *)0x14);
                          *(_DWORD *)v276 = 1;
                          *(_DWORD *)(v276 + 4) = v269;
                          *(_DWORD *)(v276 + 8) = v271;
                          *(_DWORD *)(v276 + 12) = v273;
                          *(_DWORD *)(v276 + 16) = v275;
                          if (v411)
                          {
                            if (v410 != -1)
                              ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
                            v410 = -1;
                          }
                          if (v408 != -1)
                            ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
                          v277 = 0x130E000000000000;
                          goto LABEL_649;
                        }
                        v422 = (unsigned __int16 **)&v434;
                        if (v410 != -1)
                        {
                          v93 = v88;
                          v424 = &v422;
                          v94 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
                          v82 = v90;
                          v95 = v94 & 0xFFFFFFFFFFFFFF00;
                          v96 = v94;
                          if (v434)
                            WTF::fastFree((WTF *)(v434 - 16), v90);
                          v97 = 1;
                          goto LABEL_536;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v404 != -1)
          {
            v419 = &v413;
            ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D5D8[v404])(&v424, &v419, &v403);
            v400[0] = 0;
            v401 = -1;
            v11 = v425;
            if ((_DWORD)v425 == -1)
            {
              v402 = 1;
            }
            else
            {
              ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
              v401 = v11;
              v402 = 1;
              if ((_DWORD)v425 != -1)
                ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
            }
            if (v405[0] && v404 != -1)
              ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
            goto LABEL_62;
          }
        }
      }
      v419 = &v413;
      ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D538[v404])(&v424, &v419, &v403);
      v400[0] = 0;
      v401 = -1;
      v39 = v425;
      if ((_DWORD)v425 == -1)
      {
        v402 = 1;
      }
      else
      {
        ((void (*)(unsigned __int16 ***, char *, unsigned __int16 ****))off_1E339BFD0[v425])(&v419, v400, &v424);
        v401 = v39;
        v402 = 1;
        if ((_DWORD)v425 != -1)
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v419, &v424);
      }
      if (v405[0] && v404 != -1)
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
LABEL_187:
      if (!v402)
        goto LABEL_670;
      v398[0] = 0;
      v399 = -1;
      v71 = v401;
      if (v401 != -1)
      {
        ((void (*)(unsigned __int16 ***, char *, char *))off_1E339BFD0[v401])(&v403, v398, v400);
        v399 = v71;
      }
      v72 = *(unsigned __int8 *)(v7 + 4);
      v416 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, (unsigned __int16 **)&v416, v72 | 0x10100000000);
      if (v416)
        WTF::fastFree((WTF *)(v416 - 2), v73);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v419 = &v413;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ***, unsigned __int16 ***))off_1E339D560[v404])(&v424, &v419, &v403);
        LOBYTE(v419) = 0;
        v420 = -1;
        v74 = v425;
        if ((_DWORD)v425 == -1)
        {
          v421 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 ***, unsigned __int16 ****))off_1E339BFD0[v425])(&v413, &v419, &v424);
          v420 = v74;
          v421 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 **, unsigned __int16 ****))off_1E339BEF8[v425])(&v413, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v419) = 0;
        v421 = 0;
      }
      if (!v421)
      {
LABEL_319:
        v117 = 0;
        v116 = 0;
        goto LABEL_663;
      }
      v118 = *(unsigned __int8 *)(v7 + 4);
      v413 = 0;
      WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, &v413, v118 | 0x10100000000);
      if (v413)
        WTF::fastFree((WTF *)(v413 - 8), v119);
      if (v405[0])
      {
        if (v404 == -1)
          goto LABEL_1017;
        v416 = &v422;
        ((void (*)(unsigned __int16 ****__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D588[v404])(&v424, &v416, &v403);
        LOBYTE(v416) = 0;
        v417 = -1;
        v120 = v425;
        if ((_DWORD)v425 == -1)
        {
          v418 = 1;
        }
        else
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 ****, unsigned __int16 ****))off_1E339BFD0[v425])(&v422, &v416, &v424);
          v417 = v120;
          v418 = 1;
          if ((_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v422, &v424);
        }
        if (v405[0] && v404 != -1)
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      }
      else
      {
        LOBYTE(v416) = 0;
        v418 = 0;
      }
      if (!v418)
      {
LABEL_494:
        v117 = 0;
        v116 = 0;
        goto LABEL_660;
      }
      LOBYTE(v413) = 0;
      v415 = 0;
      v230 = *(__int128 **)v6;
      v229 = *(__int128 **)(v6 + 8);
      if (*(_QWORD *)v6 >= (unint64_t)v229)
      {
        v231 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v230 = *(__int128 **)v6;
        }
      }
      else
      {
        v231 = *(__int128 **)v6;
      }
      v78 = 0;
      if ((*(_DWORD *)v231 & 0x3F) == 6 && *((_WORD *)v231 + 8) == 47)
      {
        if (v230 == v229)
        {
          v377 = 1;
          v376 = v229;
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v376 = *(__int128 **)v6;
          }
        }
        else
        {
          v376 = (__int128 *)((char *)v230 + 24);
          *(_QWORD *)v6 = (char *)v230 + 24;
        }
        while (1)
        {
          if (v376 < v229 || (v377 & 1) != 0)
          {
            if (v376 >= v229)
              v376 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v378 = *(_DWORD *)v376;
          }
          else
          {
            v378 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v378;
            v377 = 1;
          }
          if ((v378 & 0x3F) != 0x10)
            break;
          v376 = (__int128 *)(*(_QWORD *)v6 + 24);
          *(_QWORD *)v6 = v376;
        }
        v379 = *(unsigned __int8 *)(v7 + 4);
        v437[0] = 0;
        WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw,WebCore::NoneRaw>::consume<>((uint64_t)&v403, v6, v437, v379 | 0x10100000000);
        if (v437[0])
          WTF::fastFree((WTF *)(v437[0] - 8), v380);
        if (v405[0])
        {
          if (v404 == -1)
            goto LABEL_1017;
          v424 = (unsigned __int16 ***)&v436;
          ((void (*)(unsigned __int16 ***__return_ptr, unsigned __int16 ****, unsigned __int16 ***))off_1E339D5B0[v404])(&v422, &v424, &v403);
          LOBYTE(v424) = 0;
          LODWORD(v425) = -1;
          v381 = v423;
          if (v423 == -1)
          {
            LOBYTE(v426) = 1;
          }
          else
          {
            ((void (*)(uint64_t *, unsigned __int16 ****, unsigned __int16 ***))off_1E339BFD0[v423])(&v436, &v424, &v422);
            LODWORD(v425) = v381;
            LOBYTE(v426) = 1;
            if (v423 != -1)
              ((void (*)(uint64_t *, unsigned __int16 ***))off_1E339BEF8[v423])(&v436, &v422);
          }
          if (v405[0] && v404 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v404])(&v422, &v403);
        }
        else
        {
          LOBYTE(v424) = 0;
          LOBYTE(v426) = 0;
        }
        if (v415 != v426)
        {
          if (v415)
          {
            if (v414 != -1)
              ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
            v414 = -1;
            v415 = 0;
          }
          else
          {
            LOBYTE(v413) = 0;
            v414 = -1;
            v389 = v425;
            if ((_DWORD)v425 != -1)
            {
              ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BFD0[v425])(&v403, &v413, &v424);
              v414 = v389;
            }
            v415 = 1;
          }
          goto LABEL_1011;
        }
        if (!v415)
        {
LABEL_1014:
          if (!v415)
          {
LABEL_1016:
            v116 = 0;
            v117 = 0;
            goto LABEL_657;
          }
          v230 = *(__int128 **)v6;
          v229 = *(__int128 **)(v6 + 8);
          v78 = 1;
          goto LABEL_492;
        }
        if (v414 == -1)
        {
          if ((_DWORD)v425 == -1)
            goto LABEL_1011;
        }
        else if ((_DWORD)v425 == -1)
        {
          ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
          v414 = -1;
LABEL_1011:
          if ((_BYTE)v426 && (_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
          goto LABEL_1014;
        }
        v403 = &v413;
        ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v425])(&v403, &v413, &v424);
        goto LABEL_1011;
      }
LABEL_492:
      if (v230 != v229)
      {
LABEL_493:
        v117 = 0;
        v116 = 0;
        goto LABEL_654;
      }
      v79 = v421;
      if (v421 && (v79 = v418) != 0)
      {
        LOBYTE(v403) = 0;
        v404 = -1;
        v250 = v399;
        if (v399 != -1)
        {
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
          v404 = v250;
        }
        v405[0] = 0;
        v406 = -1;
        v251 = v420;
        if (v420 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
          v406 = v251;
        }
        v252 = v407;
        v407[0] = 0;
        v408 = -1;
        v6 = v417;
        if (v417 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
          v408 = v6;
        }
        v409[0] = 0;
        v411 = 0;
        if (v415)
        {
          v410 = -1;
          v6 = v414;
          if (v414 != -1)
          {
            ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
            v410 = v6;
          }
          v411 = 1;
        }
        v412 = *(_DWORD *)(v7 + 8);
        v437[0] = 0;
        v422 = v437;
        if (v404 == -1)
          goto LABEL_1017;
        v424 = &v422;
        v6 = (uint64_t)&off_1E339BF48;
        v253 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
        v436 = 0;
        v422 = (unsigned __int16 **)&v436;
        if (v406 == -1)
          goto LABEL_1017;
        v7 = v253;
        v255 = v254;
        v424 = &v422;
        v256 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
        v435 = 0;
        v422 = (unsigned __int16 **)&v435;
        if (v408 == -1)
          goto LABEL_1017;
        v258 = v256;
        v259 = v257;
        v424 = &v422;
        v261 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
        v262 = v260;
        v434 = 0;
        v397 = v259;
        if (v411)
        {
          v422 = (unsigned __int16 **)&v434;
          if (v410 == -1)
            goto LABEL_1017;
          v263 = v258;
          v424 = &v422;
          v264 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
          v252 = v260;
          v265 = v264 & 0xFFFFFFFFFFFFFF00;
          v266 = v264;
          if (v434)
            WTF::fastFree((WTF *)(v434 - 16), v260);
          v267 = 1;
        }
        else
        {
          v263 = v258;
          v267 = 0;
          v265 = 0;
          v266 = 0;
        }
        if (v435)
          WTF::fastFree((WTF *)(v435 - 16), v260);
        if (v436)
          WTF::fastFree((WTF *)(v436 - 16), v260);
        if (v437[0])
          WTF::fastFree((WTF *)(v437[0] - 8), v260);
        v424 = (unsigned __int16 ***)v7;
        v425 = v255;
        v426 = v263;
        v427 = v397;
        v428 = v261;
        v429 = v262;
        v430 = v266 | v265;
        v431 = v252;
        v432 = v267;
        *(_DWORD *)v433 = (_DWORD)v422;
        *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
        WebCore::convertToTypedColor<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>>((uint64_t)&v424);
        v326 = v325;
        v328 = v327;
        v330 = v329;
        v332 = v331;
        v276 = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)v276 = 1;
        *(_DWORD *)(v276 + 4) = v326;
        *(_DWORD *)(v276 + 8) = v328;
        *(_DWORD *)(v276 + 12) = v330;
        *(_DWORD *)(v276 + 16) = v332;
        if (v411)
        {
          if (v410 != -1)
            ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
          v410 = -1;
        }
        if (v408 != -1)
          ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
        v277 = 0x120E000000000000;
      }
      else
      {
        while (1)
        {
LABEL_965:
          __break(1u);
LABEL_966:
          if ((_DWORD)v79 != -1)
          {
LABEL_967:
            v403 = &v413;
            ((void (*)(unsigned __int16 ***, unsigned __int16 **, unsigned __int16 ****))off_1E339BF20[v79])(&v403, &v413, &v424);
          }
LABEL_968:
          if ((_BYTE)v426 && (_DWORD)v425 != -1)
            ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v425])(&v403, &v424);
LABEL_971:
          if (!v415)
          {
LABEL_1008:
            v117 = 0;
            v116 = 0;
            goto LABEL_657;
          }
          v122 = *(__int128 **)v6;
          v121 = *(__int128 **)(v6 + 8);
          v78 = 1;
LABEL_330:
          if (v122 != v121)
          {
LABEL_481:
            v116 = 0;
            v117 = 0;
            goto LABEL_654;
          }
          v79 = v421;
          if (v421)
          {
            v79 = v418;
            if (v418)
              break;
          }
        }
        LOBYTE(v403) = 0;
        v404 = -1;
        v124 = v399;
        if (v399 != -1)
        {
          ((void (*)(unsigned __int16 ****, unsigned __int16 ***, char *))off_1E339BFD0[v399])(&v424, &v403, v398);
          v404 = v124;
        }
        v405[0] = 0;
        v406 = -1;
        v125 = v420;
        if (v420 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ***))off_1E339BFD0[v420])(&v424, v405, &v419);
          v406 = v125;
        }
        v126 = v407;
        v407[0] = 0;
        v408 = -1;
        v6 = v417;
        if (v417 != -1)
        {
          ((void (*)(unsigned __int16 ****, char *, unsigned __int16 ****))off_1E339BFD0[v417])(&v424, v407, &v416);
          v408 = v6;
        }
        v409[0] = 0;
        v411 = 0;
        if (v415)
        {
          v410 = -1;
          v6 = v414;
          if (v414 != -1)
          {
            ((void (*)(unsigned __int16 ****, char *, unsigned __int16 **))off_1E339BFD0[v414])(&v424, v409, &v413);
            v410 = v6;
          }
          v411 = 1;
        }
        v412 = *(_DWORD *)(v7 + 8);
        v437[0] = 0;
        v422 = v437;
        if (v404 == -1)
          goto LABEL_1017;
        v424 = &v422;
        v6 = (uint64_t)&off_1E339BF48;
        v127 = ((uint64_t (*)(unsigned __int16 ****, unsigned __int16 ***))*(&off_1E339BF48 + v404))(&v424, &v403);
        v436 = 0;
        v422 = (unsigned __int16 **)&v436;
        if (v406 == -1)
          goto LABEL_1017;
        v7 = v127;
        v129 = v128;
        v424 = &v422;
        v130 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v406))(&v424, v405);
        v435 = 0;
        v422 = (unsigned __int16 **)&v435;
        if (v408 == -1)
          goto LABEL_1017;
        v132 = v130;
        v133 = v131;
        v424 = &v422;
        v135 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v408))(&v424, v407);
        v136 = v134;
        v434 = 0;
        v391 = v133;
        if (v411)
        {
          v422 = (unsigned __int16 **)&v434;
          if (v410 == -1)
            goto LABEL_1017;
          v137 = v132;
          v424 = &v422;
          v138 = ((uint64_t (*)(unsigned __int16 ****, char *))*(&off_1E339BF48 + v410))(&v424, v409);
          v126 = v134;
          v139 = v138 & 0xFFFFFFFFFFFFFF00;
          v140 = v138;
          if (v434)
            WTF::fastFree((WTF *)(v434 - 16), v134);
          v141 = 1;
        }
        else
        {
          v137 = v132;
          v141 = 0;
          v139 = 0;
          v140 = 0;
        }
        if (v435)
          WTF::fastFree((WTF *)(v435 - 16), v134);
        if (v436)
          WTF::fastFree((WTF *)(v436 - 16), v134);
        if (v437[0])
          WTF::fastFree((WTF *)(v437[0] - 8), v134);
        v424 = (unsigned __int16 ***)v7;
        v425 = v129;
        v426 = v137;
        v427 = v391;
        v428 = v135;
        v429 = v136;
        v430 = v140 | v139;
        v431 = v126;
        v432 = v141;
        *(_DWORD *)v433 = (_DWORD)v422;
        *(_DWORD *)&v433[3] = *(_DWORD *)((char *)&v422 + 3);
        WebCore::convertToTypedColor<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>>((uint64_t)&v424);
        v279 = v278;
        v281 = v280;
        v283 = v282;
        v285 = v284;
        v276 = WTF::fastMalloc((WTF *)0x14);
        *(_DWORD *)v276 = 1;
        *(_DWORD *)(v276 + 4) = v279;
        *(_DWORD *)(v276 + 8) = v281;
        *(_DWORD *)(v276 + 12) = v283;
        *(_DWORD *)(v276 + 16) = v285;
        if (v411)
        {
          if (v410 != -1)
            ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v410])(&v424, v409);
          v410 = -1;
        }
        if (v408 != -1)
          ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v408])(&v424, v407);
        v277 = 0x50E000000000000;
      }
LABEL_649:
      v408 = -1;
      if (v406 != -1)
        ((void (*)(unsigned __int16 ****, char *))off_1E339BEF8[v406])(&v424, v405);
      v117 = v276 | v277;
      v406 = -1;
      if (v404 != -1)
        ((void (*)(unsigned __int16 ****, unsigned __int16 ***))off_1E339BEF8[v404])(&v424, &v403);
      v78 = v415;
      v116 = 1;
LABEL_654:
      if (v78 && v414 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 **))off_1E339BEF8[v414])(&v403, &v413);
LABEL_657:
      if (v418 && v417 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ****))off_1E339BEF8[v417])(&v403, &v416);
LABEL_660:
      if (v421 && v420 != -1)
        ((void (*)(unsigned __int16 ***, unsigned __int16 ***))off_1E339BEF8[v420])(&v403, &v419);
LABEL_663:
      if (v399 != -1)
        ((void (*)(unsigned __int16 ***, char *))off_1E339BEF8[v399])(&v403, v398);
      v399 = -1;
      if (v402 && v401 != -1)
        ((void (*)(unsigned __int16 ***, char *))off_1E339BEF8[v401])(&v403, v400);
      if (v116)
      {
        *(_QWORD *)a1 = v117;
        *(_DWORD *)(a1 + 88) = 0;
        v333 = 1;
        goto LABEL_671;
      }
LABEL_670:
      v333 = 0;
      *(_BYTE *)a1 = 0;
LABEL_671:
      *(_BYTE *)(a1 + 96) = v333;
      return;
    default:
      goto LABEL_670;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::A98RGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::DisplayP3Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::ProPhotoRGBDescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorRGBFunction<WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)0>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,0u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,1u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,2u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::ResultTypeListWithCalcHelper<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>::Result> WebCore::CSSPropertyParserHelpers::consumeAbsoluteComponent<WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>,3u>(WebCore::CSSParserTokenRange &,WebCore::CSSPropertyParserHelpers::ColorParserState &)::{lambda(WebCore::ColorXYZFunction<WebCore::XYZA<float,(WebCore::WhitePoint)1>>&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::PercentRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::NumberRaw,WebCore::PercentRaw<WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>>,WebCore::NoneRaw> &>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 8) = 4;
}

void WebCore::CSSPropertyParserHelpers::consumeColorRawForLegacyColorContrast(_QWORD *a1, WebCore::CSSPropertyParserHelpers *a2, uint64_t a3)
{
  void *v5;
  WebCore::CSSUnresolvedColorResolutionContext *v6;
  void *v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE v22[88];
  int v23;
  char v24;
  uint64_t *v25;
  uint64_t **v26;

  ++*(_DWORD *)(a3 + 8);
  WebCore::CSSPropertyParserHelpers::consumeColor((int)v22, a2);
  if (!v24)
  {
    *a1 = 0;
LABEL_7:
    --*(_DWORD *)(a3 + 8);
    return;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v8 = 0;
  v9 = 0;
  v25 = &v8;
  if (v23 != -1)
  {
    v26 = &v25;
    ((void (*)(uint64_t ***, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v23])(&v26, v22);
    WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)&v8, v5);
    if (v24)
    {
      if (v23 != -1)
        ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v23])(&v8, v22);
    }
    goto LABEL_7;
  }
  v6 = (WebCore::CSSUnresolvedColorResolutionContext *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext(v6, v7);
}

void WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext(WebCore::CSSUnresolvedColorResolutionContext *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WebCore::CSSUnresolvedColorResolutionContext *v26;
  WebCore::CSSUnresolvedColorResolutionContext *v27;
  WebCore::CSSUnresolvedColorResolutionContext *v28;
  WebCore::CSSUnresolvedColorResolutionContext *v29;
  WebCore::CSSUnresolvedColorResolutionContext *v30;

  if (*((_BYTE *)this + 104))
  {
    v2 = *((_QWORD *)this + 12);
    if ((v2 & 0x8000000000000) != 0)
    {
      v26 = this;
      v8 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
        this = v26;
      }
    }
  }
  if (*((_BYTE *)this + 88))
  {
    v3 = *((_QWORD *)this + 10);
    if ((v3 & 0x8000000000000) != 0)
    {
      v27 = this;
      v11 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
        this = v27;
      }
    }
  }
  if (*((_BYTE *)this + 72))
  {
    v4 = *((_QWORD *)this + 8);
    if ((v4 & 0x8000000000000) != 0)
    {
      v28 = this;
      v14 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
        this = v28;
      }
    }
  }
  if (*((_BYTE *)this + 56))
  {
    v5 = *((_QWORD *)this + 6);
    if ((v5 & 0x8000000000000) != 0)
    {
      v29 = this;
      v17 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, a2);
        this = v29;
      }
    }
  }
  if (*((_BYTE *)this + 40))
  {
    v6 = *((_QWORD *)this + 4);
    if ((v6 & 0x8000000000000) != 0)
    {
      v30 = this;
      v20 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
        this = v30;
      }
    }
  }
  if (*((_BYTE *)this + 24))
  {
    v7 = *((_QWORD *)this + 2);
    if ((v7 & 0x8000000000000) != 0)
    {
      v23 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, a2);
      }
    }
  }
}

uint64_t WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF *v24;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_QWORD *)(v11 + v13) = 0;
          v14 = *(_QWORD *)((char *)v5 + v13);
          if (v14)
          {
            *(_QWORD *)(v11 + v13) = v14;
            *(_QWORD *)((char *)v5 + v13) = 0;
          }
          v13 += 8;
        }
        while (8 * v6 != v13);
        if (v5)
        {
          if ((WTF *)v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x1958BC980);
    }
  }
  v15 = *(unsigned int *)(a1 + 8);
  v16 = v15 + (v15 >> 2);
  if (v16 >= 0x10)
    v17 = v16 + 1;
  else
    v17 = 16;
  if (v17 <= a2)
    v18 = a2;
  else
    v18 = v17;
  if (v18 > v15)
  {
    if (v18 >> 29)
      goto LABEL_39;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(a1 + 8) = v18;
    *(_QWORD *)a1 = v20;
    if ((_DWORD)v19)
    {
      v22 = 8 * v19;
      v23 = (_QWORD *)v20;
      v24 = v5;
      do
      {
        *v23 = 0;
        if (*(_QWORD *)v24)
        {
          *v23 = *(_QWORD *)v24;
          *(_QWORD *)v24 = 0;
        }
        ++v23;
        v24 = (WTF *)((char *)v24 + 8);
        v22 -= 8;
      }
      while (v22);
    }
    if (v5)
    {
      if ((WTF *)v20 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v21);
    }
  }
  return v3;
}

void WebCore::CSSPropertyParserHelpers::consumeColorMixComponent(_BYTE *a1, WebCore::CSSCalcValue *a2)
{
  void *v4;
  unint64_t v5;
  void *v6;
  double v8;
  int v9;
  char v10;
  unsigned __int16 *v11;
  double v12;
  int v13;
  char v14;
  int v15;
  unsigned __int8 v16;
  unsigned __int16 *v17;
  _BYTE v18[8];
  int v19;
  char v20;
  char v21;

  v18[0] = 0;
  v20 = 0;
  v17 = 0;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw>::consume<>(a2, &v17, 0x10100000000, (uint64_t)&v12);
  v5 = (unint64_t)v17;
  if (v17)
    goto LABEL_34;
  while (1)
  {
    if (v14)
    {
      if (!v13 && (v12 < 0.0 || v12 > 100.0))
      {
        *a1 = 0;
        a1[32] = 0;
        return;
      }
      std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>>::operator=[abi:sn180100]((uint64_t)v18, (uint64_t)&v12);
      if (v14 && v13 != -1)
        ((void (*)(double *, double *))off_1E339BD10[v13])(&v8, &v12);
    }
    WebCore::CSSPropertyParserHelpers::consumeColor((int)&v12, a2);
    if (!v16)
      break;
    if (v20)
      goto LABEL_9;
    v11 = 0;
    WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw>::consume<>(a2, &v11, 0x10100000000, (uint64_t)&v8);
    if (v11)
      WTF::fastFree((WTF *)(v11 - 8), v4);
    if (v10)
    {
      if (!v9 && (v8 < 0.0 || v8 > 100.0))
        break;
      std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>>::operator=[abi:sn180100]((uint64_t)v18, (uint64_t)&v8);
      if (v10 && v9 != -1)
        ((void (*)(char *, double *))off_1E339BD10[v9])(&v21, &v8);
    }
    v5 = v16;
    if (v16)
    {
LABEL_9:
      WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::CSSUnresolvedColor,WebCore::CSSUnresolvedColor>((uint64_t *)&v8, (uint64_t)&v12);
      std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>>::optional[abi:sn180100]((uint64_t)&v9, (uint64_t)v18);
      std::optional<WebCore::CSSUnresolvedColorMix::Component>::optional[abi:sn180100]<WebCore::CSSUnresolvedColorMix::Component,0>((uint64_t)a1, (uint64_t *)&v8);
      WebCore::CSSUnresolvedColorMix::Component::~Component((WebCore::CSSUnresolvedColorMix::Component *)&v8, v6);
      goto LABEL_10;
    }
    __break(1u);
LABEL_34:
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  *a1 = 0;
  a1[32] = 0;
LABEL_10:
  if (v16 && v15 != -1)
    ((void (*)(double *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v15])(&v8, &v12);
  if (v20)
  {
    if (v19 != -1)
      ((void (*)(double *, _BYTE *))off_1E339BD10[v19])(&v12, v18);
  }
}

BOOL WebCore::CSSPropertyParserHelpers::hasNonCalculatedZeroPercentage(WebCore::CSSPropertyParserHelpers *this, const WebCore::CSSUnresolvedColorMix::Component *a2)
{
  __n128 v2;
  int v3;
  _BOOL8 v4;
  double v6;
  int v7;
  char v8;
  char v9;

  std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>>::optional[abi:sn180100]((uint64_t)&v6, (uint64_t)this + 8);
  if (!v8)
    return 0;
  v3 = v7;
  if (v7 == -1)
    return 0;
  v2.n128_f64[0] = v6;
  v4 = v6 == 0.0;
  ((void (*)(char *, double *, __n128))off_1E339BD10[v7])(&v9, &v6, v2);
  if (v3)
    return 0;
  return v4;
}

uint64_t WebCore::CSSUnresolvedColor::CSSUnresolvedColor<WebCore::CSSUnresolvedColorMix>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  a2[2] = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    *(_DWORD *)(a1 + 32) = -1;
    v6 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *))off_1E339BD20[v6])(&v10);
      *(_DWORD *)(a1 + 32) = v6;
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  v7 = a2[6];
  a2[6] = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_DWORD *)(a1 + 64) = -1;
    v8 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *))off_1E339BD20[v8])(&v11);
      *(_DWORD *)(a1 + 64) = v8;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_DWORD *)(a1 + 88) = 3;
  return a1;
}

uint64_t std::optional<std::variant<WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = *(unsigned int *)(a1 + 8);
      v4 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v3 == -1)
      {
        if ((_DWORD)v4 == -1)
          return a1;
      }
      else if ((_DWORD)v4 == -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E339BD10[v3])(&v9, a1, a2);
        *(_DWORD *)(a1 + 8) = -1;
        return a1;
      }
      v8 = a1;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E339D678[v4])(&v8, a1, a2);
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t, uint64_t))off_1E339BD10[v5])(&v10, a1, a2);
    *(_DWORD *)(a1 + 8) = -1;
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    v6 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E339D688[v6])(&v11, a1, a2);
      *(_DWORD *)(a1 + 8) = v6;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t std::optional<WebCore::CSSUnresolvedColorMix::Component>::optional[abi:sn180100]<WebCore::CSSUnresolvedColorMix::Component,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_DWORD *)(a1 + 16) = -1;
    v4 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t *))off_1E339BD20[v4])(&v6, a1 + 8, a2 + 1);
      *(_DWORD *)(a1 + 16) = v4;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD10[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKSS_EEEDcSK_DpT0_(uint64_t result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339BD10[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *v7 = **a3 + 2;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *v6 = **a3 + 2;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)751>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 751)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::HueInterpolationMethod> [4]> const>(uint64_t a1)
{
  __int128 *v2;
  unsigned __int16 v3;
  char *v4;
  int v5;
  int v6;

  v2 = *(__int128 **)a1;
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 8))
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v3 = (unsigned __int16)WebCore::CSSParserToken::id((unsigned int *)v2);
  if ((unsigned __int16)(v3 - 953) > 3u)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v4 = (char *)&WebCore::CSSPropertyParserHelpers::consumeHueInterpolationMethod(WebCore::CSSParserTokenRange &)::hueInterpolationMethodMappings
       + 4 * (unsigned __int16)(v3 - 953);
    WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)a1);
    v5 = v4[2];
    v6 = 1;
  }
  return v5 | (v6 << 8);
}

void WebCore::CSSPropertyParser::consumeCustomPropertyValueWithSyntax(WebCore::CSSCustomPropertySyntax const&)::$_0::operator()<WebCore::CSSParserTokenRange,WebCore::CSSCustomPropertySyntax::Component const>(WTF::StringImpl *a1, WebCore::CSSPropertyParserHelpers *this, WebCore::CSSPropertyParserHelpers *a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  switch(*(_BYTE *)a4)
  {
    case 0:
      v5 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48);
      v26 = 0;
      v27 = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)a3, (unsigned __int16 **)&v27, (uint64_t)&v26, v5 | 0x100000000, &v25);
      goto LABEL_10;
    case 1:
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a3, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48), 0, 1, 0, 0, 0, (uint64_t *)&v27);
      goto LABEL_18;
    case 2:
      WebCore::CSSPropertyParserHelpers::consumePercent(a3, 0, &v27);
      goto LABEL_18;
    case 3:
      v26 = 0;
      v27 = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve((__int128 **)a3, (unsigned __int16 **)&v27, (uint64_t)&v26, 0x10100000000, &v25);
      goto LABEL_10;
    case 4:
      WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)a3, 0, &v27);
      goto LABEL_18;
    case 5:
      v7 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48);
      v26 = 0;
      v27 = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw>::consumeAndResolve((uint64_t)a3, (unsigned __int16 **)&v27, (uint64_t)&v26, v7 | 0x10100000000, &v25);
      goto LABEL_10;
    case 6:
      v8 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48);
      v26 = 0;
      v27 = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::TimeRaw>::consumeAndResolve((uint64_t)a3, (unsigned __int16 **)&v27, (uint64_t)&v26, v8 | 0x10100000000, &v25);
      goto LABEL_10;
    case 7:
      v26 = 0;
      v27 = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::ResolutionRaw>::consumeAndResolve((__int128 *)a3, (unsigned __int16 **)&v27, (uint64_t)&v26, 0x10100000100, &v25);
LABEL_10:
      if (v26)
        WTF::fastFree((WTF *)(v26 - 16), v6);
      if (v27)
        WTF::fastFree((WTF::StringImpl *)((char *)v27 - 16), v6);
      v9 = v25;
      goto LABEL_19;
    case 8:
      v10 = *((_QWORD *)this + 2);
      LOWORD(v26) = 1792;
      WebCore::CSSPropertyParserHelpers::consumeColor(a3, v10, &v26, (int **)&v27);
      goto LABEL_18;
    case 9:
      WebCore::CSSPropertyParserHelpers::consumeImage(a1, (__int128 **)a3, *((_QWORD *)this + 2), 9);
      return;
    case 0xA:
      WebCore::CSSPropertyParserHelpers::consumeURL((__int128 **)a3, this, &v27);
LABEL_18:
      v9 = v27;
LABEL_19:
      *(_QWORD *)a1 = v9;
      return;
    case 0xB:
      WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)a3, 0, &v27);
      v12 = v27;
      if (!v27)
        goto LABEL_41;
      v27 = 0;
      v15 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v15 = 2;
      v16 = *(_BYTE *)(v15 + 6);
      *(_WORD *)(v15 + 4) = 63;
      *(_BYTE *)(v15 + 6) = v16 & 0xFC;
      *(_QWORD *)(v15 + 8) = v12;
      v17 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      if (v17)
        *(_DWORD *)v12 = v17;
      else
        WTF::StringImpl::destroy(v12, v13);
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v13);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!*(_QWORD *)(a4 + 8))
        goto LABEL_32;
      v19 = (*(_WORD *)(v15 + 4) & 0x7Fu) - 20;
      if (v19 > 0x3C)
        goto LABEL_48;
      if (((1 << ((*(_WORD *)(v15 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
      {
        v20 = *(WTF **)(v15 + 8);
        if (v20)
          goto LABEL_30;
        goto LABEL_48;
      }
      if (v19 == 60)
      {
        v24 = WebCore::nameString(*(unsigned __int16 *)(v15 + 8));
      }
      else
      {
        if (v19 != 59)
          goto LABEL_48;
        v24 = WebCore::nameString(*(unsigned __int16 *)(v15 + 8));
      }
      v20 = (WTF *)*v24;
      if (!*v24)
      {
LABEL_48:
        if ((WTF::equal(0, *(const WTF::StringImpl **)(a4 + 8), v14) & 1) != 0)
          goto LABEL_32;
        goto LABEL_38;
      }
LABEL_30:
      *(_DWORD *)v20 += 2;
      v21 = WTF::equal(v20, *(const WTF::StringImpl **)(a4 + 8), v14);
      v23 = v21;
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v22);
        if ((v23 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        *(_DWORD *)v20 -= 2;
        if ((v21 & 1) != 0)
        {
LABEL_32:
          *(_QWORD *)a1 = v15;
          return;
        }
      }
LABEL_38:
      if (*(_DWORD *)v15 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v15, v22);
      else
        *(_DWORD *)v15 -= 2;
LABEL_41:
      *(_QWORD *)a1 = 0;
      return;
    case 0xC:
      WebCore::CSSPropertyParserHelpers::consumeTransformFunction((int **)this, *((WebCore::CSSParserTokenRange **)this + 2), a1);
      return;
    case 0xD:
      WebCore::CSSPropertyParserHelpers::consumeTransform((__int128 **)this, *((WebCore::CSSParserTokenRange **)this + 2), (int **)a1);
      return;
    default:
      goto LABEL_41;
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::isInitialValueForLonghand(WebCore::CSSPropertyID,WebCore::CSSValue const&)::$_0,WebCore::isInitialValueForLonghand(WebCore::CSSPropertyID,WebCore::CSSValue const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,WebCore::InitialNumericValue> &&>(uint64_t **a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  unsigned __int16 v4;

  v2 = **a1;
  v3 = *(unsigned __int16 *)(v2 + 4) | (*(unsigned __int8 *)(v2 + 6) << 16);
  if ((v3 & 0x3F800) != 0)
  {
    v4 = 0;
  }
  else
  {
    v4 = *(_WORD *)(v2 + 8);
    if ((v3 & 0x7F) != 0x50)
      v4 = 0;
  }
  return *a2 == v4;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::isInitialValueForLonghand(WebCore::CSSPropertyID,WebCore::CSSValue const&)::$_0,WebCore::isInitialValueForLonghand(WebCore::CSSPropertyID,WebCore::CSSValue const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,WebCore::InitialNumericValue> &&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  unsigned __int8 v4;
  int v5;
  int v6;
  double v7;
  _BYTE *v9;
  uint64_t v10;
  void *v11;
  double v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (((*(unsigned __int16 *)(v2 + 4) | (*(unsigned __int8 *)(v2 + 6) << 16)) & 0x3F800) != 0)
    return 0;
  v3 = *(double *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_WORD *)(v2 + 4) & 0x7F;
  v6 = 22;
  if ((v5 - 79) >= 2)
  {
    if (v5 == 77)
    {
      v6 = 20;
    }
    else if (v5 != 63)
    {
      v6 = *(_WORD *)(v2 + 4) & 0x7F;
      if (v6 == 73)
      {
        v9 = *(_BYTE **)(*(_QWORD *)(v2 + 8) + 8);
        if (v9[12] == 1)
        {
LABEL_12:
          v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 72))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8));
        }
        else
        {
          v6 = 1;
          switch(v9[12])
          {
            case 0:
              break;
            case 2:
              v6 = 3;
              break;
            case 3:
              v6 = 74;
              break;
            case 4:
              v6 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_12;
            default:
              v6 = 0;
              break;
          }
        }
      }
    }
  }
  if (v6 != v4)
    return 0;
  if ((*(_WORD *)(v2 + 4) & 0x7F) == 0x49)
  {
    v10 = *(_QWORD *)(v2 + 8);
    v13 = 0;
    v12 = WebCore::CSSCalcValue::doubleValue(v10, (uint64_t)&v13);
    if (v13)
      WTF::fastFree((WTF *)(v13 - 16), v11);
    v7 = v12;
  }
  else
  {
    v7 = *(double *)(v2 + 8);
  }
  return v7 == v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::initialValueTextForLonghand(WebCore::CSSPropertyID)::$_0,WebCore::initialValueTextForLonghand(WebCore::CSSPropertyID)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,WebCore::InitialNumericValue> &&>(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (v2 > 0x48D)
    return 0;
  else
    return (uint64_t)*(&WebCore::valueList + 2 * v2);
}

const char *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::initialValueTextForLonghand(WebCore::CSSPropertyID)::$_0,WebCore::initialValueTextForLonghand(WebCore::CSSPropertyID)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,WebCore::InitialNumericValue> &&>(uint64_t a1, uint64_t a2)
{
  double v2;
  unsigned int v3;

  v2 = *(double *)a2;
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v3 > 5)
  {
    if (v3 == 6)
    {
      if (v2 == 0.0)
        return "0px";
      if (v2 == 1.0)
        return "1px";
    }
    else if (v3 == 16 && v2 == 0.0)
    {
      return "0s";
    }
    return "";
  }
  if (v3 != 1)
  {
    if (v3 == 3)
    {
      if (v2 == 0.0)
        return "0%";
      if (v2 == 50.0)
        return "50%";
      if (v2 == 100.0)
        return "100%";
    }
    return "";
  }
  if (v2 == 0.0)
    return "0";
  if (v2 == 1.0)
    return "1";
  if (v2 == 2.0)
    return "2";
  if (v2 == 4.0)
    return "4";
  if (v2 != 8.0)
    return "";
  return "8";
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::initialValueIDForLonghand(WebCore::CSSPropertyID)::$_0,WebCore::initialValueIDForLonghand(WebCore::CSSPropertyID)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,WebCore::InitialNumericValue> &&>(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::initialValueIDForLonghand(WebCore::CSSPropertyID)::$_0,WebCore::initialValueIDForLonghand(WebCore::CSSPropertyID)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,WebCore::InitialNumericValue> &&>()
{
  return 0;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSValue&>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_12:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    *a2 += 2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return 1;
  }
  v9 = *(void **)result;
  if (v8 < 5)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 4;
    goto LABEL_11;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_11:
    memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw>::consume<>@<X0>(uint64_t result@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4;
  uint64_t v5;
  __int128 *v7;
  int v8;
  void *v9;
  double v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  char v18;
  char v19;
  uint64_t v20;
  double v21;
  int v22;
  __int16 v23;
  __int128 v24;
  char v25;

  v4 = a3;
  v5 = result;
  v22 = a3;
  v23 = WORD2(a3);
  v7 = *(__int128 **)result;
  if (*(_QWORD *)result >= *(_QWORD *)(result + 8))
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v8 = *(_DWORD *)v7 & 0x3F;
  if (v8 == 9)
  {
    result = (uint64_t)WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v24, a2);
    v12 = *(__int128 **)v5;
    v11 = *(__int128 **)(v5 + 8);
    if (*(_QWORD *)v5 >= (unint64_t)v11)
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v13 = (*(_DWORD *)v12 >> 11) & 0x7F;
    if (((v13 - 12) < 3 || (_DWORD)v13 == 64)
      && ((v10 = *((double *)v12 + 2), (v4 & 0xFF00) != 0x100) || v10 >= 0.0))
    {
      v14 = *(__int128 **)v5;
      if (*(__int128 **)v5 == v11)
      {
        v16 = 1;
        {
          v15 = v11;
        }
        else
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = *(__int128 **)v5;
        }
      }
      else
      {
        v15 = (__int128 *)((char *)v14 + 24);
        *(_QWORD *)v5 = (char *)v14 + 24;
      }
      while (1)
      {
        if (v15 < v11 || (v16 & 1) != 0)
        {
          if (v15 >= v11)
            v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v17 = *(_DWORD *)v15;
        }
        else
        {
          v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
          v16 = 1;
        }
        if ((v17 & 0x3F) != 0x10)
          break;
        v15 = (__int128 *)(*(_QWORD *)v5 + 24);
        *(_QWORD *)v5 = v15;
      }
      v18 = 0;
    }
    else
    {
      v13 = 0;
      v18 = 1;
    }
    if ((_QWORD)v24)
    {
      v20 = v13;
      v21 = v10;
      result = WTF::fastFree((WTF *)(v24 - 16), v9);
      v10 = v21;
      v13 = v20;
    }
    if ((v18 & 1) != 0)
    {
      v19 = 0;
LABEL_34:
      *(_BYTE *)a4 = 0;
    }
    else
    {
      *(_QWORD *)a4 = v13;
      *(double *)(a4 + 8) = v10;
      v19 = 1;
      *(_DWORD *)(a4 + 16) = 0;
    }
LABEL_19:
    *(_BYTE *)(a4 + 24) = v19;
  }
  else
  {
    switch(v8)
    {
      case 1:
        result = (uint64_t)WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>>,WebCore::AngleRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a4, (__int128 *)result, a2, &v22);
        break;
      case 7:
        result = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::AngleRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v24, (__int128 **)result, a2, (unsigned int *)&v22);
        v19 = v25;
        if (!v25)
          goto LABEL_34;
        *(_OWORD *)a4 = v24;
        *(_DWORD *)(a4 + 16) = 0;
        v19 = 1;
        goto LABEL_19;
      default:
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 24) = 0;
        break;
    }
  }
  return result;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>>,WebCore::AngleRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  int v7;
  uint64_t v8;
  void *v9;
  WebCore::CSSCalcValue *result;
  int v11;
  WebCore::CSSCalcValue *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CSSCalcValue *v15;
  __int128 v16;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v13, a3);
  v7 = *a4;
  v16 = *a2;
  v8 = v13;
  v13 = 0;
  v14 = v8;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v16, 5, &v14, v7, &v15);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), v9);
  result = v15;
  if (v15)
    *a2 = v16;
  if (!v13)
  {
    if (result)
      goto LABEL_7;
LABEL_11:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  v12 = result;
  WTF::fastFree((WTF *)(v13 - 16), v9);
  result = v12;
  if (!v12)
    goto LABEL_11;
LABEL_7:
  v11 = *(_DWORD *)result;
  *(_DWORD *)result += 2;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 24) = 1;
  if (!v11)
    return (WebCore::CSSCalcValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v9);
  *(_DWORD *)result = v11;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_8AngleRawEEENSB_15RawResolverBaseEJSE_EE7resolveERKNS_7variantIJSE_NSA_15UnevaluatedCalcISE_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SK_EEEEEEDcSS_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_8AngleRawEEENSB_15RawResolverBaseEJSE_EE7resolveERKNS_7variantIJSE_NSA_15UnevaluatedCalcISE_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SK_EEEEEEDcSS_DpT0_(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  double v10;
  char v11;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v6 = *v4;
  v7 = (unint64_t)*(unsigned __int8 *)(v4[1] + 1) << 8;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 1) + 72))(*((_QWORD *)v5 + 1));
  v10 = WebCore::CSSCalcValue::doubleValue((uint64_t)v5, v6);
  if (v7 == 256 && v10 < 0.0)
  {
    v11 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    *(_QWORD *)a3 = v8;
    *(double *)(a3 + 8) = v10;
    v11 = 1;
  }
  *(_BYTE *)(a3 + 16) = v11;
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v9);
  else
    *v5 -= 2;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_8AngleRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  int v3;
  double v4;
  int *v6;
  int *result;
  int v8;
  BOOL v9;
  char v11;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  if (v3 == 6)
  {
    if ((int)v4 > 0xFF || *(_QWORD *)&v4 != COERCE__INT64((double)(int)v4))
      goto LABEL_20;
    v6 = &WebCore::staticCSSValuePool[4 * (int)v4];
    v8 = v6[16];
    result = v6 + 16;
    *result = v8 + 2;
  }
  else
  {
    if (v3 == 1)
    {
      if ((int)v4 <= 0xFF && *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
      {
        result = &WebCore::staticCSSValuePool[4 * (int)v4 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v3 != 3
      || ((int)v4 <= 0xFF
        ? (v9 = *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
        : (v9 = 0),
          !v9))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v11 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v3 & 0x7F;
      *((_BYTE *)result + 6) = v11 & 0xFC;
      *((double *)result + 1) = v4;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * (int)v4 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_8AngleRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_10PercentRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_10PercentRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_8AngleRawENSA_10PercentRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EESM_NSP_ISM_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SQ_SM_SR_EEEEEEDcSZ_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  int v3;
  double v4;
  int *v6;
  int *result;
  int v8;
  BOOL v9;
  char v11;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  if (v3 == 6)
  {
    if ((int)v4 > 0xFF || *(_QWORD *)&v4 != COERCE__INT64((double)(int)v4))
      goto LABEL_20;
    v6 = &WebCore::staticCSSValuePool[4 * (int)v4];
    v8 = v6[16];
    result = v6 + 16;
    *result = v8 + 2;
  }
  else
  {
    if (v3 == 1)
    {
      if ((int)v4 <= 0xFF && *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
      {
        result = &WebCore::staticCSSValuePool[4 * (int)v4 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v3 != 3
      || ((int)v4 <= 0xFF
        ? (v9 = *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
        : (v9 = 0),
          !v9))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v11 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v3 & 0x7F;
      *((_BYTE *)result + 6) = v11 & 0xFC;
      *((double *)result + 1) = v4;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * (int)v4 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_8AngleRawENSA_10PercentRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EESM_NSP_ISM_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SQ_SM_SR_EEEEEEDcSZ_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_8AngleRawENSA_10PercentRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EESM_NSP_ISM_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SQ_SM_SR_EEEEEEDcSZ_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  double v3;
  unsigned int v4;
  int *result;
  char v7;

  v3 = *a1;
  v4 = (int)*a1;
  if (v4 <= 0xFF && *(_QWORD *)a1 == COERCE__INT64((double)v4))
  {
    result = &WebCore::staticCSSValuePool[4 * v4 + 1040];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v7 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 3;
    *((_BYTE *)result + 6) = v7 & 0xFC;
    *((double *)result + 1) = v3;
  }
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_8AngleRawENSA_10PercentRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EESM_NSP_ISM_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SQ_SM_SR_EEEEEEDcSZ_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeRadialGradient(_QWORD *a1, __int128 **this, uint64_t a3, char a4)
{
  __int128 *v7;
  int v8;
  int v9;
  __int128 *v10;
  __int128 *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  int v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  _DWORD *v20;
  int v21;
  WTF *v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  char v27;
  unsigned int v28;
  _DWORD *v29;
  unint64_t v31;
  __int128 *v32;
  char v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  _DWORD *v40;
  _DWORD *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF *v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (**v52)();
  char v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  _DWORD *v58;
  WTF *v59;
  WTF *v60;
  _QWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  int v66;
  int v69;
  uint64_t v70;
  _DWORD **v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  _DWORD **v75;
  _DWORD *v76;
  _DWORD *v77;
  uint64_t v78;
  int **v79;
  uint64_t v81;
  int v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  _BYTE v86[32];
  _BYTE v87[40];
  int v88;
  _BYTE v89[24];
  char v90;
  int v91;
  WTF *v92;
  _DWORD *v93;
  _BYTE v94[32];
  char v95;
  __int128 v96;
  char v97;
  WTF *v98;
  _DWORD *v99;
  unsigned int v100;
  char v101;
  _BYTE *v102;
  __int128 *v103;
  _BYTE *v104;
  __int128 *v105;
  _BYTE *v106;
  __int128 *v107;
  _QWORD v108[2];

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v43 = *((_DWORD *)v7 + 4);
  if (v43 < 0)
  {
    v43 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v43;
  }
  if ((unsigned __int16)v43 != 952)
  {
LABEL_3:
    v81 = 0;
    v83 = 0;
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(this, (WebCore::CSSParserTokenRange *)this);
    if ((v44 & 0xFF00000000) == 0)
    {
      *a1 = 0;
      return result;
    }
    v81 = result;
    v83 = v44 & 0xFFFFFFFFFFLL;
  }
  v8 = 0;
  v9 = 0;
  v82 = 0;
  LOBYTE(v98) = 0;
  v101 = 0;
  while (1)
  {
    v11 = *this;
    v10 = this[1];
    if (*this >= v10)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v11 & 0x3F) != 0)
    {
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *(unsigned __int8 *)(a3 + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v92);
      result = (uint64_t)v92;
      if (!v92)
        goto LABEL_114;
      if (v101)
      {
        *a1 = 0;
        v92 = 0;
        v14 = 1;
        goto LABEL_74;
      }
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, *(unsigned __int8 *)(a3 + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v102);
      v17 = (uint64_t)v102;
      v18 = v92;
      if (v102)
      {
        v92 = 0;
        v102 = 0;
        if (v101)
        {
          if (v100 != -1)
          {
            if (v100 == 2)
            {
              v19 = v98;
              v98 = v18;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v12);
                else
                  *(_DWORD *)v19 -= 2;
              }
              v20 = v99;
              v99 = (_DWORD *)v17;
              if (v20)
              {
                if (*v20 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v12);
                else
                  *v20 -= 2;
              }
              goto LABEL_68;
            }
            ((void (*)(_BYTE *, WTF **))off_1E339D7D8[v100])(v89, &v98);
          }
          v98 = v18;
          v99 = (_DWORD *)v17;
          v100 = 2;
        }
        else
        {
          v98 = v18;
          v99 = (_DWORD *)v17;
          v100 = 2;
          v101 = 1;
        }
LABEL_68:
        v14 = 0;
        ++v8;
        goto LABEL_69;
      }
      v21 = *((_WORD *)v92 + 2) & 0x7F;
      if ((v21 - 63) <= 0x11 && ((1 << (v21 - 63)) & 0x34001) != 0)
      {
LABEL_42:
        v92 = 0;
        if (!v101)
        {
          v14 = 0;
          v98 = v18;
          v100 = 1;
          v101 = 1;
          goto LABEL_69;
        }
        if (v100 != -1)
        {
          if (v100 == 1)
          {
            v23 = v98;
            v98 = v18;
            if (!v23)
            {
LABEL_46:
              v14 = 0;
              goto LABEL_69;
            }
            if (*(_DWORD *)v23 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v12);
              goto LABEL_46;
            }
            v14 = 0;
            *(_DWORD *)v23 -= 2;
LABEL_69:
            v29 = v102;
            v102 = 0;
            if (v29)
            {
              if (*v29 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v12);
              else
                *v29 -= 2;
            }
            result = (uint64_t)v92;
            v92 = 0;
            if (!result)
            {
LABEL_76:
              if (v14)
                goto LABEL_199;
              goto LABEL_77;
            }
LABEL_74:
            if (*(_DWORD *)result == 2)
            {
              result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v12);
              if (v14)
                goto LABEL_199;
              goto LABEL_77;
            }
            *(_DWORD *)result -= 2;
            goto LABEL_76;
          }
          ((void (*)(_BYTE *, WTF **))off_1E339D7D8[v100])(v89, &v98);
        }
        v14 = 0;
        v98 = v18;
        v100 = 1;
        goto LABEL_69;
      }
      if (v21 == 73)
      {
        v35 = *(unsigned __int8 **)(*((_QWORD *)v92 + 1) + 8);
        v36 = v35[12];
        if (v36 != 1)
        {
          if (v36 == 2)
            goto LABEL_35;
          if ((v36 - 5) > 3)
            goto LABEL_42;
        }
        v21 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v35 + 72))(v35);
      }
      if (v21 != 3)
      {
        v18 = v92;
        goto LABEL_42;
      }
LABEL_35:
      *a1 = 0;
      v14 = 1;
      goto LABEL_69;
    }
    v15 = *this;
    if (*this >= v10)
    {
      v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v15 & 0x3F) != 0)
      goto LABEL_12;
    result = *((unsigned int *)v15 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v15 + 1), *((unsigned int *)v15 + 1) | ((unint64_t)((*(_DWORD *)v15 >> 22) & 1) << 32));
      *((_DWORD *)v15 + 4) = result;
    }
    if ((unsigned __int16)result == 273)
      break;
    if ((unsigned __int16)result == 697)
    {
      v24 = 1;
      goto LABEL_83;
    }
    v10 = this[1];
LABEL_12:
    v16 = *this;
    if (*this >= v10)
    {
      v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v16 & 0x3F) == 0)
    {
      result = *((unsigned int *)v16 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v16 + 1), *((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32));
        *((_DWORD *)v16 + 4) = result;
      }
      if ((unsigned __int16)(result - 698) <= 3u)
      {
        if (v101)
        {
          *a1 = 0;
          goto LABEL_200;
        }
        LOBYTE(v98) = WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::extentMappings[4 * (unsigned __int16)(result - 698) + 2];
        v100 = 0;
        v101 = 1;
        v26 = *this;
        v25 = (unint64_t)this[1];
        if (*this == (__int128 *)v25)
        {
          v27 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v26 = *this;
          }
        }
        else
        {
          v26 = (__int128 *)((char *)v26 + 24);
          *this = v26;
        }
        while (1)
        {
          if ((unint64_t)v26 < v25 || (v27 & 1) != 0)
          {
            if ((unint64_t)v26 >= v25)
              v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v28 = *(_DWORD *)v26;
          }
          else
          {
            v28 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v28;
            v27 = 1;
          }
          if ((v28 & 0x3F) != 0x10)
            break;
          v26 = (__int128 *)((char *)*this + 24);
          *this = v26;
        }
      }
    }
    if (!v9)
    {
      if (!v101)
        goto LABEL_114;
      goto LABEL_77;
    }
LABEL_15:
    v9 = 1;
LABEL_77:
    if (v8++ >= 2)
    {
LABEL_114:
      LOBYTE(v96) = 0;
      v97 = 0;
      WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)721>((uint64_t)this, (int **)&v92);
      v38 = v92;
      v92 = 0;
      if (!v38)
      {
        v42 = v83;
        if (v9)
          goto LABEL_149;
        goto LABEL_147;
      }
      if (*(_DWORD *)v38 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, (WTF::StringImpl *)v37);
      else
        *(_DWORD *)v38 -= 2;
      result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)this, *(unsigned __int8 *)(a3 + 48), 1, 0, 0, (uint64_t)&v92);
      if (!v94[0])
        goto LABEL_189;
      v39 = v92;
      v40 = v93;
      v92 = 0;
      v93 = 0;
      if (v97)
      {
        v41 = (_DWORD *)v96;
        *(_QWORD *)&v96 = v39;
        if (v41)
        {
          if (*v41 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, (WTF::StringImpl *)v37);
          else
            *v41 -= 2;
        }
        v45 = (_DWORD *)*((_QWORD *)&v96 + 1);
        *((_QWORD *)&v96 + 1) = v40;
        v42 = v83;
        if (v45)
        {
          if (*v45 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, (WTF::StringImpl *)v37);
          else
            *v45 -= 2;
        }
      }
      else
      {
        *(_QWORD *)&v96 = v39;
        *((_QWORD *)&v96 + 1) = v40;
        v97 = 1;
        v42 = v83;
      }
      if (v94[0])
      {
        v46 = v93;
        v93 = 0;
        if (v46)
        {
          if (*v46 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, (WTF::StringImpl *)v37);
          else
            *v46 -= 2;
        }
        v47 = v92;
        v92 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 != 2)
          {
            *(_DWORD *)v47 -= 2;
            if (v9)
              goto LABEL_149;
            goto LABEL_147;
          }
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, (WTF::StringImpl *)v37);
        }
      }
      if (v9)
        goto LABEL_149;
LABEL_147:
      if (!v101 && !v97)
      {
LABEL_156:
        if ((v42 & 0xFF00000000) == 0)
        {
LABEL_158:
          result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthColorStopList((uint64_t)&v92, this, a3, 1);
          if (v95)
          {
            result = WebCore::CSSPropertyParserHelpers::computeGradientColorInterpolationMethod(v81, v42, (uint64_t *)v92, HIDWORD(v93));
            v49 = result;
            v50 = v37;
            v91 = 0;
            if (!v9)
            {
              if (v101)
              {
                v102 = v89;
                v103 = &v96;
                v104 = v89;
                v105 = &v96;
                v106 = v89;
                v107 = &v96;
                if (v100 != -1)
                {
                  v108[0] = &v102;
                  result = ((uint64_t (*)(_QWORD *, WTF **))off_1E339D870[v100])(v108, &v98);
                  goto LABEL_176;
                }
                goto LABEL_268;
              }
              if (!v97)
                goto LABEL_176;
              v54 = v96;
              v96 = 0uLL;
              *(_OWORD *)v89 = v54;
              v55 = 9;
LABEL_208:
              v91 = v55;
              v87[0] = 0;
              v88 = -1;
              goto LABEL_209;
            }
            if (v82)
            {
              if (v101)
              {
                v102 = v89;
                v103 = &v96;
                v104 = v89;
                v105 = &v96;
                v51 = v100;
                if (v100 != -1)
                {
                  v108[0] = &v102;
                  v52 = off_1E339D858;
                  goto LABEL_170;
                }
                goto LABEL_268;
              }
              v53 = 1;
              if (!v97)
              {
                v89[0] = 1;
LABEL_206:
                v89[8] = 0;
                v90 = 0;
                goto LABEL_207;
              }
            }
            else
            {
              if (v101)
              {
                v102 = v89;
                v103 = &v96;
                v104 = v89;
                v105 = &v96;
                v51 = v100;
                if (v100 != -1)
                {
                  v108[0] = &v102;
                  v52 = off_1E339D840;
LABEL_170:
                  result = ((uint64_t (*)(_QWORD *, WTF **))v52[v51])(v108, &v98);
                  if ((result & 1) == 0)
                  {
                    *a1 = 0;
LABEL_232:
                    if (v91 != -1)
                      result = ((uint64_t (*)(_BYTE **, _BYTE *))off_1E339D7F0[v91])(&v102, v89);
                    if (v95)
                    {
                      if (HIDWORD(v93))
                      {
                        v74 = 16 * HIDWORD(v93);
                        v75 = (_DWORD **)((char *)v92 + 8);
                        do
                        {
                          v76 = *v75;
                          *v75 = 0;
                          if (v76)
                          {
                            if (*v76 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v76, (WTF::StringImpl *)v37);
                            else
                              *v76 -= 2;
                          }
                          v77 = *(v75 - 1);
                          *(v75 - 1) = 0;
                          if (v77)
                          {
                            if (*v77 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v77, (WTF::StringImpl *)v37);
                            else
                              *v77 -= 2;
                          }
                          v75 += 2;
                          v74 -= 16;
                        }
                        while (v74);
                      }
                      result = (uint64_t)v92;
                      if (v94 != (_BYTE *)v92 && v92 != 0)
                      {
                        v92 = 0;
                        LODWORD(v93) = 0;
                        result = WTF::fastFree((WTF *)result, (void *)v37);
                      }
                    }
                    goto LABEL_190;
                  }
LABEL_176:
                  v55 = v91;
                  v87[0] = 0;
                  v88 = -1;
                  if (v91 == -1)
                  {
LABEL_210:
                    if (v95)
                    {
                      v84 = (WTF *)v86;
                      v85 = 2;
                      v59 = v92;
                      if (v92 == (WTF *)v94)
                      {
                        if (HIDWORD(v93))
                        {
                          v60 = (WTF *)((char *)v92 + 16 * HIDWORD(v93));
                          v61 = v86;
                          do
                          {
                            v62 = *(_DWORD **)v59;
                            *(_QWORD *)v59 = 0;
                            *v61 = v62;
                            v63 = *((_QWORD *)v59 + 1);
                            *((_QWORD *)v59 + 1) = 0;
                            v61[1] = v63;
                            v64 = (_DWORD *)*((_QWORD *)v59 + 1);
                            *((_QWORD *)v59 + 1) = 0;
                            if (v64)
                            {
                              if (*v64 == 2)
                                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, (WTF::StringImpl *)v37);
                              else
                                *v64 -= 2;
                            }
                            v65 = *(_DWORD **)v59;
                            *(_QWORD *)v59 = 0;
                            if (v65)
                            {
                              if (*v65 == 2)
                                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, (WTF::StringImpl *)v37);
                              else
                                *v65 -= 2;
                            }
                            v59 = (WTF *)((char *)v59 + 16);
                            v61 += 2;
                          }
                          while (v59 != v60);
                        }
                      }
                      else
                      {
                        v92 = (WTF *)v94;
                        v84 = v59;
                        v69 = (int)v93;
                        LODWORD(v93) = 2;
                        LODWORD(v85) = v69;
                      }
                      v66 = HIDWORD(v93);
                      HIDWORD(v93) = 0;
                      HIDWORD(v85) = v66;
                      WebCore::CSSRadialGradientValue::create((uint64_t)v87, a4, v49, v50, (uint64_t)&v84, (uint64_t *)&v102);
                      *a1 = v102;
                      v102 = 0;
                      if (HIDWORD(v85))
                      {
                        v70 = 16 * HIDWORD(v85);
                        v71 = (_DWORD **)((char *)v84 + 8);
                        do
                        {
                          v72 = *v71;
                          *v71 = 0;
                          if (v72)
                          {
                            if (*v72 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, (WTF::StringImpl *)v37);
                            else
                              *v72 -= 2;
                          }
                          v73 = *(v71 - 1);
                          *(v71 - 1) = 0;
                          if (v73)
                          {
                            if (*v73 == 2)
                              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v73, (WTF::StringImpl *)v37);
                            else
                              *v73 -= 2;
                          }
                          v71 += 2;
                          v70 -= 16;
                        }
                        while (v70);
                      }
                      result = (uint64_t)v84;
                      if (v86 == (_BYTE *)v84 || v84 == 0)
                        goto LABEL_229;
                    }
                    else
                    {
                      __break(1u);
                    }
                    v84 = 0;
                    LODWORD(v85) = 0;
                    result = WTF::fastFree((WTF *)result, (void *)v37);
LABEL_229:
                    if (v88 != -1)
                      result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E339D7F0[v88])(v108, v87);
                    v88 = -1;
                    goto LABEL_232;
                  }
LABEL_209:
                  result = ((uint64_t (*)(_QWORD *, _BYTE *, _BYTE *))off_1E339D888[v55])(v108, v87, v89);
                  v88 = v55;
                  goto LABEL_210;
                }
LABEL_268:
                v78 = std::__throw_bad_variant_access[abi:sn180100]();
                return WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)721>(v78, v79);
              }
              if (!v97)
              {
                v89[0] = 0;
                goto LABEL_206;
              }
              v53 = 0;
            }
            v89[0] = v53;
            v56 = v96;
            v96 = 0uLL;
            *(_OWORD *)&v89[8] = v56;
            v90 = 1;
LABEL_207:
            v55 = 1;
            goto LABEL_208;
          }
LABEL_189:
          *a1 = 0;
LABEL_190:
          if (v97)
          {
            v58 = (_DWORD *)*((_QWORD *)&v96 + 1);
            *((_QWORD *)&v96 + 1) = 0;
            if (v58)
            {
              if (*v58 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v58, (WTF::StringImpl *)v37);
              else
                *v58 -= 2;
            }
            result = v96;
            *(_QWORD *)&v96 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)v37);
              else
                *(_DWORD *)result -= 2;
            }
          }
          goto LABEL_199;
        }
LABEL_157:
        result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, (WebCore::CSSParserTokenRange *)v37);
        if ((result & 1) == 0)
          goto LABEL_189;
        goto LABEL_158;
      }
LABEL_149:
      if (!HIDWORD(v42))
      {
        v48 = *this;
        if (*this >= this[1])
        {
          v48 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        if ((*(_DWORD *)v48 & 0x3F) != 0)
        {
          v42 = v83;
        }
        else
        {
          v57 = *((_DWORD *)v48 + 4);
          if (v57 < 0)
          {
            v57 = WebCore::cssValueKeywordID(*((_QWORD *)v48 + 1), *((unsigned int *)v48 + 1) | ((unint64_t)((*(_DWORD *)v48 >> 22) & 1) << 32));
            *((_DWORD *)v48 + 4) = v57;
          }
          v42 = v83;
          if ((unsigned __int16)v57 == 952)
          {
            result = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod(this, (WebCore::CSSParserTokenRange *)v37);
            if ((v37 & 0xFF00000000) == 0)
              goto LABEL_189;
            v81 = result;
            v42 = v37 & 0xFFFFFFFFFFLL;
          }
        }
      }
      if (v9 || v101 || v97)
        goto LABEL_157;
      goto LABEL_156;
    }
  }
  v24 = 0;
LABEL_83:
  if (!v9)
  {
    v32 = *this;
    v31 = (unint64_t)this[1];
    if (*this == (__int128 *)v31)
    {
      v33 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v32 = *this;
      }
    }
    else
    {
      v32 = (__int128 *)((char *)v32 + 24);
      *this = v32;
    }
    v82 = *((unsigned __int8 *)&WebCore::CSSPropertyParserHelpers::consumePrefixedRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::shapeMappings
          + 4 * v24
          + 2);
    while (1)
    {
      if ((unint64_t)v32 < v31 || (v33 & 1) != 0)
      {
        if ((unint64_t)v32 >= v31)
          v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v34 = *(_DWORD *)v32;
      }
      else
      {
        v34 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v34;
        v33 = 1;
      }
      if ((v34 & 0x3F) != 0x10)
        break;
      v32 = (__int128 *)((char *)*this + 24);
      *this = v32;
    }
    goto LABEL_15;
  }
  *a1 = 0;
LABEL_199:
  if (!v101)
    return result;
LABEL_200:
  if (v100 != -1)
    return ((uint64_t (*)(WTF **, WTF **))off_1E339D7D8[v100])(&v92, &v98);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)721>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 721)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)v2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)v2 + 24);
      *(_QWORD *)v2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958BF398);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *a2 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::computeGradientColorInterpolationMethod(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (!a4)
  {
LABEL_7:
    if ((a2 & 0xFF00000000) == 0)
      return 0x600000000;
    return result;
  }
  v4 = 16 * a4;
  while (1)
  {
    v5 = *a3;
    if (!*a3)
      goto LABEL_6;
    v6 = *(_WORD *)(v5 + 4) & 0x7F;
    if (v6 != 24)
      break;
    if ((*(_BYTE *)(v5 + 14) & 8) != 0)
      goto LABEL_11;
LABEL_6:
    a3 += 2;
    v4 -= 16;
    if (!v4)
      goto LABEL_7;
  }
  if (v6 == 80)
    goto LABEL_6;
LABEL_11:
  if ((a2 & 0xFF00000000) == 0)
    return 0x500000000;
  return result;
}

WTF *WebCore::CSSRadialGradientValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF *result;
  int v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[32];

  v12 = WTF::fastCompactMalloc((WTF *)0x88);
  v31 = (WTF *)v33;
  v32 = 2;
  v13 = *(WTF **)a5;
  if (*(_QWORD *)a5 == a5 + 16)
  {
    v14 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v14)
    {
      v15 = (WTF *)((char *)v13 + 16 * v14);
      v16 = v33;
      do
      {
        v17 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        *v16 = v17;
        v18 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        v16[1] = v18;
        v19 = (_DWORD *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
          else
            *v19 -= 2;
        }
        v20 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v11);
          else
            *v20 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 16);
        v16 += 2;
      }
      while (v13 != v15);
    }
  }
  else
  {
    *(_QWORD *)a5 = a5 + 16;
    v31 = v13;
    v25 = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = 2;
    LODWORD(v32) = v25;
  }
  v21 = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = 0;
  HIDWORD(v32) = v21;
  WebCore::CSSRadialGradientValue::CSSRadialGradientValue(v12, a1, a2, a3, a4, (uint64_t)&v31);
  *a6 = v12;
  if (HIDWORD(v32))
  {
    v26 = 16 * HIDWORD(v32);
    v27 = (_DWORD **)((char *)v31 + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v22);
        else
          *v28 -= 2;
      }
      v29 = *(v27 - 1);
      *(v27 - 1) = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v22);
        else
          *v29 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  result = v31;
  if (v33 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (WTF *)WTF::fastFree(result, v22);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22CSSRadialGradientValue13ExtentKeywordEN3WTF3RefINS8_17CSSPrimitiveValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENS_4pairISI_SI_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSA_SI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22CSSRadialGradientValue13ExtentKeywordEN3WTF3RefINS8_17CSSPrimitiveValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENS_4pairISI_SI_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSA_SI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = (_DWORD *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = 16 * v4 - 16 * (_QWORD)a2;
    v6 = (_DWORD **)(*(_QWORD *)result + 16 * (_QWORD)a2 + 8);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*v7 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
        else
          *v7 -= 2;
      }
      result = (uint64_t)*(v6 - 1);
      *(v6 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v5 = *(_DWORD **)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*v5 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
        else
          *v5 -= 2;
      }
      v9 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      result = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v9;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    v6 = *(_DWORD **)(result + 8);
    *(_QWORD *)(v3 + 8) = 0;
    if (v6)
    {
      if (*v6 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
      else
        *v6 -= 2;
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v7;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(result + 8) = v8;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_1,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v13;
  _DWORD *v14;
  char v15;
  char v16;

  v3 = (uint64_t *)*a1;
  v4 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(*a1 + 8);
  LOBYTE(v13) = 0;
  v15 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    v7 = *(_DWORD **)v5;
    v2 = *(_DWORD **)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v13 = v7;
    v14 = v2;
    v8 = 1;
    v15 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *v3;
  v10 = *(unsigned int *)(*v3 + 40);
  if ((_DWORD)v10 != -1)
  {
    if ((_DWORD)v10 == 6)
    {
      *(_BYTE *)v9 = v4;
      std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(v9 + 8, (WTF::StringImpl *)&v13);
      if (!v15)
        return 1;
      goto LABEL_12;
    }
    ((void (*)(char *, uint64_t))off_1E339D7F0[v10])(&v16, v9);
  }
  *(_BYTE *)v9 = v4;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  if (v6)
  {
    v11 = v13;
    v13 = 0;
    v14 = 0;
    *(_QWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v9 + 16) = v2;
    *(_BYTE *)(v9 + 24) = 1;
  }
  *(_DWORD *)(v9 + 40) = 6;
  if (v8)
  {
LABEL_12:
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, a2);
      else
        *v14 -= 2;
    }
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
      else
        *v13 -= 2;
    }
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_1,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v14;
  _DWORD *v15;
  char v16;
  char v17;

  v3 = *a1;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(_QWORD *)(v3 + 24);
  LOBYTE(v14) = 0;
  v16 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    v7 = *(_DWORD **)v5;
    v2 = *(_DWORD **)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v14 = v7;
    v15 = v2;
    v8 = 1;
    v16 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(unsigned int *)(v9 + 40);
  if ((_DWORD)v10 != -1)
  {
    if ((_DWORD)v10 == 5)
    {
      v11 = *(_DWORD **)v9;
      *(_QWORD *)v9 = v4;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
        else
          *v11 -= 2;
      }
      std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(v9 + 8, (WTF::StringImpl *)&v14);
      if (!v16)
        return 1;
LABEL_13:
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
        else
          *v15 -= 2;
      }
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, a2);
        else
          *v14 -= 2;
      }
      return 1;
    }
    ((void (*)(char *, uint64_t))off_1E339D7F0[v10])(&v17, v9);
  }
  *(_QWORD *)v9 = v4;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  if (v6)
  {
    v12 = v14;
    v14 = 0;
    v15 = 0;
    *(_QWORD *)(v9 + 8) = v12;
    *(_QWORD *)(v9 + 16) = v2;
    *(_BYTE *)(v9 + 24) = 1;
  }
  *(_DWORD *)(v9 + 40) = 5;
  if (v8)
    goto LABEL_13;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_1,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_3,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_4,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v13;
  _DWORD *v14;
  char v15;
  char v16;

  v3 = (uint64_t *)*a1;
  v4 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(*a1 + 8);
  LOBYTE(v13) = 0;
  v15 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    v7 = *(_DWORD **)v5;
    v2 = *(_DWORD **)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v13 = v7;
    v14 = v2;
    v8 = 1;
    v15 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *v3;
  v10 = *(unsigned int *)(*v3 + 40);
  if ((_DWORD)v10 != -1)
  {
    if ((_DWORD)v10 == 8)
    {
      *(_BYTE *)v9 = v4;
      std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(v9 + 8, (WTF::StringImpl *)&v13);
      if (!v15)
        return 1;
      goto LABEL_12;
    }
    ((void (*)(char *, uint64_t))off_1E339D7F0[v10])(&v16, v9);
  }
  *(_BYTE *)v9 = v4;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  if (v6)
  {
    v11 = v13;
    v13 = 0;
    v14 = 0;
    *(_QWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v9 + 16) = v2;
    *(_BYTE *)(v9 + 24) = 1;
  }
  *(_DWORD *)(v9 + 40) = 8;
  if (v8)
  {
LABEL_12:
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, a2);
      else
        *v14 -= 2;
    }
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
      else
        *v13 -= 2;
    }
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_3,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_4,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_3,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_4,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v16;
  _DWORD *v17;
  char v18;
  char v19;

  v3 = *a1;
  v5 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v6 = *(_QWORD *)(v3 + 24);
  LOBYTE(v16) = 0;
  v18 = 0;
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (*(_BYTE *)(v6 + 16))
  {
    v8 = *(_DWORD **)v6;
    v2 = *(_DWORD **)(v6 + 8);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    v16 = v8;
    v17 = v2;
    v9 = 1;
    v18 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(v3 + 16);
  v11 = *(unsigned int *)(v10 + 40);
  if ((_DWORD)v11 != -1)
  {
    if ((_DWORD)v11 == 7)
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = v5;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
        else
          *v12 -= 2;
      }
      v13 = *(_DWORD **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v4;
      if (v13)
      {
        if (*v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
        else
          *v13 -= 2;
      }
      std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(v10 + 16, (WTF::StringImpl *)&v16);
      if (!v18)
        return 1;
LABEL_14:
      if (v17)
      {
        if (*v17 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, a2);
        else
          *v17 -= 2;
      }
      if (v16)
      {
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, a2);
        else
          *v16 -= 2;
      }
      return 1;
    }
    ((void (*)(char *, uint64_t))off_1E339D7F0[v11])(&v19, v10);
  }
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v4;
  *(_BYTE *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 32) = 0;
  if (v7)
  {
    v14 = v16;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 24) = v2;
    *(_BYTE *)(v10 + 32) = 1;
  }
  *(_DWORD *)(v10 + 40) = 7;
  if (v9)
    goto LABEL_14;
  return 1;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_6,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_7,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_8>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>(_DWORD *result, WTF::StringImpl *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  char v14;
  char v15;

  v3 = *(uint64_t **)result;
  v4 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(*(_QWORD *)result + 8);
  LOBYTE(v12) = 0;
  v14 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    v7 = *(_DWORD **)v5;
    v2 = *(_DWORD **)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v12 = v7;
    v13 = v2;
    v8 = 1;
    v14 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *v3;
  v10 = *(unsigned int *)(*v3 + 40);
  if ((_DWORD)v10 != -1)
  {
    if ((_DWORD)v10 == 2)
    {
      *(_BYTE *)v9 = v4;
      result = (_DWORD *)std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(v9 + 8, (WTF::StringImpl *)&v12);
      if (!v14)
        return result;
      goto LABEL_12;
    }
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E339D7F0[v10])(&v15, v9);
  }
  *(_BYTE *)v9 = v4;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  if (v6)
  {
    v11 = v12;
    v12 = 0;
    v13 = 0;
    *(_QWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v9 + 16) = v2;
    *(_BYTE *)(v9 + 24) = 1;
  }
  *(_DWORD *)(v9 + 40) = 2;
  if (v8)
  {
LABEL_12:
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
      else
        *v13 -= 2;
    }
    result = v12;
    if (v12)
    {
      if (*v12 == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
      else
        *v12 -= 2;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_6,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_7,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_8>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v14;
  _DWORD *v15;
  char v16;
  char v17;

  v3 = *a1;
  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(_QWORD *)(v3 + 24);
  LOBYTE(v14) = 0;
  v16 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    v7 = *(_DWORD **)v5;
    v2 = *(_DWORD **)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v14 = v7;
    v15 = v2;
    v8 = 1;
    v16 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v3 + 16);
  v10 = *(unsigned int *)(v9 + 40);
  if ((_DWORD)v10 != -1)
  {
    if ((_DWORD)v10 == 3)
    {
      v11 = *(_DWORD **)v9;
      *(_QWORD *)v9 = v4;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
        else
          *v11 -= 2;
      }
      std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(v9 + 8, (WTF::StringImpl *)&v14);
      if (!v16)
        return 0;
LABEL_13:
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, a2);
        else
          *v15 -= 2;
      }
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, a2);
        else
          *v14 -= 2;
      }
      return 0;
    }
    ((void (*)(char *, uint64_t))off_1E339D7F0[v10])(&v17, v9);
  }
  *(_QWORD *)v9 = v4;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  if (v6)
  {
    v12 = v14;
    v14 = 0;
    v15 = 0;
    *(_QWORD *)(v9 + 8) = v12;
    *(_QWORD *)(v9 + 16) = v2;
    *(_BYTE *)(v9 + 24) = 1;
  }
  *(_DWORD *)(v9 + 40) = 3;
  if (v8)
    goto LABEL_13;
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_6,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_7,WebCore::CSSPropertyParserHelpers::consumeRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_8>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSRadialGradientValue::ExtentKeyword,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::pair<WTF::DefaultRefDerefTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &&>(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v16;
  _DWORD *v17;
  char v18;
  char v19;

  v3 = *a1;
  v5 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v6 = *(_QWORD *)(v3 + 40);
  LOBYTE(v16) = 0;
  v18 = 0;
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (*(_BYTE *)(v6 + 16))
  {
    v8 = *(_DWORD **)v6;
    v2 = *(_DWORD **)(v6 + 8);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    v16 = v8;
    v17 = v2;
    v9 = 1;
    v18 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(unsigned int *)(v10 + 40);
  if ((_DWORD)v11 != -1)
  {
    if ((_DWORD)v11 == 4)
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = v5;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
        else
          *v12 -= 2;
      }
      v13 = *(_DWORD **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v4;
      if (v13)
      {
        if (*v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, a2);
        else
          *v13 -= 2;
      }
      std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>(v10 + 16, (WTF::StringImpl *)&v16);
      if (!v18)
        return 0;
LABEL_14:
      if (v17)
      {
        if (*v17 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, a2);
        else
          *v17 -= 2;
      }
      if (v16)
      {
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, a2);
        else
          *v16 -= 2;
      }
      return 0;
    }
    ((void (*)(char *, uint64_t))off_1E339D7F0[v11])(&v19, v10);
  }
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v4;
  *(_BYTE *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 32) = 0;
  if (v7)
  {
    v14 = v16;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 24) = v2;
    *(_BYTE *)(v10 + 32) = 1;
  }
  *(_DWORD *)(v10 + 40) = 4;
  if (v9)
    goto LABEL_14;
  return 0;
}

uint64_t WebCore::CSSRadialGradientValue::CSSRadialGradientValue(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  int v25;
  char v26;

  *(_DWORD *)a1 = 2;
  v12 = *(_BYTE *)(a1 + 6);
  *(_WORD *)(a1 + 4) = 20480;
  *(_BYTE *)(a1 + 6) = v12 & 0xFC;
  *(_BYTE *)(a1 + 8) = 0;
  v13 = (WTF::StringImpl *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = -1;
  v14 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *, WTF::StringImpl *))off_1E339D888[v14])(&v26, v13);
    *(_DWORD *)(a1 + 48) = v14;
  }
  v15 = (_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 2;
  v16 = *(_QWORD **)a6;
  if (*(_QWORD *)a6 == a6 + 16)
  {
    v17 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v17)
    {
      v18 = &v16[2 * v17];
      do
      {
        v19 = (_DWORD *)*v16;
        *v16 = 0;
        *v15 = v19;
        v20 = v16[1];
        v16[1] = 0;
        v15[1] = v20;
        v21 = (_DWORD *)v16[1];
        v16[1] = 0;
        if (v21)
        {
          if (*v21 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v13);
          else
            *v21 -= 2;
        }
        v22 = (_DWORD *)*v16;
        *v16 = 0;
        if (v22)
        {
          if (*v22 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v13);
          else
            *v22 -= 2;
        }
        v16 += 2;
        v15 += 2;
      }
      while (v16 != v18);
    }
  }
  else
  {
    *(_QWORD *)a6 = a6 + 16;
    *(_QWORD *)(a1 + 56) = v16;
    v25 = *(_DWORD *)(a6 + 8);
    *(_DWORD *)(a6 + 8) = 2;
    *(_DWORD *)(a1 + 64) = v25;
  }
  v23 = *(_DWORD *)(a6 + 12);
  *(_DWORD *)(a6 + 12) = 0;
  *(_DWORD *)(a1 + 68) = v23;
  *(_BYTE *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 108) = a4;
  *(_QWORD *)(a1 + 116) = a5;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    v3 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a2 + 8) = v3;
    v4 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    v3 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a2 + 8) = v3;
    v4 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v4 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v5 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (*((_BYTE *)a3 + 32))
  {
    v5 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(a2 + 16) = v5;
    v6 = a3[3];
    a3[3] = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_BYTE *)(a2 + 32) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v4 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(a2 + 8) = v4;
    v5 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    v3 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a2 + 8) = v3;
    v4 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  if (*((_BYTE *)a3 + 32))
  {
    v5 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(a2 + 16) = v5;
    v6 = a3[3];
    a3[3] = 0;
    *(_QWORD *)(a2 + 24) = v6;
    *(_BYTE *)(a2 + 32) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    v3 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a2 + 8) = v3;
    v4 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumePrefixedLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumePrefixedLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D8E8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E339D8E8[v5])(&v7, v4);
  }
  v4[1].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[0] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D8E8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D8E8[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D8E8[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D8E8[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Vertical> [2]> const>(uint64_t a1)
{
  __int128 *v2;
  int v3;
  int v4;
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  __int128 *v10;
  char v11;
  unsigned __int8 *v12;
  unsigned int v13;

  v2 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v2 & 0x3F) != 0)
    goto LABEL_3;
  v6 = *((_DWORD *)v2 + 4);
  if (v6 < 0)
  {
    v6 = WebCore::cssValueKeywordID(*((_QWORD *)v2 + 1), *((unsigned int *)v2 + 1) | ((unint64_t)((*(_DWORD *)v2 >> 22) & 1) << 32));
    *((_DWORD *)v2 + 4) = v6;
  }
  if ((unsigned __int16)v6 == 254)
  {
    v7 = 0;
  }
  else
  {
    if ((unsigned __int16)v6 != 255)
    {
LABEL_3:
      v3 = 0;
      v4 = 0;
      return v3 | (v4 << 8);
    }
    v7 = 1;
  }
  v8 = (char *)&WebCore::CSSPropertyParserHelpers::consumeLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::verticalMappings
     + 4 * v7;
  v10 = *(__int128 **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v9)
  {
    v11 = 1;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v10 = *(__int128 **)a1;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v10 + 24);
    *(_QWORD *)a1 = v10;
  }
  v12 = (unsigned __int8 *)(v8 + 2);
  while (1)
  {
    if ((unint64_t)v10 < v9 || (v11 & 1) != 0)
    {
      if ((unint64_t)v10 >= v9)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v13 = *(_DWORD *)v10;
    }
    else
    {
      v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
      v11 = 1;
    }
    if ((v13 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v10;
  }
  v3 = *v12;
  v4 = 1;
  return v3 | (v4 << 8);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Horizontal> [2]> const>(uint64_t a1)
{
  __int128 *v2;
  int v3;
  int v4;
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  __int128 *v10;
  char v11;
  unsigned __int8 *v12;
  unsigned int v13;

  v2 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v2 & 0x3F) != 0)
    goto LABEL_3;
  v6 = *((_DWORD *)v2 + 4);
  if (v6 < 0)
  {
    v6 = WebCore::cssValueKeywordID(*((_QWORD *)v2 + 1), *((unsigned int *)v2 + 1) | ((unint64_t)((*(_DWORD *)v2 >> 22) & 1) << 32));
    *((_DWORD *)v2 + 4) = v6;
  }
  if ((unsigned __int16)v6 == 258)
  {
    v7 = 0;
  }
  else
  {
    if ((unsigned __int16)v6 != 259)
    {
LABEL_3:
      v3 = 0;
      v4 = 0;
      return v3 | (v4 << 8);
    }
    v7 = 1;
  }
  v8 = (char *)&WebCore::CSSPropertyParserHelpers::consumeLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::horizontalMappings
     + 4 * v7;
  v10 = *(__int128 **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v9)
  {
    v11 = 1;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v10 = *(__int128 **)a1;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v10 + 24);
    *(_QWORD *)a1 = v10;
  }
  v12 = (unsigned __int8 *)(v8 + 2);
  while (1)
  {
    if ((unint64_t)v10 < v9 || (v11 & 1) != 0)
    {
      if ((unint64_t)v10 >= v9)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v13 = *(_DWORD *)v10;
    }
    else
    {
      v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
      v11 = 1;
    }
    if ((v13 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v10;
  }
  v3 = *v12;
  v4 = 1;
  return v3 | (v4 << 8);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

uint64_t std::optional<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>>>::operator=[abi:sn180100]<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned int *)(a1 + 16);
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E339D9B8[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 16) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E339D9E8[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E339DA18[v5])(&v9, a1, a2);
    *(_DWORD *)(a1 + 16) = v5;
  }
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_3::operator()(uint64_t result, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  char v6;
  __int128 *v7;
  unsigned int v8;
  BOOL v9;
  char v10;
  __int128 *v11;
  unint64_t v12;
  __int128 *v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  __int128 *v17;
  char v18;
  unsigned int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unint64_t v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  unsigned __int16 v26;
  int v27;
  unint64_t v28;
  __int128 *v29;
  char v30;
  unsigned int v31;
  unsigned __int16 v32;
  __int16 v33;
  _WORD v34[8];
  int v35;
  char v36;

  v3 = result;
  v5 = *a2;
  v4 = (unint64_t)a2[1];
  if (*a2 == (__int128 *)v4)
  {
    v6 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v5 = *a2;
    }
  }
  else
  {
    v5 = (__int128 *)((char *)v5 + 24);
    *a2 = v5;
  }
  while (1)
  {
    if ((unint64_t)v5 < v4 || (v6 & 1) != 0)
    {
      v7 = (unint64_t)v5 >= v4 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v5;
      v8 = *(_DWORD *)v7;
    }
    else
    {
      v8 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
      v6 = 1;
      v5 = *a2;
    }
    if ((v8 & 0x3F) != 0x10)
      break;
    v5 = (__int128 *)((char *)v5 + 24);
    *a2 = v5;
  }
  v9 = (unint64_t)v5 >= v4;
  v10 = ((unint64_t)v5 < v4) | v6;
  if (v9)
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v11 = v5;
  if ((v10 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  if ((*(_DWORD *)v11 & 0x3F) != 0)
  {
LABEL_18:
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 24) = 0;
  }
  else
  {
    result = *((unsigned int *)v11 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
      *((_DWORD *)v11 + 4) = result;
    }
    switch((__int16)result)
    {
      case 254:
        v13 = *a2;
        v12 = (unint64_t)a2[1];
        if (*a2 == (__int128 *)v12)
        {
          v14 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v13 = *a2;
          }
        }
        else
        {
          v13 = (__int128 *)((char *)v13 + 24);
          *a2 = v13;
        }
        while (1)
        {
          if ((unint64_t)v13 < v12 || (v14 & 1) != 0)
          {
            if ((unint64_t)v13 >= v12)
              v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v15 = *(_DWORD *)v13;
          }
          else
          {
            v15 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
            v14 = 1;
          }
          if ((v15 & 0x3F) != 0x10)
            break;
          v13 = (__int128 *)((char *)*a2 + 24);
          *a2 = v13;
        }
        v21 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Horizontal> [2]> const>((uint64_t)a2);
        if (v21 < 0x100u)
        {
          LOBYTE(v34[0]) = 0;
          goto LABEL_59;
        }
        v33 = v21;
        goto LABEL_77;
      case 255:
        v23 = *a2;
        v22 = (unint64_t)a2[1];
        if (*a2 == (__int128 *)v22)
        {
          v24 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v23 = *a2;
          }
        }
        else
        {
          v23 = (__int128 *)((char *)v23 + 24);
          *a2 = v23;
        }
        while (1)
        {
          if ((unint64_t)v23 < v22 || (v24 & 1) != 0)
          {
            if ((unint64_t)v23 >= v22)
              v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v25 = *(_DWORD *)v23;
          }
          else
          {
            v25 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
            v24 = 1;
          }
          if ((v25 & 0x3F) != 0x10)
            break;
          v23 = (__int128 *)((char *)*a2 + 24);
          *a2 = v23;
        }
        v26 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Horizontal> [2]> const>((uint64_t)a2);
        if (v26 >= 0x100u)
        {
          v33 = v26 | 0x100;
          goto LABEL_77;
        }
        LOBYTE(v34[0]) = 1;
LABEL_59:
        v27 = 4;
        goto LABEL_78;
      case 258:
        v17 = *a2;
        v16 = (unint64_t)a2[1];
        if (*a2 == (__int128 *)v16)
        {
          v18 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v17 = *a2;
          }
        }
        else
        {
          v17 = (__int128 *)((char *)v17 + 24);
          *a2 = v17;
        }
        while (1)
        {
          if ((unint64_t)v17 < v16 || (v18 & 1) != 0)
          {
            if ((unint64_t)v17 >= v16)
              v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v19 = *(_DWORD *)v17;
          }
          else
          {
            v19 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
            v18 = 1;
          }
          if ((v19 & 0x3F) != 0x10)
            break;
          v17 = (__int128 *)((char *)*a2 + 24);
          *a2 = v17;
        }
        v20 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Vertical> [2]> const>((uint64_t)a2);
        if (v20 < 0x100u)
        {
          LOBYTE(v34[0]) = 0;
          goto LABEL_72;
        }
        v33 = v20 << 8;
        goto LABEL_77;
      case 259:
        v29 = *a2;
        v28 = (unint64_t)a2[1];
        if (*a2 == (__int128 *)v28)
        {
          v30 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v29 = *a2;
          }
        }
        else
        {
          v29 = (__int128 *)((char *)v29 + 24);
          *a2 = v29;
        }
        while (1)
        {
          if ((unint64_t)v29 < v28 || (v30 & 1) != 0)
          {
            if ((unint64_t)v29 >= v28)
              v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v31 = *(_DWORD *)v29;
          }
          else
          {
            v31 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v31;
            v30 = 1;
          }
          if ((v31 & 0x3F) != 0x10)
            break;
          v29 = (__int128 *)((char *)*a2 + 24);
          *a2 = v29;
        }
        v32 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Vertical> [2]> const>((uint64_t)a2);
        if (v32 >= 0x100u)
        {
          v33 = (v32 << 8) | 1;
LABEL_77:
          v34[0] = v33;
          v27 = 5;
        }
        else
        {
          LOBYTE(v34[0]) = 1;
LABEL_72:
          v27 = 3;
        }
LABEL_78:
        v35 = v27;
        *(_BYTE *)v3 = 0;
        *(_DWORD *)(v3 + 16) = -1;
        result = ((uint64_t (*)(char *, uint64_t, _WORD *))off_1E339DA18[v27])(&v36, v3, v34);
        *(_DWORD *)(v3 + 16) = v27;
        *(_BYTE *)(v3 + 24) = 1;
        if (v35 != -1)
          result = ((uint64_t (*)(char *, _WORD *))off_1E339D9B8[v35])(&v36, v34);
        break;
      default:
        goto LABEL_18;
    }
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D9B8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E339D9B8[v5])(&v7, v4);
  }
  v4[1].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[0] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D9B8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D9B8[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D9B8[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _WORD *a2, _WORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E339D9B8[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_SA_SC_SE_SF_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

int *WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientPoint(WebCore::CSSPropertyParserHelpers *this, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  int *result;
  int *v7;
  int v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  __int128 *v13;
  int *v14;
  WTF::StringImpl *v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  unint64_t v19;
  __int128 *v20;
  int v21;
  __int128 *v22;
  char v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  __int128 *v27;
  __int128 *v28;
  char v29;
  unsigned int v30;
  int v31;
  __int128 *v32;
  __int128 *v33;
  char v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  __int128 *v38;
  __int128 *v39;
  char v40;
  unsigned int v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  int *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  uint64_t v53;
  int *v54;
  int *v55;
  int *v56;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) == 0)
  {
    v9 = *a2;
    if (*a2 >= v4)
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v9 = *a2;
      }
    }
    else
    {
      v10 = *a2;
    }
    if ((*(_BYTE *)v10 & 0x3F) == 0)
    {
      if (v9 >= v4)
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) != 0)
      {
        v9 = *a2;
      }
      else
      {
        v21 = *((_DWORD *)v9 + 4);
        if (v21 < 0)
        {
          v21 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
          *((_DWORD *)v9 + 4) = v21;
        }
        v9 = *a2;
        v4 = a2[1];
        if ((unsigned __int16)v21 == 258)
        {
          if (v9 == v4)
          {
            v23 = 1;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            v22 = *a2;
            v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v22 = (__int128 *)((char *)v9 + 24);
            *a2 = (__int128 *)((char *)v9 + 24);
          }
          while (1)
          {
            if (v22 < v4 || (v23 & 1) != 0)
            {
              if (v22 >= v4)
                v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v24 = *(_DWORD *)v22;
            }
            else
            {
              v24 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v24;
              v23 = 1;
            }
            if ((v24 & 0x3F) != 0x10)
              break;
            v22 = (__int128 *)((char *)*a2 + 24);
            *a2 = v22;
          }
          if ((*(_DWORD *)v9 & 0x3F) != 0)
          {
            LOWORD(v42) = 0;
          }
          else
          {
            v42 = *((_DWORD *)v9 + 4);
            if (v42 < 0)
            {
              v42 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
              *((_DWORD *)v9 + 4) = v42;
            }
            if ((unsigned __int16)v42 >= 0x48Eu)
            {
              __break(0xC471u);
              JUMPOUT(0x1958C1F44);
            }
          }
          v43 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v42 + 3088];
          v44 = *v43;
          *v43 += 2;
          if (v44)
            *v43 = v44;
          else
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, (WTF::StringImpl *)a2);
          v52 = &WebCore::staticCSSValuePool[1040];
          dword_1ECE89BE8 += 2;
          goto LABEL_153;
        }
      }
    }
    if (v9 >= v4)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_BYTE *)v9 & 0x3F) != 0)
      goto LABEL_20;
    v11 = *a2;
    if (*a2 >= v4)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
      goto LABEL_20;
    v25 = *((_DWORD *)v11 + 4);
    if (v25 < 0)
    {
      v25 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
      *((_DWORD *)v11 + 4) = v25;
    }
    if ((unsigned __int16)v25 != 259)
    {
LABEL_20:
      WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)260>((uint64_t)&v56, (uint64_t)a2);
      result = v56;
      if (!v56)
        goto LABEL_9;
      if (*v56 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, (WTF::StringImpl *)a2);
      else
        *v56 -= 2;
      dword_1ECE89F08 += 2;
      v55 = &WebCore::staticCSSValuePool[1240];
      goto LABEL_27;
    }
    v27 = *a2;
    v26 = (unint64_t)a2[1];
    if (*a2 == (__int128 *)v26)
    {
      v29 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v28 = *a2;
      v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v28 = (__int128 *)((char *)v27 + 24);
      *a2 = (__int128 *)((char *)v27 + 24);
    }
    while (1)
    {
      if ((unint64_t)v28 < v26 || (v29 & 1) != 0)
      {
        if ((unint64_t)v28 >= v26)
          v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v30 = *(_DWORD *)v28;
      }
      else
      {
        v30 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
        v29 = 1;
      }
      if ((v30 & 0x3F) != 0x10)
        break;
      v28 = (__int128 *)((char *)*a2 + 24);
      *a2 = v28;
    }
    if ((*(_DWORD *)v27 & 0x3F) != 0)
    {
      LOWORD(v45) = 0;
    }
    else
    {
      v45 = *((_DWORD *)v27 + 4);
      if (v45 < 0)
      {
        v45 = WebCore::cssValueKeywordID(*((_QWORD *)v27 + 1), *((unsigned int *)v27 + 1) | ((unint64_t)((*(_DWORD *)v27 >> 22) & 1) << 32));
        *((_DWORD *)v27 + 4) = v45;
      }
      if ((unsigned __int16)v45 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958C1F90);
      }
    }
    v46 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v45 + 3088];
    v47 = *v46;
    *v46 += 2;
    if (v47)
      *v46 = v47;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, (WTF::StringImpl *)a2);
    v52 = &WebCore::staticCSSValuePool[1440];
    dword_1ECE8A228 += 2;
LABEL_153:
    v55 = v52;
    goto LABEL_27;
  }
  WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)a2, 0, &v55);
  if (v55)
    goto LABEL_27;
  WebCore::CSSPropertyParserHelpers::consumeNumber(a2, 0, &v56);
  result = v55;
  v7 = v56;
  v55 = v56;
  v56 = 0;
  if (!result)
    goto LABEL_8;
  v8 = *result - 2;
  if (*result == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
    result = v56;
    v56 = 0;
    if (!result)
      goto LABEL_7;
    v8 = *result - 2;
    if (*result == 2)
    {
      result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
      goto LABEL_7;
    }
  }
  *result = v8;
LABEL_7:
  v7 = v55;
LABEL_8:
  if (!v7)
  {
LABEL_9:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    return result;
  }
LABEL_27:
  v13 = *a2;
  v12 = (unint64_t)a2[1];
  if ((unint64_t)*a2 >= v12)
  {
    v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v13 & 0x3F) != 0)
  {
    result = (int *)WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)a2, 0, &v54);
    v14 = v54;
    if (v54)
      goto LABEL_56;
    WebCore::CSSPropertyParserHelpers::consumeNumber(a2, 0, &v56);
    v14 = v56;
    v56 = 0;
    result = v54;
    v54 = v14;
    if (!result)
    {
LABEL_34:
      if (!v14)
        goto LABEL_35;
LABEL_56:
      *(_QWORD *)this = v55;
      *((_QWORD *)this + 1) = v14;
      *((_BYTE *)this + 16) = 1;
      return result;
    }
    v16 = *result - 2;
    if (*result == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v15);
      result = v56;
      v56 = 0;
      if (!result)
        goto LABEL_33;
      v16 = *result - 2;
      if (*result == 2)
      {
        result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v15);
        goto LABEL_33;
      }
    }
    *result = v16;
LABEL_33:
    v14 = v54;
    goto LABEL_34;
  }
  v17 = *a2;
  if ((unint64_t)*a2 >= v12)
  {
    v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v17 = *a2;
    }
  }
  else
  {
    v18 = *a2;
  }
  if ((*(_BYTE *)v18 & 0x3F) == 0)
  {
    if ((unint64_t)v17 >= v12)
    {
      v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v17 & 0x3F) != 0)
    {
      v17 = *a2;
    }
    else
    {
      v31 = *((_DWORD *)v17 + 4);
      if (v31 < 0)
      {
        v31 = WebCore::cssValueKeywordID(*((_QWORD *)v17 + 1), *((unsigned int *)v17 + 1) | ((unint64_t)((*(_DWORD *)v17 >> 22) & 1) << 32));
        *((_DWORD *)v17 + 4) = v31;
      }
      v17 = *a2;
      if ((unsigned __int16)v31 == 254)
      {
        v32 = a2[1];
        if (v17 == v32)
        {
          v34 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v33 = *a2;
          v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v33 = (__int128 *)((char *)v17 + 24);
          *a2 = (__int128 *)((char *)v17 + 24);
        }
        while (1)
        {
          if (v33 < v32 || (v34 & 1) != 0)
          {
            if (v33 >= v32)
              v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v35 = *(_DWORD *)v33;
          }
          else
          {
            v35 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v35;
            v34 = 1;
          }
          if ((v35 & 0x3F) != 0x10)
            break;
          v33 = (__int128 *)((char *)*a2 + 24);
          *a2 = v33;
        }
        if ((*(_DWORD *)v17 & 0x3F) != 0)
        {
          LOWORD(v48) = 0;
        }
        else
        {
          v48 = *((_DWORD *)v17 + 4);
          if (v48 < 0)
          {
            v48 = WebCore::cssValueKeywordID(*((_QWORD *)v17 + 1), *((unsigned int *)v17 + 1) | ((unint64_t)((*(_DWORD *)v17 >> 22) & 1) << 32));
            *((_DWORD *)v17 + 4) = v48;
          }
          if ((unsigned __int16)v48 >= 0x48Eu)
          {
            __break(0xC471u);
            JUMPOUT(0x1958C1FDCLL);
          }
        }
        result = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v48 + 3088];
        v49 = *result;
        *result += 2;
        if (v49)
          *result = v49;
        else
          result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
        v53 = 0x410u;
        goto LABEL_158;
      }
    }
  }
  v19 = (unint64_t)a2[1];
  if ((unint64_t)v17 >= v19)
  {
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v17 & 0x3F) == 0)
  {
    v20 = *a2;
    if ((unint64_t)*a2 >= v19)
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v20 & 0x3F) == 0)
    {
      v36 = *((_DWORD *)v20 + 4);
      if (v36 < 0)
      {
        v36 = WebCore::cssValueKeywordID(*((_QWORD *)v20 + 1), *((unsigned int *)v20 + 1) | ((unint64_t)((*(_DWORD *)v20 >> 22) & 1) << 32));
        *((_DWORD *)v20 + 4) = v36;
      }
      if ((unsigned __int16)v36 == 255)
      {
        v38 = *a2;
        v37 = (unint64_t)a2[1];
        if (*a2 == (__int128 *)v37)
        {
          v40 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v39 = *a2;
          v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v39 = (__int128 *)((char *)v38 + 24);
          *a2 = (__int128 *)((char *)v38 + 24);
        }
        while (1)
        {
          if ((unint64_t)v39 < v37 || (v40 & 1) != 0)
          {
            if ((unint64_t)v39 >= v37)
              v39 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v41 = *(_DWORD *)v39;
          }
          else
          {
            v41 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v41;
            v40 = 1;
          }
          if ((v41 & 0x3F) != 0x10)
            break;
          v39 = (__int128 *)((char *)*a2 + 24);
          *a2 = v39;
        }
        if ((*(_DWORD *)v38 & 0x3F) != 0)
        {
          LOWORD(v50) = 0;
        }
        else
        {
          v50 = *((_DWORD *)v38 + 4);
          if (v50 < 0)
          {
            v50 = WebCore::cssValueKeywordID(*((_QWORD *)v38 + 1), *((unsigned int *)v38 + 1) | ((unint64_t)((*(_DWORD *)v38 >> 22) & 1) << 32));
            *((_DWORD *)v38 + 4) = v50;
          }
          if ((unsigned __int16)v50 >= 0x48Eu)
          {
            __break(0xC471u);
            JUMPOUT(0x1958C2028);
          }
        }
        result = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v50 + 3088];
        v51 = *result;
        *result += 2;
        if (v51)
          *result = v51;
        else
          result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
        v53 = 0x5A0u;
LABEL_158:
        v14 = &WebCore::staticCSSValuePool[v53];
LABEL_55:
        *v14 += 2;
        goto LABEL_56;
      }
    }
  }
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)260>((uint64_t)&v56, (uint64_t)a2);
  result = v56;
  if (v56)
  {
    if (*v56 == 2)
      result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v15);
    else
      *v56 -= 2;
    v14 = &WebCore::staticCSSValuePool[1240];
    goto LABEL_55;
  }
LABEL_35:
  *(_BYTE *)this = 0;
  result = v55;
  *((_BYTE *)this + 16) = 0;
  v55 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v15);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)260>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 260)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958C2328);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers25RawVariantTransformerBaseINSB_38PercentOrNumberDividedBy100TransformerEdE9transformIJNSA_10PercentRawENSA_9NumberRawEEEEdRKNS_7variantIJDpT_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSG_SH_EEEEEEDcSO_DpT0_(uint64_t a1, double *a2)
{
  return *a2 / 100.0;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers25RawVariantTransformerBaseINSB_38PercentOrNumberDividedBy100TransformerEdE9transformIJNSA_10PercentRawENSA_9NumberRawEEEEdRKNS_7variantIJDpT_EEEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE0EJSG_SH_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

WTF *WebCore::CSSDeprecatedRadialGradientValue::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  WTF::StringImpl *v21;
  WTF *result;
  int v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  _BYTE v31[32];

  v11 = WTF::fastCompactMalloc((WTF *)0x90);
  v29 = (WTF *)v31;
  v30 = 2;
  v12 = *(WTF **)a4;
  if (*(_QWORD *)a4 == a4 + 16)
  {
    v13 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v13)
    {
      v14 = (WTF *)((char *)v12 + 16 * v13);
      v15 = v31;
      do
      {
        v16 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        *v15 = v16;
        v17 = *((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        v15[1] = v17;
        v18 = (_DWORD *)*((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        if (v18)
        {
          if (*v18 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v10);
          else
            *v18 -= 2;
        }
        v19 = *(_DWORD **)v12;
        *(_QWORD *)v12 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v10);
          else
            *v19 -= 2;
        }
        v12 = (WTF *)((char *)v12 + 16);
        v15 += 2;
      }
      while (v12 != v14);
    }
  }
  else
  {
    *(_QWORD *)a4 = a4 + 16;
    v29 = v12;
    v24 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 2;
    LODWORD(v30) = v24;
  }
  v20 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = 0;
  HIDWORD(v30) = v20;
  WebCore::CSSDeprecatedRadialGradientValue::CSSDeprecatedRadialGradientValue(v11, a1, a2, a3, (uint64_t)&v29);
  *a5 = v11;
  if (HIDWORD(v30))
  {
    v25 = 16 * HIDWORD(v30);
    v26 = (_DWORD **)((char *)v29 + 8);
    do
    {
      v27 = *v26;
      *v26 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v21);
        else
          *v27 -= 2;
      }
      v28 = *(v26 - 1);
      *(v26 - 1) = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v21);
        else
          *v28 -= 2;
      }
      v26 += 2;
      v25 -= 16;
    }
    while (v25);
  }
  result = v29;
  if (v31 != (_BYTE *)v29 && v29 != 0)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    return (WTF *)WTF::fastFree(result, v21);
  }
  return result;
}

uint64_t WebCore::CSSDeprecatedRadialGradientValue::CSSDeprecatedRadialGradientValue(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  int v28;
  char v29;
  char v30;

  *(_DWORD *)a1 = 2;
  v10 = (*(unsigned __int8 *)(a1 + 6) << 16) & 0xFC0000;
  *(_WORD *)(a1 + 4) = 26624;
  *(_BYTE *)(a1 + 6) = BYTE2(v10);
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v11;
  v12 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 16) = v12;
  v13 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 24) = v13;
  v14 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = -1;
  v15 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E339BE20[v15])(&v29, a1 + 40, a2 + 4);
    *(_DWORD *)(a1 + 48) = v15;
  }
  *(_BYTE *)(a1 + 56) = 0;
  v16 = (WTF::StringImpl *)(a1 + 56);
  *(_DWORD *)(a1 + 64) = -1;
  v17 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v17 != -1)
  {
    ((void (*)(char *))off_1E339BE20[v17])(&v30);
    *(_DWORD *)(a1 + 64) = v17;
  }
  v18 = (_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 2;
  v19 = *(_QWORD **)a5;
  if (*(_QWORD *)a5 == a5 + 16)
  {
    v20 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v20)
    {
      v21 = &v19[2 * v20];
      do
      {
        v22 = (_DWORD *)*v19;
        *v19 = 0;
        *v18 = v22;
        v23 = v19[1];
        v19[1] = 0;
        v18[1] = v23;
        v24 = (_DWORD *)v19[1];
        v19[1] = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v16);
          else
            *v24 -= 2;
        }
        v25 = (_DWORD *)*v19;
        *v19 = 0;
        if (v25)
        {
          if (*v25 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v16);
          else
            *v25 -= 2;
        }
        v19 += 2;
        v18 += 2;
      }
      while (v19 != v21);
    }
  }
  else
  {
    *(_QWORD *)a5 = a5 + 16;
    *(_QWORD *)(a1 + 72) = v19;
    v28 = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = 2;
    *(_DWORD *)(a1 + 80) = v28;
  }
  v26 = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = 0;
  *(_DWORD *)(a1 + 84) = v26;
  *(_QWORD *)(a1 + 120) = a3;
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = 0;
  return a1;
}

void WebCore::CSSDeprecatedRadialGradientValue::Data::~Data(WebCore::CSSDeprecatedRadialGradientValue::Data *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  char v9;
  char v10;

  v3 = *((unsigned int *)this + 14);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E339BE10[v3])(&v9, (char *)this + 48);
  *((_DWORD *)this + 14) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E339BE10[v4])(&v10, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      *v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
    else
      *v6 -= 2;
  }
  v7 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  v8 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
    else
      *v8 -= 2;
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumePrefixedRadialGradient(_QWORD *a1, uint64_t *a2, uint64_t a3, char a4)
{
  _DWORD *v4;
  WebCore::CSSParserTokenRange *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF *v12;
  __int128 *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  _DWORD *v17;
  WebCore::CSSParserTokenRange *v18;
  unsigned __int16 v19;
  __int128 *v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int16 v23;
  uint64_t result;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  _DWORD *v41;
  int v43;
  char *v44;
  unint64_t v45;
  __int128 *v46;
  char v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  _DWORD **v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  _DWORD **v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF *v58;
  uint64_t v59;
  _BYTE v60[32];
  _BYTE v61[16];
  int v62;
  WTF *v63;
  _DWORD *v64;
  char v65;
  WTF *v66;
  _DWORD *v67;
  _BYTE v68[32];
  char v69;
  _DWORD *v70;
  WTF *v71;
  _DWORD *v72;
  unsigned int v73;
  _BYTE v74[9];

  WebCore::CSSPropertyParserHelpers::consumeOneOrTwoValuedPositionCoordinates(a2, *(unsigned __int8 *)(a3 + 48), 1, (uint64_t)&v66);
  v10 = v68[0];
  if (!v68[0])
  {
    v12 = 0;
    goto LABEL_5;
  }
  if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, v9))
  {
    v12 = v66;
    v4 = v67;
LABEL_5:
    v13 = (__int128 *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_BYTE *)v13 & 0x3F) != 0)
    {
LABEL_7:
      v73 = 0;
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *(unsigned __int8 *)(a3 + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v66);
      if (!v66)
        goto LABEL_64;
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *(unsigned __int8 *)(a3 + 48), 1u, 1, 0, 0, 0, (uint64_t *)&v70);
      if (v70)
      {
        if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, v11))
        {
          v14 = v66;
          v66 = 0;
          v15 = (uint64_t)v70;
          v70 = 0;
          if (v73 != -1)
          {
            if (v73 == 4)
            {
              v16 = v71;
              v71 = v14;
              if (v16)
              {
                if (*(_DWORD *)v16 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v11);
                else
                  *(_DWORD *)v16 -= 2;
              }
              v17 = v72;
              v72 = (_DWORD *)v15;
              if (v17)
              {
                if (*v17 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v11);
                else
                  *v17 -= 2;
              }
              goto LABEL_47;
            }
            ((void (*)(_BYTE *, WTF **))off_1E339DA88[v73])(v74, &v71);
          }
          v71 = v14;
          v72 = (_DWORD *)v15;
          v73 = 4;
LABEL_47:
          v27 = v70;
          v70 = 0;
          if (v27)
          {
            if (*v27 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v11);
            else
              *v27 -= 2;
          }
          v30 = v66;
          v66 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v11);
            else
              *(_DWORD *)v30 -= 2;
          }
LABEL_64:
          result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthColorStopList((uint64_t)&v66, (__int128 **)a2, a3, 0);
          if (!v69)
          {
            *a1 = 0;
LABEL_107:
            if (v73 != -1)
              result = ((uint64_t (*)(WTF **, WTF **))off_1E339DA88[v73])(&v66, &v71);
LABEL_109:
            if (!v10)
              return result;
            if (v4)
            {
              if (*v4 == 2)
              {
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v11);
                if (!v12)
                  return result;
LABEL_114:
                if (*(_DWORD *)v12 != 2)
                {
                  *(_DWORD *)v12 -= 2;
                  return result;
                }
                result = (uint64_t)v12;
                return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v11);
              }
              *v4 -= 2;
            }
            if (!v12)
              return result;
            goto LABEL_114;
          }
          v61[0] = 0;
          v62 = -1;
          v31 = (WTF *)v73;
          if (v73 != -1)
          {
            result = ((uint64_t (*)(_DWORD **, _BYTE *, WTF **))off_1E339DAB0[v73])(&v70, v61, &v71);
            v62 = (int)v31;
          }
          LOBYTE(v63) = 0;
          v65 = 0;
          if (v10)
          {
            v63 = v12;
            v64 = v4;
            v65 = 1;
            v12 = 0;
            v4 = 0;
          }
          if (v69)
          {
            v58 = (WTF *)v60;
            v59 = 2;
            v32 = v66;
            v31 = (WTF *)v68;
            if (v66 == (WTF *)v68)
            {
              if (HIDWORD(v67))
              {
                v33 = (WTF *)((char *)v66 + 16 * HIDWORD(v67));
                v34 = v60;
                do
                {
                  v35 = *(_DWORD **)v32;
                  *(_QWORD *)v32 = 0;
                  *v34 = v35;
                  v36 = *((_QWORD *)v32 + 1);
                  *((_QWORD *)v32 + 1) = 0;
                  v34[1] = v36;
                  v37 = (_DWORD *)*((_QWORD *)v32 + 1);
                  *((_QWORD *)v32 + 1) = 0;
                  if (v37)
                  {
                    if (*v37 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v11);
                    else
                      *v37 -= 2;
                  }
                  v38 = *(_DWORD **)v32;
                  *(_QWORD *)v32 = 0;
                  if (v38)
                  {
                    if (*v38 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v11);
                    else
                      *v38 -= 2;
                  }
                  v32 = (WTF *)((char *)v32 + 16);
                  v34 += 2;
                }
                while (v32 != v33);
              }
            }
            else
            {
              v66 = (WTF *)v68;
              v58 = v32;
              v43 = (int)v67;
              LODWORD(v67) = 2;
              LODWORD(v59) = v43;
            }
            v39 = HIDWORD(v67);
            HIDWORD(v67) = 0;
            HIDWORD(v59) = v39;
            WebCore::CSSPrefixedRadialGradientValue::create((uint64_t)v61, a4, 0x600000000, 0, (uint64_t)&v58, (uint64_t *)&v70);
            *a1 = v70;
            v70 = 0;
            if (HIDWORD(v59))
            {
              v50 = 16 * HIDWORD(v59);
              v51 = (_DWORD **)((char *)v58 + 8);
              do
              {
                v52 = *v51;
                *v51 = 0;
                if (v52)
                {
                  if (*v52 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v11);
                  else
                    *v52 -= 2;
                }
                v53 = *(v51 - 1);
                *(v51 - 1) = 0;
                if (v53)
                {
                  if (*v53 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, v11);
                  else
                    *v53 -= 2;
                }
                v51 += 2;
                v50 -= 16;
              }
              while (v50);
            }
            result = (uint64_t)v58;
            if (v60 == (_BYTE *)v58 || v58 == 0)
              goto LABEL_88;
          }
          else
          {
            __break(1u);
          }
          v58 = 0;
          LODWORD(v59) = 0;
          result = WTF::fastFree((WTF *)result, v11);
LABEL_88:
          if (v65)
          {
            v41 = v64;
            v64 = 0;
            if (v41)
            {
              if (*v41 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v11);
              else
                *v41 -= 2;
            }
            result = (uint64_t)v63;
            v63 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v11);
              else
                *(_DWORD *)result -= 2;
            }
          }
          if (v62 != -1)
            result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E339DA88[v62])(v74, v61);
          v62 = -1;
          if (v69)
          {
            if (HIDWORD(v67))
            {
              v54 = 16 * HIDWORD(v67);
              v55 = (_DWORD **)((char *)v66 + 8);
              do
              {
                v56 = *v55;
                *v55 = 0;
                if (v56)
                {
                  if (*v56 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v11);
                  else
                    *v56 -= 2;
                }
                v57 = *(v55 - 1);
                *(v55 - 1) = 0;
                if (v57)
                {
                  if (*v57 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, v11);
                  else
                    *v57 -= 2;
                }
                v55 += 2;
                v54 -= 16;
              }
              while (v54);
            }
            result = (uint64_t)v66;
            if (v31 != v66 && v66 != 0)
            {
              v66 = 0;
              LODWORD(v67) = 0;
              result = WTF::fastFree((WTF *)result, v11);
            }
          }
          goto LABEL_107;
        }
        *a1 = 0;
        v26 = v70;
        v70 = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v11);
          else
            *v26 -= 2;
        }
      }
      else
      {
        *a1 = 0;
      }
      result = (uint64_t)v66;
      v66 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_107;
    }
    v19 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword> [2]> const>((uint64_t)a2);
    v20 = (__int128 *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v20 & 0x3F) != 0)
    {
LABEL_21:
      v21 = 0;
      v22 = 1;
    }
    else
    {
      v28 = *((_DWORD *)v20 + 4);
      if (v28 < 0)
      {
        v28 = WebCore::cssValueKeywordID(*((_QWORD *)v20 + 1), *((unsigned int *)v20 + 1) | ((unint64_t)((*(_DWORD *)v20 >> 22) & 1) << 32));
        *((_DWORD *)v20 + 4) = v28;
      }
      switch((__int16)v28)
      {
        case 698:
          v29 = 2;
          goto LABEL_129;
        case 699:
          v29 = 3;
          goto LABEL_129;
        case 700:
          v29 = 4;
          goto LABEL_129;
        case 701:
          v29 = 5;
          goto LABEL_129;
        default:
          if ((unsigned __int16)v28 == 621)
          {
            v29 = 0;
          }
          else
          {
            if ((unsigned __int16)v28 != 622)
              goto LABEL_21;
            v29 = 1;
          }
LABEL_129:
          v44 = (char *)&WebCore::CSSPropertyParserHelpers::consumePrefixedRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::extentMappings
              + 4 * v29;
          v46 = (__int128 *)*a2;
          v45 = a2[1];
          if (*a2 == v45)
          {
            v47 = 1;
            {
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
              v46 = (__int128 *)*a2;
            }
          }
          else
          {
            v46 = (__int128 *)((char *)v46 + 24);
            *a2 = (uint64_t)v46;
          }
          v48 = (unsigned __int8 *)(v44 + 2);
          while (1)
          {
            if ((unint64_t)v46 < v45 || (v47 & 1) != 0)
            {
              if ((unint64_t)v46 >= v45)
                v46 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v49 = *(_DWORD *)v46;
            }
            else
            {
              v49 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v49;
              v47 = 1;
            }
            if ((v49 & 0x3F) != 0x10)
              break;
            v46 = (__int128 *)(*a2 + 24);
            *a2 = (uint64_t)v46;
          }
          v22 = 0;
          v21 = *v48;
          break;
      }
    }
    if (v19 > 0xFFu
      || (v23 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword> [2]> const>((uint64_t)a2),
          LOBYTE(v19) = v23,
          v23 > 0xFFu))
    {
      result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, v18);
      if ((result & 1) != 0)
      {
        if ((v22 & 1) != 0)
        {
          LOBYTE(v71) = v19;
          v25 = 1;
        }
        else
        {
          LOWORD(v71) = v19 | (v21 << 8);
          v25 = 3;
        }
        goto LABEL_38;
      }
    }
    else
    {
      if ((v22 & 1) != 0)
        goto LABEL_7;
      result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, v18);
      if ((result & 1) != 0)
      {
        LOBYTE(v71) = v21;
        v25 = 2;
LABEL_38:
        v73 = v25;
        goto LABEL_64;
      }
    }
    *a1 = 0;
    goto LABEL_109;
  }
  *a1 = 0;
  if (v67)
  {
    if (*v67 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v67, v11);
    else
      *v67 -= 2;
  }
  result = (uint64_t)v66;
  if (v66)
  {
    if (*(_DWORD *)v66 != 2)
    {
      *(_DWORD *)v66 -= 2;
      return result;
    }
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v11);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword> [2]> const>(uint64_t a1)
{
  __int128 *v2;
  int v3;
  int v4;
  int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  __int128 *v10;
  char v11;
  unsigned __int8 *v12;
  unsigned int v13;

  v2 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v2 & 0x3F) != 0)
    goto LABEL_3;
  v6 = *((_DWORD *)v2 + 4);
  if (v6 < 0)
  {
    v6 = WebCore::cssValueKeywordID(*((_QWORD *)v2 + 1), *((unsigned int *)v2 + 1) | ((unint64_t)((*(_DWORD *)v2 >> 22) & 1) << 32));
    *((_DWORD *)v2 + 4) = v6;
  }
  if ((unsigned __int16)v6 == 273)
  {
    v7 = 0;
  }
  else
  {
    if ((unsigned __int16)v6 != 697)
    {
LABEL_3:
      v3 = 0;
      v4 = 0;
      return v3 | (v4 << 8);
    }
    v7 = 1;
  }
  v8 = (char *)&WebCore::CSSPropertyParserHelpers::consumePrefixedRadialGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::shapeMappings
     + 4 * v7;
  v10 = *(__int128 **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v9)
  {
    v11 = 1;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v10 = *(__int128 **)a1;
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v10 + 24);
    *(_QWORD *)a1 = v10;
  }
  v12 = (unsigned __int8 *)(v8 + 2);
  while (1)
  {
    if ((unint64_t)v10 < v9 || (v11 & 1) != 0)
    {
      if ((unint64_t)v10 >= v9)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v13 = *(_DWORD *)v10;
    }
    else
    {
      v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
      v11 = 1;
    }
    if ((v13 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v10;
  }
  v3 = *v12;
  v4 = 1;
  return v3 | (v4 << 8);
}

WTF *WebCore::CSSPrefixedRadialGradientValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF *result;
  int v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[32];

  v12 = WTF::fastCompactMalloc((WTF *)0x88);
  v31 = (WTF *)v33;
  v32 = 2;
  v13 = *(WTF **)a5;
  if (*(_QWORD *)a5 == a5 + 16)
  {
    v14 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v14)
    {
      v15 = (WTF *)((char *)v13 + 16 * v14);
      v16 = v33;
      do
      {
        v17 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        *v16 = v17;
        v18 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        v16[1] = v18;
        v19 = (_DWORD *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
          else
            *v19 -= 2;
        }
        v20 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v11);
          else
            *v20 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 16);
        v16 += 2;
      }
      while (v13 != v15);
    }
  }
  else
  {
    *(_QWORD *)a5 = a5 + 16;
    v31 = v13;
    v25 = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = 2;
    LODWORD(v32) = v25;
  }
  v21 = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = 0;
  HIDWORD(v32) = v21;
  WebCore::CSSPrefixedRadialGradientValue::CSSPrefixedRadialGradientValue(v12, a1, a2, a3, a4, (uint64_t)&v31);
  *a6 = v12;
  if (HIDWORD(v32))
  {
    v26 = 16 * HIDWORD(v32);
    v27 = (_DWORD **)((char *)v31 + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v22);
        else
          *v28 -= 2;
      }
      v29 = *(v27 - 1);
      *(v27 - 1) = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v22);
        else
          *v29 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  result = v31;
  if (v33 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (WTF *)WTF::fastFree(result, v22);
  }
  return result;
}

uint64_t WebCore::CSSPrefixedRadialGradientValue::CSSPrefixedRadialGradientValue(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  int v27;
  char v28;

  *(_DWORD *)a1 = 2;
  v12 = *(_BYTE *)(a1 + 6);
  *(_WORD *)(a1 + 4) = 30720;
  *(_BYTE *)(a1 + 6) = v12 & 0xFC;
  *(_BYTE *)(a1 + 8) = 0;
  v13 = (WTF::StringImpl *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = -1;
  v14 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E339DAB0[v14])(&v28, v13, a2);
    *(_DWORD *)(a1 + 24) = v14;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v15 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v15;
    v16 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v17 = (_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 2;
  v18 = *(_QWORD **)a6;
  if (*(_QWORD *)a6 == a6 + 16)
  {
    v19 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v19)
    {
      v20 = &v18[2 * v19];
      do
      {
        v21 = (_DWORD *)*v18;
        *v18 = 0;
        *v17 = v21;
        v22 = v18[1];
        v18[1] = 0;
        v17[1] = v22;
        v23 = (_DWORD *)v18[1];
        v18[1] = 0;
        if (v23)
        {
          if (*v23 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v13);
          else
            *v23 -= 2;
        }
        v24 = (_DWORD *)*v18;
        *v18 = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v13);
          else
            *v24 -= 2;
        }
        v18 += 2;
        v17 += 2;
      }
      while (v18 != v20);
    }
  }
  else
  {
    *(_QWORD *)a6 = a6 + 16;
    *(_QWORD *)(a1 + 56) = v18;
    v27 = *(_DWORD *)(a6 + 8);
    *(_DWORD *)(a6 + 8) = 2;
    *(_DWORD *)(a1 + 64) = v27;
  }
  v25 = *(_DWORD *)(a6 + 12);
  *(_DWORD *)(a6 + 12) = 0;
  *(_DWORD *)(a1 + 68) = v25;
  *(_BYTE *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 108) = a4;
  *(_QWORD *)(a1 + 116) = a5;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENSA_12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENSA_12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENSA_12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENSA_12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJS8_SB_SC_SD_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeConicGradient(_QWORD *a1, uint64_t this, uint64_t a3, char a4)
{
  __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t result;
  WTF *v16;
  int v17;
  __int128 *v18;
  int v19;
  int v20;
  unint64_t v21;
  __int128 *v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  int v26;
  int v27;
  int *v28;
  int v29;
  uint64_t v30;
  void *v31;
  unsigned __int16 *v32;
  char v33;
  uint64_t v34;
  void *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  int *v45;
  _DWORD *v46;
  _DWORD *v47;
  int *v48;
  int v49;
  int v50;
  int **v51;
  int *v52;
  int *v53;
  _DWORD *v54;
  int *v55;
  WTF *v56;
  _DWORD *v57;
  int v58;
  uint64_t v60;
  uint64_t v61;
  int v62;
  WTF *v63;
  unsigned int v64;
  uint64_t v65;
  _OWORD *v66;
  int *v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD **v70;
  _DWORD *v71;
  _DWORD *v72;
  int *v73;
  WTF *v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  int v79;
  uint64_t v80;
  _DWORD **v81;
  _DWORD *v82;
  _DWORD *v83;
  uint64_t v84;
  _DWORD **v85;
  _DWORD *v86;
  _DWORD *v87;
  char v88;
  uint64_t v89;
  _DWORD *v90;
  unint64_t v91;
  WTF *v92;
  int v93;
  unsigned int v94;
  _BYTE v95[32];
  _BYTE v96[16];
  int v97;
  uint64_t v98;
  _DWORD *v99;
  char v100;
  WTF *v101;
  _DWORD *v102;
  int v103;
  char v104;
  char v105;
  unsigned __int16 *v106;
  _BYTE v107[16];
  int v108;
  _DWORD *v109;
  unsigned __int16 **v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  _DWORD v114[8];
  uint64_t v115;
  unsigned __int16 *v116[2];

  v8 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v8 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v19;
  }
  if ((unsigned __int16)v19 != 952)
  {
LABEL_3:
    v9 = 0;
    v91 = 0;
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod((__int128 **)this, (WebCore::CSSParserTokenRange *)this);
    if ((this & 0xFF00000000) == 0)
    {
      *a1 = 0;
      return result;
    }
    v9 = result;
    v91 = this & 0xFFFFFFFFFFLL;
  }
  v108 = 0;
  v11 = *(__int128 **)this;
  v10 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this >= v10)
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v11 & 0x3F) == 0)
  {
    v12 = *(__int128 **)this;
    if (*(_QWORD *)this >= v10)
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v12 & 0x3F) == 0)
    {
      v20 = *((_DWORD *)v12 + 4);
      if (v20 < 0)
      {
        v20 = WebCore::cssValueKeywordID(*((_QWORD *)v12 + 1), *((unsigned int *)v12 + 1) | ((unint64_t)((*(_DWORD *)v12 >> 22) & 1) << 32));
        *((_DWORD *)v12 + 4) = v20;
      }
      if ((unsigned __int16)v20 == 779)
      {
        v22 = *(__int128 **)this;
        v21 = *(_QWORD *)(this + 8);
        if (*(_QWORD *)this == v21)
        {
          v24 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          v23 = *(__int128 **)this;
          v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v23 = (__int128 *)((char *)v22 + 24);
          *(_QWORD *)this = (char *)v22 + 24;
        }
        while (1)
        {
          if ((unint64_t)v23 < v21 || (v24 & 1) != 0)
          {
            if ((unint64_t)v23 >= v21)
              v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v25 = *(_DWORD *)v23;
          }
          else
          {
            v25 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
            v24 = 1;
          }
          if ((v25 & 0x3F) != 0x10)
            break;
          v23 = (__int128 *)(*(_QWORD *)this + 24);
          *(_QWORD *)this = v23;
        }
        if ((*(_DWORD *)v22 & 0x3F) != 0)
        {
          LOWORD(v27) = 0;
        }
        else
        {
          v27 = *((_DWORD *)v22 + 4);
          if (v27 < 0)
          {
            v27 = WebCore::cssValueKeywordID(*((_QWORD *)v22 + 1), *((unsigned int *)v22 + 1) | ((unint64_t)((*(_DWORD *)v22 >> 22) & 1) << 32));
            *((_DWORD *)v22 + 4) = v27;
          }
          if ((unsigned __int16)v27 >= 0x48Eu)
          {
            __break(0xC471u);
            JUMPOUT(0x1958C3AF8);
          }
        }
        v28 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v27 + 3088];
        v29 = *v28;
        *v28 += 2;
        if (v29)
          *v28 = v29;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, (WTF::StringImpl *)this);
        v30 = *(unsigned __int8 *)(a3 + 48);
        v106 = 0;
        result = WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw>::consume<>(this, &v106, v30 | 0x100000000, (uint64_t)&v101);
        v32 = v106;
        if (v106)
          goto LABEL_236;
        while (1)
        {
          if (!v104)
            goto LABEL_63;
          if (v103 != -1)
            break;
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_236:
          result = WTF::fastFree((WTF *)(v32 - 8), v31);
        }
        v110 = v116;
        ((void (*)(_DWORD **__return_ptr, unsigned __int16 ***, WTF **))off_1E339DAD8[v103])(&v112, &v110, &v101);
        if (v108 == -1)
        {
          if (v114[0] == -1)
          {
LABEL_68:
            if (v104 && v103 != -1)
              ((void (*)(_DWORD **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v103])(&v112, &v101);
            goto LABEL_8;
          }
        }
        else if (v114[0] == -1)
        {
          ((void (*)(unsigned __int16 ***, _BYTE *))off_1E339DAE8[v108])(&v110, v107);
          v108 = -1;
          goto LABEL_66;
        }
        v110 = (unsigned __int16 **)v107;
        ((void (*)(unsigned __int16 ***, _BYTE *, _DWORD **))off_1E339DB00[v114[0]])(&v110, v107, &v112);
LABEL_66:
        if (v114[0] != -1)
          ((void (*)(unsigned __int16 ***, _DWORD **))off_1E339DAE8[v114[0]])(&v110, &v112);
        goto LABEL_68;
      }
    }
  }
LABEL_8:
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)721>(this, (int **)&v101);
  v14 = v101;
  v101 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, (WTF::StringImpl *)v13);
    else
      *(_DWORD *)v14 -= 2;
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)this, *(unsigned __int8 *)(a3 + 48), 1, 0, 0, (uint64_t)&v101);
    if (!(_BYTE)v103)
    {
LABEL_63:
      *a1 = 0;
      goto LABEL_199;
    }
    v16 = v101;
    v89 = v9;
    v90 = v102;
    v17 = 1;
  }
  else
  {
    v89 = v9;
    v16 = 0;
    if (!v108)
      goto LABEL_77;
    v17 = 0;
  }
  if (!HIDWORD(v91))
  {
    v18 = *(__int128 **)this;
    if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
    {
      v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v18 & 0x3F) == 0)
    {
      v26 = *((_DWORD *)v18 + 4);
      if (v26 < 0)
      {
        v26 = WebCore::cssValueKeywordID(*((_QWORD *)v18 + 1), *((unsigned int *)v18 + 1) | ((unint64_t)((*(_DWORD *)v18 >> 22) & 1) << 32));
        *((_DWORD *)v18 + 4) = v26;
      }
      if ((unsigned __int16)v26 == 952)
      {
        result = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod((__int128 **)this, (WebCore::CSSParserTokenRange *)v13);
        v89 = result;
        if ((v13 & 0xFF00000000) == 0)
          goto LABEL_129;
        v91 = v13 & 0xFFFFFFFFFFLL;
      }
    }
  }
  if (v108)
  {
LABEL_78:
    result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)this, (WebCore::CSSParserTokenRange *)v13);
    if ((result & 1) != 0)
      goto LABEL_79;
LABEL_129:
    *a1 = 0;
    v56 = v16;
    v57 = v90;
    if (!v17)
      goto LABEL_199;
LABEL_190:
    if (v57)
    {
      if (*v57 == 2)
      {
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, (WTF::StringImpl *)v13);
        if (!v56)
          goto LABEL_199;
LABEL_194:
        if (*(_DWORD *)v56 == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, (WTF::StringImpl *)v13);
        else
          *(_DWORD *)v56 -= 2;
        goto LABEL_199;
      }
      *v57 -= 2;
    }
    if (!v56)
      goto LABEL_199;
    goto LABEL_194;
  }
  if (v14)
  {
    v17 = 1;
    goto LABEL_78;
  }
LABEL_77:
  v17 = 0;
  if ((v91 & 0xFF00000000) != 0)
    goto LABEL_78;
LABEL_79:
  v88 = a4;
  v112 = v114;
  v113 = 2;
  v33 = 1;
  do
  {
    LOWORD(v109) = 1792;
    WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)this, a3, &v109, (int **)&v110);
    v34 = *(unsigned __int8 *)(a3 + 48);
    v115 = 0;
    v116[0] = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw,WebCore::PercentRaw>::consumeAndResolve(&v111, (__int128 **)this, v116, (uint64_t)&v115, v34 | 0x100000000);
    if (v115)
      WTF::fastFree((WTF *)(v115 - 16), v35);
    if (v116[0])
      WTF::fastFree((WTF *)(v116[0] - 8), v35);
    v36 = v110 == 0;
    if (v110)
    {
      if (!v111)
        goto LABEL_109;
      v37 = *(unsigned __int8 *)(a3 + 48);
      v115 = 0;
      v116[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw,WebCore::PercentRaw>::consumeAndResolve(&v109, (__int128 **)this, v116, (uint64_t)&v115, v37 | 0x100000000);
      if (v115)
        WTF::fastFree((WTF *)(v115 - 16), v35);
      if (v116[0])
        WTF::fastFree((WTF *)(v116[0] - 8), v35);
      if (!v109)
        goto LABEL_109;
      v38 = HIDWORD(v113);
      if (HIDWORD(v113) == (_DWORD)v113)
      {
        v39 = WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v112, HIDWORD(v113) + 1, (unint64_t)&v110);
        v38 = HIDWORD(v113);
        v40 = (uint64_t)v112;
        v41 = *(_DWORD **)v39;
        if (*(_QWORD *)v39)
          *v41 += 2;
        *(_QWORD *)(v40 + 16 * v38) = v41;
        v42 = *(_DWORD **)(v39 + 8);
        if (v42)
          *v42 += 2;
        *(_QWORD *)(v40 + 16 * v38 + 8) = v42;
      }
      else
      {
        v44 = (uint64_t)v112;
        v45 = (int *)v110;
        if (v110)
          *(_DWORD *)v110 += 2;
        *(_QWORD *)(v44 + 16 * v38) = v45;
        v46 = v111;
        if (v111)
          *v111 += 2;
        *(_QWORD *)(v44 + 16 * v38 + 8) = v46;
      }
      HIDWORD(v113) = v38 + 1;
      v47 = v109;
      v109 = 0;
      v48 = v111;
      v111 = v47;
      if (!v48)
        goto LABEL_109;
      v49 = *v48 - 2;
      if (*v48 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, (WTF::StringImpl *)v35);
        v48 = v109;
        v109 = 0;
        if (!v48)
          goto LABEL_109;
        v49 = *v48 - 2;
        if (*v48 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, (WTF::StringImpl *)v35);
          goto LABEL_109;
        }
      }
      *v48 = v49;
LABEL_109:
      if (HIDWORD(v113) == (_DWORD)v113)
      {
        WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSGradientColorStop>((unsigned int *)&v112, (unint64_t)&v110);
      }
      else
      {
        v50 = HIDWORD(v113) + 1;
        v51 = (int **)&v112[4 * HIDWORD(v113)];
        v52 = (int *)v110;
        v110 = 0;
        *v51 = v52;
        v53 = v111;
        v111 = 0;
        v51[1] = v53;
        HIDWORD(v113) = v50;
      }
      v43 = 1;
      goto LABEL_112;
    }
    if (!v111)
    {
      v43 = 0;
      LOBYTE(v101) = 0;
      v105 = 0;
      v111 = 0;
      goto LABEL_117;
    }
    if ((v33 & 1) == 0)
      goto LABEL_109;
    v43 = 0;
    LOBYTE(v101) = 0;
    v105 = 0;
LABEL_112:
    v54 = v111;
    v111 = 0;
    if (v54)
    {
      if (*v54 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, (WTF::StringImpl *)v35);
      else
        *v54 -= 2;
    }
    v33 = v36;
LABEL_117:
    v55 = (int *)v110;
    v110 = 0;
    if (!v55)
      goto LABEL_120;
    if (*v55 != 2)
    {
      *v55 -= 2;
LABEL_120:
      if (!v43)
        goto LABEL_133;
      continue;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, (WTF::StringImpl *)v35);
    if (!v43)
      goto LABEL_133;
  }
  while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)this, (WebCore::CSSParserTokenRange *)v35));
  if ((v33 & 1) != 0)
  {
    LOBYTE(v101) = 0;
    v105 = 0;
LABEL_133:
    v13 = HIDWORD(v113);
    v56 = v16;
    v57 = v90;
    v58 = v17;
    if (!HIDWORD(v113))
      goto LABEL_134;
LABEL_159:
    v69 = 16 * v13;
    v70 = (_DWORD **)(v112 + 2);
    do
    {
      v71 = *v70;
      *v70 = 0;
      if (v71)
      {
        if (*v71 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)v13);
        else
          *v71 -= 2;
      }
      v72 = *(v70 - 1);
      *(v70 - 1) = 0;
      if (v72)
      {
        if (*v72 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, (WTF::StringImpl *)v13);
        else
          *v72 -= 2;
      }
      v70 += 2;
      v69 -= 16;
    }
    while (v69);
    goto LABEL_134;
  }
  v13 = HIDWORD(v113);
  v56 = v16;
  v58 = v17;
  if (HIDWORD(v113) <= 1)
  {
    LOBYTE(v101) = 0;
    v105 = 0;
    v57 = v90;
    if (!HIDWORD(v113))
      goto LABEL_134;
    goto LABEL_159;
  }
  WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v112, (WTF::StringImpl *)HIDWORD(v113));
  v73 = &v103;
  v101 = (WTF *)&v103;
  LODWORD(v102) = 2;
  v74 = (WTF *)v112;
  v57 = v90;
  if (v112 == v114)
  {
    if (HIDWORD(v113))
    {
      v75 = 16 * HIDWORD(v113);
      v76 = v114;
      do
      {
        *(_OWORD *)v73 = *(_OWORD *)v76;
        v73 += 4;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v76 + 1) = 0;
        v76 += 4;
        v75 -= 16;
      }
      while (v75);
    }
  }
  else
  {
    v112 = v114;
    v101 = v74;
    LODWORD(v102) = v113;
  }
  v77 = HIDWORD(v113);
  HIDWORD(v113) = 0;
  HIDWORD(v102) = v77;
  v105 = 1;
LABEL_134:
  result = (uint64_t)v112;
  if (v114 == v112 || v112 == 0)
    goto LABEL_139;
  while (1)
  {
    v112 = 0;
    LODWORD(v113) = 0;
    result = WTF::fastFree((WTF *)result, (void *)v13);
LABEL_139:
    if (!v105)
    {
      *a1 = 0;
      if (v58)
        goto LABEL_190;
      goto LABEL_199;
    }
    result = WebCore::CSSPropertyParserHelpers::computeGradientColorInterpolationMethod(v89, v91, (uint64_t *)v101, HIDWORD(v102));
    v60 = result;
    v61 = v13;
    v96[0] = 0;
    v97 = -1;
    v62 = v108;
    if (v108 != -1)
    {
      result = ((uint64_t (*)(_DWORD **, _BYTE *, _BYTE *))off_1E339DB18[v108])(&v112, v96, v107);
      v97 = v62;
    }
    LOBYTE(v98) = 0;
    v100 = 0;
    if (v58)
    {
      v98 = (uint64_t)v56;
      v99 = v57;
      v100 = 1;
      v57 = 0;
      v56 = 0;
    }
    if (v105)
      break;
    __break(1u);
  }
  v92 = (WTF *)v95;
  v93 = 2;
  v63 = v101;
  if (v101 == (WTF *)&v103)
  {
    v64 = HIDWORD(v102);
    if (HIDWORD(v102))
    {
      v65 = 16 * HIDWORD(v102);
      v66 = v95;
      v67 = &v103;
      do
      {
        *v66++ = *(_OWORD *)v67;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
        v67 += 4;
        v65 -= 16;
      }
      while (v65);
    }
  }
  else
  {
    v101 = (WTF *)&v103;
    v92 = v63;
    v79 = (int)v102;
    v64 = HIDWORD(v102);
    LODWORD(v102) = 2;
    v93 = v79;
  }
  HIDWORD(v102) = 0;
  v94 = v64;
  WebCore::CSSConicGradientValue::create((uint64_t)v96, v88, v60, v61, (uint64_t)&v92, (uint64_t *)&v112);
  *a1 = v112;
  v112 = 0;
  if (v94)
  {
    v80 = 16 * v94;
    v81 = (_DWORD **)((char *)v92 + 8);
    do
    {
      v82 = *v81;
      *v81 = 0;
      if (v82)
      {
        if (*v82 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, (WTF::StringImpl *)v13);
        else
          *v82 -= 2;
      }
      v83 = *(v81 - 1);
      *(v81 - 1) = 0;
      if (v83)
      {
        if (*v83 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v83, (WTF::StringImpl *)v13);
        else
          *v83 -= 2;
      }
      v81 += 2;
      v80 -= 16;
    }
    while (v80);
  }
  result = (uint64_t)v92;
  if (v95 != (_BYTE *)v92 && v92)
  {
    v92 = 0;
    v93 = 0;
    result = WTF::fastFree((WTF *)result, (void *)v13);
  }
  if (v100)
  {
    v68 = v99;
    v99 = 0;
    if (v68)
    {
      if (*v68 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v68, (WTF::StringImpl *)v13);
      else
        *v68 -= 2;
    }
    result = v98;
    v98 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v97 != -1)
    result = ((uint64_t (*)(unsigned __int16 ***, _BYTE *))off_1E339DAE8[v97])(&v110, v96);
  v97 = -1;
  if (!v105)
    goto LABEL_189;
  if (HIDWORD(v102))
  {
    v84 = 16 * HIDWORD(v102);
    v85 = (_DWORD **)((char *)v101 + 8);
    do
    {
      v86 = *v85;
      *v85 = 0;
      if (v86)
      {
        if (*v86 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v86, (WTF::StringImpl *)v13);
        else
          *v86 -= 2;
      }
      v87 = *(v85 - 1);
      *(v85 - 1) = 0;
      if (v87)
      {
        if (*v87 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v87, (WTF::StringImpl *)v13);
        else
          *v87 -= 2;
      }
      v85 += 2;
      v84 -= 16;
    }
    while (v84);
  }
  result = (uint64_t)v101;
  if (&v103 == (int *)v101 || v101 == 0)
  {
LABEL_189:
    if (!v58)
      goto LABEL_199;
    goto LABEL_190;
  }
  v101 = 0;
  LODWORD(v102) = 0;
  result = WTF::fastFree((WTF *)result, (void *)v13);
  if (v58)
    goto LABEL_190;
LABEL_199:
  if (v108 != -1)
    return ((uint64_t (*)(WTF **, _BYTE *))off_1E339DAE8[v108])(&v101, v107);
  return result;
}

WTF *WebCore::CSSConicGradientValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF *result;
  int v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[32];

  v12 = WTF::fastCompactMalloc((WTF *)0x88);
  v31 = (WTF *)v33;
  v32 = 2;
  v13 = *(WTF **)a5;
  if (*(_QWORD *)a5 == a5 + 16)
  {
    v14 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v14)
    {
      v15 = (WTF *)((char *)v13 + 16 * v14);
      v16 = v33;
      do
      {
        v17 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        *v16 = v17;
        v18 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        v16[1] = v18;
        v19 = (_DWORD *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
          else
            *v19 -= 2;
        }
        v20 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v11);
          else
            *v20 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 16);
        v16 += 2;
      }
      while (v13 != v15);
    }
  }
  else
  {
    *(_QWORD *)a5 = a5 + 16;
    v31 = v13;
    v25 = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = 2;
    LODWORD(v32) = v25;
  }
  v21 = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = 0;
  HIDWORD(v32) = v21;
  WebCore::CSSConicGradientValue::CSSConicGradientValue(v12, a1, a2, a3, a4, (uint64_t)&v31);
  *a6 = v12;
  if (HIDWORD(v32))
  {
    v26 = 16 * HIDWORD(v32);
    v27 = (_DWORD **)((char *)v31 + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v22);
        else
          *v28 -= 2;
      }
      v29 = *(v27 - 1);
      *(v27 - 1) = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v22);
        else
          *v29 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  result = v31;
  if (v33 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (WTF *)WTF::fastFree(result, v22);
  }
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeConicGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeConicGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>> &&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 16) = 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS8_SA_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E339DAE8[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS8_SA_SC_EEEOSR_EEEDcSJ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[1].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E339DAE8[v5])(&v7, v4);
  }
  v4[1].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[1].n128_u32[0] = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJS8_SA_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E339DAE8[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSConicGradientValue::CSSConicGradientValue(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  int v27;
  char v28;

  *(_DWORD *)a1 = 2;
  v12 = *(_BYTE *)(a1 + 6);
  *(_WORD *)(a1 + 4) = 22528;
  *(_BYTE *)(a1 + 6) = v12 & 0xFC;
  *(_BYTE *)(a1 + 8) = 0;
  v13 = (WTF::StringImpl *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = -1;
  v14 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *, WTF::StringImpl *, uint64_t))off_1E339DB18[v14])(&v28, v13, a2);
    *(_DWORD *)(a1 + 24) = v14;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v15 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v15;
    v16 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v16;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v17 = (_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = a1 + 72;
  *(_QWORD *)(a1 + 64) = 2;
  v18 = *(_QWORD **)a6;
  if (*(_QWORD *)a6 == a6 + 16)
  {
    v19 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v19)
    {
      v20 = &v18[2 * v19];
      do
      {
        v21 = (_DWORD *)*v18;
        *v18 = 0;
        *v17 = v21;
        v22 = v18[1];
        v18[1] = 0;
        v17[1] = v22;
        v23 = (_DWORD *)v18[1];
        v18[1] = 0;
        if (v23)
        {
          if (*v23 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v13);
          else
            *v23 -= 2;
        }
        v24 = (_DWORD *)*v18;
        *v18 = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v13);
          else
            *v24 -= 2;
        }
        v18 += 2;
        v17 += 2;
      }
      while (v18 != v20);
    }
  }
  else
  {
    *(_QWORD *)a6 = a6 + 16;
    *(_QWORD *)(a1 + 56) = v18;
    v27 = *(_DWORD *)(a6 + 8);
    *(_DWORD *)(a6 + 8) = 2;
    *(_DWORD *)(a1 + 64) = v27;
  }
  v25 = *(_DWORD *)(a6 + 12);
  *(_DWORD *)(a6 + 12) = 0;
  *(_DWORD *)(a1 + 68) = v25;
  *(_BYTE *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 108) = a4;
  *(_QWORD *)(a1 + 116) = a5;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS8_SA_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS8_SA_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCrossFade(_QWORD *a1, __int128 **this, uint64_t a3, int a4)
{
  __int128 *v7;
  uint64_t result;
  WebCore::CSSParserTokenRange *v9;
  int *v10;
  __int128 *v11;
  int *v12;
  char *v13;
  double v14;
  double v15;
  double v16;
  int *v18;
  char v19;
  char v20;
  int v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  char v25;
  int *v26;
  int *v27;
  unsigned __int16 *v28[2];
  char v29;
  char *v30;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v21 = *((_DWORD *)v7 + 4);
  if (v21 < 0)
  {
    v21 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v21;
  }
  if ((unsigned __int16)v21 != 6)
  {
LABEL_3:
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeImage((uint64_t *)&v27, (WebCore::CSSPropertyParserHelpers *)this);
    v10 = v27;
    if (!v27)
    {
LABEL_34:
      *a1 = 0;
      goto LABEL_51;
    }
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, (WebCore::CSSParserTokenRange *)this);
    if (result < 0x10000)
    {
      v10 = 0;
    }
    else
    {
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958C4C18);
      }
      v10 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v10 += 2;
    }
    v27 = v10;
    if (!v10)
      goto LABEL_34;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, v9);
  if ((result & 1) == 0)
    goto LABEL_34;
  v11 = *this;
  if (*this >= this[1])
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v11 & 0x3F) != 0)
    goto LABEL_7;
  v22 = *((_DWORD *)v11 + 4);
  if (v22 < 0)
  {
    v22 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
    *((_DWORD *)v11 + 4) = v22;
  }
  if ((unsigned __int16)v22 != 6)
  {
LABEL_7:
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeImage((uint64_t *)&v26, (WebCore::CSSPropertyParserHelpers *)this);
    v12 = v26;
    if (!v26)
      goto LABEL_46;
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, v9);
    if (result < 0x10000)
    {
      v12 = 0;
    }
    else
    {
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958C4C38);
      }
      v12 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v12 += 2;
    }
    v26 = v12;
    if (!v12)
      goto LABEL_46;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, v9);
  if ((result & 1) != 0)
  {
    v28[0] = 0;
    v30 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<std::variant<WebCore::PercentRaw,WebCore::NumberRaw>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::PercentRaw,WebCore::NumberRaw>::consumeAndResolve((uint64_t)this, v28, (uint64_t)&v30, 0x10100000000, &v23);
    v13 = v30;
    if (v30)
      goto LABEL_62;
    while (1)
    {
      if (v28[0])
        WTF::fastFree((WTF *)(v28[0] - 8), v9);
      if (!v25)
      {
        result = 0;
        goto LABEL_38;
      }
      v28[0] = v23;
      v28[1] = v24;
      if (v24 != 0xFFFFFFFFLL)
        break;
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_62:
      WTF::fastFree((WTF *)(v13 - 16), v9);
    }
    v30 = &v29;
    v14 = ((double (*)(char **, unsigned __int16 **))off_1E339DA78[v24])(&v30, v28);
    v15 = 0.0;
    if (v14 > 0.0)
      v15 = v14;
    if (v14 >= 1.0)
      v16 = 1.0;
    else
      v16 = v15;
    if ((int)v16 <= 0xFF && *(_QWORD *)&v16 == COERCE__INT64((double)(int)v16))
    {
      v18 = &WebCore::staticCSSValuePool[4 * (int)v16 + 2064];
      *v18 += 2;
    }
    else
    {
      v18 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v18 = 2;
      v19 = *((_BYTE *)v18 + 6);
      *((_WORD *)v18 + 2) = 1;
      *((_BYTE *)v18 + 6) = v19 & 0xFC;
      *((double *)v18 + 1) = v16;
    }
    v26 = 0;
    v27 = 0;
    result = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)result = 2;
    v20 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 14336;
    *(_BYTE *)(result + 6) = v20 & 0xFC;
    *(_QWORD *)(result + 8) = v10;
    *(_QWORD *)(result + 16) = v12;
    *(_QWORD *)(result + 24) = v18;
    *(_BYTE *)(result + 32) = a4 == 767;
    v10 = 0;
    v12 = 0;
LABEL_38:
    *a1 = result;
    goto LABEL_47;
  }
LABEL_46:
  *a1 = 0;
LABEL_47:
  v26 = 0;
  if (v12)
  {
    if (*v12 == 2)
    {
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
      v10 = v27;
    }
    else
    {
      *v12 -= 2;
    }
  }
LABEL_51:
  v27 = 0;
  if (v10)
  {
    if (*v10 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v9);
    else
      *v10 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeImageSet(_QWORD *a1, WebCore::CSSPropertyParserHelpers *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  int v8;
  WTF::StringImpl *v9;
  int v11;
  _BYTE *v12;
  int v13;
  int v14;
  _BYTE v15[32];
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE v19[32];

  v17 = v19;
  v18 = 4;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumeImageSetOption(&v16, a2);
    v5 = v16;
    if (!v16)
    {
      *a1 = 0;
      return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v4);
    }
    v6 = HIDWORD(v18);
    if (HIDWORD(v18) == (_DWORD)v18)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, HIDWORD(v18) + 1);
      v6 = HIDWORD(v18);
    }
    *(_QWORD *)&v17[8 * HIDWORD(v18)] = v5;
    HIDWORD(v18) = v6 + 1;
  }
  while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, v4));
  v12 = v15;
  v13 = 4;
  v7 = v17;
  if (v17 == v19)
  {
    v8 = HIDWORD(v18);
    memcpy(v15, v19, 8 * HIDWORD(v18));
  }
  else
  {
    v17 = v19;
    v12 = v7;
    v11 = v18;
    v8 = HIDWORD(v18);
    LODWORD(v18) = 4;
    v13 = v11;
  }
  HIDWORD(v18) = 0;
  v14 = v8;
  WebCore::CSSImageSetValue::create((uint64_t)&v12, &v16);
  *a1 = v16;
  v16 = 0;
  WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v9);
  return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v4);
}

uint64_t *WebCore::CSSPropertyParserHelpers::consumeImageSetOption(uint64_t *a1, WebCore::CSSPropertyParserHelpers *this)
{
  uint64_t *result;
  WTF::StringImpl *v5;
  _DWORD *v6;
  char v7;
  char v8;
  WebCore::CSSPrimitiveValue *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  int v12;
  WebCore::CSSPrimitiveValue *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::CSSPrimitiveValue *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  WebCore::CSSPrimitiveValue *v23;
  WebCore::CSSPrimitiveValue *v24;
  WebCore::CSSPrimitiveValue *v25;
  _DWORD *v26;
  uint64_t *v27;
  _DWORD *v28;

  result = WebCore::CSSPropertyParserHelpers::consumeImage((uint64_t *)&v28, this);
  if (!v28)
  {
    *a1 = 0;
    return result;
  }
  v26 = v28;
  WebCore::CSSImageSetOptionValue::create((uint64_t *)&v26, (uint64_t *)&v27);
  v6 = v26;
  v26 = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
    else
      *v6 -= 2;
  }
  v25 = 0;
  v26 = 0;
  v7 = 1;
  do
  {
    v8 = v7;
    if (*(_QWORD *)this == *((_QWORD *)this + 1))
      break;
    WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(&v24, (uint64_t)this);
    v9 = v24;
    if (!v24)
      break;
    if (v26)
    {
      v14 = WebCore::CSSPrimitiveValue::primitiveType(v24);
      if (WebCore::unitCategory(v14) == 8)
        goto LABEL_25;
      v9 = v24;
    }
    if (v25 && (*((_WORD *)v9 + 2) & 0x7F) == 0x14)
    {
LABEL_25:
      *a1 = 0;
      v12 = 1;
LABEL_13:
      v13 = v24;
      v24 = 0;
      if (!v13)
        goto LABEL_16;
      goto LABEL_14;
    }
    v10 = WebCore::CSSPrimitiveValue::primitiveType(v9);
    if (WebCore::unitCategory(v10) == 8)
    {
      WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=(&v26, (WTF::StringImpl *)&v24);
      v23 = v24;
      v24 = 0;
      WebCore::CSSImageSetOptionValue::setResolution((uint64_t)v27, (WTF::StringImpl *)&v23);
      v11 = v23;
      v23 = 0;
      if (!v11)
      {
LABEL_12:
        v12 = 4;
        goto LABEL_13;
      }
      v16 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v5);
        goto LABEL_12;
      }
LABEL_52:
      *(_DWORD *)v11 = v16;
      goto LABEL_12;
    }
    v13 = v24;
    if ((*((_WORD *)v24 + 2) & 0x7F) == 0x14)
    {
      WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v25, (WTF::StringImpl *)&v24);
      v15 = (uint64_t)v27;
      WebCore::CSSPrimitiveValue::stringValue((uint64_t *)v25, &v22);
      WebCore::CSSImageSetOptionValue::setType(v15, (WTF::StringImpl *)&v22);
      v11 = v22;
      v22 = 0;
      if (!v11)
        goto LABEL_12;
      v16 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v5);
        goto LABEL_12;
      }
      goto LABEL_52;
    }
    v12 = 0;
    v24 = 0;
LABEL_14:
    if (*(_DWORD *)v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v5);
    else
      *(_DWORD *)v13 -= 2;
LABEL_16:
    if (v12 != 4)
    {
      if (v12)
        goto LABEL_34;
      break;
    }
    v7 = 0;
  }
  while ((v8 & 1) != 0);
  v17 = *(__int128 **)this;
  v18 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v18)
    goto LABEL_32;
  if (*(_QWORD *)this >= v18)
  {
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v17 & 0x3F) == 0x15)
  {
LABEL_32:
    v19 = (uint64_t)v27;
    v27 = 0;
  }
  else
  {
    v19 = 0;
  }
  *a1 = v19;
LABEL_34:
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v5);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v26;
  v26 = 0;
  if (v21)
  {
    if (*v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v5);
    else
      *v21 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (uint64_t *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  void *v4;
  unsigned __int16 *v5;
  _BYTE v6[16];
  int v7;
  char v8;
  _WORD v9[3];
  char v10;

  v9[0] = 256;
  *(_DWORD *)&v9[1] = 0;
  v5 = 0;
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::ResolutionRaw,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>::consume<>(v6, a2, &v5, 256);
  if (v5)
    result = WTF::fastFree((WTF *)(v5 - 8), v4);
  if (v8)
  {
    result = (uint64_t)WTF::switchOn<std::variant<WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<WebCore::ResolutionRaw>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw> &,WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_0,WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_1>((uint64_t)a1, (uint64_t)v6, (uint64_t)v9);
    if (v8)
    {
      if (v7 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E339DB30[v7])(&v10, v6);
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

_BYTE *WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::ResolutionRaw,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>::consume<>(_BYTE *result, uint64_t a2, unsigned __int16 **a3, uint64_t a4)
{
  _BYTE *v4;
  __int128 *v5;
  char v6;
  int v7;
  __int16 v8;
  __int128 v9;
  char v10;

  v4 = result;
  v7 = a4;
  v8 = WORD2(a4);
  v5 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  switch(*(_DWORD *)v5 & 0x3F)
  {
    case 1:
      result = WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<WebCore::ResolutionRaw>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>,WebCore::ResolutionRaw,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)result, (__int128 *)a2, a3, &v7);
      break;
    case 9:
      result = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)9,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::ResolutionRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a2, a3, &v7, (uint64_t)&v9);
      v6 = v10;
      if (v10)
      {
        *(_OWORD *)v4 = v9;
        *((_DWORD *)v4 + 4) = 0;
        v6 = 1;
      }
      else
      {
        *v4 = 0;
      }
      v4[24] = v6;
      break;
    default:
      *result = 0;
      result[24] = 0;
      break;
  }
  return result;
}

WebCore::CSSCalcValue *WTF::switchOn<std::variant<WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<WebCore::ResolutionRaw>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw> &,WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_0,WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  __int128 *v6;
  unsigned __int16 **v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;

  v9 = a3;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<WebCore::ResolutionRaw>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>,WebCore::ResolutionRaw,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(v5, v6, v7, v8);
  }
  else
  {
    v10 = &v9;
    return (WebCore::CSSCalcValue *)((uint64_t (*)(uint64_t **))off_1E339DB48[v3])(&v10);
  }
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<WebCore::ResolutionRaw>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>,WebCore::ResolutionRaw,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  int v8;
  uint64_t v9;
  void *v10;
  WebCore::CSSCalcValue *result;
  int v12;
  WebCore::CSSCalcValue *v13;
  int *v14;
  WebCore::CSSParserTokenRange *v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  unsigned int v19;
  __int128 *v20;
  int v21;
  int v22;
  WebCore::CSSCalcValue *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::CSSCalcValue *v28;
  __int128 v29;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v26, a3);
  v8 = *a4;
  v29 = *a2;
  v9 = v26;
  v26 = 0;
  v27 = v9;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v29, 8, &v27, v8, &v28);
  if (v27)
    WTF::fastFree((WTF *)(v27 - 16), v10);
  result = v28;
  if (v28)
    *a2 = v29;
  if (v26)
  {
    v13 = result;
    WTF::fastFree((WTF *)(v26 - 16), v10);
    result = v13;
    if (v13)
    {
LABEL_7:
      v12 = *(_DWORD *)result;
      *(_DWORD *)result += 2;
      *(_QWORD *)a1 = result;
      *(_DWORD *)(a1 + 16) = 1;
      *(_BYTE *)(a1 + 24) = 1;
      if (!v12)
        return (WebCore::CSSCalcValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v10);
      *(_DWORD *)result = v12;
      return result;
    }
  }
  else if (result)
  {
    goto LABEL_7;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v27, a3);
  v14 = *(int **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
  {
    v14 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = (WebCore::CSSCalcValue *)WebCore::CSSParserToken::functionId(v14);
  if ((_DWORD)result != 778)
    goto LABEL_26;
  v29 = *a2;
  result = (WebCore::CSSCalcValue *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v29, v15);
  v16 = (__int128 *)result;
  if (result >= v15)
  {
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v16 & 0x3F) == 0x1C)
  {
    if (result == v15)
    {
      v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v19 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v18 = 1;
      {
        v19 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
      }
    }
    else
    {
      v17 = (__int128 *)result;
      result = (WebCore::CSSCalcValue *)((char *)result + 24);
      v19 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    do
    {
      if (result < v15 || (v18 & 1) != 0)
      {
        if (result >= v15)
          v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v20 = (__int128 *)result;
        v21 = *(_DWORD *)v20;
      }
      else
      {
        v19 = v19 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
        v18 = 1;
        LOBYTE(v21) = v19;
      }
      result = (WebCore::CSSCalcValue *)((char *)result + 24);
    }
    while ((v21 & 0x3F) == 0x10);
    v23 = 0;
    v22 = 0;
    if ((WebCore::CSSCalcValue *)((char *)result - 24) == v15)
    {
      v15 = (WebCore::CSSParserTokenRange *)*((_QWORD *)v17 + 1);
      if (v15)
      {
        v25 = *(_DWORD *)v17;
        *a2 = v29;
        if ((v25 & 0x400000) != 0)
          result = (WebCore::CSSCalcValue *)WTF::String::String();
        else
          result = (WebCore::CSSCalcValue *)WTF::String::String();
        v23 = v28;
        v22 = 1;
      }
    }
  }
  else
  {
LABEL_26:
    v22 = 0;
    v23 = 0;
  }
  if (!v27)
  {
    if (v22)
      goto LABEL_29;
LABEL_47:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  result = (WebCore::CSSCalcValue *)WTF::fastFree((WTF *)(v27 - 16), v15);
  if (!v22)
    goto LABEL_47;
LABEL_29:
  if (v23)
  {
    v24 = *(_DWORD *)v23;
    *(_DWORD *)v23 += 2;
    *(_QWORD *)a1 = v23;
    *(_DWORD *)(a1 + 16) = 2;
    *(_BYTE *)(a1 + 24) = 1;
    if (v24)
      *(_DWORD *)v23 = v24;
    else
      return (WebCore::CSSCalcValue *)WTF::StringImpl::destroy(v23, v15);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 16) = 2;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResolutionRawENS8_15UnevaluatedCalcIS9_EENS8_24CSSPropertyParserHelpers23ImageSetTypeFunctionRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResolutionRawENS8_15UnevaluatedCalcIS9_EENS8_24CSSPropertyParserHelpers23ImageSetTypeFunctionRawEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

__int128 **WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)9,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::ResolutionRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>@<X0>(__int128 **a1@<X0>, unsigned __int16 **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 **result;
  void *v8;
  uint64_t v9;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v9, a2);
  result = WebCore::CSSPropertyParserHelpers::ResolutionKnownTokenTypeDimensionConsumer::consume(a1, *a3, a4);
  if (v9)
    return (__int128 **)WTF::fastFree((WTF *)(v9 - 16), v8);
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_0,WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw> &>@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  int v3;
  double v4;
  int *v6;
  int *result;
  int v8;
  BOOL v9;
  char v11;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  if (v3 == 6)
  {
    if ((int)v4 > 0xFF || *(_QWORD *)&v4 != COERCE__INT64((double)(int)v4))
      goto LABEL_20;
    v6 = &WebCore::staticCSSValuePool[4 * (int)v4];
    v8 = v6[16];
    result = v6 + 16;
    *result = v8 + 2;
  }
  else
  {
    if (v3 == 1)
    {
      if ((int)v4 <= 0xFF && *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
      {
        result = &WebCore::staticCSSValuePool[4 * (int)v4 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v3 != 3
      || ((int)v4 <= 0xFF
        ? (v9 = *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
        : (v9 = 0),
          !v9))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v11 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v3 & 0x7F;
      *((_BYTE *)result + 6) = v11 & 0xFC;
      *((double *)result + 1) = v4;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * (int)v4 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_0,WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw> &>@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_0,WebCore::CSSPropertyParserHelpers::consumeImageSetResolutionOrTypeFunction(WebCore::CSSParserTokenRange &,WebCore::ValueRange)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::ResolutionRaw,WebCore::UnevaluatedCalc<std::__variant_detail::_Trait>,WebCore::CSSPropertyParserHelpers::ImageSetTypeFunctionRaw> &>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;
  int v7;

  v3 = *a1;
  if (*a1)
    *(_DWORD *)v3 += 2;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 20;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  if (v3)
  {
    v7 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    *a2 = result;
    if (v7)
      *(_DWORD *)v3 = v7;
    else
      return WTF::StringImpl::destroy(v3, v5);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeInteger(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  unsigned __int16 *v5;

  v4 = 0;
  v5 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve(this, &v5, (uint64_t)&v4, 0x10100000000, a2);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v3);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 8), v3);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIntegerTypeRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>(uint64_t a1)
{
  unint64_t v1;
  void *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;

  v7 = 0;
  v6 = 0;
  v1 = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve(a1, &v7, (uint64_t)&v6);
  if (v6)
  {
    v4 = v1;
    WTF::fastFree((WTF *)(v6 - 16), v2);
    v1 = v4;
  }
  if (v7)
  {
    v5 = v1;
    WTF::fastFree((WTF *)(v7 - 8), v2);
    v1 = v5;
  }
  if ((v1 & 0xFF00000000) != 0)
    return v1 | 0x100000000;
  else
    return 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIntegerTypeRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>(uint64_t a1)
{
  unint64_t v1;
  void *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;

  v7 = 0;
  v6 = 0;
  v1 = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::consumeAndResolve(a1, &v7, (uint64_t)&v6);
  if (v6)
  {
    v4 = v1;
    WTF::fastFree((WTF *)(v6 - 16), v2);
    v1 = v4;
  }
  if (v7)
  {
    v5 = v1;
    WTF::fastFree((WTF *)(v7 - 8), v2);
    v1 = v5;
  }
  if ((v1 & 0xFF00000000) != 0)
    return v1 | 0x100000000;
  else
    return 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIntegerType<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  unsigned __int16 *v5;

  v4 = 0;
  v5 = 0;
  result = WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::consumeAndResolve(a1, a2, &v5, (uint64_t)&v4);
  if (v4)
    result = WTF::fastFree((WTF *)(v4 - 16), v3);
  if (v5)
    return WTF::fastFree((WTF *)(v5 - 8), v3);
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeDimensionConsumer::consume(__int128 *result, __int128 **a2, __int16 a3)
{
  __int128 *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  BOOL v7;
  __int16 v8;
  __int128 *v9;
  __int128 **v10;
  __int128 **v11;
  __int128 **v12;

  v3 = *a2;
  if (*a2 >= a2[1])
  {
    {
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v9 = result;
      v12 = a2;
      v8 = a3;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      a3 = v8;
      result = v9;
      a2 = v12;
    }
  }
  v4 = (*(_DWORD *)v3 >> 11) & 0x7F;
  if ((v4 - 4) >= 8
    && ((v6 = (v4 - 25), v6 > 0x38)
     || ((1 << (((*(_DWORD *)v3 >> 11) & 0x7Fu) - 25)) & 0xFF383FFFFFFFLL) == 0
     && (v6 == 56 ? (v7 = a3 == 4) : (v7 = 0), !v7))
    || (v5 = *((double *)v3 + 2), (a3 & 0xFF00) == 0x100) && v5 < 0.0
    || fabs(v5) == INFINITY)
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = v4;
    *((double *)result + 1) = v5;
    *((_BYTE *)result + 16) = 1;
    result = *a2;
    if (*a2 == a2[1])
    {
      {
        v11 = a2;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a2 = v11;
        result = *v11;
      }
    }
    else
    {
      result = (__int128 *)((char *)result + 24);
      *a2 = result;
    }
    while (1)
    {
      if (result >= a2[1])
      {
        result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v10 = a2;
          result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          a2 = v10;
        }
      }
      if ((*(_DWORD *)result & 0x3F) != 0x10)
        break;
      result = (__int128 *)((char *)*a2 + 24);
      *a2 = result;
    }
  }
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeNumberConsumer::consume(__int128 *result, __int128 **a2, uint64_t a3)
{
  __int128 *v3;
  double v4;
  uint64_t v5;
  __int128 *v6;
  __int128 **v7;
  __int128 **v8;
  __int128 **v9;

  v3 = *a2;
  if (*a2 >= a2[1])
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v6 = result;
      v9 = a2;
      v5 = a3;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a3 = v5;
      result = v6;
      a2 = v9;
    }
  }
  v4 = *((double *)v3 + 2);
  if ((v4 != 0.0 || (a3 & 0x10000000000) != 0)
    && a3 != 2
    && (a3 != 1 || (a3 & 0x100000000) != 0)
    || (a3 & 0xFF00) == 0x100 && v4 < 0.0
    || fabs(v4) == INFINITY)
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 6;
    *((double *)result + 1) = v4;
    *((_BYTE *)result + 16) = 1;
    result = *a2;
    if (*a2 == a2[1])
    {
      {
        v8 = a2;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a2 = v8;
        result = *v8;
      }
    }
    else
    {
      result = (__int128 *)((char *)result + 24);
      *a2 = result;
    }
    while (1)
    {
      if (result >= a2[1])
      {
        result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v7 = a2;
          result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          a2 = v7;
        }
      }
      if ((*(_DWORD *)result & 0x3F) != 0x10)
        break;
      result = (__int128 *)((char *)*a2 + 24);
      *a2 = result;
    }
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 *v8;
  void *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  _BYTE v12[16];
  int v13;
  char v14;
  int v15;
  __int16 v16;
  _QWORD v17[2];
  _QWORD *v18;

  v8 = *a2;
  *a2 = 0;
  v11 = v8;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::LengthRaw>::consume<>(a1, &v11, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v12);
  v10 = v11;
  if (v11)
    goto LABEL_10;
  while (1)
  {
    if (!v14)
    {
      *a5 = 0;
      return;
    }
    v15 = a4;
    v16 = WORD2(a4);
    v17[0] = a3;
    v17[1] = &v15;
    if (v13 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    WTF::fastFree((WTF *)(v10 - 8), v9);
  }
  v18 = v17;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS6_6RefPtrINS8_17CSSPrimitiveValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS9_29CSSPrimitiveValueResolverBaseEJNS8_9LengthRawEEE7resolveERKNS_7variantIJSJ_NS8_15UnevaluatedCalcISJ_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSJ_SN_EEEEEEDcOSV_DpOT0____fmatrix[v13])(&v18, v12);
  if (v14)
  {
    if (v13 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore9LengthRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(v17, v12);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<std::variant<WebCore::LengthRaw,WebCore::PercentRaw>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::LengthRaw,WebCore::PercentRaw>::consumeAndResolve@<X0>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned __int16 *v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  _BYTE v13[16];
  int v14;
  char v15;
  int v16;
  __int16 v17;
  _QWORD v18[2];
  _QWORD *v19;

  v8 = *a2;
  *a2 = 0;
  v12 = v8;
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::LengthRaw,WebCore::PercentRaw>::consume<>(a1, &v12, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v13);
  v11 = v12;
  if (v12)
    goto LABEL_10;
  while (1)
  {
    if (!v15)
    {
      *a5 = 0;
      a5[24] = 0;
      return result;
    }
    v16 = a4;
    v17 = WORD2(a4);
    v18[0] = a3;
    v18[1] = &v16;
    if (v14 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    result = WTF::fastFree((WTF *)(v11 - 8), v10);
  }
  v19 = v18;
  result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNS8_9LengthRawENS8_10PercentRawEEEEEENS9_15RawResolverBaseEJSD_SE_EE7resolveERKNSC_IJSD_NS8_15UnevaluatedCalcISD_EESE_NSJ_ISE_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSD_SK_SE_SL_EEEEEEDcOST_DpOT0____fmatrix[v14])(&v19, v13);
  if (v15)
  {
    if (v14 != -1)
      return ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore9LengthRawENS6_15UnevaluatedCalcIS7_EENS6_10PercentRawENS8_ISA_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v14])(v18, v13);
  }
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  __int128 *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v24;
  unsigned int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int *v32;
  int v33;
  unsigned int v34;
  double v35;
  __int128 *v36;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  char v42;
  char v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;

  result = *(__int128 **)a1;
  if ((unint64_t)result >= *(_QWORD *)(a1 + 8))
  {
    {
      result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  switch(*(_DWORD *)result & 0x3F)
  {
    case 1:
      v26 = *(int **)a1;
      if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
      {
        {
          v26 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v26 = (int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      result = (__int128 *)WebCore::CSSParserToken::functionId(v26);
      if ((_DWORD)result == 1017)
      {
        if (!a7)
          goto LABEL_39;
        return WebCore::CSSPropertyParserHelpers::consumeAnchor((__int128 *)a1, a2, a8);
      }
      else
      {
        v44 = 0;
        v27 = 0x10000000000;
        if (!a5)
          v27 = 0;
        v28 = 0x100000000;
        if (!a4)
          v28 = 0;
        v29 = 0x1000000;
        if (!a6)
          v29 = 0;
        v30 = 0x10000;
        if (!a7)
          v30 = 0;
        WebCore::CSSPropertyParserHelpers::CalcParser::CalcParser((uint64_t)&v45, a1, 1u, &v44, v29 | v30 | v27 | ((unint64_t)a3 << 8) | v28 | a2);
        if (v44)
          WTF::fastFree((WTF *)(v44 - 16), v31);
        result = (__int128 *)v47;
        if (!v47)
          goto LABEL_39;
        v38 = *(unsigned __int8 *)(*(_QWORD *)(v47 + 8) + 12);
        if ((v38 > 4 || ((1 << v38) & 0x16) == 0)
          && ((_DWORD)a2 != 2 || v38 != 3 && *(_BYTE *)(*(_QWORD *)(v47 + 8) + 12)))
        {
          v47 = 0;
          if (*(_DWORD *)result == 2)
            result = (__int128 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v31);
          else
            *(_DWORD *)result -= 2;
          goto LABEL_39;
        }
        *v45 = v46;
        v39 = v47;
        v47 = 0;
        v40 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v40 = 2;
        v42 = *(_BYTE *)(v40 + 6);
        *(_WORD *)(v40 + 4) = 73;
        *(_BYTE *)(v40 + 6) = v42 & 0xFC;
        *(_QWORD *)(v40 + 8) = v39;
        *a8 = v40;
        result = (__int128 *)v47;
        v47 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (__int128 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v41);
          else
            *(_DWORD *)result -= 2;
        }
      }
      return result;
    case 7:
      v17 = 0x10000000000;
      if (!a5)
        v17 = 0;
      v18 = 0x100000000;
      if (!a4)
        v18 = 0;
      v19 = 0x1000000;
      if (!a6)
        v19 = 0;
      v20 = 0x10000;
      if (!a7)
        v20 = 0;
      result = WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeNumberConsumer::consume((__int128 *)&v45, (__int128 **)a1, v18 | a2 | ((unint64_t)a3 << 8) | v17 | v19 | v20);
      goto LABEL_12;
    case 8:
      result = *(__int128 **)a1;
      if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
      {
        {
          result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      v35 = *((double *)result + 2);
      if (a3 == 1 && v35 < 0.0 || fabs(v35) == INFINITY)
        goto LABEL_39;
      v36 = *(__int128 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v36 = *(__int128 **)a1;
        }
      }
      else
      {
        v36 = (__int128 *)((char *)v36 + 24);
        *(_QWORD *)a1 = v36;
      }
      while (1)
      {
        if ((unint64_t)v36 >= *(_QWORD *)(a1 + 8))
        {
          v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v36 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v36 & 0x3F) != 0x10)
          break;
        v36 = (__int128 *)(*(_QWORD *)a1 + 24);
        *(_QWORD *)a1 = v36;
      }
      v25 = (int)v35;
      if ((int)v35 <= 0xFF && *(_QWORD *)&v35 == COERCE__INT64((double)(int)v35))
        goto LABEL_59;
      result = (__int128 *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 2;
      v43 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = 3;
      *((_BYTE *)result + 6) = v43 & 0xFC;
      *((double *)result + 1) = v35;
      goto LABEL_19;
    case 9:
      result = WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeDimensionConsumer::consume((__int128 *)&v45, (__int128 **)a1, (unsigned __int16)a2 | (unsigned __int16)((_WORD)a3 << 8));
LABEL_12:
      if (!BYTE8(v46))
        goto LABEL_39;
      v21 = (char)v45;
      v22 = v46;
      if (v45 != 6)
      {
        if (v45 == 1)
        {
          v34 = (int)*(double *)&v46;
          if ((int)*(double *)&v46 <= 0xFF && (_QWORD)v46 == COERCE__INT64((double)v34))
          {
            result = (__int128 *)&WebCore::staticCSSValuePool[4 * v34 + 2064];
            *(_DWORD *)result += 2;
            goto LABEL_19;
          }
        }
        else if (v45 == 3)
        {
          v25 = (int)*(double *)&v46;
          if ((int)*(double *)&v46 <= 0xFF && (_QWORD)v46 == COERCE__INT64((double)v25))
          {
LABEL_59:
            result = (__int128 *)&WebCore::staticCSSValuePool[4 * v25 + 1040];
            *(_DWORD *)result += 2;
            goto LABEL_19;
          }
        }
LABEL_18:
        result = (__int128 *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 2;
        v24 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = v21 & 0x7F;
        *((_BYTE *)result + 6) = v24 & 0xFC;
        *((_QWORD *)result + 1) = v22;
        goto LABEL_19;
      }
      if ((int)*(double *)&v46 > 0xFF
        || (_QWORD)v46 != COERCE__INT64((double)(int)*(double *)&v46))
      {
        goto LABEL_18;
      }
      v32 = &WebCore::staticCSSValuePool[4 * (int)*(double *)&v46];
      v33 = v32[16];
      result = (__int128 *)(v32 + 16);
      *(_DWORD *)result = v33 + 2;
LABEL_19:
      *a8 = (uint64_t)result;
      return result;
    default:
LABEL_39:
      *a8 = 0;
      return result;
  }
}

unint64_t WebCore::CSSPropertyParserHelpers::PercentKnownTokenTypePercentConsumer::consume(__int128 **a1, uint64_t a2, __int16 a3)
{
  __int128 *v3;
  double v4;
  unsigned __int8 v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 **v10;
  __int128 **v11;
  __int128 **v12;
  __int16 v13;
  unint64_t v14;

  v3 = *a1;
  if (*a1 >= a1[1])
  {
    {
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = a1;
      v13 = a3;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      a3 = v13;
      a1 = v12;
    }
  }
  v4 = *((double *)v3 + 2);
  if ((a3 & 0xFF00) == 0x100 && v4 < 0.0 || fabs(v4) == INFINITY)
  {
    v6 = 0;
    v8 = 0;
  }
  else
  {
    v5 = *((_QWORD *)v3 + 2);
    v6 = *(_QWORD *)&v4 & 0xFFFFFFFFFFFFFF00;
    v7 = *a1;
    if (*a1 == a1[1])
    {
      {
        v14 = *(_QWORD *)&v4 & 0xFFFFFFFFFFFFFF00;
        v11 = a1;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v6 = v14;
        a1 = v11;
        v7 = *v11;
      }
    }
    else
    {
      v7 = (__int128 *)((char *)v7 + 24);
      *a1 = v7;
    }
    while (1)
    {
      if (v7 >= a1[1])
      {
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v10 = a1;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          a1 = v10;
        }
      }
      if ((*(_DWORD *)v7 & 0x3F) != 0x10)
        break;
      v7 = (__int128 *)((char *)*a1 + 24);
      *a1 = v7;
    }
    v8 = v5;
  }
  return v8 | v6;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::PercentRaw>::resolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  __int16 v8;
  _QWORD v9[2];
  _QWORD *v10;

  v7 = a4;
  v8 = WORD2(a4);
  v9[0] = a3;
  v9[1] = &v7;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSPropertyParserHelpers::NoneKnownTokenTypeIdentConsumer::consume(v6);
  }
  else
  {
    v10 = v9;
    return ((uint64_t (*)(_QWORD **))off_1E339DC70[v4])(&v10);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::NoneKnownTokenTypeIdentConsumer::consume(uint64_t a1)
{
  __int128 *v2;
  int v3;
  int v5;
  __int128 *v6;
  __int128 *v7;

  v2 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v2 & 0x3F) != 0)
    goto LABEL_3;
  v5 = *((_DWORD *)v2 + 4);
  if (v5 < 0)
  {
    v5 = WebCore::cssValueKeywordID(*((_QWORD *)v2 + 1), *((unsigned int *)v2 + 1) | ((unint64_t)((*(_DWORD *)v2 >> 22) & 1) << 32));
    *((_DWORD *)v2 + 4) = v5;
  }
  if ((unsigned __int16)v5 != 6)
  {
LABEL_3:
    v3 = 0;
  }
  else
  {
    v6 = *(__int128 **)a1;
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    {
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v6 = *(__int128 **)a1;
      }
    }
    else
    {
      v6 = (__int128 *)((char *)v6 + 24);
      *(_QWORD *)a1 = v6;
    }
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if ((unint64_t)v6 >= *(_QWORD *)(a1 + 8))
      {
        v6 = v7;
        {
          v7 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v7, 30, 0);
          v6 = v7;
        }
      }
      if ((*(_DWORD *)v6 & 0x3F) != 0x10)
        break;
      v6 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v6;
    }
    v3 = 1;
  }
  return (v3 << 8);
}

void WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeFunctionConsumer::consume(__int128 *a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  void *v7;
  WebCore::CSSCalcValue *v8;
  uint64_t v9;
  WebCore::CSSCalcValue *v10;
  __int128 v11;

  v11 = *a1;
  v6 = *a2;
  *a2 = 0;
  v9 = v6;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v11, 0, &v9, a3, &v10);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), v7);
  v8 = v10;
  if (v10)
  {
    *a1 = v11;
    *(_QWORD *)a4 = v8;
    LOBYTE(v8) = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 8) = (_BYTE)v8;
}

uint64_t WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeNumberConsumer::consume(__int128 **a1, uint64_t a2, __int16 a3)
{
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  __int128 **v7;
  __int128 **v8;
  __int128 **v9;
  __int16 v10;

  v3 = *a1;
  if (*a1 >= a1[1])
  {
    {
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v9 = a1;
      v10 = a3;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      a3 = v10;
      a1 = v9;
    }
  }
  if ((a3 & 0xFF00) == 0x100 && *((double *)v3 + 2) < 0.0)
    return 0;
  v4 = *((_QWORD *)v3 + 2);
  v5 = *a1;
  if (*a1 == a1[1])
  {
    {
      v8 = a1;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a1 = v8;
      v5 = *v8;
    }
  }
  else
  {
    v5 = (__int128 *)((char *)v5 + 24);
    *a1 = v5;
  }
  while (1)
  {
    if (v5 >= a1[1])
    {
      v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v7 = a1;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a1 = v7;
      }
    }
    if ((*(_DWORD *)v5 & 0x3F) != 0x10)
      break;
    v5 = (__int128 *)((char *)*a1 + 24);
    *a1 = v5;
  }
  return v4;
}

unint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(__int128 **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v13;
  char v14[8];
  int v15;
  char v16;
  int v17;
  __int16 v18;
  _QWORD v19[2];
  _QWORD *v20;

  v6 = *a2;
  *a2 = 0;
  v13 = v6;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::NumberRaw>::consume<>(a1, &v13, a4, (uint64_t)v14);
  v8 = v13;
  if (v13)
    goto LABEL_10;
  while (1)
  {
    if (!v16)
    {
      v10 = 0;
      v11 = 0;
      return v10 | (v11 << 8);
    }
    v17 = a4;
    v18 = WORD2(a4);
    v19[0] = a3;
    v19[1] = &v17;
    if (v15 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    WTF::fastFree((WTF *)(v8 - 16), v7);
  }
  v20 = v19;
  v9 = ((uint64_t (*)(_QWORD **, char *))off_1E339DC80[v15])(&v20, v14);
  v10 = v9;
  v11 = v9 >> 8;
  if (v16 && v15 != -1)
    ((void (*)(_QWORD *, char *))off_1E339DB80[v15])(v19, v14);
  return v10 | (v11 << 8);
}

void WebCore::CSSPropertyParserHelpers::PercentKnownTokenTypeFunctionConsumer::consume(__int128 *a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  void *v7;
  WebCore::CSSCalcValue *v8;
  uint64_t v9;
  WebCore::CSSCalcValue *v10;
  __int128 v11;

  v11 = *a1;
  v6 = *a2;
  *a2 = 0;
  v9 = v6;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v11, 2, &v9, a3, &v10);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), v7);
  v8 = v10;
  if (v10)
  {
    *a1 = v11;
    *(_QWORD *)a4 = v8;
    LOBYTE(v8) = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 8) = (_BYTE)v8;
}

unint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::PercentRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::PercentRaw>::consumeAndResolve(WebCore::CSSCalcValue *a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v6;
  void *v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unsigned __int16 *v13;
  char v14[8];
  int v15;
  char v16;
  int v17;
  __int16 v18;
  _QWORD v19[2];
  _QWORD *v20;

  v6 = *a2;
  *a2 = 0;
  v13 = v6;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw>::consume<>(a1, &v13, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v14);
  v8 = v13;
  if (v13)
    goto LABEL_10;
  while (1)
  {
    if (!v16)
    {
      v10 = 0;
      v11 = 0;
      return v10 | (v11 << 8);
    }
    v17 = a4;
    v18 = WORD2(a4);
    v19[0] = a3;
    v19[1] = &v17;
    if (v15 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    WTF::fastFree((WTF *)(v8 - 8), v7);
  }
  v20 = v19;
  v9 = ((uint64_t (*)(_QWORD **, char *))off_1E339DC90[v15])(&v20, v14);
  v10 = v9;
  v11 = v9 >> 8;
  if (v16 && v15 != -1)
    ((void (*)(_QWORD *, char *))off_1E339DB70[v15])(v19, v14);
  return v10 | (v11 << 8);
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::PercentRaw>::consumeAndResolve@<X0>(WebCore::CSSCalcValue *a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  _BYTE v12[8];
  int v13;
  char v14;
  char v15;

  v7 = *a2;
  *a2 = 0;
  v11 = v7;
  v8 = a4 & 0xFFFFFFFFFFFFLL;
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw>::consume<>(a1, &v11, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v12);
  if (v11)
    result = WTF::fastFree((WTF *)(v11 - 8), v10);
  if (v14)
  {
    result = WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::PercentRaw>::resolve((uint64_t)a5, (uint64_t)v12, a3, v8);
    if (v14)
    {
      if (v13 != -1)
        return ((uint64_t (*)(char *, _BYTE *))off_1E339DB70[v13])(&v15, v12);
    }
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumePercentDividedBy100OrNumber@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  unsigned int v3;
  __int128 *result;
  int v7;
  double v8;
  __int128 *v9;
  char v11;
  unint64_t v12;
  void *v13;
  _DWORD *v14;
  void *v15;
  char v16;
  void *v17;
  _DWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  char v26;

  v3 = a2;
  result = *(__int128 **)a1;
  if ((unint64_t)result >= *(_QWORD *)(a1 + 8))
  {
    {
      *(double *)&result = COERCE_DOUBLE(&WebCore::CSSParserTokenRange::eofToken(void)::eofToken);
    }
    else
    {
      *(double *)&result = COERCE_DOUBLE(WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0));
    }
  }
  v7 = *(_DWORD *)result & 0x3F;
  if (v7 != 7)
  {
    if (v7 == 8)
    {
      *(double *)&result = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::PercentKnownTokenTypePercentConsumer::consume((__int128 **)a1, a2, (_WORD)v3 << 8));
      if (v16)
      {
        *(double *)&result = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::create(*(double *)&result / 100.0, a3));
        return result;
      }
      goto LABEL_44;
    }
    if (v7 == 1)
    {
      v24 = 0;
      v12 = ((unint64_t)v3 << 8) | 0x10100000000;
      WebCore::CSSPropertyParserHelpers::NumberKnownTokenTypeFunctionConsumer::consume((__int128 *)a1, &v24, v12, (uint64_t)&v25);
      if (v24)
        WTF::fastFree((WTF *)(v24 - 16), v13);
      if (v26)
      {
        v14 = v25;
        *v25 += 2;
        v21 = 0;
        v22 = v14;
        v23 = 1;
        WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::NumberRaw>::resolve((uint64_t)a3, (uint64_t)&v22, (uint64_t)&v21, v12);
        if (v21)
          WTF::fastFree((WTF *)(v21 - 16), v15);
        if (v23 != -1)
          ((void (*)(uint64_t *, _DWORD **))off_1E339DB80[v23])(&v21, &v22);
        *(double *)&result = COERCE_DOUBLE(std::optional<WebCore::UnevaluatedCalc<WebCore::NumberRaw>>::~optional((uint64_t)&v25, (WTF::StringImpl *)v15));
        return result;
      }
      std::optional<WebCore::UnevaluatedCalc<WebCore::NumberRaw>>::~optional((uint64_t)&v25, (WTF::StringImpl *)v13);
      v20 = 0;
      WebCore::CSSPropertyParserHelpers::PercentKnownTokenTypeFunctionConsumer::consume((__int128 *)a1, &v20, v12, (uint64_t)&v25);
      if (v20)
        WTF::fastFree((WTF *)(v20 - 16), v17);
      if (v26)
      {
        v18 = v25;
        *v25 += 2;
        v21 = 0;
        v22 = v18;
        v23 = 1;
        WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::PercentRaw>::resolve((uint64_t)a3, (uint64_t)&v22, (uint64_t)&v21, v12);
        if (v21)
          WTF::fastFree((WTF *)(v21 - 16), v19);
        if (v23 != -1)
          ((void (*)(uint64_t *, _DWORD **))off_1E339DB70[v23])(&v21, &v22);
        *(double *)&result = COERCE_DOUBLE(std::optional<WebCore::UnevaluatedCalc<WebCore::NumberRaw>>::~optional((uint64_t)&v25, (WTF::StringImpl *)v19));
        return result;
      }
      *(double *)&result = COERCE_DOUBLE(std::optional<WebCore::UnevaluatedCalc<WebCore::NumberRaw>>::~optional((uint64_t)&v25, (WTF::StringImpl *)v17));
    }
LABEL_44:
    *a3 = 0;
    return result;
  }
  result = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    {
      *(double *)&result = COERCE_DOUBLE(&WebCore::CSSParserTokenRange::eofToken(void)::eofToken);
    }
    else
    {
      *(double *)&result = COERCE_DOUBLE(WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0));
    }
  }
  v8 = *((double *)result + 2);
  if (v3 == 1 && v8 < 0.0)
    goto LABEL_44;
  v9 = *(__int128 **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v9 = *(__int128 **)a1;
    }
  }
  else
  {
    v9 = (__int128 *)((char *)v9 + 24);
    *(_QWORD *)a1 = v9;
  }
  while (1)
  {
    if ((unint64_t)v9 >= *(_QWORD *)(a1 + 8))
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v9 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0x10)
      break;
    v9 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v9;
  }
  if ((int)v8 <= 0xFF && *(_QWORD *)&v8 == COERCE__INT64((double)(int)v8))
  {
    result = (__int128 *)&WebCore::staticCSSValuePool[4 * (int)v8 + 2064];
    *(_DWORD *)result += 2;
  }
  else
  {
    *(double *)&result = COERCE_DOUBLE(WTF::fastCompactMalloc((WTF *)0x10));
    *(_DWORD *)result = 2;
    v11 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 1;
    *((_BYTE *)result + 6) = v11 & 0xFC;
    *((double *)result + 1) = v8;
  }
  *a3 = (int *)result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::NumberRaw>::resolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  __int16 v8;
  _QWORD v9[2];
  _QWORD *v10;

  v7 = a4;
  v8 = WORD2(a4);
  v9[0] = a3;
  v9[1] = &v7;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::optional<WebCore::UnevaluatedCalc<WebCore::NumberRaw>>::~optional(v6);
  }
  else
  {
    v10 = v9;
    return ((uint64_t (*)(_QWORD **))off_1E339DCC0[v4])(&v10);
  }
}

uint64_t std::optional<WebCore::UnevaluatedCalc<WebCore::NumberRaw>>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = *(_DWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
      else
        *v3 -= 2;
    }
  }
  return a1;
}

void WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<std::variant<WebCore::PercentRaw,WebCore::NumberRaw>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::PercentRaw,WebCore::NumberRaw>::consumeAndResolve(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  unsigned __int16 *v8;
  void *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  _BYTE v12[8];
  int v13;
  char v14;
  int v15;
  __int16 v16;
  _QWORD v17[2];
  _QWORD *v18;

  v8 = *a2;
  *a2 = 0;
  v11 = v8;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::PercentRaw,WebCore::NumberRaw>::consume<>(a1, &v11, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v12);
  v10 = v11;
  if (v11)
    goto LABEL_10;
  while (1)
  {
    if (!v14)
    {
      *a5 = 0;
      a5[16] = 0;
      return;
    }
    v15 = a4;
    v16 = WORD2(a4);
    v17[0] = a3;
    v17[1] = &v15;
    if (v13 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    WTF::fastFree((WTF *)(v10 - 8), v9);
  }
  v18 = v17;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNS8_10PercentRawENS8_9NumberRawEEEEEENS9_15RawResolverBaseEJSD_SE_EE7resolveERKNSC_IJSD_NS8_15UnevaluatedCalcISD_EESE_NSJ_ISE_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSD_SK_SE_SL_EEEEEEDcOST_DpOT0____fmatrix[v13])(&v18, v12);
  if (v14)
  {
    if (v13 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10PercentRawENS6_15UnevaluatedCalcIS7_EENS6_9NumberRawENS8_ISA_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v13])(v17, v12);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::positionFromFourValues(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = *((_QWORD *)a2 + v4);
    if (!v7)
    {
      *(_QWORD *)v3 = v5;
      *(_QWORD *)(v3 + 8) = v6;
      *(_BYTE *)(v3 + 16) = 1;
      return result;
    }
    if ((*(_WORD *)(v7 + 4) & 0x7F) != 0x50)
      break;
    v8 = *(unsigned __int16 *)(v7 + 8);
    if (v8 == 260)
      break;
    if (v4 >= 4)
      goto LABEL_22;
    v9 = *((_QWORD *)a2 + v4 + 1);
    if (v9 && (*(_WORD *)(v9 + 4) & 0x7F) != 0x50)
    {
      *((_QWORD *)a2 + v4) = 0;
      *((_QWORD *)a2 + v4 + 1) = 0;
      result = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)result = 2;
      v10 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
      *(_BYTE *)(result + 7) = 1;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)(result + 16) = v9;
      *(_WORD *)(result + 4) = -18432;
      *(_BYTE *)(result + 6) = BYTE2(v10);
      v7 = result;
      ++v4;
    }
    else
    {
      *((_QWORD *)a2 + v4) = 0;
    }
    v11 = *(_DWORD *)v7;
    if ((v8 & 0xFFFE) != 0x102)
    {
      if (!v6)
      {
        v11 += 2;
        *(_DWORD *)v7 = v11;
        v12 = 1;
        v6 = (_DWORD *)v7;
        goto LABEL_16;
      }
LABEL_14:
      v12 = 0;
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 16) = 0;
      goto LABEL_16;
    }
    if (v5)
      goto LABEL_14;
    v11 += 2;
    *(_DWORD *)v7 = v11;
    v12 = 1;
    v5 = (_DWORD *)v7;
LABEL_16:
    v13 = v11 - 2;
    if (v13)
    {
      *(_DWORD *)v7 = v13;
      if (!v12)
        goto LABEL_24;
    }
    else
    {
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v7, a2);
      if (!v12)
        goto LABEL_24;
    }
    if (v4++ >= 4)
    {
LABEL_22:
      __break(1u);
      break;
    }
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 16) = 0;
LABEL_24:
  if (!v6)
  {
LABEL_27:
    if (!v5)
      return result;
LABEL_28:
    if (*v5 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    *v5 -= 2;
    return result;
  }
  if (*v6 != 2)
  {
    *v6 -= 2;
    goto LABEL_27;
  }
  result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
  if (v5)
    goto LABEL_28;
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::backgroundPositionFromThreeValues(_DWORD *result, WTF::StringImpl *a2)
{
  _DWORD *v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD **v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _QWORD v18[2];
  _DWORD *v19;
  _DWORD *v20;

  v3 = result;
  v4 = 0;
  v5 = 0;
  v19 = 0;
  v20 = 0;
  while (1)
  {
    v6 = (uint64_t *)((char *)a2 + 8 * v4);
    v7 = *v6;
    if (!*v6)
    {
      v15 = v20;
      if (v5)
      {
        v16 = v19;
        if (v20)
        {
          if (v19)
          {
LABEL_39:
            *(_BYTE *)v3 = 0;
            *((_BYTE *)v3 + 16) = 0;
            goto LABEL_40;
          }
          v16 = v5;
        }
        else
        {
          v15 = v5;
        }
      }
      else
      {
        v16 = v19;
      }
      v19 = 0;
      v20 = 0;
      v18[0] = 0;
      v18[1] = 0;
      *(_QWORD *)v3 = v15;
      *((_QWORD *)v3 + 1) = v16;
      *((_BYTE *)v3 + 16) = 1;
      WebCore::CSSPropertyParserHelpers::PositionCoordinates::~PositionCoordinates((WebCore::CSSPropertyParserHelpers::PositionCoordinates *)v18, a2);
      goto LABEL_30;
    }
    if ((*(_WORD *)(v7 + 4) & 0x7F) != 0x50)
      break;
    v8 = *(unsigned __int16 *)(v7 + 8);
    if (v8 == 260)
    {
      if (v5)
        goto LABEL_39;
      *v6 = 0;
      v5 = (_DWORD *)v7;
      goto LABEL_22;
    }
    v18[0] = 0;
    if (v4 >= 4)
      goto LABEL_53;
    v9 = *((_QWORD *)a2 + v4 + 1);
    if (!v9 || (*(_WORD *)(v9 + 4) & 0x7F) == 0x50)
    {
      *v6 = 0;
      v18[0] = v7;
    }
    else
    {
      *v6 = 0;
      v6[1] = 0;
      v10 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v10 = 2;
      v11 = (*(unsigned __int8 *)(v10 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_BYTE *)(v10 + 7) = 1;
      *(_QWORD *)(v10 + 8) = v7;
      *(_QWORD *)(v10 + 16) = v9;
      *(_WORD *)(v10 + 4) = -18432;
      *(_BYTE *)(v10 + 6) = BYTE2(v11);
      v12 = (_DWORD *)v18[0];
      v18[0] = v10;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
        else
          *v12 -= 2;
      }
      ++v4;
    }
    if ((v8 & 0xFFFE) == 0x102)
    {
      if (!v20)
      {
        v13 = &v20;
LABEL_17:
        WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=(v13, (WTF::StringImpl *)v18);
        v14 = 1;
        goto LABEL_18;
      }
    }
    else if (!v19)
    {
      v13 = &v19;
      goto LABEL_17;
    }
    v14 = 0;
    *(_BYTE *)v3 = 0;
    *((_BYTE *)v3 + 16) = 0;
LABEL_18:
    result = (_DWORD *)v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
      else
        *result -= 2;
    }
    if (!v14)
      goto LABEL_43;
LABEL_22:
    if (++v4 >= 5)
    {
LABEL_53:
      __break(1u);
      return result;
    }
  }
  *(_BYTE *)v3 = 0;
  *((_BYTE *)v3 + 16) = 0;
LABEL_43:
  if (v5)
  {
LABEL_40:
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      *v5 -= 2;
  }
LABEL_30:
  v17 = v19;
  v19 = 0;
  if (v17)
  {
    if (*v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, a2);
    else
      *v17 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumePosition@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t result;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  WebCore::CSSPropertyParserHelpers::consumePositionCoordinates(a1, a2, a3, a4, 0, (uint64_t)&v14);
  if (v16)
  {
    v11 = (_DWORD *)v15;
    v12 = (_DWORD *)v14;
    v14 = 0;
    v15 = 0;
    WebCore::CSSValuePair::createNoncoalescing((uint64_t *)&v12, (uint64_t *)&v11, &v13);
    *a5 = v13;
    v13 = 0;
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
      else
        *v8 -= 2;
    }
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      if (*v9 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v7);
      else
        *v9 -= 2;
    }
    return std::optional<WebCore::CSSPropertyParserHelpers::PositionCoordinates>::~optional((uint64_t)&v14, v7);
  }
  else
  {
    result = std::optional<WebCore::CSSPropertyParserHelpers::PositionCoordinates>::~optional((uint64_t)&v14, v6);
    *a5 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSingleAxisPosition(_QWORD *a1, __int128 **a2, uint64_t a3, char a4)
{
  __int128 *v8;
  WTF::StringImpl *v9;
  uint64_t result;
  int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 *v30;
  int *v31;

  v8 = *a2;
  if (*a2 >= a2[1])
  {
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_BYTE *)v8 & 0x3F) != 0)
  {
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, a3, 0, 1, 0, 0, 0, (uint64_t *)&v31);
    v9 = 0;
    result = 0;
    v11 = 0;
    v12 = 0;
    v13 = (uint64_t)v31;
    v14 = v31;
    if (!v31)
    {
LABEL_5:
      *a1 = v11;
      goto LABEL_6;
    }
LABEL_4:
    *v14 += 2;
    result = v13;
    v11 = v14;
    v12 = v9;
    goto LABEL_5;
  }
  result = (uint64_t)*a2;
  v15 = a2[1];
  if ((a4 & 1) != 0)
  {
    if (*a2 >= v15)
    {
      {
        result = (uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_BYTE *)result & 0x3F) == 0)
    {
      v16 = *a2;
      if (*a2 >= a2[1])
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_DWORD *)v16 & 0x3F) == 0)
      {
        result = *((unsigned int *)v16 + 4);
        if ((result & 0x80000000) != 0)
        {
          result = WebCore::cssValueKeywordID(*((_QWORD *)v16 + 1), *((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32));
          *((_DWORD *)v16 + 4) = result;
        }
        if ((unsigned __int16)result - 254 <= 6 && ((1 << (result + 2)) & 0x43) != 0)
        {
          v18 = *a2;
          if (*a2 == a2[1])
          {
            {
              v19 = *a2;
              v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            else
            {
              v18 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
              v19 = *a2;
            }
          }
          else
          {
            v19 = (__int128 *)((char *)v18 + 24);
            *a2 = (__int128 *)((char *)v18 + 24);
          }
          result = (uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          while (1)
          {
            if (v19 >= a2[1])
            {
              v19 = (__int128 *)result;
              {
                v20 = v18;
                result = WebCore::CSSParserToken::CSSParserToken(result, 30, 0);
                v18 = v20;
                v19 = (__int128 *)result;
              }
            }
            if ((*(_DWORD *)v19 & 0x3F) != 0x10)
              break;
            v19 = (__int128 *)((char *)*a2 + 24);
            *a2 = v19;
          }
          if ((*(_DWORD *)v18 & 0x3F) == 0)
          {
            result = *((unsigned int *)v18 + 4);
            if ((result & 0x80000000) != 0)
            {
              v25 = v18;
              result = WebCore::cssValueKeywordID(*((_QWORD *)v18 + 1), *((unsigned int *)v18 + 1) | ((unint64_t)((*(_DWORD *)v18 >> 22) & 1) << 32));
              *((_DWORD *)v25 + 4) = result;
            }
            v26 = (unsigned __int16)result;
            if ((unsigned __int16)result >= 0x48Eu)
            {
              __break(0xC471u);
              JUMPOUT(0x1958C7BD0);
            }
            goto LABEL_68;
          }
LABEL_67:
          v26 = 0;
          goto LABEL_68;
        }
      }
    }
LABEL_35:
    *a1 = 0;
    return result;
  }
  if (*a2 >= v15)
  {
    {
      result = (uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_BYTE *)result & 0x3F) != 0)
    goto LABEL_35;
  v21 = *a2;
  if (*a2 >= a2[1])
  {
    v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v21 & 0x3F) != 0)
    goto LABEL_35;
  result = *((unsigned int *)v21 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v21 + 1), *((unsigned int *)v21 + 1) | ((unint64_t)((*(_DWORD *)v21 >> 22) & 1) << 32));
    *((_DWORD *)v21 + 4) = result;
  }
  if ((unsigned __int16)result - 258 > 2)
    goto LABEL_35;
  v22 = *a2;
  if (*a2 == a2[1])
  {
    {
      v23 = *a2;
      v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v22 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v23 = *a2;
    }
  }
  else
  {
    v23 = (__int128 *)((char *)v22 + 24);
    *a2 = (__int128 *)((char *)v22 + 24);
  }
  result = (uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v23 >= a2[1])
    {
      v23 = (__int128 *)result;
      {
        v24 = v22;
        result = WebCore::CSSParserToken::CSSParserToken(result, 30, 0);
        v22 = v24;
        v23 = (__int128 *)result;
      }
    }
    if ((*(_DWORD *)v23 & 0x3F) != 0x10)
      break;
    v23 = (__int128 *)((char *)*a2 + 24);
    *a2 = v23;
  }
  if ((*(_DWORD *)v22 & 0x3F) != 0)
    goto LABEL_67;
  result = *((unsigned int *)v22 + 4);
  if ((result & 0x80000000) != 0)
  {
    v30 = v22;
    result = WebCore::cssValueKeywordID(*((_QWORD *)v22 + 1), *((unsigned int *)v22 + 1) | ((unint64_t)((*(_DWORD *)v22 >> 22) & 1) << 32));
    *((_DWORD *)v30 + 4) = result;
  }
  v26 = (unsigned __int16)result;
  if ((unsigned __int16)result >= 0x48Eu)
  {
    __break(0xC471u);
    JUMPOUT(0x1958C7CFCLL);
  }
LABEL_68:
  v14 = &WebCore::staticCSSValuePool[4 * v26 + 3088];
  *v14 += 2;
  if ((WebCore::staticCSSValuePool[4 * v26 + 3089] & 0x7F) == 0x50
    && LOWORD(WebCore::staticCSSValuePool[4 * v26 + 3090]) == 260)
  {
    *a1 = v14;
    return result;
  }
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, a3, 0, 1, 0, 0, 0, (uint64_t *)&v31);
  v27 = (uint64_t)v31;
  if (!v31)
  {
    v13 = 0;
    v9 = (WTF::StringImpl *)v14;
    goto LABEL_4;
  }
  v31 = 0;
  v28 = WTF::fastCompactMalloc((WTF *)0x18);
  v12 = 0;
  *(_DWORD *)v28 = 2;
  *(_BYTE *)(v28 + 7) = 1;
  v29 = (*(unsigned __int8 *)(v28 + 6) << 16) & 0xFC0000 | 0x10000;
  *(_QWORD *)(v28 + 8) = v14;
  *(_QWORD *)(v28 + 16) = v27;
  *(_WORD *)(v28 + 4) = -18432;
  *(_BYTE *)(v28 + 6) = BYTE2(v29);
  *a1 = v28;
  result = (uint64_t)v31;
LABEL_6:
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v9);
      if (!v12)
        return result;
      goto LABEL_10;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v12)
    return result;
LABEL_10:
  if (*(_DWORD *)v12 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
  *(_DWORD *)v12 -= 2;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v2;
  BOOL v3;
  uint64_t v4;
  __int128 *v6;
  WebCore::CSSPropertyParserHelpers *v7;
  WebCore::CSSPropertyParserHelpers *v8;
  WebCore::CSSPropertyParserHelpers *v9;

  v2 = *this;
  if (*this >= this[1])
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v9 = (WebCore::CSSPropertyParserHelpers *)this;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      this = (__int128 **)v9;
    }
  }
  v3 = (*(_DWORD *)v2 & 0x3F) == 6 && *((_WORD *)v2 + 8) == 47;
  v4 = v3;
  if (v3)
  {
    v6 = *this;
    if (*this == this[1])
    {
      {
        v8 = (WebCore::CSSPropertyParserHelpers *)this;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        this = (__int128 **)v8;
        v6 = *(__int128 **)v8;
      }
    }
    else
    {
      v6 = (__int128 *)((char *)v6 + 24);
      *this = v6;
    }
    while (1)
    {
      if (v6 >= this[1])
      {
        v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v7 = (WebCore::CSSPropertyParserHelpers *)this;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          this = (__int128 **)v7;
        }
      }
      if ((*(_DWORD *)v6 & 0x3F) != 0x10)
        break;
      v6 = (__int128 *)((char *)*this + 24);
      *this = v6;
    }
  }
  return v4;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9LengthRawENS8_15UnevaluatedCalcIS9_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

uint64_t std::array<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,5ul>::~array(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      *v5 -= 2;
  }
  v6 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
    else
      *v6 -= 2;
  }
  v7 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
    else
      *v7 -= 2;
  }
  return a1;
}

unint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve(__int128 **a1, unsigned __int16 **a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v6;
  void *v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int16 *v15;
  _BYTE v16[8];
  int v17;
  char v18;
  int v19;
  __int16 v20;
  _QWORD v21[2];
  _QWORD *v22;

  v6 = *a2;
  *a2 = 0;
  v15 = v6;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consume<>(a1, &v15, a4, (uint64_t)v16);
  v8 = v15;
  if (v15)
    goto LABEL_10;
  while (1)
  {
    if (!v18)
    {
      v10 = 0;
      LOBYTE(v12) = 0;
      v13 = 0;
      LODWORD(v11) = 0;
      return ((_DWORD)v11 << 8) | ((unint64_t)v12 << 32) | (v13 << 40) | v10;
    }
    v19 = a4;
    v20 = WORD2(a4);
    v21[0] = a3;
    v21[1] = &v19;
    if (v17 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    WTF::fastFree((WTF *)(v8 - 8), v7);
  }
  v22 = v21;
  v9 = ((uint64_t (*)(_QWORD **, _BYTE *))off_1E339DBA0[v17])(&v22, v16);
  v10 = v9;
  v11 = v9 >> 8;
  v12 = HIDWORD(v9);
  v13 = v9 >> 40;
  if (v18 && v17 != -1)
    ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10IntegerRawIiLNS6_24CSSPropertyParserHelpers17IntegerValueRangeE0EEENS6_15UnevaluatedCalcISA_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v17])(v21, v16);
  return ((_DWORD)v11 << 8) | ((unint64_t)v12 << 32) | (v13 << 40) | v10;
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consume<>(__int128 **a1@<X0>, unsigned __int16 **a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  __int128 *v7;
  void *v8;
  __int128 *v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  double v13;
  int v14;
  char v15;
  uint64_t v16;
  void *v17;
  WebCore::CSSCalcValue *v18;
  int v19;
  unsigned __int16 **v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::CSSCalcValue *v24;
  __int128 v25;

  v7 = *a1;
  if (v7 >= a1[1])
  {
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v20 = a2;
      v7 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a2 = v20;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) == 7)
  {
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v25, a2);
    v9 = *a1;
    if (*a1 >= a1[1])
    {
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v9 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    v10 = *(_DWORD *)v9;
    if ((*(_DWORD *)v9 & 0x100) != 0)
    {
      v14 = 0;
    }
    else
    {
      v12 = *a1;
      v11 = a1[1];
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v12 = *a1;
        v11 = a1[1];
      }
      if (v12 == v11)
      {
        {
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v12 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v11 = *a1;
        }
      }
      else
      {
        v11 = (__int128 *)((char *)v12 + 24);
        *a1 = (__int128 *)((char *)v12 + 24);
      }
      while (1)
      {
        if (v11 >= a1[1])
        {
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v21 = v12;
            v11 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v12 = v21;
          }
        }
        if ((*(_DWORD *)v11 & 0x3F) != 0x10)
          break;
        v11 = (__int128 *)((char *)*a1 + 24);
        *a1 = v11;
      }
      v13 = *((double *)v12 + 2);
      if (v13 >= 2147483650.0)
      {
        v14 = 0x7FFFFFFF;
      }
      else if (v13 > -2147483650.0)
      {
        v14 = (int)v13;
      }
      else
      {
        v14 = 0x80000000;
      }
    }
    if ((_QWORD)v25)
      WTF::fastFree((WTF *)(v25 - 16), v8);
    if ((v10 & 0x100) != 0)
    {
      v15 = 0;
      *(_BYTE *)a4 = 0;
    }
    else
    {
      *(_DWORD *)a4 = v14;
      *(_DWORD *)(a4 + 8) = 0;
      v15 = 1;
    }
    *(_BYTE *)(a4 + 16) = v15;
  }
  else
  {
    if ((*(_DWORD *)v7 & 0x3F) != 1)
      goto LABEL_20;
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v22, a2);
    v25 = *(_OWORD *)a1;
    v16 = v22;
    v22 = 0;
    v23 = v16;
    WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v25, 0, &v23, a3, &v24);
    if (v23)
      WTF::fastFree((WTF *)(v23 - 16), v17);
    v18 = v24;
    if (v24)
      *(_OWORD *)a1 = v25;
    if (v22)
      WTF::fastFree((WTF *)(v22 - 16), v17);
    if (v18)
    {
      v19 = *(_DWORD *)v18;
      *(_DWORD *)v18 += 2;
      *(_QWORD *)a4 = v18;
      *(_DWORD *)(a4 + 8) = 1;
      *(_BYTE *)(a4 + 16) = 1;
      if (v19)
        *(_DWORD *)v18 = v19;
      else
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)v17);
    }
    else
    {
LABEL_20:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 0;
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10IntegerRawIiLNS8_24CSSPropertyParserHelpers17IntegerValueRangeE0EEENS8_15UnevaluatedCalcISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIiLNSB_17IntegerValueRangeE0EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(uint64_t a1, unsigned int *a2)
{
  return *a2 | 0x100000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIiLNSB_17IntegerValueRangeE0EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v5 = floor(WebCore::CSSCalcValue::doubleValue((uint64_t)v3, *v2) + 0.5);
  if (v5 >= 2147483650.0)
  {
    v6 = 0x17FFFFFFFLL;
  }
  else if (v5 <= -2147483650.0)
  {
    v6 = 0x180000000;
  }
  else
  {
    v6 = (int)v5 | 0x100000000;
  }
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v4);
  else
    *v3 -= 2;
  return v6;
}

void WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve(__int128 **a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 *v8;
  void *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  _BYTE v12[8];
  int v13;
  char v14;
  int v15;
  __int16 v16;
  _QWORD v17[2];
  _QWORD *v18;

  v8 = *a2;
  *a2 = 0;
  v11 = v8;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consume<>(a1, &v11, a4, (uint64_t)v12);
  v10 = v11;
  if (v11)
    goto LABEL_10;
  while (1)
  {
    if (!v14)
    {
      *a5 = 0;
      return;
    }
    v15 = a4;
    v16 = WORD2(a4);
    v17[0] = a3;
    v17[1] = &v15;
    if (v13 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    WTF::fastFree((WTF *)(v10 - 8), v9);
  }
  v18 = v17;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS6_6RefPtrINS8_17CSSPrimitiveValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS9_29CSSPrimitiveValueResolverBaseEJNS8_10IntegerRawIiLNS9_17IntegerValueRangeE0EEEEE7resolveERKNS_7variantIJSL_NS8_15UnevaluatedCalcISL_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSL_SP_EEEEEEDcOSX_DpOT0____fmatrix[v13])(&v18, v12);
  if (v14)
  {
    if (v13 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10IntegerRawIiLNS6_24CSSPropertyParserHelpers17IntegerValueRangeE0EEENS6_15UnevaluatedCalcISA_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v13])(v17, v12);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10IntegerRawIiLNSB_17IntegerValueRangeE0EEEEE7resolveERKNS_7variantIJSN_NSA_15UnevaluatedCalcISN_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSN_SR_EEEEEEDcSZ_DpT0_@<X0>(int *a1@<X1>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t result;
  char v5;

  v3 = (double)*a1;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v5 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 2;
  *(_BYTE *)(result + 6) = v5 & 0xFC;
  *(double *)(result + 8) = v3;
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10IntegerRawIiLNSB_17IntegerValueRangeE0EEEEE7resolveERKNS_7variantIJSN_NSA_15UnevaluatedCalcISN_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSN_SR_EEEEEEDcSZ_DpT0_@<X0>(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  double v6;
  double v7;
  uint64_t result;
  WTF::StringImpl *v9;
  char v10;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v6 = floor(WebCore::CSSCalcValue::doubleValue((uint64_t)v5, *v4) + 0.5);
  v7 = 2147483650.0;
  if (v6 < 2147483650.0)
  {
    v7 = -2147483650.0;
    if (v6 > -2147483650.0)
      v7 = (double)(int)v6;
  }
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v10 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 2;
  *(_BYTE *)(result + 6) = v10 & 0xFC;
  *(double *)(result + 8) = v7;
  *a3 = result;
  if (*v5 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v9);
  *v5 -= 2;
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve(uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  unsigned __int16 *v4;
  void *v5;
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 *v12;
  _BYTE v13[8];
  int v14;
  char v15;
  int v16;
  __int16 v17;

  v4 = *a2;
  *a2 = 0;
  v12 = v4;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consume<>(a1, &v12, 0x10100000000, (uint64_t)v13);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 8), v5);
  if (v15)
  {
    v16 = 0;
    v17 = 257;
    v6 = WTF::switchOn<std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>> const&,WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::resolve(std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>> const& &)#1}>((uint64_t)v13, a3, (uint64_t)&v16);
    v7 = v6;
    v8 = v6 >> 8;
    v9 = HIDWORD(v6);
    v10 = v6 >> 40;
    if (v15 && v14 != -1)
      ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10IntegerRawIiLNS6_24CSSPropertyParserHelpers17IntegerValueRangeE2EEENS6_15UnevaluatedCalcISA_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v14])(&v16, v13);
  }
  else
  {
    v7 = 0;
    LOBYTE(v9) = 0;
    v10 = 0;
    LODWORD(v8) = 0;
  }
  return ((_DWORD)v8 << 8) | ((unint64_t)v9 << 32) | (v10 << 40) | v7;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consume<>@<X0>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int16 **v4;
  WebCore::CSSCalcValue *result;
  void *v8;
  __int128 *v9;
  double v10;
  int v11;
  char v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 *v16;
  char v18;
  int v19;
  __int16 v20;
  uint64_t v21;

  v4 = a2;
  v19 = a3;
  v20 = WORD2(a3);
  result = *(WebCore::CSSCalcValue **)a1;
  if ((unint64_t)result >= *(_QWORD *)(a1 + 8))
  {
    {
      result = (WebCore::CSSCalcValue *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      result = (WebCore::CSSCalcValue *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v4 = a2;
    }
  }
  if ((*(_DWORD *)result & 0x3F) == 7)
  {
    WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v21, v4);
    result = *(WebCore::CSSCalcValue **)a1;
    if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
    {
      {
        result = (WebCore::CSSCalcValue *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        result = (WebCore::CSSCalcValue *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*((_BYTE *)result + 1) & 1) != 0)
      goto LABEL_31;
    result = *(WebCore::CSSCalcValue **)a1;
    if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
    {
      {
        result = (WebCore::CSSCalcValue *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        result = (WebCore::CSSCalcValue *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if (*((double *)result + 2) < 0.0)
    {
LABEL_31:
      v14 = 0;
      v13 = 0;
      v12 = 1;
    }
    else
    {
      v9 = *(__int128 **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        {
          result = *(WebCore::CSSCalcValue **)a1;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v9 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          result = *(WebCore::CSSCalcValue **)a1;
        }
      }
      else
      {
        result = (WebCore::CSSCalcValue *)((char *)v9 + 24);
        *(_QWORD *)a1 = (char *)v9 + 24;
      }
      while (1)
      {
        if ((unint64_t)result >= *(_QWORD *)(a1 + 8))
        {
          result = (WebCore::CSSCalcValue *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v16 = v9;
            result = (WebCore::CSSCalcValue *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v9 = v16;
          }
        }
        if ((*(_DWORD *)result & 0x3F) != 0x10)
          break;
        result = (WebCore::CSSCalcValue *)(*(_QWORD *)a1 + 24);
        *(_QWORD *)a1 = result;
      }
      v10 = *((double *)v9 + 2);
      if (v10 >= 2147483650.0)
      {
        v11 = 0x7FFFFFFF;
      }
      else if (v10 <= -2147483650.0)
      {
        v11 = 0x80000000;
      }
      else
      {
        v11 = (int)v10;
      }
      v12 = 0;
      v13 = v11 & 0xFFFFFF00;
      v14 = v11;
    }
    if (v21)
    {
      v18 = v12;
      result = (WebCore::CSSCalcValue *)WTF::fastFree((WTF *)(v21 - 16), v8);
      v12 = v18;
    }
    if ((v12 & 1) != 0)
    {
      v15 = 0;
      *(_BYTE *)a4 = 0;
    }
    else
    {
      *(_DWORD *)a4 = v13 | v14;
      *(_DWORD *)(a4 + 8) = 0;
      v15 = 1;
    }
    *(_BYTE *)(a4 + 16) = v15;
  }
  else if ((*(_DWORD *)result & 0x3F) == 1)
  {
    return WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>>,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a4, (__int128 *)a1, v4, &v19);
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  return result;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>>,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  int v7;
  uint64_t v8;
  void *v9;
  WebCore::CSSCalcValue *result;
  int v11;
  WebCore::CSSCalcValue *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CSSCalcValue *v15;
  __int128 v16;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v13, a3);
  v7 = *a4;
  v16 = *a2;
  v8 = v13;
  v13 = 0;
  v14 = v8;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v16, 0, &v14, v7, &v15);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), v9);
  result = v15;
  if (v15)
    *a2 = v16;
  if (!v13)
  {
    if (result)
      goto LABEL_7;
LABEL_11:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return result;
  }
  v12 = result;
  WTF::fastFree((WTF *)(v13 - 16), v9);
  result = v12;
  if (!v12)
    goto LABEL_11;
LABEL_7:
  v11 = *(_DWORD *)result;
  *(_DWORD *)result += 2;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 1;
  if (!v11)
    return (WebCore::CSSCalcValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v9);
  *(_DWORD *)result = v11;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10IntegerRawIiLNS8_24CSSPropertyParserHelpers17IntegerValueRangeE2EEENS8_15UnevaluatedCalcISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WTF::switchOn<std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>> const&,WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::resolve(std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>> const& &)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v7[2];
  _QWORD *v8;

  v7[0] = a2;
  v7[1] = a3;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIiLNSB_17IntegerValueRangeE2EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(v5, v6);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E339DBD0[v3])(&v8, a1);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIiLNSB_17IntegerValueRangeE2EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(uint64_t a1, unsigned int *a2)
{
  return *a2 | 0x100000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIiLNSB_17IntegerValueRangeE2EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v5 = WebCore::CSSCalcValue::doubleValue((uint64_t)v3, *v2);
  if (v5 >= 0.0)
    v6 = v5 + 0.5;
  else
    v6 = 0.5;
  v7 = floor(v6);
  if (v7 >= 2147483650.0)
  {
    v8 = 0x17FFFFFFFLL;
  }
  else if (v7 <= -2147483650.0)
  {
    v8 = 0x180000000;
  }
  else
  {
    v8 = (int)v7 | 0x100000000;
  }
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v4);
  else
    *v3 -= 2;
  return v8;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve@<X0>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 *v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  _BYTE v13[8];
  int v14;
  char v15;
  int v16;
  __int16 v17;
  _QWORD v18[2];
  _QWORD *v19;

  v8 = *a2;
  *a2 = 0;
  v12 = v8;
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consume<>(a1, &v12, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v13);
  v11 = v12;
  if (v12)
    goto LABEL_10;
  while (1)
  {
    if (!v15)
    {
      *a5 = 0;
      return result;
    }
    v16 = a4;
    v17 = WORD2(a4);
    v18[0] = a3;
    v18[1] = &v16;
    if (v14 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    result = WTF::fastFree((WTF *)(v11 - 8), v10);
  }
  v19 = v18;
  result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS6_6RefPtrINS8_17CSSPrimitiveValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS9_29CSSPrimitiveValueResolverBaseEJNS8_10IntegerRawIiLNS9_17IntegerValueRangeE2EEEEE7resolveERKNS_7variantIJSL_NS8_15UnevaluatedCalcISL_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSL_SP_EEEEEEDcOSX_DpOT0____fmatrix[v14])(&v19, v13);
  if (v15)
  {
    if (v14 != -1)
      return ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10IntegerRawIiLNS6_24CSSPropertyParserHelpers17IntegerValueRangeE2EEENS6_15UnevaluatedCalcISA_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v14])(v18, v13);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10IntegerRawIiLNSB_17IntegerValueRangeE2EEEEE7resolveERKNS_7variantIJSN_NSA_15UnevaluatedCalcISN_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSN_SR_EEEEEEDcSZ_DpT0_@<X0>(int *a1@<X1>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t result;
  char v5;

  v3 = (double)*a1;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v5 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 2;
  *(_BYTE *)(result + 6) = v5 & 0xFC;
  *(double *)(result + 8) = v3;
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10IntegerRawIiLNSB_17IntegerValueRangeE2EEEEE7resolveERKNS_7variantIJSN_NSA_15UnevaluatedCalcISN_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSN_SR_EEEEEEDcSZ_DpT0_@<X0>(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;
  WTF::StringImpl *v11;
  char v12;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v6 = WebCore::CSSCalcValue::doubleValue((uint64_t)v5, *v4);
  if (v6 >= 0.0)
    v7 = v6 + 0.5;
  else
    v7 = 0.5;
  v8 = floor(v7);
  v9 = 2147483650.0;
  if (v8 < 2147483650.0)
  {
    v9 = -2147483650.0;
    if (v8 > -2147483650.0)
      v9 = (double)(int)v8;
  }
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v12 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 2;
  *(_BYTE *)(result + 6) = v12 & 0xFC;
  *(double *)(result + 8) = v9;
  *a3 = result;
  if (*v5 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v11);
  *v5 -= 2;
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::consumeAndResolve(uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  unsigned __int16 *v4;
  void *v5;
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 *v12;
  _BYTE v13[8];
  int v14;
  char v15;
  int v16;
  __int16 v17;

  v4 = *a2;
  *a2 = 0;
  v12 = v4;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::consume<>((uint64_t)v13, a1, &v12);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 8), v5);
  if (v15)
  {
    v16 = 0;
    v17 = 257;
    v6 = WTF::switchOn<std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::resolve(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const& &)#1}>((uint64_t)v13, a3, (uint64_t)&v16);
    v7 = v6;
    v8 = v6 >> 8;
    v9 = HIDWORD(v6);
    v10 = v6 >> 40;
    if (v15 && v14 != -1)
      ((void (*)(int *, _BYTE *))off_1E339DBF0[v14])(&v16, v13);
  }
  else
  {
    v7 = 0;
    LOBYTE(v9) = 0;
    v10 = 0;
    LODWORD(v8) = 0;
  }
  return ((_DWORD)v8 << 8) | ((unint64_t)v9 << 32) | (v10 << 40) | v7;
}

unint64_t WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::consume<>(uint64_t a1, uint64_t a2, unsigned __int16 **a3)
{
  unsigned __int16 **v3;
  unint64_t result;
  unint64_t v6;
  uint64_t v8;
  int v9;
  __int16 v10;

  v3 = a3;
  v9 = 0;
  v10 = 257;
  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    {
      result = (unint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = a2;
      result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v3 = a3;
      a2 = v8;
    }
  }
  if ((*(_DWORD *)result & 0x3F) == 7)
  {
    result = WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a2, v3);
    v6 = HIDWORD(result);
    if (HIDWORD(result))
    {
      *(_DWORD *)a1 = result;
      *(_DWORD *)(a1 + 8) = 0;
      LOBYTE(v6) = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 16) = v6;
  }
  else if ((*(_DWORD *)result & 0x3F) == 1)
  {
    return (unint64_t)WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>>,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a1, (__int128 *)a2, v3, &v9);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10IntegerRawIjLNS8_24CSSPropertyParserHelpers17IntegerValueRangeE1EEENS8_15UnevaluatedCalcISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v6, a2);
  result = WebCore::CSSPropertyParserHelpers::IntegerKnownTokenTypeNumberConsumer<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>::consume(a1);
  if (v6)
  {
    v5 = result;
    WTF::fastFree((WTF *)(v6 - 16), v4);
    return v5;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::IntegerKnownTokenTypeNumberConsumer<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>::consume(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  double v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v1 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v8 = a1;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a1 = v8;
    }
  }
  if ((*((_BYTE *)v1 + 1) & 1) != 0)
    goto LABEL_14;
  v2 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v9 = a1;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a1 = v9;
    }
  }
  if (*((double *)v2 + 2) < 1.0)
  {
LABEL_14:
    v4 = 0;
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v3 = *((double *)WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)a1) + 2);
    if (v3 >= 4294967300.0)
    {
      v4 = -1;
    }
    else if (v3 <= 0.0)
    {
      v4 = 0;
    }
    else
    {
      v4 = v3;
    }
    v5 = v4 & 0xFFFFFF00;
    v4 = v4;
    v6 = 0x100000000;
  }
  return v6 | v5 | v4;
}

uint64_t WTF::switchOn<std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::resolve(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const& &)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v7[2];
  _QWORD *v8;

  v7[0] = a2;
  v7[1] = a3;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIjLNSB_17IntegerValueRangeE1EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(v5, v6);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E339DC00[v3])(&v8, a1);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIjLNSB_17IntegerValueRangeE1EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(uint64_t a1, unsigned int *a2)
{
  return *a2 | 0x100000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10IntegerRawIjLNSB_17IntegerValueRangeE1EEEEENSB_15RawResolverBaseEJSG_EE7resolveERKNS_7variantIJSG_NSA_15UnevaluatedCalcISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSG_SM_EEEEEEDcSU_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;
  double v6;
  BOOL v7;
  double v8;
  double v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v5 = WebCore::CSSCalcValue::doubleValue((uint64_t)v3, *v2);
  v6 = v5 + 0.5;
  v7 = v5 < 1.0;
  v8 = 1.5;
  if (!v7)
    v8 = v6;
  v9 = floor(v8);
  if (v9 >= 4294967300.0)
  {
    v10 = 0x1FFFFFFFFLL;
  }
  else if (v9 <= 0.0)
  {
    v10 = 0x100000000;
  }
  else
  {
    v10 = v9 | 0x100000000;
  }
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v4);
  else
    *v3 -= 2;
  return v10;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::consumeAndResolve(_QWORD *a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4)
{
  unsigned __int16 *v6;
  uint64_t result;
  void *v8;
  unsigned __int16 *v9;
  _BYTE v10[8];
  int v11;
  char v12;
  int v13;
  __int16 v14;

  v6 = *a3;
  *a3 = 0;
  v9 = v6;
  result = WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::consume<>((uint64_t)v10, a2, &v9);
  if (v9)
    result = WTF::fastFree((WTF *)(v9 - 8), v8);
  if (v12)
  {
    v13 = 0;
    v14 = 257;
    result = WTF::switchOn<std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::resolve(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const& &)#1}>((uint64_t)a1, (uint64_t)v10, a4, (uint64_t)&v13);
    if (v12)
    {
      if (v11 != -1)
        return ((uint64_t (*)(int *, _BYTE *))off_1E339DBF0[v11])(&v13, v10);
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

uint64_t WTF::switchOn<std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>::resolve(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(std::variant<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>,WebCore::UnevaluatedCalc<WebCore::IntegerRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>>> const& &)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD *v8;

  v7[0] = a3;
  v7[1] = a4;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
  {
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10IntegerRawIjLNSB_17IntegerValueRangeE1EEEEE7resolveERKNS_7variantIJSN_NSA_15UnevaluatedCalcISN_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSN_SR_EEEEEEDcSZ_DpT0_(v6);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **))off_1E339DC10[v4])(&v8);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10IntegerRawIjLNSB_17IntegerValueRangeE1EEEEE7resolveERKNS_7variantIJSN_NSA_15UnevaluatedCalcISN_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSN_SR_EEEEEEDcSZ_DpT0_@<X0>(_DWORD *a1@<X1>, uint64_t *a2@<X8>, unint64_t a3@<D0>)
{
  double v4;
  uint64_t result;
  char v6;

  LODWORD(a3) = *a1;
  v4 = (double)a3;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 2;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(double *)(result + 8) = v4;
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10IntegerRawIjLNSB_17IntegerValueRangeE1EEEEE7resolveERKNS_7variantIJSN_NSA_15UnevaluatedCalcISN_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSN_SR_EEEEEEDcSZ_DpT0_@<X0>(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  uint64_t result;
  WTF::StringImpl *v13;
  char v14;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v6 = WebCore::CSSCalcValue::doubleValue((uint64_t)v5, *v4);
  v7 = v6 + 0.5;
  v8 = v6 < 1.0;
  v9 = 1.5;
  if (!v8)
    v9 = v7;
  v10 = floor(v9);
  v11 = 4294967300.0;
  if (v10 < 4294967300.0)
  {
    if (v10 <= 0.0)
      v11 = 0.0;
    else
      v11 = (double)v10;
  }
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v14 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 2;
  *(_BYTE *)(result + 6) = v14 & 0xFC;
  *(double *)(result + 8) = v11;
  *a3 = result;
  if (*v5 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v13);
  *v5 -= 2;
  return result;
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::LengthRaw>::consume<>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  WebCore::CSSCalcValue *v12;
  int v13;
  unsigned __int16 **v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::CSSCalcValue *v19;

  v7 = *(__int128 **)a1;
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 8))
  {
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v14 = a2;
      v7 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a2 = v14;
    }
  }
  switch(*(_DWORD *)v7 & 0x3F)
  {
    case 1:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v17, a2);
      v15 = *(_OWORD *)a1;
      v10 = v17;
      v17 = 0;
      v18 = v10;
      WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v15, 1, &v18, a3, &v19);
      if (v18)
        WTF::fastFree((WTF *)(v18 - 16), v11);
      v12 = v19;
      if (v19)
        *(_OWORD *)a1 = v15;
      if (v17)
        WTF::fastFree((WTF *)(v17 - 16), v11);
      if (!v12)
        goto LABEL_19;
      v13 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 2;
      *(_QWORD *)a4 = v12;
      *(_DWORD *)(a4 + 16) = 1;
      *(_BYTE *)(a4 + 24) = 1;
      if (v13)
        *(_DWORD *)v12 = v13;
      else
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, (WTF::StringImpl *)v11);
      break;
    case 7:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v19, a2);
      WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeNumberConsumer::consume(&v15, (__int128 **)a1, a3 & 0xFFFFFFFFFFFFLL);
      goto LABEL_4;
    case 9:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v19, a2);
      WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeDimensionConsumer::consume(&v15, (__int128 **)a1, a3);
LABEL_4:
      if (v19)
        WTF::fastFree((WebCore::CSSCalcValue *)((char *)v19 - 16), v8);
      v9 = v16;
      if (v16)
      {
        *(_OWORD *)a4 = v15;
        *(_DWORD *)(a4 + 16) = 0;
        v9 = 1;
      }
      else
      {
        *(_BYTE *)a4 = 0;
      }
      *(_BYTE *)(a4 + 24) = v9;
      break;
    default:
LABEL_19:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      break;
  }
}

void WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)1,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::LengthRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  int v7;
  uint64_t v8;
  void *v9;
  WebCore::CSSCalcValue *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::CSSCalcValue *v13;
  __int128 v14;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v11, a3);
  v7 = *a4;
  v14 = *a2;
  v8 = v11;
  v11 = 0;
  v12 = v8;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v14, 1, &v12, v7, &v13);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), v9);
  v10 = v13;
  if (v13)
  {
    *a2 = v14;
    *(_QWORD *)a1 = v10;
    LOBYTE(v10) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 8) = (_BYTE)v10;
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), v9);
}

__int128 *WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::LengthRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(__int128 *a1, __int128 **a2, unsigned __int16 **a3, unsigned int *a4)
{
  __int128 *result;
  void *v8;
  uint64_t v9;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v9, a3);
  result = WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeNumberConsumer::consume(a1, a2, *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32));
  if (v9)
    return (__int128 *)WTF::fastFree((WTF *)(v9 - 16), v8);
  return result;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::LengthRaw,WebCore::PercentRaw>::consume<>@<X0>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4;
  unsigned __int16 **v5;
  WebCore::CSSCalcValue *result;
  void *v9;
  char v10;
  char v11;
  int v13;
  __int16 v14;
  __int128 v15;
  char v16;
  uint64_t v17;

  v4 = a3;
  v5 = a2;
  v13 = a3;
  v14 = WORD2(a3);
  result = *(WebCore::CSSCalcValue **)a1;
  if ((unint64_t)result >= *(_QWORD *)(a1 + 8))
  {
    {
      result = (WebCore::CSSCalcValue *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      result = (WebCore::CSSCalcValue *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v5 = a2;
    }
  }
  if ((*(_DWORD *)result & 0x3F) != 9)
  {
    switch(*(_DWORD *)result & 0x3F)
    {
      case 1:
        return WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::LengthRaw,WebCore::UnevaluatedCalc<WebCore::LengthRaw>,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>,WebCore::LengthRaw,WebCore::PercentRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(a4, (__int128 *)a1, v5, &v13);
      case 7:
        result = (WebCore::CSSCalcValue *)WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)7,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::LengthRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(&v15, (__int128 **)a1, v5, (unsigned int *)&v13);
        goto LABEL_5;
      case 8:
        result = (WebCore::CSSCalcValue *)WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)8,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::PercentRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a1, v5, &v13);
        if (v11)
        {
          *(_QWORD *)a4 = result;
          *(_DWORD *)(a4 + 16) = 2;
          goto LABEL_7;
        }
        v10 = 0;
        break;
      default:
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 24) = 0;
        return result;
    }
    goto LABEL_19;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v17, v5);
  result = (WebCore::CSSCalcValue *)WebCore::CSSPropertyParserHelpers::LengthKnownTokenTypeDimensionConsumer::consume(&v15, (__int128 **)a1, v4);
  if (v17)
    result = (WebCore::CSSCalcValue *)WTF::fastFree((WTF *)(v17 - 16), v9);
LABEL_5:
  v10 = v16;
  if (!v16)
  {
LABEL_19:
    *(_BYTE *)a4 = 0;
    goto LABEL_8;
  }
  *(_OWORD *)a4 = v15;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_7:
  v10 = 1;
LABEL_8:
  *(_BYTE *)(a4 + 24) = v10;
  return result;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::LengthRaw,WebCore::UnevaluatedCalc<WebCore::LengthRaw>,WebCore::PercentRaw,WebCore::UnevaluatedCalc<WebCore::PercentRaw>>,WebCore::LengthRaw,WebCore::PercentRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  void *v8;
  WebCore::CSSCalcValue *result;
  int v10;
  int v11;
  uint64_t v12;
  WebCore::CSSCalcValue *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::CSSCalcValue *v16;
  __int128 v17;

  WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)1,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::LengthRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((uint64_t)&v17, a2, a3, a4);
  if (BYTE8(v17))
  {
    result = (WebCore::CSSCalcValue *)v17;
    v10 = *(_DWORD *)v17;
    *(_DWORD *)v17 += 2;
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 16) = 1;
    goto LABEL_10;
  }
  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v14, a3);
  v11 = *a4;
  v17 = *a2;
  v12 = v14;
  v14 = 0;
  v15 = v12;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v17, 2, &v15, v11, &v16);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v8);
  result = v16;
  if (v16)
    *a2 = v17;
  if (v14)
  {
    v13 = result;
    WTF::fastFree((WTF *)(v14 - 16), v8);
    result = v13;
    if (v13)
      goto LABEL_9;
LABEL_14:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    return result;
  }
  if (!result)
    goto LABEL_14;
LABEL_9:
  v10 = *(_DWORD *)result;
  *(_DWORD *)result += 2;
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 16) = 3;
LABEL_10:
  *(_BYTE *)(a1 + 24) = 1;
  if (!v10)
    return (WebCore::CSSCalcValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v8);
  *(_DWORD *)result = v10;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9LengthRawENS8_15UnevaluatedCalcIS9_EENS8_10PercentRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9LengthRawENS8_15UnevaluatedCalcIS9_EENS8_10PercentRawENSA_ISC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJS9_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_9LengthRawENSA_10PercentRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 0;
  a2[1].n128_u8[8] = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_9LengthRawENSA_10PercentRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  double v10;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v6 = *v4;
  v7 = (unint64_t)*(unsigned __int8 *)(v4[1] + 1) << 8;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 1) + 72))(*((_QWORD *)v5 + 1));
  v10 = WebCore::CSSCalcValue::doubleValue((uint64_t)v5, v6);
  if (v7 == 256 && v10 < 0.0 || fabs(v10) == INFINITY)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a3 = v8;
    *(double *)(a3 + 8) = v10;
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 1;
  }
  if (*v5 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v9);
  else
    *v5 -= 2;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_9LengthRawENSA_10PercentRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 24) = 1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_9LengthRawENSA_10PercentRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_@<X0>(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  double v8;
  _DWORD *result;
  _DWORD *v10;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v10 = v5;
  v6 = (unint64_t)*(unsigned __int8 *)(v4[1] + 1) << 8;
  v8 = WebCore::evaluateCalc((uint64_t *)&v10, *v4);
  if (v6 == 256 && v8 < 0.0 || fabs(v8) == INFINITY)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    *(double *)a3 = v8;
    *(_DWORD *)(a3 + 16) = 1;
    *(_BYTE *)(a3 + 24) = 1;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
    else
      *result -= 2;
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_9LengthRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  int v3;
  double v4;
  unsigned int v5;
  int *v7;
  int *result;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  char v14;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  if (v3 == 6)
  {
    v5 = (int)v4;
    if ((int)v4 > 0xFF || *(_QWORD *)&v4 != COERCE__INT64((double)v5))
      goto LABEL_20;
    v7 = &WebCore::staticCSSValuePool[4 * v5];
    v9 = v7[16];
    result = v7 + 16;
    *result = v9 + 2;
  }
  else
  {
    if (v3 == 1)
    {
      v12 = (int)v4;
      if ((int)v4 <= 0xFF && *(_QWORD *)&v4 == COERCE__INT64((double)v12))
      {
        result = &WebCore::staticCSSValuePool[4 * v12 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v3 != 3
      || ((v10 = (int)v4, (int)v4 <= 0xFF)
        ? (v11 = *(_QWORD *)&v4 == COERCE__INT64((double)v10))
        : (v11 = 0),
          !v11))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v14 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v3 & 0x7F;
      *((_BYTE *)result + 6) = v14 & 0xFC;
      *((double *)result + 1) = v4;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * v10 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_9LengthRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  return WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::resolve(std::variant<WebCore::LengthRaw,WebCore::UnevaluatedCalc<WebCore::LengthRaw>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>> &)#1}::operator()<WebCore::UnevaluatedCalc<WebCore::LengthRaw> const>(a2, *a1);
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::resolve(std::variant<WebCore::LengthRaw,WebCore::UnevaluatedCalc<WebCore::LengthRaw>> const&,WebCore::CSSCalcSymbolTable const&,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions)::{lambda(WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>> &)#1}::operator()<WebCore::UnevaluatedCalc<WebCore::LengthRaw> const>(uint64_t *a1, _DWORD *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  *a2 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = a2;
  *a1 = result;
  if (*a2 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)a2, v5);
  *a2 -= 2;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10PercentRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  return WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase::resolve(a2, *a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_10PercentRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::NumberRaw,WebCore::UnevaluatedCalc<WebCore::NumberRaw>>,WebCore::NumberRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>(uint64_t a1, __int128 *a2, unsigned __int16 **a3, int *a4)
{
  int v7;
  uint64_t v8;
  void *v9;
  WebCore::CSSCalcValue *result;
  int v11;
  WebCore::CSSCalcValue *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CSSCalcValue *v15;
  __int128 v16;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v13, a3);
  v7 = *a4;
  v16 = *a2;
  v8 = v13;
  v13 = 0;
  v14 = v8;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v16, 0, &v14, v7, &v15);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), v9);
  result = v15;
  if (v15)
    *a2 = v16;
  if (v13)
  {
    v12 = result;
    WTF::fastFree((WTF *)(v13 - 16), v9);
    result = v12;
  }
  if (result)
  {
    v11 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 8) = 1;
    *(_BYTE *)(a1 + 16) = 1;
    if (v11)
      *(_DWORD *)result = v11;
    else
      return (WebCore::CSSCalcValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v9);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_9NumberRawEEENSB_15RawResolverBaseEJSE_EE7resolveERKNS_7variantIJSE_NSA_15UnevaluatedCalcISE_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SK_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_9NumberRawEEENSB_15RawResolverBaseEJSE_EE7resolveERKNS_7variantIJSE_NSA_15UnevaluatedCalcISE_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SK_EEEEEEDcSS_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  double v6;
  double v7;
  _DWORD *v8;
  _DWORD *v10;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v10 = v3;
  v4 = (unint64_t)*(unsigned __int8 *)(v2[1] + 1) << 8;
  v6 = WebCore::evaluateCalc((uint64_t *)&v10, *v2);
  if (v4 == 256 && v6 < 0.0)
    v7 = 0.0;
  else
    v7 = v6;
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v5);
    else
      *v8 -= 2;
  }
  return *(_QWORD *)&v7;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10PercentRawEEENSB_15RawResolverBaseEJSE_EE7resolveERKNS_7variantIJSE_NSA_15UnevaluatedCalcISE_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SK_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINSA_10PercentRawEEENSB_15RawResolverBaseEJSE_EE7resolveERKNS_7variantIJSE_NSA_15UnevaluatedCalcISE_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSE_SK_EEEEEEDcSS_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v11 = v3;
  v4 = (unint64_t)*(unsigned __int8 *)(v2[1] + 1) << 8;
  v6 = WebCore::evaluateCalc((uint64_t *)&v11, *v2);
  if (v4 == 256 && v6 < 0.0 || fabs(v6) == INFINITY)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *(_QWORD *)&v6 & 0xFFFFFFFFFFFFFF00;
    v8 = LOBYTE(v6);
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v5);
    else
      *v9 -= 2;
  }
  return v7 | v8;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_9NumberRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  double v3;
  unsigned int v4;
  int *result;
  char v7;

  v3 = *a1;
  v4 = (int)*a1;
  if (v4 <= 0xFF && *(_QWORD *)a1 == COERCE__INT64((double)v4))
  {
    result = &WebCore::staticCSSValuePool[4 * v4 + 2064];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v7 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 1;
    *((_BYTE *)result + 6) = v7 & 0xFC;
    *((double *)result + 1) = v3;
  }
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_9NumberRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_10PercentRawENSA_9NumberRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_10PercentRawENSA_9NumberRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_@<X0>(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  double v8;
  _DWORD *result;
  _DWORD *v10;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v10 = v5;
  v6 = (unint64_t)*(unsigned __int8 *)(v4[1] + 1) << 8;
  v8 = WebCore::evaluateCalc((uint64_t *)&v10, *v4);
  if (v6 == 256 && v8 < 0.0 || fabs(v8) == INFINITY)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
    *(double *)a3 = v8;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_10PercentRawENSA_9NumberRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 8) = 1;
  *(_BYTE *)(a2 + 16) = 1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS_8optionalINS_7variantIJNSA_10PercentRawENSA_9NumberRawEEEEEENSB_15RawResolverBaseEJSF_SG_EE7resolveERKNSE_IJSF_NSA_15UnevaluatedCalcISF_EESG_NSL_ISG_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSF_SM_SG_SN_EEEEEEDcSV_DpT0_@<X0>(uint64_t **a1@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  _DWORD *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  double v8;
  _DWORD *result;
  _DWORD *v10;

  v4 = *a1;
  v5 = *a2;
  *v5 = **a2 + 2;
  v10 = v5;
  v6 = (unint64_t)*(unsigned __int8 *)(v4[1] + 1) << 8;
  v8 = WebCore::evaluateCalc((uint64_t *)&v10, *v4);
  if (v6 == 256 && v8 < 0.0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
    *(double *)a3 = v8;
    *(_DWORD *)(a3 + 8) = 1;
    *(_BYTE *)(a3 + 16) = 1;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::replaceSymbol(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;

  v2 = *a2;
  if (!*a2)
    goto LABEL_9;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~((unsigned __int16)result << 15) + (unsigned __int16)result;
  v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  v6 = v3 & ((v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16));
  v7 = (unsigned __int16 *)(v2 + 24 * v6);
  v8 = *v7;
  if (v8 != (unsigned __int16)result)
  {
    v9 = 1;
    while (v8 != 0xFFFF)
    {
      v6 = (v6 + v9) & v3;
      v7 = (unsigned __int16 *)(v2 + 24 * v6);
      v8 = *v7;
      ++v9;
      if (v8 == (unsigned __int16)result)
        goto LABEL_8;
    }
    v7 = (unsigned __int16 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
LABEL_8:
  if (v7 == (unsigned __int16 *)(v2 + 24 * *(unsigned int *)(v2 - 4)))
LABEL_9:
    __break(1u);
  return result;
}

__int128 **WebCore::CSSPropertyParserHelpers::ResolutionKnownTokenTypeDimensionConsumer::consume@<X0>(__int128 **this@<X0>, __int16 a2@<W2>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  double v5;

  v3 = *this;
  if (*this >= this[1])
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v4 = (*(_DWORD *)v3 >> 11) & 0x7F;
  if ((v4 - 55) >= 4 || (v5 = *((double *)v3 + 2), (a2 & 0xFF00) == 0x100) && v5 < 0.0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a3 = v4;
    *(double *)(a3 + 8) = v5;
    *(_BYTE *)(a3 + 16) = 1;
    return (__int128 **)WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
  }
  return this;
}

void WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::ResolutionRaw>::consumeAndResolve(__int128 *a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 *v8;
  void *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  _BYTE v12[16];
  int v13;
  char v14;
  int v15;
  __int16 v16;
  _QWORD v17[2];
  _QWORD *v18;

  v8 = *a2;
  *a2 = 0;
  v11 = v8;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::ResolutionRaw>::consume<>(a1, &v11, a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v12);
  v10 = v11;
  if (v11)
    goto LABEL_10;
  while (1)
  {
    if (!v14)
    {
      *a5 = 0;
      return;
    }
    v15 = a4;
    v16 = WORD2(a4);
    v17[0] = a3;
    v17[1] = &v15;
    if (v13 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    WTF::fastFree((WTF *)(v10 - 8), v9);
  }
  v18 = v17;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS6_6RefPtrINS8_17CSSPrimitiveValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS9_29CSSPrimitiveValueResolverBaseEJNS8_13ResolutionRawEEE7resolveERKNS_7variantIJSJ_NS8_15UnevaluatedCalcISJ_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSJ_SN_EEEEEEDcOSV_DpOT0____fmatrix[v13])(&v18, v12);
  if (v14)
  {
    if (v13 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResolutionRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(v17, v12);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::SymbolKnownTokenTypeIdentConsumer::consume(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  __int128 *v14;
  char v15;
  unsigned int v16;
  int v18;

  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
  {
    v5 = 0;
  }
  else
  {
    v18 = *((_DWORD *)v4 + 4);
    if (v18 < 0)
    {
      v18 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
      *((_DWORD *)v4 + 4) = v18;
    }
    v5 = (unsigned __int16)v18;
  }
  v6 = *a2;
  if (!*a2)
    return 0;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = 9 * ((~(v5 << 15) + v5) ^ ((~(v5 << 15) + v5) >> 10));
  v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  v10 = v7 & (v9 ^ HIWORD(v9));
  v11 = *(unsigned __int16 *)(v6 + 4 * v10);
  if (v11 != v5)
  {
    v12 = 1;
    while (v11 != 0xFFFF)
    {
      v10 = (v10 + v12) & v7;
      v11 = *(unsigned __int16 *)(v6 + 4 * v10);
      ++v12;
      if (v11 == v5)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  v14 = *(__int128 **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v13)
  {
    v15 = 1;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v14 = *(__int128 **)a1;
    }
  }
  else
  {
    v14 = (__int128 *)((char *)v14 + 24);
    *(_QWORD *)a1 = v14;
  }
  while (1)
  {
    if ((unint64_t)v14 < v13 || (v15 & 1) != 0)
    {
      if ((unint64_t)v14 >= v13)
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v16 = *(_DWORD *)v14;
    }
    else
    {
      v16 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
      v15 = 1;
    }
    if ((v16 & 0x3F) != 0x10)
      break;
    v14 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v14;
  }
  return v5 | 0x10000u;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::TimeRaw>::consumeAndResolve@<X0>(uint64_t a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 *v8;
  uint64_t result;
  void *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  _BYTE v13[16];
  int v14;
  char v15;
  int v16;
  __int16 v17;
  _QWORD v18[2];
  _QWORD *v19;

  v8 = *a2;
  *a2 = 0;
  v12 = v8;
  result = WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::TimeRaw>::consume<>(a1, &v12, a4 & 0xFFFFFFFFFFFFLL, v13);
  v11 = v12;
  if (v12)
    goto LABEL_10;
  while (1)
  {
    if (!v15)
    {
      *a5 = 0;
      return result;
    }
    v16 = a4;
    v17 = WORD2(a4);
    v18[0] = a3;
    v18[1] = &v16;
    if (v14 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    result = WTF::fastFree((WTF *)(v11 - 8), v10);
  }
  v19 = v18;
  result = ((uint64_t (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS6_6RefPtrINS8_17CSSPrimitiveValueENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENS9_29CSSPrimitiveValueResolverBaseEJNS8_7TimeRawEEE7resolveERKNS_7variantIJSJ_NS8_15UnevaluatedCalcISJ_EEEEERKNS8_18CSSCalcSymbolTableENS9_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__implIJSJ_SN_EEEEEEDcOSV_DpOT0____fmatrix[v14])(&v19, v13);
  if (v15)
  {
    if (v14 != -1)
      return ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore7TimeRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(v18, v13);
  }
  return result;
}

WTF::StringImpl *WebCore::unevaluatedCalcSerialization(uint64_t a1, WebCore::CSSCalcValue **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  BOOL v5;
  WTF::StringImpl *result;
  int v7;
  WTF::StringImpl *v8;

  WebCore::CSSCalcValue::customCSSText(*a2, &v8);
  v4 = v8;
  if (*(_DWORD *)(a1 + 16))
    v5 = 0;
  else
    v5 = *(_QWORD *)(a1 + 8) == 0;
  if (v5)
  {
    if (v8)
      *(_DWORD *)v8 += 2;
    result = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
        if (v4)
          goto LABEL_12;
        goto LABEL_23;
      }
      *(_DWORD *)result -= 2;
    }
    if (v4)
    {
LABEL_12:
      v7 = *((_DWORD *)v4 + 1);
      goto LABEL_13;
    }
LABEL_23:
    v7 = 0;
LABEL_13:
    *(_DWORD *)(a1 + 16) = v7;
    if (!v4)
      return result;
    goto LABEL_14;
  }
  if (v8 && (*((_BYTE *)v8 + 16) & 4) == 0)
  {
    result = (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  else
  {
    result = (WTF::StringImpl *)WTF::StringBuilder::append();
    if (!v4)
      return result;
  }
LABEL_14:
  if (*(_DWORD *)v4 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v3);
  *(_DWORD *)v4 -= 2;
  return result;
}

double WebCore::evaluateCalc(uint64_t *a1, uint64_t a2)
{
  return WebCore::CSSCalcValue::doubleValue(*a1, a2);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSingleContainerName@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;
  int v11;
  WTF::StringImpl *v13;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) == 0)
  {
    result = *((unsigned int *)v5 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = result;
    }
    if ((unsigned __int16)result - 1006 < 3 || (unsigned __int16)result == 6)
      goto LABEL_18;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, 0, &v13);
  v7 = v13;
  if (v13)
  {
    v13 = 0;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 2;
    v10 = *(_BYTE *)(v8 + 6);
    *(_WORD *)(v8 + 4) = 63;
    *(_BYTE *)(v8 + 6) = v10 & 0xFC;
    *(_QWORD *)(v8 + 8) = v7;
    v11 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    *a2 = v8;
    if (v11)
      *(_DWORD *)v7 = v11;
    else
      WTF::StringImpl::destroy(v7, v9);
    result = (uint64_t)v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_18:
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFontStretchKeywordValueRaw(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  unsigned int *v9;
  unsigned int v10;
  __int128 *v11;
  unsigned __int16 v12;

  v4 = *this;
  v3 = this[1];
  if (*this >= v3)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v4 & 0x3F) != 0)
    goto LABEL_3;
  v9 = (unsigned int *)*this;
  if (*this >= v3)
  {
    v9 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v10 = WebCore::CSSParserToken::id(v9);
  if (v10 - 108 < 8 || v10 == 90)
  {
    v11 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
    v12 = (unsigned __int16)WebCore::CSSParserToken::id((unsigned int *)v11);
    v7 = v12 & 0xFF00;
    v5 = v12;
    v6 = 0x10000;
  }
  else
  {
LABEL_3:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  return v6 | v5 | v7;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeFamilyNameListRaw@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF **a3@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD **v9;
  WTF *v10;
  _DWORD *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF *v23;

  v22 = 0;
  v23 = 0;
  result = WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw((WTF::StringImpl *)this, a2, (WTF::AtomString *)&v21);
  v7 = v21;
  if (!v21)
  {
LABEL_30:
    *a3 = 0;
    a3[1] = 0;
    v19 = v22;
    if (HIDWORD(v23))
    {
      v20 = 8 * HIDWORD(v23);
      do
      {
        result = *(WTF::StringImpl **)v19;
        *(_QWORD *)v19 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
          else
            *(_DWORD *)result -= 2;
        }
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
      v19 = v22;
      if (!v22)
        return result;
    }
    else if (!v22)
    {
      return result;
    }
    v22 = 0;
    LODWORD(v23) = 0;
    return (WTF::StringImpl *)WTF::fastFree(v19, v6);
  }
  while (1)
  {
    v8 = HIDWORD(v23);
    if (HIDWORD(v23) == (_DWORD)v23)
    {
      v9 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v22, HIDWORD(v23) + 1, (unint64_t)&v21);
      v7 = (WTF::StringImpl *)HIDWORD(v23);
      v10 = v22;
      v11 = *v9;
      if (*v9)
        *v11 += 2;
      *((_QWORD *)v10 + (_QWORD)v7) = v11;
    }
    else
    {
      v18 = v22;
      *(_DWORD *)v7 += 2;
      *((_QWORD *)v18 + v8) = v7;
      LODWORD(v7) = v8;
    }
    HIDWORD(v23) = (_DWORD)v7 + 1;
    result = v21;
    v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    v13 = *this;
    v12 = this[1];
    if (*this >= v12)
    {
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v13 & 0x3F) != 0x15)
      break;
    v14 = *this;
    if (*this == v12)
    {
      v16 = 1;
      {
        v15 = v12;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v15 = *this;
      }
    }
    else
    {
      v15 = (__int128 *)((char *)v14 + 24);
      *this = (__int128 *)((char *)v14 + 24);
    }
    while (1)
    {
      if (v15 < v12 || (v16 & 1) != 0)
      {
        if (v15 >= v12)
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v17 = *(_DWORD *)v15;
      }
      else
      {
        v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
        v16 = 1;
      }
      if ((v17 & 0x3F) != 0x10)
        break;
      v15 = (__int128 *)((char *)*this + 24);
      *this = v15;
    }
    result = WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw((WTF::StringImpl *)this, v6, (WTF::AtomString *)&v21);
    v7 = v21;
    if (!v21)
      goto LABEL_30;
  }
  *a3 = v22;
  a3[1] = v23;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFontSizeAdjust@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  int *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  int *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int v22;
  unint64_t v23;
  __int128 *v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;

  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v19 = *((_DWORD *)v6 + 4);
    if (v19 < 0)
    {
      v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v19;
    }
    if ((unsigned __int16)v19 == 6)
      goto LABEL_41;
    v5 = this[1];
  }
  v7 = *this;
  if (*this >= v5)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
  {
LABEL_5:
    v8 = *this;
    if (*this >= v5)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_BYTE *)v8 & 0x3F) != 0)
      goto LABEL_9;
    v9 = *this;
    if (*this >= v5)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
      goto LABEL_9;
    v22 = *((_DWORD *)v9 + 4);
    if (v22 < 0)
    {
      v22 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
      *((_DWORD *)v9 + 4) = v22;
    }
    if ((unsigned __int16)v22 - 42 > 4)
    {
LABEL_9:
      v10 = 0;
    }
    else
    {
      v24 = *this;
      v23 = (unint64_t)this[1];
      if (*this == (__int128 *)v23)
      {
        v26 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        v25 = *this;
        v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v25 = (__int128 *)((char *)v24 + 24);
        *this = (__int128 *)((char *)v24 + 24);
      }
      while (1)
      {
        if ((unint64_t)v25 < v23 || (v26 & 1) != 0)
        {
          if ((unint64_t)v25 >= v23)
            v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v27 = *(_DWORD *)v25;
        }
        else
        {
          v27 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
          v26 = 1;
        }
        if ((v27 & 0x3F) != 0x10)
          break;
        v25 = (__int128 *)((char *)*this + 24);
        *this = v25;
      }
      if ((*(_DWORD *)v24 & 0x3F) != 0)
      {
        LOWORD(v28) = 0;
      }
      else
      {
        v28 = *((_DWORD *)v24 + 4);
        if (v28 < 0)
        {
          v28 = WebCore::cssValueKeywordID(*((_QWORD *)v24 + 1), *((unsigned int *)v24 + 1) | ((unint64_t)((*(_DWORD *)v24 >> 22) & 1) << 32));
          *((_DWORD *)v24 + 4) = v28;
        }
        if ((unsigned __int16)v28 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958CB570);
        }
      }
      v10 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v28 + 3088];
      *v10 += 2;
    }
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeNumber(this, (void *)1, &v36);
    v13 = (int *)v36;
    if (v36)
      goto LABEL_20;
    v15 = *this;
    v14 = this[1];
    if (*this >= v14)
    {
      v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_BYTE *)v15 & 0x3F) != 0)
      goto LABEL_15;
    v16 = *this;
    if (*this >= v14)
    {
      v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v16 & 0x3F) != 0)
      goto LABEL_15;
    v29 = *((_DWORD *)v16 + 4);
    if (v29 < 0)
    {
      v29 = WebCore::cssValueKeywordID(*((_QWORD *)v16 + 1), *((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32));
      *((_DWORD *)v16 + 4) = v29;
    }
    if ((unsigned __int16)v29 != 974)
    {
LABEL_15:
      v13 = 0;
    }
    else
    {
      v31 = *this;
      v30 = (unint64_t)this[1];
      if (*this == (__int128 *)v30)
      {
        v33 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        v32 = *this;
        v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v32 = (__int128 *)((char *)v31 + 24);
        *this = (__int128 *)((char *)v31 + 24);
      }
      while (1)
      {
        if ((unint64_t)v32 < v30 || (v33 & 1) != 0)
        {
          if ((unint64_t)v32 >= v30)
            v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v34 = *(_DWORD *)v32;
        }
        else
        {
          v34 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v34;
          v33 = 1;
        }
        if ((v34 & 0x3F) != 0x10)
          break;
        v32 = (__int128 *)((char *)*this + 24);
        *this = v32;
      }
      if ((*(_DWORD *)v31 & 0x3F) != 0)
      {
        LOWORD(v35) = 0;
      }
      else
      {
        v35 = *((_DWORD *)v31 + 4);
        if (v35 < 0)
        {
          v35 = WebCore::cssValueKeywordID(*((_QWORD *)v31 + 1), *((unsigned int *)v31 + 1) | ((unint64_t)((*(_DWORD *)v31 >> 22) & 1) << 32));
          *((_DWORD *)v31 + 4) = v35;
        }
        if ((unsigned __int16)v35 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958CB5C4);
        }
      }
      v13 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v35 + 3088];
      *v13 += 2;
    }
    result = v36;
    v36 = (uint64_t)v13;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v12);
        v13 = (int *)v36;
        if (v36)
          goto LABEL_20;
        goto LABEL_46;
      }
      *(_DWORD *)result -= 2;
    }
    if (v13)
    {
LABEL_20:
      if (!v10)
      {
        *a3 = v13;
        return result;
      }
      if ((v10[1] & 0x7F) != 0x50 || *((_WORD *)v10 + 4) != 42)
      {
        v36 = 0;
        v17 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_DWORD *)v17 = 2;
        v18 = (*(unsigned __int8 *)(v17 + 6) << 16) & 0xFC0000 | 0x10000;
        *(_BYTE *)(v17 + 7) = 1;
        *(_QWORD *)(v17 + 8) = v10;
        *(_QWORD *)(v17 + 16) = v13;
        *(_WORD *)(v17 + 4) = -18432;
        *(_BYTE *)(v17 + 6) = BYTE2(v18);
        *a3 = v17;
        result = v36;
        v36 = 0;
        if (!result)
          return result;
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          return result;
        }
        return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v12);
      }
      *a3 = v13;
LABEL_47:
      if (*v10 != 2)
      {
        *v10 -= 2;
        return result;
      }
      result = (uint64_t)v10;
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v12);
    }
LABEL_46:
    *a3 = 0;
    if (!v10)
      return result;
    goto LABEL_47;
  }
  v20 = *((_DWORD *)v7 + 4);
  if (v20 < 0)
  {
    v20 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v20;
  }
  if ((unsigned __int16)v20 != 974)
  {
    v5 = this[1];
    goto LABEL_5;
  }
LABEL_41:
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) != 0)
  {
    if ((unsigned __int16)result >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958CB5E4);
    }
    v21 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v21 += 2;
  }
  else
  {
    v21 = 0;
  }
  *a3 = v21;
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::consumeFontRaw@<X0>(unint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  __int128 *v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  unint64_t v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  char v25;
  unsigned int v26;
  unint64_t v28;
  __int128 *v29;
  __int128 *v30;
  char v31;
  unsigned int v32;
  __int16 *v33;
  __int128 *v34;
  double v35;
  __int128 *v36;
  unint64_t v37;
  __int128 *v38;
  unsigned int v39;
  __int128 *v40;
  void *v41;
  __int16 v42;
  int v43;
  __int128 *v44;
  __int128 *v45;
  char v46;
  char v47;
  __int128 *v48;
  __int128 *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  WebCore::CSSParserTokenRange *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  int v58;
  int v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  unsigned __int8 v81;
  uint64_t v82;
  int v83;
  unsigned __int8 v84;
  int v85;
  __int128 v86;
  __int128 v87;
  int v88;
  int v89;
  __int128 *v90;
  WebCore::CSSParserTokenRange *v91;
  WTF *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  double v99;
  unsigned int v100;
  char v101;
  int v102;
  int v103;
  __int16 v104;
  unsigned int v105;
  char v106;
  char v108;
  unsigned __int8 v109;
  char v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  WTF *v115;
  uint64_t v116;
  char v117;
  _BYTE v118[12];
  __int16 v119;
  char v120;
  int v121;
  char v122;
  __int16 v123;
  char v124;
  int v125;
  __int16 v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  int v129;
  _BYTE v130[40];
  char v131;
  _BYTE v132[39];
  _BYTE v133[22];
  _QWORD v134[5];

  v103 = 0;
  v105 = a2;
  v4 = this;
  v116 = 0;
  v5 = 0;
  v117 = 0;
  v6 = 0;
  v114 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v134[2] = *MEMORY[0x1E0C80C00];
  LOBYTE(v123) = 0;
  v124 = 0;
  LOBYTE(v119) = 0;
  v120 = 0;
  do
  {
    v12 = *(__int128 **)v4;
    v11 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 == v11)
      break;
    if (*(_QWORD *)v4 >= v11)
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v12 & 0x3F) == 0)
    {
      v17 = *(__int128 **)v4;
      if (*(_QWORD *)v4 >= v11)
      {
        v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v17 & 0x3F) == 0)
      {
        this = *((unsigned int *)v17 + 4);
        if ((this & 0x80000000) != 0)
        {
          this = WebCore::cssValueKeywordID(*((_QWORD *)v17 + 1), *((unsigned int *)v17 + 1) | ((unint64_t)((*(_DWORD *)v17 >> 22) & 1) << 32));
          *((_DWORD *)v17 + 4) = this;
        }
        if ((unsigned __int16)this == 90)
        {
          v23 = *(__int128 **)v4;
          v22 = *(_QWORD *)(v4 + 8);
          if (*(_QWORD *)v4 == v22)
          {
            v25 = 1;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
            v24 = *(__int128 **)v4;
            v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v24 = (__int128 *)((char *)v23 + 24);
            *(_QWORD *)v4 = (char *)v23 + 24;
          }
          while (1)
          {
            if ((unint64_t)v24 < v22 || (v25 & 1) != 0)
            {
              if ((unint64_t)v24 >= v22)
                v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v26 = *(_DWORD *)v24;
            }
            else
            {
              v26 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v26;
              v25 = 1;
            }
            if ((v26 & 0x3F) != 0x10)
              break;
            v24 = (__int128 *)(*(_QWORD *)v4 + 24);
            *(_QWORD *)v4 = v24;
          }
          if ((*(_DWORD *)v23 & 0x3F) == 0 && (v23[1] & 0x80000000) != 0)
          {
            this = WebCore::cssValueKeywordID(*((_QWORD *)v23 + 1), *((unsigned int *)v23 + 1) | ((unint64_t)((*(_DWORD *)v23 >> 22) & 1) << 32));
            *((_DWORD *)v23 + 4) = this;
          }
          goto LABEL_19;
        }
      }
    }
    if (v7)
    {
      v7 = 1;
      goto LABEL_10;
    }
    *(_OWORD *)v132 = *(_OWORD *)v4;
    v14 = *(__int128 **)v4;
    v13 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 >= v13)
    {
      v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v14 & 0x3F) == 0)
    {
      v18 = *(__int128 **)v4;
      if (*(_QWORD *)v4 >= v13)
      {
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v18 & 0x3F) == 0)
      {
        this = *((unsigned int *)v18 + 4);
        if ((this & 0x80000000) != 0)
        {
          this = WebCore::cssValueKeywordID(*((_QWORD *)v18 + 1), *((unsigned int *)v18 + 1) | ((unint64_t)((*(_DWORD *)v18 >> 22) & 1) << 32));
          *((_DWORD *)v18 + 4) = this;
        }
        if ((unsigned __int16)this - 47 <= 0x2B
          && ((1 << (this - 47)) & 0x80000000003) != 0)
        {
          v29 = *(__int128 **)v4;
          v28 = *(_QWORD *)(v4 + 8);
          if (*(_QWORD *)v4 == v28)
          {
            v31 = 1;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
            v30 = *(__int128 **)v4;
            v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v30 = (__int128 *)((char *)v29 + 24);
            *(_QWORD *)v4 = (char *)v29 + 24;
          }
          while (1)
          {
            if ((unint64_t)v30 < v28 || (v31 & 1) != 0)
            {
              if ((unint64_t)v30 >= v28)
                v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v32 = *(_DWORD *)v30;
            }
            else
            {
              v32 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v32;
              v31 = 1;
            }
            if ((v32 & 0x3F) != 0x10)
              break;
            v30 = (__int128 *)(*(_QWORD *)v4 + 24);
            *(_QWORD *)v4 = v30;
          }
          if ((*(_DWORD *)v29 & 0x3F) != 0)
          {
            v117 = 0;
            LOWORD(v100) = 0;
LABEL_81:
            v113 = 0;
            v110 = 0;
            v108 = 0;
            BYTE4(v116) = 1;
            v7 = 1;
            goto LABEL_19;
          }
          this = *((unsigned int *)v29 + 4);
          if ((this & 0x80000000) != 0)
          {
            this = WebCore::cssValueKeywordID(*((_QWORD *)v29 + 1), *((unsigned int *)v29 + 1) | ((unint64_t)((*(_DWORD *)v29 >> 22) & 1) << 32));
            *((_DWORD *)v29 + 4) = this;
          }
          if ((unsigned __int16)this != 48)
          {
            v117 = this;
            v100 = this >> 8;
            goto LABEL_81;
          }
          if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8)
            || (this = WebCore::CSSPropertyParserHelpers::consumeAngleRaw(v4, v105, 1, 0, v130), !v130[16]))
          {
            LOWORD(v100) = 0;
            v117 = 48;
            goto LABEL_81;
          }
          v35 = *(double *)&v130[8];
          BYTE4(v113) = v130[0];
          switch(v130[0])
          {
            case 0xC:
              goto LABEL_93;
            case 0x40:
              v99 = 360.0;
              break;
            case 0xE:
              v99 = 0.9;
              break;
            case 0xD:
              v99 = 57.2957795;
              break;
            default:
              v35 = 0.0;
LABEL_93:
              if (v35 >= -90.0 && v35 <= 90.0)
              {
                LOWORD(v100) = 0;
                v134[0] = *(_QWORD *)&v130[1];
                BYTE4(v116) = 1;
                v117 = 48;
                *(_QWORD *)((char *)v134 + 7) = *(_QWORD *)&v130[8];
                LOBYTE(v113) = 1;
                v7 = 1;
                v110 = v130[0];
                v108 = 1;
                goto LABEL_19;
              }
              BYTE4(v116) = 0;
              v117 = 0;
              v7 = 0;
              *(_OWORD *)v4 = *(_OWORD *)v132;
              goto LABEL_9;
          }
          v35 = *(double *)&v130[8] * v99;
          goto LABEL_93;
        }
      }
    }
    BYTE4(v116) = 0;
    v117 = 0;
    v7 = 0;
LABEL_9:
    LOBYTE(v113) = v108;
    BYTE4(v113) = v110;
LABEL_10:
    if (!v114)
    {
      v16 = *(__int128 **)v4;
      v15 = *(_QWORD *)(v4 + 8);
      if (*(_QWORD *)v4 >= v15)
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_BYTE *)v16 & 0x3F) == 0)
      {
        v21 = *(__int128 **)v4;
        if (*(_QWORD *)v4 >= v15)
        {
          v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        if ((*(_DWORD *)v21 & 0x3F) == 0)
        {
          this = *((unsigned int *)v21 + 4);
          if ((this & 0x80000000) != 0)
          {
            this = WebCore::cssValueKeywordID(*((_QWORD *)v21 + 1), *((unsigned int *)v21 + 1) | ((unint64_t)((*(_DWORD *)v21 >> 22) & 1) << 32));
            *((_DWORD *)v21 + 4) = this;
          }
          if ((unsigned __int16)this == 50)
          {
            v114 = 1;
            v33 = &v123;
LABEL_86:
            v34 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)v4);
            this = (unint64_t)WebCore::CSSParserToken::id((unsigned int *)v34);
            *((_BYTE *)v33 + 2) = 1;
            *v33 = this;
            goto LABEL_19;
          }
        }
      }
      v124 = 0;
      v123 = 0;
    }
    if (v6)
    {
      v6 = 1;
      goto LABEL_28;
    }
    this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)90,(WebCore::CSSValueID)91,(WebCore::CSSValueID)92,(WebCore::CSSValueID)93>(v4);
    if ((this & 0xFF0000) != 0)
    {
      v3 = 0;
      v10 = BYTE1(this);
      v5 = this;
    }
    else
    {
      this = WebCore::CSSPropertyParserHelpers::consumeFontWeightNumberRaw((__int128 **)v4, a2);
      if (!(_BYTE)a2)
      {
        LOBYTE(v116) = 0;
        v5 = 0;
        v6 = 0;
        v112 = v10 | (v9 << 8);
LABEL_28:
        if (v103)
          break;
        v20 = *(__int128 **)v4;
        v19 = *(_QWORD *)(v4 + 8);
        if (*(_QWORD *)v4 >= v19)
        {
          v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_BYTE *)v20 & 0x3F) != 0)
          goto LABEL_102;
        v36 = *(__int128 **)v4;
        if (*(_QWORD *)v4 >= v19)
        {
          v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        this = (unint64_t)WebCore::CSSParserToken::id((unsigned int *)v36);
        v103 = 1;
        v33 = &v119;
        if ((this - 108) >= 8 && (_DWORD)this != 90)
        {
LABEL_102:
          v120 = 0;
          v119 = 0;
          break;
        }
        goto LABEL_86;
      }
      v5 = this;
      v10 = BYTE1(this);
      v9 = this >> 16;
      v3 = 1;
    }
    v112 = v10 | (v9 << 8);
    LOBYTE(v116) = 1;
    v6 = 1;
LABEL_19:
    ++v8;
  }
  while (v8 != 4);
  v38 = *(__int128 **)v4;
  v37 = *(_QWORD *)(v4 + 8);
  if (*(_QWORD *)v4 == v37)
    goto LABEL_209;
  if (*(_QWORD *)v4 >= v37)
  {
    v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v39 = v105;
  if ((*(_DWORD *)v38 & 0x3F) == 0)
  {
    v88 = *((_DWORD *)v38 + 4);
    if (v88 < 0)
    {
      v88 = WebCore::cssValueKeywordID(*((_QWORD *)v38 + 1), *((unsigned int *)v38 + 1) | ((unint64_t)((*(_DWORD *)v38 >> 22) & 1) << 32));
      *((_DWORD *)v38 + 4) = v88;
    }
    if ((unsigned __int16)v88 == 105)
    {
      this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v4, a2);
      if ((this & 0xFF0000) != 0 && (unsigned __int16)this == 105)
      {
        v43 = 0;
        v42 = 101;
        goto LABEL_114;
      }
      goto LABEL_209;
    }
  }
  v40 = *(__int128 **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 8))
  {
    v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v40 & 0x3F) != 0)
    goto LABEL_108;
  v89 = *((_DWORD *)v40 + 4);
  if (v89 < 0)
  {
    v89 = WebCore::cssValueKeywordID(*((_QWORD *)v40 + 1), *((unsigned int *)v40 + 1) | ((unint64_t)((*(_DWORD *)v40 >> 22) & 1) << 32));
    *((_DWORD *)v40 + 4) = v89;
  }
  if ((unsigned __int16)v89 < 0x5Eu)
    goto LABEL_108;
  v90 = *(__int128 **)v4;
  if (*(_QWORD *)v4 >= *(_QWORD *)(v4 + 8))
  {
    v90 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id((unsigned int *)v90) > 0x68)
  {
LABEL_108:
    *(_QWORD *)v133 = 0;
    v128 = 0;
    this = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<std::variant<WebCore::LengthRaw,WebCore::PercentRaw>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::LengthRaw,WebCore::PercentRaw>::consumeAndResolve(v4, (unsigned __int16 **)v133, (uint64_t)&v128, v105 | 0x10100000100, v130);
    if (v128)
      this = WTF::fastFree((WTF::StringImpl *)((char *)v128 - 16), v41);
    if (*(_QWORD *)v133)
      this = WTF::fastFree((WTF *)(*(_QWORD *)v133 - 16), v41);
    if (!v130[24])
      goto LABEL_209;
    v42 = *(_WORD *)v130;
    *(_OWORD *)v132 = *(_OWORD *)&v130[2];
    *(_QWORD *)&v132[14] = *(_QWORD *)&v130[16];
    v43 = 1;
  }
  else
  {
    this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v4, v91);
    if ((this & 0xFF0000) == 0)
      goto LABEL_209;
    v42 = this;
    v43 = 0;
  }
LABEL_114:
  *(_OWORD *)v133 = *(_OWORD *)v132;
  *(_QWORD *)&v133[14] = *(_QWORD *)&v132[14];
  v45 = *(__int128 **)v4;
  v44 = *(__int128 **)(v4 + 8);
  if (*(__int128 **)v4 != v44)
  {
    if (*(_QWORD *)v4 >= (unint64_t)v44)
    {
      v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v46 = 0;
    if ((*(_DWORD *)v45 & 0x3F) == 6)
    {
      v47 = 0;
      if (*((_WORD *)v45 + 8) == 47)
      {
        v48 = *(__int128 **)v4;
        if (*(__int128 **)v4 == v44)
        {
          v50 = 1;
          {
            v49 = v44;
          }
          else
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v49 = *(__int128 **)v4;
          }
          v39 = v105;
        }
        else
        {
          v49 = (__int128 *)((char *)v48 + 24);
          *(_QWORD *)v4 = (char *)v48 + 24;
        }
        while (1)
        {
          if (v49 < v44 || (v50 & 1) != 0)
          {
            if (v49 >= v44)
              v49 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v51 = *(_DWORD *)v49;
          }
          else
          {
            v51 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v51;
            v50 = 1;
          }
          if ((v51 & 0x3F) != 0x10)
            break;
          v49 = (__int128 *)(*(_QWORD *)v4 + 24);
          *(_QWORD *)v4 = v49;
        }
        this = WebCore::CSSPropertyParserHelpers::consumeLineHeightRaw((uint64_t)v130, (__int128 **)v4, v39);
        v47 = v130[0];
        *(_OWORD *)v132 = *(_OWORD *)&v130[1];
        *(_OWORD *)&v132[16] = *(_OWORD *)&v130[17];
        *(_QWORD *)&v132[31] = *(_QWORD *)&v130[32];
        v46 = v131;
        if (!v131)
          goto LABEL_209;
      }
    }
    else
    {
      v47 = 0;
    }
    v101 = v47;
    v102 = v43;
    v104 = v42;
    v106 = v46;
    v109 = v5;
    v111 = v3;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    *(_QWORD *)v130 = 0;
    *(_QWORD *)&v130[8] = 0;
    while (2)
    {
      this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)116,(WebCore::CSSValueID)117,(WebCore::CSSValueID)118,(WebCore::CSSValueID)119,(WebCore::CSSValueID)120,(WebCore::CSSValueID)121,(WebCore::CSSValueID)122,(WebCore::CSSValueID)123>(v4);
      if (this < 0x10000)
      {
        this = (unint64_t)WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw((WTF::StringImpl *)v4, v55, (WTF::AtomString *)&v127);
        v56 = v127;
        if (!v127)
        {
          v92 = *(WTF **)v130;
          if (v54)
          {
            v93 = 16 * v54;
            v94 = *(_QWORD *)v130;
            do
            {
              v95 = *(unsigned int *)(v94 + 8);
              if ((_DWORD)v95 != -1)
                this = ((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E339DD10[v95])(&v128, v94);
              *(_DWORD *)(v94 + 8) = -1;
              v94 += 16;
              v93 -= 16;
            }
            while (v93);
          }
          if (v92)
            this = WTF::fastFree(v92, v55);
          goto LABEL_209;
        }
        *(_DWORD *)v127 += 2;
        v128 = v56;
        v129 = 1;
        if (v54 == *(_DWORD *)&v130[8])
        {
          v69 = WTF::Vector<std::variant<WebCore::CSSValueID,WTF::AtomString>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v54 + 1, (unint64_t)&v128);
          v59 = *(_DWORD *)&v130[12];
          v52 = *(_QWORD *)v130;
          v70 = *(_QWORD *)v130 + 16 * *(unsigned int *)&v130[12];
          *(_BYTE *)v70 = 0;
          *(_DWORD *)(v70 + 8) = -1;
          v71 = *(unsigned int *)(v69 + 8);
          if ((_DWORD)v71 != -1)
          {
            ((void (*)(_BYTE *, uint64_t, unint64_t))off_1E339DD20[v71])(v118, v70, v69);
            *(_DWORD *)(v70 + 8) = v71;
          }
LABEL_135:
          v54 = v59 + 1;
          *(_DWORD *)&v130[12] = v54;
          if (v129 != -1)
            ((void (*)(_BYTE *, WTF::StringImpl **))off_1E339DD10[v129])(v118, &v128);
        }
        else
        {
          v57 = v52 + 16 * v54;
          *(_BYTE *)v57 = 0;
          *(_DWORD *)(v57 + 8) = -1;
          v58 = v129;
          if (v129 != -1)
          {
            ((void (*)(_BYTE *, uint64_t, WTF::StringImpl **))off_1E339DD20[v129])(v118, v57, &v128);
            *(_DWORD *)(v57 + 8) = v58;
            v59 = *(_DWORD *)&v130[12];
            goto LABEL_135;
          }
          *(_DWORD *)&v130[12] = ++v54;
        }
        this = (unint64_t)v127;
        v127 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v55);
          else
            *(_DWORD *)this -= 2;
        }
        v53 = v52;
LABEL_141:
        v61 = *(__int128 **)v4;
        v60 = *(__int128 **)(v4 + 8);
        if (*(_QWORD *)v4 >= (unint64_t)v60)
        {
          v61 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v61 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_DWORD *)v61 & 0x3F) != 0x15)
        {
          v74 = *(WTF **)v130;
          if (v54)
          {
            if (v54 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1958CC850);
            }
            this = WTF::fastMalloc((WTF *)(16 * v54));
            v75 = 0;
            v115 = (WTF *)this;
            do
            {
              v76 = this + v75;
              *(_BYTE *)v76 = 0;
              *(_DWORD *)(v76 + 8) = -1;
              v77 = *(unsigned int *)((char *)v74 + v75 + 8);
              if ((_DWORD)v77 != -1)
              {
                ((void (*)(_BYTE *, uint64_t))off_1E339DD88[v77])(v130, v76);
                this = (unint64_t)v115;
                *(_DWORD *)(v76 + 8) = v77;
              }
              v75 += 16;
            }
            while (16 * v54 != v75);
            v78 = v54;
            v79 = 16 * v54;
            v80 = v74;
            v81 = v117;
            do
            {
              v82 = *((unsigned int *)v80 + 2);
              if ((_DWORD)v82 != -1)
                this = ((uint64_t (*)(_BYTE *, WTF *))off_1E339DD10[v82])(v130, v80);
              *((_DWORD *)v80 + 2) = -1;
              v80 = (WTF *)((char *)v80 + 16);
              v79 -= 16;
            }
            while (v79);
            v83 = v111;
            v84 = v109;
          }
          else
          {
            v115 = 0;
            v78 = 0;
            v83 = v111;
            v84 = v109;
            v81 = v117;
          }
          if (v74)
            this = WTF::fastFree(v74, v55);
          if (*(_QWORD *)v4 == *(_QWORD *)(v4 + 8))
          {
            *(_WORD *)a3 = v81 | (unsigned __int16)((_WORD)v100 << 8);
            *(_DWORD *)(a3 + 2) = v125;
            *(_WORD *)(a3 + 6) = v126;
            *(_BYTE *)(a3 + 8) = BYTE4(v113);
            *(_QWORD *)(a3 + 9) = v134[0];
            *(_QWORD *)(a3 + 16) = *(_QWORD *)((char *)v134 + 7);
            *(_BYTE *)(a3 + 24) = v113;
            *(_DWORD *)(a3 + 25) = *(_DWORD *)v130;
            *(_DWORD *)(a3 + 28) = *(_DWORD *)&v130[3];
            *(_BYTE *)(a3 + 32) = BYTE4(v116);
            v85 = (int)v128;
            *(_DWORD *)(a3 + 36) = *(_DWORD *)((char *)&v128 + 3);
            *(_DWORD *)(a3 + 33) = v85;
            *(_WORD *)(a3 + 40) = v123;
            *(_BYTE *)(a3 + 42) = v124;
            *(_DWORD *)(a3 + 43) = v121;
            *(_BYTE *)(a3 + 47) = v122;
            *(_QWORD *)(a3 + 48) = v84 | (v112 << 8);
            *(_DWORD *)(a3 + 56) = v83;
            *(_BYTE *)(a3 + 64) = v116;
            *(_DWORD *)(a3 + 68) = *(_DWORD *)((char *)&v127 + 3);
            *(_DWORD *)(a3 + 65) = (_DWORD)v127;
            LOWORD(v85) = v119;
            *(_BYTE *)(a3 + 74) = v120;
            *(_WORD *)(a3 + 72) = v85;
            *(_BYTE *)(a3 + 79) = v118[11];
            *(_DWORD *)(a3 + 75) = *(_DWORD *)&v118[7];
            *(_BYTE *)(a3 + 80) = 0;
            *(_DWORD *)(a3 + 84) = *(_DWORD *)&v118[3];
            *(_DWORD *)(a3 + 81) = *(_DWORD *)v118;
            *(_WORD *)(a3 + 88) = v104;
            *(_OWORD *)(a3 + 90) = *(_OWORD *)v133;
            *(_QWORD *)(a3 + 104) = *(_QWORD *)&v133[14];
            *(_DWORD *)(a3 + 112) = v102;
            *(_BYTE *)(a3 + 120) = v101;
            v86 = *(_OWORD *)v132;
            v87 = *(_OWORD *)&v132[16];
            *(_QWORD *)(a3 + 152) = *(_QWORD *)&v132[31];
            *(_OWORD *)(a3 + 137) = v87;
            *(_OWORD *)(a3 + 121) = v86;
            *(_BYTE *)(a3 + 160) = v106;
            *(_QWORD *)(a3 + 168) = v115;
            *(_DWORD *)(a3 + 176) = v54;
            *(_DWORD *)(a3 + 180) = v54;
            *(_BYTE *)(a3 + 184) = 1;
          }
          else
          {
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 184) = 0;
            if (v54)
            {
              v96 = 16 * v78;
              v97 = v115;
              do
              {
                v98 = *((unsigned int *)v97 + 2);
                if ((_DWORD)v98 != -1)
                  ((void (*)(_BYTE *, WTF *))off_1E339DD10[v98])(v130, v97);
                *((_DWORD *)v97 + 2) = -1;
                v97 = (WTF *)((char *)v97 + 16);
                v96 -= 16;
              }
              while (v96);
            }
            this = (unint64_t)v115;
            if (v115)
              return WTF::fastFree(v115, v55);
          }
          return this;
        }
        v62 = *(__int128 **)v4;
        if (*(__int128 **)v4 == v60)
        {
          v64 = 1;
          {
            v63 = v60;
          }
          else
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v63 = *(__int128 **)v4;
          }
        }
        else
        {
          v63 = (__int128 *)((char *)v62 + 24);
          *(_QWORD *)v4 = (char *)v62 + 24;
        }
        while (1)
        {
          if (v63 < v60 || (v64 & 1) != 0)
          {
            if (v63 >= v60)
              v63 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v65 = *(_DWORD *)v63;
          }
          else
          {
            v65 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v65;
            v64 = 1;
          }
          if ((v65 & 0x3F) != 0x10)
            break;
          v63 = (__int128 *)(*(_QWORD *)v4 + 24);
          *(_QWORD *)v4 = v63;
        }
        continue;
      }
      break;
    }
    LOWORD(v128) = this;
    v129 = 0;
    if (v54 == *(_DWORD *)&v130[8])
    {
      this = WTF::Vector<std::variant<WebCore::CSSValueID,WTF::AtomString>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v54 + 1, (unint64_t)&v128);
      v68 = *(_DWORD *)&v130[12];
      v52 = *(_QWORD *)v130;
      v72 = *(_QWORD *)v130 + 16 * *(unsigned int *)&v130[12];
      *(_BYTE *)v72 = 0;
      *(_DWORD *)(v72 + 8) = -1;
      v73 = *(unsigned int *)(this + 8);
      if ((_DWORD)v73 != -1)
      {
        this = ((uint64_t (*)(WTF::StringImpl **, uint64_t, unint64_t))off_1E339DD20[v73])(&v127, v72, this);
        *(_DWORD *)(v72 + 8) = v73;
      }
      v53 = v52;
    }
    else
    {
      v66 = v53 + 16 * v54;
      *(_BYTE *)v66 = 0;
      *(_DWORD *)(v66 + 8) = -1;
      v67 = v129;
      if (v129 == -1)
      {
        *(_DWORD *)&v130[12] = ++v54;
        goto LABEL_141;
      }
      this = ((uint64_t (*)(WTF::StringImpl **, uint64_t, WTF::StringImpl **))off_1E339DD20[v129])(&v127, v66, &v128);
      *(_DWORD *)(v66 + 8) = v67;
      v68 = *(_DWORD *)&v130[12];
    }
    v54 = v68 + 1;
    *(_DWORD *)&v130[12] = v54;
    if (v129 != -1)
      this = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E339DD10[v129])(&v127, &v128);
    goto LABEL_141;
  }
LABEL_209:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 184) = 0;
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeLineHeightRaw(uint64_t a1, __int128 **this, unsigned int a3)
{
  __int128 *v6;
  uint64_t result;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int16 *v19;

  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v10 = *((_DWORD *)v6 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v10;
  }
  if ((unsigned __int16)v10 != 90)
  {
LABEL_3:
    *(_QWORD *)&v15 = 0;
    v19 = 0;
    result = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(this, (uint64_t *)&v15, (uint64_t)&v19, 0x10100000100);
    if (v19)
    {
      v11 = v8;
      v13 = result;
      WTF::fastFree((WTF *)(v19 - 8), v8);
      v8 = v11;
      result = v13;
    }
    if ((_QWORD)v15)
    {
      v12 = (char)v8;
      v14 = result;
      WTF::fastFree((WTF *)(v15 - 16), v8);
      LOBYTE(v8) = v12;
      result = v14;
    }
    if ((_BYTE)v8)
    {
      *(_QWORD *)(a1 + 8) = result;
      *(_DWORD *)(a1 + 32) = 1;
    }
    else
    {
      v19 = 0;
      v18 = 0;
      result = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<std::variant<WebCore::LengthRaw,WebCore::PercentRaw>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::LengthRaw,WebCore::PercentRaw>::consumeAndResolve((uint64_t)this, &v19, (uint64_t)&v18, a3 | 0x10100000100, &v15);
      if (v18)
        result = WTF::fastFree((WTF *)(v18 - 16), v9);
      if (v19)
        result = WTF::fastFree((WTF *)(v19 - 8), v9);
      if (!v17)
        goto LABEL_23;
      *(_OWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 24) = v16;
      *(_DWORD *)(a1 + 32) = 2;
    }
LABEL_15:
    *(_BYTE *)(a1 + 40) = 1;
    return result;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, (WebCore::CSSParserTokenRange *)this);
  if ((result & 0xFF0000) != 0)
  {
    *(_WORD *)(a1 + 8) = result;
    *(_DWORD *)(a1 + 32) = 0;
    goto LABEL_15;
  }
LABEL_23:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeAspectRatio@<X0>(int *this@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  unint64_t v5;
  __int128 *v6;
  int *v7;
  WTF::StringImpl *v8;
  int *v9;
  __int128 *v10;
  __int128 *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  int *v21;
  int *v22;

  v3 = this;
  v6 = *(__int128 **)this;
  v5 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
  {
    v7 = 0;
  }
  else
  {
    this = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)this, &v22);
    v7 = v22;
    v5 = *((_QWORD *)v3 + 1);
  }
  if (*(_QWORD *)v3 == v5)
  {
    *a2 = v7;
    return this;
  }
  this = (int *)WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)v3, (void *)1, &v22);
  v9 = v22;
  if (!v22)
    goto LABEL_26;
  v11 = *(__int128 **)v3;
  v10 = (__int128 *)*((_QWORD *)v3 + 1);
  if (*(_QWORD *)v3 >= (unint64_t)v10)
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v11 & 0x3F) == 6 && *((_WORD *)v11 + 8) == 47)
  {
    v17 = *(__int128 **)v3;
    if (*(__int128 **)v3 == v10)
    {
      v19 = 1;
      {
        v18 = v10;
      }
      else
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        v18 = *(__int128 **)v3;
      }
    }
    else
    {
      v18 = (__int128 *)((char *)v17 + 24);
      *(_QWORD *)v3 = (char *)v17 + 24;
    }
    while (1)
    {
      if (v18 < v10 || (v19 & 1) != 0)
      {
        if (v18 >= v10)
          v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v20 = *(_DWORD *)v18;
      }
      else
      {
        v20 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
        v19 = 1;
      }
      if ((v20 & 0x3F) != 0x10)
        break;
      v18 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v18;
    }
    WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)v3, (void *)1, &v21);
    v12 = v21;
    if (!v21)
    {
      v13 = 0;
      goto LABEL_18;
    }
    v9 = v22;
  }
  else
  {
    v12 = &WebCore::staticCSSValuePool[2068];
    dword_1ECE8ABF8 += 2;
  }
  v21 = 0;
  v22 = 0;
  v13 = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)v13 = 2;
  v14 = *(unsigned __int8 *)(v13 + 6) >> 2;
  *(_DWORD *)(v13 + 8) = 2;
  *(_WORD *)(v13 + 4) = -9216;
  *(_BYTE *)(v13 + 6) = ((((v14 & 0x3F) << 18) | 0x1D800u) + 1024) >> 16;
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = v12;
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*v15 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v8);
    else
      *v15 -= 2;
  }
LABEL_18:
  this = v22;
  v22 = 0;
  if (this)
  {
    if (*this == 2)
    {
      this = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v8);
      if (v13)
        goto LABEL_22;
      goto LABEL_26;
    }
    *this -= 2;
  }
  if (v13)
  {
LABEL_22:
    if (v7
      || (this = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)v3, &v22),
          (v7 = v22) != 0))
    {
      this = (int *)WTF::fastCompactMalloc((WTF *)0x38);
      *this = 2;
      v16 = *((unsigned __int8 *)this + 6) >> 2;
      this[2] = 2;
      *((_WORD *)this + 2) = -10240;
      *((_BYTE *)this + 6) = (((v16 & 0x3F) << 18) | 0x1D800u) >> 16;
      *((_QWORD *)this + 2) = v7;
      *((_QWORD *)this + 3) = v13;
      *a2 = this;
    }
    else
    {
      *a2 = v13;
    }
    return this;
  }
LABEL_26:
  *a2 = 0;
  if (v7)
  {
    if (*v7 == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v8);
    else
      *v7 -= 2;
  }
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeWillChange@<X0>(unsigned int **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  unsigned int *v7;
  WebCore::CSSParserTokenRange *v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  int v12;
  WebCore::CSSParserTokenRange *v13;
  unsigned int *v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  int v18;
  int isExposed;
  BOOL v20;
  int *v21;
  WTF::StringImpl *v22;
  char v23;
  int v24;
  int *v25;
  _BYTE *v26;
  unsigned int v27;
  int v28;
  WTF::StringImpl *v29;
  int v31;
  int *v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[32];
  int *v37;
  int *v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE v41[32];

  v7 = *this;
  if (v7 >= this[1])
  {
    v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v7) == 394)
    return WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v8, a3);
  v39 = v41;
  v40 = 4;
  v9 = *this;
  v10 = (unint64_t)this[1];
  if (*this == (unsigned int *)v10)
  {
    v27 = 0;
    v34 = v36;
    v35 = 4;
LABEL_29:
    memcpy(v36, v41, 8 * v27);
    goto LABEL_30;
  }
  v11 = (unsigned int *)((char *)a2 + 54);
  do
  {
    if ((unint64_t)v9 >= v10)
    {
      v9 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v9 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    v12 = WebCore::CSSParserToken::id(v9);
    if (v12 <= 383)
    {
      if (v12 == 6 || v12 == 49)
        goto LABEL_54;
    }
    else
    {
      switch(v12)
      {
        case 924:
          goto LABEL_37;
        case 394:
          goto LABEL_54;
        case 384:
LABEL_37:
          WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v13, &v37);
          v38 = v37;
          v31 = HIDWORD(v40);
          if (HIDWORD(v40) == (_DWORD)v40)
          {
            WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v39, (uint64_t *)&v38);
          }
          else
          {
            v38 = 0;
            *(_QWORD *)&v39[8 * HIDWORD(v40)] = v37;
            HIDWORD(v40) = v31 + 1;
          }
          v32 = v38;
          v38 = 0;
          if (v32)
            goto LABEL_40;
          goto LABEL_25;
      }
    }
    v15 = (__int128 *)*this;
    v14 = this[1];
    if (*this >= v14)
    {
      v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v15 & 0x3F) != 0)
      goto LABEL_54;
    v16 = (__int128 *)*this;
    if (*this >= v14)
    {
      v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    v17 = WebCore::cssPropertyID(*((_QWORD *)v16 + 1), (const char *)(*((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32)));
    if (v17 == 296)
      goto LABEL_54;
    v18 = v17;
    isExposed = WebCore::isExposed(v17, v11);
    if (v18)
      v20 = isExposed == 0;
    else
      v20 = 1;
    if (v20)
    {
      WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)this, 0, (uint64_t *)&v38);
      if (!v38)
        goto LABEL_54;
      v37 = v38;
      v33 = HIDWORD(v40);
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v39, (uint64_t *)&v37);
      }
      else
      {
        v37 = 0;
        *(_QWORD *)&v39[8 * HIDWORD(v40)] = v38;
        HIDWORD(v40) = v33 + 1;
      }
      v32 = v37;
      v37 = 0;
      if (v32)
      {
LABEL_40:
        if (*v32 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v13);
        else
          *v32 -= 2;
      }
    }
    else
    {
      v21 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v21 = 2;
      v23 = *((_BYTE *)v21 + 6);
      *((_WORD *)v21 + 2) = 79;
      *((_BYTE *)v21 + 6) = v23 & 0xFC;
      *((_WORD *)v21 + 4) = v18;
      v38 = v21;
      v24 = HIDWORD(v40);
      if (HIDWORD(v40) == (_DWORD)v40)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v39, (uint64_t *)&v38);
      }
      else
      {
        v38 = 0;
        *(_QWORD *)&v39[8 * HIDWORD(v40)] = v21;
        HIDWORD(v40) = v24 + 1;
      }
      v25 = v38;
      v38 = 0;
      if (v25)
      {
        if (*v25 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v22);
        else
          *v25 -= 2;
      }
      WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
    }
LABEL_25:
    if (*this == this[1])
      break;
    if (!WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)this, v13))
    {
LABEL_54:
      *a3 = 0;
      return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v13);
    }
    v9 = *this;
    v10 = (unint64_t)this[1];
  }
  while (*this != (unsigned int *)v10);
  v26 = v39;
  v34 = v36;
  v35 = 4;
  v27 = HIDWORD(v40);
  if (v39 == v41)
    goto LABEL_29;
  v39 = v41;
  v34 = v26;
  v28 = v40;
  LODWORD(v40) = 4;
  LODWORD(v35) = v28;
LABEL_30:
  HIDWORD(v40) = 0;
  HIDWORD(v35) = v27;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v34, (uint64_t *)&v38);
  *a3 = v38;
  WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v29);
  return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v13);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeQuotes@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  _DWORD *v18;
  WTF *v20;
  uint64_t v21;
  int *v23;
  int v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  _BYTE v28[32];
  int *v29;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[32];

  v3 = this;
  v6 = *(__int128 **)this;
  v5 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
  {
LABEL_3:
    v30 = (WTF *)v32;
    v31 = 4;
    if (*(_QWORD *)v3 == v5)
      goto LABEL_41;
    do
    {
      this = WebCore::CSSPropertyParserHelpers::consumeString(v3, &v29);
      v7 = (uint64_t)v29;
      if (!v29)
        goto LABEL_41;
      v8 = HIDWORD(v31);
      if (HIDWORD(v31) == (_DWORD)v31)
      {
        v10 = HIDWORD(v31) + ((unint64_t)HIDWORD(v31) >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= (unint64_t)HIDWORD(v31) + 1)
          v12 = HIDWORD(v31) + 1;
        else
          v12 = v11;
        v13 = v30;
        if (v12 < 5)
        {
          v30 = (WTF *)v32;
          LODWORD(v31) = 4;
          v14 = (WTF *)v32;
        }
        else
        {
          if (v12 >> 29)
          {
            __break(0xC471u);
LABEL_71:
            JUMPOUT(0x1958CD5B4);
          }
          v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
          LODWORD(v31) = v12;
          v30 = v14;
        }
        this = (uint64_t)memcpy(v14, v13, 8 * v8);
        if (v32 != (_BYTE *)v13 && v13)
        {
          if (v30 == v13)
          {
            v30 = 0;
            LODWORD(v31) = 0;
          }
          this = WTF::fastFree(v13, a2);
        }
        LODWORD(v8) = HIDWORD(v31);
        v9 = (uint64_t *)((char *)v30 + 8 * HIDWORD(v31));
      }
      else
      {
        v9 = (uint64_t *)((char *)v30 + 8 * HIDWORD(v31));
      }
      *v9 = v7;
      HIDWORD(v31) = v8 + 1;
    }
    while (*(_QWORD *)v3 != *(_QWORD *)(v3 + 8));
    if ((_DWORD)v8 == -1 || (((_BYTE)v8 + 1) & 1) != 0)
    {
LABEL_41:
      *a3 = 0;
    }
    else
    {
      v25 = (WTF *)v28;
      v26 = 4;
      v15 = v30;
      if (v30 == (WTF *)v32)
      {
        memcpy(v28, v32, 8 * (v8 + 1));
      }
      else
      {
        v30 = (WTF *)v32;
        v25 = v15;
        v24 = v31;
        LODWORD(v31) = 4;
        v26 = v24;
      }
      HIDWORD(v31) = 0;
      v27 = v8 + 1;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v25, (uint64_t *)&v29);
      *a3 = v29;
      if (v27)
      {
        v16 = v25;
        v17 = 8 * v27;
        do
        {
          v18 = *(_DWORD **)v16;
          *(_QWORD *)v16 = 0;
          if (v18)
          {
            if (*v18 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, a2);
            else
              *v18 -= 2;
          }
          v16 = (WTF *)((char *)v16 + 8);
          v17 -= 8;
        }
        while (v17);
      }
      this = (uint64_t)v25;
      if (v28 != (_BYTE *)v25 && v25 != 0)
      {
        v25 = 0;
        v26 = 0;
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    v20 = v30;
    if (HIDWORD(v31))
    {
      v21 = 8 * HIDWORD(v31);
      do
      {
        this = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
          else
            *(_DWORD *)this -= 2;
        }
        v20 = (WTF *)((char *)v20 + 8);
        v21 -= 8;
      }
      while (v21);
      v20 = v30;
    }
    if (v32 != (_BYTE *)v20 && v20 != 0)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      return WTF::fastFree(v20, a2);
    }
    return this;
  }
  this = *((unsigned int *)v6 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = this;
  }
  if ((unsigned __int16)this != 6 && (unsigned __int16)this != 394)
  {
    v5 = *(_QWORD *)(v3 + 8);
    goto LABEL_3;
  }
  this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v3, a2);
  if ((this & 0xFF0000) != 0)
  {
    if ((unsigned __int16)this >= 0x48Eu)
    {
      __break(0xC471u);
      goto LABEL_71;
    }
    v23 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v23 += 2;
  }
  else
  {
    v23 = 0;
  }
  *a3 = v23;
  return this;
}

void WebCore::CSSPropertyParserHelpers::consumeFontVariantLigatures(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  WebCore::CSSParserTokenRange *v6;
  unsigned int *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *this;
  if (v5 >= this[1])
  {
    v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v5) == 90)
    goto LABEL_5;
  v7 = *this;
  if (*this >= this[1])
  {
    v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v7) == 6)
  {
LABEL_5:
    WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v6, a2);
  }
  else
  {
    v9 = 0;
    v10 = &v12;
    v11 = 4;
    while (!WebCore::CSSFontVariantLigaturesParser::consumeLigature((WebCore::CSSFontVariantLigaturesParser *)&v9, (__int128 **)this))
    {
      if (*this == this[1])
      {
        WebCore::CSSFontVariantLigaturesParser::finalizeValue((uint64_t)&v9, a2);
        goto LABEL_15;
      }
    }
    *a2 = 0;
LABEL_15:
    WebCore::CSSFontVariantLigaturesParser::~CSSFontVariantLigaturesParser((WebCore::CSSFontVariantLigaturesParser *)&v9, v8);
  }
}

uint64_t WebCore::CSSFontVariantLigaturesParser::finalizeValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  WTF::StringImpl *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v10[32];
  uint64_t v11;

  v3 = *(unsigned int *)(this + 20);
  if ((_DWORD)v3)
  {
    v4 = this;
    v8 = v10;
    v9 = 4;
    v5 = *(const void **)(this + 8);
    if (v5 == (const void *)(this + 24))
    {
      memcpy(v10, v5, 8 * v3);
    }
    else
    {
      *(_QWORD *)(this + 8) = this + 24;
      v8 = v5;
      v7 = *(_DWORD *)(this + 16);
      *(_DWORD *)(this + 16) = 4;
      LODWORD(v9) = v7;
    }
    *(_DWORD *)(v4 + 20) = 0;
    HIDWORD(v9) = v3;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v8, &v11);
    *a2 = v11;
    return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v6);
  }
  else
  {
    dword_1ECE8C188 += 2;
    *a2 = &WebCore::staticCSSValuePool[3448];
  }
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFontVariantEastAsian@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  char v11;
  __int128 *v12;
  unint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  unsigned int v19;
  char v20;
  int *v21;
  int *v22;
  int *v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  int *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF *v33;
  uint64_t v34;
  int v36;
  WTF *v37;
  int v38;
  unsigned int v39;
  _BYTE v40[32];
  int *v41;
  WTF *v42;
  int v43;
  unsigned int v44;
  _QWORD v45[4];

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  if ((unsigned __int16)this != 90)
  {
LABEL_3:
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v13 = *(_QWORD *)(v3 + 8);
    while (1)
    {
      v14 = *(__int128 **)v3;
      if (*(_QWORD *)v3 >= v13)
      {
        v14 = v12;
        {
          *(_DWORD *)v12 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *((_DWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 1) = 0;
          v14 = v12;
        }
      }
      if ((*(_BYTE *)v14 & 0x3F) != 0)
        break;
      v15 = *(__int128 **)v3;
      if (*(_QWORD *)v3 >= v13)
      {
        v15 = v12;
        {
          *(_QWORD *)v12 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1Eu;
          *((_QWORD *)v12 + 1) = 0;
          v15 = v12;
        }
      }
      if ((*(_DWORD *)v15 & 0x3F) != 0)
        break;
      this = *((unsigned int *)v15 + 4);
      if ((this & 0x80000000) != 0)
      {
        v16 = v12;
        v36 = v7;
        this = WebCore::cssValueKeywordID(*((_QWORD *)v15 + 1), *((unsigned int *)v15 + 1) | ((unint64_t)((*(_DWORD *)v15 >> 22) & 1) << 32));
        v7 = v36;
        v12 = v16;
        *((_DWORD *)v15 + 4) = this;
      }
      switch((__int16)this)
      {
        case 'O':
          if (v6)
            goto LABEL_107;
          v6 = 1;
          v7 = 1;
          break;
        case 'P':
          if (v6)
            goto LABEL_107;
          v7 = 2;
          goto LABEL_29;
        case 'Q':
          if (v6)
            goto LABEL_107;
          v7 = 3;
          goto LABEL_29;
        case 'R':
          if (v6)
            goto LABEL_107;
          v7 = 4;
          goto LABEL_29;
        case 'S':
          if (v6)
            goto LABEL_107;
          v7 = 5;
          goto LABEL_29;
        case 'T':
          if (v6)
            goto LABEL_107;
          v7 = 6;
LABEL_29:
          v6 = 1;
          break;
        case 'U':
          if (v8)
            goto LABEL_107;
          v8 = 1;
          v9 = 1;
          break;
        case 'V':
          if (v8)
            goto LABEL_107;
          v9 = 2;
          v8 = 1;
          break;
        case 'W':
          if (v10)
            goto LABEL_107;
          v10 = 1;
          break;
        default:
          goto LABEL_48;
      }
      v17 = *(__int128 **)v3;
      v13 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)v3 == v13)
      {
        v18 = 1;
        {
          *(_DWORD *)v12 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *((_DWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 1) = 0;
          v17 = *(__int128 **)v3;
        }
      }
      else
      {
        v17 = (__int128 *)((char *)v17 + 24);
        *(_QWORD *)v3 = v17;
      }
      while (1)
      {
        if ((unint64_t)v17 < v13 || (v18 & 1) != 0)
        {
          if ((unint64_t)v17 >= v13)
            v17 = v12;
          v19 = *(_DWORD *)v17;
        }
        else
        {
          v19 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *(_QWORD *)v12 = v19;
          *((_QWORD *)v12 + 1) = 0;
          v18 = 1;
        }
        if ((v19 & 0x3F) != 0x10)
          break;
        v17 = (__int128 *)(*(_QWORD *)v3 + 24);
        *(_QWORD *)v3 = v17;
      }
      v11 = 1;
    }
LABEL_48:
    if ((v11 & 1) == 0)
      goto LABEL_107;
    v42 = (WTF *)v45;
    v43 = 4;
    if (v6)
      v20 = v7;
    else
      v20 = 0;
    switch(v20)
    {
      case 1:
        v21 = &WebCore::staticCSSValuePool[3404];
        dword_1ECE8C0D8 += 2;
        goto LABEL_69;
      case 2:
        v21 = &WebCore::staticCSSValuePool[3408];
        dword_1ECE8C0E8 += 2;
        goto LABEL_69;
      case 3:
        v23 = &WebCore::staticCSSValuePool[3412];
        dword_1ECE8C0F8 += 2;
        goto LABEL_66;
      case 4:
        v23 = &WebCore::staticCSSValuePool[3416];
        dword_1ECE8C108 += 2;
        goto LABEL_66;
      case 5:
        v23 = &WebCore::staticCSSValuePool[3420];
        dword_1ECE8C118 += 2;
LABEL_66:
        v45[0] = v23;
        v24 = 1;
        v44 = 1;
        break;
      case 6:
        v21 = &WebCore::staticCSSValuePool[3424];
        dword_1ECE8C128 += 2;
LABEL_69:
        v45[0] = v21;
        v24 = 1;
        break;
      default:
        v24 = 0;
        break;
    }
    if (v8)
      v25 = v9;
    else
      v25 = 0;
    if (v25 == 1)
    {
      v26 = 0xD64u;
    }
    else
    {
      if (v25 != 2)
      {
LABEL_79:
        if (v10)
        {
          dword_1ECE8C158 += 2;
          v45[v24++] = &WebCore::staticCSSValuePool[3436];
LABEL_82:
          v37 = (WTF *)v40;
          v38 = 4;
          memcpy(v40, v45, 8 * v24);
          v44 = 0;
          v39 = v24;
          WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v37, (uint64_t *)&v41);
          *a3 = v41;
          if (v39)
          {
            v29 = v37;
            v30 = 8 * v39;
            do
            {
              v31 = *(_DWORD **)v29;
              *(_QWORD *)v29 = 0;
              if (v31)
              {
                if (*v31 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v28);
                else
                  *v31 -= 2;
              }
              v29 = (WTF *)((char *)v29 + 8);
              v30 -= 8;
            }
            while (v30);
          }
          this = (uint64_t)v37;
          if (v40 != (_BYTE *)v37 && v37 != 0)
          {
            v37 = 0;
            v38 = 0;
            this = WTF::fastFree((WTF *)this, v28);
          }
          v33 = v42;
          if (v44)
          {
            v34 = 8 * v44;
            do
            {
              this = *(_QWORD *)v33;
              *(_QWORD *)v33 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                  this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, v28);
                else
                  *(_DWORD *)this -= 2;
              }
              v33 = (WTF *)((char *)v33 + 8);
              v34 -= 8;
            }
            while (v34);
            v33 = v42;
          }
          if (v45 != (_QWORD *)v33 && v33 != 0)
          {
            v42 = 0;
            v43 = 0;
            return WTF::fastFree(v33, v28);
          }
          return this;
        }
        if (v24)
          goto LABEL_82;
LABEL_107:
        *a3 = 0;
        return this;
      }
      v26 = 0xD68u;
    }
    v27 = &WebCore::staticCSSValuePool[v26];
    *v27 += 2;
    v45[v24++] = v27;
    goto LABEL_79;
  }
  this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v3, a2);
  if ((this & 0xFF0000) != 0)
  {
    if ((unsigned __int16)this >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958CDDA0);
    }
    v22 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v22 += 2;
  }
  else
  {
    v22 = 0;
  }
  *a3 = v22;
  return this;
}

void WebCore::CSSPropertyParserHelpers::consumeFontVariantAlternates(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebCore::CSSParserTokenRange *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore::CSSParserTokenRange *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  __int128 *v19;
  __int128 *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  __int128 *v31;
  int v32;
  WTF::StringImpl *v33;
  int *v34;
  int v35;
  unint64_t v36;
  __int128 *v37;
  __int128 *v38;
  char v39;
  unsigned int v40;
  int v41;
  int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int *v51;
  _QWORD v52[2];
  _QWORD v53[2];
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int16 v64;

  v5 = *this;
  v4 = this[1];
  if (*this == v4)
  {
    *a3 = 0;
    return;
  }
  if (*this >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) == 0)
  {
    v32 = *((_DWORD *)v5 + 4);
    if (v32 < 0)
    {
      v32 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = v32;
    }
    if ((unsigned __int16)v32 == 90)
    {
      WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90>((uint64_t)this, &v51);
      v34 = v51;
      v51 = 0;
      if (v34)
      {
        if (*v34 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v33);
        else
          *v34 -= 2;
      }
      dword_1ECE8C188 += 2;
      *a3 = (uint64_t)&WebCore::staticCSSValuePool[3448];
      return;
    }
  }
  v50 = 256;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v54 = 0;
  v53[0] = this;
  v53[1] = &v54;
  v52[0] = this;
  v52[1] = &v54;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = *this;
        if (*this >= this[1])
        {
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_DWORD *)v7 & 0x3F) != 0)
          break;
        v18 = *((_DWORD *)v7 + 4);
        if (v18 < 0)
        {
          v18 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
          *((_DWORD *)v7 + 4) = v18;
        }
        if ((unsigned __int16)v18 != 72)
          break;
        v20 = *this;
        v19 = this[1];
        if (*this >= v19)
        {
          v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_BYTE *)v20 & 0x3F) == 0)
        {
          v31 = *this;
          if (*this >= v19)
          {
            v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
          }
          if ((*(_DWORD *)v31 & 0x3F) == 0)
          {
            v35 = *((_DWORD *)v31 + 4);
            if (v35 < 0)
            {
              v35 = WebCore::cssValueKeywordID(*((_QWORD *)v31 + 1), *((unsigned int *)v31 + 1) | ((unint64_t)((*(_DWORD *)v31 >> 22) & 1) << 32));
              *((_DWORD *)v31 + 4) = v35;
            }
            if ((unsigned __int16)v35 == 72)
            {
              v37 = *this;
              v36 = (unint64_t)this[1];
              if (*this == (__int128 *)v36)
              {
                v39 = 1;
                {
                  *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                  *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                }
                v38 = *this;
                v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              }
              else
              {
                v38 = (__int128 *)((char *)v37 + 24);
                *this = (__int128 *)((char *)v37 + 24);
              }
              while (1)
              {
                if ((unint64_t)v38 < v36 || (v39 & 1) != 0)
                {
                  if ((unint64_t)v38 >= v36)
                    v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  v40 = *(_DWORD *)v38;
                }
                else
                {
                  v40 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
                  WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v40;
                  v39 = 1;
                }
                if ((v40 & 0x3F) != 0x10)
                  break;
                v38 = (__int128 *)((char *)*this + 24);
                *this = v38;
              }
              if ((*(_DWORD *)v37 & 0x3F) != 0)
              {
                LOWORD(v41) = 0;
              }
              else
              {
                v41 = *((_DWORD *)v37 + 4);
                if (v41 < 0)
                {
                  v41 = WebCore::cssValueKeywordID(*((_QWORD *)v37 + 1), *((unsigned int *)v37 + 1) | ((unint64_t)((*(_DWORD *)v37 >> 22) & 1) << 32));
                  *((_DWORD *)v37 + 4) = v41;
                }
                if ((unsigned __int16)v41 >= 0x48Eu)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1958CE450);
                }
              }
              v42 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v41 + 3088];
              v43 = *v42;
              *v42 += 2;
              if (v43)
                *v42 = v43;
              else
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v42, a2);
            }
          }
        }
        if (BYTE1(v50))
        {
          v59 = 0;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v60 = 0u;
          v61 = 0u;
          v62 = 0u;
          v63 = 0u;
          v64 = 0;
          WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
          WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v21);
          WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v22);
        }
        if ((_BYTE)v50)
          goto LABEL_83;
        if (BYTE1(v50))
        {
          v59 = 0;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v60 = 0u;
          v61 = 0u;
          v62 = 0u;
          v63 = 0u;
          v64 = 0;
          WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
          WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v23);
          WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v24);
          v54 = 1;
          if (BYTE1(v50))
          {
            v59 = 0;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v60 = 0u;
            v61 = 0u;
            v62 = 0u;
            v63 = 0u;
            v64 = 0;
            WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
            WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v25);
            WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v26);
          }
        }
        else
        {
          v54 = 1;
        }
        LOBYTE(v50) = 1;
      }
      if (WebCore::CSSParserToken::functionId((int *)v7) != 76)
        break;
      if (BYTE1(v50))
      {
        v59 = 0;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v63 = 0u;
        v64 = 0;
        WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
        WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v8);
        WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v9);
      }
      v10 = (WebCore::CSSParserTokenRange *)((char *)&v48 + 8);
LABEL_11:
      if ((WebCore::CSSPropertyParserHelpers::consumeFontVariantAlternates(WebCore::CSSParserTokenRange &)::$_0::operator() const(void)::{lambda(WTF::String &)#1}::operator()((uint64_t)v53, v10) & 1) == 0)goto LABEL_83;
    }
    if (WebCore::CSSParserToken::functionId((int *)v7) == 73)
    {
      if (BYTE1(v50))
      {
        v59 = 0;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v63 = 0u;
        v64 = 0;
        WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
        WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v11);
        WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v12);
      }
      v10 = (WebCore::CSSParserTokenRange *)&v46;
      goto LABEL_11;
    }
    if (WebCore::CSSParserToken::functionId((int *)v7) != 74)
      break;
    if (BYTE1(v50))
    {
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0;
      WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v13);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v14);
    }
    v15 = (WebCore::CSSParserTokenRange *)((char *)&v46 + 8);
LABEL_21:
    if ((WebCore::CSSPropertyParserHelpers::consumeFontVariantAlternates(WebCore::CSSParserTokenRange &)::$_0::operator() const(void)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()((uint64_t)v52, v15) & 1) == 0)goto LABEL_83;
  }
  if (WebCore::CSSParserToken::functionId((int *)v7) == 75)
  {
    if (BYTE1(v50))
    {
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0;
      WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v16);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v17);
    }
    v15 = (WebCore::CSSParserTokenRange *)((char *)&v47 + 8);
    goto LABEL_21;
  }
  if (WebCore::CSSParserToken::functionId((int *)v7) == 77)
  {
    if (BYTE1(v50))
    {
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0;
      WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v27);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v28);
    }
    v10 = (WebCore::CSSParserTokenRange *)&v49;
    goto LABEL_11;
  }
  if (WebCore::CSSParserToken::functionId((int *)v7) == 78)
  {
    if (BYTE1(v50))
    {
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0;
      WebCore::FontVariantAlternatesValues::operator=((uint64_t)&v46, (WTF::StringImpl *)&v60);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v60, v29);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v55, v30);
    }
    v10 = (WebCore::CSSParserTokenRange *)((char *)&v49 + 8);
    goto LABEL_11;
  }
  if (v54)
  {
    v44 = WTF::fastCompactMalloc((WTF *)0x50);
    v45 = WebCore::CSSFontVariantAlternatesValue::CSSFontVariantAlternatesValue(v44, (const WebCore::FontVariantAlternatesValues *)&v46);
    goto LABEL_84;
  }
LABEL_83:
  v45 = 0;
LABEL_84:
  *a3 = v45;
  WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v46, a2);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFontWeight@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  WebCore::CSSParserTokenRange *v6;
  uint64_t result;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char *v15;

  v5 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)90,(WebCore::CSSValueID)91,(WebCore::CSSValueID)92,(WebCore::CSSValueID)93>((uint64_t)this);
  if ((v5 & 0xFF0000) != 0)
  {
    v9 = 0;
    v10 = 0;
    LOWORD(v11) = v5;
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeFontWeightNumberRaw(this, v6);
    if (!v8)
    {
      *a2 = 0;
      return result;
    }
    v11 = result;
    v9 = 1;
    v10 = 1;
  }
  v12 = v9;
  v13 = 1;
  v15 = &v14;
  return ((uint64_t (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers17consumeFontWeightERNS8_19CSSParserTokenRangeEE3__0JZNS9_17consumeFontWeightESB_E3__1EEEEEJRNS0_6__implIJNS8_10CSSValueIDEdEEEEEEDcOT_DpOT0____fmatrix[v10])(&v15, &v11);
}

WTF *WebCore::CSSPropertyParserHelpers::consumeFamilyNameList@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  char v14;
  unsigned int v15;
  uint64_t *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *result;
  WTF::StringImpl *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  unsigned int v35;
  _BYTE v36[32];
  WTF *v37;
  uint64_t v38;
  _BYTE v39[32];
  WTF::StringImpl *v40;

  v37 = (WTF *)v39;
  v38 = 4;
  WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw((WTF::StringImpl *)this, a2, (WTF::AtomString *)&v33);
  if (!v33)
  {
LABEL_36:
    v19 = 0;
    goto LABEL_37;
  }
  while (1)
  {
    {
      WebCore::CSSValuePool::singleton(void)::pool = 0;
      unk_1ECE88B90 = 0;
      qword_1ECE88B98 = 0;
    }
    WebCore::CSSValuePool::createFontFamilyValue((WebCore::CSSValuePool *)&WebCore::CSSValuePool::singleton(void)::pool, &v33, &v40);
    v6 = v40;
    v7 = v33;
    v33 = 0;
    if (!v7)
      goto LABEL_7;
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
LABEL_7:
      if (!v6)
        goto LABEL_36;
      goto LABEL_8;
    }
    WTF::StringImpl::destroy(v7, v5);
    if (!v6)
      goto LABEL_36;
LABEL_8:
    v33 = v6;
    LODWORD(v8) = HIDWORD(v38);
    if (HIDWORD(v38) == (_DWORD)v38)
    {
      v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)&v33);
      v8 = HIDWORD(v38);
      v17 = v37;
      v18 = *v16;
      *v16 = 0;
      *((_QWORD *)v17 + v8) = v18;
    }
    else
    {
      v33 = 0;
      *((_QWORD *)v37 + HIDWORD(v38)) = v6;
    }
    HIDWORD(v38) = v8 + 1;
    v9 = v33;
    v33 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    v11 = *this;
    v10 = this[1];
    if (*this >= v10)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0x15)
      break;
    v12 = *this;
    if (*this == v10)
    {
      v14 = 1;
      {
        v13 = v10;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v13 = *this;
      }
    }
    else
    {
      v13 = (__int128 *)((char *)v12 + 24);
      *this = (__int128 *)((char *)v12 + 24);
    }
    while (1)
    {
      if (v13 < v10 || (v14 & 1) != 0)
      {
        if (v13 >= v10)
          v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v15 = *(_DWORD *)v13;
      }
      else
      {
        v15 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
        v14 = 1;
      }
      if ((v15 & 0x3F) != 0x10)
        break;
      v13 = (__int128 *)((char *)*this + 24);
      *this = v13;
    }
    WebCore::CSSPropertyParserHelpers::consumeFamilyNameRaw((WTF::StringImpl *)this, v5, (WTF::AtomString *)&v33);
    if (!v33)
      goto LABEL_36;
  }
  v33 = (WTF::StringImpl *)v36;
  v34 = 4;
  v25 = v37;
  if (v37 == (WTF *)v39)
  {
    v26 = HIDWORD(v38);
    memcpy(v36, v39, 8 * HIDWORD(v38));
  }
  else
  {
    v37 = (WTF *)v39;
    v33 = v25;
    v32 = v38;
    v26 = HIDWORD(v38);
    LODWORD(v38) = 4;
    v34 = v32;
  }
  HIDWORD(v38) = 0;
  v35 = v26;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v33, (uint64_t *)&v40);
  v19 = (uint64_t)v40;
  if (v35)
  {
    v27 = v33;
    v28 = 8 * v35;
    do
    {
      v29 = *(_DWORD **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v5);
        else
          *v29 -= 2;
      }
      v27 = (WTF::StringImpl *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  v30 = v33;
  if (v36 != (_BYTE *)v33 && v33 != 0)
  {
    v33 = 0;
    v34 = 0;
    WTF::fastFree(v30, v5);
  }
LABEL_37:
  if (HIDWORD(v38))
  {
    v20 = v37;
    v21 = 8 * HIDWORD(v38);
    do
    {
      v22 = *(_DWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*v22 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v5);
        else
          *v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  result = v37;
  if (v39 != (_BYTE *)v37 && v37 != 0)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  *a3 = v19;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCounter(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, int a3)
{
  __int128 *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  int v12;
  WTF::StringImpl *v13;
  void *v14;
  unint64_t v15;
  int v16;
  double v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t result;
  int v29;
  int *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  int v37;
  WTF *v38;
  int v39;
  unsigned int v40;
  _BYTE v41[32];
  WTF *v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;
  WTF::StringImpl *v46;

  v6 = *a2;
  if (*a2 >= a2[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v29 = *((_DWORD *)v6 + 4);
  if (v29 < 0)
  {
    v29 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v29;
  }
  if ((unsigned __int16)v29 != 6)
  {
LABEL_3:
    v42 = (WTF *)v44;
    v43 = 4;
    do
    {
      WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)a2, 0, &v46);
      v8 = v46;
      if (!v46)
      {
        *(_QWORD *)this = 0;
        goto LABEL_24;
      }
      v46 = 0;
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 2;
      v11 = *(_BYTE *)(v10 + 6);
      *(_WORD *)(v10 + 4) = 63;
      *(_BYTE *)(v10 + 6) = v11 & 0xFC;
      *(_QWORD *)(v10 + 8) = v8;
      v12 = *(_DWORD *)v8;
      *(_DWORD *)v8 += 2;
      if (v12)
        *(_DWORD *)v8 = v12;
      else
        WTF::StringImpl::destroy(v8, v9);
      v13 = v46;
      v46 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v45 = 0;
      v46 = 0;
      v15 = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve(a2, (unsigned __int16 **)&v46, (uint64_t)&v45, 0x10100000000);
      if (v45)
        WTF::fastFree((WTF *)(v45 - 16), v14);
      if (v46)
        WTF::fastFree((WTF::StringImpl *)((char *)v46 - 16), v14);
      if ((v15 & 0xFF00000000) != 0)
        v16 = v15;
      else
        v16 = a3;
      v17 = (double)v16;
      v18 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v18 = 2;
      v19 = *(_BYTE *)(v18 + 6);
      *(_WORD *)(v18 + 4) = 2;
      *(_BYTE *)(v18 + 6) = v19 & 0xFC;
      *(double *)(v18 + 8) = v17;
      v20 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v20 = 2;
      v21 = (*(unsigned __int8 *)(v20 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_BYTE *)(v20 + 7) = 1;
      *(_QWORD *)(v20 + 8) = v10;
      *(_QWORD *)(v20 + 16) = v18;
      *(_WORD *)(v20 + 4) = -18432;
      *(_BYTE *)(v20 + 6) = BYTE2(v21);
      v22 = HIDWORD(v43);
      if (HIDWORD(v43) == (_DWORD)v43)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, HIDWORD(v43) + 1);
        v22 = HIDWORD(v43);
      }
      *((_QWORD *)v42 + HIDWORD(v43)) = v20;
      v23 = v22 + 1;
      HIDWORD(v43) = v22 + 1;
    }
    while (*a2 != a2[1]);
    v38 = (WTF *)v41;
    v39 = 4;
    v31 = v42;
    if (v42 == (WTF *)v44)
    {
      memcpy(v41, v44, 8 * (v22 + 1));
    }
    else
    {
      v42 = (WTF *)v44;
      v38 = v31;
      v37 = v43;
      LODWORD(v43) = 4;
      v39 = v37;
    }
    HIDWORD(v43) = 0;
    v40 = v23;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v38, (uint64_t *)&v46);
    *(_QWORD *)this = v46;
    if (v40)
    {
      v32 = v38;
      v33 = 8 * v40;
      do
      {
        v34 = *(_DWORD **)v32;
        *(_QWORD *)v32 = 0;
        if (v34)
        {
          if (*v34 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v7);
          else
            *v34 -= 2;
        }
        v32 = (WTF *)((char *)v32 + 8);
        v33 -= 8;
      }
      while (v33);
    }
    v35 = v38;
    if (v41 != (_BYTE *)v38 && v38 != 0)
    {
      v38 = 0;
      v39 = 0;
      WTF::fastFree(v35, v7);
    }
LABEL_24:
    if (HIDWORD(v43))
    {
      v24 = v42;
      v25 = 8 * HIDWORD(v43);
      do
      {
        v26 = *(_DWORD **)v24;
        *(_QWORD *)v24 = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v7);
          else
            *v26 -= 2;
        }
        v24 = (WTF *)((char *)v24 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    result = (uint64_t)v42;
    if (v44 != (_BYTE *)v42 && v42 != 0)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      return WTF::fastFree((WTF *)result, v7);
    }
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(a2, (WebCore::CSSParserTokenRange *)a2);
    if ((result & 0xFF0000) != 0)
    {
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958CECE8);
      }
      v30 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
      *v30 += 2;
    }
    else
    {
      v30 = 0;
    }
    *(_QWORD *)this = v30;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)484,(WebCore::CSSValueID)469>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 484 && (unsigned __int16)result != 469)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958CEEF8);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)904>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 904)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)1159>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 1159)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeMarginSide@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v5;
  __int128 *v8;
  uint64_t result;
  int *v10;
  int v11;
  int *v12;

  v5 = (int)a2;
  v8 = *this;
  if (*this >= this[1])
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_3;
  v11 = *((_DWORD *)v8 + 4);
  if (v11 < 0)
  {
    v11 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v11;
  }
  if ((unsigned __int16)v11 != 394)
  {
LABEL_3:
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a3, 0, v5 == 501, 0, 0, 0, (uint64_t *)&v12);
    v10 = v12;
LABEL_4:
    *a4 = v10;
    return result;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) == 0)
  {
    v10 = 0;
    goto LABEL_4;
  }
  if ((unsigned __int16)result < 0x48Eu)
  {
    v10 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v10 += 2;
    goto LABEL_4;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeAutoOrLengthOrPercent(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  WebCore::CSSParserTokenRange *v7;
  uint64_t result;
  int *v9;

  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id((unsigned int *)v6) == 394)
    result = WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)a2, v7, &v9);
  else
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(a2, a3, 0, 1, 0, 0, 0, (uint64_t *)&v9);
  *a1 = v9;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeMarginTrim@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int **v24;
  unsigned int v25;
  WTF *v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  int v37;
  WTF *v38;
  uint64_t v39;
  _DWORD *v40;
  WTF *v41;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _BYTE v54[32];
  int *v55;
  WTF *v56;
  uint64_t v57;
  _BYTE v58[32];
  WTF *v59;
  uint64_t i;
  _BYTE v61[16];

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) == 0)
  {
    this = *((unsigned int *)v5 + 4);
    if ((this & 0x80000000) != 0)
    {
      this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = this;
    }
    if ((unsigned __int16)this - 366 < 2 || (unsigned __int16)this == 6)
    {
      this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v3, a2);
      if ((this & 0xFF0000) != 0)
      {
        if ((unsigned __int16)this >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958CFC1CLL);
        }
        v48 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
        *v48 += 2;
      }
      else
      {
        v48 = 0;
      }
      *a3 = v48;
      return this;
    }
  }
  v59 = (WTF *)v61;
  for (i = 4; ; HIDWORD(i) = v13 + 1)
  {
    v7 = *(__int128 **)v3;
    v6 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 >= v6)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v7 & 0x3F) != 0)
      goto LABEL_8;
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 >= v6)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0)
      goto LABEL_8;
    this = *((unsigned int *)v8 + 4);
    if ((this & 0x80000000) != 0)
    {
      this = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
      *((_DWORD *)v8 + 4) = this;
    }
    if ((this & 0xFFFC) != 0x210)
    {
LABEL_8:
      v9 = 0;
      v10 = 0;
      v11 = 0;
    }
    else
    {
      v15 = *(__int128 **)v3;
      v14 = *(_QWORD *)(v3 + 8);
      if (*(_QWORD *)v3 == v14)
      {
        v17 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
        v16 = *(__int128 **)v3;
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v16 = (__int128 *)((char *)v15 + 24);
        *(_QWORD *)v3 = (char *)v15 + 24;
      }
      while (1)
      {
        if ((unint64_t)v16 < v14 || (v17 & 1) != 0)
        {
          if ((unint64_t)v16 >= v14)
            v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v18 = *(_DWORD *)v16;
        }
        else
        {
          v18 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v18;
          v17 = 1;
        }
        if ((v18 & 0x3F) != 0x10)
          break;
        v16 = (__int128 *)(*(_QWORD *)v3 + 24);
        *(_QWORD *)v3 = v16;
      }
      if ((*(_DWORD *)v15 & 0x3F) != 0)
      {
        this = 0;
      }
      else
      {
        this = *((unsigned int *)v15 + 4);
        if ((this & 0x80000000) != 0)
        {
          this = WebCore::cssValueKeywordID(*((_QWORD *)v15 + 1), *((unsigned int *)v15 + 1) | ((unint64_t)((*(_DWORD *)v15 >> 22) & 1) << 32));
          *((_DWORD *)v15 + 4) = this;
        }
      }
      v11 = this & 0xFF00;
      v9 = this;
      v10 = 0x10000;
    }
    v12 = v10 | v9 | v11;
    LODWORD(v56) = v12;
    if (v12 < 0x10000)
      break;
    v13 = HIDWORD(i);
    if (HIDWORD(i))
    {
      v19 = 0;
      v20 = v59;
      while (*(unsigned __int16 *)((char *)v59 + v19) != (unsigned __int16)v12)
      {
        v19 += 2;
        if (2 * HIDWORD(i) == v19)
          goto LABEL_11;
      }
      *a3 = 0;
      goto LABEL_102;
    }
LABEL_11:
    if (HIDWORD(i) == (_DWORD)i)
    {
      this = WTF::Vector<WebCore::CSSValueID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, HIDWORD(i) + 1, (unint64_t)&v56);
      v13 = HIDWORD(i);
      *((_WORD *)v59 + HIDWORD(i)) = *(_WORD *)this;
    }
    else
    {
      *((_WORD *)v59 + HIDWORD(i)) = v12;
    }
  }
  v20 = v59;
  v21 = 2 * HIDWORD(i);
  if (HIDWORD(i) != 2)
  {
LABEL_51:
    v24 = a3;
    v56 = (WTF *)v58;
    v57 = 4;
    v25 = 0;
    if (HIDWORD(i))
    {
      v26 = (WTF *)v58;
      do
      {
        v27 = *(unsigned __int16 *)v20;
        if (v27 >= 0x48E)
        {
LABEL_134:
          __break(0xC471u);
          JUMPOUT(0x1958CFB80);
        }
        v28 = &WebCore::staticCSSValuePool[4 * v27];
        v28[3088] += 2;
        v29 = v25;
        if (v25 == (_DWORD)v57)
        {
          v31 = v25 + ((unint64_t)v25 >> 2);
          if (v31 >= 0x10)
            v32 = v31 + 1;
          else
            v32 = 16;
          if (v32 <= (unint64_t)v25 + 1)
            v33 = v25 + 1;
          else
            v33 = v32;
          if (v33 < 5)
          {
            v56 = (WTF *)v58;
            LODWORD(v57) = 4;
            v34 = (WTF *)v58;
          }
          else
          {
            if (v33 >> 29)
              goto LABEL_134;
            v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v33));
            LODWORD(v57) = v33;
            v56 = v34;
          }
          memcpy(v34, v26, 8 * v29);
          if (v58 != (_BYTE *)v26)
          {
            if (v56 == v26)
            {
              v56 = 0;
              LODWORD(v57) = 0;
            }
            WTF::fastFree(v26, v35);
          }
          v25 = HIDWORD(v57);
          v26 = v56;
          v30 = (_QWORD *)((char *)v56 + 8 * HIDWORD(v57));
        }
        else
        {
          v30 = (_QWORD *)((char *)v26 + 8 * v25);
        }
        *v30 = v28 + 3088;
        HIDWORD(v57) = ++v25;
        v20 = (WTF *)((char *)v20 + 2);
        v21 -= 2;
      }
      while (v21);
      v36 = v56;
      v52 = (WTF *)v54;
      v53 = 4;
      if (v56 != (WTF *)v58)
      {
        v56 = (WTF *)v58;
        v52 = v36;
        v37 = v57;
        LODWORD(v57) = 4;
        LODWORD(v53) = v37;
LABEL_77:
        HIDWORD(v57) = 0;
        HIDWORD(v53) = v25;
        WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v52, (uint64_t *)&v55);
        *v24 = v55;
        if (HIDWORD(v53))
        {
          v38 = v52;
          v39 = 8 * HIDWORD(v53);
          do
          {
            v40 = *(_DWORD **)v38;
            *(_QWORD *)v38 = 0;
            if (v40)
            {
              if (*v40 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, a2);
              else
                *v40 -= 2;
            }
            v38 = (WTF *)((char *)v38 + 8);
            v39 -= 8;
          }
          while (v39);
        }
        v41 = v52;
        if (v54 != (_BYTE *)v52 && v52 != 0)
        {
          v52 = 0;
          LODWORD(v53) = 0;
          WTF::fastFree(v41, a2);
        }
        if (HIDWORD(v57))
        {
          v43 = v56;
          v44 = 8 * HIDWORD(v57);
          do
          {
            v45 = *(_DWORD **)v43;
            *(_QWORD *)v43 = 0;
            if (v45)
            {
              if (*v45 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, a2);
              else
                *v45 -= 2;
            }
            v43 = (WTF *)((char *)v43 + 8);
            v44 -= 8;
          }
          while (v44);
        }
        this = (uint64_t)v56;
        if (v58 != (_BYTE *)v56 && v56 != 0)
        {
          v56 = 0;
          LODWORD(v57) = 0;
          this = WTF::fastFree((WTF *)this, a2);
        }
        v20 = v59;
        goto LABEL_102;
      }
    }
    else
    {
      v52 = (WTF *)v54;
      v53 = 4;
    }
    memcpy(v54, v58, 8 * v25);
    goto LABEL_77;
  }
  v22 = 0;
  while (*(_WORD *)((char *)v59 + v22) != 528)
  {
    v22 += 2;
    if (v21 == v22)
    {
LABEL_48:
      v23 = 0;
      while (*((_WORD *)v59 + v23) != 530)
      {
        if (HIDWORD(i) == ++v23)
          goto LABEL_51;
      }
      v50 = 0;
      while (*((_WORD *)v59 + v50) != 531)
      {
        if (HIDWORD(i) == ++v50)
          goto LABEL_51;
      }
      v51 = 0x11C8u;
      goto LABEL_132;
    }
  }
  v49 = 0;
  while (*(_WORD *)((char *)v59 + v49) != 529)
  {
    v49 += 2;
    if (v21 == v49)
      goto LABEL_48;
  }
  v51 = 0x11CCu;
LABEL_132:
  WebCore::staticCSSValuePool[v51] += 2;
  *a3 = &WebCore::staticCSSValuePool[v51];
LABEL_102:
  if (v61 != (_BYTE *)v20 && v20)
  {
    v59 = 0;
    LODWORD(i) = 0;
    return WTF::fastFree(v20, a2);
  }
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSide@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v4;
  __int128 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  int *v11;
  int v12;
  int *v13;

  v4 = (int)a2;
  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v8 = *(unsigned __int8 *)(a3 + 48);
  v9 = *(_DWORD *)(a3 + 54);
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v12 = *((_DWORD *)v7 + 4);
  if (v12 < 0)
  {
    v12 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v12;
  }
  if ((unsigned __int16)v12 != 394)
  {
LABEL_3:
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, v8, 0, v4 == 501, 0, 0, (v9 >> 3) & 1, (uint64_t *)&v13);
    v11 = v13;
LABEL_4:
    *a4 = v11;
    return result;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) == 0)
  {
    v11 = 0;
    goto LABEL_4;
  }
  if ((unsigned __int16)result < 0x48Eu)
  {
    v11 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v11 += 2;
    goto LABEL_4;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeInsetLogicalStartEnd@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  int v10;
  int *v11;

  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v7 = *((unsigned __int8 *)a2 + 48);
  v8 = *(_DWORD *)((char *)a2 + 54);
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v10 = *((_DWORD *)v6 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v10;
  }
  if ((unsigned __int16)v10 != 394)
LABEL_3:
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, v7, 0, 1, 0, 0, (v8 >> 3) & 1, (uint64_t *)&v11);
  else
    result = WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, &v11);
  *a3 = v11;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSingleTransitionPropertyOrNone@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 **v3;
  __int128 *v5;
  int v6;

  v3 = (__int128 **)this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
  {
    *a3 = 0;
  }
  else
  {
    v6 = *((_DWORD *)v5 + 4);
    if (v6 < 0)
    {
      v6 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = v6;
    }
    if ((unsigned __int16)v6 == 6)
      return WebCore::CSSPropertyParserHelpers::consumeIdent(v3, a2, a3);
    else
      return WebCore::CSSPropertyParserHelpers::consumeSingleTransitionPropertyIdent((WebCore::CSSPropertyParserHelpers *)a3, v3, (const WebCore::CSSParserToken *)v5);
  }
  return this;
}

unsigned int *WebCore::CSSPropertyParserHelpers::consumeSingleTransitionProperty@<X0>(unsigned int *this@<X0>, WebCore::CSSPropertyParserHelpers *a2@<X8>)
{
  __int128 **v4;
  unsigned int *v6;

  v4 = (__int128 **)this;
  v6 = *(unsigned int **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1))
  {
    v6 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) == 0)
  {
    this = WebCore::CSSParserToken::id(v6);
    if ((_DWORD)this != 6)
      return (unsigned int *)WebCore::CSSPropertyParserHelpers::consumeSingleTransitionPropertyIdent(a2, v4, (const WebCore::CSSParserToken *)v6);
  }
  *(_QWORD *)a2 = 0;
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeLinear(WebCore::CSSPropertyParserHelpers *this, WebCore::CSSParserTokenRange *a2)
{
  uint64_t v2;
  unsigned int v3;
  char v4;
  __int128 *v5;
  double v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  char v17;
  unsigned int v18;
  __int128 *v19;
  unsigned int v20;
  double v21;
  uint64_t v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  __int128 *v26;
  unsigned int v27;
  double v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  char v37;
  unsigned int v38;
  __int128 *v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  double v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  int v61;
  char *v62;
  int v63;
  uint64_t v65;
  char v66;
  void *v67;
  void *v68;
  void *v69;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  __int128 *v78;
  __int128 v79;

  v79 = *(_OWORD *)a2;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v77 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v79, a2);
  v78 = v5;
  v6 = -INFINITY;
  v75 = 0;
  v76 = 0;
  while (1)
  {
    *(_QWORD *)&v73 = 0;
    *(_QWORD *)&v72 = 0;
    result = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v77, (uint64_t *)&v73, (uint64_t)&v72, 0x10100000000);
    v9 = result;
    if ((_QWORD)v72)
    {
      v41 = v8;
      result = WTF::fastFree((WTF *)(v72 - 16), v8);
      v8 = v41;
    }
    if ((_QWORD)v73)
    {
      v43 = v8;
      result = WTF::fastFree((WTF *)(v73 - 16), v8);
      v8 = v43;
    }
    if (!(_BYTE)v8)
      break;
    *(_QWORD *)&v73 = v9;
    BYTE8(v73) = 0;
    LOBYTE(v74) = 0;
    if (v3 == (_DWORD)v76)
    {
      v10 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, v3 + 1, (unint64_t)&v73);
      v2 = v75;
      v3 = HIDWORD(v76);
      v11 = v75 + 24 * HIDWORD(v76);
      v12 = *((_QWORD *)v10 + 2);
      *(_OWORD *)v11 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = v12;
    }
    else
    {
      v13 = v73;
      v14 = v2 + 24 * v3;
      *(_QWORD *)(v14 + 16) = v74;
      *(_OWORD *)v14 = v13;
    }
    v15 = v3 + 1;
    HIDWORD(v76) = v3 + 1;
    v16 = v77;
    v18 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if (v16 < v78 || (v17 & 1) != 0)
      {
        v19 = v16 >= v78 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v16;
        v20 = *(_DWORD *)v19;
      }
      else
      {
        v20 = v18 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
        v17 = 1;
        v18 = v20;
      }
      if ((v20 & 0x3F) != 0x10)
        break;
      v16 = (__int128 *)((char *)v16 + 24);
      v77 = v16;
    }
    *(_QWORD *)&v73 = 0;
    *(_QWORD *)&v72 = 0;
    result = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::PercentRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::PercentRaw>::consumeAndResolve((WebCore::CSSCalcValue *)&v77, (unsigned __int16 **)&v73, (uint64_t)&v72, 0x10100000000);
    v21 = *(double *)&result;
    if ((_QWORD)v72)
    {
      v42 = v8;
      result = WTF::fastFree((WTF *)(v72 - 16), v8);
      v8 = v42;
    }
    if ((_QWORD)v73)
    {
      v44 = v8;
      result = WTF::fastFree((WTF *)(v73 - 16), v8);
      v8 = v44;
    }
    if (!(_BYTE)v8)
    {
      if (!v3)
      {
        v4 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        LODWORD(v15) = 1;
        *(_BYTE *)(v2 + 16) = 1;
        v6 = 0.0;
        goto LABEL_52;
      }
LABEL_48:
      v4 = 0;
      goto LABEL_52;
    }
    if (v21 / 100.0 >= v6)
      v6 = v21 / 100.0;
    if (v3 == -1)
      goto LABEL_118;
    v22 = v2 + 24 * (v15 - 1);
    *(double *)(v22 + 8) = v6;
    *(_BYTE *)(v22 + 16) = 1;
    v23 = v77;
    v25 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if (v23 < v78 || (v24 & 1) != 0)
      {
        v26 = v23 >= v78 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v23;
        v27 = *(_DWORD *)v26;
      }
      else
      {
        v27 = v25 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
        v24 = 1;
        v25 = v27;
      }
      if ((v27 & 0x3F) != 0x10)
        break;
      v23 = (__int128 *)((char *)v23 + 24);
      v77 = v23;
    }
    *(_QWORD *)&v73 = 0;
    *(_QWORD *)&v72 = 0;
    result = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::PercentRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::PercentRaw>::consumeAndResolve((WebCore::CSSCalcValue *)&v77, (unsigned __int16 **)&v73, (uint64_t)&v72, 0x10100000000);
    v28 = *(double *)&result;
    if ((_QWORD)v72)
    {
      v68 = v8;
      result = WTF::fastFree((WTF *)(v72 - 16), v8);
      v8 = v68;
    }
    if ((_QWORD)v73)
    {
      v69 = v8;
      result = WTF::fastFree((WTF *)(v73 - 16), v8);
      v8 = v69;
    }
    if (!(_BYTE)v8)
      goto LABEL_48;
    if (v28 / 100.0 >= v6)
      v6 = v28 / 100.0;
    *(_QWORD *)&v73 = *(_QWORD *)(v2 + 24 * (v15 - 1));
    *((double *)&v73 + 1) = v6;
    LOBYTE(v74) = 1;
    if ((_DWORD)v15 == (_DWORD)v76)
    {
      result = (uint64_t)WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, v15 + 1, (unint64_t)&v73);
      v2 = v75;
      v29 = HIDWORD(v76);
      v30 = v75 + 24 * HIDWORD(v76);
      v31 = *(_QWORD *)(result + 16);
      *(_OWORD *)v30 = *(_OWORD *)result;
      *(_QWORD *)(v30 + 16) = v31;
      LODWORD(v15) = v29 + 1;
    }
    else
    {
      v32 = v2 + 24 * v15;
      v33 = v73;
      *(_QWORD *)(v32 + 16) = v74;
      *(_OWORD *)v32 = v33;
      LODWORD(v15) = v3 + 2;
    }
    HIDWORD(v76) = v15;
    v4 = 1;
LABEL_52:
    v34 = v77;
    v35 = v78;
    v36 = v77;
    if (v77 >= v78)
    {
      v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v36 & 0x3F) != 0x15)
      goto LABEL_71;
    if (v77 == v78)
    {
      v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v37 = 1;
      {
        v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
      }
    }
    else
    {
      v34 = (__int128 *)((char *)v77 + 24);
      v77 = (__int128 *)((char *)v77 + 24);
      v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if (v34 < v78 || (v37 & 1) != 0)
      {
        v39 = v34 >= v78 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v34;
        v40 = *(_DWORD *)v39;
      }
      else
      {
        v38 = v38 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
        v37 = 1;
        LOBYTE(v40) = v38;
      }
      if ((v40 & 0x3F) != 0x10)
        break;
      v34 = (__int128 *)((char *)v34 + 24);
      v77 = v34;
    }
    v3 = v15;
  }
  v34 = v77;
  v35 = v78;
LABEL_71:
  if (v34 != v35 || (v45 = HIDWORD(v76), HIDWORD(v76) < 2) || (v4 & (HIDWORD(v76) == 2)) != 0)
  {
    *(_QWORD *)this = 0;
    goto LABEL_73;
  }
  if ((v4 & 1) == 0)
  {
    v46 = v2 + 24 * HIDWORD(v76);
    if (!*(_BYTE *)(v46 - 8))
    {
      *(double *)(v46 - 16) = fmax(v6, 1.0);
      *(_BYTE *)(v46 - 8) = 1;
    }
  }
  *((_QWORD *)&v73 + 1) = 0;
  if (v45 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x1958D0754);
  }
  v47 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v45));
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  DWORD2(v73) = v45;
  *(_QWORD *)&v73 = v47;
  v2 = v75;
  while (2)
  {
    if (v50 >= v45 || *(_BYTE *)(v2 + 24 * v50 + 16))
    {
      if (!v51)
        goto LABEL_96;
      if (v52 - 1 >= v45)
      {
        __break(0xC471u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(0xC471u);
        JUMPOUT(0x1958D074CLL);
      }
      v53 = v2 + 24 * (v52 - 1);
      if (!*(_BYTE *)(v53 + 16))
        goto LABEL_115;
      if (v50 >= v45)
        goto LABEL_116;
      v54 = v2 + 24 * v50;
      if (!*(_BYTE *)(v54 + 16))
        goto LABEL_115;
      if (v52 >= v50)
      {
LABEL_98:
        v72 = *(_OWORD *)(v2 + 24 * v50);
        if (v48 == DWORD2(v73))
        {
          v62 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v73, v48 + 1, (unint64_t)&v72);
          v63 = HIDWORD(v73);
          v47 = (_OWORD *)v73;
          *(_OWORD *)(v73 + 16 * HIDWORD(v73)) = *(_OWORD *)v62;
        }
        else
        {
          v47[v48] = v72;
          v63 = HIDWORD(v73);
        }
        v51 = 0;
        v48 = v63 + 1;
        HIDWORD(v73) = v63 + 1;
      }
      else
      {
        v55 = *(double *)(v53 + 8);
        v56 = v49 + 1;
        v57 = (*(double *)(v54 + 8) - v55) / (double)(v49 + 1 + v50);
        v58 = (_QWORD *)(v2 + 24 * v52);
        v59 = v52;
        do
        {
          *(_QWORD *)&v72 = *v58;
          *((double *)&v72 + 1) = v55 + v57 * (double)(v56 + v59);
          if (v48 == DWORD2(v73))
          {
            v60 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v73, v48 + 1, (unint64_t)&v72);
            v61 = HIDWORD(v73);
            v47 = (_OWORD *)v73;
            *(_OWORD *)(v73 + 16 * HIDWORD(v73)) = *(_OWORD *)v60;
          }
          else
          {
            v47[v48] = v72;
            v61 = HIDWORD(v73);
          }
          v48 = v61 + 1;
          HIDWORD(v73) = v61 + 1;
          ++v59;
          v58 += 3;
        }
        while (v50 != v59);
LABEL_96:
        if (v50 >= v45)
        {
          v51 = 0;
        }
        else
        {
          v51 = *(unsigned __int8 *)(v2 + 24 * v50 + 16);
          if (*(_BYTE *)(v2 + 24 * v50 + 16))
            goto LABEL_98;
        }
      }
    }
    else
    {
      if (!v51)
        v52 = v50;
      v51 = 1;
    }
    v49 = -(uint64_t)v52;
    if (v50++ != v45)
      continue;
    break;
  }
  *(_OWORD *)a2 = v79;
  result = WTF::fastCompactMalloc((WTF *)0x18);
  v65 = result;
  *(_DWORD *)result = 2;
  v66 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 0x8000;
  *(_BYTE *)(result + 6) = v66 & 0xFC;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v48;
  if (v48)
  {
    if (!(v48 >> 28))
    {
      v67 = (void *)WTF::fastMalloc((WTF *)(16 * v48));
      *(_DWORD *)(v65 + 16) = v48;
      *(_QWORD *)(v65 + 8) = v67;
      result = (uint64_t)memcpy(v67, v47, 16 * v48);
      goto LABEL_109;
    }
LABEL_118:
    __break(0xC471u);
    JUMPOUT(0x1958D073CLL);
  }
LABEL_109:
  *(_QWORD *)this = v65;
  if (v47)
  {
    *(_QWORD *)&v73 = 0;
    DWORD2(v73) = 0;
    result = WTF::fastFree((WTF *)v47, v8);
  }
LABEL_73:
  if (v2)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    return WTF::fastFree((WTF *)v2, v8);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSteps(WebCore::CSSPropertyParserHelpers *this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v4;
  uint64_t v5;
  WebCore::CSSParserTokenRange *v6;
  int v7;
  _BOOL4 v8;
  __int128 *v9;
  unsigned int v10;
  int v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint64_t result;
  char v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;

  v19 = *(_OWORD *)a2;
  v17 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v19, a2);
  v18 = v4;
  v5 = WebCore::CSSPropertyParserHelpers::consumeIntegerTypeRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>((uint64_t)&v17);
  if ((v5 & 0xFF00000000) == 0)
    goto LABEL_17;
  v7 = v5;
  v8 = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v17, v6);
  if (v8)
  {
    v9 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v17);
    v10 = WebCore::CSSParserToken::id((unsigned int *)v9);
    v11 = 0;
    v13 = 0;
    v12 = 1;
    switch(v10)
    {
      case 0x27Du:
        goto LABEL_7;
      case 0x27Eu:
        v11 = 0;
        v13 = 1;
        goto LABEL_7;
      case 0x27Fu:
        v11 = 1;
        v13 = 2;
        goto LABEL_7;
      case 0x280u:
        v11 = 0;
        v13 = 3;
        goto LABEL_7;
      default:
        if (v10 == 500)
        {
          v11 = 0;
          v12 = 1;
          v13 = 4;
          goto LABEL_7;
        }
        if (v10 != 501)
          goto LABEL_17;
        v11 = 0;
        v12 = 1;
        v13 = 5;
        break;
    }
  }
  else
  {
    v11 = 0;
    v13 = 0;
    v12 = 0;
  }
  if (v17 != v18)
    goto LABEL_17;
LABEL_7:
  if (v7 != 1)
    v11 = 0;
  if ((v8 & v11 & 1) == 0)
  {
    *(_OWORD *)a2 = v19;
    v14 = v13 | (v12 << 8);
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v16 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = -26624;
    *(_BYTE *)(result + 6) = v16 & 0xFC;
    *(_DWORD *)(result + 8) = v7;
    *(_WORD *)(result + 12) = v14;
  }
  else
  {
LABEL_17:
    result = 0;
  }
  *(_QWORD *)this = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeSpringFunction(WebCore::CSSPropertyParserHelpers *this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v4;
  void *v5;
  double v6;
  char v7;
  uint64_t result;
  void *v9;
  double v10;
  char v11;
  void *v12;
  double v13;
  char v14;
  void *v15;
  unint64_t v16;
  char v17;
  void *v18;
  char v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v22 = *(_OWORD *)a2;
  v20 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v22, a2);
  v21 = v4;
  v23 = 0;
  v24 = 0;
  v6 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v20, &v24, (uint64_t)&v23, 0x10100000000));
  v7 = (char)v5;
  if (v23)
    WTF::fastFree((WTF *)(v23 - 16), v5);
  if (v24)
    WTF::fastFree((WTF *)(v24 - 16), v5);
  result = 0;
  if (v7 && v6 > 0.0)
  {
    v23 = 0;
    v24 = 0;
    v10 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v20, &v24, (uint64_t)&v23, 0x10100000000));
    v11 = (char)v9;
    if (v23)
      WTF::fastFree((WTF *)(v23 - 16), v9);
    if (v24)
      WTF::fastFree((WTF *)(v24 - 16), v9);
    result = 0;
    if (v11 && v10 > 0.0)
    {
      v23 = 0;
      v24 = 0;
      v13 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v20, &v24, (uint64_t)&v23, 0x10100000000));
      v14 = (char)v12;
      if (v23)
        WTF::fastFree((WTF *)(v23 - 16), v12);
      if (v24)
        WTF::fastFree((WTF *)(v24 - 16), v12);
      result = 0;
      if (v14 && v13 >= 0.0)
      {
        v23 = 0;
        v24 = 0;
        v16 = WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(&v20, &v24, (uint64_t)&v23, 0x10100000000);
        if (v23)
        {
          v18 = v15;
          WTF::fastFree((WTF *)(v23 - 16), v15);
          v15 = v18;
        }
        if (v24)
        {
          v19 = (char)v15;
          WTF::fastFree((WTF *)(v24 - 16), v15);
          LOBYTE(v15) = v19;
        }
        if ((_BYTE)v15 && v20 == v21)
        {
          *(_OWORD *)a2 = v22;
          result = WTF::fastCompactMalloc((WTF *)0x28);
          *(_DWORD *)result = 2;
          v17 = *(_BYTE *)(result + 6);
          *(_WORD *)(result + 4) = -28672;
          *(_BYTE *)(result + 6) = v17 & 0xFC;
          *(double *)(result + 8) = v6;
          *(double *)(result + 16) = v10;
          *(double *)(result + 24) = v13;
          *(_QWORD *)(result + 32) = v16;
        }
        else
        {
          result = 0;
        }
      }
    }
  }
  *(_QWORD *)this = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBoxShadow@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v7;
  uint64_t result;
  int *v9;
  int v10;
  int *v11;
  unsigned __int8 v12;

  v12 = 1;
  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v10 = *((_DWORD *)v7 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v10;
  }
  if ((unsigned __int16)v10 != 6)
  {
LABEL_3:
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WTF::RefPtr<WebCore::CSSShadowValue,WTF::RawPtrTraits<WebCore::CSSShadowValue>,WTF::DefaultRefDerefTraits<WebCore::CSSShadowValue>> (&)(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,BOOL,BOOL),WebCore::CSSParserContext const&,BOOL &,BOOL &>(this, (void (*)(_DWORD **__return_ptr, __int128 **, uint64_t, _QWORD, _QWORD))WebCore::CSSPropertyParserHelpers::consumeSingleShadow, (uint64_t)a2, &v12, &v12, &v11);
    v9 = v11;
LABEL_4:
    *a3 = v9;
    return result;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) == 0)
  {
    v9 = 0;
    goto LABEL_4;
  }
  if ((unsigned __int16)result < 0x48Eu)
  {
    v9 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v9 += 2;
    goto LABEL_4;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)691,(WebCore::CSSValueID)692>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 691 > 1)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D0E0CLL);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)693,(WebCore::CSSValueID)273,(WebCore::CSSValueID)694,(WebCore::CSSValueID)695,(WebCore::CSSValueID)696>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 693 >= 4 && (unsigned __int16)result != 273)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D104CLL);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumePerspectiveFunctionArgument(WebCore::CSSPropertyParsing *a1, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  void *v7;
  double v8;
  uint64_t result;
  char v11;
  int *v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;

  WebCore::CSSPropertyParsing::consumePerspective(a1, a2, &v33);
  if (v33)
  {
    v32 = v33;
    v5 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v5 == *(_DWORD *)(a3 + 8))
    {
      v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v5 + 1, (unint64_t)&v32);
      v18 = *(unsigned int *)(a3 + 12);
      v19 = *(_QWORD **)a3;
      v20 = *v16;
      *v16 = 0;
      v19[v18] = v20;
      v21 = v32;
      *(_DWORD *)(a3 + 12) = v18 + 1;
      v32 = 0;
      if (v21)
      {
        if (*v21 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v17);
        else
          *v21 -= 2;
      }
      return 1;
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v33;
    v6 = v5 + 1;
LABEL_19:
    *(_DWORD *)(a3 + 12) = v6;
    return 1;
  }
  v32 = 0;
  v33 = 0;
  v8 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve((__int128 **)a1, (uint64_t *)&v33, (uint64_t)&v32, 0x10100000100));
  if (v32)
  {
    v28 = v7;
    WTF::fastFree((WTF *)(v32 - 4), v7);
    v7 = v28;
  }
  if (v33)
  {
    v29 = (char)v7;
    WTF::fastFree((WTF *)(v33 - 4), v7);
    LOBYTE(v7) = v29;
  }
  if (!(_BYTE)v7)
    return 0;
  if ((int)v8 <= 0xFF && *(_QWORD *)&v8 == COERCE__INT64((double)(int)v8))
  {
    v12 = &WebCore::staticCSSValuePool[4 * (int)v8];
    v13 = v12[16];
    result = (uint64_t)(v12 + 16);
    *(_DWORD *)result = v13 + 2;
  }
  else
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v11 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 6;
    *(_BYTE *)(result + 6) = v11 & 0xFC;
    *(double *)(result + 8) = v8;
  }
  v14 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v14 != *(_DWORD *)(a3 + 8))
  {
    v15 = (uint64_t *)(*(_QWORD *)a3 + 8 * v14);
LABEL_18:
    *v15 = result;
    v6 = v14 + 1;
    goto LABEL_19;
  }
  v30 = *(unsigned int *)(a3 + 12);
  v31 = result;
  v22 = v14 + (v14 >> 2);
  if (v22 >= 0x10)
    v23 = v22 + 1;
  else
    v23 = 16;
  if (v23 <= v14 + 1)
    v24 = v14 + 1;
  else
    v24 = v23;
  v25 = *(_QWORD **)a3;
  if (v24 < 5)
  {
    v26 = (void *)(a3 + 16);
    *(_QWORD *)a3 = a3 + 16;
    *(_DWORD *)(a3 + 8) = 4;
LABEL_34:
    memcpy(v26, v25, 8 * v30);
    if ((_QWORD *)(a3 + 16) != v25 && v25)
    {
      if (*(_QWORD **)a3 == v25)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v25, v27);
    }
    v14 = *(unsigned int *)(a3 + 12);
    v15 = (uint64_t *)(*(_QWORD *)a3 + 8 * v14);
    result = v31;
    goto LABEL_18;
  }
  if (!(v24 >> 29))
  {
    v26 = (void *)WTF::fastMalloc((WTF *)(8 * v24));
    *(_DWORD *)(a3 + 8) = v24;
    *(_QWORD *)a3 = v26;
    goto LABEL_34;
  }
  __break(0xC471u);
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumeNumbers(__int128 **a1, uint64_t a2, int a3)
{
  void *v6;
  __int128 *result;
  void *v8;
  _DWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  int v24;
  void *__src;
  _DWORD *v26;

  v6 = (void *)(a2 + 16);
  while (1)
  {
    result = WebCore::CSSPropertyParserHelpers::consumeNumber(a1, 0, &v26);
    v9 = v26;
    if (!v26)
    {
      v18 = 1;
      return (__int128 *)(v18 ^ 1u);
    }
    v26 = 0;
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 != *(_DWORD *)(a2 + 8))
    {
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8 * v10);
      goto LABEL_5;
    }
    v21 = v10 + (v10 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v10 + 1)
      v22 = v10 + 1;
    __src = *(void **)a2;
    if (v22 >= 5)
      break;
    *(_QWORD *)a2 = v6;
    *(_DWORD *)(a2 + 8) = 4;
    v23 = v6;
LABEL_38:
    memcpy(v23, __src, 8 * v10);
    if (v6 != __src && __src)
    {
      if (*(void **)a2 == __src)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      WTF::fastFree((WTF *)__src, v8);
    }
    v10 = *(unsigned int *)(a2 + 12);
    v11 = (_QWORD *)(*(_QWORD *)a2 + 8 * v10);
LABEL_5:
    *v11 = v9;
    *(_DWORD *)(a2 + 12) = v10 + 1;
    if (--a3)
    {
      v13 = *a1;
      v12 = a1[1];
      if (*a1 >= v12)
      {
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v13 & 0x3F) != 0x15)
      {
        v18 = 1;
        goto LABEL_19;
      }
      v14 = *a1;
      if (*a1 == v12)
      {
        v16 = 1;
        {
          v15 = v12;
        }
        else
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = *a1;
        }
      }
      else
      {
        v15 = (__int128 *)((char *)v14 + 24);
        *a1 = (__int128 *)((char *)v14 + 24);
      }
      while (1)
      {
        if (v15 < v12 || (v16 & 1) != 0)
        {
          if (v15 >= v12)
            v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v17 = *(_DWORD *)v15;
        }
        else
        {
          v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
          v16 = 1;
        }
        if ((v17 & 0x3F) != 0x10)
          break;
        v15 = (__int128 *)((char *)*a1 + 24);
        *a1 = v15;
      }
    }
    v18 = 0;
LABEL_19:
    v19 = v26;
    v26 = 0;
    if (v19)
    {
      if (*v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)v8);
      else
        *v19 -= 2;
    }
    v20 = v18 ^ 1;
    if (!a3)
      v20 = 0;
    if ((v20 & 1) == 0)
      return (__int128 *)(v18 ^ 1u);
  }
  if (!(v22 >> 29))
  {
    v24 = v22;
    v23 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
    *(_DWORD *)(a2 + 8) = v24;
    *(_QWORD *)a2 = v23;
    goto LABEL_38;
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::CSSPropertyParserHelpers::consumeNumbersOrPercents(__int128 **a1, uint64_t a2)
{
  _BOOL8 v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  _QWORD v11[3];
  int v12;

  v12 = 3;
  v11[0] = a1;
  v11[1] = a2;
  v11[2] = &v12;
  if (!WebCore::CSSPropertyParserHelpers::consumeNumbersOrPercents(WebCore::CSSParserTokenRange &,WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0::operator()((uint64_t)v11))
    return 0;
  do
  {
    v3 = v12 == 0;
    if (!v12)
      break;
    v5 = *a1;
    v4 = a1[1];
    if (*a1 >= v4)
    {
      v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v5 & 0x3F) != 0x15)
      break;
    v6 = *a1;
    if (*a1 == v4)
    {
      v8 = 1;
      {
        v7 = v4;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v7 = *a1;
      }
    }
    else
    {
      v7 = (__int128 *)((char *)v6 + 24);
      *a1 = (__int128 *)((char *)v6 + 24);
    }
    while (1)
    {
      if (v7 < v4 || (v8 & 1) != 0)
      {
        if (v7 >= v4)
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v9 = *(_DWORD *)v7;
      }
      else
      {
        v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
        v8 = 1;
      }
      if ((v9 & 0x3F) != 0x10)
        break;
      v7 = (__int128 *)((char *)*a1 + 24);
      *a1 = v7;
    }
  }
  while ((WebCore::CSSPropertyParserHelpers::consumeNumbersOrPercents(WebCore::CSSParserTokenRange &,WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0::operator()((uint64_t)v11) & 1) != 0);
  return v3;
}

BOOL WebCore::CSSPropertyParserHelpers::consumeTranslate3d(__int128 **a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  unsigned __int16 *v7;
  void *v8;
  unint64_t v9;
  unsigned __int16 **v10;
  __int128 *v11;
  __int128 *v12;
  int *v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  char v17;
  unsigned int v18;
  unsigned __int16 *v19;
  void *v20;
  unsigned __int16 *v21;
  unint64_t v22;
  unsigned __int16 **v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  __int128 *v27;
  __int128 *v28;
  char v29;
  unsigned int v30;
  unsigned __int16 *v31;
  void *v32;
  _DWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  _QWORD *v36;
  _DWORD *v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  int v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  unsigned __int16 *v58;

  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a1, a2, 0, 1, 0, 0, 0, (uint64_t *)&v58);
  v7 = v58;
  if (!v58)
    return 0;
  v8 = (void *)(a3 + 16);
  v58 = 0;
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9 == *(_DWORD *)(a3 + 8))
  {
    v39 = v9 + (v9 >> 2);
    if (v39 >= 0x10)
      v40 = v39 + 1;
    else
      v40 = 16;
    if (v40 <= v9 + 1)
      v41 = v9 + 1;
    else
      v41 = v40;
    v42 = *(void **)a3;
    if (v41 < 5)
    {
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 4;
      v44 = (void *)(a3 + 16);
    }
    else
    {
      if (v41 >> 29)
        goto LABEL_112;
      v43 = v41;
      v44 = (void *)WTF::fastMalloc((WTF *)(8 * v41));
      *(_DWORD *)(a3 + 8) = v43;
      *(_QWORD *)a3 = v44;
    }
    memcpy(v44, v42, 8 * v9);
    if (v8 != v42 && v42)
    {
      if (*(void **)a3 == v42)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v42, v6);
    }
    v9 = *(unsigned int *)(a3 + 12);
    v10 = (unsigned __int16 **)(*(_QWORD *)a3 + 8 * v9);
  }
  else
  {
    v10 = (unsigned __int16 **)(*(_QWORD *)a3 + 8 * v9);
  }
  *v10 = v7;
  *(_DWORD *)(a3 + 12) = v9 + 1;
  v12 = *a1;
  v11 = a1[1];
  v13 = &dword_1ECE90000;
  if (*a1 >= v11)
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v14 = *(_DWORD *)v12 & 0x3F;
  if (v14 == 21)
  {
    v15 = *a1;
    if (*a1 == v11)
    {
      v17 = 1;
      {
        v16 = v11;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v16 = *a1;
      }
    }
    else
    {
      v16 = (__int128 *)((char *)v15 + 24);
      *a1 = (__int128 *)((char *)v15 + 24);
    }
    while (1)
    {
      if (v16 < v11 || (v17 & 1) != 0)
      {
        if (v16 >= v11)
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v18 = *(_DWORD *)v16;
      }
      else
      {
        v18 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v18;
        v17 = 1;
      }
      if ((v18 & 0x3F) != 0x10)
        break;
      v16 = (__int128 *)((char *)*a1 + 24);
      *a1 = v16;
    }
  }
  v19 = v58;
  v58 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (v14 != 21)
    return 0;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a1, a2, 0, 1, 0, 0, 0, (uint64_t *)&v58);
  v21 = v58;
  if (!v58)
    return 0;
  v58 = 0;
  v22 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v22 != *(_DWORD *)(a3 + 8))
  {
    v23 = (unsigned __int16 **)(*(_QWORD *)a3 + 8 * v22);
    goto LABEL_24;
  }
  v45 = v22 + (v22 >> 2);
  if (v45 >= 0x10)
    v46 = v45 + 1;
  else
    v46 = 16;
  v55 = *(unsigned int *)(a3 + 12);
  if (v46 <= v22 + 1)
    v47 = v22 + 1;
  else
    v47 = v46;
  v48 = *(void **)a3;
  if (v47 > 4)
  {
    if (!(v47 >> 29))
    {
      v49 = (void *)WTF::fastMalloc((WTF *)(8 * v47));
      *(_DWORD *)(a3 + 8) = v47;
      *(_QWORD *)a3 = v49;
      goto LABEL_78;
    }
LABEL_112:
    __break(0xC471u);
    goto LABEL_114;
  }
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = 4;
  v49 = (void *)(a3 + 16);
LABEL_78:
  memcpy(v49, v48, 8 * v55);
  if (v8 != v48 && v48)
  {
    if (*(void **)a3 == v48)
    {
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(a3 + 8) = 0;
    }
    WTF::fastFree((WTF *)v48, v20);
  }
  v22 = *(unsigned int *)(a3 + 12);
  v23 = (unsigned __int16 **)(*(_QWORD *)a3 + 8 * v22);
  v13 = &dword_1ECE90000;
LABEL_24:
  *v23 = v21;
  *(_DWORD *)(a3 + 12) = v22 + 1;
  v25 = *a1;
  v24 = a1[1];
  if (*a1 >= v24)
  {
    v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v13[312] & 1) == 0)
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      *((_BYTE *)v13 + 1248) = 1;
    }
  }
  v26 = *(_DWORD *)v25 & 0x3F;
  if (v26 == 21)
  {
    v27 = *a1;
    if (*a1 == v24)
    {
      v29 = 1;
      if ((v13[312] & 1) != 0)
      {
        v28 = v24;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        *((_BYTE *)v13 + 1248) = 1;
        v28 = *a1;
      }
    }
    else
    {
      v28 = (__int128 *)((char *)v27 + 24);
      *a1 = (__int128 *)((char *)v27 + 24);
      v29 = *((_BYTE *)v13 + 1248);
    }
    while (1)
    {
      if (v28 < v24 || (v29 & 1) != 0)
      {
        if (v28 >= v24)
          v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v30 = *(_DWORD *)v28;
      }
      else
      {
        v30 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
        v29 = 1;
        *((_BYTE *)v13 + 1248) = 1;
      }
      if ((v30 & 0x3F) != 0x10)
        break;
      v28 = (__int128 *)((char *)*a1 + 24);
      *a1 = v28;
    }
  }
  v31 = v58;
  v58 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (v26 != 21)
    return 0;
  v57 = 0;
  v58 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)a1, &v58, (uint64_t)&v57, a2 | 0x100000000, &v56);
  if (v57)
    WTF::fastFree((WTF *)(v57 - 16), v32);
  if (v58)
    WTF::fastFree((WTF *)(v58 - 8), v32);
  v33 = v56;
  v34 = v56 != 0;
  if (v56)
  {
    v56 = 0;
    v35 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v35 != *(_DWORD *)(a3 + 8))
    {
      v36 = (_QWORD *)(*(_QWORD *)a3 + 8 * v35);
LABEL_50:
      *v36 = v33;
      *(_DWORD *)(a3 + 12) = v35 + 1;
      v37 = v56;
      v56 = 0;
      if (v37)
      {
        if (*v37 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, (WTF::StringImpl *)v32);
        else
          *v37 -= 2;
      }
      return v34;
    }
    v50 = v35 + (v35 >> 2);
    if (v50 >= 0x10)
      v51 = v50 + 1;
    else
      v51 = 16;
    if (v51 <= v35 + 1)
      v52 = v35 + 1;
    else
      v52 = v51;
    v53 = *(void **)a3;
    if (v52 < 5)
    {
      *(_QWORD *)a3 = v8;
      *(_DWORD *)(a3 + 8) = 4;
      v54 = (void *)(a3 + 16);
LABEL_89:
      memcpy(v54, v53, 8 * v35);
      if (v8 != v53 && v53)
      {
        if (*(void **)a3 == v53)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        WTF::fastFree((WTF *)v53, v32);
      }
      v35 = *(unsigned int *)(a3 + 12);
      v36 = (_QWORD *)(*(_QWORD *)a3 + 8 * v35);
      goto LABEL_50;
    }
    if (!(v52 >> 29))
    {
      v54 = (void *)WTF::fastMalloc((WTF *)(8 * v52));
      *(_DWORD *)(a3 + 8) = v52;
      *(_QWORD *)a3 = v54;
      goto LABEL_89;
    }
    __break(0xC471u);
LABEL_114:
    JUMPOUT(0x1958D1CA0);
  }
  return v34;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeTranslate@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  int v17;
  double *v18;
  BOOL v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  int v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t result;
  int *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  double *v39;
  _DWORD *v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;

  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v32 = *((_DWORD *)v6 + 4);
  if (v32 < 0)
  {
    v32 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v32;
  }
  if ((unsigned __int16)v32 != 6)
  {
LABEL_3:
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, (uint64_t)a2, 0, 1, 0, 0, 0, &v43);
    if (!v43)
    {
      v20 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v20 = 2;
      v22 = (*(unsigned __int8 *)(v20 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v20 + 8) = 0;
      *(_WORD *)(v20 + 4) = -10240;
      *(_BYTE *)(v20 + 6) = (v22 | 0x10000u) >> 16;
      *a3 = v20;
LABEL_61:
      result = v43;
      v43 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v21);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v8 = *this;
    v7 = (unint64_t)this[1];
    while (1)
    {
      if ((unint64_t)v8 < v7 || (v9 & 1) != 0)
      {
        if ((unint64_t)v8 >= v7)
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v10 = *(_DWORD *)v8;
      }
      else
      {
        v10 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
        v9 = 1;
      }
      if ((v10 & 0x3F) != 0x10)
        break;
      v8 = (__int128 *)((char *)*this + 24);
      *this = v8;
    }
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, (uint64_t)a2, 0, 1, 0, 0, 0, &v42);
    if (!v42)
    {
      v23 = v43;
      v43 = 0;
      v24 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v24 = 2;
      v25 = (*(unsigned __int8 *)(v24 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v24 + 8) = 1;
      *(_WORD *)(v24 + 4) = -10240;
      *(_BYTE *)(v24 + 6) = (v25 | 0x10000u) >> 16;
      *(_QWORD *)(v24 + 16) = v23;
      *a3 = v24;
LABEL_57:
      v40 = (_DWORD *)v42;
      v42 = 0;
      if (v40)
      {
        if (*v40 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v21);
        else
          *v40 -= 2;
      }
      goto LABEL_61;
    }
    v12 = *this;
    v11 = (unint64_t)this[1];
    while (1)
    {
      if ((unint64_t)v12 < v11 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v11)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)((char *)*this + 24);
      *this = v12;
    }
    v44 = 0;
    v45 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v45, (uint64_t)&v44, a2 | 0x100000000, &v41);
    if (v44)
      WTF::fastFree((WTF *)(v44 - 16), v15);
    if (v45)
      WTF::fastFree((WTF *)(v45 - 8), v15);
    v16 = v42;
    v17 = *(_WORD *)(v42 + 4) & 0x7F;
    if (v17 == 3 || v17 == 73)
    {
      v18 = v41;
      if (v41)
      {
        v19 = 1;
LABEL_36:
        v27 = *((_WORD *)v18 + 2) & 0x7F;
        if (v27 == 3 || v27 == 73)
          goto LABEL_42;
        v28 = v18[1];
        if (v28 != 0.0)
          v19 = 1;
        if (v19)
        {
          if (v28 != 0.0)
          {
LABEL_42:
            v29 = v43;
            v42 = 0;
            v43 = 0;
            v41 = 0;
            v30 = WTF::fastCompactMalloc((WTF *)0x38);
            *(_DWORD *)v30 = 2;
            v31 = *(unsigned __int8 *)(v30 + 6) >> 2;
            *(_DWORD *)(v30 + 8) = 3;
            *(_WORD *)(v30 + 4) = -10240;
            *(_BYTE *)(v30 + 6) = (((v31 & 0x3F) << 18) | 0x1D800u) >> 16;
            *(_QWORD *)(v30 + 16) = v29;
            *(_QWORD *)(v30 + 24) = v16;
            *(_QWORD *)(v30 + 32) = v18;
            goto LABEL_53;
          }
          goto LABEL_51;
        }
LABEL_52:
        v37 = v43;
        v43 = 0;
        v30 = WTF::fastCompactMalloc((WTF *)0x38);
        *(_DWORD *)v30 = 2;
        v38 = *(unsigned __int8 *)(v30 + 6) >> 2;
        *(_DWORD *)(v30 + 8) = 1;
        *(_WORD *)(v30 + 4) = -10240;
        *(_BYTE *)(v30 + 6) = (((v38 & 0x3F) << 18) | 0x1D800u) >> 16;
        *(_QWORD *)(v30 + 16) = v37;
LABEL_53:
        *a3 = v30;
        v39 = v41;
        v41 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v21);
          else
            *(_DWORD *)v39 -= 2;
        }
        goto LABEL_57;
      }
    }
    else
    {
      v26 = *(double *)(v42 + 8);
      v19 = v26 != 0.0;
      v18 = v41;
      if (v41)
        goto LABEL_36;
      if (v26 == 0.0)
        goto LABEL_52;
    }
LABEL_51:
    v35 = v43;
    v42 = 0;
    v43 = 0;
    v30 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v30 = 2;
    v36 = *(unsigned __int8 *)(v30 + 6) >> 2;
    *(_DWORD *)(v30 + 8) = 2;
    *(_WORD *)(v30 + 4) = -10240;
    *(_BYTE *)(v30 + 6) = (((v36 & 0x3F) << 18) | 0x1D800u) >> 16;
    *(_QWORD *)(v30 + 16) = v35;
    *(_QWORD *)(v30 + 24) = v16;
    goto LABEL_53;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) != 0)
  {
    if ((unsigned __int16)result >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958D2168);
    }
    v34 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v34 += 2;
  }
  else
  {
    v34 = 0;
  }
  *a3 = v34;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeScale@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  unint64_t v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  int *v14;
  double v15;
  int *v16;
  int *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  int *v23;
  int *v24;
  double v25;
  double v26;
  int *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t result;
  int *v33;
  int *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int *v45;
  int *v46;
  int *v47;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v31 = *((_DWORD *)v5 + 4);
  if (v31 < 0)
  {
    v31 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = v31;
  }
  if ((unsigned __int16)v31 != 6)
  {
LABEL_3:
    WebCore::CSSPropertyParserHelpers::consumePercentDividedBy100OrNumber((uint64_t)this, 0, &v46);
    if (!v46)
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v21 = 2;
      v22 = (*(unsigned __int8 *)(v21 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v21 + 8) = 0;
      *(_WORD *)(v21 + 4) = -10240;
      *(_BYTE *)(v21 + 6) = (v22 | 0x10000u) >> 16;
      *a3 = v21;
LABEL_55:
      result = (uint64_t)v46;
      v46 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v19);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v7 = *this;
    v6 = (unint64_t)this[1];
    while (1)
    {
      if ((unint64_t)v7 < v6 || (v8 & 1) != 0)
      {
        if ((unint64_t)v7 >= v6)
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v9 = *(_DWORD *)v7;
      }
      else
      {
        v9 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
        v8 = 1;
      }
      if ((v9 & 0x3F) != 0x10)
        break;
      v7 = (__int128 *)((char *)*this + 24);
      *this = v7;
    }
    WebCore::CSSPropertyParserHelpers::consumePercentDividedBy100OrNumber((uint64_t)this, 0, &v45);
    if (v45)
    {
      v11 = *this;
      v10 = (unint64_t)this[1];
      while (1)
      {
        if ((unint64_t)v11 < v10 || (v12 & 1) != 0)
        {
          if ((unint64_t)v11 >= v10)
            v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v13 = *(_DWORD *)v11;
        }
        else
        {
          v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
          v12 = 1;
        }
        if ((v13 & 0x3F) != 0x10)
          break;
        v11 = (__int128 *)((char *)*this + 24);
        *this = v11;
      }
      WebCore::CSSPropertyParserHelpers::consumePercentDividedBy100OrNumber((uint64_t)this, 0, &v47);
      v14 = v47;
      if (v47)
      {
        if ((v47[1] & 0x7F) == 0x49)
        {
          v35 = *((_QWORD *)v47 + 1);
          v47 = 0;
          v42 = WebCore::CSSCalcValue::doubleValue(v35, (uint64_t)&v47);
          if (v47)
            WTF::fastFree((WTF *)(v47 - 4), v36);
          v15 = v42;
        }
        else
        {
          v15 = *((double *)v47 + 1);
        }
        if (v15 != 1.0)
        {
          v17 = v45;
          v16 = v46;
          v45 = 0;
          v46 = 0;
          v18 = WTF::fastCompactMalloc((WTF *)0x38);
          *(_DWORD *)v18 = 2;
          v20 = (*(unsigned __int8 *)(v18 + 6) << 16) & 0xFC0000;
          *(_DWORD *)(v18 + 8) = 3;
          *(_WORD *)(v18 + 4) = -10240;
          *(_BYTE *)(v18 + 6) = (v20 | 0x10000u) >> 16;
          *(_QWORD *)(v18 + 16) = v16;
          *(_QWORD *)(v18 + 24) = v17;
          *(_QWORD *)(v18 + 32) = v14;
          *a3 = v18;
LABEL_51:
          v34 = v45;
          v45 = 0;
          if (v34)
          {
            if (*v34 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v19);
            else
              *v34 -= 2;
          }
          goto LABEL_55;
        }
      }
      v23 = v45;
      v24 = v46;
      if (v45)
      {
        if ((v46[1] & 0x7F) == 0x49)
        {
          v37 = *((_QWORD *)v46 + 1);
          v47 = 0;
          v43 = WebCore::CSSCalcValue::doubleValue(v37, (uint64_t)&v47);
          if (v47)
            WTF::fastFree((WTF *)(v47 - 4), v38);
          v23 = v45;
          v25 = v43;
        }
        else
        {
          v25 = *((double *)v46 + 1);
        }
        if ((v23[1] & 0x7F) == 0x49)
        {
          v44 = v25;
          v39 = *((_QWORD *)v23 + 1);
          v47 = 0;
          v41 = WebCore::CSSCalcValue::doubleValue(v39, (uint64_t)&v47);
          if (v47)
            WTF::fastFree((WTF *)(v47 - 4), v40);
          v26 = v41;
          v25 = v44;
        }
        else
        {
          v26 = *((double *)v23 + 1);
        }
        v24 = v46;
        if (v25 != v26)
        {
          v27 = v45;
          v45 = 0;
          v46 = 0;
          v28 = WTF::fastCompactMalloc((WTF *)0x38);
          *(_DWORD *)v28 = 2;
          v29 = (*(unsigned __int8 *)(v28 + 6) << 16) & 0xFC0000;
          *(_DWORD *)(v28 + 8) = 2;
          *(_WORD *)(v28 + 4) = -10240;
          *(_BYTE *)(v28 + 6) = BYTE2(v29) | 1;
          *(_QWORD *)(v28 + 16) = v24;
          *(_QWORD *)(v28 + 24) = v27;
          goto LABEL_38;
        }
      }
    }
    else
    {
      v14 = 0;
      v24 = v46;
    }
    v46 = 0;
    v28 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v28 = 2;
    v30 = (*(unsigned __int8 *)(v28 + 6) << 16) & 0xFC0000;
    *(_DWORD *)(v28 + 8) = 1;
    *(_WORD *)(v28 + 4) = -10240;
    *(_BYTE *)(v28 + 6) = (v30 | 0x10000u) >> 16;
    *(_QWORD *)(v28 + 16) = v24;
LABEL_38:
    *a3 = v28;
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v19);
      else
        *v14 -= 2;
    }
    goto LABEL_51;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) != 0)
  {
    if ((unsigned __int16)result >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958D2590);
    }
    v33 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v33 += 2;
  }
  else
  {
    v33 = 0;
  }
  *a3 = v33;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeRotate@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int **v12;
  unint64_t v13;
  __int128 *v14;
  char v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  __int128 *v19;
  char v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  __int128 *v24;
  __int128 *v25;
  BOOL v26;
  unint64_t v28;
  __int128 *v29;
  char v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  __int128 *v34;
  __int128 *v35;
  char v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  WTF *v42;
  uint64_t v43;
  double v44;
  unsigned int v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  int *v54;
  int v55;
  unsigned int v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int **v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  _DWORD *v66;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  WTF *v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  double v81;
  double v82;
  double v83;
  WTF *__src;
  double __srca;
  double __srcb;
  double __srcc;
  WTF *v88;
  int v89;
  unsigned int v90;
  _BYTE v91[32];
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  _BYTE v95[32];
  int *v96;

  v3 = a2;
  v4 = this;
  v7 = *(__int128 **)this;
  v6 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) == 0)
  {
    this = *((unsigned int *)v7 + 4);
    if ((this & 0x80000000) != 0)
    {
      this = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      *((_DWORD *)v7 + 4) = this;
    }
    if ((unsigned __int16)this == 6)
    {
      this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v4, a2);
      if ((this & 0xFF0000) != 0)
      {
        if ((unsigned __int16)this >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958D30A8);
        }
        v54 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
        *v54 += 2;
      }
      else
      {
        v54 = 0;
      }
      *a3 = v54;
      return this;
    }
    v6 = *(_QWORD *)(v4 + 8);
  }
  v93 = (WTF *)v95;
  v94 = 4;
  if (*(_QWORD *)v4 == v6)
  {
    v8 = 0;
    goto LABEL_135;
  }
  v8 = 0;
  v9 = 0;
  do
  {
    this = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)v4, 0, &v96);
    v10 = v96;
    if (v96)
    {
      if (v8)
      {
LABEL_56:
        *a3 = 0;
        v22 = 1;
      }
      else
      {
        v96 = 0;
        v11 = HIDWORD(v94);
        if (HIDWORD(v94) == (_DWORD)v94)
        {
          v39 = HIDWORD(v94) + ((unint64_t)HIDWORD(v94) >> 2);
          if (v39 >= 0x10)
            v40 = v39 + 1;
          else
            v40 = 16;
          if (v40 <= (unint64_t)HIDWORD(v94) + 1)
            v41 = HIDWORD(v94) + 1;
          else
            v41 = v40;
          __src = v93;
          if (v41 < 5)
          {
            v93 = (WTF *)v95;
            LODWORD(v94) = 4;
            v42 = (WTF *)v95;
          }
          else
          {
            if (v41 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1958D31E8);
            }
            v42 = (WTF *)WTF::fastMalloc((WTF *)(8 * v41));
            LODWORD(v94) = v41;
            v93 = v42;
          }
          this = (uint64_t)memcpy(v42, __src, 8 * v11);
          if (v95 != (_BYTE *)__src && __src)
          {
            if (v93 == __src)
            {
              v93 = 0;
              LODWORD(v94) = 0;
            }
            this = WTF::fastFree(__src, a2);
          }
          LODWORD(v11) = HIDWORD(v94);
          v12 = (int **)((char *)v93 + 8 * HIDWORD(v94));
        }
        else
        {
          v12 = (int **)((char *)v93 + 8 * HIDWORD(v94));
        }
        *v12 = v10;
        HIDWORD(v94) = v11 + 1;
        v14 = *(__int128 **)v4;
        v13 = *(_QWORD *)(v4 + 8);
        while (1)
        {
          if ((unint64_t)v14 < v13 || (v15 & 1) != 0)
          {
            if ((unint64_t)v14 >= v13)
              v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v16 = *(_DWORD *)v14;
          }
          else
          {
            v16 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
            v15 = 1;
          }
          if ((v16 & 0x3F) != 0x10)
            break;
          v14 = (__int128 *)(*(_QWORD *)v4 + 24);
          *(_QWORD *)v4 = v14;
        }
        v8 = 0;
        v22 = 2;
        v10 = v96;
      }
      v96 = 0;
      if (v10)
      {
        if (*v10 == 2)
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
        else
          *v10 -= 2;
      }
      goto LABEL_71;
    }
    WebCore::CSSPropertyParserHelpers::consumeAngle(v4, v3, 1, 0, &v92);
    v10 = (int *)v92;
    v92 = 0;
    this = (uint64_t)v96;
    v96 = v10;
    if (this)
    {
      v17 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
        this = v92;
        v92 = 0;
        if (!this)
          goto LABEL_21;
        v17 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
        {
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
          goto LABEL_21;
        }
      }
      *(_DWORD *)this = v17;
LABEL_21:
      v10 = v96;
    }
    if (v10)
    {
      if (v9 || HIDWORD(v94) != 3 && HIDWORD(v94))
        goto LABEL_56;
      v96 = 0;
      v19 = *(__int128 **)v4;
      v18 = *(_QWORD *)(v4 + 8);
      while (1)
      {
        if ((unint64_t)v19 < v18 || (v20 & 1) != 0)
        {
          if ((unint64_t)v19 >= v18)
            v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v21 = *(_DWORD *)v19;
        }
        else
        {
          v21 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
          v20 = 1;
        }
        if ((v21 & 0x3F) != 0x10)
          break;
        v19 = (__int128 *)(*(_QWORD *)v4 + 24);
        *(_QWORD *)v4 = v19;
      }
      v22 = 2;
      v9 = v10;
    }
    else
    {
      v24 = *(__int128 **)v4;
      v23 = *(_QWORD *)(v4 + 8);
      if (*(_QWORD *)v4 >= v23)
      {
        v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_BYTE *)v24 & 0x3F) != 0)
        goto LABEL_40;
      v25 = *(__int128 **)v4;
      if (*(_QWORD *)v4 >= v23)
      {
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v25 & 0x3F) != 0)
        goto LABEL_40;
      v32 = *((_DWORD *)v25 + 4);
      if (v32 < 0)
      {
        v32 = WebCore::cssValueKeywordID(*((_QWORD *)v25 + 1), *((unsigned int *)v25 + 1) | ((unint64_t)((*(_DWORD *)v25 >> 22) & 1) << 32));
        *((_DWORD *)v25 + 4) = v32;
      }
      if ((unsigned __int16)v32 - 998 > 2)
      {
LABEL_40:
        v10 = 0;
      }
      else
      {
        v34 = *(__int128 **)v4;
        v33 = *(_QWORD *)(v4 + 8);
        if (*(_QWORD *)v4 == v33)
        {
          v36 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
          v35 = *(__int128 **)v4;
          v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v35 = (__int128 *)((char *)v34 + 24);
          *(_QWORD *)v4 = (char *)v34 + 24;
        }
        while (1)
        {
          if ((unint64_t)v35 < v33 || (v36 & 1) != 0)
          {
            if ((unint64_t)v35 >= v33)
              v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v37 = *(_DWORD *)v35;
          }
          else
          {
            v37 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v37;
            v36 = 1;
          }
          if ((v37 & 0x3F) != 0x10)
            break;
          v35 = (__int128 *)(*(_QWORD *)v4 + 24);
          *(_QWORD *)v4 = v35;
        }
        if ((*(_DWORD *)v34 & 0x3F) != 0)
        {
          LOWORD(v38) = 0;
        }
        else
        {
          v38 = *((_DWORD *)v34 + 4);
          if (v38 < 0)
          {
            v38 = WebCore::cssValueKeywordID(*((_QWORD *)v34 + 1), *((unsigned int *)v34 + 1) | ((unint64_t)((*(_DWORD *)v34 >> 22) & 1) << 32));
            *((_DWORD *)v34 + 4) = v38;
          }
          if ((unsigned __int16)v38 >= 0x48Eu)
          {
            __break(0xC471u);
            JUMPOUT(0x1958D30C8);
          }
        }
        v10 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v38 + 3088];
        *v10 += 2;
      }
      this = (uint64_t)v96;
      v96 = v10;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
          v10 = v96;
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      if (v10)
        v26 = v8 == 0;
      else
        v26 = 0;
      if (!v26 || HIDWORD(v94) != 0)
        goto LABEL_56;
      v96 = 0;
      v29 = *(__int128 **)v4;
      v28 = *(_QWORD *)(v4 + 8);
      while (1)
      {
        if ((unint64_t)v29 < v28 || (v30 & 1) != 0)
        {
          if ((unint64_t)v29 >= v28)
            v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v31 = *(_DWORD *)v29;
        }
        else
        {
          v31 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v31;
          v30 = 1;
        }
        if ((v31 & 0x3F) != 0x10)
          break;
        v29 = (__int128 *)(*(_QWORD *)v4 + 24);
        *(_QWORD *)v4 = v29;
      }
      v22 = 0;
      v8 = (uint64_t)v10;
    }
LABEL_71:
    if ((v22 | 2) != 2)
      goto LABEL_137;
  }
  while (*(_QWORD *)v4 != *(_QWORD *)(v4 + 8));
  if (!v9)
  {
LABEL_135:
    v9 = 0;
    goto LABEL_136;
  }
  if (!HIDWORD(v94))
  {
    if (v8 && ((*(_WORD *)(v8 + 4) & 0x7F) != 0x50 || *(_WORD *)(v8 + 8) != 1000))
    {
      this = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)this = 2;
      v59 = *(unsigned __int8 *)(this + 6) >> 2;
      *(_DWORD *)(this + 8) = 2;
      *(_WORD *)(this + 4) = -10240;
      *(_BYTE *)(this + 6) = (((v59 & 0x3F) << 18) | 0x1D800u) >> 16;
      *(_QWORD *)(this + 16) = v8;
      *(_QWORD *)(this + 24) = v9;
      *a3 = (int *)this;
      goto LABEL_145;
    }
    this = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)this = 2;
    v55 = *(unsigned __int8 *)(this + 6) >> 2;
    *(_DWORD *)(this + 8) = 1;
    *(_WORD *)(this + 4) = -10240;
    v56 = (((v55 & 0x3F) << 18) | 0x1D800u) >> 16;
LABEL_172:
    *(_BYTE *)(this + 6) = v56;
    *(_QWORD *)(this + 16) = v9;
    goto LABEL_179;
  }
  if (HIDWORD(v94) != 3)
  {
LABEL_136:
    *a3 = 0;
LABEL_137:
    if (!v8)
      goto LABEL_141;
LABEL_138:
    if (*(_DWORD *)v8 == 2)
      this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
    goto LABEL_141;
  }
  v43 = *(_QWORD *)v93;
  if (((*(unsigned __int16 *)(*(_QWORD *)v93 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v93 + 6) << 16)) & 0x3F800) != 0)
    goto LABEL_238;
  if ((*(_WORD *)(*(_QWORD *)v93 + 4) & 0x7F) != 0x49)
  {
    v44 = *(double *)(v43 + 8);
    v45 = 3;
    goto LABEL_123;
  }
  v75 = *(_QWORD *)(v43 + 8);
  v96 = 0;
  __srca = WebCore::CSSCalcValue::doubleValue(v75, (uint64_t)&v96);
  if (v96)
    WTF::fastFree((WTF *)(v96 - 4), v76);
  v45 = HIDWORD(v94);
  if (HIDWORD(v94) <= 1)
  {
LABEL_238:
    __break(0xC471u);
    JUMPOUT(0x1958D3048);
  }
  v44 = __srca;
LABEL_123:
  v46 = *((_QWORD *)v93 + 1);
  if (((*(unsigned __int16 *)(v46 + 4) | (*(unsigned __int8 *)(v46 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1958D3068);
  }
  if ((*(_WORD *)(v46 + 4) & 0x7F) == 0x49)
  {
    __srcb = v44;
    v77 = *(_QWORD *)(v46 + 8);
    v96 = 0;
    v82 = WebCore::CSSCalcValue::doubleValue(v77, (uint64_t)&v96);
    if (v96)
      WTF::fastFree((WTF *)(v96 - 4), v78);
    v45 = HIDWORD(v94);
    v47 = v82;
    v44 = __srcb;
  }
  else
  {
    v47 = *(double *)(v46 + 8);
  }
  if (v45 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1958D3214);
  }
  v48 = *((_QWORD *)v93 + 2);
  if (((*(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1958D3088);
  }
  if ((*(_WORD *)(v48 + 4) & 0x7F) == 0x49)
  {
    v83 = v47;
    __srcc = v44;
    v79 = *(_QWORD *)(v48 + 8);
    v96 = 0;
    v81 = WebCore::CSSCalcValue::doubleValue(v79, (uint64_t)&v96);
    if (v96)
      WTF::fastFree((WTF *)(v96 - 4), v80);
    v47 = v83;
    v44 = __srcc;
    v49 = v81;
  }
  else
  {
    v49 = *(double *)(v48 + 8);
  }
  if (v44 != 0.0 && v47 == 0.0 && v49 == 0.0)
  {
    v50 = 0x1BA8u;
    goto LABEL_178;
  }
  if (v44 != 0.0 || v47 == 0.0 || v49 != 0.0)
  {
    if (v44 != 0.0 || v47 != 0.0 || v49 == 0.0)
    {
      v61 = HIDWORD(v94);
      if (HIDWORD(v94) == (_DWORD)v94)
      {
        v69 = HIDWORD(v94) + ((unint64_t)HIDWORD(v94) >> 2);
        if (v69 >= 0x10)
          v70 = v69 + 1;
        else
          v70 = 16;
        if (v70 <= (unint64_t)HIDWORD(v94) + 1)
          v71 = HIDWORD(v94) + 1;
        else
          v71 = v70;
        v72 = v93;
        if (v71 < 5)
        {
          v93 = (WTF *)v95;
          LODWORD(v94) = 4;
          v73 = (WTF *)v95;
        }
        else
        {
          if (v71 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1958D3240);
          }
          v73 = (WTF *)WTF::fastMalloc((WTF *)(8 * v71));
          LODWORD(v94) = v71;
          v93 = v73;
        }
        memcpy(v73, v72, 8 * v61);
        if (v95 != (_BYTE *)v72 && v72)
        {
          if (v93 == v72)
          {
            v93 = 0;
            LODWORD(v94) = 0;
          }
          WTF::fastFree(v72, v74);
        }
        LODWORD(v61) = HIDWORD(v94);
        v62 = (int **)((char *)v93 + 8 * HIDWORD(v94));
      }
      else
      {
        v62 = (int **)((char *)v93 + 8 * HIDWORD(v94));
      }
      *v62 = v9;
      v88 = (WTF *)v91;
      v89 = 4;
      v63 = v93;
      if (v93 == (WTF *)v95)
      {
        memcpy(v91, v95, 8 * (v61 + 1));
      }
      else
      {
        v93 = (WTF *)v95;
        v88 = v63;
        v68 = v94;
        LODWORD(v94) = 4;
        v89 = v68;
      }
      HIDWORD(v94) = 0;
      v90 = v61 + 1;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v88, (uint64_t *)&v96);
      *a3 = v96;
      if (v90)
      {
        v64 = v88;
        v65 = 8 * v90;
        do
        {
          v66 = *(_DWORD **)v64;
          *(_QWORD *)v64 = 0;
          if (v66)
          {
            if (*v66 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v66, a2);
            else
              *v66 -= 2;
          }
          v64 = (WTF *)((char *)v64 + 8);
          v65 -= 8;
        }
        while (v65);
      }
      this = (uint64_t)v88;
      if (v91 != (_BYTE *)v88 && v88 != 0)
      {
        v88 = 0;
        v89 = 0;
        this = WTF::fastFree((WTF *)this, a2);
      }
      goto LABEL_180;
    }
    this = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)this = 2;
    v60 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000;
    *(_DWORD *)(this + 8) = 1;
    *(_WORD *)(this + 4) = -10240;
    v56 = (v60 | 0x10000u) >> 16;
    goto LABEL_172;
  }
  v50 = 0x1BACu;
LABEL_178:
  v57 = &WebCore::staticCSSValuePool[v50];
  WebCore::staticCSSValuePool[v50] += 2;
  this = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)this = 2;
  v58 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000;
  *(_DWORD *)(this + 8) = 2;
  *(_WORD *)(this + 4) = -10240;
  *(_BYTE *)(this + 6) = BYTE2(v58) | 1;
  *(_QWORD *)(this + 16) = v57;
  *(_QWORD *)(this + 24) = v9;
LABEL_179:
  *a3 = (int *)this;
LABEL_180:
  v9 = 0;
  if (v8)
    goto LABEL_138;
LABEL_141:
  if (v9)
  {
    if (*v9 == 2)
      this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
    else
      *v9 -= 2;
  }
LABEL_145:
  v51 = v93;
  if (HIDWORD(v94))
  {
    v52 = 8 * HIDWORD(v94);
    do
    {
      this = *(_QWORD *)v51;
      *(_QWORD *)v51 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v51 = (WTF *)((char *)v51 + 8);
      v52 -= 8;
    }
    while (v52);
    v51 = v93;
  }
  if (v95 != (_BYTE *)v51 && v51 != 0)
  {
    v93 = 0;
    LODWORD(v94) = 0;
    return WTF::fastFree(v51, a2);
  }
  return this;
}

void WebCore::CSSPropertyParserHelpers::consumePaintStroke(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v7;
  WebCore::CSSParserTokenRange *v8;
  int *v9;
  __int128 *v10;
  int *v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  int *v19;
  int *v20;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  v12 = *((_DWORD *)v7 + 4);
  if (v12 < 0)
  {
    v12 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v12;
  }
  if ((unsigned __int16)v12 != 6)
  {
LABEL_3:
    WebCore::CSSPropertyParserHelpers::consumeURL(this, a2, &v20);
    v9 = v20;
    if (v20)
    {
      v10 = *this;
      if (*this >= this[1])
      {
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v10 & 0x3F) != 0)
        goto LABEL_6;
      v15 = *((_DWORD *)v10 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
        *((_DWORD *)v10 + 4) = v15;
      }
      if ((unsigned __int16)v15 != 6)
      {
LABEL_6:
        v18 = 1792;
        WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)this, (uint64_t)a2, &v18, &v19);
      }
      else
      {
        WebCore::CSSPropertyParserHelpers::consumeIdent(this, v8, &v19);
      }
      v11 = v19;
      if (v19)
      {
        v16 = WTF::fastCompactMalloc((WTF *)0x38);
        *(_DWORD *)v16 = 2;
        v17 = (*(unsigned __int8 *)(v16 + 6) << 16) & 0xFC0000;
        *(_DWORD *)(v16 + 8) = 2;
        *(_WORD *)(v16 + 4) = -10240;
        *(_BYTE *)(v16 + 6) = BYTE2(v17) | 1;
        *(_QWORD *)(v16 + 16) = v9;
        *(_QWORD *)(v16 + 24) = v11;
        *a3 = (int *)v16;
      }
      else
      {
        *a3 = v9;
      }
    }
    else
    {
      LOWORD(v19) = 1792;
      WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)this, (uint64_t)a2, &v19, a3);
    }
  }
  else
  {
    v13 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    if ((v13 & 0xFF0000) == 0)
    {
      v14 = 0;
      goto LABEL_19;
    }
    if ((unsigned __int16)v13 < 0x48Eu)
    {
      v14 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v13 + 3088];
      *v14 += 2;
LABEL_19:
      *a3 = v14;
      return;
    }
    __break(0xC471u);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumePaintOrder@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  unint64_t v5;
  __int128 *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  __int128 *v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  WTF *v23;
  unsigned int v24;
  int v25;
  uint64_t result;
  int *v27;
  int v28;
  int *v29;
  int *v30;
  int v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v41;
  int v42;
  unsigned int v43;
  _BYTE v44[32];
  int *v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  _QWORD v49[4];
  WTF *v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *this;
  v5 = (unint64_t)this[1];
  v7 = &dword_1ECE90000;
  if ((unint64_t)*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v25 = *((_DWORD *)v6 + 4);
    if (v25 < 0)
    {
      v25 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      v7 = &dword_1ECE90000;
      *((_DWORD *)v6 + 4) = v25;
    }
    if ((unsigned __int16)v25 == 90)
    {
      result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((result & 0xFF0000) != 0)
      {
        if ((unsigned __int16)result >= 0x48Eu)
        {
          __break(0xC471u);
          goto LABEL_110;
        }
        v27 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
        *v27 += 2;
      }
      else
      {
        v27 = 0;
      }
      *a3 = v27;
      return result;
    }
    v5 = (unint64_t)this[1];
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v50 = (WTF *)&v52;
  v51 = 3;
  v11 = *this;
  v12 = WebCore::staticCSSValuePool;
  do
  {
    LOWORD(v46) = 0;
    if ((unint64_t)v11 >= v5)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v7[312] & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        *((_BYTE *)v7 + 1248) = 1;
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
      goto LABEL_49;
    v13 = *((_DWORD *)v11 + 4);
    if (v13 < 0)
    {
      v14 = v12;
      v15 = v7;
      v13 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
      v7 = v15;
      v12 = v14;
      *((_DWORD *)v11 + 4) = v13;
    }
    LOWORD(v46) = v13;
    if ((unsigned __int16)v13 == 893)
    {
      if (v10)
        goto LABEL_49;
      v16 = v7;
      v20 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((v20 & 0xFF0000) != 0)
      {
        if ((unsigned __int16)v20 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958D3A28);
        }
        v18 = &v12[4 * (unsigned __int16)v20 + 3088];
        v10 = v18;
        goto LABEL_25;
      }
      v10 = 0;
    }
    else if ((unsigned __int16)v13 == 654)
    {
      if (v9)
        goto LABEL_49;
      v16 = v7;
      v19 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((v19 & 0xFF0000) != 0)
      {
        if ((unsigned __int16)v19 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958D3A48);
        }
        v18 = &v12[4 * (unsigned __int16)v19 + 3088];
        v9 = v18;
        goto LABEL_25;
      }
      v9 = 0;
    }
    else
    {
      if ((unsigned __int16)v13 != 653 || v8)
        goto LABEL_49;
      v16 = v7;
      v17 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((v17 & 0xFF0000) != 0)
      {
        if ((unsigned __int16)v17 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958D3A08);
        }
        v18 = &v12[4 * (unsigned __int16)v17 + 3088];
        v8 = v18;
LABEL_25:
        *v18 += 2;
        goto LABEL_26;
      }
      v8 = 0;
    }
LABEL_26:
    v21 = HIDWORD(v51);
    if (HIDWORD(v51) == (_DWORD)v51)
    {
      v22 = WTF::Vector<WebCore::CSSValueID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v50, HIDWORD(v51) + 1, (unint64_t)&v46);
      v21 = HIDWORD(v51);
      v23 = v50;
      *((_WORD *)v50 + HIDWORD(v51)) = *(_WORD *)v22;
    }
    else
    {
      v23 = v50;
      *((_WORD *)v50 + HIDWORD(v51)) = (_WORD)v46;
    }
    v7 = v16;
    v24 = v21 + 1;
    HIDWORD(v51) = v21 + 1;
    v11 = *this;
    v5 = (unint64_t)this[1];
  }
  while (*this != (__int128 *)v5);
  if (!v24)
  {
    __break(0xC471u);
LABEL_110:
    JUMPOUT(0x1958D39E8);
  }
  v28 = *(unsigned __int16 *)v23;
  v46 = (WTF *)v49;
  v47 = 4;
  switch(v28)
  {
    case 653:
      v30 = 0;
      v29 = v9;
      goto LABEL_70;
    case 893:
      v49[0] = v10;
      if (v24 < 2)
      {
        v10 = 0;
      }
      else
      {
        v10 = 0;
        if (*((_WORD *)v23 + 1) == 654)
        {
          v30 = v8;
          v29 = 0;
          goto LABEL_73;
        }
      }
      v31 = 1;
      v30 = v8;
      v29 = v9;
LABEL_78:
      v41 = (WTF *)v44;
      v42 = 4;
      memcpy(v44, v49, (8 * v31));
      v48 = 0;
      v43 = v31;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v41, (uint64_t *)&v45);
      *a3 = v45;
      if (v43)
      {
        v32 = v41;
        v33 = 8 * v43;
        do
        {
          v34 = *(_DWORD **)v32;
          *(_QWORD *)v32 = 0;
          if (v34)
          {
            if (*v34 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, a2);
            else
              *v34 -= 2;
          }
          v32 = (WTF *)((char *)v32 + 8);
          v33 -= 8;
        }
        while (v33);
      }
      v35 = v41;
      if (v44 != (_BYTE *)v41 && v41 != 0)
      {
        v41 = 0;
        v42 = 0;
        WTF::fastFree(v35, a2);
      }
      v37 = v46;
      if (v48)
      {
        v38 = 8 * v48;
        do
        {
          v39 = *(_DWORD **)v37;
          *(_QWORD *)v37 = 0;
          if (v39)
          {
            if (*v39 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, a2);
            else
              *v39 -= 2;
          }
          v37 = (WTF *)((char *)v37 + 8);
          v38 -= 8;
        }
        while (v38);
        v37 = v46;
      }
      if (v49 != (_QWORD *)v37 && v37 != 0)
      {
        v46 = 0;
        v47 = 0;
        WTF::fastFree(v37, a2);
      }
      v8 = v30;
      v9 = v29;
      if (v10)
        goto LABEL_50;
      break;
    case 654:
      v29 = 0;
      v30 = v8;
      v8 = v9;
LABEL_70:
      v49[0] = v8;
      if (v24 >= 2 && *((_WORD *)v23 + 1) == 893)
      {
        v9 = v10;
LABEL_73:
        v10 = 0;
        v49[1] = v9;
        v31 = 2;
      }
      else
      {
        v31 = 1;
      }
      goto LABEL_78;
    default:
LABEL_49:
      *a3 = 0;
      if (v10)
      {
LABEL_50:
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
        else
          *v10 -= 2;
      }
      break;
  }
  if (!v9)
  {
LABEL_56:
    if (!v8)
      goto LABEL_62;
LABEL_57:
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
    else
      *v8 -= 2;
    goto LABEL_62;
  }
  if (*v9 != 2)
  {
    *v9 -= 2;
    goto LABEL_56;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
  if (v8)
    goto LABEL_57;
LABEL_62:
  result = (uint64_t)v50;
  if (&v52 != (uint64_t *)v50)
  {
    if (v50)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::isFlexBasisIdent(int a1)
{
  _BOOL4 v1;

  v1 = (a1 - 547) < 9;
  if (a1 == 599)
    v1 = 1;
  return a1 == 394 || v1;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeStrokeDasharray@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v5;
  WTF::StringImpl *v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int *v12;
  int *v13;
  _BYTE *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t result;
  int *v18;
  int v19;
  int *v20;
  int v21;
  _BYTE *v22;
  int v23;
  int v24;
  _BYTE v25[32];
  int *v26;
  int *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE v30[32];

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) == 0)
  {
    v19 = *((_DWORD *)v5 + 4);
    if (v19 < 0)
    {
      v19 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = v19;
    }
    if ((unsigned __int16)v19 == 6)
    {
      result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((result & 0xFF0000) != 0)
      {
        if ((unsigned __int16)result >= 0x48Eu)
        {
          result = 92;
          __break(0xC471u);
          return result;
        }
        v20 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
        *v20 += 2;
      }
      else
      {
        v20 = 0;
      }
      *a3 = v20;
      return result;
    }
  }
  v28 = v30;
  v29 = 4;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, 0, 1u, 1, 1, 0, 0, (uint64_t *)&v27);
    if (v27)
      goto LABEL_10;
    WebCore::CSSPropertyParserHelpers::consumeNumber(this, (void *)1, &v26);
    v8 = (uint64_t)v26;
    v7 = v27;
    v26 = 0;
    v27 = (int *)v8;
    if (v7)
    {
      v9 = *v7 - 2;
      if (*v7 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
        v7 = v26;
        v26 = 0;
        if (!v7)
          goto LABEL_8;
        v9 = *v7 - 2;
        if (*v7 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v6);
          goto LABEL_8;
        }
      }
      *v7 = v9;
LABEL_8:
      v8 = (uint64_t)v27;
    }
    if (!v8)
    {
      *a3 = 0;
      return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v6);
    }
LABEL_10:
    if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(this, v6) && *this == this[1])
    {
      v18 = v27;
      *a3 = 0;
      v27 = 0;
      if (v18)
      {
        if (*v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v6);
        else
          *v18 -= 2;
      }
      return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v6);
    }
    v10 = (uint64_t)v27;
    v26 = v27;
    v27 = 0;
    v11 = HIDWORD(v29);
    if (HIDWORD(v29) == (_DWORD)v29)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v28, (uint64_t *)&v26);
    }
    else
    {
      v26 = 0;
      *(_QWORD *)&v28[8 * HIDWORD(v29)] = v10;
      HIDWORD(v29) = v11 + 1;
    }
    v12 = v26;
    v26 = 0;
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v6);
      else
        *v12 -= 2;
    }
    v13 = v27;
    v27 = 0;
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v6);
      else
        *v13 -= 2;
    }
  }
  while (*this != this[1]);
  v22 = v25;
  v23 = 4;
  v14 = v28;
  if (v28 == v30)
  {
    v15 = HIDWORD(v29);
    memcpy(v25, v30, 8 * HIDWORD(v29));
  }
  else
  {
    v28 = v30;
    v22 = v14;
    v21 = v29;
    v15 = HIDWORD(v29);
    LODWORD(v29) = 4;
    v23 = v21;
  }
  HIDWORD(v29) = 0;
  v24 = v15;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v22, (uint64_t *)&v27);
  *a3 = v27;
  WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v16);
  return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v6);
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeAttr(WTF::StringImpl *result, __int128 *a2, __int128 *a3, uint64_t a4)
{
  WTF::StringImpl *v5;
  __int128 *v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  __int128 *v14;
  __int128 *v15;

  v5 = result;
  v14 = a2;
  v15 = a3;
  if (a3 <= a2)
  {
    a2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)a2 & 0x3F) != 0)
  {
    *(_QWORD *)result = 0;
  }
  else
  {
    v6 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v14);
    v7 = *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32);
    if ((*(_WORD *)(a4 + 51) & 1) != 0)
    {
      v11 = *((_QWORD *)v6 + 1);
      v12 = v7;
      result = (WTF::StringImpl *)WTF::StringView::convertToASCIILowercaseAtom((WTF::StringView *)&v11);
    }
    else
    {
      v11 = *((_QWORD *)v6 + 1);
      v12 = v7;
      result = (WTF::StringImpl *)WTF::StringView::toAtomString((WTF::StringView *)&v11, &v13);
    }
    v9 = v13;
    if (v14 == v15)
    {
      if (v13)
        *(_DWORD *)v13 += 2;
      v10 = v9;
      WebCore::CSSPrimitiveValue::createAttr((_DWORD **)&v10, &v11);
      result = v10;
      *(_QWORD *)v5 = v11;
      v10 = 0;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeContent(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&)::$_0::operator()(int ***a1, uint64_t a2, char a3)
{
  __int128 **v6;
  WTF::StringImpl *v7;
  int *v8;
  int *v9;
  WebCore::CSSParserTokenRange *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 **v13;
  int *v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  char v18;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  unsigned int v23;
  int *v24;
  WebCore::CSSParserTokenRange *v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  WebCore::CSSParserTokenRange *v29;
  __int128 *v30;
  __int128 *v31;
  int v32;
  int *v33;
  WebCore::CSSParserTokenRange *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t result;
  int *v48;

  v6 = (__int128 **)*a1;
  while (1)
  {
    WebCore::CSSPropertyParserHelpers::consumeString((uint64_t)v6, &v48);
    v8 = v48;
    if ((a3 & 1) != 0)
    {
      if (v48)
        goto LABEL_38;
    }
    else
    {
      if (v48)
        goto LABEL_38;
      WebCore::CSSPropertyParserHelpers::consumeImage((WTF::StringImpl *)&v48, (__int128 **)*a1, (uint64_t)a1[1], 13);
      v8 = v48;
      if (v48)
        goto LABEL_38;
      v13 = (__int128 **)*a1;
      v15 = (__int128 *)**a1;
      v14 = (*a1)[1];
      if (v15 >= (__int128 *)v14)
      {
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_BYTE *)v15 & 0x3F) == 0)
      {
        v16 = *v13;
        if (*v13 >= (__int128 *)v14)
        {
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_DWORD *)v16 & 0x3F) == 0)
        {
          v17 = *((_DWORD *)v16 + 4);
          if (v17 < 0)
          {
            v17 = WebCore::cssValueKeywordID(*((_QWORD *)v16 + 1), *((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32));
            *((_DWORD *)v16 + 4) = v17;
          }
          v18 = 1;
          if ((unsigned __int16)v17 - 454 <= 0x1C && ((1 << (v17 + 58)) & 0x16000001) != 0)
          {
            v21 = *v13;
            v20 = v13[1];
            if (*v13 == v20)
            {
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              }
              v22 = *v13;
              v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            else
            {
              v22 = (__int128 *)((char *)v21 + 24);
              *v13 = (__int128 *)((char *)v21 + 24);
            }
            while (1)
            {
              if (v22 < v20 || (v18 & 1) != 0)
              {
                if (v22 >= v20)
                  v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                v23 = *(_DWORD *)v22;
              }
              else
              {
                v23 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v23;
                v18 = 1;
              }
              if ((v23 & 0x3F) != 0x10)
                break;
              v22 = (__int128 *)((char *)*v13 + 24);
              *v13 = v22;
            }
            if ((*(_DWORD *)v21 & 0x3F) != 0)
            {
              LOWORD(v46) = 0;
            }
            else
            {
              v46 = *((_DWORD *)v21 + 4);
              if (v46 < 0)
              {
                v46 = WebCore::cssValueKeywordID(*((_QWORD *)v21 + 1), *((unsigned int *)v21 + 1) | ((unint64_t)((*(_DWORD *)v21 >> 22) & 1) << 32));
                *((_DWORD *)v21 + 4) = v46;
              }
              if ((unsigned __int16)v46 >= 0x48Eu)
              {
                result = 92;
                __break(0xC471u);
                return result;
              }
            }
            v8 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v46 + 3088];
            *v8 += 2;
            goto LABEL_38;
          }
        }
      }
    }
    v9 = **a1;
    if (v9 >= (*a1)[1])
    {
      v9 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v9 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if (WebCore::CSSParserToken::functionId(v9) == 783)
    {
      v11 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)*a1, v10);
      WebCore::CSSPropertyParserHelpers::consumeAttr((WTF::StringImpl *)&v48, v11, v12, (uint64_t)a1[1]);
      goto LABEL_37;
    }
    if ((a3 & 1) != 0)
      return 0;
    v24 = **a1;
    if (v24 >= (*a1)[1])
    {
      v24 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v24 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if (WebCore::CSSParserToken::functionId(v24) != 784)
      break;
    v26 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)*a1, v25);
    v28 = v27;
    v29 = (WebCore::CSSParserTokenRange *)a1[1];
    v30 = (__int128 *)v26;
    v31 = v28;
    v32 = 0;
LABEL_36:
    WebCore::CSSPropertyParserHelpers::consumeCounterContent((uint64_t *)&v48, v30, v31, v32, v29);
LABEL_37:
    v8 = v48;
    if (!v48)
      return 0;
LABEL_38:
    v48 = v8;
    v38 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v38 == *(_DWORD *)(a2 + 8))
    {
      v43 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v38 + 1, (unint64_t)&v48);
      v38 = *(unsigned int *)(a2 + 12);
      v44 = *(_QWORD *)a2;
      v45 = *v43;
      *v43 = 0;
      *(_QWORD *)(v44 + 8 * v38) = v45;
    }
    else
    {
      v39 = *(_QWORD *)a2;
      v48 = 0;
      *(_QWORD *)(v39 + 8 * v38) = v8;
    }
    *(_DWORD *)(a2 + 12) = v38 + 1;
    v40 = v48;
    v48 = 0;
    if (!v40)
      goto LABEL_43;
    if (*v40 != 2)
    {
      *v40 -= 2;
LABEL_43:
      if ((a3 & 1) != 0)
        goto LABEL_50;
      goto LABEL_44;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v7);
    if ((a3 & 1) != 0)
      goto LABEL_50;
LABEL_44:
    v41 = (__int128 *)**a1;
    v42 = (__int128 *)(*a1)[1];
    if (v41 != v42)
    {
      if (v41 >= v42)
      {
        v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v41 & 0x3F) == 6 && *((_WORD *)v41 + 8) == 47)
        return 1;
    }
LABEL_50:
    v6 = (__int128 **)*a1;
    if (**a1 == (*a1)[1])
      return 1;
  }
  v33 = **a1;
  if (v33 >= (*a1)[1])
  {
    v33 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v33 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
  }
  if (WebCore::CSSParserToken::functionId(v33) == 785)
  {
    v35 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)*a1, v34);
    v37 = v36;
    v29 = (WebCore::CSSParserTokenRange *)a1[1];
    v30 = (__int128 *)v35;
    v31 = v37;
    v32 = 1;
    goto LABEL_36;
  }
  return 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeScrollSnapAlign@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  const WebCore::CSSPrimitiveValue *v6;
  const WTF::StringImpl *v7;
  WebCore::CSSPrimitiveValue *v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;
  WebCore::CSSPrimitiveValue *v12;
  const WebCore::CSSPrimitiveValue *v13;

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6,(WebCore::CSSValueID)500,(WebCore::CSSValueID)260,(WebCore::CSSValueID)501>((uint64_t)&v13, (uint64_t)this);
  v6 = v13;
  if (v13)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6,(WebCore::CSSValueID)500,(WebCore::CSSValueID)260,(WebCore::CSSValueID)501>((uint64_t)&v12, (uint64_t)this);
    v8 = v12;
    if (v12 && (WebCore::CSSPrimitiveValue::equals(v12, v6, v7) & 1) == 0)
    {
      result = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)result = 2;
      v11 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
      *(_DWORD *)(result + 8) = 2;
      *(_WORD *)(result + 4) = -10240;
      *(_BYTE *)(result + 6) = BYTE2(v11) | 1;
      *(_QWORD *)(result + 16) = v6;
      *(_QWORD *)(result + 24) = v8;
      *a2 = result;
    }
    else
    {
      result = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)result = 2;
      v10 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
      *(_DWORD *)(result + 8) = 1;
      *(_WORD *)(result + 4) = -10240;
      *(_BYTE *)(result + 6) = (v10 | 0x10000u) >> 16;
      *(_QWORD *)(result + 16) = v6;
      *a2 = result;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v9);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6,(WebCore::CSSValueID)500,(WebCore::CSSValueID)260,(WebCore::CSSValueID)501>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  BOOL v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 500 >= 2
    && ((unsigned __int16)result != 260 ? (v8 = (unsigned __int16)result == 6) : (v8 = 1), !v8))
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v10 = *(__int128 **)a2;
    v9 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v9)
    {
      v12 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v11 = *(__int128 **)a2;
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v11 = (__int128 *)((char *)v10 + 24);
      *(_QWORD *)a2 = (char *)v10 + 24;
    }
    while (1)
    {
      if ((unint64_t)v11 < v9 || (v12 & 1) != 0)
      {
        if ((unint64_t)v11 >= v9)
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v13 = *(_DWORD *)v11;
      }
      else
      {
        v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
        v12 = 1;
      }
      if ((v13 & 0x3F) != 0x10)
        break;
      v11 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v11;
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v10 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
        *((_DWORD *)v10 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D46F0);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeScrollSnapType@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  int v14;
  int *v15;
  unint64_t v16;
  __int128 *v17;
  int *v18;
  __int128 *v19;
  int *v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  char v27;
  unsigned int v28;
  int v29;
  int v30;
  __int128 *v31;

  v3 = this;
  v6 = *(__int128 **)this;
  v5 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
    goto LABEL_5;
  v7 = *(__int128 **)this;
  if (*(_QWORD *)this >= v5)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_5;
  this = *((unsigned int *)v7 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = this;
  }
  if ((unsigned __int16)this > 0x1C4u)
  {
    if ((unsigned __int16)this - 998 >= 2 && (unsigned __int16)this != 453)
    {
LABEL_5:
      *a2 = 0;
      return this;
    }
  }
  else if ((unsigned __int16)this - 366 >= 2 && (unsigned __int16)this != 6)
  {
    goto LABEL_5;
  }
  v10 = *(__int128 **)v3;
  v9 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 == v9)
  {
    v12 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v11 = *(__int128 **)v3;
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v11 = (__int128 *)((char *)v10 + 24);
    *(_QWORD *)v3 = (char *)v10 + 24;
  }
  while (1)
  {
    if ((unint64_t)v11 < v9 || (v12 & 1) != 0)
    {
      if ((unint64_t)v11 >= v9)
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v13 = *(_DWORD *)v11;
    }
    else
    {
      v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
      v12 = 1;
    }
    if ((v13 & 0x3F) != 0x10)
      break;
    v11 = (__int128 *)(*(_QWORD *)v3 + 24);
    *(_QWORD *)v3 = v11;
  }
  if ((*(_DWORD *)v10 & 0x3F) != 0)
  {
    LOWORD(v14) = 0;
  }
  else
  {
    v14 = *((_DWORD *)v10 + 4);
    if (v14 < 0)
    {
      v14 = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
      *((_DWORD *)v10 + 4) = v14;
    }
    if ((unsigned __int16)v14 >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958D4A30);
    }
  }
  v15 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v14];
  v15[3088] += 2;
  v17 = *(__int128 **)v3;
  v16 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 >= v16)
  {
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v18 = v15 + 3088;
  if ((*(_BYTE *)v17 & 0x3F) != 0)
    goto LABEL_37;
  v19 = *(__int128 **)v3;
  if (*(_QWORD *)v3 >= v16)
  {
    v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v19 & 0x3F) != 0)
    goto LABEL_37;
  v23 = *((_DWORD *)v19 + 4);
  if (v23 < 0)
  {
    v23 = WebCore::cssValueKeywordID(*((_QWORD *)v19 + 1), *((unsigned int *)v19 + 1) | ((unint64_t)((*(_DWORD *)v19 >> 22) & 1) << 32));
    *((_DWORD *)v19 + 4) = v23;
  }
  if ((unsigned __int16)v23 - 723 > 1)
  {
LABEL_37:
    v20 = 0;
  }
  else
  {
    v25 = *(__int128 **)v3;
    v24 = *(_QWORD *)(v3 + 8);
    if (*(_QWORD *)v3 == v24)
    {
      v26 = *(__int128 **)v3;
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v27 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v26 = *(__int128 **)v3;
      }
    }
    else
    {
      v26 = (__int128 *)((char *)v25 + 24);
      *(_QWORD *)v3 = (char *)v25 + 24;
    }
    while (1)
    {
      if ((unint64_t)v26 < v24 || (v27 & 1) != 0)
      {
        if ((unint64_t)v26 >= v24)
          v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v28 = *(_DWORD *)v26;
      }
      else
      {
        v28 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v28;
        v27 = 1;
      }
      if ((v28 & 0x3F) != 0x10)
        break;
      v26 = (__int128 *)(*(_QWORD *)v3 + 24);
      *(_QWORD *)v3 = v26;
    }
    if ((*(_DWORD *)v25 & 0x3F) != 0)
    {
      LOWORD(v29) = 0;
    }
    else
    {
      v29 = *((_DWORD *)v25 + 4);
      if (v29 < 0)
      {
        v31 = v25;
        v29 = WebCore::cssValueKeywordID(*((_QWORD *)v25 + 1), *((unsigned int *)v25 + 1) | ((unint64_t)((*(_DWORD *)v25 >> 22) & 1) << 32));
        *((_DWORD *)v31 + 4) = v29;
      }
      if ((unsigned __int16)v29 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D4BD8);
      }
    }
    v20 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v29 + 3088];
    *v20 += 2;
    if ((WebCore::staticCSSValuePool[4 * (unsigned __int16)v29 + 3089] & 0x7F) != 0x50
      || LOWORD(WebCore::staticCSSValuePool[4 * (unsigned __int16)v29 + 3090]) != 724)
    {
      this = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)this = 2;
      v30 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000;
      *(_DWORD *)(this + 8) = 2;
      *(_WORD *)(this + 4) = -10240;
      *(_BYTE *)(this + 6) = BYTE2(v30) | 1;
      *(_QWORD *)(this + 16) = v18;
      *(_QWORD *)(this + 24) = v20;
      *a2 = this;
      return this;
    }
  }
  this = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)this = 2;
  v22 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000;
  *(_DWORD *)(this + 8) = 1;
  *(_WORD *)(this + 4) = -10240;
  *(_BYTE *)(this + 6) = (v22 | 0x10000u) >> 16;
  *(_QWORD *)(this + 16) = v18;
  *a2 = this;
  if (v20)
  {
    if (*v20 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v21);
    else
      *v20 -= 2;
  }
  return this;
}

void WebCore::CSSPropertyParserHelpers::consumeScrollbarColor(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int *v12;
  int *v13;
  __int16 v14;
  int *v15;
  int *v16;

  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)this, &v16);
  if (v16)
  {
    *a3 = (uint64_t)v16;
    return;
  }
  LOWORD(v15) = 1792;
  WebCore::CSSPropertyParserHelpers::consumeColor(this, (uint64_t)a2, &v15, &v16);
  if (!v16)
    goto LABEL_13;
  v14 = 1792;
  WebCore::CSSPropertyParserHelpers::consumeColor(this, (uint64_t)a2, &v14, &v15);
  v8 = v15;
  if (v15)
  {
    v9 = v16;
    v15 = 0;
    v16 = 0;
    v10 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v10 = 2;
    v11 = (*(unsigned __int8 *)(v10 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_BYTE *)(v10 + 7) = 0;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(v10 + 16) = v8;
    *(_WORD *)(v10 + 4) = -18432;
    *(_BYTE *)(v10 + 6) = BYTE2(v11);
    *a3 = v10;
    v12 = v15;
    v15 = 0;
    if (v12)
    {
      if (*v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v7);
      else
        *v12 -= 2;
    }
  }
  v13 = v16;
  v16 = 0;
  if (!v13)
  {
LABEL_12:
    if (v8)
      return;
    goto LABEL_13;
  }
  if (*v13 != 2)
  {
    *v13 -= 2;
    goto LABEL_12;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v7);
  if (!v8)
LABEL_13:
    *a3 = 0;
}

int *WebCore::CSSPropertyParserHelpers::consumeScrollbarGutter@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, int **a2@<X8>)
{
  WTF::StringImpl *v5;
  int *result;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  char v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;

  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)this, &v16);
  result = v16;
  if (v16)
  {
    v7 = &WebCore::staticCSSValuePool[4664];
    *v7 += 2;
    *a2 = v7;
    v16 = 0;
    if (*result != 2)
    {
      *result -= 2;
      return result;
    }
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
  }
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)558>((uint64_t)&v16, (uint64_t)this);
  v8 = v16;
  if (v16)
  {
    result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)1014>((uint64_t)&v15, (uint64_t)this);
    v9 = v15;
    if (!v15)
    {
      *a2 = v8;
      return result;
    }
    result = (int *)WTF::fastCompactMalloc((WTF *)0x18);
    *result = 2;
    v10 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
    *((_BYTE *)result + 7) = 1;
    v11 = BYTE2(v10) | 1;
    *((_QWORD *)result + 1) = v8;
    *((_QWORD *)result + 2) = v9;
LABEL_10:
    *((_WORD *)result + 2) = -18432;
    *((_BYTE *)result + 6) = v11;
    *a2 = result;
    return result;
  }
  result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)1014>((uint64_t)&v16, (uint64_t)this);
  v12 = v16;
  if (!v16)
  {
    *a2 = 0;
    return result;
  }
  result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)558>((uint64_t)&v15, (uint64_t)this);
  v13 = v15;
  if (v15)
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x18);
    *result = 2;
    v14 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
    *((_BYTE *)result + 7) = 1;
    v11 = BYTE2(v14) | 1;
    *((_QWORD *)result + 1) = v13;
    *((_QWORD *)result + 2) = v12;
    goto LABEL_10;
  }
  *a2 = 0;
  if (*v12 != 2)
  {
    *v12 -= 2;
    return result;
  }
  result = v12;
  return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)558>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 558)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D50DCLL);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)1014>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 1014)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D5310);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeTextBoxEdge@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  unsigned int v19;
  int v20;
  int *v21;
  __int128 *v22;
  __int128 *v23;
  int *v24;
  __int128 *v25;
  int v26;
  int v27;
  unint64_t v28;
  __int128 *v29;
  __int128 *v30;
  char v31;
  unsigned int v32;
  int v33;
  int *v34;
  int v35;
  __int128 *v36;

  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v10 = *((_DWORD *)v6 + 4);
    if (v10 < 0)
    {
      v10 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v10;
    }
    if ((unsigned __int16)v10 == 662)
    {
      v11 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
      if ((v11 & 0xFF0000) != 0)
      {
        if ((unsigned __int16)v11 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958D58D4);
        }
        v12 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v11 + 3088];
        *v12 += 2;
      }
      else
      {
        v12 = 0;
      }
      result = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)result = 2;
      v13 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
      *(_DWORD *)(result + 8) = 1;
      *(_WORD *)(result + 4) = -10240;
      *(_BYTE *)(result + 6) = (v13 | 0x10000u) >> 16;
      *(_QWORD *)(result + 16) = v12;
      goto LABEL_8;
    }
    v5 = this[1];
  }
  v7 = *this;
  if (*this >= v5)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v7 & 0x3F) != 0)
    goto LABEL_7;
  v8 = *this;
  if (*this >= v5)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_7;
  v14 = *((_DWORD *)v8 + 4);
  if (v14 < 0)
  {
    v14 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v14;
  }
  if ((unsigned __int16)v14 - 663 >= 3 && (unsigned __int16)v14 != 1158 && (unsigned __int16)v14 != 403)
  {
LABEL_7:
    result = 0;
  }
  else
  {
    v16 = *this;
    v15 = (unint64_t)this[1];
    if (*this == (__int128 *)v15)
    {
      v18 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v17 = *this;
      v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v17 = (__int128 *)((char *)v16 + 24);
      *this = (__int128 *)((char *)v16 + 24);
    }
    while (1)
    {
      if ((unint64_t)v17 < v15 || (v18 & 1) != 0)
      {
        if ((unint64_t)v17 >= v15)
          v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v19 = *(_DWORD *)v17;
      }
      else
      {
        v19 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
        v18 = 1;
      }
      if ((v19 & 0x3F) != 0x10)
        break;
      v17 = (__int128 *)((char *)*this + 24);
      *this = v17;
    }
    if ((*(_DWORD *)v16 & 0x3F) != 0)
    {
      LOWORD(v20) = 0;
    }
    else
    {
      v20 = *((_DWORD *)v16 + 4);
      if (v20 < 0)
      {
        v20 = WebCore::cssValueKeywordID(*((_QWORD *)v16 + 1), *((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32));
        *((_DWORD *)v16 + 4) = v20;
      }
      if ((unsigned __int16)v20 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D5708);
      }
    }
    v21 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v20];
    v21[3088] += 2;
    v23 = *this;
    v22 = this[1];
    if (*this >= v22)
    {
      v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v24 = v21 + 3088;
    if ((*(_BYTE *)v23 & 0x3F) != 0)
      goto LABEL_44;
    v25 = *this;
    if (*this >= v22)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v25 & 0x3F) != 0)
      goto LABEL_44;
    v27 = *((_DWORD *)v25 + 4);
    if (v27 < 0)
    {
      v27 = WebCore::cssValueKeywordID(*((_QWORD *)v25 + 1), *((unsigned int *)v25 + 1) | ((unint64_t)((*(_DWORD *)v25 >> 22) & 1) << 32));
      *((_DWORD *)v25 + 4) = v27;
    }
    if ((unsigned __int16)v27 > 0x2D7u)
    {
      if ((unsigned __int16)v27 != 1158 && (unsigned __int16)v27 != 728)
        goto LABEL_44;
    }
    else if ((unsigned __int16)v27 != 403 && (unsigned __int16)v27 != 665)
    {
LABEL_44:
      result = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)result = 2;
      v26 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
      *(_DWORD *)(result + 8) = 1;
      *(_WORD *)(result + 4) = -10240;
      *(_BYTE *)(result + 6) = (v26 | 0x10000u) >> 16;
      *(_QWORD *)(result + 16) = v24;
      goto LABEL_8;
    }
    v29 = *this;
    v28 = (unint64_t)this[1];
    if (*this == (__int128 *)v28)
    {
      v30 = *this;
      v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v31 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v30 = *this;
      }
    }
    else
    {
      v30 = (__int128 *)((char *)v29 + 24);
      *this = (__int128 *)((char *)v29 + 24);
    }
    while (1)
    {
      if ((unint64_t)v30 < v28 || (v31 & 1) != 0)
      {
        if ((unint64_t)v30 >= v28)
          v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v32 = *(_DWORD *)v30;
      }
      else
      {
        v32 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v32;
        v31 = 1;
      }
      if ((v32 & 0x3F) != 0x10)
        break;
      v30 = (__int128 *)((char *)*this + 24);
      *this = v30;
    }
    if ((*(_DWORD *)v29 & 0x3F) != 0)
    {
      LOWORD(v33) = 0;
    }
    else
    {
      v33 = *((_DWORD *)v29 + 4);
      if (v33 < 0)
      {
        v36 = v29;
        v33 = WebCore::cssValueKeywordID(*((_QWORD *)v29 + 1), *((unsigned int *)v29 + 1) | ((unint64_t)((*(_DWORD *)v29 >> 22) & 1) << 32));
        *((_DWORD *)v36 + 4) = v33;
      }
      if ((unsigned __int16)v33 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D58B4);
      }
    }
    v34 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v33 + 3088];
    *v34 += 2;
    result = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)result = 2;
    v35 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
    *(_DWORD *)(result + 8) = 2;
    *(_WORD *)(result + 4) = -10240;
    *(_BYTE *)(result + 6) = BYTE2(v35) | 1;
    *(_QWORD *)(result + 16) = v24;
    *(_QWORD *)(result + 24) = v34;
  }
LABEL_8:
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::complete4Sides<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>(uint64_t result)
{
  _DWORD *v1;
  _DWORD *v2;

  v1 = *(_DWORD **)(result + 8);
  if (!v1)
  {
    v1 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v1 += 2;
    *(_QWORD *)(result + 8) = v1;
  }
  if (!*(_QWORD *)(result + 16))
  {
    v2 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v2 += 2;
    *(_QWORD *)(result + 16) = v2;
  }
  if (!*(_QWORD *)(result + 24))
  {
    if (v1)
      *v1 += 2;
    *(_QWORD *)(result + 24) = v1;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumePathOperation@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, char a3@<W2>, int **a4@<X8>)
{
  __int128 *v8;
  uint64_t result;
  int v10;
  int *v11;

  v8 = *this;
  if (*this >= this[1])
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) == 0)
  {
    v10 = *((_DWORD *)v8 + 4);
    if (v10 < 0)
    {
      v10 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
      *((_DWORD *)v8 + 4) = v10;
    }
    if ((unsigned __int16)v10 == 6)
      return WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a4);
  }
  result = WebCore::CSSPropertyParserHelpers::consumeURL(this, a2, &v11);
  if (!v11)
    return WebCore::CSSPropertyParserHelpers::consumeBasicShapeRayOrBox(a4, (WebCore::CSSPropertyParsing *)this, (uint64_t)a2, a3);
  *a4 = v11;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapeRayOrBox(_QWORD *a1, WebCore::CSSPropertyParsing *this, uint64_t a3, char a4)
{
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  _BYTE *v12;
  WTF::StringImpl *v13;
  int *v15;
  int v16;
  int *v17;
  int v18;
  _BYTE *v19;
  int v20;
  int v21;
  _BYTE v22[32];
  int *v23;
  _QWORD v24[2];
  _BYTE *v25;
  uint64_t v26;
  _BYTE v27[39];
  char v28;

  v6 = 0;
  v7 = 0;
  v28 = a4;
  v24[0] = &v28;
  v24[1] = a3;
  v25 = v27;
  v26 = 4;
LABEL_2:
  v8 = (uint64_t)v7;
  v9 = v6;
  while (1)
  {
    v6 = v9;
    if (*(_QWORD *)this == *((_QWORD *)this + 1))
      break;
    if (!v9)
    {
      WebCore::CSSPropertyParserHelpers::consumeBasicShapeRayOrBox(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::PathParsingOption>)::$_0::operator()(&v23, (uint64_t)v24, (uint64_t)this);
      v9 = v23;
      if (v23)
        continue;
    }
    if (!v8)
    {
      WebCore::CSSPropertyParsing::consumeGeometryBox((uint64_t)this, &v23);
      v7 = v23;
      if (v23)
        goto LABEL_2;
    }
    break;
  }
  if (v6)
  {
    v23 = v6;
    v10 = HIDWORD(v26);
    if (HIDWORD(v26) == (_DWORD)v26)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v25, (unint64_t)&v23);
      v15 = v23;
      v23 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, this);
        else
          *v15 -= 2;
      }
    }
    else
    {
      *(_QWORD *)&v25[8 * HIDWORD(v26)] = v6;
      HIDWORD(v26) = v10 + 1;
    }
  }
  if (v8
    && (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F87F) != 0x50
     || !v6
     || *(_WORD *)(v8 + 8) != 598))
  {
    v23 = (int *)v8;
    v16 = HIDWORD(v26);
    if (HIDWORD(v26) == (_DWORD)v26)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v25, (unint64_t)&v23);
      v17 = v23;
      v23 = 0;
      if (v17)
      {
        if (*v17 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, this);
        else
          *v17 -= 2;
      }
    }
    else
    {
      *(_QWORD *)&v25[8 * HIDWORD(v26)] = v8;
      HIDWORD(v26) = v16 + 1;
    }
    v8 = 0;
  }
  v11 = HIDWORD(v26);
  if (HIDWORD(v26))
  {
    v19 = v22;
    v20 = 4;
    v12 = v25;
    if (v25 == v27)
    {
      memcpy(v22, v27, 8 * HIDWORD(v26));
    }
    else
    {
      v25 = v27;
      v19 = v12;
      v18 = v26;
      LODWORD(v26) = 4;
      v20 = v18;
    }
    HIDWORD(v26) = 0;
    v21 = v11;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v19, (uint64_t *)&v23);
    *a1 = v23;
    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v13);
  }
  else
  {
    *a1 = 0;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v8, this);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, this);
}

int *WebCore::CSSPropertyParserHelpers::consumePath@<X0>(int *this@<X0>, int **a2@<X8>)
{
  __int128 **v4;
  unint64_t v6;
  __int128 *v7;
  int *v8;
  WebCore::CSSParserTokenRange *v9;
  __int128 *v10;
  WTF::StringImpl *v11;
  int *v12;
  __int128 *v13;
  __int128 *v14;

  v4 = (__int128 **)this;
  v7 = *(__int128 **)this;
  v6 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 1)
    goto LABEL_9;
  v8 = *(int **)this;
  if ((unint64_t)*v4 >= v6)
  {
    v8 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  this = WebCore::CSSParserToken::functionId(v8);
  if ((_DWORD)this == 862
    && (v13 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(v4, v9),
        v14 = v10,
        WebCore::CSSPropertyParserHelpers::consumeBasicShapePath((uint64_t)&v12, &v13, 0),
        (this = v12) != 0))
  {
    if (v13 == v14)
    {
      *a2 = v12;
    }
    else
    {
      *a2 = 0;
      if (*this == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v11);
      else
        *this -= 2;
    }
  }
  else
  {
LABEL_9:
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapePath(uint64_t result, __int128 **a2, char a3)
{
  _QWORD *v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  __int128 *v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  void *v15;
  int v16;
  WTF *v17;
  WTF *v18;
  WTF *v19;
  __int128 *v20;
  __int128 *v21;
  char v22;
  unsigned int v23;
  int v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  char v39;

  v5 = (_QWORD *)result;
  v7 = *a2;
  v6 = a2[1];
  if (*a2 >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = *((unsigned int *)v7 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      *((_DWORD *)v7 + 4) = result;
    }
    if ((unsigned __int16)result - 719 >= 2)
    {
      v8 = 0;
      v6 = a2[1];
    }
    else
    {
      if ((a3 & 2) != 0)
        goto LABEL_68;
      v20 = *a2;
      v6 = a2[1];
      if (*a2 == v6)
      {
        v22 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        v21 = *a2;
        v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v21 = (__int128 *)((char *)v20 + 24);
        *a2 = (__int128 *)((char *)v20 + 24);
      }
      while (1)
      {
        if (v21 < v6 || (v22 & 1) != 0)
        {
          if (v21 >= v6)
            v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v23 = *(_DWORD *)v21;
        }
        else
        {
          v23 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v23;
          v22 = 1;
        }
        if ((v23 & 0x3F) != 0x10)
          break;
        v21 = (__int128 *)((char *)*a2 + 24);
        *a2 = v21;
      }
      if ((*(_DWORD *)v20 & 0x3F) != 0)
      {
        v24 = 0;
      }
      else
      {
        result = *((unsigned int *)v20 + 4);
        if ((result & 0x80000000) != 0)
        {
          result = WebCore::cssValueKeywordID(*((_QWORD *)v20 + 1), *((unsigned int *)v20 + 1) | ((unint64_t)((*(_DWORD *)v20 >> 22) & 1) << 32));
          *((_DWORD *)v20 + 4) = result;
          v6 = a2[1];
        }
        v24 = (unsigned __int16)result;
      }
      v8 = v24 == 720;
      v25 = *a2;
      if (*a2 >= v6)
      {
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v25 & 0x3F) != 0x15)
        goto LABEL_68;
      v26 = *a2;
      if (*a2 == v6)
      {
        v28 = 1;
        v27 = v6;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v27 = *a2;
        }
      }
      else
      {
        v27 = (__int128 *)((char *)v26 + 24);
        *a2 = (__int128 *)((char *)v26 + 24);
      }
      while (1)
      {
        if (v27 < v6 || (v28 & 1) != 0)
        {
          if (v27 >= v6)
            v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v29 = *(_DWORD *)v27;
        }
        else
        {
          v29 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
          v28 = 1;
        }
        if ((v29 & 0x3F) != 0x10)
          break;
        v27 = (__int128 *)((char *)*a2 + 24);
        *a2 = v27;
      }
    }
  }
  v9 = *a2;
  if (*a2 >= v6)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) != 0x1C)
  {
LABEL_68:
    *v5 = 0;
    return result;
  }
  v37 = 0;
  {
    v10 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
  }
  else
  {
    xmmword_1EE2DFB60 = 0u;
    unk_1EE2DFB70 = 0u;
    xmmword_1EE2DFB40 = 0u;
    unk_1EE2DFB50 = 0u;
    WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
    *(_OWORD *)&dword_1EE2DFB30 = 0u;
    v6 = a2[1];
    v10 = 2;
  }
  LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v10;
  v38 = (WTF *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton;
  v11 = *a2;
  if (*a2 == v6)
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v13 = 1;
    {
      v12 = v6;
    }
    else
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = *a2;
    }
  }
  else
  {
    v12 = (__int128 *)((char *)v11 + 24);
    *a2 = (__int128 *)((char *)v11 + 24);
  }
  while (1)
  {
    if (v12 < v6 || (v13 & 1) != 0)
    {
      if (v12 >= v6)
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v14 = *(_DWORD *)v12;
    }
    else
    {
      v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
      v13 = 1;
    }
    if ((v14 & 0x3F) != 0x10)
      break;
    v12 = (__int128 *)((char *)*a2 + 24);
    *a2 = v12;
  }
  if (WebCore::buildSVGPathByteStreamFromString(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32), (uint64_t)&v37, 1)&& *((_DWORD *)v38 + 5))
  {
    v34 = 0;
    {
      v16 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
    }
    else
    {
      xmmword_1EE2DFB60 = 0u;
      unk_1EE2DFB70 = 0u;
      xmmword_1EE2DFB40 = 0u;
      unk_1EE2DFB50 = 0u;
      WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
      *(_OWORD *)&dword_1EE2DFB30 = 0u;
      v16 = 2;
    }
    LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v16;
    v35 = v38;
    v38 = (WTF *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton;
    WebCore::CSSPathValue::create((uint64_t)&v34, v8, &v36);
    *v5 = v36;
    v17 = v35;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        v32 = *((unsigned int *)v35 + 22);
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, char *))off_1E339DD30[v32])(&v39, (char *)v35 + 32);
        *((_DWORD *)v17 + 22) = -1;
        v33 = (WTF *)*((_QWORD *)v17 + 1);
        if (v33)
        {
          *((_QWORD *)v17 + 1) = 0;
          *((_DWORD *)v17 + 4) = 0;
          WTF::fastFree(v33, v15);
        }
        WTF::fastFree(v17, v15);
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
    v18 = v34;
    if (v34)
    {
      *((_QWORD *)v34 + 1) = 0;
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v15);
      else
        --*(_DWORD *)v18;
    }
  }
  else
  {
    *v5 = 0;
  }
  v19 = v38;
  v38 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      v30 = *((unsigned int *)v19 + 22);
      if ((_DWORD)v30 != -1)
        ((void (*)(uint64_t *, char *))off_1E339DD30[v30])(&v36, (char *)v19 + 32);
      *((_DWORD *)v19 + 22) = -1;
      v31 = (WTF *)*((_QWORD *)v19 + 1);
      if (v31)
      {
        *((_QWORD *)v19 + 1) = 0;
        *((_DWORD *)v19 + 4) = 0;
        WTF::fastFree(v31, v15);
      }
      WTF::fastFree(v19, v15);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  result = (uint64_t)v37;
  if (v37)
  {
    *((_QWORD *)v37 + 1) = 0;
    v37 = 0;
    if (*(_DWORD *)result == 1)
      return WTF::fastFree((WTF *)result, v15);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeShapeOutside@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::StringImpl *a3@<X8>)
{
  WTF *result;
  WTF::StringImpl *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int *v14;
  unsigned int v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  WTF *v33;
  int v34;
  unsigned int v35;
  _BYTE v36[32];
  int *v37;
  int *v38;
  int *v39;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[32];

  result = (WTF *)WebCore::CSSPropertyParserHelpers::consumeImageOrNone(this, a2, 13, a3);
  if (*(_QWORD *)a3)
    return result;
  v40 = (WTF *)v42;
  v41 = 4;
  WebCore::CSSPropertyParsing::consumeShapeBox((uint64_t)this, &v39);
  WebCore::CSSPropertyParserHelpers::consumeBasicShape(&v38, (__int128 *)this, a2, 0);
  v9 = v38;
  if (!v38)
    goto LABEL_13;
  if (((*((unsigned __int16 *)v38 + 2) | (*((unsigned __int8 *)v38 + 6) << 16)) & 0x3F800) != 0x16800)
  {
    v37 = v38;
    LODWORD(v10) = HIDWORD(v41);
    if (HIDWORD(v41) == (_DWORD)v41)
    {
      v29 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v37);
      v10 = HIDWORD(v41);
      v30 = v40;
      v31 = *v29;
      *v29 = 0;
      *((_QWORD *)v30 + v10) = v31;
    }
    else
    {
      v37 = 0;
      *((_QWORD *)v40 + HIDWORD(v41)) = v38;
    }
    HIDWORD(v41) = v10 + 1;
    v11 = v37;
    v37 = 0;
    if (v11)
    {
      if (*v11 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
      else
        *v11 -= 2;
    }
LABEL_13:
    v12 = v39;
    if (v39 || (WebCore::CSSPropertyParsing::consumeShapeBox((uint64_t)this, &v38), v12 = v38, (v39 = v38) != 0))
    {
      if (((*((unsigned __int16 *)v12 + 2) | (*((unsigned __int8 *)v12 + 6) << 16)) & 0x3F87F) != 0x50
        || !v9
        || *((_WORD *)v12 + 4) != 618)
      {
        v38 = v12;
        v39 = 0;
        LODWORD(v13) = HIDWORD(v41);
        if (HIDWORD(v41) == (_DWORD)v41)
        {
          v26 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v38);
          v13 = HIDWORD(v41);
          v27 = v40;
          v28 = *v26;
          *v26 = 0;
          *((_QWORD *)v27 + v13) = v28;
        }
        else
        {
          v38 = 0;
          *((_QWORD *)v40 + HIDWORD(v41)) = v12;
        }
        HIDWORD(v41) = v13 + 1;
        v14 = v38;
        v38 = 0;
        if (v14)
        {
          if (*v14 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v8);
          else
            *v14 -= 2;
        }
      }
    }
    v15 = HIDWORD(v41);
    if (HIDWORD(v41))
    {
      v33 = (WTF *)v36;
      v34 = 4;
      v16 = v40;
      if (v40 == (WTF *)v42)
      {
        memcpy(v36, v42, 8 * HIDWORD(v41));
      }
      else
      {
        v40 = (WTF *)v42;
        v33 = v16;
        v32 = v41;
        LODWORD(v41) = 4;
        v34 = v32;
      }
      HIDWORD(v41) = 0;
      v35 = v15;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v33, (uint64_t *)&v38);
      *(_QWORD *)a3 = v38;
      if (v35)
      {
        v17 = v33;
        v18 = 8 * v35;
        do
        {
          v19 = *(_DWORD **)v17;
          *(_QWORD *)v17 = 0;
          if (v19)
          {
            if (*v19 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v8);
            else
              *v19 -= 2;
          }
          v17 = (WTF *)((char *)v17 + 8);
          v18 -= 8;
        }
        while (v18);
      }
      v20 = v33;
      if (v36 != (_BYTE *)v33 && v33 != 0)
      {
        v33 = 0;
        v34 = 0;
        WTF::fastFree(v20, v8);
      }
    }
    else
    {
      *(_QWORD *)a3 = 0;
    }
    goto LABEL_41;
  }
  *(_QWORD *)a3 = 0;
  if (*v9 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
  else
    *v9 -= 2;
LABEL_41:
  if (v39)
  {
    if (*v39 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v8);
    else
      *v39 -= 2;
  }
  if (HIDWORD(v41))
  {
    v22 = v40;
    v23 = 8 * HIDWORD(v41);
    do
    {
      v24 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (v24)
      {
        if (*v24 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v8);
        else
          *v24 -= 2;
      }
      v22 = (WTF *)((char *)v22 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  result = v40;
  if (v42 != (_BYTE *)v40 && v40 != 0)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    return (WTF *)WTF::fastFree(result, v8);
  }
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeBasicShape(int **a1, __int128 *a2, const WebCore::CSSParserContext *a3, char a4)
{
  int *result;
  int v9;
  WebCore::CSSParserTokenRange *v10;
  __int128 *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;

  v17 = *a2;
  result = (int *)v17;
  if ((unint64_t)v17 >= *((_QWORD *)&v17 + 1))
  {
    LOBYTE(v13) = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v13 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
    }
    if ((v13 & 0x3F) != 1)
      goto LABEL_29;
    result = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else if ((*(_DWORD *)v17 & 0x3F) != 1)
  {
    goto LABEL_29;
  }
  v9 = WebCore::CSSParserToken::functionId(result);
  result = (int *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v17, v10);
  v15 = (__int128 *)result;
  v16 = v11;
  if (v9 == 8)
  {
    WebCore::CSSPropertyParserHelpers::consumeBasicShapeInset((WebCore::CSSPropertyParserHelpers *)&v14, &v15, a3);
  }
  else if (v9 >= 786)
  {
    if (v9 <= 786)
    {
      WebCore::CSSPropertyParserHelpers::consumeBasicShapeRect((WebCore::CSSPropertyParserHelpers *)&v14, &v15, a3);
    }
    else
    {
      switch(v9)
      {
        case 787:
          WebCore::CSSPropertyParserHelpers::consumeBasicShapePolygon((WebCore::CSSPropertyParserHelpers *)&v14, &v15, a3);
          break;
        case 863:
          WebCore::CSSPropertyParserHelpers::consumeBasicShapeXywh((WebCore::CSSPropertyParserHelpers *)&v14, &v15, a3);
          break;
        case 862:
          WebCore::CSSPropertyParserHelpers::consumeBasicShapePath((uint64_t)&v14, &v15, a4);
          break;
        default:
          goto LABEL_29;
      }
    }
  }
  else if (v9 == 273)
  {
    WebCore::CSSPropertyParserHelpers::consumeBasicShapeCircle((WebCore::CSSPropertyParserHelpers *)&v14, &v15, a3);
  }
  else
  {
    if (v9 != 697)
      goto LABEL_29;
    WebCore::CSSPropertyParserHelpers::consumeBasicShapeEllipse((WebCore::CSSPropertyParserHelpers *)&v14, &v15, a3);
  }
  result = v14;
  if (!v14)
  {
LABEL_29:
    *a1 = 0;
    return result;
  }
  if (v15 == v16)
  {
    *a2 = v17;
    *a1 = result;
  }
  else
  {
    *a1 = 0;
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v12);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::isContentPositionKeyword(int a1)
{
  _BOOL4 v2;

  v2 = a1 == 260 || (a1 - 511) < 2;
  return (a1 & 0xFFFE) == 0x1F4 || v2;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeBorderImageOutset@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  _DWORD *v13;
  __int128 v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *result;
  __int128 v20;
  _DWORD *v21;
  _DWORD *v22;
  int *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unsigned __int16 *v27;

  v5 = 0;
  v24 = 0u;
  v25 = 0u;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumeNumber(this, (void *)1, &v27);
    v7 = v27;
    v27 = 0;
    v8 = (unsigned __int16 *)*((_QWORD *)&v24 + v5);
    *((_QWORD *)&v24 + v5) = v7;
    if (!v8)
      goto LABEL_6;
    v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
      v8 = v27;
      v27 = 0;
      if (!v8)
        goto LABEL_5;
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
        goto LABEL_5;
      }
    }
    *(_DWORD *)v8 = v9;
LABEL_5:
    v7 = (unsigned __int16 *)*((_QWORD *)&v24 + v5);
LABEL_6:
    if (v7)
      goto LABEL_16;
    v26 = 0;
    v27 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v27, (uint64_t)&v26, 0x100000100, &v23);
    if (v26)
      WTF::fastFree((WTF *)(v26 - 16), v6);
    if (v27)
      WTF::fastFree((WTF *)(v27 - 8), v6);
    v10 = v23;
    v23 = 0;
    v11 = (int *)*((_QWORD *)&v24 + v5);
    *((_QWORD *)&v24 + v5) = v10;
    if (v11)
    {
      v12 = *v11 - 2;
      if (*v11 != 2)
        goto LABEL_13;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v6);
      v11 = v23;
      v23 = 0;
      if (v11)
      {
        v12 = *v11 - 2;
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v6);
        else
LABEL_13:
          *v11 = v12;
      }
      v10 = (int *)*((_QWORD *)&v24 + v5);
    }
    if (!v10)
      break;
LABEL_16:
    ++v5;
  }
  while (v5 != 4);
  if (!(_QWORD)v24)
  {
    *a2 = 0;
    goto LABEL_50;
  }
  if (!*((_QWORD *)&v24 + 1))
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v24 + 1, (WTF::StringImpl *)&v24);
  if (!(_QWORD)v25)
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v25, (WTF::StringImpl *)&v24);
  v13 = (_DWORD *)*((_QWORD *)&v25 + 1);
  if (!*((_QWORD *)&v25 + 1))
  {
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v25 + 1, (WTF::StringImpl *)((char *)&v24 + 8));
    v13 = (_DWORD *)*((_QWORD *)&v25 + 1);
  }
  v14 = v24;
  v24 = 0uLL;
  v15 = (_DWORD *)v25;
  v25 = 0uLL;
  v20 = v14;
  v21 = v15;
  v22 = v13;
  WebCore::CSSQuadValue::create((uint64_t)&v20, (uint64_t *)&v27);
  *a2 = v27;
  if (!v13)
  {
LABEL_34:
    if (!v15)
      goto LABEL_41;
    goto LABEL_35;
  }
  if (*v13 != 2)
  {
    *v13 -= 2;
    goto LABEL_34;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v6);
  if (v15)
  {
LABEL_35:
    if (*v15 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v6);
    else
      *v15 -= 2;
  }
LABEL_41:
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_44;
  if (**((_DWORD **)&v14 + 1) == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v14 + 1), v6);
    if ((_QWORD)v14)
      goto LABEL_45;
  }
  else
  {
    **((_DWORD **)&v14 + 1) -= 2;
LABEL_44:
    if ((_QWORD)v14)
    {
LABEL_45:
      if (*(_DWORD *)v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v14, v6);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
LABEL_50:
  v16 = (_DWORD *)*((_QWORD *)&v25 + 1);
  *((_QWORD *)&v25 + 1) = 0;
  if (v16)
  {
    if (*v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v6);
    else
      *v16 -= 2;
  }
  v17 = (_DWORD *)v25;
  *(_QWORD *)&v25 = 0;
  if (v17)
  {
    if (*v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v6);
    else
      *v17 -= 2;
  }
  v18 = (_DWORD *)*((_QWORD *)&v24 + 1);
  *((_QWORD *)&v24 + 1) = 0;
  if (v18)
  {
    if (*v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v6);
    else
      *v18 -= 2;
  }
  result = (_DWORD *)v24;
  *(_QWORD *)&v24 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeBorderImageWidth@<X0>(int a1@<W0>, __int128 **a2@<X1>, WebCore::CSSPrimitiveValue **a3@<X8>)
{
  uint64_t v6;
  char v7;
  WebCore::CSSPrimitiveValue **v8;
  WTF::StringImpl *v9;
  WebCore::CSSPrimitiveValue *v10;
  WebCore::CSSPrimitiveValue *v11;
  int v12;
  BOOL isLength;
  WebCore::CSSPrimitiveValue *v14;
  WebCore::CSSPrimitiveValue *v15;
  WebCore::CSSPrimitiveValue *v16;
  int v17;
  _DWORD *v18;
  __int128 v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *result;
  __int128 v25;
  _DWORD *v26;
  _DWORD *v27;
  WebCore::CSSPrimitiveValue *v28;
  __int128 v29;
  __int128 v30;

  v6 = 0;
  v7 = 0;
  v29 = 0u;
  v30 = 0u;
  do
  {
    v8 = (WebCore::CSSPrimitiveValue **)((char *)&v29 + v6);
    WebCore::CSSPropertyParserHelpers::consumeNumber(a2, (void *)1, &v28);
    v10 = v28;
    v28 = 0;
    v11 = *(WebCore::CSSPrimitiveValue **)((char *)&v29 + v6);
    *(_QWORD *)((char *)&v29 + v6) = v10;
    if (!v11)
      goto LABEL_6;
    v12 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v9);
      v11 = v28;
      v28 = 0;
      if (!v11)
        goto LABEL_5;
      v12 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v9);
        goto LABEL_5;
      }
    }
    *(_DWORD *)v11 = v12;
LABEL_5:
    v10 = *v8;
LABEL_6:
    if (v10)
      goto LABEL_22;
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, 0, 1u, 1, 0, 0, 0, (uint64_t *)&v28);
    if (v28)
    {
      isLength = WebCore::CSSPrimitiveValue::isLength(v28);
      WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)((char *)&v29 + v6), (WTF::StringImpl *)&v28);
      v14 = v28;
      v28 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
      v7 |= isLength;
      goto LABEL_22;
    }
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)a2, (int **)&v28);
    v15 = v28;
    v28 = 0;
    v16 = *v8;
    *v8 = v15;
    if (v16)
    {
      v17 = *(_DWORD *)v16 - 2;
      if (*(_DWORD *)v16 != 2)
        goto LABEL_16;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v9);
      v16 = v28;
      v28 = 0;
      if (v16)
      {
        v17 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v9);
        else
LABEL_16:
          *(_DWORD *)v16 = v17;
      }
      v15 = *v8;
    }
    if (!v15)
      break;
LABEL_22:
    v6 += 8;
  }
  while (v6 != 32);
  if (!(_QWORD)v29)
  {
    *a3 = 0;
    goto LABEL_53;
  }
  if (!*((_QWORD *)&v29 + 1))
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v29 + 1, (WTF::StringImpl *)&v29);
  if (!(_QWORD)v30)
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v30, (WTF::StringImpl *)&v29);
  v18 = (_DWORD *)*((_QWORD *)&v30 + 1);
  if (!*((_QWORD *)&v30 + 1))
  {
    WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)&v30 + 1, (WTF::StringImpl *)((char *)&v29 + 8));
    v18 = (_DWORD *)*((_QWORD *)&v30 + 1);
  }
  v19 = v29;
  v29 = 0uLL;
  v20 = (_DWORD *)v30;
  v30 = 0uLL;
  v25 = v19;
  v26 = v20;
  v27 = v18;
  WebCore::CSSBorderImageWidthValue::create((uint64_t)&v25, (a1 == 542) & v7, (uint64_t *)&v28);
  *a3 = v28;
  if (!v18)
  {
LABEL_37:
    if (!v20)
      goto LABEL_44;
    goto LABEL_38;
  }
  if (*v18 != 2)
  {
    *v18 -= 2;
    goto LABEL_37;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v9);
  if (v20)
  {
LABEL_38:
    if (*v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v9);
    else
      *v20 -= 2;
  }
LABEL_44:
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_47;
  if (**((_DWORD **)&v19 + 1) == 2)
  {
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v19 + 1), v9);
    if ((_QWORD)v19)
      goto LABEL_48;
  }
  else
  {
    **((_DWORD **)&v19 + 1) -= 2;
LABEL_47:
    if ((_QWORD)v19)
    {
LABEL_48:
      if (*(_DWORD *)v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v19, v9);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
LABEL_53:
  v21 = (_DWORD *)*((_QWORD *)&v30 + 1);
  *((_QWORD *)&v30 + 1) = 0;
  if (v21)
  {
    if (*v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v9);
    else
      *v21 -= 2;
  }
  v22 = (_DWORD *)v30;
  *(_QWORD *)&v30 = 0;
  if (v22)
  {
    if (*v22 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v9);
    else
      *v22 -= 2;
  }
  v23 = (_DWORD *)*((_QWORD *)&v29 + 1);
  *((_QWORD *)&v29 + 1) = 0;
  if (v23)
  {
    if (*v23 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v9);
    else
      *v23 -= 2;
  }
  result = (_DWORD *)v29;
  *(_QWORD *)&v29 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v9);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeReflect@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  int *v14;
  WTF::StringImpl *v15;
  int v16;
  _DWORD *v17;
  int *v18;
  WTF *v19;
  unint64_t v20;
  __int128 *v21;
  __int128 *v22;
  char v23;
  unsigned int v24;
  int *v25;
  int *v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  WTF *v30;
  int *v31;
  int *v32;
  _DWORD *v33;
  int *v34;

  v5 = this;
  v8 = *(__int128 **)this;
  v7 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this >= v7)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
  {
LABEL_3:
    v9 = *(__int128 **)v5;
    if (*(_QWORD *)v5 >= v7)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_BYTE *)v9 & 0x3F) != 0)
      goto LABEL_7;
    v10 = *(__int128 **)v5;
    if (*(_QWORD *)v5 >= v7)
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0)
      goto LABEL_7;
    this = *((unsigned int *)v10 + 4);
    if ((this & 0x80000000) != 0)
    {
      this = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
      *((_DWORD *)v10 + 4) = this;
    }
    if ((unsigned __int16)this - 258 >= 2
      && (unsigned __int16)this != 450
      && (unsigned __int16)this != 444)
    {
LABEL_7:
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v21 = *(__int128 **)v5;
      v20 = *(_QWORD *)(v5 + 8);
      if (*(_QWORD *)v5 == v20)
      {
        v23 = 1;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        v22 = *(__int128 **)v5;
        v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v22 = (__int128 *)((char *)v21 + 24);
        *(_QWORD *)v5 = (char *)v21 + 24;
      }
      while (1)
      {
        if ((unint64_t)v22 < v20 || (v23 & 1) != 0)
        {
          if ((unint64_t)v22 >= v20)
            v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v24 = *(_DWORD *)v22;
        }
        else
        {
          v24 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v24;
          v23 = 1;
        }
        if ((v24 & 0x3F) != 0x10)
          break;
        v22 = (__int128 *)(*(_QWORD *)v5 + 24);
        *(_QWORD *)v5 = v22;
      }
      if ((*(_DWORD *)v21 & 0x3F) != 0)
      {
        this = 0;
      }
      else
      {
        this = *((unsigned int *)v21 + 4);
        if ((this & 0x80000000) != 0)
        {
          this = WebCore::cssValueKeywordID(*((_QWORD *)v21 + 1), *((unsigned int *)v21 + 1) | ((unint64_t)((*(_DWORD *)v21 >> 22) & 1) << 32));
          *((_DWORD *)v21 + 4) = this;
        }
      }
      v13 = this & 0xFF00;
      v11 = this;
      v12 = 0x10000;
    }
    if (!HIWORD(v12))
      goto LABEL_9;
    if (*(_QWORD *)v5 == *(_QWORD *)(v5 + 8))
    {
      v17 = 0;
      v14 = &dword_1ECE88BE8;
      dword_1ECE88BE8 += 2;
    }
    else
    {
      this = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(v5, *((unsigned __int8 *)a2 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v34);
      v14 = v34;
      if (!v34)
      {
LABEL_9:
        *a3 = 0;
        return this;
      }
      if (*(_QWORD *)v5 != *(_QWORD *)(v5 + 8))
      {
        v33 = 0;
        v34 = 0;
        v31 = 0;
        v32 = 0;
        v30 = 0;
        v16 = WebCore::CSSPropertyParserHelpers::consumeBorderImageComponents(316, (__int128 **)v5, a2, &v34, &v33, &v32, &v31, &v30);
        if ((v16 & 1) != 0)
        {
          WebCore::createBorderImageValue(&v34, (WTF::StringImpl *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v30, (uint64_t *)&v29);
          v17 = v29;
        }
        else
        {
          v17 = 0;
          *a3 = 0;
        }
        v19 = v30;
        v30 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v15);
          else
            *(_DWORD *)v19 -= 2;
        }
        v25 = v31;
        v31 = 0;
        if (v25)
        {
          if (*v25 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v15);
          else
            *v25 -= 2;
        }
        v26 = v32;
        v32 = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v15);
          else
            *v26 -= 2;
        }
        v27 = v33;
        v33 = 0;
        if (v27)
        {
          if (*v27 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v15);
          else
            *v27 -= 2;
        }
        this = (uint64_t)v34;
        v34 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, v15);
            if (v16)
              goto LABEL_70;
LABEL_72:
            if (v17)
            {
              if (*v17 == 2)
                this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v15);
              else
                *v17 -= 2;
            }
            if (*v14 == 2)
              return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v15);
            *v14 -= 2;
            return this;
          }
          *(_DWORD *)this -= 2;
        }
        if (v16)
          goto LABEL_70;
        goto LABEL_72;
      }
      v17 = 0;
    }
LABEL_70:
    this = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)this = 2;
    v28 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000;
    *(_WORD *)(this + 4) = -26624;
    *(_BYTE *)(this + 6) = (v28 | 0x10000u) >> 16;
    *(_WORD *)(this + 8) = v12 | v11 | v13;
    *(_QWORD *)(this + 16) = v14;
    *(_QWORD *)(this + 24) = v17;
    *a3 = (int *)this;
    return this;
  }
  this = *((unsigned int *)v8 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = this;
  }
  if ((unsigned __int16)this != 6)
  {
    v7 = *(_QWORD *)(v5 + 8);
    goto LABEL_3;
  }
  this = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)v5, a2);
  if ((this & 0xFF0000) != 0)
  {
    if ((unsigned __int16)this >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958D7440);
    }
    v18 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)this + 3088];
    *v18 += 2;
  }
  else
  {
    v18 = 0;
  }
  *a3 = v18;
  return this;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeGridAutoFlow@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *result;
  int v12;
  _BYTE *v13;
  int v14;
  unsigned int v15;
  _BYTE v16[32];
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  _DWORD *v22;

  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)523,(WebCore::CSSValueID)525>((uint64_t)&v22, (uint64_t)this);
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)903>((uint64_t)&v21, (uint64_t)this);
  v5 = v22;
  if (v22)
  {
    v18 = (unint64_t)v20;
    v19 = 4;
LABEL_3:
    if ((v5[1] & 0x7F) == 0x50)
    {
      v12 = *((unsigned __int16 *)v5 + 4);
      if (v12 != 525)
      {
        if (v12 != 523)
          goto LABEL_4;
        v7 = v21;
        if (v21)
        {
          v6 = 0;
          goto LABEL_21;
        }
      }
      v22 = 0;
      v20[0] = v5;
      v6 = 1;
      HIDWORD(v19) = 1;
LABEL_5:
      v7 = v21;
      if (!v21)
      {
LABEL_6:
        v13 = v16;
        v14 = 4;
        memcpy(v16, v20, 8 * v6);
        HIDWORD(v19) = 0;
        v15 = v6;
        WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v13, &v17);
        *a2 = v17;
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v8);
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v9);
        goto LABEL_7;
      }
LABEL_21:
      v21 = 0;
      v20[v6] = v7;
      HIDWORD(v19) = ++v6;
      goto LABEL_6;
    }
LABEL_4:
    v6 = 0;
    goto LABEL_5;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)523,(WebCore::CSSValueID)525>((uint64_t)&v18, (uint64_t)this);
  v5 = (_DWORD *)v18;
  v22 = (_DWORD *)v18;
  if (v18 | v21)
  {
    v18 = (unint64_t)v20;
    v19 = 4;
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  *a2 = 0;
LABEL_7:
  result = v22;
  if (v22)
  {
    if (*v22 == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v10);
    else
      *v22 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)523,(WebCore::CSSValueID)525>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 525 && (unsigned __int16)result != 523)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D7820);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)903>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  int *v6;
  unsigned int *v7;
  __int128 *v8;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v7 = *(unsigned int **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = (uint64_t)WebCore::CSSParserToken::id(v7);
  if ((_DWORD)result != 903)
  {
LABEL_3:
    v6 = 0;
LABEL_4:
    *v3 = v6;
    return result;
  }
  v8 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)a2);
  result = (uint64_t)WebCore::CSSParserToken::id((unsigned int *)v8);
  if (result < 0x48E)
  {
    v6 = &WebCore::staticCSSValuePool[4 * result + 3088];
    *v6 += 2;
    goto LABEL_4;
  }
  result = 92;
  __break(0xC471u);
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeMasonryAutoFlow@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  int *v8;
  WTF *v9;
  int v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *result;
  int v24;
  unint64_t v25;
  __int128 *v26;
  __int128 *v27;
  char v28;
  unsigned int v29;
  int v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  _BYTE v34[32];
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _QWORD v38[4];
  WTF *v39;

  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)898,(WebCore::CSSValueID)899>((uint64_t)&v39, (uint64_t)this);
  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
    goto LABEL_5;
  v7 = *this;
  if (*this >= v5)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_5;
  v24 = *((_DWORD *)v7 + 4);
  if (v24 < 0)
  {
    v24 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v24;
  }
  if ((v24 & 0xFFFE) != 0x384)
  {
LABEL_5:
    v8 = 0;
  }
  else
  {
    v26 = *this;
    v25 = (unint64_t)this[1];
    if (*this == (__int128 *)v25)
    {
      v28 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v27 = *this;
      v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v27 = (__int128 *)((char *)v26 + 24);
      *this = (__int128 *)((char *)v26 + 24);
    }
    while (1)
    {
      if ((unint64_t)v27 < v25 || (v28 & 1) != 0)
      {
        if ((unint64_t)v27 >= v25)
          v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v29 = *(_DWORD *)v27;
      }
      else
      {
        v29 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
        v28 = 1;
      }
      if ((v29 & 0x3F) != 0x10)
        break;
      v27 = (__int128 *)((char *)*this + 24);
      *this = v27;
    }
    if ((*(_DWORD *)v26 & 0x3F) != 0)
    {
      LOWORD(v30) = 0;
    }
    else
    {
      v30 = *((_DWORD *)v26 + 4);
      if (v30 < 0)
      {
        v30 = WebCore::cssValueKeywordID(*((_QWORD *)v26 + 1), *((unsigned int *)v26 + 1) | ((unint64_t)((*(_DWORD *)v26 >> 22) & 1) << 32));
        *((_DWORD *)v26 + 4) = v30;
      }
      if ((unsigned __int16)v30 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D7DA8);
      }
    }
    v8 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v30 + 3088];
    *v8 += 2;
  }
  v9 = v39;
  if (!v39)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)898,(WebCore::CSSValueID)899>((uint64_t)&v36, (uint64_t)this);
    v9 = v36;
    v39 = v36;
    if (!v36)
    {
      v9 = (WTF *)&WebCore::staticCSSValuePool[6680];
      *(_DWORD *)v9 += 2;
      v39 = v9;
    }
  }
  v36 = (WTF *)v38;
  v37 = 4;
  if ((*((_WORD *)v9 + 2) & 0x7F) != 0x50)
  {
    v10 = 0;
    if (v8)
      goto LABEL_11;
LABEL_14:
    v39 = 0;
    v38[0] = v9;
    v12 = 1;
    v9 = 0;
    goto LABEL_22;
  }
  v10 = *((unsigned __int16 *)v9 + 4);
  if (!v8)
    goto LABEL_14;
LABEL_11:
  v11 = v8[1] & 0x7F;
  if (v11 == 80 && *((_WORD *)v8 + 4) == 900 || v10 == 899)
  {
    v39 = 0;
    v38[0] = v9;
    v12 = 1;
    v9 = 0;
  }
  else
  {
    v12 = 0;
  }
  if (v11 == 80 && *((_WORD *)v8 + 4) == 901)
  {
    v38[v12++] = v8;
    v8 = 0;
  }
LABEL_22:
  v31 = (WTF *)v34;
  v32 = 4;
  memcpy(v34, v38, 8 * v12);
  HIDWORD(v37) = 0;
  v33 = v12;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v31, &v35);
  *a2 = v35;
  if (v33)
  {
    v14 = v31;
    v15 = 8 * v33;
    do
    {
      v16 = *(_DWORD **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v13);
        else
          *v16 -= 2;
      }
      v14 = (WTF *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  v17 = v31;
  if (v34 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    v32 = 0;
    WTF::fastFree(v17, v13);
  }
  if (HIDWORD(v37))
  {
    v19 = v36;
    v20 = 8 * HIDWORD(v37);
    do
    {
      v21 = *(_DWORD **)v19;
      *(_QWORD *)v19 = 0;
      if (v21)
      {
        if (*v21 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v13);
        else
          *v21 -= 2;
      }
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  result = v36;
  if (v38 == (_QWORD *)v36 || v36 == 0)
  {
    if (!v8)
      goto LABEL_50;
    goto LABEL_47;
  }
  v36 = 0;
  LODWORD(v37) = 0;
  result = (WTF *)WTF::fastFree(result, v13);
  if (v8)
  {
LABEL_47:
    if (*v8 == 2)
    {
      result = (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v13);
      v9 = v39;
    }
    else
    {
      *v8 -= 2;
    }
  }
LABEL_50:
  v39 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      return (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v13);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)898,(WebCore::CSSValueID)899>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((result & 0xFFFE) != 0x382)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D8000);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeBackgroundSize<(WebCore::CSSPropertyID)170>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X8>)
{
  __int128 *v6;
  WebCore::CSSParserTokenRange *v7;
  int *result;
  int *v9;
  WTF::StringImpl *v10;
  int *v11;
  int v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  int *v17;
  int *v18;

  v6 = *(__int128 **)a1;
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 8))
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id((unsigned int *)v6) - 621 <= 1)
    return (int *)WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)a1, v7, a3);
  result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>(a1, &v18);
  v9 = v18;
  if (v18)
  {
    v11 = v18;
LABEL_9:
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    {
      WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>(a1, &v17);
      v13 = v17;
      if (v17
        || (result = (int *)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(a1, a2, 1u, 1, 0, 0, 0, (uint64_t *)&v17), (v13 = v17) != 0))
      {
        v14 = v18;
        v18 = 0;
        v15 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_DWORD *)v15 = 2;
        v16 = (*(unsigned __int8 *)(v15 + 6) << 16) & 0xFC0000 | 0x10000;
        *(_BYTE *)(v15 + 7) = v9 != 0;
        *(_QWORD *)(v15 + 8) = v14;
        *(_QWORD *)(v15 + 16) = v13;
        *(_WORD *)(v15 + 4) = -18432;
        *(_BYTE *)(v15 + 6) = BYTE2(v16);
        goto LABEL_13;
      }
      v11 = v18;
    }
    *a3 = v11;
    return result;
  }
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(a1, a2, 1u, 1, 0, 0, 0, (uint64_t *)&v17);
  v11 = v17;
  result = v18;
  v17 = 0;
  v18 = v11;
  if (result)
  {
    v12 = *result - 2;
    if (*result == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
      result = v17;
      v17 = 0;
      if (!result)
        goto LABEL_7;
      v12 = *result - 2;
      if (*result == 2)
      {
        result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
        goto LABEL_7;
      }
    }
    *result = v12;
LABEL_7:
    v11 = v18;
  }
  if (v11)
    goto LABEL_9;
  v15 = 0;
LABEL_13:
  *a3 = (int *)v15;
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBackgroundSize<(WebCore::CSSPropertyID)541>@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  int *v7;
  WTF::StringImpl *v8;
  uint64_t result;
  int *v10;
  int v11;
  BOOL v12;
  int *v13;
  _DWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  _DWORD *v18;
  int v19;
  int *v20;
  WTF::StringImpl *v21;
  int *v22;
  _DWORD *v23;
  int *v24;

  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v19 = *((_DWORD *)v6 + 4);
  if (v19 < 0)
  {
    v19 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v19;
  }
  if ((unsigned __int16)v19 - 621 > 1)
  {
LABEL_3:
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)this, &v24);
    v7 = v24;
    if (v24)
    {
LABEL_9:
      v23 = 0;
      if (*this == this[1]
        || (WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)this, &v22),
            (v23 = v22) == 0)
        && (WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, (uint64_t)a2, 1u, 1, 0, 0, 0, (uint64_t *)&v22), (v23 = v22) == 0))
      {
        WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=(&v23, (WTF::StringImpl *)&v24);
      }
      v12 = v7 != 0;
      v14 = v23;
      v13 = v24;
      v23 = 0;
      v24 = 0;
      v15 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v15 = 2;
      v17 = (*(unsigned __int8 *)(v15 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_BYTE *)(v15 + 7) = v12;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(v15 + 16) = v14;
      *(_WORD *)(v15 + 4) = -18432;
      *(_BYTE *)(v15 + 6) = BYTE2(v17);
      *a3 = v15;
      v18 = v23;
      v23 = 0;
      if (v18)
      {
        if (*v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v16);
        else
          *v18 -= 2;
      }
      result = (uint64_t)v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v16);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, (uint64_t)a2, 1u, 1, 0, 0, 0, (uint64_t *)&v23);
    v10 = v23;
    result = (uint64_t)v24;
    v23 = 0;
    v24 = v10;
    if (!result)
    {
LABEL_8:
      if (!v10)
      {
        *a3 = 0;
        return result;
      }
      goto LABEL_9;
    }
    v11 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v8);
      result = (uint64_t)v23;
      v23 = 0;
      if (!result)
        goto LABEL_7;
      v11 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
      {
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v21);
        goto LABEL_7;
      }
    }
    *(_DWORD *)result = v11;
LABEL_7:
    v10 = v24;
    goto LABEL_8;
  }
  result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
  if ((result & 0xFF0000) != 0)
  {
    if ((unsigned __int16)result >= 0x48Eu)
    {
      result = 92;
      __break(0xC471u);
      return result;
    }
    v20 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v20 += 2;
  }
  else
  {
    v20 = 0;
  }
  *a3 = v20;
  return result;
}

BOOL WebCore::CSSPropertyParserHelpers::isSelfPositionOrLeftOrRightKeyword(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 500) > 0x13 || ((1 << (a1 + 12)) & 0xC1803) == 0)
    return a1 == 260 || (a1 & 0xFFFE) == 258;
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeJustifyItems@<X0>(unsigned int **this@<X0>, WebCore::CSSPropertyParserHelpers *a2@<X8>)
{
  unsigned int *v5;
  _DWORD *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v14;

  v5 = *this;
  if (v5 >= this[1])
  {
    v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = WebCore::CSSParserToken::id(v5);
  if ((_DWORD)result == 394)
  {
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v14 = *(_OWORD *)this;
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)522>((uint64_t)&v13, (uint64_t)&v14);
    result = (_DWORD *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)260,(WebCore::CSSValueID)258,(WebCore::CSSValueID)259>((uint64_t)&v12, (uint64_t)&v14);
    v7 = v13;
    if (v13
      || (result = (_DWORD *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)522>((uint64_t)&v11, (uint64_t)&v14), (v7 = v11) != 0))
    {
      *(_OWORD *)this = v14;
      v9 = v12;
      if (v12)
      {
        result = (_DWORD *)WTF::fastCompactMalloc((WTF *)0x18);
        *result = 2;
        v10 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
        *((_BYTE *)result + 7) = 1;
        *((_QWORD *)result + 1) = v7;
        *((_QWORD *)result + 2) = v9;
        *((_WORD *)result + 2) = -18432;
        *((_BYTE *)result + 6) = (v10 | 0x10000u) >> 16;
        *(_QWORD *)a2 = result;
      }
      else
      {
        *(_QWORD *)a2 = v7;
      }
    }
    else
    {
      WebCore::CSSPropertyParserHelpers::consumeSelfPositionOverflowPosition(a2, (__int128 **)this);
      result = v12;
      if (v12)
      {
        if (*v12 == 2)
          return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v8);
        else
          *v12 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)522>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 522)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D8868);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)260,(WebCore::CSSValueID)258,(WebCore::CSSValueID)259>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 258 > 2)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D8AA0);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeGridLine@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v5;
  void *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  int v14;
  WTF::StringImpl *v15;
  void *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  double v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF *v25;
  WTF::StringImpl *v27;
  _DWORD *result;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _DWORD *v35;
  int *v36;
  WTF::StringImpl *v37;
  int v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  WTF::StringImpl *v42;
  char v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  double v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  WTF *v66;
  uint64_t v67;
  _BYTE v68[32];
  WTF::StringImpl *v69;
  uint64_t v70;
  _QWORD v71[4];
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int *v74;

  v5 = *this;
  if (*this >= this[1])
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) == 0)
  {
    v48 = *((_DWORD *)v5 + 4);
    if (v48 < 0)
    {
      v48 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = v48;
    }
    if ((unsigned __int16)v48 == 394)
      return (_DWORD *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
  }
  v69 = 0;
  v74 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve(this, (unsigned __int16 **)&v69, (uint64_t)&v74, 0x10100000000, &v73);
  if (v74)
    WTF::fastFree((WTF *)(v74 - 4), v6);
  if (v69)
    WTF::fastFree((WTF::StringImpl *)((char *)v69 - 16), v6);
  if (!v73)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)894>((uint64_t)&v69, (uint64_t)this);
    v17 = v69;
    if (v69)
    {
      v69 = 0;
      v74 = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve(this, (unsigned __int16 **)&v69, (uint64_t)&v74, 0x10100000000, &v72);
      if (v74)
        WTF::fastFree((WTF *)(v74 - 4), v16);
      if (v69)
        WTF::fastFree((WTF::StringImpl *)((char *)v69 - 16), v16);
      v37 = v72;
      v36 = (int *)v73;
      v72 = 0;
      v73 = v37;
      if (v36)
      {
        v38 = *v36 - 2;
        if (*v36 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, (WTF::StringImpl *)v16);
          v36 = (int *)v72;
          v72 = 0;
          if (!v36)
            goto LABEL_82;
          v38 = *v36 - 2;
          if (*v36 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, (WTF::StringImpl *)v16);
            goto LABEL_82;
          }
        }
        *v36 = v38;
      }
LABEL_82:
      v40 = *this;
      v39 = this[1];
      if (*this >= v39)
      {
        v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v40 & 0x3F) == 0)
      {
        v51 = *((_DWORD *)v40 + 4);
        if (v51 < 0)
        {
          v51 = WebCore::cssValueKeywordID(*((_QWORD *)v40 + 1), *((unsigned int *)v40 + 1) | ((unint64_t)((*(_DWORD *)v40 >> 22) & 1) << 32));
          *((_DWORD *)v40 + 4) = v51;
        }
        if ((unsigned __int16)v51 == 394)
          goto LABEL_133;
        v39 = this[1];
      }
      v41 = *this;
      if (*this >= v39)
      {
        v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v41 & 0x3F) != 0)
        goto LABEL_170;
      v52 = *((_DWORD *)v41 + 4);
      if (v52 < 0)
      {
        v52 = WebCore::cssValueKeywordID(*((_QWORD *)v41 + 1), *((unsigned int *)v41 + 1) | ((unint64_t)((*(_DWORD *)v41 >> 22) & 1) << 32));
        *((_DWORD *)v41 + 4) = v52;
      }
      if ((unsigned __int16)v52 != 894)
      {
LABEL_170:
        WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, 0, &v69);
        v42 = v69;
        if (v69)
        {
          v69 = 0;
          v12 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v12 = 2;
          v43 = *(_BYTE *)(v12 + 6);
          *(_WORD *)(v12 + 4) = 63;
          *(_BYTE *)(v12 + 6) = v43 & 0xFC;
          *(_QWORD *)(v12 + 8) = v42;
          v44 = *(_DWORD *)v42;
          *(_DWORD *)v42 += 2;
          if (v44)
            *(_DWORD *)v42 = v44;
          else
            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v16);
          v45 = v69;
          v69 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v45 -= 2;
          }
LABEL_92:
          v46 = v73;
          if (v73)
          {
LABEL_93:
            if ((*((_WORD *)v46 + 2) & 0x7F) == 0x49)
            {
              v63 = *((_QWORD *)v46 + 1);
              v69 = 0;
              v65 = WebCore::CSSCalcValue::doubleValue(v63, (uint64_t)&v69);
              if (v69)
                WTF::fastFree((WTF::StringImpl *)((char *)v69 - 16), v16);
              v47 = v65;
            }
            else
            {
              v47 = *((double *)v46 + 1);
            }
            if (v47 < 2147483650.0 && (v47 <= -2147483650.0 || (int)v47 < 0))
              goto LABEL_154;
            v18 = 1;
            goto LABEL_20;
          }
          WebCore::CSSPropertyParserHelpers::consumeInteger(this, &v69);
          v58 = v69;
          v69 = 0;
          v59 = v73;
          v73 = v58;
          if (v59)
          {
            v60 = *(_DWORD *)v59 - 2;
            if (*(_DWORD *)v59 != 2)
            {
LABEL_148:
              *(_DWORD *)v59 = v60;
              goto LABEL_149;
            }
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, (WTF::StringImpl *)v16);
            v59 = v69;
            v69 = 0;
            if (v59)
            {
              v60 = *(_DWORD *)v59 - 2;
              if (*(_DWORD *)v59 != 2)
                goto LABEL_148;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, (WTF::StringImpl *)v16);
            }
          }
LABEL_149:
          v46 = v73;
          if (!v73)
          {
            if (v12)
            {
              v69 = (WTF::StringImpl *)v71;
              LODWORD(v70) = 4;
              goto LABEL_152;
            }
            goto LABEL_154;
          }
          goto LABEL_93;
        }
      }
LABEL_133:
      v12 = 0;
      goto LABEL_92;
    }
    WebCore::CSSPropertyParserHelpers::consumeCustomIdentForGridLine((WebCore::CSSPropertyParserHelpers *)&v69, (unsigned int **)this);
    v12 = (uint64_t)v69;
    if (!v69)
    {
      v17 = 0;
      goto LABEL_154;
    }
    WebCore::CSSPropertyParserHelpers::consumeInteger(this, &v69);
    v54 = v69;
    v69 = 0;
    v55 = v73;
    v73 = v54;
    if (v55)
    {
      v56 = *(_DWORD *)v55 - 2;
      if (*(_DWORD *)v55 != 2)
      {
LABEL_137:
        *(_DWORD *)v55 = v56;
        goto LABEL_138;
      }
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, v53);
      v55 = v69;
      v69 = 0;
      if (v55)
      {
        v56 = *(_DWORD *)v55 - 2;
        if (*(_DWORD *)v55 != 2)
          goto LABEL_137;
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, v57);
      }
    }
LABEL_138:
    result = (_DWORD *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)894>((uint64_t)&v69, (uint64_t)this);
    v17 = v69;
    if (!v69)
    {
      v19 = v73;
      if (!v73)
      {
        *a3 = (int *)v12;
        return result;
      }
      v18 = 0;
      v17 = 0;
      goto LABEL_21;
    }
    goto LABEL_149;
  }
  v8 = *this;
  v7 = this[1];
  if (*this >= v7)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) == 0)
  {
    v49 = *((_DWORD *)v8 + 4);
    if (v49 < 0)
    {
      v49 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
      *((_DWORD *)v8 + 4) = v49;
    }
    if ((unsigned __int16)v49 == 394)
      goto LABEL_116;
    v7 = this[1];
  }
  v9 = *this;
  if (*this >= v7)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) == 0)
  {
    v50 = *((_DWORD *)v9 + 4);
    if (v50 < 0)
    {
      v50 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
      *((_DWORD *)v9 + 4) = v50;
    }
    if ((unsigned __int16)v50 == 894)
      goto LABEL_116;
  }
  WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, 0, &v69);
  v10 = v69;
  if (!v69)
  {
LABEL_116:
    v12 = 0;
    goto LABEL_18;
  }
  v69 = 0;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 2;
  v13 = *(_BYTE *)(v12 + 6);
  *(_WORD *)(v12 + 4) = 63;
  *(_BYTE *)(v12 + 6) = v13 & 0xFC;
  *(_QWORD *)(v12 + 8) = v10;
  v14 = *(_DWORD *)v10;
  *(_DWORD *)v10 += 2;
  if (v14)
    *(_DWORD *)v10 = v14;
  else
    WTF::StringImpl::destroy(v10, v11);
  v15 = v69;
  v69 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_18:
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)894>((uint64_t)&v69, (uint64_t)this);
  v17 = v69;
  if (v69)
    goto LABEL_149;
  v18 = 0;
LABEL_20:
  v19 = v73;
  if (!v73)
    goto LABEL_26;
LABEL_21:
  if ((*((_WORD *)v19 + 2) & 0x7F) == 0x49)
  {
    v62 = *((_QWORD *)v19 + 1);
    v69 = 0;
    v64 = WebCore::CSSCalcValue::doubleValue(v62, (uint64_t)&v69);
    if (v69)
      WTF::fastFree((WTF::StringImpl *)((char *)v69 - 16), v16);
    v20 = v64;
  }
  else
  {
    v20 = *((double *)v19 + 1);
  }
  if (v20 >= 2147483650.0 || v20 <= -2147483650.0)
  {
    v69 = (WTF::StringImpl *)v71;
    v70 = 4;
    if ((v18 & 1) == 0)
      goto LABEL_27;
    goto LABEL_152;
  }
  if ((int)v20)
  {
LABEL_26:
    v69 = (WTF::StringImpl *)v71;
    v70 = 4;
    if (!v18)
    {
LABEL_27:
      v21 = 0;
LABEL_28:
      v22 = v73;
      if (v73)
      {
        v73 = 0;
        v71[v21++] = v22;
        HIDWORD(v70) = v21;
      }
      if (v12)
      {
        v71[v21] = v12;
        HIDWORD(v70) = v21 + 1;
      }
      v66 = (WTF *)v68;
      v67 = 4;
      v23 = v69;
      if (v69 == (WTF::StringImpl *)v71)
      {
        memcpy(v68, v71, 8 * HIDWORD(v70));
      }
      else
      {
        v69 = (WTF::StringImpl *)v71;
        v66 = v23;
        v61 = v70;
        LODWORD(v70) = 4;
        LODWORD(v67) = v61;
      }
      v24 = HIDWORD(v70);
      HIDWORD(v70) = 0;
      HIDWORD(v67) = v24;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v66, (uint64_t *)&v74);
      *a3 = v74;
      if (HIDWORD(v67))
      {
        v30 = v66;
        v31 = 8 * HIDWORD(v67);
        do
        {
          v32 = *(_DWORD **)v30;
          *(_QWORD *)v30 = 0;
          if (v32)
          {
            if (*v32 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, (WTF::StringImpl *)v16);
            else
              *v32 -= 2;
          }
          v30 = (WTF *)((char *)v30 + 8);
          v31 -= 8;
        }
        while (v31);
      }
      v25 = v66;
      if (v68 != (_BYTE *)v66 && v66 != 0)
      {
        v66 = 0;
        LODWORD(v67) = 0;
        WTF::fastFree(v25, v16);
      }
      if (HIDWORD(v70))
      {
        v33 = v69;
        v34 = 8 * HIDWORD(v70);
        do
        {
          v35 = *(_DWORD **)v33;
          *(_QWORD *)v33 = 0;
          if (v35)
          {
            if (*v35 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, (WTF::StringImpl *)v16);
            else
              *v35 -= 2;
          }
          v33 = (WTF::StringImpl *)((char *)v33 + 8);
          v34 -= 8;
        }
        while (v34);
      }
      v27 = v69;
      if (v71 != (_QWORD *)v69 && v69 != 0)
      {
        v69 = 0;
        LODWORD(v70) = 0;
        WTF::fastFree(v27, v16);
      }
      v12 = 0;
      goto LABEL_47;
    }
LABEL_152:
    v71[0] = v17;
    v21 = 1;
    HIDWORD(v70) = 1;
    v17 = 0;
    goto LABEL_28;
  }
LABEL_154:
  *a3 = 0;
LABEL_47:
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*result == 2)
      result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v16);
    else
      *result -= 2;
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v12, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  return result;
}

unsigned int *WebCore::CSSPropertyParserHelpers::consumeCustomIdentForGridLine(WebCore::CSSPropertyParserHelpers *this, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int *result;
  unsigned int *v6;

  v4 = *a2;
  if (*a2 >= a2[1])
  {
    v4 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = WebCore::CSSParserToken::id(v4);
  if ((_DWORD)result != 394)
  {
    v6 = *a2;
    if (*a2 >= a2[1])
    {
      v6 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    result = WebCore::CSSParserToken::id(v6);
    if ((_DWORD)result != 894)
      return (unsigned int *)WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)a2, 0, (uint64_t *)this);
  }
  *(_QWORD *)this = 0;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)894>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  int *v6;
  __int128 *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v7 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_3;
  result = *((unsigned int *)v7 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = result;
  }
  if ((unsigned __int16)result != 894)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958D9690);
      }
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v6 += 2;
  }
  *v3 = v6;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::parseGridTemplateAreasRow(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, unint64_t *a5)
{
  WTF::StringImpl *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const WTF::StringImpl **v16;
  char v17;
  const WTF::StringImpl *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const WTF::StringImpl *v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int *v30[3];
  _DWORD *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38[2];

  v38[0] = a1;
  v38[1] = a2;
  v37 = a4;
  if ((WTF::StringView::containsOnly<&(BOOL WebCore::isCSSSpace<char16_t>(char16_t))>(v38) & 1) != 0)
    return 0;
  WebCore::CSSPropertyParserHelpers::parseGridTemplateAreasColumnNames(&v35, (WTF::StringImpl *)a1, (uint64_t)a2);
  if (a4)
  {
    v11 = *a5;
    v12 = v36;
    if (*a5 == v36)
      goto LABEL_4;
  }
  else
  {
    v12 = v36;
    *a5 = v36;
    v11 = v12;
    if ((_DWORD)v12)
    {
LABEL_4:
      v34 = 0;
      v13 = 1;
      if (v11)
      {
        v14 = 0;
        while (1)
        {
          if (v14 >= v12)
          {
LABEL_42:
            __break(0xC471u);
            JUMPOUT(0x1958D9950);
          }
          v15 = v35;
          v16 = (const WTF::StringImpl **)(v35 + 8 * v14);
          v17 = MEMORY[0x19AEA53F4](*v16, ".", 1);
          v19 = v34;
          if ((v17 & 1) == 0)
          {
            v20 = v34 + 1;
            v33 = v34 + 1;
            if (v34 + 1 < *a5)
            {
              if (v20 >= v12)
                goto LABEL_42;
              if (WTF::equal(*(WTF **)(v15 + 8 * v20), *v16, v18))
              {
                do
                {
                  v24 = v33 + 1;
                  v33 = v24;
                  if (v24 >= *a5)
                    break;
                  if (v24 >= v12)
                    goto LABEL_42;
                }
                while ((WTF::equal(*(WTF **)(v15 + 8 * v24), *v16, v23) & 1) != 0);
              }
            }
            v30[0] = (int *)&v37;
            v30[1] = (int *)&v34;
            v30[2] = (int *)&v33;
            WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::ensure<WebCore::CSSPropertyParserHelpers::parseGridTemplateAreasRow(WTF::StringView,WebCore::NamedGridAreaMap &,unsigned long,unsigned long &)::$_0>((uint64_t)&v31, a3, v16, v30);
            if (v32)
            {
              v21 = v33;
            }
            else
            {
              v25 = v31;
              v26 = v31[6];
              if (v37 != v26)
                goto LABEL_16;
              if (v34 != v31[2])
                goto LABEL_16;
              v21 = v33;
              if (v33 != v31[3])
                goto LABEL_16;
              LODWORD(v27) = v31[5];
              if (byte_1EE2F9580)
                v28 = WebCore::GridPosition::gMaxPositionForTesting;
              else
                v28 = 1000000;
              if (v28 - 1 < (int)v27)
                LODWORD(v27) = v28 - 1;
              if (-v28 > (int)v27)
                v27 = -v28;
              else
                v27 = v27;
              v29 = 1 - v28;
              if (v28 >= (int)v26 + 1)
                LODWORD(v26) = v26 + 1;
              else
                LODWORD(v26) = v28;
              if (v29 <= (int)v26)
                v26 = v26;
              else
                v26 = v29;
              *(_QWORD *)(v31 + 5) = v27 | (v26 << 32);
              v25[7] = 1;
            }
            v19 = v21 - 1;
          }
          v14 = v19 + 1;
          v34 = v14;
          v13 = 1;
          if (v14 >= *a5)
            goto LABEL_13;
        }
      }
      goto LABEL_13;
    }
  }
LABEL_16:
  v13 = 0;
LABEL_13:
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v10);
  return v13;
}

uint64_t WTF::StringView::containsOnly<&(BOOL WebCore::isCSSSpace<char16_t>(char16_t))>(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v9;
  uint64_t v10;

  v1 = *a1;
  v2 = *((unsigned int *)a1 + 2);
  if (*((_BYTE *)a1 + 12))
  {
    if ((_DWORD)v2)
    {
      while (1)
      {
        v9 = *v1;
        v5 = v9 > 0x20;
        v10 = (1 << v9) & 0x100000600;
        if (v5 || v10 == 0)
          break;
        ++v1;
        if (!--v2)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if (!(_DWORD)v2)
    return 1;
  v3 = 2 * v2;
  while (1)
  {
    v4 = *(unsigned __int16 *)v1;
    v5 = v4 > 0x20;
    v6 = (1 << v4) & 0x100000600;
    if (v5 || v6 == 0)
      break;
    v1 += 2;
    v3 -= 2;
    if (!v3)
      return 1;
  }
  return 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::parseGridTemplateAreasColumnNames(_QWORD *a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned __int8 *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[2];
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v30 = 1;
  v4 = a3;
  if ((_DWORD)a3)
  {
    v6 = 0;
    v7 = a3 & 0xFF00000000;
    while (1)
    {
      if (v7)
        v8 = *((unsigned __int8 *)a2 + v6);
      else
        v8 = *((unsigned __int16 *)a2 + v6);
      if (v8 - 9 < 2 || v8 == 32)
      {
        if (v29)
        {
          WTF::StringBuilder::toString((WTF::StringBuilder *)v28, &v27);
          v10 = HIDWORD(v32);
          if (HIDWORD(v32) == (_DWORD)v32)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v31, (unint64_t)&v27);
          }
          else
          {
            v11 = v27;
            v27 = 0;
            *(_QWORD *)(v31 + 8 * HIDWORD(v32)) = v11;
            HIDWORD(v32) = v10 + 1;
          }
          v12 = v27;
          v27 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v9);
            else
              *(_DWORD *)v12 -= 2;
          }
          WTF::StringBuilder::clear(v28, v9);
        }
        goto LABEL_14;
      }
      if (v8 != 46)
        break;
      v21 = (unsigned __int8 *)WTF::StringBuilder::operator WTF::StringView((uint64_t *)v28);
      if ((WTF::operator==(v21, v22, ".", 2) & 1) != 0)
        goto LABEL_14;
      if (v29)
        goto LABEL_40;
LABEL_21:
      WTF::StringBuilder::append((uint64_t)v28, v8);
LABEL_14:
      if (v4 == ++v6)
      {
        if (v29)
        {
          WTF::StringBuilder::toString((WTF::StringBuilder *)v28, &v27);
          v15 = HIDWORD(v32);
          if (HIDWORD(v32) == (_DWORD)v32)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v31, (unint64_t)&v27);
          }
          else
          {
            v16 = v27;
            v27 = 0;
            *(_QWORD *)(v31 + 8 * HIDWORD(v32)) = v16;
            HIDWORD(v32) = v15 + 1;
          }
          v17 = v27;
          v27 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, a2);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        goto LABEL_32;
      }
    }
    if (v8 <= 0x7F
      && v8 != 95
      && (unsigned __int16)((v8 | 0x20) - 97) >= 0x1Au
      && v8 != 45
      && (unsigned __int16)(v8 - 48) > 9u)
    {
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_33;
    }
    v13 = (unsigned __int8 *)WTF::StringBuilder::operator WTF::StringView((uint64_t *)v28);
    if (!WTF::operator==(v13, v14, ".", 2))
      goto LABEL_21;
LABEL_40:
    WTF::StringBuilder::toString((WTF::StringBuilder *)v28, &v27);
    v24 = HIDWORD(v32);
    if (HIDWORD(v32) == (_DWORD)v32)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v31, (unint64_t)&v27);
    }
    else
    {
      v25 = v27;
      v27 = 0;
      *(_QWORD *)(v31 + 8 * HIDWORD(v32)) = v25;
      HIDWORD(v32) = v24 + 1;
    }
    v26 = v27;
    v27 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v23);
      else
        *(_DWORD *)v26 -= 2;
    }
    WTF::StringBuilder::clear(v28, v23);
    goto LABEL_21;
  }
LABEL_32:
  *a1 = v31;
  v18 = v32;
  v31 = 0;
  v32 = 0;
  a1[1] = v18;
LABEL_33:
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v28, a2);
  return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v19);
}

WTF *WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::ensure<WebCore::CSSPropertyParserHelpers::parseGridTemplateAreasRow(WTF::StringView,WebCore::NamedGridAreaMap &,unsigned long,unsigned long &)::$_0>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, int **a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int i;
  uint64_t v14;
  WTF *v15;
  WTF *result;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = (WTF *)(v8 + 32 * v14);
    result = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = v8 + 32 * v14;
LABEL_13:
    v11 = i + v14;
  }
  if (!result)
  {
    if (v12)
    {
      result = 0;
      *(_QWORD *)v12 = 0;
      if (byte_1EE2F9580)
        v17 = WebCore::GridPosition::gMaxPositionForTesting;
      else
        v17 = 1000000;
      if (v17 >= 1)
        v18 = 1;
      else
        v18 = v17;
      if (-v17 > v18 - 1)
        v19 = -v17;
      else
        v19 = (v18 - 1);
      LODWORD(v20) = 1 - v17;
      if ((int)v20 <= v18)
        v20 = v18;
      else
        v20 = v20;
      v21 = v19 | (v20 << 32);
      *(_QWORD *)(v12 + 8) = v21;
      *(_DWORD *)(v12 + 16) = 2;
      *(_QWORD *)(v12 + 20) = v21;
      *(_DWORD *)(v12 + 28) = 2;
      --*(_DWORD *)(*a2 - 16);
      v15 = (WTF *)v12;
    }
    v22 = *a3;
    if (*a3)
      *(_DWORD *)v22 += 2;
    *(_QWORD *)v15 = v22;
    v23 = **a4;
    v24 = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      v24 = 1000000;
    v25 = -v24;
    if (v24 - 1 >= v23)
      v26 = **a4;
    else
      v26 = v24 - 1;
    if (v25 > v26)
      v27 = -v24;
    else
      v27 = v26;
    v28 = 1;
    LODWORD(v29) = 1 - v24;
    if (v24 >= v23 + 1)
      LODWORD(v30) = v23 + 1;
    else
      LODWORD(v30) = v24;
    if ((int)v29 <= (int)v30)
      v30 = v30;
    else
      v30 = v29;
    v31 = v27 | (v30 << 32);
    LODWORD(v32) = *a4[1];
    if (v24 - 1 < (int)v32)
      LODWORD(v32) = v24 - 1;
    if (v25 > (int)v32)
      v32 = -v24;
    else
      v32 = v32;
    if (v24 >= *a4[2])
      v24 = *a4[2];
    if ((int)v29 <= v24)
      v29 = v24;
    else
      v29 = v29;
    *((_QWORD *)v15 + 1) = v32 | (v29 << 32);
    *((_DWORD *)v15 + 4) = 1;
    *(_QWORD *)((char *)v15 + 20) = v31;
    *((_DWORD *)v15 + 7) = 1;
    v33 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v33 - 12) + 1;
    *(_DWORD *)(v33 - 12) = v28;
    v34 = *a2;
    if (*a2)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 <= 2 * v36)
      {
LABEL_60:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, (WTF::StringImpl **)v15);
        v15 = result;
        v34 = *a2;
        if (*a2)
          v37 = *(unsigned int *)(v34 - 4);
        else
          v37 = 0;
      }
    }
    else if (3 * v37 <= 4 * v36)
    {
      goto LABEL_60;
    }
    v38 = v34 + 32 * v37;
    v39 = 1;
    goto LABEL_66;
  }
  result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v40 = *a2;
  if (*a2)
    v41 = *(unsigned int *)(v40 - 4);
  else
    v41 = 0;
  v39 = 0;
  v38 = v40 + 32 * v41;
LABEL_66:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v38;
  *(_BYTE *)(a1 + 16) = v39;
  return result;
}

WebCore::CSSPrimitiveValue *WebCore::CSSPropertyParserHelpers::consumeGridTrackSize@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v6;
  WebCore::CSSParserTokenRange *v7;
  WebCore::CSSPrimitiveValue *result;
  int v9;
  __int128 *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WebCore::CSSPrimitiveValue *v13;
  _DWORD *v14;
  WebCore::CSSPrimitiveValue *v15;
  _DWORD *v16;
  WebCore::CSSPrimitiveValue *v17;
  int *v18;
  _DWORD *v19;
  WebCore::CSSPrimitiveValue *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;

  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v9 = *((_DWORD *)v6 + 4);
    if (v9 < 0)
    {
      v9 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v9;
    }
    if ((unsigned __int16)v9 == 394)
      return (WebCore::CSSPrimitiveValue *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
  }
  if (WebCore::CSSParserToken::functionId((int *)v6) == 895)
  {
    v23 = *(_OWORD *)this;
    v21 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v23, v7);
    v22 = v10;
    WebCore::CSSPropertyParserHelpers::consumeGridBreadth((uint64_t)&v20, &v21, (uint64_t)a2);
    if (v20
      && WebCore::CSSPrimitiveValue::primitiveType(v20) != 59
      && WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v21, v11))
    {
      WebCore::CSSPropertyParserHelpers::consumeGridBreadth((uint64_t)&v19, &v21, (uint64_t)a2);
      v12 = v19;
      if (v19 && v21 == v22)
      {
        *(_OWORD *)this = v23;
        v13 = v20;
        v19 = 0;
        v20 = 0;
        v16 = v12;
        v17 = v13;
        WebCore::CSSFunctionValue::create(895, &v17, &v16, (uint64_t *)&v18);
        *a3 = v18;
        v18 = 0;
        v14 = v16;
        v16 = 0;
        if (v14)
        {
          if (*v14 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v11);
          else
            *v14 -= 2;
        }
        v15 = v17;
        v17 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v11);
          else
            *(_DWORD *)v15 -= 2;
        }
        v12 = v19;
      }
      else
      {
        *a3 = 0;
      }
      v19 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
        else
          *v12 -= 2;
      }
    }
    else
    {
      *a3 = 0;
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebCore::CSSPrimitiveValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else if (WebCore::CSSParserToken::functionId((int *)v6) == 554)
  {
    return (WebCore::CSSPrimitiveValue *)WebCore::CSSPropertyParserHelpers::consumeFitContent((uint64_t *)a3, (WebCore::CSSParserTokenRange *)this, (uint64_t)a2);
  }
  else
  {
    return (WebCore::CSSPrimitiveValue *)WebCore::CSSPropertyParserHelpers::consumeGridBreadth((uint64_t)a3, this, (uint64_t)a2);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeGridBreadth(uint64_t result, __int128 **this, uint64_t a3)
{
  int **v5;
  __int128 *v6;
  unsigned int v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  v5 = (int **)result;
  v6 = *this;
  if (*this >= this[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v7 = *(_DWORD *)v6;
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    result = *((unsigned int *)v6 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((v7 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = result;
    }
    if ((unsigned __int16)result - 549 < 3
      || (unsigned __int16)result == 394
      || (unsigned __int16)result == 552)
    {
      return WebCore::CSSPropertyParserHelpers::consumeIdent(this, (WebCore::CSSParserTokenRange *)this, v5);
    }
    v7 = *(_DWORD *)v6;
  }
  if ((v7 & 0x3F83F) != 0x1D809)
    return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)this, a3, 1u, 1, 0, 0, 0, (uint64_t *)v5);
  v9 = *this;
  v8 = this[1];
  if (*this >= v8)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (*((double *)v9 + 2) < 0.0)
  {
    *v5 = 0;
  }
  else
  {
    v10 = *this;
    if (*this == v8)
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = 1;
      {
        v11 = v8;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v11 = *this;
      }
    }
    else
    {
      v11 = (__int128 *)((char *)v10 + 24);
      *this = (__int128 *)((char *)v10 + 24);
    }
    while (1)
    {
      if (v11 < v8 || (v12 & 1) != 0)
      {
        if (v11 >= v8)
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v13 = *(_DWORD *)v11;
      }
      else
      {
        v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
        v12 = 1;
      }
      if ((v13 & 0x3F) != 0x10)
        break;
      v11 = (__int128 *)((char *)*this + 24);
      *this = v11;
    }
    v14 = *((_QWORD *)v10 + 2);
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v15 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 59;
    *(_BYTE *)(result + 6) = v15 & 0xFC;
    *(_QWORD *)(result + 8) = v14;
    *v5 = (int *)result;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFitContent(uint64_t *a1, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v14 = *(_OWORD *)a2;
  v12 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v14, a2);
  v13 = v6;
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)&v12, a3, 1u, 0, 0, 0, 0, (uint64_t *)&v11);
  v9 = v11;
  if (v11 && v12 == v13)
  {
    *(_OWORD *)a2 = v14;
    v11 = 0;
    result = WTF::fastCompactMalloc((WTF *)0x40);
    *(_DWORD *)result = 2;
    v10 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
    *(_DWORD *)(result + 8) = 1;
    *(_WORD *)(result + 4) = -7680;
    *(_BYTE *)(result + 6) = (v10 | 0x10000u) >> 16;
    *(_QWORD *)(result + 16) = v9;
    *(_WORD *)(result + 56) = 554;
    *a1 = result;
    v9 = v11;
  }
  else
  {
    *a1 = 0;
  }
  v11 = 0;
  if (v9)
  {
    if (*v9 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
    else
      *v9 -= 2;
  }
  return result;
}

_OWORD *WebCore::CSSPropertyParserHelpers::consumeGridLineNames@<X0>(_OWORD *result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  _OWORD *v4;
  __int128 *v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  WebCore::CSSValue *v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::CSSValue *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v4 = result;
  v23 = *result;
  v6 = (__int128 *)v23;
  if ((_QWORD)v23 == *((_QWORD *)&v23 + 1))
  {
    v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v8 = 1;
    {
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
    }
    v7 = (__int128 *)v23;
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v7 = (__int128 *)(v23 + 24);
    *(_QWORD *)&v23 = v23 + 24;
    v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  while (1)
  {
    if ((unint64_t)v7 < *((_QWORD *)&v23 + 1) || (v8 & 1) != 0)
    {
      v10 = (unint64_t)v7 >= *((_QWORD *)&v23 + 1) ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v7;
      v11 = *(_DWORD *)v10;
    }
    else
    {
      v11 = v9 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
      v8 = 1;
      v9 = v11;
    }
    if ((v11 & 0x3F) != 0x10)
      break;
    v7 = (__int128 *)((char *)v7 + 24);
    *(_QWORD *)&v23 = v7;
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0x18)
  {
    v20 = &v22;
    v21 = 4;
    while (1)
    {
      WebCore::CSSPropertyParserHelpers::consumeCustomIdentForGridLine((WebCore::CSSPropertyParserHelpers *)&v19, (unsigned int **)&v23);
      v12 = v19;
      if (!v19)
        break;
      WebCore::CSSValue::customIdent((uint64_t *)v19, &v18);
      v14 = HIDWORD(v21);
      if (HIDWORD(v21) == (_DWORD)v21)
      {
        WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v20, (unint64_t)&v18);
      }
      else
      {
        v15 = v18;
        v18 = 0;
        v20[HIDWORD(v21)] = (uint64_t)v15;
        HIDWORD(v21) = v14 + 1;
      }
      v16 = v18;
      v18 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (*(_DWORD *)v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    if ((*(_DWORD *)WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)&v23) & 0x3F) == 0x19
      && ((*v4 = v23, v17 = (WTF::StringImpl *)HIDWORD(v21), (a2 & 1) != 0) || HIDWORD(v21)))
    {
      WebCore::CSSGridLineNamesValue::create((uint64_t)v20, HIDWORD(v21), a3);
    }
    else
    {
      *a3 = 0;
    }
    return (_OWORD *)WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v17);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeGridTrackList@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, int a3@<W2>, int **a4@<X8>)
{
  uint64_t v6;
  __int128 *v8;
  int v9;
  WebCore::CSSPropertyParserHelpers *v10;
  int v11;
  unint64_t v12;
  __int128 *v13;
  const WebCore::CSSValue *v14;
  WebCore::CSSPropertyParserHelpers *v15;
  _BOOL4 isGridTrackFixedSized;
  int v17;
  WebCore::CSSPropertyParserHelpers *v18;
  __int128 *v19;
  WTF *v20;
  unsigned int v21;
  WTF *v23;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  WTF::StringImpl *v30;
  int *v31;
  unint64_t v32;
  __int128 *v33;
  unsigned __int8 v34;
  __int128 *v35;
  WTF::StringImpl *v36;
  WebCore::CSSPropertyParserHelpers *v37;
  int v38;
  unsigned int *v39;
  __int128 *v40;
  int v41;
  __int128 *v42;
  int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF *v46;
  int v47;
  int v48;
  WTF *v49;
  int v50;
  unsigned int v51;
  _BYTE v52[32];
  uint64_t v53;
  char v54;
  char v55;
  WTF *v56;
  uint64_t v57;
  _BYTE v58[32];
  WebCore::CSSPropertyParserHelpers *v59;
  WTF *v60;
  uint64_t v61;
  _BYTE v62[32];
  int *v63;

  v6 = this;
  if ((*(_WORD *)(a2 + 51) & 0x100) != 0)
  {
    v39 = *(unsigned int **)this;
    if (*(_QWORD *)v6 >= *(_QWORD *)(v6 + 8))
    {
      v39 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    this = (uint64_t)WebCore::CSSParserToken::id(v39);
    if ((_DWORD)this == 897)
      return WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)v6, (WebCore::CSSParserTokenRange *)a2, a4);
  }
  if (a3)
  {
    if (a3 == 2)
    {
      v40 = *(__int128 **)v6;
      if (*(_QWORD *)v6 >= *(_QWORD *)(v6 + 8))
      {
        v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v40 & 0x3F) == 0x18)
      {
        *a4 = 0;
        return this;
      }
      v9 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v8 = *(__int128 **)v6;
    if (*(_QWORD *)v6 >= *(_QWORD *)(v6 + 8))
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) == 0)
    {
      v29 = *((_DWORD *)v8 + 4);
      if (v29 < 0)
      {
        v29 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
        *((_DWORD *)v8 + 4) = v29;
      }
      if ((unsigned __int16)v29 == 896)
      {
        WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)v6, (WebCore::CSSParserTokenRange *)a2, &v63);
        v31 = v63;
        v63 = 0;
        if (v31)
        {
          if (*v31 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v30);
          else
            *v31 -= 2;
        }
        v60 = (WTF *)v62;
        v61 = 4;
        v33 = *(__int128 **)v6;
        v32 = *(_QWORD *)(v6 + 8);
        if (*(_QWORD *)v6 == v32)
        {
          v44 = 0;
          v56 = (WTF *)v58;
          v57 = 4;
LABEL_113:
          memcpy(v58, v62, 8 * v44);
        }
        else
        {
          v34 = 0;
          do
          {
            if ((unint64_t)v33 >= v32)
            {
              v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              }
            }
            if ((*(_DWORD *)v33 & 0x3F) == 6)
              break;
            v35 = *(__int128 **)v6;
            if (*(_QWORD *)v6 >= v32)
            {
              v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              }
            }
            if (WebCore::CSSParserToken::functionId((int *)v35) == 231)
            {
              LOBYTE(v59) = 0;
              if (!WebCore::CSSPropertyParserHelpers::consumeSubgridNameRepeatFunction((__int128 **)v6, (WebCore::CSSParserTokenRange *)&v60, &v59)|| (((_BYTE)v59 != 0) & v34) == 1)
              {
LABEL_119:
                *a4 = 0;
                return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v36);
              }
              v34 |= v59 != 0;
            }
            else
            {
              WebCore::CSSPropertyParserHelpers::consumeGridLineNames((_OWORD *)v6, 1, (uint64_t *)&v59);
              v37 = v59;
              if (!v59)
                goto LABEL_119;
              v38 = HIDWORD(v61);
              if (HIDWORD(v61) == (_DWORD)v61)
              {
                WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, HIDWORD(v61) + 1);
                v38 = HIDWORD(v61);
              }
              *((_QWORD *)v60 + HIDWORD(v61)) = v37;
              HIDWORD(v61) = v38 + 1;
            }
            v33 = *(__int128 **)v6;
            v32 = *(_QWORD *)(v6 + 8);
          }
          while (*(_QWORD *)v6 != v32);
          v46 = v60;
          v56 = (WTF *)v58;
          v57 = 4;
          v44 = HIDWORD(v61);
          if (v60 == (WTF *)v62)
            goto LABEL_113;
          v60 = (WTF *)v62;
          v56 = v46;
          v47 = v61;
          LODWORD(v61) = 4;
          LODWORD(v57) = v47;
        }
        HIDWORD(v61) = 0;
        HIDWORD(v57) = v44;
        WebCore::CSSSubgridValue::create((uint64_t)&v56, (uint64_t *)&v59);
        *a4 = (int *)v59;
        v59 = 0;
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v45);
        return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v36);
      }
    }
  }
  v9 = 0;
LABEL_6:
  v60 = (WTF *)v62;
  v61 = 4;
  v55 = 1;
  WebCore::CSSPropertyParserHelpers::consumeGridLineNames((_OWORD *)v6, 0, (uint64_t *)&v59);
  v10 = v59;
  if (v59)
  {
    v59 = 0;
    v41 = HIDWORD(v61);
    if (HIDWORD(v61) == (_DWORD)v61)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, HIDWORD(v61) + 1);
      v41 = HIDWORD(v61);
    }
    *((_QWORD *)v60 + HIDWORD(v61)) = v10;
    HIDWORD(v61) = v41 + 1;
  }
  v11 = 0;
  v12 = *(_QWORD *)(v6 + 8);
  do
  {
    v54 = 0;
    v13 = *(__int128 **)v6;
    if (*(_QWORD *)v6 >= v12)
    {
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    this = (uint64_t)WebCore::CSSParserToken::functionId((int *)v13);
    if ((_DWORD)this == 231)
    {
      if (a3)
        goto LABEL_107;
      this = WebCore::CSSPropertyParserHelpers::consumeGridTrackRepeatFunction((__int128 **)v6, (WebCore::CSSParserTokenRange *)*(unsigned __int8 *)(a2 + 48), (uint64_t)&v60, (WTF *)&v54, (BOOL *)&v55);
      if ((this & 1) == 0 || v54 != 0 && (v11 & 1) != 0)
        goto LABEL_107;
      if (((v54 == 0) & ~v11) != 0)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
      isGridTrackFixedSized = v55;
    }
    else
    {
      this = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeGridTrackSize((__int128 **)v6, (WebCore::CSSParserTokenRange *)*(unsigned __int8 *)(a2 + 48), (int **)&v59);
      v15 = v59;
      if (!v59)
        goto LABEL_107;
      if (v55)
      {
        isGridTrackFixedSized = WebCore::CSSPropertyParserHelpers::isGridTrackFixedSized(v59, v14);
        v55 = isGridTrackFixedSized;
      }
      else
      {
        isGridTrackFixedSized = 0;
      }
      v53 = (uint64_t)v15;
      v17 = HIDWORD(v61);
      if (HIDWORD(v61) == (_DWORD)v61)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v60, (unint64_t)&v53);
      }
      else
      {
        v53 = 0;
        *((_QWORD *)v60 + HIDWORD(v61)) = v15;
        HIDWORD(v61) = v17 + 1;
      }
      this = v53;
      v53 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, v14);
        else
          *(_DWORD *)this -= 2;
      }
      if ((v11 & 1) == 0)
        goto LABEL_19;
    }
    if (!isGridTrackFixedSized)
      goto LABEL_107;
    v11 = 1;
LABEL_20:
    if (v9)
    {
      v42 = *(__int128 **)v6;
      if (*(_QWORD *)v6 >= *(_QWORD *)(v6 + 8))
      {
        v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v42 & 0x3F) == 0x18)
      {
LABEL_107:
        *a4 = 0;
        goto LABEL_38;
      }
    }
    WebCore::CSSPropertyParserHelpers::consumeGridLineNames((_OWORD *)v6, 0, (uint64_t *)&v59);
    v18 = v59;
    if (v59)
    {
      v43 = HIDWORD(v61);
      if (HIDWORD(v61) == (_DWORD)v61)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, HIDWORD(v61) + 1);
        v43 = HIDWORD(v61);
      }
      *((_QWORD *)v60 + HIDWORD(v61)) = v18;
      HIDWORD(v61) = v43 + 1;
    }
    v19 = *(__int128 **)v6;
    v12 = *(_QWORD *)(v6 + 8);
    if (*(_QWORD *)v6 == v12)
      break;
    if (*(_QWORD *)v6 >= v12)
    {
      v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
  }
  while ((*(_DWORD *)v19 & 0x3F) != 6);
  v49 = (WTF *)v52;
  v50 = 4;
  v20 = v60;
  if (v60 == (WTF *)v62)
  {
    v21 = HIDWORD(v61);
    memcpy(v52, v62, 8 * HIDWORD(v61));
  }
  else
  {
    v60 = (WTF *)v62;
    v49 = v20;
    v48 = v61;
    v21 = HIDWORD(v61);
    LODWORD(v61) = 4;
    v50 = v48;
  }
  HIDWORD(v61) = 0;
  v51 = v21;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v49, (uint64_t *)&v59);
  *a4 = (int *)v59;
  if (v51)
  {
    v26 = v49;
    v27 = 8 * v51;
    do
    {
      v28 = *(_DWORD **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v14);
        else
          *v28 -= 2;
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  this = (uint64_t)v49;
  if (v52 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    v50 = 0;
    this = WTF::fastFree((WTF *)this, v14);
  }
LABEL_38:
  v23 = v60;
  if (HIDWORD(v61))
  {
    v25 = 8 * HIDWORD(v61);
    do
    {
      this = *(_QWORD *)v23;
      *(_QWORD *)v23 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, v14);
        else
          *(_DWORD *)this -= 2;
      }
      v23 = (WTF *)((char *)v23 + 8);
      v25 -= 8;
    }
    while (v25);
    v23 = v60;
  }
  if (v62 != (_BYTE *)v23 && v23 != 0)
  {
    v60 = 0;
    LODWORD(v61) = 0;
    return WTF::fastFree(v23, v14);
  }
  return this;
}

BOOL WebCore::CSSPropertyParserHelpers::consumeSubgridNameRepeatFunction(__int128 **a1, WebCore::CSSParserTokenRange *a2, _BYTE *a3)
{
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  unsigned int v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  char v15;
  unsigned int v16;
  __int128 *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _BOOL8 v21;
  int v22;
  unsigned int v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  _DWORD *v32;
  WTF *v33;
  _DWORD *v35;
  int v36;
  __int128 *v37;
  char v38;
  unsigned int v39;
  __int128 *v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  WTF *v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *v49;
  int v52;
  int v53;
  WTF *v54;
  int v55;
  unsigned int v56;
  _BYTE v57[32];
  WTF *v58;
  int v59;
  unsigned int v60;
  _BYTE v61[32];
  _DWORD *v62;
  WTF *v63;
  uint64_t v64;
  _BYTE v65[32];
  __int128 v66;

  v5 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(a1, a2);
  v6 = v5;
  v8 = (__int128 *)v7;
  *(_QWORD *)&v66 = v5;
  *((_QWORD *)&v66 + 1) = v7;
  if (v7 <= (unint64_t)v5)
  {
    v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
    }
    if ((v9 & 0x3F) != 0)
      goto LABEL_5;
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v9 = *(_DWORD *)v5;
    if ((*(_DWORD *)v5 & 0x3F) != 0)
      goto LABEL_5;
    v10 = v5;
  }
  if ((v9 & 0x3F) == 0)
  {
    v36 = *((_DWORD *)v10 + 4);
    if (v36 < 0)
    {
      v36 = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((v9 >> 22) & 1) << 32));
      *((_DWORD *)v10 + 4) = v36;
    }
    if ((unsigned __int16)v36 == 965)
    {
      if (v6 == v8)
      {
        v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v39 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v38 = 1;
        {
          v39 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v39;
        }
      }
      else
      {
        v37 = v6;
        v6 = (__int128 *)((char *)v6 + 24);
        *(_QWORD *)&v66 = v6;
        v39 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if (v6 < v8 || (v38 & 1) != 0)
        {
          v40 = v6 >= v8 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
          v41 = *(_DWORD *)v40;
        }
        else
        {
          v39 = v39 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v39;
          v38 = 1;
          LOBYTE(v41) = v39;
        }
        if ((v41 & 0x3F) != 0x10)
          break;
        v6 = (__int128 *)((char *)v6 + 24);
        *(_QWORD *)&v66 = v6;
      }
      if ((*(_DWORD *)v37 & 0x3F) == 0 && (v37[1] & 0x80000000) != 0)
        *((_DWORD *)v37 + 4) = WebCore::cssValueKeywordID(*((_QWORD *)v37 + 1), *((unsigned int *)v37 + 1) | ((unint64_t)((*(_DWORD *)v37 >> 22) & 1) << 32));
      v13 = 1;
      *a3 = 1;
      goto LABEL_12;
    }
  }
LABEL_5:
  *a3 = 0;
  v11 = WebCore::CSSPropertyParserHelpers::consumeIntegerTypeRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>((uint64_t)&v66);
  if ((v11 & 0xFF00000000) == 0)
    return 0;
  v12 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v12 = 1000000;
  if (v11 >= v12)
    v13 = v12;
  else
    v13 = v11;
  v8 = (__int128 *)*((_QWORD *)&v66 + 1);
  v6 = (__int128 *)v66;
LABEL_12:
  v14 = v6;
  if (v6 >= v8)
  {
    v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v14 & 0x3F) != 0x15)
    return 0;
  if (v6 == v8)
  {
    v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v15 = 1;
    {
      v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
    }
  }
  else
  {
    v6 = (__int128 *)((char *)v6 + 24);
    *(_QWORD *)&v66 = v6;
    v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  while (1)
  {
    if (v6 < v8 || (v15 & 1) != 0)
    {
      v17 = v6 >= v8 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
      v18 = *(_DWORD *)v17;
    }
    else
    {
      v16 = v16 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
      v15 = 1;
      LOBYTE(v18) = v16;
    }
    if ((v18 & 0x3F) != 0x10)
      break;
    v6 = (__int128 *)((char *)v6 + 24);
    *(_QWORD *)&v66 = v6;
  }
  v63 = (WTF *)v65;
  v64 = 4;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumeGridLineNames(&v66, 1, (uint64_t *)&v62);
    v20 = (uint64_t)v62;
    v21 = v62 != 0;
    if (!v62)
      goto LABEL_90;
    v22 = HIDWORD(v64);
    if (HIDWORD(v64) == (_DWORD)v64)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v63, HIDWORD(v64) + 1);
      v22 = HIDWORD(v64);
    }
    *((_QWORD *)v63 + HIDWORD(v64)) = v20;
    v23 = v22 + 1;
    HIDWORD(v64) = v22 + 1;
  }
  while ((_QWORD)v66 != *((_QWORD *)&v66 + 1));
  if (*a3)
  {
    v58 = (WTF *)v61;
    v59 = 4;
    v24 = v63;
    if (v63 == (WTF *)v65)
    {
      memcpy(v61, v65, 8 * (v22 + 1));
    }
    else
    {
      v63 = (WTF *)v65;
      v58 = v24;
      v52 = v64;
      LODWORD(v64) = 4;
      v59 = v52;
    }
    HIDWORD(v64) = 0;
    v60 = v23;
    WebCore::CSSGridAutoRepeatValue::create(965, (uint64_t)&v58, (uint64_t *)&v62);
    v25 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v25 == *((_DWORD *)a2 + 2))
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v25 + 1);
      v25 = *((unsigned int *)a2 + 3);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v25) = v62;
    *((_DWORD *)a2 + 3) = v25 + 1;
    if (v60)
    {
      v30 = v58;
      v31 = 8 * v60;
      do
      {
        v32 = *(_DWORD **)v30;
        *(_QWORD *)v30 = 0;
        if (v32)
        {
          if (*v32 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v19);
          else
            *v32 -= 2;
        }
        v30 = (WTF *)((char *)v30 + 8);
        v31 -= 8;
      }
      while (v31);
    }
    v33 = v58;
    if (v61 != (_BYTE *)v58 && v58 != 0)
    {
      v58 = 0;
      v59 = 0;
LABEL_107:
      WTF::fastFree(v33, v19);
    }
  }
  else
  {
    v54 = (WTF *)v57;
    v55 = 4;
    v26 = v63;
    if (v63 == (WTF *)v65)
    {
      memcpy(v57, v65, 8 * (v22 + 1));
    }
    else
    {
      v63 = (WTF *)v65;
      v54 = v26;
      v53 = v64;
      LODWORD(v64) = 4;
      v55 = v53;
    }
    HIDWORD(v64) = 0;
    v56 = v23;
    WebCore::CSSGridIntegerRepeatValue::create(v13, (uint64_t)&v54, (uint64_t *)&v62);
    v27 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v27 == *((_DWORD *)a2 + 2))
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v27 + 1);
      v27 = *((unsigned int *)a2 + 3);
    }
    v28 = *(_QWORD *)a2;
    v29 = (uint64_t)v62;
    v62 = 0;
    *(_QWORD *)(v28 + 8 * v27) = v29;
    *((_DWORD *)a2 + 3) = v27 + 1;
    v35 = v62;
    v62 = 0;
    if (v35)
    {
      if (*v35 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v19);
      else
        *v35 -= 2;
    }
    if (v56)
    {
      v42 = v54;
      v43 = 8 * v56;
      do
      {
        v44 = *(_DWORD **)v42;
        *(_QWORD *)v42 = 0;
        if (v44)
        {
          if (*v44 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v19);
          else
            *v44 -= 2;
        }
        v42 = (WTF *)((char *)v42 + 8);
        v43 -= 8;
      }
      while (v43);
    }
    v33 = v54;
    if (v57 != (_BYTE *)v54 && v54 != 0)
    {
      v54 = 0;
      v55 = 0;
      goto LABEL_107;
    }
  }
LABEL_90:
  if (HIDWORD(v64))
  {
    v46 = v63;
    v47 = 8 * HIDWORD(v64);
    do
    {
      v48 = *(_DWORD **)v46;
      *(_QWORD *)v46 = 0;
      if (v48)
      {
        if (*v48 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v48, v19);
        else
          *v48 -= 2;
      }
      v46 = (WTF *)((char *)v46 + 8);
      v47 -= 8;
    }
    while (v47);
  }
  v49 = v63;
  if (v65 != (_BYTE *)v63 && v63 != 0)
  {
    v63 = 0;
    LODWORD(v64) = 0;
    WTF::fastFree(v49, v19);
  }
  return v21;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeGridTrackRepeatFunction(__int128 **a1, WebCore::CSSParserTokenRange *a2, uint64_t a3, WTF *a4, BOOL *a5)
{
  __int128 *v9;
  const WebCore::CSSValue *v10;
  __int128 *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int128 *v18;
  __int128 *v19;
  char v20;
  unsigned int v21;
  __int128 *v22;
  int v23;
  WebCore::CSSPropertyParserHelpers *v24;
  int v25;
  unint64_t v26;
  WebCore::CSSPropertyParserHelpers *v27;
  uint64_t v28;
  WebCore::CSSPropertyParserHelpers *v29;
  uint64_t v30;
  int v31;
  WTF *v32;
  uint64_t *v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  WTF *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::CSSPropertyParserHelpers *v52;
  int v53;
  __int128 *v54;
  __int128 *v55;
  char v56;
  unsigned int v57;
  __int128 *v58;
  int v59;
  WTF *v60;
  uint64_t v61;
  _DWORD *v62;
  WTF *v63;
  WebCore::CSSPropertyParserHelpers *v65;
  WTF *v66;
  uint64_t v67;
  _DWORD *v68;
  int v70;
  int v71;
  int v72;
  WTF *v73;
  int v74;
  unsigned int v75;
  _BYTE v76[32];
  WTF *v77;
  int v78;
  unsigned int v79;
  _BYTE v80[32];
  WebCore::CSSPropertyParserHelpers *v81;
  WebCore::CSSPropertyParserHelpers *v82;
  WTF *v83;
  uint64_t v84;
  _BYTE v85[32];
  __int128 v86;

  v9 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(a1, a2);
  *(_QWORD *)&v86 = v9;
  *((_QWORD *)&v86 + 1) = v10;
  v83 = (WTF *)v85;
  v84 = 4;
  if (v9 >= (__int128 *)v10)
  {
    v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
    }
    if ((v12 & 0x3F) != 0)
      goto LABEL_4;
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v11 = v9;
    v12 = *(_DWORD *)v9;
    if ((*(_DWORD *)v9 & 0x3F) != 0)
      goto LABEL_4;
  }
  if ((v12 & 0x3F) == 0)
  {
    v53 = *((_DWORD *)v11 + 4);
    if (v53 < 0)
    {
      v53 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((v12 >> 22) & 1) << 32));
      *((_DWORD *)v11 + 4) = v53;
    }
    if ((unsigned __int16)v53 - 965 <= 1)
    {
      v54 = (__int128 *)v86;
      if ((_QWORD)v86 == *((_QWORD *)&v86 + 1))
      {
        v57 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v56 = 1;
        {
          v57 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v57;
        }
        v55 = (__int128 *)v86;
        v54 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v55 = (__int128 *)(v86 + 24);
        *(_QWORD *)&v86 = v86 + 24;
        v57 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if ((unint64_t)v55 < *((_QWORD *)&v86 + 1) || (v56 & 1) != 0)
        {
          v58 = (unint64_t)v55 >= *((_QWORD *)&v86 + 1)
              ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
              : v55;
          v59 = *(_DWORD *)v58;
        }
        else
        {
          v57 = v57 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v57;
          v56 = 1;
          LOBYTE(v59) = v57;
        }
        if ((v59 & 0x3F) != 0x10)
          break;
        v55 = (__int128 *)((char *)v55 + 24);
        *(_QWORD *)&v86 = v55;
      }
      if ((*(_DWORD *)v54 & 0x3F) != 0)
      {
        LOWORD(v14) = 0;
      }
      else
      {
        v14 = *((_DWORD *)v54 + 4);
        if (v14 < 0)
        {
          v70 = WebCore::cssValueKeywordID(*((_QWORD *)v54 + 1), *((unsigned int *)v54 + 1) | ((unint64_t)((*(_DWORD *)v54 >> 22) & 1) << 32));
          LOWORD(v14) = v70;
          *((_DWORD *)v54 + 4) = v70;
        }
      }
      v17 = 0;
      v16 = 1;
      *(_BYTE *)a4 = 1;
      goto LABEL_11;
    }
  }
LABEL_4:
  *(_BYTE *)a4 = 0;
  v13 = WebCore::CSSPropertyParserHelpers::consumeIntegerTypeRaw<unsigned int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)1>((uint64_t)&v86);
  if ((v13 & 0xFF00000000) == 0)
    goto LABEL_53;
  LOWORD(v14) = 0;
  v15 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v15 = 1000000;
  if (v13 >= v15)
    v16 = v15;
  else
    v16 = v13;
  v17 = 1;
LABEL_11:
  v18 = (__int128 *)v86;
  v19 = (__int128 *)v86;
  if ((unint64_t)v86 >= *((_QWORD *)&v86 + 1))
  {
    v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v19 & 0x3F) == 0x15)
  {
    if ((_QWORD)v86 == *((_QWORD *)&v86 + 1))
    {
      v21 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v20 = 1;
      {
        v21 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
      }
    }
    else
    {
      v18 = (__int128 *)(v86 + 24);
      *(_QWORD *)&v86 = v86 + 24;
      v21 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    while (1)
    {
      if ((unint64_t)v18 < *((_QWORD *)&v86 + 1) || (v20 & 1) != 0)
      {
        v22 = (unint64_t)v18 >= *((_QWORD *)&v86 + 1)
            ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken
            : v18;
        v23 = *(_DWORD *)v22;
      }
      else
      {
        v21 = v21 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
        v20 = 1;
        LOBYTE(v23) = v21;
      }
      if ((v23 & 0x3F) != 0x10)
        break;
      v18 = (__int128 *)((char *)v18 + 24);
      *(_QWORD *)&v86 = v18;
    }
    WebCore::CSSPropertyParserHelpers::consumeGridLineNames(&v86, 0, (uint64_t *)&v82);
    v24 = v82;
    if (v82)
    {
      v25 = HIDWORD(v84);
      if (HIDWORD(v84) == (_DWORD)v84)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, HIDWORD(v84) + 1);
        v25 = HIDWORD(v84);
      }
      *((_QWORD *)v83 + HIDWORD(v84)) = v24;
      HIDWORD(v84) = v25 + 1;
    }
    if ((_QWORD)v86 != *((_QWORD *)&v86 + 1))
    {
      v26 = 0;
      do
      {
        WebCore::CSSPropertyParserHelpers::consumeGridTrackSize((__int128 **)&v86, a2, (int **)&v82);
        v27 = v82;
        if (!v82)
          goto LABEL_53;
        if (*a5)
          *a5 = WebCore::CSSPropertyParserHelpers::isGridTrackFixedSized(v82, v10);
        v81 = v27;
        v82 = 0;
        LODWORD(v28) = HIDWORD(v84);
        if (HIDWORD(v84) == (_DWORD)v84)
        {
          v33 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, HIDWORD(v84) + 1, (unint64_t)&v81);
          v28 = HIDWORD(v84);
          v34 = v83;
          v35 = *v33;
          *v33 = 0;
          *((_QWORD *)v34 + v28) = v35;
        }
        else
        {
          v81 = 0;
          *((_QWORD *)v83 + HIDWORD(v84)) = v27;
        }
        HIDWORD(v84) = v28 + 1;
        v29 = v81;
        v81 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v10);
          else
            *(_DWORD *)v29 -= 2;
        }
        WebCore::CSSPropertyParserHelpers::consumeGridLineNames(&v86, 0, (uint64_t *)&v81);
        v30 = (uint64_t)v81;
        if (v81)
        {
          v81 = 0;
          v31 = HIDWORD(v84);
          if (HIDWORD(v84) == (_DWORD)v84)
          {
            WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v83, HIDWORD(v84) + 1);
            v31 = HIDWORD(v84);
          }
          *((_QWORD *)v83 + HIDWORD(v84)) = v30;
          HIDWORD(v84) = v31 + 1;
        }
        v32 = (WTF *)*((_QWORD *)&v86 + 1);
        ++v26;
      }
      while ((_QWORD)v86 != *((_QWORD *)&v86 + 1));
      if (!v26)
        goto LABEL_53;
      v36 = *(unsigned __int8 *)a4;
      if (!*(_BYTE *)a4)
      {
        v45 = WebCore::GridPosition::gMaxPositionForTesting;
        if (!byte_1EE2F9580)
          v45 = 1000000;
        v46 = v45 / v26;
        if (v46 >= v16)
          v47 = v16;
        else
          v47 = v46;
        v73 = (WTF *)v76;
        v74 = 4;
        v48 = v83;
        if (v83 == (WTF *)v85)
        {
          v49 = HIDWORD(v84);
          memcpy(v76, v85, 8 * HIDWORD(v84));
        }
        else
        {
          v83 = (WTF *)v85;
          v73 = v48;
          v72 = v84;
          v49 = HIDWORD(v84);
          LODWORD(v84) = 4;
          v74 = v72;
        }
        HIDWORD(v84) = 0;
        v75 = v49;
        WebCore::CSSGridIntegerRepeatValue::create(v47, (uint64_t)&v73, (uint64_t *)&v82);
        v50 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v50 == *(_DWORD *)(a3 + 8))
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v50 + 1);
          v50 = *(unsigned int *)(a3 + 12);
        }
        v51 = *(_QWORD *)a3;
        v52 = v82;
        v82 = 0;
        *(_QWORD *)(v51 + 8 * v50) = v52;
        *(_DWORD *)(a3 + 12) = v50 + 1;
        v65 = v82;
        v82 = 0;
        if (v65)
        {
          if (*(_DWORD *)v65 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, v10);
          else
            *(_DWORD *)v65 -= 2;
        }
        if (v75)
        {
          v66 = v73;
          v67 = 8 * v75;
          do
          {
            v68 = *(_DWORD **)v66;
            *(_QWORD *)v66 = 0;
            if (v68)
            {
              if (*v68 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v68, v10);
              else
                *v68 -= 2;
            }
            v66 = (WTF *)((char *)v66 + 8);
            v67 -= 8;
          }
          while (v67);
        }
        v63 = v73;
        if (v76 == (_BYTE *)v73 || v73 == 0)
          goto LABEL_128;
        v73 = 0;
        v74 = 0;
        goto LABEL_136;
      }
      if (v17)
      {
        __break(1u);
      }
      else
      {
        a4 = (WTF *)v80;
        v77 = (WTF *)v80;
        v36 = 4;
        v78 = 4;
        v32 = v83;
        if (v83 == (WTF *)v85)
        {
          v37 = HIDWORD(v84);
          memcpy(v80, v85, 8 * HIDWORD(v84));
LABEL_51:
          HIDWORD(v84) = 0;
          v79 = v37;
          WebCore::CSSGridAutoRepeatValue::create((unsigned __int16)v14, (uint64_t)&v77, (uint64_t *)&v82);
          v38 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v38 == *(_DWORD *)(a3 + 8))
          {
            WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v38 + 1);
            v38 = *(unsigned int *)(a3 + 12);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v38) = v82;
          *(_DWORD *)(a3 + 12) = v38 + 1;
          if (v79)
          {
            v60 = v77;
            v61 = 8 * v79;
            do
            {
              v62 = *(_DWORD **)v60;
              *(_QWORD *)v60 = 0;
              if (v62)
              {
                if (*v62 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v62, v10);
                else
                  *v62 -= 2;
              }
              v60 = (WTF *)((char *)v60 + 8);
              v61 -= 8;
            }
            while (v61);
          }
          v63 = v77;
          if (a4 == v77 || v77 == 0)
            goto LABEL_128;
          v77 = 0;
          v78 = 0;
LABEL_136:
          WTF::fastFree(v63, v10);
LABEL_128:
          v39 = 1;
          goto LABEL_54;
        }
      }
      v83 = (WTF *)v85;
      v77 = v32;
      v71 = v84;
      v37 = HIDWORD(v84);
      LODWORD(v84) = v36;
      v78 = v71;
      goto LABEL_51;
    }
  }
LABEL_53:
  v39 = 0;
LABEL_54:
  v40 = v83;
  if (HIDWORD(v84))
  {
    v41 = 8 * HIDWORD(v84);
    do
    {
      v42 = *(_DWORD **)v40;
      *(_QWORD *)v40 = 0;
      if (v42)
      {
        if (*v42 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v42, v10);
        else
          *v42 -= 2;
      }
      v40 = (WTF *)((char *)v40 + 8);
      v41 -= 8;
    }
    while (v41);
    v40 = v83;
  }
  if (v85 != (_BYTE *)v40 && v40 != 0)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    WTF::fastFree(v40, v10);
  }
  return v39;
}

BOOL WebCore::CSSPropertyParserHelpers::isGridTrackFixedSized(WebCore::CSSPropertyParserHelpers *this, const WebCore::CSSValue *a2)
{
  int v3;
  int v4;
  int v5;
  _BOOL8 result;
  int v7;
  uint64_t v8;
  const WebCore::CSSPrimitiveValue *v9;
  _BYTE *v10;
  uint64_t v11;

  v3 = *((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16);
  if ((v3 & 0x3F800) != 0)
  {
    if ((v3 & 0x3F800) != 0x1E000)
    {
      __break(0xC471u);
      JUMPOUT(0x1958DBEA0);
    }
    if (*((_WORD *)this + 28) == 554 || *((_DWORD *)this + 2) < 2u)
    {
      return 0;
    }
    else
    {
      v8 = *((_QWORD *)this + 2);
      if (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1958DBEC0);
      }
      if (WebCore::CSSPropertyParserHelpers::isGridTrackFixedSized((WebCore::CSSPropertyParserHelpers *)v8, a2))
      {
        return 1;
      }
      else
      {
        if (*((_DWORD *)this + 2) < 2u)
          v11 = 0;
        else
          v11 = *((_QWORD *)this + 3);
        if (((*(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16)) & 0x3F800) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1958DBEE8);
        }
        return WebCore::CSSPropertyParserHelpers::isGridTrackFixedSized((WebCore::CSSPropertyParserHelpers *)v11, v9);
      }
    }
  }
  else
  {
    v4 = *((_WORD *)this + 2) & 0x7F;
    if (v4 != 80 || (result = 0, v7 = *((unsigned __int16 *)this + 4), (v7 - 549) >= 4) && v7 != 394)
    {
      v5 = 22;
      if ((v4 - 79) >= 2)
      {
        if (v4 == 77)
        {
          v5 = 20;
        }
        else if (v4 != 63)
        {
          v5 = v4;
          if (v4 == 73)
          {
            v10 = *(_BYTE **)(*((_QWORD *)this + 1) + 8);
            if (v10[12] == 1)
            {
LABEL_20:
              v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
            }
            else
            {
              v5 = 1;
              switch(v10[12])
              {
                case 0:
                  return v5 != 59;
                case 2:
                  v5 = 3;
                  break;
                case 3:
                  v5 = 74;
                  break;
                case 4:
                  v5 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_20;
                default:
                  v5 = 0;
                  break;
              }
            }
          }
        }
      }
      return v5 != 59;
    }
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeGridTemplatesRowsOrColumns@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v7;
  int v9;
  unsigned int *v10;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) == 0)
  {
    v9 = *((_DWORD *)v7 + 4);
    if (v9 < 0)
    {
      v9 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      *((_DWORD *)v7 + 4) = v9;
    }
    if ((unsigned __int16)v9 == 6)
      return WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
  }
  if ((*(_WORD *)((_BYTE *)a2 + 51) & 0x100) == 0)
    return WebCore::CSSPropertyParserHelpers::consumeGridTrackList((uint64_t)this, (uint64_t)a2, 0, a3);
  v10 = (unsigned int *)*this;
  if (*this >= this[1])
  {
    v10 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v10) == 897)
    return WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
  else
    return WebCore::CSSPropertyParserHelpers::consumeGridTrackList((uint64_t)this, (uint64_t)a2, 0, a3);
}

void WebCore::CSSPropertyParserHelpers::consumeGridTemplateAreas(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  WebCore::CSSParserTokenRange *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  int *v13;
  uint64_t v14;
  WTF::StringImpl **v15;

  v5 = *this;
  if (v5 >= this[1])
  {
    v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v5) == 6)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v6, a2);
  }
  else
  {
    v7 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v8 = (__int128 *)*this;
      if (*this >= this[1])
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v8 & 0x3F) != 0x1C)
        break;
      v9 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
      if ((WebCore::CSSPropertyParserHelpers::parseGridTemplateAreasRow(*((unsigned __int8 **)v9 + 1), (unsigned __int8 *)(*((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32)), (uint64_t *)&v15, v7, (unint64_t *)&v14) & 1) == 0)goto LABEL_13;
      ++v7;
    }
    if (v7)
    {
      v10 = v15;
      v15 = 0;
      v12 = v10;
      WebCore::CSSGridTemplateAreasValue::create((uint64_t *)&v12, v7, v14, (uint64_t *)&v13);
      *a2 = v13;
      v13 = 0;
      WebCore::NamedGridAreaMap::~NamedGridAreaMap(&v12, v11);
      goto LABEL_12;
    }
LABEL_13:
    *a2 = 0;
LABEL_12:
    WebCore::NamedGridAreaMap::~NamedGridAreaMap(&v15, v6);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeLineBoxContain@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  uint64_t v3;
  __int128 *v5;
  int v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  __int128 *v11;
  char v12;
  __int128 *v13;
  unsigned int v14;
  int v15;

  v3 = this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  if ((unsigned __int16)this == 6)
    return WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)v3, a2, a3);
LABEL_3:
  v6 = 0;
  v7 = *(_QWORD *)(v3 + 8);
  while (1)
  {
    v8 = *(__int128 **)v3;
    if (*(_QWORD *)v3 >= v7)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v8 & 0x3F) != 0)
      break;
    v9 = *(__int128 **)v3;
    if (*(_QWORD *)v3 >= v7)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
      goto LABEL_47;
    this = *((unsigned int *)v9 + 4);
    if ((this & 0x80000000) != 0)
    {
      this = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
      *((_DWORD *)v9 + 4) = this;
    }
    switch((__int16)this)
    {
      case 707:
        v10 = 4;
        goto LABEL_24;
      case 708:
        v10 = 8;
        goto LABEL_24;
      case 709:
        v10 = 32;
        goto LABEL_24;
      case 710:
        v10 = 64;
        goto LABEL_24;
      case 711:
        v10 = 16;
        goto LABEL_24;
      default:
        if ((unsigned __int16)this == 367)
        {
          v10 = 1;
        }
        else
        {
          if ((unsigned __int16)this != 366)
            goto LABEL_47;
          v10 = 2;
        }
LABEL_24:
        if ((v10 & v6) != 0)
          goto LABEL_47;
        v11 = *(__int128 **)v3;
        v7 = *(_QWORD *)(v3 + 8);
        if (*(_QWORD *)v3 == v7)
        {
          v12 = 1;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v11 = *(__int128 **)v3;
          }
        }
        else
        {
          v11 = (__int128 *)((char *)v11 + 24);
          *(_QWORD *)v3 = v11;
        }
        v6 |= v10;
        while (1)
        {
          if ((unint64_t)v11 < v7 || (v12 & 1) != 0)
          {
            v13 = (unint64_t)v11 >= v7 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
            v14 = *(_DWORD *)v13;
          }
          else
          {
            v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
            v12 = 1;
          }
          if ((v14 & 0x3F) != 0x10)
            break;
          v11 = (__int128 *)(*(_QWORD *)v3 + 24);
          *(_QWORD *)v3 = v11;
        }
        break;
    }
  }
  if (v6)
  {
    this = WTF::fastCompactMalloc((WTF *)8);
    *(_DWORD *)this = 2;
    v15 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(this + 4) = 22528;
    *(_BYTE *)(this + 6) = BYTE2(v15);
    *(_BYTE *)(this + 7) = v6;
    *a3 = (int *)this;
    return this;
  }
LABEL_47:
  *a3 = 0;
  return this;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeContainerName@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  int v11;
  WTF::StringImpl *result;
  int v13;
  uint64_t *v14;
  unsigned int v15;
  int v16;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  int v31;
  int v32;
  int v33;
  WTF *__src;
  WTF *v35;
  int v36;
  unsigned int v37;
  _BYTE v38[32];
  WTF *v39;
  uint64_t v40;
  _BYTE v41[32];
  WTF::StringImpl *v42;

  v6 = *this;
  v5 = (unint64_t)this[1];
  if ((unint64_t)*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v31 = *((_DWORD *)v6 + 4);
    if (v31 < 0)
    {
      v31 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v31;
    }
    if ((unsigned __int16)v31 == 6)
      return (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
    v5 = (unint64_t)this[1];
  }
  v39 = (WTF *)v41;
  v40 = 4;
  v7 = *this;
  while (1)
  {
    if ((unint64_t)v7 >= v5)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v7 & 0x3F) == 0)
    {
      v16 = *((_DWORD *)v7 + 4);
      if (v16 < 0)
      {
        v16 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
        *((_DWORD *)v7 + 4) = v16;
      }
      if ((unsigned __int16)v16 - 1006 < 3 || (unsigned __int16)v16 == 6)
        break;
    }
    WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)this, 0, &v42);
    v8 = v42;
    if (!v42)
      break;
    v42 = 0;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 2;
    v10 = *(_BYTE *)(v9 + 6);
    *(_WORD *)(v9 + 4) = 63;
    *(_BYTE *)(v9 + 6) = v10 & 0xFC;
    *(_QWORD *)(v9 + 8) = v8;
    v11 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    if (v11)
      *(_DWORD *)v8 = v11;
    else
      WTF::StringImpl::destroy(v8, a2);
    result = v42;
    v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v13 = HIDWORD(v40);
    if (HIDWORD(v40) == (_DWORD)v40)
    {
      v18 = HIDWORD(v40) + ((unint64_t)HIDWORD(v40) >> 2);
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= (unint64_t)HIDWORD(v40) + 1)
        v19 = HIDWORD(v40) + 1;
      __src = v39;
      if (v19 < 5)
      {
        v39 = (WTF *)v41;
        LODWORD(v40) = 4;
        v20 = (WTF *)v41;
      }
      else
      {
        if (v19 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v33 = v19;
        v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v19));
        LODWORD(v40) = v33;
        v39 = v20;
      }
      memcpy(v20, __src, 8 * HIDWORD(v40));
      if (v41 != (_BYTE *)__src && __src)
      {
        if (v39 == __src)
        {
          v39 = 0;
          LODWORD(v40) = 0;
        }
        WTF::fastFree(__src, a2);
      }
      v13 = HIDWORD(v40);
      v14 = (uint64_t *)((char *)v39 + 8 * HIDWORD(v40));
    }
    else
    {
      v14 = (uint64_t *)((char *)v39 + 8 * HIDWORD(v40));
    }
    *v14 = v9;
    v15 = v13 + 1;
    HIDWORD(v40) = v15;
    v7 = *this;
    v5 = (unint64_t)this[1];
    if (*this == (__int128 *)v5)
      goto LABEL_44;
  }
  v15 = HIDWORD(v40);
LABEL_44:
  if (v15)
  {
    v35 = (WTF *)v38;
    v36 = 4;
    v21 = v39;
    if (v39 == (WTF *)v41)
    {
      memcpy(v38, v41, 8 * v15);
    }
    else
    {
      v39 = (WTF *)v41;
      v35 = v21;
      v32 = v40;
      LODWORD(v40) = 4;
      v36 = v32;
    }
    HIDWORD(v40) = 0;
    v37 = v15;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v35, (uint64_t *)&v42);
    *a3 = (int *)v42;
    if (v37)
    {
      v22 = v35;
      v23 = 8 * v37;
      do
      {
        v24 = *(_DWORD **)v22;
        *(_QWORD *)v22 = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, a2);
          else
            *v24 -= 2;
        }
        v22 = (WTF *)((char *)v22 + 8);
        v23 -= 8;
      }
      while (v23);
    }
    v25 = v35;
    if (v38 != (_BYTE *)v35 && v35 != 0)
    {
      v35 = 0;
      v36 = 0;
      WTF::fastFree(v25, a2);
    }
    if (HIDWORD(v40))
    {
      v27 = v39;
      v28 = 8 * HIDWORD(v40);
      do
      {
        v29 = *(_DWORD **)v27;
        *(_QWORD *)v27 = 0;
        if (v29)
        {
          if (*v29 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, a2);
          else
            *v29 -= 2;
        }
        v27 = (WTF *)((char *)v27 + 8);
        v28 -= 8;
      }
      while (v28);
    }
  }
  else
  {
    *a3 = 0;
  }
  result = v39;
  if (v41 != (_BYTE *)v39 && v39 != 0)
  {
    v39 = 0;
    LODWORD(v40) = 0;
    return (WTF::StringImpl *)WTF::fastFree(result, a2);
  }
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeWebkitInitialLetter@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  int *result;
  int *v6;
  WTF::StringImpl *v7;
  int *v8;
  uint64_t v9;
  int v10;
  int *v11;
  int *v12;

  result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)90>((uint64_t)this, &v12);
  if (v12)
  {
    *a2 = (uint64_t)v12;
    return result;
  }
  result = (int *)WebCore::CSSPropertyParserHelpers::consumeNumber(this, (void *)1, &v12);
  v6 = v12;
  if (!v12)
  {
    *a2 = 0;
    return result;
  }
  if (*this == this[1])
  {
    *v12 += 2;
    v8 = v6;
LABEL_13:
    v12 = 0;
    v9 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v9 = 2;
    v10 = (*(unsigned __int8 *)(v9 + 6) << 16) & 0xFC0000;
    *(_BYTE *)(v9 + 7) = 1;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 16) = v6;
    *(_WORD *)(v9 + 4) = -18432;
    *(_BYTE *)(v9 + 6) = (v10 | 0x10000u) >> 16;
    *a2 = v9;
    goto LABEL_14;
  }
  WebCore::CSSPropertyParserHelpers::consumeNumber(this, (void *)1, &v11);
  v8 = v11;
  if (!v11)
  {
    *a2 = 0;
    goto LABEL_14;
  }
  if (*this == this[1])
  {
    v6 = v12;
    goto LABEL_13;
  }
  *a2 = 0;
  if (*v8 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
  else
    *v8 -= 2;
LABEL_14:
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
    else
      *result -= 2;
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeSpeakAs@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  int *v12;
  int *v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  int v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  __int128 *v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  int v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  int *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  WTF *result;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  _DWORD *v50;
  WTF *v51;
  int v54;
  int v55;
  int v56;
  int v57;
  int *v58;
  WTF *v59;
  int v60;
  unsigned int v61;
  _BYTE v62[32];
  int *v63;
  WTF *v64;
  uint64_t v65;
  _BYTE v66[32];

  v6 = *this;
  v5 = (unint64_t)this[1];
  if ((unint64_t)*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v45 = *((_DWORD *)v6 + 4);
    if (v45 < 0)
    {
      v45 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v45;
    }
    if ((unsigned __int16)v45 == 6)
      return (WTF *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
    v5 = (unint64_t)this[1];
  }
  v64 = (WTF *)v66;
  v65 = 4;
  v7 = *this;
  if (*this == (__int128 *)v5)
  {
LABEL_108:
    *a3 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = &dword_1ECE90000;
    v13 = WebCore::staticCSSValuePool;
    do
    {
      if ((unint64_t)v7 >= v5)
      {
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v12[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          *((_BYTE *)v12 + 1248) = 1;
          v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v7 & 0x3F) != 0)
      {
        v14 = 0;
      }
      else
      {
        v26 = *((_DWORD *)v7 + 4);
        if (v26 < 0)
        {
          v27 = v12;
          v56 = v8;
          v28 = v9;
          v29 = v13;
          v26 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
          v13 = v29;
          v9 = v28;
          v8 = v56;
          v12 = v27;
          *((_DWORD *)v7 + 4) = v26;
        }
        v14 = (unsigned __int16)v26;
      }
      if (((v14 == 90) & v10) != 0
        || ((v14 == 656) & v11) != 0
        || ((v14 == 658) & v8) != 0
        || ((v14 == 659) & v9) != 0)
      {
        goto LABEL_77;
      }
      v16 = *this;
      v15 = this[1];
      if (*this >= v15)
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v12[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          *((_BYTE *)v12 + 1248) = 1;
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_BYTE *)v16 & 0x3F) != 0)
        goto LABEL_77;
      v17 = *this;
      if (*this >= v15)
      {
        v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v12[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          *((_BYTE *)v12 + 1248) = 1;
          v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v17 & 0x3F) != 0)
        goto LABEL_77;
      v18 = *((_DWORD *)v17 + 4);
      if (v18 < 0)
      {
        v55 = v8;
        v19 = v9;
        v20 = v13;
        v18 = WebCore::cssValueKeywordID(*((_QWORD *)v17 + 1), *((unsigned int *)v17 + 1) | ((unint64_t)((*(_DWORD *)v17 >> 22) & 1) << 32));
        v13 = v20;
        v9 = v19;
        v8 = v55;
        v12 = &dword_1ECE90000;
        *((_DWORD *)v17 + 4) = v18;
      }
      if ((unsigned __int16)v18 - 656 >= 4 && (unsigned __int16)v18 != 90)
      {
LABEL_77:
        *a3 = 0;
        goto LABEL_78;
      }
      v22 = *this;
      v21 = (unint64_t)this[1];
      if (*this == (__int128 *)v21)
      {
        v24 = 1;
        if ((v12[312] & 1) == 0)
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          *((_BYTE *)v12 + 1248) = 1;
        }
        v23 = *this;
        v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v23 = (__int128 *)((char *)v22 + 24);
        *this = (__int128 *)((char *)v22 + 24);
        v24 = *((_BYTE *)v12 + 1248);
      }
      while (1)
      {
        if ((unint64_t)v23 < v21 || (v24 & 1) != 0)
        {
          if ((unint64_t)v23 >= v21)
            v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v25 = *(_DWORD *)v23;
        }
        else
        {
          v25 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
          v24 = 1;
          *((_BYTE *)v12 + 1248) = 1;
        }
        if ((v25 & 0x3F) != 0x10)
          break;
        v23 = (__int128 *)((char *)*this + 24);
        *this = v23;
      }
      if ((*(_DWORD *)v22 & 0x3F) != 0)
      {
        LOWORD(v30) = 0;
      }
      else
      {
        v30 = *((_DWORD *)v22 + 4);
        if (v30 < 0)
        {
          v57 = v8;
          v35 = v9;
          v36 = v13;
          v30 = WebCore::cssValueKeywordID(*((_QWORD *)v22 + 1), *((unsigned int *)v22 + 1) | ((unint64_t)((*(_DWORD *)v22 >> 22) & 1) << 32));
          v13 = v36;
          v9 = v35;
          v8 = v57;
          v12 = &dword_1ECE90000;
          *((_DWORD *)v22 + 4) = v30;
        }
        if ((unsigned __int16)v30 >= 0x48Eu)
        {
LABEL_116:
          __break(0xC471u);
          JUMPOUT(0x1958DD0F0);
        }
      }
      v31 = &v13[4 * (unsigned __int16)v30];
      v31[3088] += 2;
      if (v14 > 657)
      {
        if (v14 == 658)
        {
          v9 = 1;
        }
        else if (v14 == 659)
        {
          v8 = 1;
        }
      }
      else if (v14 == 90)
      {
        v11 = 1;
      }
      else if (v14 == 656)
      {
        v10 = 1;
      }
      v32 = HIDWORD(v65);
      if (HIDWORD(v65) == (_DWORD)v65)
      {
        v58 = &v13[4 * (unsigned __int16)v30];
        v37 = HIDWORD(v65) + ((unint64_t)HIDWORD(v65) >> 2);
        if (v37 >= 0x10)
          v38 = v37 + 1;
        else
          v38 = 16;
        if (v38 <= (unint64_t)HIDWORD(v65) + 1)
          v39 = HIDWORD(v65) + 1;
        else
          v39 = v38;
        v40 = v64;
        if (v39 < 5)
        {
          v64 = (WTF *)v66;
          LODWORD(v65) = 4;
          v41 = (WTF *)v66;
        }
        else
        {
          if (v39 >> 29)
            goto LABEL_116;
          v41 = (WTF *)WTF::fastMalloc((WTF *)(8 * v39));
          LODWORD(v65) = v39;
          v64 = v41;
        }
        memcpy(v41, v40, 8 * HIDWORD(v65));
        if (v66 != (_BYTE *)v40 && v40)
        {
          if (v64 == v40)
          {
            v64 = 0;
            LODWORD(v65) = 0;
          }
          WTF::fastFree(v40, a2);
        }
        v32 = HIDWORD(v65);
        v33 = (_QWORD *)((char *)v64 + 8 * HIDWORD(v65));
        v12 = &dword_1ECE90000;
        v13 = WebCore::staticCSSValuePool;
        v31 = v58;
      }
      else
      {
        v33 = (_QWORD *)((char *)v64 + 8 * HIDWORD(v65));
      }
      *v33 = v31 + 3088;
      v34 = v32 + 1;
      HIDWORD(v65) = v34;
      v7 = *this;
      v5 = (unint64_t)this[1];
    }
    while (*this != (__int128 *)v5);
    if (!v34)
      goto LABEL_108;
    v59 = (WTF *)v62;
    v60 = 4;
    v47 = v64;
    if (v64 == (WTF *)v66)
    {
      memcpy(v62, v66, 8 * v34);
    }
    else
    {
      v64 = (WTF *)v66;
      v59 = v47;
      v54 = v65;
      LODWORD(v65) = 4;
      v60 = v54;
    }
    HIDWORD(v65) = 0;
    v61 = v34;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v59, (uint64_t *)&v63);
    *a3 = v63;
    if (v61)
    {
      v48 = v59;
      v49 = 8 * v61;
      do
      {
        v50 = *(_DWORD **)v48;
        *(_QWORD *)v48 = 0;
        if (v50)
        {
          if (*v50 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, a2);
          else
            *v50 -= 2;
        }
        v48 = (WTF *)((char *)v48 + 8);
        v49 -= 8;
      }
      while (v49);
    }
    v51 = v59;
    if (v62 != (_BYTE *)v59 && v59 != 0)
    {
      v59 = 0;
      v60 = 0;
      WTF::fastFree(v51, a2);
    }
LABEL_78:
    if (HIDWORD(v65))
    {
      v42 = v64;
      v43 = 8 * HIDWORD(v65);
      do
      {
        v44 = *(_DWORD **)v42;
        *(_QWORD *)v42 = 0;
        if (v44)
        {
          if (*v44 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, a2);
          else
            *v44 -= 2;
        }
        v42 = (WTF *)((char *)v42 + 8);
        v43 -= 8;
      }
      while (v43);
    }
  }
  result = v64;
  if (v66 != (_BYTE *)v64 && v64 != 0)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeHangingPunctuation@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  __int128 *v12;
  int *v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  int v18;
  uint64_t v19;
  int *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  int v26;
  __int128 *v27;
  int *v28;
  int v29;
  int *v30;
  int v31;
  _QWORD *v32;
  unsigned int v33;
  __int128 *v34;
  int *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  WTF *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  int v45;
  WTF *result;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  _DWORD *v50;
  WTF *v51;
  int v54;
  int v55;
  __int128 *v56;
  int *v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  _BYTE v61[32];
  int *v62;
  WTF *v63;
  uint64_t v64;
  _BYTE v65[32];

  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v45 = *((_DWORD *)v6 + 4);
    if (v45 < 0)
    {
      v45 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v45;
    }
    if ((unsigned __int16)v45 == 6)
      return (WTF *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
    v5 = this[1];
  }
  v63 = (WTF *)v65;
  v64 = 4;
  v7 = *this;
  if (*this == v5)
  {
LABEL_104:
    *a3 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v13 = WebCore::staticCSSValuePool;
    a2 = (WebCore::CSSParserTokenRange *)&jpt_1958DD418;
    do
    {
      if (v7 >= v5)
      {
        v7 = v12;
        {
          *(_DWORD *)v12 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *((_DWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 1) = 0;
          v7 = v12;
        }
      }
      if ((*(_DWORD *)v7 & 0x3F) != 0)
      {
        v14 = 0;
      }
      else
      {
        v26 = *((_DWORD *)v7 + 4);
        if (v26 < 0)
        {
          v27 = v12;
          v28 = v13;
          v26 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
          a2 = (WebCore::CSSParserTokenRange *)&jpt_1958DD418;
          v13 = v28;
          v12 = v27;
          *((_DWORD *)v7 + 4) = v26;
        }
        v14 = (unsigned __int16)v26;
      }
      if (((v14 == 931) & v9) != 0
        || ((v14 == 933) & v8) != 0
        || (v14 == 932 || v14 == 930) && ((v10 | v11) & 1) != 0)
      {
        goto LABEL_73;
      }
      v16 = *this;
      v15 = this[1];
      if (*this >= v15)
      {
        v16 = v12;
        {
          *(_DWORD *)v12 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *((_DWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 1) = 0;
          v16 = v12;
        }
      }
      if ((*(_BYTE *)v16 & 0x3F) != 0)
        goto LABEL_73;
      v17 = *this;
      if (*this >= v15)
      {
        v17 = v12;
        {
          *(_DWORD *)v12 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *((_DWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 1) = 0;
          v17 = v12;
        }
      }
      if ((*(_DWORD *)v17 & 0x3F) != 0)
        goto LABEL_73;
      v18 = *((_DWORD *)v17 + 4);
      if (v18 < 0)
      {
        v55 = v11;
        v19 = v10;
        v20 = v13;
        v18 = WebCore::cssValueKeywordID(*((_QWORD *)v17 + 1), *((unsigned int *)v17 + 1) | ((unint64_t)((*(_DWORD *)v17 >> 22) & 1) << 32));
        v13 = v20;
        v10 = v19;
        v11 = v55;
        *((_DWORD *)v17 + 4) = v18;
      }
      if ((unsigned __int16)v18 - 930 > 3)
      {
LABEL_73:
        *a3 = 0;
        goto LABEL_74;
      }
      v21 = *this;
      v22 = (unint64_t)this[1];
      if (*this == (__int128 *)v22)
      {
        v24 = 1;
        {
          *(_DWORD *)v12 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *((_DWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 1) = 0;
        }
        v23 = *this;
        v21 = v12;
      }
      else
      {
        v23 = (__int128 *)((char *)v21 + 24);
        *this = (__int128 *)((char *)v21 + 24);
      }
      while (1)
      {
        if ((unint64_t)v23 < v22 || (v24 & 1) != 0)
        {
          if ((unint64_t)v23 >= v22)
            v23 = v12;
          v25 = *(_DWORD *)v23;
        }
        else
        {
          v25 = (*((unsigned __int8 *)v12 + 3) << 24) | 0x1E;
          *(_QWORD *)v12 = v25;
          *((_QWORD *)v12 + 1) = 0;
          v24 = 1;
        }
        if ((v25 & 0x3F) != 0x10)
          break;
        v23 = (__int128 *)((char *)*this + 24);
        *this = v23;
      }
      if ((*(_DWORD *)v21 & 0x3F) != 0)
      {
        LOWORD(v29) = 0;
      }
      else
      {
        v29 = *((_DWORD *)v21 + 4);
        if (v29 < 0)
        {
          v34 = v12;
          v35 = v13;
          v56 = v21;
          v29 = WebCore::cssValueKeywordID(*((_QWORD *)v21 + 1), *((unsigned int *)v21 + 1) | ((unint64_t)((*(_DWORD *)v21 >> 22) & 1) << 32));
          a2 = (WebCore::CSSParserTokenRange *)&jpt_1958DD418;
          v13 = v35;
          v12 = v34;
          *((_DWORD *)v56 + 4) = v29;
        }
        if ((unsigned __int16)v29 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958DD7DCLL);
        }
      }
      v30 = &v13[4 * (unsigned __int16)v29];
      v30[3088] += 2;
      switch(v14)
      {
        case 930:
          v10 = 1;
          break;
        case 931:
          v9 = 1;
          break;
        case 932:
          v11 = 1;
          break;
        case 933:
          v8 = 1;
          break;
        default:
          break;
      }
      v31 = HIDWORD(v64);
      if (HIDWORD(v64) == (_DWORD)v64)
      {
        v57 = &v13[4 * (unsigned __int16)v29];
        v36 = HIDWORD(v64) + ((unint64_t)HIDWORD(v64) >> 2);
        if (v36 >= 0x10)
          v37 = v36 + 1;
        else
          v37 = 16;
        if (v37 <= (unint64_t)HIDWORD(v64) + 1)
          v38 = HIDWORD(v64) + 1;
        else
          v38 = v37;
        v39 = v63;
        if (v38 < 5)
        {
          v63 = (WTF *)v65;
          LODWORD(v64) = 4;
          v40 = (WTF *)v65;
        }
        else
        {
          if (v38 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1958DD7FCLL);
          }
          v40 = (WTF *)WTF::fastMalloc((WTF *)(8 * v38));
          LODWORD(v64) = v38;
          v63 = v40;
        }
        memcpy(v40, v39, 8 * HIDWORD(v64));
        if (v65 != (_BYTE *)v39 && v39)
        {
          if (v63 == v39)
          {
            v63 = 0;
            LODWORD(v64) = 0;
          }
          WTF::fastFree(v39, v41);
        }
        v31 = HIDWORD(v64);
        v32 = (_QWORD *)((char *)v63 + 8 * HIDWORD(v64));
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v13 = WebCore::staticCSSValuePool;
        a2 = (WebCore::CSSParserTokenRange *)&jpt_1958DD418;
        v30 = v57;
      }
      else
      {
        v32 = (_QWORD *)((char *)v63 + 8 * HIDWORD(v64));
      }
      *v32 = v30 + 3088;
      v33 = v31 + 1;
      HIDWORD(v64) = v31 + 1;
      v7 = *this;
      v5 = this[1];
    }
    while (*this != v5);
    if (!v33)
      goto LABEL_104;
    v58 = (WTF *)v61;
    v59 = 4;
    v47 = v63;
    if (v63 == (WTF *)v65)
    {
      memcpy(v61, v65, 8 * v33);
    }
    else
    {
      v63 = (WTF *)v65;
      v58 = v47;
      v54 = v64;
      LODWORD(v64) = 4;
      v59 = v54;
    }
    HIDWORD(v64) = 0;
    v60 = v33;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v58, (uint64_t *)&v62);
    *a3 = v62;
    if (v60)
    {
      v48 = v58;
      v49 = 8 * v60;
      do
      {
        v50 = *(_DWORD **)v48;
        *(_QWORD *)v48 = 0;
        if (v50)
        {
          if (*v50 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, a2);
          else
            *v50 -= 2;
        }
        v48 = (WTF *)((char *)v48 + 8);
        v49 -= 8;
      }
      while (v49);
    }
    v51 = v58;
    if (v61 != (_BYTE *)v58 && v58 != 0)
    {
      v58 = 0;
      v59 = 0;
      WTF::fastFree(v51, a2);
    }
LABEL_74:
    if (HIDWORD(v64))
    {
      v42 = v63;
      v43 = 8 * HIDWORD(v64);
      do
      {
        v44 = *(_DWORD **)v42;
        *(_QWORD *)v42 = 0;
        if (v44)
        {
          if (*v44 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, a2);
          else
            *v44 -= 2;
        }
        v42 = (WTF *)((char *)v42 + 8);
        v43 -= 8;
      }
      while (v43);
    }
  }
  result = v63;
  if (v65 != (_BYTE *)v63 && v63 != 0)
  {
    v63 = 0;
    LODWORD(v64) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeContain@<X0>(unsigned int **this@<X0>, int **a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int *v13;
  WebCore::CSSParserTokenRange *v14;
  int *v15;
  int *v16;
  WTF::StringImpl *v17;
  int v18;
  int *v19;
  int v20;
  int v21;
  _BYTE v22[32];
  int *v23;
  int *v24;
  uint64_t v25;
  _QWORD v26[4];

  result = WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6,(WebCore::CSSValueID)574,(WebCore::CSSValueID)599>((uint64_t)&v24, (uint64_t)this);
  if (v24)
  {
    *a2 = v24;
  }
  else
  {
    v7 = *this;
    v8 = (unint64_t)this[1];
    if (*this == (unsigned int *)v8)
    {
      v24 = (int *)v26;
      v25 = 4;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        if ((unint64_t)v7 >= v8)
        {
          v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v7 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        result = (uint64_t)WebCore::CSSParserToken::id(v7);
        if ((int)result <= 1000)
        {
          if ((_DWORD)result == 923)
          {
            if (v12)
              goto LABEL_48;
            WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v14, &v24);
            v12 = v24;
          }
          else
          {
            if ((_DWORD)result != 777)
              goto LABEL_48;
            if (v13)
            {
              *a2 = 0;
              goto LABEL_49;
            }
            WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v14, &v24);
            v13 = v24;
          }
        }
        else if ((_DWORD)result == 1001)
        {
          if (v9)
            goto LABEL_48;
          WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v14, &v24);
          v9 = (uint64_t)v24;
        }
        else if ((_DWORD)result == 1002)
        {
          if (v11)
            goto LABEL_48;
          WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v14, &v24);
          v11 = v24;
        }
        else
        {
          if ((_DWORD)result != 1003 || v10 | v9)
          {
LABEL_48:
            *a2 = 0;
            if (v13)
            {
LABEL_49:
              if (*v13 == 2)
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v14);
              else
                *v13 -= 2;
            }
            if (v12)
            {
              if (*v12 == 2)
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v14);
              else
                *v12 -= 2;
            }
            if (v11)
            {
              if (*v11 == 2)
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v14);
              else
                *v11 -= 2;
            }
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v10, v14);
              else
                *(_DWORD *)v10 -= 2;
            }
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v9, v14);
              else
                *(_DWORD *)v9 -= 2;
            }
            return result;
          }
          WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v14, &v24);
          v9 = 0;
          v10 = (uint64_t)v24;
        }
        v7 = *this;
        v8 = (unint64_t)this[1];
      }
      while (*this != (unsigned int *)v8);
      v24 = (int *)v26;
      v25 = 4;
      if (v9)
      {
        v26[0] = v9;
        LODWORD(v9) = 1;
        HIDWORD(v25) = 1;
      }
      if (v10)
      {
        v26[v9] = v10;
        HIDWORD(v25) = v9 + 1;
        LODWORD(v9) = v9 + 1;
      }
      if (v11)
      {
        v26[v9] = v11;
        HIDWORD(v25) = v9 + 1;
        LODWORD(v9) = v9 + 1;
      }
      if (v12)
      {
        v26[v9] = v12;
        HIDWORD(v25) = v9 + 1;
        LODWORD(v9) = v9 + 1;
      }
      if (v13)
      {
        v23 = v13;
        if ((_DWORD)v9 == (_DWORD)v25)
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v24, (uint64_t *)&v23);
        }
        else
        {
          v23 = 0;
          *(_QWORD *)&v24[2 * v9] = v13;
          HIDWORD(v25) = v9 + 1;
        }
        v15 = v23;
        v23 = 0;
        if (v15)
        {
          if (*v15 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v6);
          else
            *v15 -= 2;
        }
        LODWORD(v9) = HIDWORD(v25);
      }
      if ((_DWORD)v9)
      {
        v19 = (int *)v22;
        v20 = 4;
        v16 = v24;
        if (v24 == (int *)v26)
        {
          memcpy(v22, v26, 8 * v9);
        }
        else
        {
          v24 = (int *)v26;
          v19 = v16;
          v18 = v25;
          LODWORD(v25) = 4;
          v20 = v18;
        }
        HIDWORD(v25) = 0;
        v21 = v9;
        WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v19, (uint64_t *)&v23);
        *a2 = v23;
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v17);
        return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v6);
      }
    }
    *a2 = 0;
    return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v24, v6);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6,(WebCore::CSSValueID)574,(WebCore::CSSValueID)599>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result == 6 || (unsigned __int16)result == 599 || (unsigned __int16)result == 574)
  {
    v9 = *(__int128 **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)a2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)a2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958DDDC0);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  else
  {
LABEL_5:
    v7 = 0;
  }
  *v3 = v7;
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeContainIntrinsicSize(WebCore::CSSPropertyParserHelpers *this@<X0>, uint64_t *a2@<X8>)
{
  void *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  int *v16;

  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394>((uint64_t)this, &v16);
  v6 = v16;
  if (v16)
  {
    if (*(_QWORD *)this == *((_QWORD *)this + 1))
    {
      *a2 = 0;
      goto LABEL_18;
    }
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6>((uint64_t)this, &v16);
    v7 = v16;
    if (v16)
    {
      v16 = 0;
      v8 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v8 = 2;
      v9 = (*(unsigned __int8 *)(v8 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_BYTE *)(v8 + 7) = 1;
      *(_QWORD *)(v8 + 8) = v6;
      *(_QWORD *)(v8 + 16) = v7;
      *(_WORD *)(v8 + 4) = -18432;
      *(_BYTE *)(v8 + 6) = BYTE2(v9);
      *a2 = v8;
      v10 = v16;
      v16 = 0;
      if (!v10)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6>((uint64_t)this, &v16);
    if (v16)
    {
      *a2 = (uint64_t)v16;
      return;
    }
  }
  v15 = 0;
  v16 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, (unsigned __int16 **)&v16, (uint64_t)&v15, 0x100000100, &v14);
  if (v15)
    WTF::fastFree((WTF *)(v15 - 16), v5);
  if (v16)
    WTF::fastFree((WTF *)(v16 - 4), v5);
  v11 = v14;
  if (v14)
  {
    if (!v6)
    {
      *a2 = (uint64_t)v14;
      return;
    }
    v14 = 0;
    v12 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v12 = 2;
    v13 = (*(unsigned __int8 *)(v12 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_BYTE *)(v12 + 7) = 1;
    *(_QWORD *)(v12 + 8) = v6;
    *(_QWORD *)(v12 + 16) = v11;
    *(_WORD *)(v12 + 4) = -18432;
    *(_BYTE *)(v12 + 6) = BYTE2(v13);
    *a2 = v12;
    v10 = v14;
    v14 = 0;
    if (!v10)
      return;
LABEL_15:
    if (*v10 != 2)
    {
      *v10 -= 2;
      return;
    }
LABEL_24:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)v5);
    return;
  }
  *a2 = 0;
  if (v6)
  {
LABEL_18:
    if (*v6 != 2)
    {
      *v6 -= 2;
      return;
    }
    v10 = v6;
    goto LABEL_24;
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeTextEmphasisPosition@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  char v12;
  __int128 *v13;
  unsigned int v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t result;
  int v19;
  int *v20;
  int v21;

  v5 = *this;
  v4 = this[1];
  if (*this == v4)
    goto LABEL_35;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    if (v5 >= v4)
    {
      v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v5 & 0x3F) != 0)
      goto LABEL_35;
    v11 = *((_DWORD *)v5 + 4);
    if (v11 < 0)
    {
      v11 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = v11;
    }
    if ((unsigned __int16)v11 - 258 < 2)
    {
      if (v9)
        goto LABEL_35;
      v9 = 1;
      v10 = (unsigned __int16)v11;
    }
    else
    {
      if ((unsigned __int16)v11 - 689 > 1 || v7)
        goto LABEL_35;
      v7 = 1;
      v8 = (unsigned __int16)v11;
    }
    v5 = *this;
    v4 = this[1];
    if (*this == v4)
    {
      v12 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v5 = *this;
      }
    }
    else
    {
      v5 = (__int128 *)((char *)v5 + 24);
      *this = v5;
    }
    while (1)
    {
      if (v5 < v4 || (v12 & 1) != 0)
      {
        v13 = v5 >= v4 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v5;
        v14 = *(_DWORD *)v13;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v12 = 1;
        v5 = *this;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v5 = (__int128 *)((char *)v5 + 24);
      *this = v5;
    }
  }
  while (v5 != v4);
  if (!v7)
  {
LABEL_35:
    result = 0;
    goto LABEL_36;
  }
  if (!v9)
  {
    if (v8 < 0x48E)
    {
      v20 = &WebCore::staticCSSValuePool[4 * v8 + 3088];
      *v20 += 2;
      result = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)result = 2;
      v21 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
      *(_DWORD *)(result + 8) = 1;
      *(_WORD *)(result + 4) = -10240;
      *(_BYTE *)(result + 6) = (v21 | 0x10000u) >> 16;
      *(_QWORD *)(result + 16) = v20;
      goto LABEL_36;
    }
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x1958DE298);
  }
  if (v8 >= 0x48E)
    goto LABEL_41;
  v15 = &WebCore::staticCSSValuePool[4 * v8];
  v15[3088] += 2;
  if (v10 >= 0x48E)
  {
    __break(0xC471u);
    JUMPOUT(0x1958DE2B8);
  }
  v16 = v15 + 3088;
  v17 = &WebCore::staticCSSValuePool[4 * v10 + 3088];
  *v17 += 2;
  result = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)result = 2;
  v19 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
  *(_DWORD *)(result + 8) = 2;
  *(_WORD *)(result + 4) = -10240;
  *(_BYTE *)(result + 6) = BYTE2(v19) | 1;
  *(_QWORD *)(result + 16) = v16;
  *(_QWORD *)(result + 24) = v17;
LABEL_36:
  *a2 = result;
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeColorScheme@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  char v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  int v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  char *v19;
  _WORD *v20;
  unsigned int v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  _DWORD *v37;
  WTF *v38;
  WTF *v40;
  uint64_t v41;
  _DWORD *v42;
  WTF *v43;
  WTF *result;
  int v47;
  int v48;
  WTF *v49;
  uint64_t v50;
  _BYTE v51[32];
  int *v52;
  WTF *v53;
  uint64_t v54;
  _BYTE v55[32];
  WTF *v56;
  uint64_t v57;
  _BYTE v58[16];

  v6 = *this;
  v5 = (unint64_t)this[1];
  if ((unint64_t)*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) == 0)
  {
    v47 = *((_DWORD *)v6 + 4);
    if (v47 < 0)
    {
      v47 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
      *((_DWORD *)v6 + 4) = v47;
    }
    if ((unsigned __int16)v47 == 90)
      return (WTF *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
    v5 = (unint64_t)this[1];
  }
  v56 = (WTF *)v58;
  v57 = 3;
  v7 = *this;
  if (*this == (__int128 *)v5)
  {
    v53 = (WTF *)v55;
    v54 = 4;
LABEL_45:
    v21 = 0;
    v49 = (WTF *)v51;
    v50 = 4;
LABEL_71:
    memcpy(v51, v55, 8 * v21);
    goto LABEL_72;
  }
  do
  {
    if ((unint64_t)v7 >= v5)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v7 & 0x3F) != 0)
      goto LABEL_43;
    LOWORD(v53) = 0;
    v8 = *this;
    if ((unint64_t)*this >= v5)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0)
    {
      LOWORD(v53) = 0;
    }
    else
    {
      v12 = *((_DWORD *)v8 + 4);
      if (v12 < 0)
      {
        v12 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
        *((_DWORD *)v8 + 4) = v12;
      }
      v13 = v12;
      LOWORD(v53) = v12;
      if ((unsigned __int16)v12 - 963 > 0x2E
        || ((1 << (v12 + 61)) & 0x400000000003) == 0)
      {
        if ((unsigned __int16)v12 == 90)
          goto LABEL_43;
      }
      else
      {
        v15 = HIDWORD(v57);
        if (HIDWORD(v57))
        {
          v16 = v56;
          v17 = HIDWORD(v57);
          while (1)
          {
            v18 = *(unsigned __int16 *)v16;
            v16 = (WTF *)((char *)v16 + 2);
            if (v18 == (unsigned __int16)v12)
              break;
            if (!--v17)
              goto LABEL_35;
          }
LABEL_43:
          *a3 = 0;
          goto LABEL_96;
        }
LABEL_35:
        if (HIDWORD(v57) == (_DWORD)v57)
        {
          v19 = WTF::Vector<WebCore::CSSValueID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v56, HIDWORD(v57) + 1, (unint64_t)&v53);
          v15 = HIDWORD(v57);
          v20 = (_WORD *)((char *)v56 + 2 * HIDWORD(v57));
          v13 = *(_WORD *)v19;
        }
        else
        {
          v20 = (_WORD *)((char *)v56 + 2 * HIDWORD(v57));
        }
        *v20 = v13;
        HIDWORD(v57) = v15 + 1;
      }
    }
    v9 = *this;
    v5 = (unint64_t)this[1];
    if (*this == (__int128 *)v5)
    {
      v10 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v9 = *this;
      }
    }
    else
    {
      v9 = (__int128 *)((char *)v9 + 24);
      *this = v9;
    }
    while (1)
    {
      if ((unint64_t)v9 < v5 || (v10 & 1) != 0)
      {
        if ((unint64_t)v9 >= v5)
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v11 = *(_DWORD *)v9;
      }
      else
      {
        v11 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
        v10 = 1;
      }
      if ((v11 & 0x3F) != 0x10)
        break;
      v9 = (__int128 *)((char *)*this + 24);
      *this = v9;
    }
    v7 = *this;
  }
  while (*this != (__int128 *)v5);
  v22 = v56;
  v53 = (WTF *)v55;
  v54 = 4;
  if (!HIDWORD(v57))
    goto LABEL_45;
  v21 = 0;
  v23 = 2 * HIDWORD(v57);
  v24 = (WTF *)v55;
  do
  {
    v25 = *(unsigned __int16 *)v22;
    if (v25 >= 0x48E)
    {
LABEL_109:
      __break(0xC471u);
      JUMPOUT(0x1958DE884);
    }
    v26 = &WebCore::staticCSSValuePool[4 * v25];
    v26[3088] += 2;
    v27 = v21;
    if (v21 == (_DWORD)v54)
    {
      v29 = v21 + ((unint64_t)v21 >> 2);
      if (v29 >= 0x10)
        v30 = v29 + 1;
      else
        v30 = 16;
      if (v30 <= (unint64_t)v21 + 1)
        v31 = v21 + 1;
      else
        v31 = v30;
      if (v31 < 5)
      {
        v53 = (WTF *)v55;
        LODWORD(v54) = 4;
        v32 = (WTF *)v55;
      }
      else
      {
        if (v31 >> 29)
          goto LABEL_109;
        v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v31));
        LODWORD(v54) = v31;
        v53 = v32;
      }
      memcpy(v32, v24, 8 * v27);
      if (v55 != (_BYTE *)v24)
      {
        if (v53 == v24)
        {
          v53 = 0;
          LODWORD(v54) = 0;
        }
        WTF::fastFree(v24, v33);
      }
      v21 = HIDWORD(v54);
      v24 = v53;
      v28 = (_QWORD *)((char *)v53 + 8 * HIDWORD(v54));
    }
    else
    {
      v28 = (_QWORD *)((char *)v24 + 8 * v21);
    }
    *v28 = v26 + 3088;
    HIDWORD(v54) = ++v21;
    v22 = (WTF *)((char *)v22 + 2);
    v23 -= 2;
  }
  while (v23);
  v34 = v53;
  v49 = (WTF *)v51;
  v50 = 4;
  if (v53 == (WTF *)v55)
    goto LABEL_71;
  v53 = (WTF *)v55;
  v49 = v34;
  v48 = v54;
  LODWORD(v54) = 4;
  LODWORD(v50) = v48;
LABEL_72:
  HIDWORD(v54) = 0;
  HIDWORD(v50) = v21;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v49, (uint64_t *)&v52);
  *a3 = v52;
  if (HIDWORD(v50))
  {
    v35 = v49;
    v36 = 8 * HIDWORD(v50);
    do
    {
      v37 = *(_DWORD **)v35;
      *(_QWORD *)v35 = 0;
      if (v37)
      {
        if (*v37 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, a2);
        else
          *v37 -= 2;
      }
      v35 = (WTF *)((char *)v35 + 8);
      v36 -= 8;
    }
    while (v36);
  }
  v38 = v49;
  if (v51 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v38, a2);
  }
  if (HIDWORD(v54))
  {
    v40 = v53;
    v41 = 8 * HIDWORD(v54);
    do
    {
      v42 = *(_DWORD **)v40;
      *(_QWORD *)v40 = 0;
      if (v42)
      {
        if (*v42 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v42, a2);
        else
          *v42 -= 2;
      }
      v40 = (WTF *)((char *)v40 + 8);
      v41 -= 8;
    }
    while (v41);
  }
  v43 = v53;
  if (v55 != (_BYTE *)v53 && v53 != 0)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    WTF::fastFree(v43, a2);
  }
LABEL_96:
  result = v56;
  if (v58 != (_BYTE *)v56 && v56 != 0)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeOffsetRotate@<X0>(__int128 *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v6;
  int *v7;
  int *v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int *v14;
  __int128 v15;
  __int128 v16;

  v16 = *a1;
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394,(WebCore::CSSValueID)504>((uint64_t)&v16, (int **)&v15 + 1);
  WebCore::CSSPropertyParserHelpers::consumeAngle((uint64_t)&v16, a2, 1, 1, &v15);
  if (*((_QWORD *)&v15 + 1))
    goto LABEL_7;
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394,(WebCore::CSSValueID)504>((uint64_t)&v16, &v14);
  v7 = v14;
  v14 = 0;
  v8 = (int *)*((_QWORD *)&v15 + 1);
  *((_QWORD *)&v15 + 1) = v7;
  if (!v8)
    goto LABEL_5;
  v9 = *v8 - 2;
  if (*v8 != 2)
    goto LABEL_4;
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v6);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    v9 = *v8 - 2;
    if (*v8 != 2)
    {
LABEL_4:
      *v8 = v9;
      goto LABEL_5;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v13);
  }
LABEL_5:
  if (v15 != 0)
  {
LABEL_7:
    *a1 = v16;
    result = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)result = 2;
    v11 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(result + 4) = 24576;
    *(_BYTE *)(result + 6) = BYTE2(v11);
    v12 = v15;
    *(_QWORD *)(result + 8) = *((_QWORD *)&v15 + 1);
    *(_QWORD *)(result + 16) = v12;
    goto LABEL_8;
  }
  result = 0;
LABEL_8:
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394,(WebCore::CSSValueID)504>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 504 && (unsigned __int16)result != 394)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)v2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)v2 + 24);
      *(_QWORD *)v2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958DEBD8);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *a2 = v7;
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeViewTransitionName@<X0>(unsigned int **this@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *result;
  unsigned int *v6;
  int *v7;

  result = (WTF::StringImpl *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)6>((uint64_t)this, &v7);
  if (v7)
  {
    *a2 = (uint64_t)v7;
  }
  else
  {
    v6 = *this;
    if (*this >= this[1])
    {
      v6 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    result = (WTF::StringImpl *)WebCore::CSSParserToken::id(v6);
    if ((_DWORD)result == 394)
      *a2 = 0;
    else
      return WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)this, 0, a2);
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeFontTech@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  WTF *v7;
  unsigned int v8;
  __int128 *v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  __int128 *v13;
  __int128 *v14;
  unsigned int v15;
  int v16;
  char v17;
  char *v18;
  __int128 *v19;
  unsigned int v20;
  __int128 *v21;
  char v22;
  int v23;
  __int128 *v24;
  WTF *result;
  WTF *v26;
  char v28;
  WTF *v29;
  uint64_t v30;

  v3 = (int)a2;
  v29 = 0;
  v30 = 0;
  v5 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(this, a2);
  v6 = v4;
  v7 = 0;
  v8 = 0;
  do
  {
    if (v5 == v6)
    {
      v11 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v10 = 1;
      {
        v11 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
      }
      v9 = v6;
      v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v9 = (__int128 *)((char *)v5 + 24);
      v11 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    do
    {
      v13 = v9;
      if (v9 < v6 || (v10 & 1) != 0)
      {
        if (v9 >= v6)
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v14 = v9;
        v12 = *(_DWORD *)v14;
      }
      else
      {
        v12 = v11 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v10 = 1;
        v11 = v12;
      }
      v9 = (__int128 *)((char *)v9 + 24);
    }
    while ((v12 & 0x3F) == 0x10);
    v15 = *(_DWORD *)v5;
    if ((*(_DWORD *)v5 & 0x3F) != 0)
      goto LABEL_45;
    v28 = 0;
    v16 = *((_DWORD *)v5 + 4);
    if (v16 < 0)
    {
      v16 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((v15 >> 22) & 1) << 32));
      *((_DWORD *)v5 + 4) = v16;
    }
    if ((unsigned __int16)(v16 - 797) > 0xAu)
      goto LABEL_45;
    v17 = byte_1969EFDD4[(__int16)(v16 - 797)];
    v28 = v17;
    if (v8 == (_DWORD)v30)
    {
      v18 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v29, (WTF *)(v8 + 1), (unint64_t)&v28);
      v8 = HIDWORD(v30);
      v7 = v29;
      *((_BYTE *)v29 + HIDWORD(v30)) = *v18;
    }
    else
    {
      *((_BYTE *)v7 + v8) = v17;
    }
    v5 = v13;
    HIDWORD(v30) = ++v8;
    v19 = v13;
    if (v13 >= v6)
    {
      v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v19 & 0x3F) != 0x15)
      break;
    v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if (v13 == v6)
      v21 = v6;
    else
      v21 = (__int128 *)((char *)v13 + 24);
    if (v13 == v6)
      v22 = 1;
    else
    {
      v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
      v22 = 1;
      v21 = v6;
    }
    do
    {
      if (v21 < v6 || (v22 & 1) != 0)
      {
        if (v21 >= v6)
          v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v24 = v21;
        v23 = *(_DWORD *)v24;
      }
      else
      {
        v20 = v20 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
        v22 = 1;
        LOBYTE(v23) = v20;
      }
      v21 = (__int128 *)((char *)v21 + 24);
    }
    while ((v23 & 0x3F) == 0x10);
    v5 = (__int128 *)((char *)v21 - 24);
  }
  while (!v3);
  if (v5 != v6)
  {
LABEL_45:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    goto LABEL_46;
  }
  v26 = v29;
  v29 = 0;
  *(_QWORD *)a3 = v26;
  *(_DWORD *)(a3 + 8) = v30;
  *(_DWORD *)(a3 + 12) = v8;
LABEL_46:
  result = v29;
  if (v29)
    return (WTF *)WTF::fastFree(v29, v4);
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeFontPaletteValuesOverrideColors@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  WTF *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  uint64_t *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *result;
  WTF *v30;
  unsigned int v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  int v37;
  WTF *v39;
  int v40;
  unsigned int v41;
  _BYTE v42[32];
  WTF *v43;
  uint64_t v44;
  _BYTE v45[32];
  _DWORD *v46;
  _DWORD *v47;

  v43 = (WTF *)v45;
  v44 = 4;
  while (1)
  {
    v39 = 0;
    v47 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve((uint64_t)this, (unsigned __int16 **)&v39, (uint64_t)&v47, 0x10100000000, &v46);
    if (v47)
      WTF::fastFree((WTF *)(v47 - 4), v6);
    if (v39)
      WTF::fastFree((WTF *)((char *)v39 - 16), v6);
    if (!v46)
    {
LABEL_43:
      v24 = 0;
      goto LABEL_44;
    }
    LOWORD(v47) = 256;
    WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)this, (uint64_t)a2, &v47, (int **)&v39);
    v7 = v39;
    if (v39)
    {
      v8 = v46;
      v46 = 0;
      v39 = 0;
      v9 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v9 = 2;
      v10 = (*(unsigned __int8 *)(v9 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_WORD *)(v9 + 4) = 6144;
      *(_BYTE *)(v9 + 6) = BYTE2(v10);
      *(_QWORD *)(v9 + 8) = v8;
      *(_QWORD *)(v9 + 16) = v7;
      v11 = v39;
      v39 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
    else
    {
      v9 = 0;
    }
    v12 = v46;
    v46 = 0;
    if (!v12)
      goto LABEL_16;
    if (*v12 != 2)
    {
      *v12 -= 2;
LABEL_16:
      if (!v9)
        goto LABEL_43;
      goto LABEL_17;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, (WTF::StringImpl *)v6);
    if (!v9)
      goto LABEL_43;
LABEL_17:
    v39 = (WTF *)v9;
    LODWORD(v13) = HIDWORD(v44);
    if (HIDWORD(v44) == (_DWORD)v44)
    {
      v21 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v43, HIDWORD(v44) + 1, (unint64_t)&v39);
      v13 = HIDWORD(v44);
      v22 = v43;
      v23 = *v21;
      *v21 = 0;
      *((_QWORD *)v22 + v13) = v23;
    }
    else
    {
      v39 = 0;
      *((_QWORD *)v43 + HIDWORD(v44)) = v9;
    }
    HIDWORD(v44) = v13 + 1;
    v14 = v39;
    v39 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v14 -= 2;
    }
    v16 = *this;
    v15 = this[1];
    if (*this >= v15)
    {
      v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v16 & 0x3F) != 0x15)
      break;
    v17 = *this;
    if (*this == v15)
    {
      v19 = 1;
      {
        v18 = v15;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v18 = *this;
      }
    }
    else
    {
      v18 = (__int128 *)((char *)v17 + 24);
      *this = (__int128 *)((char *)v17 + 24);
    }
    while (1)
    {
      if (v18 < v15 || (v19 & 1) != 0)
      {
        if (v18 >= v15)
          v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v20 = *(_DWORD *)v18;
      }
      else
      {
        v20 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
        v19 = 1;
      }
      if ((v20 & 0x3F) != 0x10)
        break;
      v18 = (__int128 *)((char *)*this + 24);
      *this = v18;
    }
  }
  v39 = (WTF *)v42;
  v40 = 4;
  v30 = v43;
  if (v43 == (WTF *)v45)
  {
    v31 = HIDWORD(v44);
    memcpy(v42, v45, 8 * HIDWORD(v44));
  }
  else
  {
    v43 = (WTF *)v45;
    v39 = v30;
    v37 = v44;
    v31 = HIDWORD(v44);
    LODWORD(v44) = 4;
    v40 = v37;
  }
  HIDWORD(v44) = 0;
  v41 = v31;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v39, (uint64_t *)&v47);
  v24 = v47;
  if (v41)
  {
    v32 = v39;
    v33 = 8 * v41;
    do
    {
      v34 = *(_DWORD **)v32;
      *(_QWORD *)v32 = 0;
      if (v34)
      {
        if (*v34 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, (WTF::StringImpl *)v6);
        else
          *v34 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
  }
  v35 = v39;
  if (v42 != (_BYTE *)v39 && v39 != 0)
  {
    v39 = 0;
    v40 = 0;
    WTF::fastFree(v35, v6);
  }
LABEL_44:
  if (HIDWORD(v44))
  {
    v25 = v43;
    v26 = 8 * HIDWORD(v44);
    do
    {
      v27 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, (WTF::StringImpl *)v6);
        else
          *v27 -= 2;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  result = v43;
  if (v45 != (_BYTE *)v43 && v43 != 0)
  {
    v43 = 0;
    LODWORD(v44) = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  if (*this == this[1])
  {
    if (v24)
    {
      if (!v24[2])
      {
        *a3 = 0;
        goto LABEL_58;
      }
      *a3 = v24;
    }
    else
    {
      *a3 = 0;
    }
  }
  else
  {
    *a3 = 0;
    if (v24)
    {
LABEL_58:
      if (*v24 == 2)
        return (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, (WTF::StringImpl *)v6);
      else
        *v24 -= 2;
    }
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WebCore::CSSPropertyParserHelpers::consumeCounterStyleRange(WebCore::CSSParserTokenRange &)::$_0>(_QWORD *a1, uint64_t a2)
{
  void *v3;
  int v4;
  int v6;
  double v8;
  signed int v9;
  double v10;
  signed int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  char v28;
  unsigned int v29;
  uint64_t *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  WTF *result;
  int v47;
  double v48;
  double v49;
  WTF *v51;
  int v52;
  unsigned int v53;
  _BYTE v54[32];
  WTF *v55;
  uint64_t v56;
  _BYTE v57[32];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61[2];

  v55 = (WTF *)v57;
  v56 = 4;
  while (1)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)539>((uint64_t)&v59, a2);
    if (!v59)
    {
      v59 = 0;
      v60 = 0;
      v61[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve((__int128 **)a2, v61, (uint64_t)&v60, 0x10100000000, &v59);
      if (v60)
        WTF::fastFree((WTF *)(v60 - 16), v3);
      if (v61[0])
        WTF::fastFree((WTF *)(v61[0] - 8), v3);
      if (!v59)
      {
LABEL_93:
        *a1 = 0;
        goto LABEL_108;
      }
    }
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)539>((uint64_t)&v58, a2);
    if (!v58)
    {
      v58 = 0;
      v60 = 0;
      v61[0] = 0;
      WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve((__int128 **)a2, v61, (uint64_t)&v60, 0x10100000000, &v58);
      if (v60)
        WTF::fastFree((WTF *)(v60 - 16), v3);
      if (v61[0])
        WTF::fastFree((WTF *)(v61[0] - 8), v3);
      if (!v58)
      {
        v12 = 0;
        goto LABEL_53;
      }
    }
    v4 = *(_WORD *)(v59 + 4) & 0x7F;
    if ((v4 - 63) <= 0x11 && ((1 << (v4 - 63)) & 0x34001) != 0)
      goto LABEL_48;
    if (v4 == 73)
    {
      v13 = *(unsigned __int8 **)(*(_QWORD *)(v59 + 8) + 8);
      v14 = v13[12];
      if (v14 != 1 && (v14 - 5) > 3)
        goto LABEL_48;
      v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 72))(v13);
    }
    if (v4 != 2)
      goto LABEL_48;
    v6 = *(_WORD *)(v58 + 4) & 0x7F;
    if ((v6 - 63) <= 0x11 && ((1 << (v6 - 63)) & 0x34001) != 0)
      goto LABEL_48;
    if (v6 == 73)
    {
      v15 = *(unsigned __int8 **)(*(_QWORD *)(v58 + 8) + 8);
      v16 = v15[12];
      if (v16 != 1 && (v16 - 5) > 3)
        goto LABEL_48;
      v6 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v15 + 72))(v15);
    }
    if (v6 == 2)
    {
      if ((*(_WORD *)(v59 + 4) & 0x7F) == 0x49)
      {
        v33 = *(_QWORD *)(v59 + 8);
        v61[0] = 0;
        v48 = WebCore::CSSCalcValue::doubleValue(v33, (uint64_t)v61);
        if (v61[0])
          WTF::fastFree((WTF *)(v61[0] - 8), v3);
        v8 = v48;
      }
      else
      {
        v8 = *(double *)(v59 + 8);
      }
      if (v8 >= 2147483650.0)
        v9 = 0x7FFFFFFF;
      else
        v9 = v8 <= -2147483650.0 ? 0x80000000 : (int)v8;
      if ((*(_WORD *)(v58 + 4) & 0x7F) == 0x49)
      {
        v34 = *(_QWORD *)(v58 + 8);
        v61[0] = 0;
        v49 = WebCore::CSSCalcValue::doubleValue(v34, (uint64_t)v61);
        if (v61[0])
          WTF::fastFree((WTF *)(v61[0] - 8), v3);
        v10 = v49;
      }
      else
      {
        v10 = *(double *)(v58 + 8);
      }
      if (v10 >= 2147483650.0)
        v11 = 0x7FFFFFFF;
      else
        v11 = v10 <= -2147483650.0 ? 0x80000000 : (int)v10;
      if (v9 > v11)
      {
        v12 = 0;
        goto LABEL_49;
      }
    }
LABEL_48:
    v18 = v58;
    v17 = v59;
    v58 = 0;
    v59 = 0;
    v12 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v12 = 2;
    v19 = (*(unsigned __int8 *)(v12 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_BYTE *)(v12 + 7) = 0;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(v12 + 16) = v18;
    *(_WORD *)(v12 + 4) = -18432;
    *(_BYTE *)(v12 + 6) = BYTE2(v19);
LABEL_49:
    v20 = (_DWORD *)v58;
    v58 = 0;
    if (v20)
    {
      if (*v20 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, (WTF::StringImpl *)v3);
      else
        *v20 -= 2;
    }
LABEL_53:
    v21 = (_DWORD *)v59;
    v59 = 0;
    if (!v21)
      goto LABEL_56;
    if (*v21 != 2)
    {
      *v21 -= 2;
LABEL_56:
      if (!v12)
        goto LABEL_93;
      goto LABEL_57;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, (WTF::StringImpl *)v3);
    if (!v12)
      goto LABEL_93;
LABEL_57:
    v61[0] = (unsigned __int16 *)v12;
    LODWORD(v22) = HIDWORD(v56);
    if (HIDWORD(v56) == (_DWORD)v56)
    {
      v30 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v55, HIDWORD(v56) + 1, (unint64_t)v61);
      v22 = HIDWORD(v56);
      v31 = v55;
      v32 = *v30;
      *v30 = 0;
      *((_QWORD *)v31 + v22) = v32;
    }
    else
    {
      v61[0] = 0;
      *((_QWORD *)v55 + HIDWORD(v56)) = v12;
    }
    HIDWORD(v56) = v22 + 1;
    v23 = v61[0];
    v61[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, (WTF::StringImpl *)v3);
      else
        *(_DWORD *)v23 -= 2;
    }
    v25 = *(__int128 **)a2;
    v24 = *(__int128 **)(a2 + 8);
    if (*(_QWORD *)a2 >= (unint64_t)v24)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v25 & 0x3F) != 0x15)
      break;
    v26 = *(__int128 **)a2;
    if (*(__int128 **)a2 == v24)
    {
      v28 = 1;
      {
        v27 = v24;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v27 = *(__int128 **)a2;
      }
    }
    else
    {
      v27 = (__int128 *)((char *)v26 + 24);
      *(_QWORD *)a2 = (char *)v26 + 24;
    }
    while (1)
    {
      if (v27 < v24 || (v28 & 1) != 0)
      {
        if (v27 >= v24)
          v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v29 = *(_DWORD *)v27;
      }
      else
      {
        v29 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
        v28 = 1;
      }
      if ((v29 & 0x3F) != 0x10)
        break;
      v27 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v27;
    }
  }
  v51 = (WTF *)v54;
  v52 = 4;
  v35 = v55;
  if (v55 == (WTF *)v57)
  {
    v36 = HIDWORD(v56);
    memcpy(v54, v57, 8 * HIDWORD(v56));
  }
  else
  {
    v55 = (WTF *)v57;
    v51 = v35;
    v47 = v56;
    v36 = HIDWORD(v56);
    LODWORD(v56) = 4;
    v52 = v47;
  }
  HIDWORD(v56) = 0;
  v53 = v36;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v51, (uint64_t *)v61);
  *a1 = v61[0];
  if (v53)
  {
    v37 = v51;
    v38 = 8 * v53;
    do
    {
      v39 = *(_DWORD **)v37;
      *(_QWORD *)v37 = 0;
      if (v39)
      {
        if (*v39 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, (WTF::StringImpl *)v3);
        else
          *v39 -= 2;
      }
      v37 = (WTF *)((char *)v37 + 8);
      v38 -= 8;
    }
    while (v38);
  }
  v40 = v51;
  if (v54 != (_BYTE *)v51 && v51 != 0)
  {
    v51 = 0;
    v52 = 0;
    WTF::fastFree(v40, v3);
  }
LABEL_108:
  if (HIDWORD(v56))
  {
    v42 = v55;
    v43 = 8 * HIDWORD(v56);
    do
    {
      v44 = *(_DWORD **)v42;
      *(_QWORD *)v42 = 0;
      if (v44)
      {
        if (*v44 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, (WTF::StringImpl *)v3);
        else
          *v44 -= 2;
      }
      v42 = (WTF *)((char *)v42 + 8);
      v43 -= 8;
    }
    while (v43);
  }
  result = v55;
  if (v57 != (_BYTE *)v55 && v55 != 0)
  {
    v55 = 0;
    LODWORD(v56) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WebCore::CSSPropertyParserHelpers::consumeCounterStyleAdditiveSymbols(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&)::$_0,WebCore::CSSParserContext const&>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void *v7;
  void *v8;
  unsigned __int16 *v9;
  int *v10;
  double v11;
  int v12;
  uint64_t v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  unsigned __int16 *v20;
  int *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  char v28;
  unsigned int v29;
  uint64_t *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unsigned int v35;
  WTF *v36;
  uint64_t v37;
  _DWORD *v38;
  WTF *v39;
  WTF *v41;
  uint64_t v42;
  _DWORD *v43;
  WTF *result;
  int v46;
  double v47;
  WTF *v49;
  int v50;
  unsigned int v51;
  _BYTE v52[32];
  WTF *v53;
  uint64_t v54;
  _BYTE v55[32];
  int *v56;
  unsigned __int16 *v57;
  int *v58;
  uint64_t v59;
  unsigned __int16 *v60[2];

  v53 = (WTF *)v55;
  v54 = 4;
  while (1)
  {
    v59 = 0;
    v60[0] = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve(a2, v60, (uint64_t)&v59, 0x10100000000, &v58);
    if (v59)
      WTF::fastFree((WTF *)(v59 - 16), v7);
    if (v60[0])
      WTF::fastFree((WTF *)(v60[0] - 8), v7);
    WebCore::CSSPropertyParserHelpers::consumeString(a2, v60);
    v9 = v60[0];
    if (v60[0]
      || (WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)a2, 0, (uint64_t *)v60), (v9 = v60[0]) != 0))
    {
      v57 = v9;
    }
    else if ((*(_WORD *)(a4 + 51) & 0x40) == 0
           || (WebCore::CSSPropertyParserHelpers::consumeImage((WTF::StringImpl *)&v57, (__int128 **)a2, a4, 9), !v57))
    {
LABEL_28:
      v16 = 0;
      goto LABEL_34;
    }
    v10 = v58;
    if (v58)
      goto LABEL_10;
    v59 = 0;
    v60[0] = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)2>>::consumeAndResolve(a2, v60, (uint64_t)&v59, 0x10100000000, &v56);
    if (v59)
      WTF::fastFree((WTF *)(v59 - 16), v8);
    if (v60[0])
      WTF::fastFree((WTF *)(v60[0] - 8), v8);
    v10 = v56;
    v56 = 0;
    v18 = v58;
    v58 = v10;
    if (v18)
    {
      v19 = *v18 - 2;
      if (*v18 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)v8);
        v18 = v56;
        v56 = 0;
        if (!v18)
          goto LABEL_25;
        v19 = *v18 - 2;
        if (*v18 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)v8);
          goto LABEL_25;
        }
      }
      *v18 = v19;
LABEL_25:
      v10 = v58;
    }
    if (!v10)
      goto LABEL_29;
    if (!v57)
      goto LABEL_28;
LABEL_10:
    if ((v10[1] & 0x7F) == 0x49)
    {
      v33 = *((_QWORD *)v10 + 1);
      v60[0] = 0;
      v11 = WebCore::CSSCalcValue::doubleValue(v33, (uint64_t)v60);
      if (v60[0])
      {
        v47 = v11;
        WTF::fastFree((WTF *)(v60[0] - 8), v8);
        v11 = v47;
      }
    }
    else
    {
      v11 = *((double *)v10 + 1);
    }
    if (v11 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v11 <= -2147483650.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v11;
    }
    v13 = *a3;
    if (!*(_BYTE *)(*a3 + 4) || v12 < *(_DWORD *)v13)
    {
      *(_DWORD *)v13 = v12;
      *(_BYTE *)(v13 + 4) = 1;
      v14 = v58;
      v58 = 0;
      v15 = v57;
      v57 = 0;
      v16 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v16 = 2;
      v17 = (*(unsigned __int8 *)(v16 + 6) << 16) & 0xFC0000 | 0x10000;
      *(_BYTE *)(v16 + 7) = 1;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(v16 + 16) = v15;
      *(_WORD *)(v16 + 4) = -18432;
      *(_BYTE *)(v16 + 6) = BYTE2(v17);
      goto LABEL_30;
    }
LABEL_29:
    v16 = 0;
LABEL_30:
    v20 = v57;
    v57 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v20 -= 2;
    }
LABEL_34:
    v21 = v58;
    v58 = 0;
    if (!v21)
      goto LABEL_37;
    if (*v21 != 2)
    {
      *v21 -= 2;
LABEL_37:
      if (!v16)
        goto LABEL_74;
      goto LABEL_38;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, (WTF::StringImpl *)v8);
    if (!v16)
    {
LABEL_74:
      *a1 = 0;
      goto LABEL_89;
    }
LABEL_38:
    v60[0] = (unsigned __int16 *)v16;
    LODWORD(v22) = HIDWORD(v54);
    if (HIDWORD(v54) == (_DWORD)v54)
    {
      v30 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v53, HIDWORD(v54) + 1, (unint64_t)v60);
      v22 = HIDWORD(v54);
      v31 = v53;
      v32 = *v30;
      *v30 = 0;
      *((_QWORD *)v31 + v22) = v32;
    }
    else
    {
      v60[0] = 0;
      *((_QWORD *)v53 + HIDWORD(v54)) = v16;
    }
    HIDWORD(v54) = v22 + 1;
    v23 = v60[0];
    v60[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)v23 -= 2;
    }
    v25 = *(__int128 **)a2;
    v24 = *(__int128 **)(a2 + 8);
    if (*(_QWORD *)a2 >= (unint64_t)v24)
    {
      v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v25 & 0x3F) != 0x15)
      break;
    v26 = *(__int128 **)a2;
    if (*(__int128 **)a2 == v24)
    {
      v28 = 1;
      {
        v27 = v24;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v27 = *(__int128 **)a2;
      }
    }
    else
    {
      v27 = (__int128 *)((char *)v26 + 24);
      *(_QWORD *)a2 = (char *)v26 + 24;
    }
    while (1)
    {
      if (v27 < v24 || (v28 & 1) != 0)
      {
        if (v27 >= v24)
          v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v29 = *(_DWORD *)v27;
      }
      else
      {
        v29 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
        v28 = 1;
      }
      if ((v29 & 0x3F) != 0x10)
        break;
      v27 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v27;
    }
  }
  v49 = (WTF *)v52;
  v50 = 4;
  v34 = v53;
  if (v53 == (WTF *)v55)
  {
    v35 = HIDWORD(v54);
    memcpy(v52, v55, 8 * HIDWORD(v54));
  }
  else
  {
    v53 = (WTF *)v55;
    v49 = v34;
    v46 = v54;
    v35 = HIDWORD(v54);
    LODWORD(v54) = 4;
    v50 = v46;
  }
  HIDWORD(v54) = 0;
  v51 = v35;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v49, (uint64_t *)v60);
  *a1 = v60[0];
  if (v51)
  {
    v36 = v49;
    v37 = 8 * v51;
    do
    {
      v38 = *(_DWORD **)v36;
      *(_QWORD *)v36 = 0;
      if (v38)
      {
        if (*v38 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, (WTF::StringImpl *)v8);
        else
          *v38 -= 2;
      }
      v36 = (WTF *)((char *)v36 + 8);
      v37 -= 8;
    }
    while (v37);
  }
  v39 = v49;
  if (v52 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree(v39, v8);
  }
LABEL_89:
  if (HIDWORD(v54))
  {
    v41 = v53;
    v42 = 8 * HIDWORD(v54);
    do
    {
      v43 = *(_DWORD **)v41;
      *(_QWORD *)v41 = 0;
      if (v43)
      {
        if (*v43 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, (WTF::StringImpl *)v8);
        else
          *v43 -= 2;
      }
      v41 = (WTF *)((char *)v41 + 8);
      v42 -= 8;
    }
    while (v42);
  }
  result = v53;
  if (v55 != (_BYTE *)v53 && v53 != 0)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    return (WTF *)WTF::fastFree(result, v8);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCounterStyleSpeakAs@<X0>(__int128 **this@<X0>, _QWORD *a2@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  unint64_t v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;

  v6 = *this;
  v5 = this[1];
  if (*this >= v5)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
    goto LABEL_5;
  v7 = *this;
  if (*this >= v5)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_5;
  v12 = *((_DWORD *)v7 + 4);
  if (v12 < 0)
  {
    v12 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v12;
  }
  if ((unsigned __int16)v12 - 989 >= 3 && (unsigned __int16)v12 != 656 && (unsigned __int16)v12 != 394)
  {
LABEL_5:
    v8 = *this;
    if (*this >= this[1])
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) != 0)
    {
      v9 = 0;
    }
    else
    {
      result = *((unsigned int *)v8 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
        *((_DWORD *)v8 + 4) = result;
      }
      v9 = (unsigned __int16)result;
      if ((unsigned __int16)result == 6)
        goto LABEL_9;
    }
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeCustomIdent((WebCore::CSSPropertyParserHelpers *)this, (WebCore::CSSParserTokenRange *)((v9 - 272) < 0x5E), &v19);
    v11 = v19;
    if (v19)
    {
LABEL_10:
      *a2 = v11;
      return result;
    }
LABEL_9:
    v11 = 0;
    goto LABEL_10;
  }
  v14 = *this;
  v13 = (unint64_t)this[1];
  if (*this == (__int128 *)v13)
  {
    v16 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v15 = *this;
    v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v15 = (__int128 *)((char *)v14 + 24);
    *this = (__int128 *)((char *)v14 + 24);
  }
  while (1)
  {
    if ((unint64_t)v15 < v13 || (v16 & 1) != 0)
    {
      if ((unint64_t)v15 >= v13)
        v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v17 = *(_DWORD *)v15;
    }
    else
    {
      v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v16 = 1;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v15 = (__int128 *)((char *)*this + 24);
    *this = v15;
  }
  if ((*(_DWORD *)v14 & 0x3F) != 0)
  {
    result = 0;
  }
  else
  {
    result = *((unsigned int *)v14 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v14 + 1), *((unsigned int *)v14 + 1) | ((unint64_t)((*(_DWORD *)v14 >> 22) & 1) << 32));
      *((_DWORD *)v14 + 4) = result;
    }
    if ((unsigned __int16)result >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958E0288);
    }
  }
  v18 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
  *v18 += 2;
  *a2 = v18;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394,(WebCore::CSSValueID)1012>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 1012 && (unsigned __int16)result != 394)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)v2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)v2 + 24);
      *(_QWORD *)v2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958E04C4);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *a2 = v7;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)394,(WebCore::CSSValueID)1013>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result != 1013 && (unsigned __int16)result != 394)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v9 = *(__int128 **)v2;
    v8 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == v8)
    {
      v11 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v10 = *(__int128 **)v2;
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v9 + 24);
      *(_QWORD *)v2 = (char *)v9 + 24;
    }
    while (1)
    {
      if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v8)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)(*(_QWORD *)v2 + 24);
      *(_QWORD *)v2 = v10;
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v9 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958E0700);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *a2 = v7;
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeAnimationTimeline@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  int *v15;
  WTF *v16;
  int v17;
  int v18;
  int *v20;
  int v21;
  int *v22;
  unint64_t v23;
  __int128 *v24;
  int *v25;
  WTF *v26;
  int v27;
  int *v28;
  int v29;
  int *v30;
  uint64_t v31;
  WTF *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  char v36;
  unsigned int v37;
  uint64_t *v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  _DWORD *v43;
  WTF *result;
  int v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  _DWORD *v51;
  WTF *v52;
  int v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  __int16 v60;
  WTF *v61;
  WTF *v62;
  _BYTE v63[32];
  WTF *v64;
  uint64_t v65;
  _BYTE v66[32];
  int *v67;
  int *v68;
  int *v69;
  int *v70[2];

  v6 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v55 = v6;
  v7 = *(_OWORD *)((char *)a2 + 24);
  v56 = *(_OWORD *)((char *)a2 + 8);
  v57 = v7;
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = *((_QWORD *)a2 + 6);
  v58 = v8;
  v59 = v9;
  v60 = *((_WORD *)a2 + 28);
  v64 = (WTF *)v66;
  v65 = 4;
  v10 = (__int128 *)*((_QWORD *)this + 1);
  while (1)
  {
    v11 = *(__int128 **)this;
    if (*(_QWORD *)this >= (unint64_t)v10)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v11 & 0x3F) == 0)
    {
      v18 = *((_DWORD *)v11 + 4);
      if (v18 < 0)
      {
        v18 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v18;
      }
      if ((unsigned __int16)v18 == 394 || (unsigned __int16)v18 == 6)
      {
        WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, a2, (int **)&v61);
        v12 = (uint64_t)v61;
        if (!v61)
          goto LABEL_96;
        goto LABEL_73;
      }
    }
    WebCore::CSSPropertyParserHelpers::consumeDashedIdent(this, 0, (uint64_t *)&v61);
    v12 = (uint64_t)v61;
    if (v61)
      goto LABEL_73;
    v14 = *(__int128 **)this;
    v13 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this >= v13)
    {
      v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v14 & 0x3F) == 1)
    {
      v15 = *(int **)this;
      if (*(_QWORD *)this >= v13)
      {
        v15 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if (WebCore::CSSParserToken::functionId(v15) == 489)
      {
        v61 = (WTF *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)this, a2);
        v62 = v16;
        if (v61 == v16)
        {
          v12 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v12 = 2;
          v17 = (((*(unsigned __int8 *)(v12 + 6) >> 2) & 0x3F) << 18) | 0x1A000;
          *(_WORD *)(v12 + 4) = -24576;
          *(_BYTE *)(v12 + 6) = BYTE2(v17);
          *(_QWORD *)(v12 + 8) = 0;
          *(_QWORD *)(v12 + 16) = 0;
          goto LABEL_73;
        }
        WebCore::CSSPropertyParsing::consumeScroller((uint64_t)&v61, v70);
        WebCore::CSSPropertyParsing::consumeAxis((uint64_t)&v61, &v69);
        v20 = v70[0];
        if (!v70[0])
        {
          WebCore::CSSPropertyParsing::consumeScroller((uint64_t)&v61, &v68);
          v20 = v68;
        }
        if (v62 == v61)
        {
          v12 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v12 = 2;
          v21 = (((*(unsigned __int8 *)(v12 + 6) >> 2) & 0x3F) << 18) | 0x1A000;
          *(_WORD *)(v12 + 4) = -24576;
          *(_BYTE *)(v12 + 6) = BYTE2(v21);
          v22 = v69;
          *(_QWORD *)(v12 + 8) = v20;
          *(_QWORD *)(v12 + 16) = v22;
          goto LABEL_73;
        }
        if (v69)
        {
          if (*v69 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v69, a2);
            if (!v20)
              goto LABEL_43;
LABEL_35:
            if (*v20 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, a2);
            else
              *v20 -= 2;
            goto LABEL_43;
          }
          *v69 -= 2;
        }
        if (!v20)
          goto LABEL_43;
        goto LABEL_35;
      }
    }
LABEL_43:
    v24 = *(__int128 **)this;
    v23 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this >= v23)
    {
      v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v24 & 0x3F) != 1)
      goto LABEL_96;
    v25 = *(int **)this;
    if (*(_QWORD *)this >= v23)
    {
      v25 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v25 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if (WebCore::CSSParserToken::functionId(v25) != 646)
      goto LABEL_96;
    v61 = (WTF *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)this, a2);
    v62 = v26;
    if (v61 == v26)
    {
      v12 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v12 = 2;
      v27 = (((*(unsigned __int8 *)(v12 + 6) >> 2) & 0x3F) << 18) | 0x1C800;
      *(_WORD *)(v12 + 4) = -14336;
      *(_BYTE *)(v12 + 6) = BYTE2(v27);
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 8) = 0;
      if (!v12)
        goto LABEL_96;
    }
    else
    {
      WebCore::CSSPropertyParsing::consumeAxis((uint64_t)&v61, v70);
      WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset((__int128 **)&v61, (WebCore::CSSParserTokenRange *)&v55, (uint64_t *)&v69);
      WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset((__int128 **)&v61, (WebCore::CSSParserTokenRange *)&v55, (uint64_t *)&v68);
      v28 = v70[0];
      if (!v70[0])
      {
        WebCore::CSSPropertyParsing::consumeAxis((uint64_t)&v61, &v67);
        v28 = v67;
        v70[0] = v67;
      }
      if (v62 != v61)
      {
        if (v68)
        {
          if (*v68 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v68, a2);
          else
            *v68 -= 2;
        }
        if (v69)
        {
          if (*v69 != 2)
          {
            *v69 -= 2;
            goto LABEL_66;
          }
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v69, a2);
          if (!v28)
          {
LABEL_96:
            *a3 = 0;
            goto LABEL_97;
          }
        }
        else
        {
LABEL_66:
          if (!v28)
            goto LABEL_96;
        }
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, a2);
        else
          *v28 -= 2;
        goto LABEL_96;
      }
      v12 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v12 = 2;
      v29 = (((*(unsigned __int8 *)(v12 + 6) >> 2) & 0x3F) << 18) | 0x1C800;
      *(_WORD *)(v12 + 4) = -14336;
      *(_BYTE *)(v12 + 6) = BYTE2(v29);
      v30 = v69;
      *(_QWORD *)(v12 + 8) = v28;
      *(_QWORD *)(v12 + 16) = v30;
      *(_QWORD *)(v12 + 24) = v68;
      if (!v12)
        goto LABEL_96;
    }
LABEL_73:
    v61 = (WTF *)v12;
    LODWORD(v31) = HIDWORD(v65);
    if (HIDWORD(v65) == (_DWORD)v65)
    {
      v38 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v64, HIDWORD(v65) + 1, (unint64_t)&v61);
      v31 = HIDWORD(v65);
      v39 = v64;
      v40 = *v38;
      *v38 = 0;
      *((_QWORD *)v39 + v31) = v40;
    }
    else
    {
      v61 = 0;
      *((_QWORD *)v64 + HIDWORD(v65)) = v12;
    }
    HIDWORD(v65) = v31 + 1;
    v32 = v61;
    v61 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, a2);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = *(__int128 **)this;
    v10 = (__int128 *)*((_QWORD *)this + 1);
    if (*(_QWORD *)this >= (unint64_t)v10)
    {
      v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v33 & 0x3F) != 0x15)
      break;
    v34 = *(_QWORD *)this;
    if (*(__int128 **)this == v10)
    {
      v36 = 1;
      v35 = v10;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v35 = *(__int128 **)this;
      }
    }
    else
    {
      v35 = (__int128 *)(v34 + 24);
      *(_QWORD *)this = v34 + 24;
    }
    while (1)
    {
      if (v35 < v10 || (v36 & 1) != 0)
      {
        if (v35 >= v10)
          v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v37 = *(_DWORD *)v35;
      }
      else
      {
        v37 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v37;
        v36 = 1;
      }
      if ((v37 & 0x3F) != 0x10)
        break;
      v35 = (__int128 *)(*(_QWORD *)this + 24);
      *(_QWORD *)this = v35;
    }
  }
  v46 = HIDWORD(v65);
  if (HIDWORD(v65) == 1)
  {
    v47 = *(_QWORD *)v64;
    *(_QWORD *)v64 = 0;
    *a3 = v47;
  }
  else
  {
    v61 = (WTF *)v63;
    LODWORD(v62) = 4;
    v48 = v64;
    if (v64 == (WTF *)v66)
    {
      memcpy(v63, v66, 8 * HIDWORD(v65));
    }
    else
    {
      v64 = (WTF *)v66;
      v61 = v48;
      v54 = v65;
      LODWORD(v65) = 4;
      LODWORD(v62) = v54;
    }
    HIDWORD(v65) = 0;
    HIDWORD(v62) = v46;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v61, (uint64_t *)v70);
    *a3 = v70[0];
    if (HIDWORD(v62))
    {
      v49 = v61;
      v50 = 8 * HIDWORD(v62);
      do
      {
        v51 = *(_DWORD **)v49;
        *(_QWORD *)v49 = 0;
        if (v51)
        {
          if (*v51 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v51, a2);
          else
            *v51 -= 2;
        }
        v49 = (WTF *)((char *)v49 + 8);
        v50 -= 8;
      }
      while (v50);
    }
    v52 = v61;
    if (v63 != (_BYTE *)v61 && v61 != 0)
    {
      v61 = 0;
      LODWORD(v62) = 0;
      WTF::fastFree(v52, a2);
    }
  }
LABEL_97:
  if (HIDWORD(v65))
  {
    v41 = v64;
    v42 = 8 * HIDWORD(v65);
    do
    {
      v43 = *(_DWORD **)v41;
      *(_QWORD *)v41 = 0;
      if (v43)
      {
        if (*v43 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, a2);
        else
          *v43 -= 2;
      }
      v41 = (WTF *)((char *)v41 + 8);
      v42 -= 8;
    }
    while (v42);
  }
  result = v64;
  if (v66 == (_BYTE *)v64 || v64 == 0)
  {
    if (!v8)
      goto LABEL_112;
    goto LABEL_110;
  }
  v64 = 0;
  LODWORD(v65) = 0;
  result = (WTF *)WTF::fastFree(result, a2);
  if (v8)
  {
LABEL_110:
    if (*(_DWORD *)v8 == 2)
      result = (WTF *)WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_112:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (WTF *)WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeViewTimelineInset@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  char v20;
  unsigned int v21;
  uint64_t *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *result;
  WTF *v31;
  unsigned int v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  WTF *v36;
  int v38;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  __int16 v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  _BYTE v49[32];
  WTF *v50;
  uint64_t v51;
  _BYTE v52[32];
  uint64_t v53[2];

  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v40 = v5;
  v41 = *(_OWORD *)((char *)a2 + 8);
  v42 = *(_OWORD *)((char *)a2 + 24);
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  if (v6)
    *(_DWORD *)v6 += 2;
  v7 = *((_QWORD *)a2 + 6);
  v43 = v6;
  v44 = v7;
  v45 = *((_WORD *)a2 + 28);
  v50 = (WTF *)v52;
  v51 = 4;
  WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset(this, (WebCore::CSSParserTokenRange *)&v40, (uint64_t *)&v46);
  v9 = v46;
  if (v46)
  {
    while (1)
    {
      WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset(this, (WebCore::CSSParserTokenRange *)&v40, v53);
      v11 = v53[0];
      if (v53[0])
      {
        if ((WTF *)v53[0] == v9)
        {
          if (*(_DWORD *)v9 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v10);
          else
            *(_DWORD *)v9 -= 2;
        }
        else
        {
          v12 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v12 = 2;
          v13 = (*(unsigned __int8 *)(v12 + 6) << 16) & 0xFC0000 | 0x10000;
          *(_BYTE *)(v12 + 7) = 0;
          *(_QWORD *)(v12 + 8) = v9;
          *(_QWORD *)(v12 + 16) = v11;
          *(_WORD *)(v12 + 4) = -18432;
          *(_BYTE *)(v12 + 6) = BYTE2(v13);
          v9 = (WTF *)v12;
        }
      }
      v46 = v9;
      LODWORD(v14) = HIDWORD(v51);
      if (HIDWORD(v51) == (_DWORD)v51)
      {
        v22 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v50, HIDWORD(v51) + 1, (unint64_t)&v46);
        v14 = HIDWORD(v51);
        v23 = v50;
        v24 = *v22;
        *v22 = 0;
        *((_QWORD *)v23 + v14) = v24;
      }
      else
      {
        v46 = 0;
        *((_QWORD *)v50 + HIDWORD(v51)) = v9;
      }
      HIDWORD(v51) = v14 + 1;
      v15 = v46;
      v46 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v10);
        else
          *(_DWORD *)v15 -= 2;
      }
      v17 = *this;
      v16 = this[1];
      if (*this >= v16)
      {
        v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v17 & 0x3F) != 0x15)
        break;
      v18 = *this;
      if (*this == v16)
      {
        v20 = 1;
        {
          v19 = v16;
        }
        else
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v19 = *this;
        }
      }
      else
      {
        v19 = (__int128 *)((char *)v18 + 24);
        *this = (__int128 *)((char *)v18 + 24);
      }
      while (1)
      {
        if (v19 < v16 || (v20 & 1) != 0)
        {
          if (v19 >= v16)
            v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v21 = *(_DWORD *)v19;
        }
        else
        {
          v21 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
          v20 = 1;
        }
        if ((v21 & 0x3F) != 0x10)
          break;
        v19 = (__int128 *)((char *)*this + 24);
        *this = v19;
      }
      WebCore::CSSPropertyParsing::consumeSingleViewTimelineInset(this, (WebCore::CSSParserTokenRange *)&v40, (uint64_t *)&v46);
      v9 = v46;
      if (!v46)
        goto LABEL_38;
    }
    v46 = (WTF *)v49;
    v47 = 4;
    v31 = v50;
    if (v50 == (WTF *)v52)
    {
      v32 = HIDWORD(v51);
      memcpy(v49, v52, 8 * HIDWORD(v51));
    }
    else
    {
      v50 = (WTF *)v52;
      v46 = v31;
      v38 = v51;
      v32 = HIDWORD(v51);
      LODWORD(v51) = 4;
      v47 = v38;
    }
    HIDWORD(v51) = 0;
    v48 = v32;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v46, v53);
    v25 = v53[0];
    if (v48)
    {
      v33 = v46;
      v34 = 8 * v48;
      do
      {
        v35 = *(_DWORD **)v33;
        *(_QWORD *)v33 = 0;
        if (v35)
        {
          if (*v35 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v8);
          else
            *v35 -= 2;
        }
        v33 = (WTF *)((char *)v33 + 8);
        v34 -= 8;
      }
      while (v34);
    }
    v36 = v46;
    if (v49 != (_BYTE *)v46 && v46 != 0)
    {
      v46 = 0;
      v47 = 0;
      WTF::fastFree(v36, v8);
    }
  }
  else
  {
LABEL_38:
    v25 = 0;
  }
  if (HIDWORD(v51))
  {
    v26 = v50;
    v27 = 8 * HIDWORD(v51);
    do
    {
      v28 = *(_DWORD **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v8);
        else
          *v28 -= 2;
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  result = v50;
  if (v52 != (_BYTE *)v50 && v50 != 0)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    result = (WTF *)WTF::fastFree(result, v8);
  }
  *a3 = v25;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      result = (WTF *)WTF::StringImpl::destroy(v6, v8);
      if (!v5)
        return result;
      goto LABEL_55;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v5)
    return result;
LABEL_55:
  if (*(_DWORD *)v5 == 2)
    return (WTF *)WTF::StringImpl::destroy(v5, v8);
  *(_DWORD *)v5 -= 2;
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumeAnchor@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v4;
  unint64_t v6;
  __int128 *v7;
  int *v8;
  WebCore::CSSParserTokenRange *v9;
  __int128 *v10;
  WTF::StringImpl *v11;
  int *v12;
  _DWORD *v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  __int128 *i;
  __int128 *v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _DWORD *v28;
  uint64_t v29;
  char v30;
  int *v31;
  _DWORD *v32;
  int *v33;
  _DWORD *v34;
  __int128 *v35;
  __int128 *v36;
  __int128 v37;

  v4 = result;
  v7 = *(__int128 **)result;
  v6 = *((_QWORD *)result + 1);
  if (*(_QWORD *)result >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 1)
    goto LABEL_6;
  v8 = *(int **)result;
  if (*(_QWORD *)v4 >= v6)
  {
    v8 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  result = (__int128 *)WebCore::CSSParserToken::functionId(v8);
  if ((_DWORD)result != 1017
    || (v37 = *v4,
        result = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v37, v9),
        v35 = result,
        v36 = v10,
        result == v10))
  {
LABEL_6:
    *a3 = 0;
    return result;
  }
  WebCore::CSSPropertyParserHelpers::consumeDashedIdent((WebCore::CSSPropertyParserHelpers *)&v35, 0, (uint64_t *)&v34);
  WebCore::CSSPropertyParsing::consumeAnchorSide(&v35, &v33);
  v12 = v33;
  if (!v33)
  {
    *a3 = 0;
    goto LABEL_46;
  }
  v33 = 0;
  v13 = v34;
  if (!v34)
  {
    WebCore::CSSPropertyParserHelpers::consumeDashedIdent((WebCore::CSSPropertyParserHelpers *)&v35, 0, (uint64_t *)&v32);
    v13 = v32;
    v34 = v32;
  }
  v14 = v35;
  if (v36 == v35)
  {
    *v4 = v37;
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    v23 = *(_BYTE *)(v22 + 6);
    *(_WORD *)(v22 + 4) = -24576;
    *(_BYTE *)(v22 + 6) = v23 & 0xFC;
    v34 = 0;
    *(_QWORD *)(v22 + 8) = v13;
    *(_QWORD *)(v22 + 16) = v12;
    *(_QWORD *)(v22 + 24) = 0;
    *(_DWORD *)v22 = 4;
    v24 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v24 = 2;
    v25 = *(_BYTE *)(v24 + 6);
    *(_WORD *)(v24 + 4) = 76;
    *(_BYTE *)(v24 + 6) = v25 & 0xFC;
    *(_QWORD *)(v24 + 8) = v22;
    *a3 = v24;
    if (*(_DWORD *)v22 != 2)
    {
      *(_DWORD *)v22 -= 2;
      goto LABEL_46;
    }
    v31 = (int *)v22;
LABEL_55:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v11);
    goto LABEL_46;
  }
  v15 = v35;
  if (v35 >= v36)
  {
    v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v15 & 0x3F) == 0x15)
  {
    v35 = (__int128 *)((char *)v35 + 24);
    v17 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    for (i = v14 + 3; ; i = (__int128 *)((char *)i + 24))
    {
      v19 = (__int128 *)((char *)i - 24);
      if ((__int128 *)((char *)i - 24) < v36 || (v16 & 1) != 0)
      {
        if (v19 >= v36)
          v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v20 = *(_DWORD *)v19;
      }
      else
      {
        v17 = v17 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
        v16 = 1;
        LOBYTE(v20) = v17;
      }
      if ((v20 & 0x3F) != 0x10)
        break;
      v35 = i;
    }
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent(&v32, &v35, a2, 0, 1, 1, 1, 1);
    v21 = v32;
    if (v32 && v36 == v35)
    {
      *v4 = v37;
      v26 = WTF::fastCompactMalloc((WTF *)0x20);
      v27 = *(_BYTE *)(v26 + 6);
      *(_WORD *)(v26 + 4) = -24576;
      *(_BYTE *)(v26 + 6) = v27 & 0xFC;
      v34 = 0;
      *(_QWORD *)(v26 + 8) = v13;
      *(_QWORD *)(v26 + 16) = v12;
      v28 = v32;
      v32 = 0;
      *(_QWORD *)(v26 + 24) = v28;
      *(_DWORD *)v26 = 4;
      v29 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v29 = 2;
      v30 = *(_BYTE *)(v29 + 6);
      *(_WORD *)(v29 + 4) = 76;
      *(_BYTE *)(v29 + 6) = v30 & 0xFC;
      *(_QWORD *)(v29 + 8) = v26;
      *a3 = v29;
      if (*(_DWORD *)v26 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v26, v11);
      else
        *(_DWORD *)v26 -= 2;
      v12 = 0;
      v21 = v32;
    }
    else
    {
      *a3 = 0;
    }
    v32 = 0;
    if (v21)
    {
      if (*v21 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v11);
        if (!v12)
          goto LABEL_46;
        goto LABEL_44;
      }
      *v21 -= 2;
    }
    if (!v12)
      goto LABEL_46;
  }
  else
  {
    *a3 = 0;
  }
LABEL_44:
  if (*v12 != 2)
  {
    *v12 -= 2;
    goto LABEL_46;
  }
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
  v31 = v33;
  if (v33)
  {
    if (*v33 != 2)
    {
      *v33 -= 2;
      goto LABEL_46;
    }
    goto LABEL_55;
  }
LABEL_46:
  result = (__int128 *)v34;
  if (v34)
  {
    if (*v34 == 2)
      return (__int128 *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v11);
    else
      *v34 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::resolve(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  __int16 v6;
  _QWORD v7[2];
  _QWORD *v8;

  v5 = 0;
  v6 = 257;
  v7[0] = a2;
  v7[1] = &v5;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSPropertyParserHelpers::isColorFilterFunction(v4);
  }
  else
  {
    v8 = v7;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E339DCF0[v2])(&v8, a1);
  }
}

uint64_t WebCore::CSSPropertyParserHelpers::isColorFilterFunction(int a1)
{
  _BOOL4 v1;

  v1 = a1 == 821;
  if (a1 == 462)
    v1 = 1;
  return (a1 - 808) < 7 || v1;
}

uint64_t WTF::StringBuilder::operator WTF::StringView(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v5;
  uint64_t v6;

  v1 = a1[1];
  if (v1)
  {
    v2 = a1[1];
  }
  else
  {
    v2 = *a1;
    if (!*a1)
      goto LABEL_4;
  }
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
LABEL_4:
    v3 = *((_DWORD *)a1 + 4);
    if (!v3)
      return 0;
    if (*a1)
      v1 = *a1;
    if (v3 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1958E1878);
    }
    return *(_QWORD *)(v1 + 8);
  }
  v5 = *((_DWORD *)a1 + 4);
  if (!v5)
    return 0;
  v6 = *a1;
  if (!*a1)
    v6 = a1[1];
  if (v5 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1958E18A0);
  }
  return *(_QWORD *)(v6 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10CSSValueIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10CSSValueIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

unint64_t WTF::Vector<std::variant<WebCore::CSSValueID,WTF::AtomString>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::variant<WebCore::CSSValueID,WTF::AtomString>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::variant<WebCore::CSSValueID,WTF::AtomString>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::variant<WebCore::CSSValueID,WTF::AtomString>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = 16 * v5;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 8) = -1;
          v10 = *((unsigned int *)v9 + 2);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E339DD20[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 8) = v10;
            v11 = *((unsigned int *)v9 + 2);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))off_1E339DD10[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 2) = -1;
          v7 += 16;
          v9 = (WTF *)((char *)v9 + 16);
          v8 -= 16;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserHelpers::consumeFontVariantAlternates(WebCore::CSSParserTokenRange &)::$_0::operator() const(void)::{lambda(WTF::String &)#1}::operator()(uint64_t a1, WebCore::CSSParserTokenRange *a2)
{
  WTF::StringImpl *v2;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  char v8;
  int v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  if (*(_QWORD *)a2)
    return 0;
  v16 = WebCore::CSSPropertyParserHelpers::consumeFunction(*(__int128 ***)a1, a2);
  v17 = v5;
  WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)&v16, 0, &v18);
  v2 = v18;
  if (!v18)
    return v2;
  v18 = 0;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 2;
  v8 = *(_BYTE *)(v7 + 6);
  *(_WORD *)(v7 + 4) = 63;
  *(_BYTE *)(v7 + 6) = v8 & 0xFC;
  *(_QWORD *)(v7 + 8) = v2;
  v9 = *(_DWORD *)v2;
  *(_DWORD *)v2 += 2;
  if (v9)
    *(_DWORD *)v2 = v9;
  else
    WTF::StringImpl::destroy(v2, v6);
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  v2 = (WTF::StringImpl *)(v16 == v17);
  if (v16 == v17)
  {
    v11 = 0;
    **(_BYTE **)(a1 + 8) = 1;
    v12 = (*(_WORD *)(v7 + 4) & 0x7Fu) - 20;
    if (v12 > 0x3C)
      goto LABEL_14;
    if (((1 << ((*(_WORD *)(v7 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
    {
      v11 = *(_DWORD **)(v7 + 8);
      if (!v11)
        goto LABEL_14;
      goto LABEL_13;
    }
    if (v12 == 60)
    {
      v15 = WebCore::nameString(*(unsigned __int16 *)(v7 + 8));
    }
    else
    {
      if (v12 != 59)
        goto LABEL_14;
      v15 = WebCore::nameString(*(unsigned __int16 *)(v7 + 8));
    }
    v11 = (_DWORD *)*v15;
    if (*v15)
LABEL_13:
      *v11 += 2;
LABEL_14:
    v13 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v11;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v6);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if (*(_DWORD *)v7 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v7, v6);
  else
    *(_DWORD *)v7 -= 2;
  return v2;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeFontVariantAlternates(WebCore::CSSParserTokenRange &)::$_0::operator() const(void)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()(uint64_t a1, WebCore::CSSParserTokenRange *a2)
{
  uint64_t result;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;

  if (*((_DWORD *)a2 + 3))
    return 0;
  v30 = WebCore::CSSPropertyParserHelpers::consumeFunction(*(__int128 ***)a1, a2);
  v31 = v5;
  WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)&v30, 0, &v32);
  v6 = v32;
  if (!v32)
    return 0;
  while (1)
  {
    v32 = 0;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 2;
    v9 = *(_BYTE *)(v8 + 6);
    *(_WORD *)(v8 + 4) = 63;
    *(_BYTE *)(v8 + 6) = v9 & 0xFC;
    *(_QWORD *)(v8 + 8) = v6;
    v10 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    if (v10)
      *(_DWORD *)v6 = v10;
    else
      WTF::StringImpl::destroy(v6, v7);
    v11 = v32;
    v32 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v7);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = 0;
    v13 = (*(_WORD *)(v8 + 4) & 0x7Fu) - 20;
    if (v13 <= 0x3C)
    {
      if (((1 << ((*(_WORD *)(v8 + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
      {
        v12 = *(WTF::StringImpl **)(v8 + 8);
        if (!v12)
          goto LABEL_13;
LABEL_12:
        *(_DWORD *)v12 += 2;
        goto LABEL_13;
      }
      if (v13 == 60)
      {
        v29 = WebCore::nameString(*(unsigned __int16 *)(v8 + 8));
      }
      else
      {
        if (v13 != 59)
          goto LABEL_13;
        v29 = WebCore::nameString(*(unsigned __int16 *)(v8 + 8));
      }
      v12 = (WTF::StringImpl *)*v29;
      if (*v29)
        goto LABEL_12;
    }
LABEL_13:
    v32 = v12;
    v14 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v14 == *((_DWORD *)a2 + 2))
    {
      v26 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v14 + 1, (unint64_t)&v32);
      v14 = *((unsigned int *)a2 + 3);
      v27 = *(_QWORD *)a2;
      v28 = *v26;
      *v26 = 0;
      *(_QWORD *)(v27 + 8 * v14) = v28;
    }
    else
    {
      v15 = *(_QWORD *)a2;
      v32 = 0;
      *(_QWORD *)(v15 + 8 * v14) = v12;
    }
    *((_DWORD *)a2 + 3) = v14 + 1;
    v16 = v32;
    v32 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v7);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (*(_DWORD *)v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
    v17 = (__int128 *)v30;
    v18 = (__int128 *)v30;
    if (v30 >= v31)
    {
      v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v18 & 0x3F) != 0x15)
      break;
    if (v30 == v31)
    {
      v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v19 = 1;
      {
        v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
      }
    }
    else
    {
      v17 = (__int128 *)(v30 + 24);
      v30 += 24;
      v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v21 = v30;
    do
    {
      v22 = v21;
      if ((unint64_t)v17 < v31 || (v19 & 1) != 0)
      {
        if ((unint64_t)v17 >= v31)
          v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v23 = v17;
        v24 = *(_DWORD *)v23;
      }
      else
      {
        v20 = v20 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
        v19 = 1;
        LOBYTE(v24) = v20;
      }
      v25 = v24 & 0x3F;
      v21 = (unint64_t)v17 + 24;
      v17 = (__int128 *)((char *)v17 + 24);
    }
    while (v25 == 16);
    v30 = v22;
    WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)&v30, 0, &v32);
    v6 = v32;
    if (!v32)
      return 0;
  }
  if (v30 != v31)
    return 0;
  result = 1;
  **(_BYTE **)(a1 + 8) = 1;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)441,(WebCore::CSSValueID)442,(WebCore::CSSValueID)443,(WebCore::CSSValueID)448,(WebCore::CSSValueID)449,(WebCore::CSSValueID)470,(WebCore::CSSValueID)471,(WebCore::CSSValueID)472>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;

  v3 = (_QWORD *)result;
  v5 = *(__int128 **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 441 > 0x1F || ((1 << (result + 71)) & 0xE0000187) == 0)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v10 = *(__int128 **)a2;
    v9 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v9)
    {
      v12 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v11 = *(__int128 **)a2;
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v11 = (__int128 *)((char *)v10 + 24);
      *(_QWORD *)a2 = (char *)v10 + 24;
    }
    while (1)
    {
      if ((unint64_t)v11 < v9 || (v12 & 1) != 0)
      {
        if ((unint64_t)v11 >= v9)
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v13 = *(_DWORD *)v11;
      }
      else
      {
        v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
        v12 = 1;
      }
      if ((v13 & 0x3F) != 0x10)
        break;
      v11 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v11;
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0)
    {
      result = 0;
    }
    else
    {
      result = *((unsigned int *)v10 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
        *((_DWORD *)v10 + 4) = result;
      }
      if ((unsigned __int16)result >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x1958E215CLL);
      }
    }
    v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
    *v7 += 2;
  }
  *v3 = v7;
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeCommaSeparatedListWithoutSingleValueOptimization<WTF::RefPtr<WebCore::CSSShadowValue,WTF::RawPtrTraits<WebCore::CSSShadowValue>,WTF::DefaultRefDerefTraits<WebCore::CSSShadowValue>> (&)(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,BOOL,BOOL),WebCore::CSSParserContext const&,BOOL &,BOOL &>@<X0>(__int128 **a1@<X0>, void (*a2)(_DWORD **__return_ptr, __int128 **, uint64_t, _QWORD, _QWORD)@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, _QWORD *a6@<X8>)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  char v20;
  unsigned int v21;
  WTF *result;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  unsigned int v28;
  WTF *v29;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  WTF *v35;
  int v36;
  unsigned int v37;
  _BYTE v38[32];
  _DWORD *v39;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[32];

  v40 = (WTF *)v42;
  v41 = 4;
  a2(&v39, a1, a3, *a4, *a5);
  v13 = (uint64_t)v39;
  if (v39)
  {
    while (1)
    {
      v39 = 0;
      v14 = HIDWORD(v41);
      if (HIDWORD(v41) == (_DWORD)v41)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1);
        v14 = HIDWORD(v41);
      }
      *((_QWORD *)v40 + HIDWORD(v41)) = v13;
      HIDWORD(v41) = v14 + 1;
      v15 = v39;
      v39 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v12);
        else
          *v15 -= 2;
      }
      v17 = *a1;
      v16 = a1[1];
      if (*a1 >= v16)
      {
        v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v17 & 0x3F) != 0x15)
        break;
      v18 = *a1;
      if (*a1 == v16)
      {
        v20 = 1;
        {
          v19 = v16;
        }
        else
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v19 = *a1;
        }
      }
      else
      {
        v19 = (__int128 *)((char *)v18 + 24);
        *a1 = (__int128 *)((char *)v18 + 24);
      }
      while (1)
      {
        if (v19 < v16 || (v20 & 1) != 0)
        {
          if (v19 >= v16)
            v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v21 = *(_DWORD *)v19;
        }
        else
        {
          v21 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v21;
          v20 = 1;
        }
        if ((v21 & 0x3F) != 0x10)
          break;
        v19 = (__int128 *)((char *)*a1 + 24);
        *a1 = v19;
      }
      a2(&v39, a1, a3, *a4, *a5);
      v13 = (uint64_t)v39;
      if (!v39)
        goto LABEL_23;
    }
    v35 = (WTF *)v38;
    v36 = 4;
    v27 = v40;
    if (v40 == (WTF *)v42)
    {
      v28 = HIDWORD(v41);
      memcpy(v38, v42, 8 * HIDWORD(v41));
    }
    else
    {
      v40 = (WTF *)v42;
      v35 = v27;
      v34 = v41;
      v28 = HIDWORD(v41);
      LODWORD(v41) = 4;
      v36 = v34;
    }
    HIDWORD(v41) = 0;
    v37 = v28;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v35, (uint64_t *)&v39);
    *a6 = v39;
    if (v37)
    {
      v31 = v35;
      v32 = 8 * v37;
      do
      {
        v33 = *(_DWORD **)v31;
        *(_QWORD *)v31 = 0;
        if (v33)
        {
          if (*v33 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, v12);
          else
            *v33 -= 2;
        }
        v31 = (WTF *)((char *)v31 + 8);
        v32 -= 8;
      }
      while (v32);
    }
    v29 = v35;
    if (v38 != (_BYTE *)v35 && v35 != 0)
    {
      v35 = 0;
      v36 = 0;
      WTF::fastFree(v29, v12);
    }
  }
  else
  {
LABEL_23:
    *a6 = 0;
  }
  if (HIDWORD(v41))
  {
    v24 = v40;
    v25 = 8 * HIDWORD(v41);
    do
    {
      v26 = *(_DWORD **)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (*v26 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v12);
        else
          *v26 -= 2;
      }
      v24 = (WTF *)((char *)v24 + 8);
      v25 -= 8;
    }
    while (v25);
  }
  result = v40;
  if (v42 != (_BYTE *)v40 && v40 != 0)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumeNumbersOrPercents(WebCore::CSSParserTokenRange &,WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned int)::$_0::operator()(uint64_t a1)
{
  __int128 *result;
  WTF::StringImpl *v3;
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int **v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v16;
  int *v17;
  int *v18;

  result = WebCore::CSSPropertyParserHelpers::consumePercentDividedBy100OrNumber(*(_QWORD *)a1, 0, &v18);
  v4 = v18;
  if (!v18)
    return (__int128 *)(v4 != 0);
  v5 = *(_QWORD *)(a1 + 8);
  v18 = 0;
  v6 = *(unsigned int *)(v5 + 12);
  if ((_DWORD)v6 != *(_DWORD *)(v5 + 8))
  {
    v7 = (int **)(*(_QWORD *)v5 + 8 * v6);
LABEL_4:
    *v7 = v4;
    *(_DWORD *)(v5 + 12) = v6 + 1;
    --**(_DWORD **)(a1 + 16);
    v8 = v18;
    v18 = 0;
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v3);
      else
        *v8 -= 2;
    }
    return (__int128 *)(v4 != 0);
  }
  v16 = *(unsigned int *)(v5 + 12);
  v17 = v4;
  v9 = v6 + (v6 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= v6 + 1)
    v11 = v6 + 1;
  else
    v11 = v10;
  v12 = *(void **)v5;
  if (v11 < 5)
  {
    v14 = (void *)(v5 + 16);
    *(_QWORD *)v5 = v5 + 16;
    *(_DWORD *)(v5 + 8) = 4;
    goto LABEL_18;
  }
  if (!(v11 >> 29))
  {
    v13 = v11;
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(v5 + 8) = v13;
    *(_QWORD *)v5 = v14;
LABEL_18:
    memcpy(v14, v12, 8 * v16);
    if ((void *)(v5 + 16) != v12 && v12 != 0)
    {
      if (*(void **)v5 == v12)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree((WTF *)v12, v3);
    }
    v6 = *(unsigned int *)(v5 + 12);
    v7 = (int **)(*(_QWORD *)v5 + 8 * v6);
    v4 = v17;
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeCounterContent(uint64_t *a1, __int128 *a2, __int128 *a3, int a4, WebCore::CSSParserTokenRange *a5)
{
  uint64_t result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  char v15;
  unsigned int v16;
  __int128 *i;
  __int128 *v18;
  int v19;
  WTF::StringImpl *v20;
  __int128 *v21;
  char v22;
  unsigned int v23;
  __int128 *v24;
  unsigned int v25;
  __int128 *v26;
  __int128 *v27;
  char v28;
  unsigned int v29;
  __int128 *v30;
  int v31;
  char v32;
  __int128 *v33;
  int *v34;
  char v35;
  WTF::StringImpl *v36;
  __int128 *v37;
  __int128 *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v37 = a2;
  v38 = a3;
  result = WebCore::CSSPropertyParserHelpers::consumeCustomIdentRaw((uint64_t)&v37, 0, &v36);
  v10 = v36;
  v36 = 0;
  if (!v10)
    goto LABEL_73;
  v39 = v10;
  if ((*((_BYTE *)v10 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::addSlowCase();
    v11 = v39;
    v10 = v40;
    v39 = 0;
    v40 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  result = (uint64_t)v36;
  v36 = 0;
  if (!result)
    goto LABEL_7;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_7:
    if (v10)
      goto LABEL_8;
LABEL_73:
    *a1 = 0;
    return result;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
  if (!v10)
    goto LABEL_73;
LABEL_8:
  v13 = v37;
  v12 = v38;
  if (!a4)
  {
    v20 = 0;
    goto LABEL_45;
  }
  v14 = v37;
  if (v37 >= v38)
  {
    v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v14 & 0x3F) == 0x15)
  {
    if (v37 == v38)
    {
      v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v15 = 1;
      {
        v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
      }
    }
    else
    {
      v13 = (__int128 *)((char *)v37 + 24);
      v37 = (__int128 *)((char *)v37 + 24);
      v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    for (i = v13; ; v37 = i)
    {
      if (i < v38 || (v15 & 1) != 0)
      {
        v18 = i >= v38 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : i;
        v19 = *(_DWORD *)v18;
      }
      else
      {
        v16 = v16 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
        v15 = 1;
        LOBYTE(v19) = v16;
      }
      if ((v19 & 0x3F) != 0x10)
        break;
      i = (__int128 *)((char *)i + 24);
    }
    v21 = i >= v38 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : i;
    if ((i < v38) | v15 & 1)
    {
      v22 = (i >= v38) | v15;
    }
    else
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16 & 0xFF000000 | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v22 = 1;
      v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    if ((*(_DWORD *)v21 & 0x3F) == 0x1C)
    {
      if (i == v38)
      {
        v23 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v22 & 1) == 0)
        {
          v23 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v23;
        }
        v13 = v38;
        v22 = 1;
        i = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v13 = (__int128 *)((char *)i + 24);
        v37 = (__int128 *)((char *)i + 24);
        v23 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if (v13 < v38 || (v22 & 1) != 0)
        {
          v24 = v13 >= v38 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v13;
          v25 = *(_DWORD *)v24;
        }
        else
        {
          v25 = v23 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
          v22 = 1;
          v23 = v25;
        }
        if ((v25 & 0x3F) != 0x10)
          break;
        v13 = (__int128 *)((char *)v13 + 24);
        v37 = v13;
      }
      if ((*((_BYTE *)i + 2) & 0x40) != 0)
        result = WTF::AtomStringImpl::add();
      else
        result = WTF::AtomStringImpl::add();
      v20 = v40;
LABEL_45:
      WebCore::staticCSSValuePool[4188] += 2;
      v26 = v13;
      if (v13 >= v12)
      {
        v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v26 & 0x3F) != 0x15)
      {
        v34 = &WebCore::staticCSSValuePool[4188];
        if (v13 != v12)
        {
LABEL_70:
          *a1 = 0;
          if (*v34 == 2)
            result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v9);
          else
            *v34 -= 2;
LABEL_83:
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              result = WTF::StringImpl::destroy(v20, v9);
            else
              *(_DWORD *)v20 -= 2;
          }
          goto LABEL_86;
        }
LABEL_98:
        result = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)result = 2;
        v35 = *(_BYTE *)(result + 6);
        *(_WORD *)(result + 4) = -8192;
        *(_BYTE *)(result + 6) = v35 & 0xFC;
        *(_QWORD *)(result + 8) = v10;
        *(_QWORD *)(result + 16) = v20;
        *(_QWORD *)(result + 24) = v34;
        *a1 = result;
        return result;
      }
      if (v13 == v12)
      {
        v29 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v28 = 1;
        {
          v29 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
        }
        v27 = v12;
      }
      else
      {
        v27 = (__int128 *)((char *)v13 + 24);
        v37 = v27;
        v29 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if (v27 < v12 || (v28 & 1) != 0)
        {
          v30 = v27 >= v12 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v27;
          v31 = *(_DWORD *)v30;
        }
        else
        {
          v29 = v29 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
          v28 = 1;
          LOBYTE(v31) = v29;
        }
        if ((v31 & 0x3F) != 0x10)
          break;
        v27 = (__int128 *)((char *)v27 + 24);
        v37 = v27;
      }
      v32 = (v27 < v12) | v28;
      if (v27 >= v12)
        v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v33 = v27;
      if ((v32 & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29 & 0xFF000000 | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      if ((*(_DWORD *)v33 & 0x3F) == 0)
      {
        result = *((unsigned int *)v33 + 4);
        if ((result & 0x80000000) != 0)
        {
          result = WebCore::cssValueKeywordID(*((_QWORD *)v33 + 1), *((unsigned int *)v33 + 1) | ((unint64_t)((*(_DWORD *)v33 >> 22) & 1) << 32));
          *((_DWORD *)v33 + 4) = result;
        }
        if ((unsigned __int16)result == 6)
          goto LABEL_66;
      }
      if (v27 >= v12)
      {
        v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v27 & 0x3F) == 0x1C)
      {
LABEL_66:
        v34 = &WebCore::staticCSSValuePool[4188];
        goto LABEL_70;
      }
      result = WebCore::CSSPropertyParserHelpers::consumeListStyleType(&v37, a5, (uint64_t *)&v40);
      v34 = (int *)v40;
      if (WebCore::staticCSSValuePool[4188] == 2)
      {
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[4188], v9);
        if (v34)
        {
LABEL_69:
          if (v37 != v38)
            goto LABEL_70;
          goto LABEL_98;
        }
      }
      else
      {
        WebCore::staticCSSValuePool[4188] -= 2;
        if (v34)
          goto LABEL_69;
      }
      *a1 = 0;
      goto LABEL_83;
    }
  }
  *a1 = 0;
LABEL_86:
  if (*(_DWORD *)v10 == 2)
    return WTF::StringImpl::destroy(v10, v9);
  *(_DWORD *)v10 -= 2;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapeRayOrBox(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::PathParsingOption>)::$_0::operator()(int **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  int *v9;
  WebCore::CSSParserTokenRange *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  char v17;
  _DWORD *v18;
  __int128 *v19;
  unsigned int v20;
  __int128 *v21;
  unsigned int v22;
  __int128 *v23;
  unsigned int v24;
  int v25;
  _DWORD *v26;
  __int128 *v27;
  __int128 *v28;
  char v29;
  unsigned int v30;
  __int128 *v31;
  int v32;
  int v33;
  __int128 *v34;
  __int128 *v35;
  char v36;
  unsigned int v37;
  __int128 *v38;
  int v39;
  __int128 *v40;
  __int128 *v41;
  char v42;
  unsigned int v43;
  __int128 *v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  int v50;
  int *v51;
  uint64_t v52;
  _DWORD *v53;
  char v54;
  __int128 v55;
  unsigned __int8 v56;
  __int128 *v57;
  unint64_t v58;

  if ((**(_BYTE **)a2 & 1) == 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v8 = *(__int128 **)a3;
    v7 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)a3 >= v7)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v8 & 0x3F) == 1)
    {
      v9 = *(int **)a3;
      if (*(_QWORD *)a3 >= v7)
      {
        v9 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if (WebCore::CSSParserToken::functionId(v9) == 1004)
      {
        result = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)a3, v10);
        v13 = 0;
        LOWORD(v14) = 0;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v57 = (__int128 *)result;
        v58 = (unint64_t)v12;
        LOBYTE(v55) = 0;
        v56 = 0;
LABEL_7:
        v18 = v16;
        while (1)
        {
          v16 = v18;
          if (v57 == (__int128 *)v58)
            break;
          if (!v18)
          {
            result = WebCore::CSSPropertyParserHelpers::consumeAngle((uint64_t)&v57, *(unsigned __int8 *)(v6 + 48), 1, 1, &v52);
            v18 = (_DWORD *)v52;
            if (v52)
              continue;
          }
          if (v15)
          {
            v15 = 1;
            if ((v17 & 1) == 0)
              goto LABEL_16;
          }
          else
          {
            v19 = v57;
            if ((unint64_t)v57 >= v58)
            {
              v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                v20 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
              }
              v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            else
            {
              v20 = *(_DWORD *)v57;
            }
            if ((v20 & 0x3F) == 0)
            {
              result = *((unsigned int *)v19 + 4);
              if ((result & 0x80000000) != 0)
              {
                result = WebCore::cssValueKeywordID(*((_QWORD *)v19 + 1), *((unsigned int *)v19 + 1) | ((unint64_t)((v20 >> 22) & 1) << 32));
                *((_DWORD *)v19 + 4) = result;
              }
              if ((unsigned __int16)result - 698 < 3
                || (unsigned __int16)result == 1005
                || (unsigned __int16)result == 701)
              {
                v27 = v57;
                if (v57 == (__int128 *)v58)
                {
                  v30 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  v29 = 1;
                  {
                    v30 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
                  }
                  v28 = v57;
                  v27 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                }
                else
                {
                  v28 = (__int128 *)((char *)v57 + 24);
                  v57 = (__int128 *)((char *)v57 + 24);
                  v30 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                }
                while (1)
                {
                  if ((unint64_t)v28 < v58 || (v29 & 1) != 0)
                  {
                    v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                    if ((unint64_t)v28 < v58)
                      v31 = v28;
                    v32 = *(_DWORD *)v31;
                  }
                  else
                  {
                    v30 = v30 & 0xFF000000 | 0x1E;
                    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
                    v29 = 1;
                    LOBYTE(v32) = v30;
                  }
                  if ((v32 & 0x3F) != 0x10)
                    break;
                  v28 = (__int128 *)((char *)v28 + 24);
                  v57 = v28;
                }
                LOWORD(v14) = 0;
                v15 = 1;
                if ((*(_DWORD *)v27 & 0x3F) == 0)
                {
                  v14 = *((_DWORD *)v27 + 4);
                  if (v14 < 0)
                  {
                    result = WebCore::cssValueKeywordID(*((_QWORD *)v27 + 1), *((unsigned int *)v27 + 1) | ((unint64_t)((*(_DWORD *)v27 >> 22) & 1) << 32));
                    LOWORD(v14) = result;
                    *((_DWORD *)v27 + 4) = result;
                  }
                }
                goto LABEL_7;
              }
            }
            LOWORD(v14) = 0;
            v15 = 0;
            if ((v17 & 1) == 0)
            {
LABEL_16:
              v21 = v57;
              if ((unint64_t)v57 >= v58)
              {
                v22 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                {
                  v22 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                  WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v22;
                }
                if ((v22 & 0x3F) == 0)
                {
                  v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
LABEL_18:
                  if ((v22 & 0x3F) == 0)
                  {
                    result = *((unsigned int *)v21 + 4);
                    if ((result & 0x80000000) != 0)
                    {
                      result = WebCore::cssValueKeywordID(*((_QWORD *)v21 + 1), *((unsigned int *)v21 + 1) | ((unint64_t)((v22 >> 22) & 1) << 32));
                      *((_DWORD *)v21 + 4) = result;
                    }
                    if ((unsigned __int16)result == 621)
                    {
                      v40 = v57;
                      if (v57 == (__int128 *)v58)
                      {
                        v43 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                        v42 = 1;
                        {
                          v43 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v43;
                        }
                        v41 = v57;
                        v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                      }
                      else
                      {
                        v41 = (__int128 *)((char *)v57 + 24);
                        v57 = (__int128 *)((char *)v57 + 24);
                        v43 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                      }
                      while (1)
                      {
                        if ((unint64_t)v41 < v58 || (v42 & 1) != 0)
                        {
                          v44 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                          if ((unint64_t)v41 < v58)
                            v44 = v41;
                          v45 = *(_DWORD *)v44;
                        }
                        else
                        {
                          v43 = v43 & 0xFF000000 | 0x1E;
                          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v43;
                          v42 = 1;
                          LOBYTE(v45) = v43;
                        }
                        if ((v45 & 0x3F) != 0x10)
                          break;
                        v41 = (__int128 *)((char *)v41 + 24);
                        v57 = v41;
                      }
                      v17 = 1;
                      if ((*(_DWORD *)v40 & 0x3F) == 0 && (v40[1] & 0x80000000) != 0)
                      {
                        result = WebCore::cssValueKeywordID(*((_QWORD *)v40 + 1), *((unsigned int *)v40 + 1) | ((unint64_t)((*(_DWORD *)v40 >> 22) & 1) << 32));
                        *((_DWORD *)v40 + 4) = result;
                      }
                      goto LABEL_7;
                    }
                  }
                }
              }
              else
              {
                v22 = *(_DWORD *)v57;
                if ((*(_DWORD *)v57 & 0x3F) == 0)
                  goto LABEL_18;
              }
            }
          }
          if (v13)
          {
            v51 = 0;
            goto LABEL_123;
          }
          v23 = v57;
          if ((unint64_t)v57 >= v58)
          {
            v24 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              v24 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v24;
            }
            if ((v24 & 0x3F) == 0)
            {
              v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              goto LABEL_22;
            }
          }
          else
          {
            v24 = *(_DWORD *)v57;
            if ((*(_DWORD *)v57 & 0x3F) == 0)
            {
LABEL_22:
              if ((v24 & 0x3F) == 0)
              {
                v33 = *((_DWORD *)v23 + 4);
                if (v33 < 0)
                {
                  v33 = WebCore::cssValueKeywordID(*((_QWORD *)v23 + 1), *((unsigned int *)v23 + 1) | ((unint64_t)((v24 >> 22) & 1) << 32));
                  *((_DWORD *)v23 + 4) = v33;
                }
                if ((unsigned __int16)v33 == 721)
                {
                  v34 = v57;
                  if (v57 == (__int128 *)v58)
                  {
                    v37 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                    v36 = 1;
                    {
                      v37 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v37;
                    }
                    v35 = v57;
                    v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  }
                  else
                  {
                    v35 = (__int128 *)((char *)v57 + 24);
                    v57 = (__int128 *)((char *)v57 + 24);
                    v37 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  }
                  while (1)
                  {
                    if ((unint64_t)v35 < v58 || (v36 & 1) != 0)
                    {
                      v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                      if ((unint64_t)v35 < v58)
                        v38 = v35;
                      v39 = *(_DWORD *)v38;
                    }
                    else
                    {
                      v37 = v37 & 0xFF000000 | 0x1E;
                      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v37;
                      v36 = 1;
                      LOBYTE(v39) = v37;
                    }
                    if ((v39 & 0x3F) != 0x10)
                      break;
                    v35 = (__int128 *)((char *)v35 + 24);
                    v57 = v35;
                  }
                  if ((*(_DWORD *)v34 & 0x3F) == 0 && (v34[1] & 0x80000000) != 0)
                    *((_DWORD *)v34 + 4) = WebCore::cssValueKeywordID(*((_QWORD *)v34 + 1), *((unsigned int *)v34 + 1) | ((unint64_t)((*(_DWORD *)v34 >> 22) & 1) << 32));
                  WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)&v57, *(unsigned __int8 *)(v6 + 48), 1, 0, 0, (uint64_t)&v52);
LABEL_24:
                  result = std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>((uint64_t)&v55, (WTF::StringImpl *)&v52);
                  v25 = v56;
                  if (v54)
                  {
                    v26 = v53;
                    v53 = 0;
                    if (v26)
                    {
                      if (*v26 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v12);
                      else
                        *v26 -= 2;
                    }
                    result = v52;
                    v52 = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v12);
                      else
                        *(_DWORD *)result -= 2;
                    }
                  }
                  v13 = 1;
                  if (!v25)
                  {
                    v51 = 0;
                    goto LABEL_132;
                  }
                  goto LABEL_7;
                }
              }
            }
          }
          LOBYTE(v52) = 0;
          v54 = 0;
          goto LABEL_24;
        }
        if (v18)
        {
          if (v15)
            v46 = v14;
          else
            v46 = 698;
          if (v13)
          {
            v47 = WTF::fastCompactMalloc((WTF *)0x18);
            *(_DWORD *)v47 = 2;
            v48 = (*(unsigned __int8 *)(v47 + 6) << 16) & 0xFC0000 | 0x10000;
            *(_BYTE *)(v47 + 7) = 0;
            v49 = v55;
            v55 = 0uLL;
            *(_OWORD *)(v47 + 8) = v49;
            *(_WORD *)(v47 + 4) = -18432;
            *(_BYTE *)(v47 + 6) = BYTE2(v48);
          }
          else
          {
            v47 = 0;
          }
          result = WTF::fastCompactMalloc((WTF *)0x28);
          v51 = (int *)result;
          *(_DWORD *)result = 2;
          v50 = *(unsigned __int8 *)(result + 6) >> 2;
          *(_WORD *)(result + 4) = 0x8000;
          *(_BYTE *)(result + 6) = (((v50 & 0x3F) << 18) | 0x10000u) >> 16;
          *(_QWORD *)(result + 8) = v16;
          *(_WORD *)(result + 16) = v46;
          *(_BYTE *)(result + 18) = v17 & 1;
          *(_QWORD *)(result + 24) = v47;
          *(_BYTE *)(result + 32) = 0;
        }
        else
        {
          v51 = 0;
        }
        if (!v13)
          goto LABEL_135;
        v16 = 0;
LABEL_123:
        if (*((_QWORD *)&v55 + 1))
        {
          if (**((_DWORD **)&v55 + 1) == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v55 + 1), v12);
          else
            **((_DWORD **)&v55 + 1) -= 2;
        }
        result = v55;
        if ((_QWORD)v55)
        {
          if (*(_DWORD *)v55 == 2)
            result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v55, v12);
          else
            *(_DWORD *)v55 -= 2;
        }
LABEL_132:
        if (!v16)
          goto LABEL_135;
        if (*v16 != 2)
        {
          *v16 -= 2;
LABEL_135:
          if (!v51)
            return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeBasicShape(a1, (__int128 *)a3, *(const WebCore::CSSParserContext **)(a2 + 8), **(_BYTE **)a2);
          goto LABEL_136;
        }
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v12);
        if (v51)
        {
LABEL_136:
          *a1 = v51;
          return result;
        }
      }
    }
  }
  return (uint64_t)WebCore::CSSPropertyParserHelpers::consumeBasicShape(a1, (__int128 *)a3, *(const WebCore::CSSParserContext **)(a2 + 8), **(_BYTE **)a2);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapeCircle(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  __int128 *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  int *v23;
  _DWORD *v24;
  char v25;
  __int128 v26;
  char v27;
  int *v28;

  v6 = *a2;
  if (*a2 >= a2[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v7 = *((unsigned __int8 *)a3 + 48);
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v12 = *((_DWORD *)v6 + 4);
  if (v12 < 0)
  {
    v12 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v12;
  }
  if ((unsigned __int16)v12 == 700 || (unsigned __int16)v12 == 698)
  {
    v13 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(a2, (WebCore::CSSParserTokenRange *)a2);
    if ((v13 & 0xFF0000) != 0)
    {
      if ((unsigned __int16)v13 >= 0x48Eu)
      {
        result = 92;
        __break(0xC471u);
        return result;
      }
      v14 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v13 + 3088];
      *v14 += 2;
    }
    else
    {
      v14 = 0;
    }
    v28 = v14;
  }
  else
  {
LABEL_3:
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, v7, 1u, 1, 0, 0, 0, (uint64_t *)&v28);
  }
  LOBYTE(v26) = 0;
  v27 = 0;
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)721>((uint64_t)a2, &v23);
  v9 = v23;
  v23 = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
    else
      *v9 -= 2;
    WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)a2, *((unsigned __int8 *)a3 + 48), 1, 0, 0, (uint64_t)&v23);
    std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>((uint64_t)&v26, (WTF::StringImpl *)&v23);
    if (v25)
    {
      v11 = v24;
      v24 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v10);
        else
          *v11 -= 2;
      }
      v15 = v23;
      v23 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v10);
        else
          *v15 -= 2;
      }
    }
    if (v27)
    {
      v16 = (uint64_t)v28;
      v28 = 0;
      v17 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v17 = 2;
      v18 = *(_BYTE *)(v17 + 6);
      *(_WORD *)(v17 + 4) = -12288;
      *(_BYTE *)(v17 + 6) = v18 & 0xFC;
      *(_QWORD *)(v17 + 8) = v16;
      v19 = v26;
      *(_QWORD *)&v26 = 0;
      *(_OWORD *)(v17 + 16) = v19;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v21 = (uint64_t)v28;
    v28 = 0;
    v17 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v17 = 2;
    v22 = *(_BYTE *)(v17 + 6);
    *(_WORD *)(v17 + 4) = -12288;
    *(_BYTE *)(v17 + 6) = v22 & 0xFC;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 8) = v21;
  }
  *(_QWORD *)this = v17;
  result = (uint64_t)v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeBasicShapeEllipse(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  __int128 *v6;
  uint64_t v7;
  WebCore::CSSParserTokenRange *v8;
  __int128 *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int *v12;
  int v13;
  uint64_t v14;
  int *v15;
  WTF::StringImpl *v16;
  int *v17;
  _DWORD *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int *result;
  int *v27;
  char v28;
  int *v29;
  _DWORD *v30;
  char v31;
  __int128 v32;
  char v33;
  int *v34;

  v6 = *a2;
  if (*a2 >= a2[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v7 = *((unsigned __int8 *)a3 + 48);
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  v13 = *((_DWORD *)v6 + 4);
  if (v13 < 0)
  {
    v13 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v13;
  }
  if ((unsigned __int16)v13 == 700 || (unsigned __int16)v13 == 698)
  {
    v14 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(a2, (WebCore::CSSParserTokenRange *)a2);
    if ((v14 & 0xFF0000) != 0)
    {
      if ((unsigned __int16)v14 >= 0x48Eu)
      {
        __break(0xC471u);
        goto LABEL_59;
      }
      v15 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v14 + 3088];
      *v15 += 2;
    }
    else
    {
      v15 = 0;
    }
    v34 = v15;
    if (!v15)
      goto LABEL_19;
  }
  else
  {
LABEL_3:
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, v7, 1u, 1, 0, 0, 0, (uint64_t *)&v34);
    if (!v34)
    {
LABEL_19:
      v12 = 0;
      goto LABEL_20;
    }
  }
  v9 = *a2;
  if (*a2 >= a2[1])
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v10 = *((unsigned __int8 *)a3 + 48);
  if ((*(_DWORD *)v9 & 0x3F) != 0)
    goto LABEL_6;
  v24 = *((_DWORD *)v9 + 4);
  if (v24 < 0)
  {
    v24 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
    *((_DWORD *)v9 + 4) = v24;
  }
  if ((unsigned __int16)v24 != 700 && (unsigned __int16)v24 != 698)
  {
LABEL_6:
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, v10, 1u, 1, 0, 0, 0, (uint64_t *)&v32);
    v12 = (int *)v32;
    goto LABEL_7;
  }
  v25 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(a2, v8);
  if ((v25 & 0xFF0000) != 0)
  {
    if ((unsigned __int16)v25 < 0x48Eu)
    {
      v12 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v25 + 3088];
      *v12 += 2;
      goto LABEL_7;
    }
    __break(0xC471u);
LABEL_59:
    JUMPOUT(0x1958E3AE4);
  }
  v12 = 0;
LABEL_7:
  if (!v12)
  {
    *(_QWORD *)this = 0;
    goto LABEL_49;
  }
LABEL_20:
  LOBYTE(v32) = 0;
  v33 = 0;
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)721>((uint64_t)a2, &v29);
  v17 = v29;
  v29 = 0;
  if (!v17)
  {
    v27 = v34;
    v34 = 0;
    v21 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v21 = 2;
    v28 = *(_BYTE *)(v21 + 6);
    *(_WORD *)(v21 + 4) = -4096;
    *(_BYTE *)(v21 + 6) = v28 & 0xFC;
    *(_QWORD *)(v21 + 8) = v27;
    *(_QWORD *)(v21 + 16) = v12;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    goto LABEL_37;
  }
  if (*v17 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v16);
  else
    *v17 -= 2;
  WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)a2, *((unsigned __int8 *)a3 + 48), 1, 0, 0, (uint64_t)&v29);
  std::__optional_storage_base<WebCore::CSSGradientPosition,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::CSSGradientPosition,false>>((uint64_t)&v32, (WTF::StringImpl *)&v29);
  if (v31)
  {
    v18 = v30;
    v30 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v11);
      else
        *v18 -= 2;
    }
    v19 = v29;
    v29 = 0;
    if (v19)
    {
      if (*v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
      else
        *v19 -= 2;
    }
  }
  if (v33)
  {
    v20 = v34;
    v34 = 0;
    v21 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v21 = 2;
    v22 = *(_BYTE *)(v21 + 6);
    *(_WORD *)(v21 + 4) = -4096;
    *(_BYTE *)(v21 + 6) = v22 & 0xFC;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(v21 + 16) = v12;
    v23 = v32;
    *(_QWORD *)&v32 = 0;
    *(_OWORD *)(v21 + 24) = v23;
LABEL_37:
    *(_QWORD *)this = v21;
    goto LABEL_49;
  }
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*v12 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
    else
      *v12 -= 2;
  }
LABEL_49:
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v11);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapePolygon(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  __int128 *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t *v17;
  _DWORD *v18;
  _DWORD *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF *v29;
  unint64_t v30;
  unint64_t v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t result;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  char v41;
  unsigned int v42;
  WTF *v43;
  unsigned int v44;
  WTF *v45;
  uint64_t v46;
  _DWORD *v47;
  WTF *v48;
  int v50;
  BOOL v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  char v55;
  unsigned int v56;
  int v57;
  WTF *__src;
  int __srca;
  char v60;
  WTF *v61;
  int v62;
  unsigned int v63;
  _BYTE v64[32];
  _DWORD *v65;
  _DWORD *v66;
  WTF *v67;
  uint64_t v68;
  _BYTE v69[32];

  v6 = *a2;
  if (*a2 >= a2[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_3;
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  if ((unsigned __int16)result - 719 > 1)
  {
LABEL_3:
    v60 = 0;
  }
  else
  {
    v39 = *a2;
    v38 = a2[1];
    if (*a2 == v38)
    {
      v41 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v40 = *a2;
      v39 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v40 = (__int128 *)((char *)v39 + 24);
      *a2 = (__int128 *)((char *)v39 + 24);
    }
    while (1)
    {
      if (v40 < v38 || (v41 & 1) != 0)
      {
        if (v40 >= v38)
          v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v42 = *(_DWORD *)v40;
      }
      else
      {
        v42 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v42;
        v41 = 1;
      }
      if ((v42 & 0x3F) != 0x10)
        break;
      v40 = (__int128 *)((char *)*a2 + 24);
      *a2 = v40;
    }
    if ((*(_DWORD *)v39 & 0x3F) != 0)
    {
      v50 = 0;
    }
    else
    {
      result = *((unsigned int *)v39 + 4);
      if ((result & 0x80000000) != 0)
      {
        result = WebCore::cssValueKeywordID(*((_QWORD *)v39 + 1), *((unsigned int *)v39 + 1) | ((unint64_t)((*(_DWORD *)v39 >> 22) & 1) << 32));
        *((_DWORD *)v39 + 4) = result;
        v38 = a2[1];
      }
      v50 = (unsigned __int16)result;
    }
    v51 = v50 == 720;
    v52 = *a2;
    if (*a2 >= v38)
    {
      v52 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v52 & 0x3F) != 0x15)
    {
      *(_QWORD *)this = 0;
      return result;
    }
    v53 = *a2;
    if (*a2 == v38)
    {
      v55 = 1;
      v54 = v38;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v54 = *a2;
      }
    }
    else
    {
      v54 = (__int128 *)((char *)v53 + 24);
      *a2 = (__int128 *)((char *)v53 + 24);
    }
    while (1)
    {
      if (v54 < v38 || (v55 & 1) != 0)
      {
        if (v54 >= v38)
          v54 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v56 = *(_DWORD *)v54;
      }
      else
      {
        v56 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v56;
        v55 = 1;
      }
      if ((v56 & 0x3F) != 0x10)
        break;
      v54 = (__int128 *)((char *)*a2 + 24);
      *a2 = v54;
    }
    v60 = v51;
  }
  v67 = (WTF *)v69;
  v68 = 4;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v66);
  if (!v66)
  {
LABEL_70:
    *(_QWORD *)this = 0;
    goto LABEL_71;
  }
  while (1)
  {
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v65);
    v8 = (uint64_t)v65;
    if (v65)
    {
      v9 = (uint64_t)v66;
      v66 = 0;
      v10 = v68;
      v11 = HIDWORD(v68);
      if (HIDWORD(v68) == (_DWORD)v68)
      {
        v26 = HIDWORD(v68) + ((unint64_t)HIDWORD(v68) >> 2);
        if (v26 >= 0x10)
          v27 = v26 + 1;
        else
          v27 = 16;
        if (v27 <= (unint64_t)HIDWORD(v68) + 1)
          v28 = HIDWORD(v68) + 1;
        else
          v28 = v27;
        __src = v67;
        if (v28 < 5)
        {
          v67 = (WTF *)v69;
          LODWORD(v68) = 4;
          v29 = (WTF *)v69;
        }
        else
        {
          if (v28 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1958E4268);
          }
          v29 = (WTF *)WTF::fastMalloc((WTF *)(8 * v28));
          LODWORD(v68) = v28;
          v67 = v29;
        }
        memcpy(v29, __src, 8 * v11);
        if (v69 != (_BYTE *)__src && __src)
        {
          if (v67 == __src)
          {
            v67 = 0;
            LODWORD(v68) = 0;
          }
          WTF::fastFree(__src, v7);
        }
        v14 = HIDWORD(v68);
        v12 = v67;
        *((_QWORD *)v67 + HIDWORD(v68)) = v9;
        v13 = (uint64_t)v65;
        v10 = v68;
      }
      else
      {
        v12 = v67;
        *((_QWORD *)v67 + HIDWORD(v68)) = v9;
        v13 = v8;
        v14 = v11;
      }
      v15 = (v14 + 1);
      HIDWORD(v68) = v15;
      v65 = 0;
      if ((_DWORD)v15 == v10)
      {
        v30 = v15 + (v15 >> 2);
        if (v30 >= 0x10)
          v31 = v30 + 1;
        else
          v31 = 16;
        if (v31 <= v15 + 1)
          v31 = v15 + 1;
        if (v31 < 5)
        {
          v67 = (WTF *)v69;
          LODWORD(v68) = 4;
          v32 = (WTF *)v69;
        }
        else
        {
          if (v31 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1958E4270);
          }
          __srca = v31;
          v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v31));
          LODWORD(v68) = __srca;
          v67 = v32;
        }
        memcpy(v32, v12, 8 * v15);
        if (v69 != (_BYTE *)v12)
        {
          if (v67 == v12)
          {
            v67 = 0;
            LODWORD(v68) = 0;
          }
          WTF::fastFree(v12, v7);
        }
        v16 = HIDWORD(v68) + 1;
        v17 = (uint64_t *)((char *)v67 + 8 * HIDWORD(v68));
      }
      else
      {
        v16 = v14 + 2;
        v17 = (uint64_t *)((char *)v12 + 8 * v15);
      }
      *v17 = v13;
      HIDWORD(v68) = v16;
      v18 = v65;
      v65 = 0;
      if (v18)
      {
        if (*v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)v7);
        else
          *v18 -= 2;
      }
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    v19 = v66;
    v66 = 0;
    if (!v19)
      goto LABEL_18;
    if (*v19 != 2)
    {
      *v19 -= 2;
LABEL_18:
      if (!v8)
        goto LABEL_71;
      goto LABEL_19;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, (WTF::StringImpl *)v7);
    if (!v8)
      goto LABEL_71;
LABEL_19:
    v21 = *a2;
    v20 = a2[1];
    if (*a2 >= v20)
    {
      v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v21 & 0x3F) != 0x15)
      break;
    v22 = *a2;
    if (*a2 == v20)
    {
      v24 = 1;
      {
        v23 = v20;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v23 = *a2;
      }
    }
    else
    {
      v23 = (__int128 *)((char *)v22 + 24);
      *a2 = (__int128 *)((char *)v22 + 24);
    }
    while (1)
    {
      if (v23 < v20 || (v24 & 1) != 0)
      {
        if (v23 >= v20)
          v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v25 = *(_DWORD *)v23;
      }
      else
      {
        v25 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
        v24 = 1;
      }
      if ((v25 & 0x3F) != 0x10)
        break;
      v23 = (__int128 *)((char *)*a2 + 24);
      *a2 = v23;
    }
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v66);
    if (!v66)
      goto LABEL_70;
  }
  v61 = (WTF *)v64;
  v62 = 4;
  v43 = v67;
  if (v67 == (WTF *)v69)
  {
    v44 = HIDWORD(v68);
    memcpy(v64, v69, 8 * HIDWORD(v68));
  }
  else
  {
    v67 = (WTF *)v69;
    v61 = v43;
    v57 = v68;
    v44 = HIDWORD(v68);
    LODWORD(v68) = 4;
    v62 = v57;
  }
  HIDWORD(v68) = 0;
  v63 = v44;
  WebCore::CSSPolygonValue::create((uint64_t)&v61, v60, (uint64_t *)&v66);
  *(_QWORD *)this = v66;
  if (v63)
  {
    v45 = v61;
    v46 = 8 * v63;
    do
    {
      v47 = *(_DWORD **)v45;
      *(_QWORD *)v45 = 0;
      if (v47)
      {
        if (*v47 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, (WTF::StringImpl *)v7);
        else
          *v47 -= 2;
      }
      v45 = (WTF *)((char *)v45 + 8);
      v46 -= 8;
    }
    while (v46);
  }
  v48 = v61;
  if (v64 != (_BYTE *)v61 && v61 != 0)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree(v48, v7);
  }
LABEL_71:
  if (HIDWORD(v68))
  {
    v33 = v67;
    v34 = 8 * HIDWORD(v68);
    do
    {
      v35 = *(_DWORD **)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
      {
        if (*v35 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, (WTF::StringImpl *)v7);
        else
          *v35 -= 2;
      }
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  result = (uint64_t)v67;
  if (v69 != (_BYTE *)v67 && v67 != 0)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    return WTF::fastFree((WTF *)result, v7);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapeInset(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *((_QWORD *)&v28 + 1) = 0;
  v29 = 0uLL;
  WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v26);
  *(_QWORD *)&v28 = v26;
  if ((_QWORD)v26)
  {
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v26);
    *((_QWORD *)&v28 + 1) = v26;
    if ((_QWORD)v26)
    {
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v26);
      *(_QWORD *)&v29 = v26;
      if ((_QWORD)v26)
      {
        WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v26);
        *((_QWORD *)&v29 + 1) = v26;
      }
    }
    WebCore::CSSPropertyParserHelpers::complete4Sides<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v28);
    v26 = 0u;
    v27 = 0u;
    if (WebCore::CSSPropertyParserHelpers::consumeShapeBorderRadius(a2, (uint64_t)a3, (uint64_t)&v26))
    {
      v23 = (_DWORD *)*((_QWORD *)&v28 + 1);
      v24 = (_DWORD *)v28;
      v21 = (_DWORD *)*((_QWORD *)&v29 + 1);
      v22 = (_DWORD *)v29;
      v19 = (_DWORD *)*((_QWORD *)&v26 + 1);
      v20 = (_DWORD *)v26;
      v17 = (_DWORD *)*((_QWORD *)&v27 + 1);
      v18 = (_DWORD *)v27;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      WebCore::CSSInsetShapeValue::create((uint64_t *)&v24, (uint64_t *)&v23, (uint64_t *)&v22, (uint64_t *)&v21, (uint64_t *)&v20, (uint64_t *)&v19, (uint64_t *)&v18, (uint64_t *)&v17, &v25);
      *(_QWORD *)this = v25;
      v25 = 0;
      v8 = v17;
      v17 = 0;
      if (v8)
      {
        if (*v8 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
        else
          *v8 -= 2;
      }
      v9 = v18;
      v18 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v7);
        else
          *v9 -= 2;
      }
      v10 = v19;
      v19 = 0;
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v7);
        else
          *v10 -= 2;
      }
      v11 = v20;
      v20 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v7);
        else
          *v11 -= 2;
      }
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v7);
        else
          *v12 -= 2;
      }
      v13 = v22;
      v22 = 0;
      if (v13)
      {
        if (*v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v7);
        else
          *v13 -= 2;
      }
      v14 = v23;
      v23 = 0;
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v7);
        else
          *v14 -= 2;
      }
      v15 = v24;
      v24 = 0;
      if (v15)
      {
        if (*v15 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v7);
        else
          *v15 -= 2;
      }
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    std::array<WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>,4ul>::~array((uint64_t)&v26, v7);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return std::array<WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>,4ul>::~array((uint64_t)&v28, v6);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapeRect(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = 0;
  v19 = 0u;
  v20 = 0u;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumeAutoOrLengthOrPercent(&v17, (uint64_t)a2, *((unsigned __int8 *)a3 + 48));
    v8 = v17;
    v9 = *(_DWORD **)((char *)&v19 + v6);
    *(_QWORD *)((char *)&v19 + v6) = v17;
    if (!v9)
      goto LABEL_5;
    if (*v9 != 2)
    {
      *v9 -= 2;
LABEL_5:
      if (!v8)
        goto LABEL_9;
      goto LABEL_6;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v7);
    if (!*(_QWORD *)((char *)&v19 + v6))
    {
LABEL_9:
      *(_QWORD *)this = 0;
      goto LABEL_28;
    }
LABEL_6:
    v6 += 8;
  }
  while (v6 != 32);
  v17 = 0u;
  v18 = 0u;
  if (WebCore::CSSPropertyParserHelpers::consumeShapeBorderRadius(a2, (uint64_t)a3, (uint64_t)&v17))
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x48);
    v12 = v20;
    *(_OWORD *)(v11 + 8) = v19;
    v19 = 0u;
    v20 = 0u;
    *(_OWORD *)(v11 + 24) = v12;
    v13 = v17;
    v14 = v18;
    v17 = 0u;
    *(_DWORD *)v11 = 2;
    v15 = (*(unsigned __int8 *)(v11 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(v11 + 4) = -28672;
    *(_BYTE *)(v11 + 6) = BYTE2(v15);
    *(_OWORD *)(v11 + 40) = v13;
    *(_QWORD *)&v18 = 0;
    *(_OWORD *)(v11 + 56) = v14;
    *(_QWORD *)this = v11;
  }
  else
  {
    *(_QWORD *)this = 0;
    if (*((_QWORD *)&v18 + 1))
    {
      if (**((_DWORD **)&v18 + 1) == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v18 + 1), v7);
      else
        **((_DWORD **)&v18 + 1) -= 2;
    }
  }
  if ((_QWORD)v18)
  {
    if (*(_DWORD *)v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v18, v7);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (*((_QWORD *)&v17 + 1))
  {
    if (**((_DWORD **)&v17 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v17 + 1), v7);
    else
      **((_DWORD **)&v17 + 1) -= 2;
  }
  if ((_QWORD)v17)
  {
    if (*(_DWORD *)v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v17, v7);
    else
      *(_DWORD *)v17 -= 2;
  }
LABEL_28:
  if (*((_QWORD *)&v20 + 1))
  {
    if (**((_DWORD **)&v20 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v20 + 1), v7);
    else
      **((_DWORD **)&v20 + 1) -= 2;
  }
  if ((_QWORD)v20)
  {
    if (*(_DWORD *)v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v20, v7);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_QWORD *)&v19 + 1))
  {
    if (**((_DWORD **)&v19 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v19 + 1), v7);
    else
      **((_DWORD **)&v19 + 1) -= 2;
  }
  result = v19;
  if ((_QWORD)v19)
  {
    if (*(_DWORD *)v19 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v19, v7);
    else
      *(_DWORD *)v19 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBasicShapeXywh(WebCore::CSSPropertyParserHelpers *this, __int128 **a2, const WebCore::CSSParserContext *a3)
{
  uint64_t result;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v15);
  v8 = (_DWORD *)v15;
  if (!(_QWORD)v15
    || (result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v15), (v9 = (_DWORD *)v15) == 0))
  {
    *(_QWORD *)this = 0;
    goto LABEL_39;
  }
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v15);
  v10 = (_DWORD *)v15;
  if (!(_QWORD)v15
    || (result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *((unsigned __int8 *)a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v15), (v11 = (_DWORD *)v15) == 0))
  {
    *(_QWORD *)this = 0;
    goto LABEL_30;
  }
  v15 = 0u;
  v16 = 0u;
  if ((WebCore::CSSPropertyParserHelpers::consumeShapeBorderRadius(a2, (uint64_t)a3, (uint64_t)&v15) & 1) != 0)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x48);
    *(_DWORD *)v12 = 2;
    v13 = (*(unsigned __int8 *)(v12 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(v12 + 4) = -12288;
    *(_BYTE *)(v12 + 6) = BYTE2(v13);
    *(_QWORD *)(v12 + 8) = v8;
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v10;
    *(_QWORD *)(v12 + 32) = v11;
    v14 = v16;
    *(_OWORD *)(v12 + 40) = v15;
    *(_OWORD *)(v12 + 56) = v14;
    *(_QWORD *)this = v12;
    v15 = 0u;
    v16 = 0u;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)this = 0;
    if (*((_QWORD *)&v16 + 1))
    {
      if (**((_DWORD **)&v16 + 1) == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v16 + 1), v7);
      else
        **((_DWORD **)&v16 + 1) -= 2;
    }
  }
  if ((_QWORD)v16)
  {
    if (*(_DWORD *)v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v16, v7);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_QWORD *)&v15 + 1))
  {
    if (**((_DWORD **)&v15 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v15 + 1), v7);
    else
      **((_DWORD **)&v15 + 1) -= 2;
  }
  result = v15;
  if ((_QWORD)v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v15, v7);
      if (!v11)
        goto LABEL_30;
      goto LABEL_25;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (!v11)
    goto LABEL_30;
LABEL_25:
  if (*v11 == 2)
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v7);
  else
    *v11 -= 2;
LABEL_30:
  if (v10)
  {
    if (*v10 == 2)
    {
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v7);
      if (!v9)
        goto LABEL_39;
      goto LABEL_34;
    }
    *v10 -= 2;
  }
  if (!v9)
    goto LABEL_39;
LABEL_34:
  if (*v9 == 2)
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v7);
  else
    *v9 -= 2;
LABEL_39:
  if (v8)
  {
    if (*v8 == 2)
      return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
    else
      *v8 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeShapeBorderRadius(__int128 **a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  if (WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)596>((uint64_t)a1) >= 0x10000)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    if (!WebCore::CSSPropertyParserHelpers::consumeRadii((uint64_t)&v36, (uint64_t *)&v34, a1, *(unsigned __int8 *)(a2 + 48), 0))
    {
      std::array<WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>,4ul>::~array((uint64_t)&v34, v7);
      std::array<WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>,4ul>::~array((uint64_t)&v36, v33);
      return 0;
    }
    v8 = v36;
    *(_QWORD *)&v36 = 0;
    v9 = v34;
    *(_QWORD *)&v34 = 0;
    v11 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v11 = 2;
    v12 = (*(unsigned __int8 *)(v11 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_BYTE *)(v11 + 7) = 1;
    *(_QWORD *)(v11 + 8) = v8;
    *(_QWORD *)(v11 + 16) = v9;
    *(_WORD *)(v11 + 4) = -18432;
    *(_BYTE *)(v11 + 6) = BYTE2(v12);
    v13 = *(_DWORD **)a3;
    *(_QWORD *)a3 = v11;
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v10);
      else
        *v13 -= 2;
    }
    v14 = *((_QWORD *)&v36 + 1);
    *((_QWORD *)&v36 + 1) = 0;
    v15 = *((_QWORD *)&v34 + 1);
    *((_QWORD *)&v34 + 1) = 0;
    v17 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v17 = 2;
    v18 = (((*(unsigned __int8 *)(v17 + 6) >> 2) & 0x3F) << 18) | 0x1B800;
    *(_BYTE *)(v17 + 7) = 1;
    *(_QWORD *)(v17 + 8) = v14;
    *(_QWORD *)(v17 + 16) = v15;
    *(_WORD *)(v17 + 4) = -18432;
    *(_BYTE *)(v17 + 6) = BYTE2(v18);
    v19 = *(_DWORD **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v17;
    if (v19)
    {
      if (*v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v16);
      else
        *v19 -= 2;
    }
    v20 = v37;
    *(_QWORD *)&v37 = 0;
    v21 = v35;
    *(_QWORD *)&v35 = 0;
    v23 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v23 = 2;
    v24 = (((*(unsigned __int8 *)(v23 + 6) >> 2) & 0x3F) << 18) | 0x1B800;
    *(_BYTE *)(v23 + 7) = 1;
    *(_QWORD *)(v23 + 8) = v20;
    *(_QWORD *)(v23 + 16) = v21;
    *(_WORD *)(v23 + 4) = -18432;
    *(_BYTE *)(v23 + 6) = BYTE2(v24);
    v25 = *(_DWORD **)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v23;
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v22);
      else
        *v25 -= 2;
    }
    v26 = *((_QWORD *)&v37 + 1);
    *((_QWORD *)&v37 + 1) = 0;
    v27 = *((_QWORD *)&v35 + 1);
    *((_QWORD *)&v35 + 1) = 0;
    v29 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v29 = 2;
    v30 = (((*(unsigned __int8 *)(v29 + 6) >> 2) & 0x3F) << 18) | 0x1B800;
    *(_BYTE *)(v29 + 7) = 1;
    *(_QWORD *)(v29 + 8) = v26;
    *(_QWORD *)(v29 + 16) = v27;
    *(_WORD *)(v29 + 4) = -18432;
    *(_BYTE *)(v29 + 6) = BYTE2(v30);
    v31 = *(_DWORD **)(a3 + 24);
    *(_QWORD *)(a3 + 24) = v29;
    if (v31)
    {
      if (*v31 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v28);
      else
        *v31 -= 2;
    }
    std::array<WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>,4ul>::~array((uint64_t)&v34, v28);
    std::array<WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>,4ul>::~array((uint64_t)&v36, v32);
  }
  return 1;
}

uint64_t std::array<WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>,4ul>::~array(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  v3 = *(_DWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      *v5 -= 2;
  }
  v6 = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
    else
      *v6 -= 2;
  }
  return a1;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)596>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 596)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

WTF::StringImpl *WTF::StringBuilder::clear(WTF::StringImpl **this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = *this;
  *this = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = this[1];
  this[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)this + 4) = 0;
  return result;
}

BOOL WebCore::CSSPropertyParserHelpers::isGridTrackFixedSized(WebCore::CSSPropertyParserHelpers *this, const WebCore::CSSPrimitiveValue *a2)
{
  uint64_t v2;
  int v4;

  if ((*((_WORD *)this + 2) & 0x7F) != 0x50)
    return WebCore::CSSPrimitiveValue::primitiveType(this) != 59;
  v2 = 0;
  v4 = *((unsigned __int16 *)this + 4);
  if ((v4 - 549) >= 4 && v4 != 394)
    return WebCore::CSSPrimitiveValue::primitiveType(this) != 59;
  return v2;
}

void WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::ResolutionRaw>::consume<>(__int128 *a1@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4;
  __int128 *v7;
  uint64_t v8;
  void *v9;
  WebCore::CSSCalcValue *v10;
  int v11;
  char v12;
  int v13;
  __int16 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::CSSCalcValue *v19;

  v4 = a3;
  v13 = a3;
  v14 = WORD2(a3);
  v7 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= *((_QWORD *)a1 + 1))
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  switch(*(_DWORD *)v7 & 0x3F)
  {
    case 1:
      WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v17, a2);
      v15 = *a1;
      v8 = v17;
      v17 = 0;
      v18 = v8;
      WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v15, 8, &v18, v4, &v19);
      if (v18)
        WTF::fastFree((WTF *)(v18 - 16), v9);
      v10 = v19;
      if (v19)
        *a1 = v15;
      if (v17)
      {
        WTF::fastFree((WTF *)(v17 - 16), v9);
        if (!v10)
          goto LABEL_3;
      }
      else if (!v10)
      {
        goto LABEL_3;
      }
      v11 = *(_DWORD *)v10;
      *(_DWORD *)v10 += 2;
      *(_QWORD *)a4 = v10;
      *(_DWORD *)(a4 + 16) = 1;
      *(_BYTE *)(a4 + 24) = 1;
      if (v11)
        *(_DWORD *)v10 = v11;
      else
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)v9);
      break;
    case 9:
      WebCore::CSSPropertyParserHelpers::MetaConsumerDispatcher<(WebCore::CSSParserTokenType)9,WebCore::CSSPropertyParserHelpers::ConsumerDefinition<WebCore::ResolutionRaw>,void>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed &,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)a1, a2, &v13, (uint64_t)&v15);
      v12 = v16;
      if (v16)
      {
        *(_OWORD *)a4 = v15;
        *(_DWORD *)(a4 + 16) = 0;
        v12 = 1;
      }
      else
      {
        *(_BYTE *)a4 = 0;
      }
      *(_BYTE *)(a4 + 24) = v12;
      break;
    default:
LABEL_3:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      break;
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResolutionRawENS8_15UnevaluatedCalcIS9_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_13ResolutionRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  int v3;
  double v4;
  unsigned int v5;
  int *v7;
  int *result;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  char v14;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  if (v3 == 6)
  {
    v5 = (int)v4;
    if ((int)v4 > 0xFF || *(_QWORD *)&v4 != COERCE__INT64((double)v5))
      goto LABEL_20;
    v7 = &WebCore::staticCSSValuePool[4 * v5];
    v9 = v7[16];
    result = v7 + 16;
    *result = v9 + 2;
  }
  else
  {
    if (v3 == 1)
    {
      v12 = (int)v4;
      if ((int)v4 <= 0xFF && *(_QWORD *)&v4 == COERCE__INT64((double)v12))
      {
        result = &WebCore::staticCSSValuePool[4 * v12 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v3 != 3
      || ((v10 = (int)v4, (int)v4 <= 0xFF)
        ? (v11 = *(_QWORD *)&v4 == COERCE__INT64((double)v10))
        : (v11 = 0),
          !v11))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v14 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v3 & 0x7F;
      *((_BYTE *)result + 6) = v14 & 0xFC;
      *((double *)result + 1) = v4;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * v10 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_13ResolutionRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::TimeRaw>::consume<>@<X0>(uint64_t result@<X0>, unsigned __int16 **a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  __int128 *v4;
  int v5;
  __int16 v6;

  v5 = a3;
  v6 = WORD2(a3);
  v4 = *(__int128 **)result;
  if (*(_QWORD *)result >= *(_QWORD *)(result + 8))
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  switch(*(_DWORD *)v4 & 0x3F)
  {
    case 1:
      result = (uint64_t)WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::TimeRaw,WebCore::UnevaluatedCalc<WebCore::TimeRaw>>,WebCore::TimeRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 *)result, a2, &v5, (uint64_t)a4);
      break;
    case 7:
      result = WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)7,std::variant<WebCore::TimeRaw,WebCore::UnevaluatedCalc<WebCore::TimeRaw>>,WebCore::TimeRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)result, a2, (unsigned int *)&v5, (uint64_t)a4);
      break;
    case 9:
      result = WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)9,std::variant<WebCore::TimeRaw,WebCore::UnevaluatedCalc<WebCore::TimeRaw>>,WebCore::TimeRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>((__int128 **)result, a2, &v5, (uint64_t)a4);
      break;
    default:
      *a4 = 0;
      a4[24] = 0;
      break;
  }
  return result;
}

WebCore::CSSCalcValue *WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)1,std::variant<WebCore::TimeRaw,WebCore::UnevaluatedCalc<WebCore::TimeRaw>>,WebCore::TimeRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>@<X0>(__int128 *a1@<X0>, unsigned __int16 **a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  void *v9;
  WebCore::CSSCalcValue *result;
  int v11;
  WebCore::CSSCalcValue *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::CSSCalcValue *v15;
  __int128 v16;

  WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v13, a2);
  v7 = *a3;
  v16 = *a1;
  v8 = v13;
  v13 = 0;
  v14 = v8;
  WebCore::CSSPropertyParserHelpers::consumeCalcRawWithKnownTokenTypeFunction((uint64_t)&v16, 6, &v14, v7, &v15);
  if (v14)
    WTF::fastFree((WTF *)(v14 - 16), v9);
  result = v15;
  if (v15)
    *a1 = v16;
  if (v13)
  {
    v12 = result;
    WTF::fastFree((WTF *)(v13 - 16), v9);
    result = v12;
  }
  if (result)
  {
    v11 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    *(_QWORD *)a4 = result;
    *(_DWORD *)(a4 + 16) = 1;
    *(_BYTE *)(a4 + 24) = 1;
    if (v11)
      *(_DWORD *)result = v11;
    else
      return (WebCore::CSSCalcValue *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v9);
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)7,std::variant<WebCore::TimeRaw,WebCore::UnevaluatedCalc<WebCore::TimeRaw>>,WebCore::TimeRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>@<X0>(__int128 **a1@<X0>, unsigned __int16 **a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  double v4;
  uint64_t result;
  void *v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  char v14;
  char v15;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;

  result = (uint64_t)WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v21, a2);
  v10 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
  if ((v10 & 0x100000000) != 0)
    goto LABEL_6;
  v12 = *a1;
  v11 = a1[1];
  if (*a1 >= v11)
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v4 = *((double *)v12 + 2);
  if (v4 == 0.0)
  {
    if (v10 == 2 || (v10 & 0x10000000000) == 0)
      goto LABEL_17;
  }
  else if (v10 == 2)
  {
    goto LABEL_17;
  }
  if (v10 != 1)
  {
LABEL_6:
    v13 = 0;
    v14 = 1;
    goto LABEL_7;
  }
LABEL_17:
  if ((v10 & 0xFF00) == 0x100 && v4 < 0.0)
    goto LABEL_6;
  v17 = *a1;
  if (*a1 == v11)
  {
    v19 = 1;
    {
      v18 = v11;
    }
    else
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v18 = *a1;
    }
  }
  else
  {
    v18 = (__int128 *)((char *)v17 + 24);
    *a1 = (__int128 *)((char *)v17 + 24);
  }
  v13 = 15;
  while (1)
  {
    if (v18 < v11 || (v19 & 1) != 0)
    {
      if (v18 >= v11)
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v20 = *(_DWORD *)v18;
    }
    else
    {
      v20 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
      v19 = 1;
    }
    if ((v20 & 0x3F) != 0x10)
      break;
    v18 = (__int128 *)((char *)*a1 + 24);
    *a1 = v18;
  }
  v14 = 0;
LABEL_7:
  if (v21)
  {
    result = WTF::fastFree((WTF *)(v21 - 16), v9);
    if ((v14 & 1) != 0)
      goto LABEL_9;
LABEL_34:
    *(_QWORD *)a4 = v13;
    *(double *)(a4 + 8) = v4;
    v15 = 1;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_35;
  }
  if ((v14 & 1) == 0)
    goto LABEL_34;
LABEL_9:
  v15 = 0;
  *(_BYTE *)a4 = 0;
LABEL_35:
  *(_BYTE *)(a4 + 24) = v15;
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::MetaConsumerUnroller<(WebCore::CSSParserTokenType)9,std::variant<WebCore::TimeRaw,WebCore::UnevaluatedCalc<WebCore::TimeRaw>>,WebCore::TimeRaw>::consume<WebCore::CSSParserTokenRange &,WebCore::CSSCalcSymbolsAllowed,WebCore::CSSPropertyParserHelpers::CSSPropertyParserOptions &>@<X0>(__int128 **a1@<X0>, unsigned __int16 **a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  double v4;
  uint64_t result;
  void *v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  char v18;
  char v19;
  uint64_t v20;

  result = (uint64_t)WebCore::CSSCalcSymbolsAllowed::CSSCalcSymbolsAllowed(&v20, a2);
  v10 = *a3;
  v12 = *a1;
  v11 = a1[1];
  if (*a1 >= v11)
  {
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v13 = (*(_DWORD *)v12 >> 11) & 0x7F;
  if ((v13 - 15) > 1 || (v4 = *((double *)v12 + 2), (v10 & 0xFF00) == 0x100) && v4 < 0.0)
  {
    v13 = 0;
    v18 = 1;
  }
  else
  {
    v14 = *a1;
    if (*a1 == v11)
    {
      v16 = 1;
      {
        v15 = v11;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v15 = *a1;
      }
    }
    else
    {
      v15 = (__int128 *)((char *)v14 + 24);
      *a1 = (__int128 *)((char *)v14 + 24);
    }
    while (1)
    {
      if (v15 < v11 || (v16 & 1) != 0)
      {
        if (v15 >= v11)
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v17 = *(_DWORD *)v15;
      }
      else
      {
        v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
        v16 = 1;
      }
      if ((v17 & 0x3F) != 0x10)
        break;
      v15 = (__int128 *)((char *)*a1 + 24);
      *a1 = v15;
    }
    v18 = 0;
  }
  if (v20)
    result = WTF::fastFree((WTF *)(v20 - 16), v9);
  if ((v18 & 1) != 0)
  {
    v19 = 0;
    *(_BYTE *)a4 = 0;
  }
  else
  {
    *(_QWORD *)a4 = v13;
    *(double *)(a4 + 8) = v4;
    v19 = 1;
    *(_DWORD *)(a4 + 16) = 0;
  }
  *(_BYTE *)(a4 + 24) = v19;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore7TimeRawENS8_15UnevaluatedCalcIS9_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_7TimeRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  int v3;
  double v4;
  unsigned int v5;
  int *v7;
  int *result;
  int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  char v14;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  if (v3 == 6)
  {
    v5 = (int)v4;
    if ((int)v4 > 0xFF || *(_QWORD *)&v4 != COERCE__INT64((double)v5))
      goto LABEL_20;
    v7 = &WebCore::staticCSSValuePool[4 * v5];
    v9 = v7[16];
    result = v7 + 16;
    *result = v9 + 2;
  }
  else
  {
    if (v3 == 1)
    {
      v12 = (int)v4;
      if ((int)v4 <= 0xFF && *(_QWORD *)&v4 == COERCE__INT64((double)v12))
      {
        result = &WebCore::staticCSSValuePool[4 * v12 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v3 != 3
      || ((v10 = (int)v4, (int)v4 <= 0xFF)
        ? (v11 = *(_QWORD *)&v4 == COERCE__INT64((double)v10))
        : (v11 = 0),
          !v11))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v14 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v3 & 0x7F;
      *((_BYTE *)result + 6) = v14 & 0xFC;
      *((double *)result + 1) = v4;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * v10 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore24CSSPropertyParserHelpers12MetaResolverINS8_6RefPtrINSA_17CSSPrimitiveValueENS8_12RawPtrTraitsISE_EENS8_21DefaultRefDerefTraitsISE_EEEENSB_29CSSPrimitiveValueResolverBaseEJNSA_7TimeRawEEE7resolveERKNS_7variantIJSL_NSA_15UnevaluatedCalcISL_EEEEERKNSA_18CSSCalcSymbolTableENSB_24CSSPropertyParserOptionsEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SP_EEEEEEDcSX_DpT0_@<X0>(_DWORD **a1@<X1>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  char v6;

  v3 = *a1;
  **a1 += 4;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 73;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v3;
  *a2 = result;
  if (*v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v5);
  *v3 -= 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10CSSValueIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10CSSValueIDEN3WTF10AtomStringEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSL_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEERKST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeFontWeight(WebCore::CSSParserTokenRange &)::$_0,WebCore::CSSPropertyParserHelpers::consumeFontWeight(WebCore::CSSParserTokenRange &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,double> &>@<X0>(unsigned __int16 *a1@<X1>, int **a2@<X8>)
{
  unint64_t v2;
  int *v3;
  uint64_t result;

  v2 = *a1;
  if (v2 >= 0x48E)
  {
    result = 92;
    __break(0xC471u);
  }
  else
  {
    v3 = &WebCore::staticCSSValuePool[4 * v2 + 3088];
    *v3 += 2;
    *a2 = v3;
  }
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyParserHelpers::consumeFontWeight(WebCore::CSSParserTokenRange &)::$_0,WebCore::CSSPropertyParserHelpers::consumeFontWeight(WebCore::CSSParserTokenRange &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,double> &>@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  double v3;
  unsigned int v4;
  int *result;
  char v7;

  v3 = *a1;
  v4 = (int)*a1;
  if (v4 <= 0xFF && *(_QWORD *)a1 == COERCE__INT64((double)v4))
  {
    result = &WebCore::staticCSSValuePool[4 * v4 + 2064];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v7 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 1;
    *((_BYTE *)result + 6) = v7 & 0xFC;
    *((double *)result + 1) = v3;
  }
  *a2 = result;
  return result;
}

_WORD *WTF::Vector<WebCore::CSSValueID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSValueID&>(uint64_t a1, unint64_t a2)
{
  _WORD *result;
  uint64_t v4;

  result = (_WORD *)WTF::Vector<WebCore::CSSValueID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WebCore::CSSValueID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 2 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      if (v10 < 5)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_30;
      }
      if (!(v10 >> 31))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(2 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 2 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1958E5D00);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 5)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v15 >> 31)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(2 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 2 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

char *WTF::Vector<WebCore::CSSValueID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[2 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1)];
      }
      if (v10 < 4)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 3;
        goto LABEL_31;
      }
      if (!(v10 >> 31))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(2 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 2 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1958E5EA0);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 4)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 3;
    }
    else
    {
      if (v15 >> 31)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(2 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 2 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(*a1, (uint64_t)v14);
          v16 = v15;
          WebCore::ContentType::~ContentType(v14, v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          WebCore::ContentType::~ContentType(v14, v10);
        }
      }
      v14 += 4;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

__n128 WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __n128 result;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v5 < 0x100)
    v6 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v6 = v5 >> 8;
  v7 = 0;
  do
  {
    v8 = v6 & v4;
    v6 = ++v7 + v8;
  }
  while (*(_QWORD *)(a1 + 32 * v8));
  v9 = a1 + 32 * v8;
  *(_QWORD *)v9 = 0;
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)v9 = v10;
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(v9 + 8) = result;
  return result;
}

char *WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<WTF::AtomString,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeSelfPositionOverflowPosition(WebCore::CSSPropertyParserHelpers *this, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  int *result;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int *v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  v9 = *((_DWORD *)v5 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = v9;
  }
  if ((unsigned __int16)v9 > 0x1F2u)
  {
    if ((unsigned __int16)v9 != 499)
    {
      if ((unsigned __int16)v9 != 931 && (unsigned __int16)v9 != 933)
        goto LABEL_47;
      return WebCore::CSSPropertyParserHelpers::consumeBaselineKeyword(this, (WebCore::CSSParserTokenRange *)a2);
    }
LABEL_40:
    result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent(a2, (WebCore::CSSParserTokenRange *)a2, &v17);
    *(_QWORD *)this = v17;
    return result;
  }
  if ((unsigned __int16)v9 == 90 || (unsigned __int16)v9 == 394)
    goto LABEL_40;
  if ((unsigned __int16)v9 == 248)
    return WebCore::CSSPropertyParserHelpers::consumeBaselineKeyword(this, (WebCore::CSSParserTokenRange *)a2);
LABEL_47:
  v4 = a2[1];
LABEL_3:
  v6 = *a2;
  if (*a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
    goto LABEL_5;
  v10 = *((_DWORD *)v6 + 4);
  if (v10 < 0)
  {
    v10 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = v10;
  }
  if ((v10 & 0xFFFE) != 0x208)
LABEL_5:
    v17 = 0;
  else
    WebCore::CSSPropertyParserHelpers::consumeIdent(a2, (WebCore::CSSParserTokenRange *)a2, &v17);
  v7 = *a2;
  if (*a2 >= a2[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    goto LABEL_8;
  v11 = *((_DWORD *)v7 + 4);
  if (v11 < 0)
  {
    v11 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v11;
  }
  v12 = (unsigned __int16)v11 - 500 > 0x13 || ((1 << (v11 + 12)) & 0xC1803) == 0;
  if (!v12 || (unsigned __int16)v11 == 260 || (v11 & 0xFFFE) == 0x102)
  {
    result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent(a2, (WebCore::CSSParserTokenRange *)a2, &v16);
    v13 = v16;
    v14 = v17;
    if (v17)
    {
      result = (int *)WTF::fastCompactMalloc((WTF *)0x18);
      *result = 2;
      v15 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
      *((_BYTE *)result + 7) = 1;
      *((_QWORD *)result + 1) = v14;
      *((_QWORD *)result + 2) = v13;
      *((_WORD *)result + 2) = -18432;
      *((_BYTE *)result + 6) = (v15 | 0x10000u) >> 16;
      v13 = result;
    }
    *(_QWORD *)this = v13;
  }
  else
  {
LABEL_8:
    *(_QWORD *)this = 0;
    result = v17;
    if (v17)
    {
      if (*v17 == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, (WTF::StringImpl *)a2);
      else
        *v17 -= 2;
    }
  }
  return result;
}

WebCore::CSSTokenizer *WebCore::CSSTokenizer::CSSTokenizer(WebCore::CSSTokenizer *this, unsigned int **a2)
{
  return WebCore::CSSTokenizer::CSSTokenizer(this, a2, 0, 0);
}

uint64_t WebCore::CSSTokenizer::tokenRange(WebCore::CSSTokenizer *this)
{
  return *((_QWORD *)this + 6);
}

void WebCore::CSSPropertyParserWorkerSafe::parseFilterString(unsigned int **a1@<X2>, WebCore::Style *a2@<X0>, const WebCore::Document *a3@<X1>, int a4@<W3>, _BYTE *a5@<X8>)
{
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;
  __int128 *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int *v22;
  WTF::StringImpl *v23[6];
  __int128 v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  __int128 *v29[2];
  _BYTE v30[48];
  __int128 *v31;
  unsigned int v32;
  char v33;
  int **v34;
  const WebCore::CSSToLengthConversionData *v35;

  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v30, a1, 0, 0);
  v9 = v31;
  v10 = (__int128 *)((char *)v31 + 24 * v32);
  v29[0] = v31;
  v29[1] = v10;
  v12 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v9 < v10 || (v11 & 1) != 0)
    {
      v13 = v9 >= v10 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v9;
      v14 = *(_DWORD *)v13;
    }
    else
    {
      v14 = v12 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
      v11 = 1;
      v12 = v14;
    }
    if ((v14 & 0x3F) != 0x10)
      break;
    v9 = (__int128 *)((char *)v9 + 24);
    v29[0] = v9;
  }
  v26 = 0;
  WTF::URL::invalidate((WTF::URL *)&v26);
  v15 = v26;
  if (v26)
    *(_DWORD *)v26 += 2;
  v23[0] = v15;
  *(_OWORD *)&v23[1] = v27;
  *(_OWORD *)&v23[3] = v28;
  v23[5] = 0;
  LOBYTE(v24) = a4;
  *(_QWORD *)((char *)&v24 + 1) = 0;
  BYTE9(v24) = 0;
  if (a4 == 4)
  {
    *(_DWORD *)((char *)&v24 + 6) = 536871968;
    BYTE5(v24) = -63;
    *(_WORD *)((char *)&v24 + 3) = 0;
  }
  v16 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v16 != -1)
  {
    v35 = (const WebCore::CSSToLengthConversionData *)&v33;
    v34 = (int **)&v35;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  WebCore::CSSPropertyParserHelpers::consumeFilter(v29, (unsigned __int8 *)v23, 0, (int **)&v35);
  v18 = v23[5];
  v23[5] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v23[0];
  v23[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (v35)
  {
    v25 = 0;
    v24 = 0u;
    memset(v23, 0, sizeof(v23));
    WebCore::Style::createFilterOperations(a2, a3, (WebCore::RenderStyle *)v23, v35, (uint64_t)a5, (__n128)0);
    v21 = v23[4];
    v23[4] = 0;
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v17);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    v22 = (int *)v35;
    v35 = 0;
    if (v22)
    {
      if (*v22 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v17);
      else
        *v22 -= 2;
    }
  }
  else
  {
    *a5 = 0;
    a5[16] = 0;
  }
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v30, v17);
}

void WebCore::CSSPropertyParserWorkerSafe::parseFontFaceSrc(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  __int128 *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  __int128 *v16;
  __int128 *v17;
  _BYTE v18[64];
  WebCore::CSSParserTokenRange *v19;
  uint64_t v20;

  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v18, (uint64_t)a1);
  v6 = *(__int128 **)(v20 + 48);
  v7 = (__int128 *)((char *)v6 + 24 * *(unsigned int *)(v20 + 60));
  v8 = 24 * *(unsigned int *)(v20 + 60);
  v16 = v6;
  v17 = v7;
  v10 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v11 = v8 + 24;
  do
  {
    if (v6 < v7 || (v9 & 1) != 0)
    {
      if (v6 >= v7)
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v12 = v6;
      v13 = *(_DWORD *)v12;
    }
    else
    {
      v13 = v10 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
      v9 = 1;
      v10 = v13;
    }
    v6 = (__int128 *)((char *)v6 + 24);
    v11 -= 24;
  }
  while ((v13 & 0x3F) == 0x10);
  v16 = (__int128 *)((char *)v6 - 24);
  if (v11 && (WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontFaceSrc(&v16, v19, &v15), (v14 = v15) != 0))
  {
    if (v16 == v17)
    {
      *a2 = v15;
    }
    else
    {
      *a2 = 0;
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v5);
      else
        *v14 -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v18, v5);
}

WTF::StringImpl *WebCore::CSSPropertyParserWorkerSafe::parseFontFaceStyle@<X0>(const WTF::String *a1@<X1>, uint64_t **a2@<X8>)
{
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 *v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  uint64_t *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  __int128 *v22;
  __int128 *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t *v36;

  if (*((_BYTE *)a1 + 274))
    v5 = 0;
  else
    v5 = *((_BYTE *)a1 + 3192) == 2;
  v24 = 0;
  WTF::URL::invalidate((WTF::URL *)&v24);
  v7 = v24;
  if (v24)
    *(_DWORD *)v24 += 2;
  v28 = v7;
  v29 = v25;
  v30 = v26;
  v31 = 0;
  v32 = v5;
  v33 = 0;
  v34 = 0;
  v8 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v8 != -1)
  {
    v22 = (__int128 *)&v35;
    v36 = (uint64_t *)&v22;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v24, (uint64_t)&v28);
  v11 = *(__int128 **)(v27 + 48);
  v12 = (char *)v11 + 24 * *(unsigned int *)(v27 + 60);
  v13 = 24 * *(unsigned int *)(v27 + 60);
  v22 = v11;
  v23 = (__int128 *)v12;
  v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v11 < (__int128 *)v12 || (v14 & 1) != 0)
    {
      v16 = v11 >= (__int128 *)v12 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = v15 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v14 = 1;
      v15 = v17;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v11 = (__int128 *)((char *)v11 + 24);
    v22 = v11;
    v13 -= 24;
  }
  if (v13
    && (WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStyleRange((uint64_t *)&v22, v32, (uint64_t *)&v36),
        (v18 = v36) != 0))
  {
    if (v22 == v23)
    {
      *a2 = v36;
    }
    else
    {
      *a2 = 0;
      if (*(_DWORD *)v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v10);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v24, v10);
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserWorkerSafe::parseFontFaceWeight@<X0>(const WTF::String *a1@<X1>, __int128 ***a2@<X8>)
{
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  __int128 *v22;
  __int128 *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  char v35;
  __int128 **v36;

  if (*((_BYTE *)a1 + 274))
    v5 = 0;
  else
    v5 = *((_BYTE *)a1 + 3192) == 2;
  v24 = 0;
  WTF::URL::invalidate((WTF::URL *)&v24);
  v7 = v24;
  if (v24)
    *(_DWORD *)v24 += 2;
  v28 = v7;
  v29 = v25;
  v30 = v26;
  v31 = 0;
  v32 = v5;
  v33 = 0;
  v34 = 0;
  v8 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v8 != -1)
  {
    v22 = (__int128 *)&v35;
    v36 = &v22;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v24, (uint64_t)&v28);
  v11 = *(__int128 **)(v27 + 48);
  v12 = (__int128 *)((char *)v11 + 24 * *(unsigned int *)(v27 + 60));
  v13 = 24 * *(unsigned int *)(v27 + 60);
  v22 = v11;
  v23 = v12;
  v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v11 < v12 || (v14 & 1) != 0)
    {
      v16 = v11 >= v12 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = v15 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v14 = 1;
      v15 = v17;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v11 = (__int128 *)((char *)v11 + 24);
    v22 = v11;
    v13 -= 24;
  }
  if (v13
    && (WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontWeightAbsoluteRange(&v22, (int **)&v36),
        (v18 = (int *)v36) != 0))
  {
    if (v22 == v23)
    {
      *a2 = v36;
    }
    else
    {
      *a2 = 0;
      if (*v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v10);
      else
        *v18 -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v24, v10);
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserWorkerSafe::parseFontFaceStretch@<X0>(const WTF::String *a1@<X1>, __int128 ***a2@<X8>)
{
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  __int128 **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  __int128 *v22;
  __int128 *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  char v35;
  __int128 **v36;

  if (*((_BYTE *)a1 + 274))
    v5 = 0;
  else
    v5 = *((_BYTE *)a1 + 3192) == 2;
  v24 = 0;
  WTF::URL::invalidate((WTF::URL *)&v24);
  v7 = v24;
  if (v24)
    *(_DWORD *)v24 += 2;
  v28 = v7;
  v29 = v25;
  v30 = v26;
  v31 = 0;
  v32 = v5;
  v33 = 0;
  v34 = 0;
  v8 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v8 != -1)
  {
    v22 = (__int128 *)&v35;
    v36 = &v22;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v24, (uint64_t)&v28);
  v11 = *(__int128 **)(v27 + 48);
  v12 = (__int128 *)((char *)v11 + 24 * *(unsigned int *)(v27 + 60));
  v13 = 24 * *(unsigned int *)(v27 + 60);
  v22 = v11;
  v23 = v12;
  v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v11 < v12 || (v14 & 1) != 0)
    {
      v16 = v11 >= v12 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = v15 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v14 = 1;
      v15 = v17;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v11 = (__int128 *)((char *)v11 + 24);
    v22 = v11;
    v13 -= 24;
  }
  if (v13
    && (WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStretchRange(&v22, v10, &v36), (v18 = v36) != 0))
  {
    if (v22 == v23)
    {
      *a2 = v36;
    }
    else
    {
      *a2 = 0;
      if (*(_DWORD *)v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v10);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v24, v10);
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

int *WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStretchRange@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  int *result;
  int *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  int *v14;

  result = (int *)WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStretchKeywordValue(this, a2, &v14);
  v6 = v14;
  if (v14
    || (result = (int *)WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)this, 1u, &v14),
        (v6 = v14) == 0)
    || *this == this[1])
  {
    *a3 = v6;
  }
  else
  {
    WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)this, 1u, &v13);
    v8 = v13;
    if (v13)
    {
      v9 = v14;
      v13 = 0;
      v14 = 0;
      v10 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)v10 = 2;
      v11 = (*(unsigned __int8 *)(v10 + 6) << 16) & 0xFC0000;
      *(_DWORD *)(v10 + 8) = 2;
      *(_WORD *)(v10 + 4) = -10240;
      *(_BYTE *)(v10 + 6) = BYTE2(v11) | 1;
      *(_QWORD *)(v10 + 16) = v9;
      *(_QWORD *)(v10 + 24) = v8;
      *a3 = v10;
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v7);
        else
          *v12 -= 2;
      }
    }
    else
    {
      *a3 = 0;
    }
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*result == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
      else
        *result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserWorkerSafe::parseFontFaceUnicodeRange@<X0>(const WTF::String *a1@<X1>, char ***a2@<X8>)
{
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  __int128 *v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  char *v23;
  char *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  __int128 v30;
  __int128 v31;
  WTF::StringImpl *v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  char v36;
  char **v37;

  if (*((_BYTE *)a1 + 274))
    v5 = 0;
  else
    v5 = *((_BYTE *)a1 + 3192) == 2;
  v25 = 0;
  WTF::URL::invalidate((WTF::URL *)&v25);
  v7 = v25;
  if (v25)
    *(_DWORD *)v25 += 2;
  v29 = v7;
  v30 = v26;
  v31 = v27;
  v32 = 0;
  v33 = v5;
  v34 = 0;
  v35 = 0;
  v8 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v8 != -1)
  {
    v23 = &v36;
    v37 = &v23;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v9 = v25;
  v25 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v25, (uint64_t)&v29);
  v11 = *(char **)(v28 + 48);
  v12 = &v11[24 * *(unsigned int *)(v28 + 60)];
  v13 = 24 * *(unsigned int *)(v28 + 60);
  v23 = v11;
  v24 = v12;
  v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v16 = v13 + 24;
  do
  {
    if (v11 < v12 || (v14 & 1) != 0)
    {
      if (v11 >= v12)
        v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v17 = (__int128 *)v11;
      v18 = *(_DWORD *)v17;
    }
    else
    {
      v18 = v15 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v18;
      v14 = 1;
      v15 = v18;
    }
    v11 += 24;
    v16 -= 24;
  }
  while ((v18 & 0x3F) == 0x10);
  v23 = v11 - 24;
  if (v16
    && (WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontFaceUnicodeRange((uint64_t)&v23, v10, (WTF::StringImpl **)&v37), (v19 = (WTF::StringImpl *)v37) != 0))
  {
    if (v23 == v24)
    {
      *a2 = v37;
    }
    else
    {
      *a2 = 0;
      if (*(_DWORD *)v19 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v10);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v25, v10);
  v21 = v32;
  v32 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontFaceUnicodeRange@<X0>(uint64_t this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  __int128 **v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  WTF *v20;
  uint64_t *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  char v25;
  unsigned int v26;
  unsigned __int8 *v27;
  int v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  __int128 *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _WORD *v45;
  unsigned __int8 v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE *v56;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned __int8 v62;
  unsigned int v63;
  int v64;
  _WORD *v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned __int8 v74;
  unsigned int v75;
  unsigned __int8 v76;
  unsigned int v77;
  unsigned __int8 v78;
  unsigned int v79;
  unsigned __int8 v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int8 v83;
  unsigned int v84;
  unsigned __int8 v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned int v88;
  unsigned __int8 v89;
  unsigned int v90;
  unsigned __int8 v91;
  int v92;
  unsigned __int8 v93;
  unsigned int v94;
  unsigned __int8 v95;
  unsigned int v96;
  unsigned __int8 v97;
  _WORD *v98;
  int v99;
  int v100;
  unint64_t v101;
  unsigned __int8 v102;
  _BYTE *v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned int v109;
  unsigned __int8 v110;
  unsigned int v111;
  unsigned __int8 v112;
  unsigned int v113;
  unsigned __int8 v114;
  unsigned int v115;
  unsigned __int8 v116;
  unsigned int v117;
  unsigned __int8 v118;
  int v119;
  WTF *v120;
  uint64_t v121;
  WTF *v123;
  WTF *v124;
  uint64_t v125;
  _DWORD *v126;
  int v128;
  WTF *v130;
  int v131;
  unsigned int v132;
  _BYTE v133[32];
  WTF *v134;
  uint64_t v135;
  _BYTE v136[32];
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  int v140;
  char v141;

  v3 = (__int128 **)this;
  v134 = (WTF *)v136;
  v135 = 4;
  v4 = *(__int128 **)(this + 8);
  while (1)
  {
    v5 = *v3;
    if (*v3 >= v4)
    {
      v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v5 & 0x3F) != 0)
      goto LABEL_7;
    v6 = *v3;
    if (*v3 == v4)
    {
      v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    else
    {
      *v3 = (__int128 *)((char *)v6 + 24);
    }
    if (*((_DWORD *)v6 + 1) != 1)
      goto LABEL_7;
    v27 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v28 = (*((_BYTE *)v6 + 2) & 0x40) != 0 ? *v27 : *(unsigned __int16 *)v27;
    if ((v28 & 0xFFFFFFDF) != 0x55)
      goto LABEL_7;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v141 = 1;
    v29 = *v3;
    if (*v3 >= v4)
    {
      v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v29 = *v3;
        v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    else
    {
      v30 = *v3;
    }
    if ((*(_DWORD *)v30 & 0x3F) == 9)
    {
      if (v29 == v4)
      {
        v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      else
      {
        *v3 = (__int128 *)((char *)v29 + 24);
      }
      a2 = (WebCore::CSSParserTokenRange *)*((_QWORD *)v29 + 1);
      if (a2)
      {
        if ((*((_BYTE *)v29 + 2) & 0x40) != 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        while ((WebCore::CSSPropertyParserHelpersWorkerSafe::consumeAndAppendOptionalDelimiter((uint64_t)&v138, (uint64_t)v3) & 1) != 0);
        goto LABEL_111;
      }
      v29 = *v3;
    }
    if (v29 >= v4)
    {
      v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v29 = *v3;
        v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    else
    {
      v31 = v29;
    }
    if ((*(_DWORD *)v31 & 0x3F) == 7)
    {
      if (v29 == v4)
      {
        v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      else
      {
        *v3 = (__int128 *)((char *)v29 + 24);
      }
      a2 = (WebCore::CSSParserTokenRange *)*((_QWORD *)v29 + 1);
      if (a2)
      {
        if ((*((_BYTE *)v29 + 2) & 0x40) != 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        v33 = *v3;
        v32 = v3[1];
        if (*v3 >= v32)
        {
          v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v33 = *v3;
            v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        else
        {
          v34 = *v3;
        }
        if ((*(_DWORD *)v34 & 0x3F) == 9)
        {
          if (v33 == v32)
          {
            v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
          }
          else
          {
            *v3 = (__int128 *)((char *)v33 + 24);
          }
          if (*((_QWORD *)v33 + 1))
          {
LABEL_83:
            if ((*((_BYTE *)v33 + 2) & 0x40) != 0)
              WTF::StringBuilder::append();
            else
              WTF::StringBuilder::append();
            goto LABEL_111;
          }
          v33 = *v3;
        }
        if (v33 >= v32)
        {
          v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_DWORD *)v33 & 0x3F) != 7)
          goto LABEL_85;
        v33 = *v3;
        if (*v3 == v32)
        {
          v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        else
        {
          *v3 = (__int128 *)((char *)v33 + 24);
        }
        if (!*((_QWORD *)v33 + 1))
        {
LABEL_85:
          while ((WebCore::CSSPropertyParserHelpersWorkerSafe::consumeAndAppendOptionalDelimiter((uint64_t)&v138, (uint64_t)v3) & 1) != 0);
          goto LABEL_111;
        }
        goto LABEL_83;
      }
      v29 = *v3;
    }
    if (v29 >= v4)
    {
      v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v29 & 0x3F) != 6)
      goto LABEL_99;
    v35 = *v3;
    if (*v3 >= v4)
    {
      v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if (*((_WORD *)v35 + 8) != 43)
    {
LABEL_99:
      v137 = 0;
      goto LABEL_112;
    }
    if (*v3 == v4)
    {
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    else
    {
      *v3 = (__int128 *)((char *)*v3 + 24);
    }
    LOBYTE(v137) = 43;
    WTF::StringBuilder::append();
    v37 = *v3;
    v36 = v3[1];
    if (*v3 >= v36)
    {
      v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_BYTE *)v37 & 0x3F) != 0)
      goto LABEL_394;
    v38 = *v3;
    if (*v3 == v36)
    {
      v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    else
    {
      *v3 = (__int128 *)((char *)v38 + 24);
    }
    if (!*((_QWORD *)v38 + 1))
    {
LABEL_394:
      if ((WebCore::CSSPropertyParserHelpersWorkerSafe::consumeAndAppendOptionalDelimiter((uint64_t)&v138, (uint64_t)v3) & 1) == 0)
        goto LABEL_99;
    }
    else if ((*((_BYTE *)v38 + 2) & 0x40) != 0)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      WTF::StringBuilder::append();
    }
    while ((WebCore::CSSPropertyParserHelpersWorkerSafe::consumeAndAppendOptionalDelimiter((uint64_t)&v138, (uint64_t)v3) & 1) != 0)
      ;
LABEL_111:
    WTF::StringBuilder::toString((WTF::StringBuilder *)&v138, &v137);
LABEL_112:
    v39 = v139;
    v139 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, a2);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = v138;
    v138 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, a2);
      else
        *(_DWORD *)v40 -= 2;
    }
    this = (uint64_t)v137;
    if (v137)
    {
      v41 = *((_QWORD *)v137 + 1);
      v42 = *((unsigned int *)v137 + 1);
      if ((*((_BYTE *)v137 + 16) & 4) == 0)
      {
        if ((_DWORD)v42)
        {
          if (*(_WORD *)v41 == 43)
          {
            v43 = v42 - 1;
            if (v42 != 1)
            {
              v45 = (_WORD *)(v41 + 2);
              v44 = *(unsigned __int16 *)(v41 + 2);
              if (v44 - 48 >= 0xA && (unsigned __int16)((v44 | 0x20) - 97) > 5u)
              {
                v53 = 0;
                v48 = 0;
                goto LABEL_165;
              }
              v47 = (v44 + 9) & 0xF;
              if (v44 < 0x41)
                v47 = v44 - 48;
              v48 = v47;
              v43 = v42 - 2;
              if (v42 == 2)
                goto LABEL_286;
              v45 = (_WORD *)(v41 + 4);
              v49 = *(unsigned __int16 *)(v41 + 4);
              if (v49 - 48 >= 0xA && (unsigned __int16)((v49 | 0x20) - 97) > 5u)
              {
                v53 = 1;
                goto LABEL_165;
              }
              v51 = (v49 + 9) & 0xF;
              if (v49 < 0x41)
                v51 = v49 - 48;
              v48 = v51 | (16 * v48);
              v43 = v42 - 3;
              if (v42 == 3)
                goto LABEL_286;
              v45 = (_WORD *)(v41 + 6);
              v52 = *(unsigned __int16 *)(v41 + 6);
              if (v52 - 48 >= 0xA && (unsigned __int16)((v52 | 0x20) - 97) > 5u)
              {
                v53 = 2;
LABEL_165:
                v65 = &v45[v43];
                v66 = v53 + v43;
                v67 = v48;
                while (*v45 == 63)
                {
                  if (v53 == 6)
                    goto LABEL_338;
                  ++v53;
                  ++v45;
                  LODWORD(v48) = 16 * v48;
                  v67 = (16 * (_DWORD)v67) | 0xFu;
                  if (!--v43)
                    goto LABEL_301;
                }
                v65 = v45;
                v66 = v53;
LABEL_301:
                if (!v66)
                  goto LABEL_338;
                if ((_DWORD)v48 == (_DWORD)v67)
                {
                  if (v43)
                  {
                    v48 = 0;
                    if (v43 == 1)
                    {
                      v8 = 0;
                      v101 = 0;
                      goto LABEL_339;
                    }
                    v8 = 0;
                    v101 = 0;
                    if (*v65 != 45)
                      goto LABEL_339;
                    v106 = (unsigned __int16)v65[1];
                    if (v106 - 48 < 0xA || (unsigned __int16)((v106 | 0x20) - 97) <= 5u)
                    {
                      if (v106 >= 0x41)
                        v107 = (v106 + 9) & 0xF;
                      else
                        v107 = v106 - 48;
                      v108 = v107;
                      if (v43 == 2)
                      {
LABEL_336:
                        LODWORD(v48) = v67;
                        v67 = v108;
                        goto LABEL_287;
                      }
                      v109 = (unsigned __int16)v65[2];
                      if (v109 - 48 < 0xA || (unsigned __int16)((v109 | 0x20) - 97) <= 5u)
                      {
                        if (v109 >= 0x41)
                          v110 = (v109 + 9) & 0xF;
                        else
                          v110 = v109 - 48;
                        v108 = v110 | (16 * v108);
                        if (v43 == 3)
                          goto LABEL_336;
                        v111 = (unsigned __int16)v65[3];
                        if (v111 - 48 < 0xA || (unsigned __int16)((v111 | 0x20) - 97) <= 5u)
                        {
                          if (v111 >= 0x41)
                            v112 = (v111 + 9) & 0xF;
                          else
                            v112 = v111 - 48;
                          v108 = v112 | (16 * v108);
                          if (v43 == 4)
                            goto LABEL_336;
                          v113 = (unsigned __int16)v65[4];
                          if (v113 - 48 < 0xA || (unsigned __int16)((v113 | 0x20) - 97) <= 5u)
                          {
                            if (v113 >= 0x41)
                              v114 = (v113 + 9) & 0xF;
                            else
                              v114 = v113 - 48;
                            v108 = v114 | (16 * v108);
                            if (v43 == 5)
                              goto LABEL_336;
                            v115 = (unsigned __int16)v65[5];
                            if (v115 - 48 < 0xA || (unsigned __int16)((v115 | 0x20) - 97) <= 5u)
                            {
                              if (v115 >= 0x41)
                                v116 = (v115 + 9) & 0xF;
                              else
                                v116 = v115 - 48;
                              v108 = v116 | (16 * v108);
                              if (v43 == 6)
                                goto LABEL_336;
                              v117 = (unsigned __int16)v65[6];
                              if (v117 - 48 < 0xA || (unsigned __int16)((v117 | 0x20) - 97) <= 5u)
                              {
                                v118 = v117 >= 0x41 ? (v117 + 9) & 0xF : v117 - 48;
                                if (v43 == 7)
                                {
                                  v119 = v118;
                                  LODWORD(v48) = v67;
                                  v67 = v119 | (16 * v108);
                                  goto LABEL_287;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_338:
                    v48 = 0;
                    v8 = 0;
                    v101 = 0;
                    goto LABEL_339;
                  }
                  LODWORD(v48) = v67;
                }
                else if (v43)
                {
                  goto LABEL_338;
                }
LABEL_287:
                v101 = v48 & 0xFFFFFF00 | (unint64_t)(v67 << 32);
                v48 = v48;
                v8 = 1;
LABEL_339:
                v7 = v101 | v48;
                goto LABEL_340;
              }
              v74 = (v52 + 9) & 0xF;
              if (v52 < 0x41)
                v74 = v52 - 48;
              v48 = v74 | (16 * v48);
              v43 = v42 - 4;
              if (v42 == 4)
                goto LABEL_286;
              v45 = (_WORD *)(v41 + 8);
              v75 = *(unsigned __int16 *)(v41 + 8);
              if (v75 - 48 >= 0xA && (unsigned __int16)((v75 | 0x20) - 97) > 5u)
              {
                v53 = 3;
                goto LABEL_165;
              }
              v78 = (v75 + 9) & 0xF;
              if (v75 < 0x41)
                v78 = v75 - 48;
              v48 = v78 | (16 * v48);
              v43 = v42 - 5;
              if (v42 == 5)
                goto LABEL_286;
              v45 = (_WORD *)(v41 + 10);
              v79 = *(unsigned __int16 *)(v41 + 10);
              if (v79 - 48 >= 0xA && (unsigned __int16)((v79 | 0x20) - 97) > 5u)
              {
                v53 = 4;
                goto LABEL_165;
              }
              v93 = (v79 + 9) & 0xF;
              if (v79 < 0x41)
                v93 = v79 - 48;
              v48 = v93 | (16 * v48);
              v43 = v42 - 6;
              if (v42 == 6)
                goto LABEL_286;
              v45 = (_WORD *)(v41 + 12);
              v94 = *(unsigned __int16 *)(v41 + 12);
              if (v94 - 48 >= 0xA && (unsigned __int16)((v94 | 0x20) - 97) > 5u)
              {
                v53 = 5;
                goto LABEL_165;
              }
              v97 = (v94 + 9) & 0xF;
              if (v94 < 0x41)
                v97 = v94 - 48;
              v48 = v97 | (16 * v48);
              v43 = v42 - 7;
              if (v42 == 7)
              {
LABEL_286:
                v67 = v48;
                goto LABEL_287;
              }
              v100 = *(unsigned __int16 *)(v41 + 14);
              v98 = (_WORD *)(v41 + 14);
              v99 = v100;
              if ((v100 - 48) >= 0xA && (v99 | 0x20u) - 97 >= 6)
              {
                v53 = 6;
                v45 = v98;
                goto LABEL_165;
              }
            }
          }
        }
LABEL_192:
        v7 = 0;
        v8 = 0;
LABEL_340:
        v137 = 0;
LABEL_341:
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
        goto LABEL_8;
      }
      if (!(_DWORD)v42)
        goto LABEL_192;
      if (*(_BYTE *)v41 != 43)
        goto LABEL_192;
      v54 = v42 - 1;
      if (v42 == 1)
        goto LABEL_192;
      v56 = (_BYTE *)(v41 + 1);
      v55 = *(unsigned __int8 *)(v41 + 1);
      if (v55 - 48 >= 0xA && ((v55 | 0x20) - 97) > 5u)
      {
        v64 = 0;
        v59 = 0;
        goto LABEL_173;
      }
      v58 = (v55 + 9) & 0xF;
      if (v55 < 0x41)
        v58 = v55 - 48;
      v59 = v58;
      v54 = v42 - 2;
      if (v42 != 2)
      {
        v56 = (_BYTE *)(v41 + 2);
        v60 = *(unsigned __int8 *)(v41 + 2);
        if (v60 - 48 >= 0xA && ((v60 | 0x20) - 97) > 5u)
        {
          v64 = 1;
          goto LABEL_173;
        }
        v62 = (v60 + 9) & 0xF;
        if (v60 < 0x41)
          v62 = v60 - 48;
        v59 = v62 | (16 * v59);
        v54 = v42 - 3;
        if (v42 != 3)
        {
          v56 = (_BYTE *)(v41 + 3);
          v63 = *(unsigned __int8 *)(v41 + 3);
          if (v63 - 48 >= 0xA && ((v63 | 0x20) - 97) > 5u)
          {
            v64 = 2;
            goto LABEL_173;
          }
          v76 = (v63 + 9) & 0xF;
          if (v63 < 0x41)
            v76 = v63 - 48;
          v59 = v76 | (16 * v59);
          v54 = v42 - 4;
          if (v42 != 4)
          {
            v56 = (_BYTE *)(v41 + 4);
            v77 = *(unsigned __int8 *)(v41 + 4);
            if (v77 - 48 >= 0xA && ((v77 | 0x20) - 97) > 5u)
            {
              v64 = 3;
              goto LABEL_173;
            }
            v80 = (v77 + 9) & 0xF;
            if (v77 < 0x41)
              v80 = v77 - 48;
            v59 = v80 | (16 * v59);
            v54 = v42 - 5;
            if (v42 != 5)
            {
              v56 = (_BYTE *)(v41 + 5);
              v81 = *(unsigned __int8 *)(v41 + 5);
              if (v81 - 48 >= 0xA && ((v81 | 0x20) - 97) > 5u)
              {
                v64 = 4;
                goto LABEL_173;
              }
              v95 = (v81 + 9) & 0xF;
              if (v81 < 0x41)
                v95 = v81 - 48;
              v59 = v95 | (16 * v59);
              v54 = v42 - 6;
              if (v42 != 6)
              {
                v56 = (_BYTE *)(v41 + 6);
                v96 = *(unsigned __int8 *)(v41 + 6);
                if (v96 - 48 >= 0xA && ((v96 | 0x20) - 97) > 5u)
                {
                  v64 = 5;
                  goto LABEL_173;
                }
                v102 = (v96 + 9) & 0xF;
                if (v96 < 0x41)
                  v102 = v96 - 48;
                v59 = v102 | (16 * v59);
                v54 = v42 - 7;
                if (v42 != 7)
                {
                  v105 = *(unsigned __int8 *)(v41 + 7);
                  v103 = (_BYTE *)(v41 + 7);
                  v104 = v105;
                  if ((v105 - 48) < 0xA || (v104 | 0x20u) - 97 < 6)
                    goto LABEL_192;
                  v64 = 6;
                  v56 = v103;
LABEL_173:
                  v68 = &v56[v54];
                  v69 = v64 + v54;
                  v70 = v59;
                  while (*v56 == 63)
                  {
                    if (v64 == 6)
                      goto LABEL_192;
                    ++v64;
                    ++v56;
                    LODWORD(v59) = 16 * v59;
                    v70 = (16 * (_DWORD)v70) | 0xFu;
                    if (!--v54)
                      goto LABEL_179;
                  }
                  v68 = v56;
                  v69 = v64;
LABEL_179:
                  if (!v69)
                    goto LABEL_192;
                  if ((_DWORD)v59 == (_DWORD)v70)
                  {
                    if (v54)
                    {
                      if (v54 == 1)
                        goto LABEL_192;
                      if (*v68 != 45)
                        goto LABEL_192;
                      v71 = v68[1];
                      if (v71 - 48 >= 0xA && ((v71 | 0x20) - 97) > 5u)
                        goto LABEL_192;
                      if (v71 >= 0x41)
                        v72 = (v71 + 9) & 0xF;
                      else
                        v72 = v71 - 48;
                      v73 = v72;
                      if (v54 == 2)
                        goto LABEL_190;
                      v82 = v68[2];
                      if (v82 - 48 >= 0xA && ((v82 | 0x20) - 97) > 5u)
                        goto LABEL_192;
                      v83 = v82 >= 0x41 ? (v82 + 9) & 0xF : v82 - 48;
                      v73 = v83 | (16 * v73);
                      if (v54 == 3)
                        goto LABEL_190;
                      v84 = v68[3];
                      if (v84 - 48 >= 0xA && ((v84 | 0x20) - 97) > 5u)
                        goto LABEL_192;
                      v85 = v84 >= 0x41 ? (v84 + 9) & 0xF : v84 - 48;
                      v73 = v85 | (16 * v73);
                      if (v54 == 4)
                        goto LABEL_190;
                      v86 = v68[4];
                      if (v86 - 48 >= 0xA && ((v86 | 0x20) - 97) > 5u)
                        goto LABEL_192;
                      v87 = v86 >= 0x41 ? (v86 + 9) & 0xF : v86 - 48;
                      v73 = v87 | (16 * v73);
                      if (v54 == 5)
                        goto LABEL_190;
                      v88 = v68[5];
                      if (v88 - 48 >= 0xA && ((v88 | 0x20) - 97) > 5u)
                        goto LABEL_192;
                      v89 = v88 >= 0x41 ? (v88 + 9) & 0xF : v88 - 48;
                      v73 = v89 | (16 * v73);
                      if (v54 == 6)
                      {
LABEL_190:
                        LODWORD(v59) = v70;
                        v70 = v73;
                      }
                      else
                      {
                        v90 = v68[6];
                        if (v90 - 48 >= 0xA && ((v90 | 0x20) - 97) > 5u)
                          goto LABEL_192;
                        v91 = v90 >= 0x41 ? (v90 + 9) & 0xF : v90 - 48;
                        if (v54 != 7)
                          goto LABEL_192;
                        v92 = v91;
                        LODWORD(v59) = v70;
                        v70 = v92 | (16 * v73);
                      }
                    }
                    else
                    {
                      LODWORD(v59) = v70;
                    }
                  }
                  else if (v54)
                  {
                    goto LABEL_192;
                  }
LABEL_295:
                  v7 = v59 | (unint64_t)(v70 << 32);
                  v137 = 0;
                  v8 = 1;
                  goto LABEL_341;
                }
              }
            }
          }
        }
      }
      v70 = v59;
      goto LABEL_295;
    }
LABEL_7:
    v7 = 0;
    v8 = 0;
LABEL_8:
    v10 = *v3;
    v9 = (unint64_t)v3[1];
    while (1)
    {
      if ((unint64_t)v10 < v9 || (v11 & 1) != 0)
      {
        if ((unint64_t)v10 >= v9)
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v12 = *(_DWORD *)v10;
      }
      else
      {
        v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
        v11 = 1;
      }
      if ((v12 & 0x3F) != 0x10)
        break;
      v10 = (__int128 *)((char *)*v3 + 24);
      *v3 = v10;
    }
    if (!v8 || HIWORD(v7) > 0x10 || v7 > HIDWORD(v7))
    {
      *a3 = 0;
      goto LABEL_362;
    }
    this = WTF::fastCompactMalloc((WTF *)0x10);
    v13 = this;
    *(_DWORD *)this = 2;
    v14 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(this + 4) = -20480;
    *(_BYTE *)(this + 6) = BYTE2(v14);
    *(_QWORD *)(this + 8) = v7;
    v15 = HIDWORD(v135);
    if (HIDWORD(v135) == (_DWORD)v135)
    {
      v16 = HIDWORD(v135) + ((unint64_t)HIDWORD(v135) >> 2);
      v17 = v16 >= 0x10 ? v16 + 1 : 16;
      v18 = v17 <= (unint64_t)HIDWORD(v135) + 1 ? HIDWORD(v135) + 1 : v17;
      v19 = v134;
      if (v18 < 5)
      {
        v134 = (WTF *)v136;
        LODWORD(v135) = 4;
        v20 = (WTF *)v136;
      }
      else
      {
        if (v18 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v20 = (WTF *)WTF::fastMalloc((WTF *)(8 * v18));
        LODWORD(v135) = v18;
        v134 = v20;
      }
      this = (uint64_t)memcpy(v20, v19, 8 * HIDWORD(v135));
      if (v136 != (_BYTE *)v19 && v19)
      {
        if (v134 == v19)
        {
          v134 = 0;
          LODWORD(v135) = 0;
        }
        this = WTF::fastFree(v19, a2);
      }
      v15 = HIDWORD(v135);
      v21 = (uint64_t *)((char *)v134 + 8 * HIDWORD(v135));
    }
    else
    {
      v21 = (uint64_t *)((char *)v134 + 8 * HIDWORD(v135));
    }
    *v21 = v13;
    HIDWORD(v135) = v15 + 1;
    v22 = *v3;
    v4 = v3[1];
    if (*v3 >= v4)
    {
      v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v22 & 0x3F) != 0x15)
      break;
    v23 = *v3;
    if (*v3 == v4)
    {
      v25 = 1;
      v24 = v4;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v24 = *v3;
      }
    }
    else
    {
      v24 = (__int128 *)((char *)v23 + 24);
      *v3 = (__int128 *)((char *)v23 + 24);
    }
    while (1)
    {
      if (v24 < v4 || (v25 & 1) != 0)
      {
        if (v24 >= v4)
          v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v26 = *(_DWORD *)v24;
      }
      else
      {
        v26 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v26;
        v25 = 1;
      }
      if ((v26 & 0x3F) != 0x10)
        break;
      v24 = (__int128 *)((char *)*v3 + 24);
      *v3 = v24;
    }
  }
  v130 = (WTF *)v133;
  v131 = 4;
  v123 = v134;
  if (v134 == (WTF *)v136)
  {
    memcpy(v133, v136, 8 * (v15 + 1));
  }
  else
  {
    v134 = (WTF *)v136;
    v130 = v123;
    v128 = v135;
    LODWORD(v135) = 4;
    v131 = v128;
  }
  HIDWORD(v135) = 0;
  v132 = v15 + 1;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v130, (uint64_t *)&v138);
  *a3 = v138;
  if (v132)
  {
    v124 = v130;
    v125 = 8 * v132;
    do
    {
      v126 = *(_DWORD **)v124;
      *(_QWORD *)v124 = 0;
      if (v126)
      {
        if (*v126 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v126, a2);
        else
          *v126 -= 2;
      }
      v124 = (WTF *)((char *)v124 + 8);
      v125 -= 8;
    }
    while (v125);
  }
  this = (uint64_t)v130;
  if (v133 != (_BYTE *)v130 && v130 != 0)
  {
    v130 = 0;
    v131 = 0;
    this = WTF::fastFree((WTF *)this, a2);
  }
LABEL_362:
  v120 = v134;
  if (HIDWORD(v135))
  {
    v121 = 8 * HIDWORD(v135);
    do
    {
      this = *(_QWORD *)v120;
      *(_QWORD *)v120 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v120 = (WTF *)((char *)v120 + 8);
      v121 -= 8;
    }
    while (v121);
    v120 = v134;
  }
  if (v136 != (_BYTE *)v120 && v120 != 0)
  {
    v134 = 0;
    LODWORD(v135) = 0;
    return WTF::fastFree(v120, a2);
  }
  return this;
}

WTF::StringImpl *WebCore::CSSPropertyParserWorkerSafe::parseFontFaceFeatureSettings@<X0>(const WTF::String *a1@<X1>, int **a2@<X8>)
{
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WebCore::CSSParserTokenRange *v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 *v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  __int128 *v28;
  int v29;
  __int128 **v30;
  __int128 **v31;
  __int128 *v32;
  int *v33;
  __int128 **v34;
  uint64_t v35;
  __int128 *v36;
  WTF *v37;
  __int128 **v39;
  unsigned int v40;
  __int128 ***v41;
  uint64_t v42;
  __int128 **v43;
  WTF *v44;
  int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *result;
  int v51;
  __int128 *v52;
  __int128 *v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  WTF::StringImpl *v61;
  BOOL v62;
  int v63;
  char v64;
  int v65;
  __int128 ***v66;
  int v67;
  unsigned int v68;
  _BYTE v69[32];
  _DWORD *v70;
  __int128 **v71;
  uint64_t v72;
  _BYTE v73[32];

  if (*((_BYTE *)a1 + 274))
    v5 = 0;
  else
    v5 = *((_BYTE *)a1 + 3192) == 2;
  v54 = 0;
  WTF::URL::invalidate((WTF::URL *)&v54);
  v7 = v54;
  if (v54)
    *(_DWORD *)v54 += 2;
  v58 = v7;
  v59 = v55;
  v60 = v56;
  v61 = 0;
  v62 = v5;
  v63 = 0;
  v64 = 0;
  v65 &= 0xC0000000;
  v8 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v8 != -1)
  {
    v71 = &v52;
    v66 = &v71;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v9 = v54;
  v54 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v54, (uint64_t)&v58);
  v11 = *(__int128 **)(v57 + 48);
  v12 = (__int128 *)((char *)v11 + 24 * *(unsigned int *)(v57 + 60));
  v13 = 24 * *(unsigned int *)(v57 + 60);
  v52 = v11;
  v53 = v12;
  v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v11 < v12 || (v14 & 1) != 0)
    {
      v16 = v11 >= v12 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = v15 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v14 = 1;
      v15 = v17;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v11 = (__int128 *)((char *)v11 + 24);
    v52 = v11;
    v13 -= 24;
  }
  if (!v13)
    goto LABEL_96;
  v18 = v11 >= v12;
  v19 = (v11 < v12) | v14;
  if (v18)
    v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v20 = v11;
  if ((v19 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15 & 0xFF000000 | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  if ((*(_DWORD *)v20 & 0x3F) == 0)
  {
    v46 = *((_DWORD *)v20 + 4);
    if (v46 < 0)
    {
      v46 = WebCore::cssValueKeywordID(*((_QWORD *)v20 + 1), *((unsigned int *)v20 + 1) | ((unint64_t)((*(_DWORD *)v20 >> 22) & 1) << 32));
      *((_DWORD *)v20 + 4) = v46;
    }
    if ((unsigned __int16)v46 == 90)
    {
      v47 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(&v52, v10);
      if ((v47 & 0xFF0000) != 0)
      {
        if ((unsigned __int16)v47 >= 0x48Eu)
        {
          __break(0xC471u);
          JUMPOUT(0x1958E8A04);
        }
        v33 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v47 + 3088];
        *v33 += 2;
        goto LABEL_69;
      }
LABEL_96:
      *a2 = 0;
      goto LABEL_97;
    }
  }
  v71 = (__int128 **)v73;
  v72 = 4;
  WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFeatureTagValue(&v52, v10, &v66);
  v21 = (uint64_t)v66;
  if (v66)
  {
    while (1)
    {
      v70 = (_DWORD *)v21;
      LODWORD(v22) = HIDWORD(v72);
      if (HIDWORD(v72) == (_DWORD)v72)
      {
        v30 = (__int128 **)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, HIDWORD(v72) + 1, (unint64_t)&v70);
        v22 = HIDWORD(v72);
        v31 = v71;
        v32 = *v30;
        *v30 = 0;
        v31[v22] = v32;
      }
      else
      {
        v70 = 0;
        v71[HIDWORD(v72)] = (__int128 *)v21;
      }
      HIDWORD(v72) = v22 + 1;
      v23 = v70;
      v70 = 0;
      if (v23)
      {
        if (*v23 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v10);
        else
          *v23 -= 2;
      }
      v24 = v52;
      v25 = v52;
      if (v52 >= v53)
      {
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v25 & 0x3F) != 0x15)
        break;
      if (v52 == v53)
      {
        v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v26 = 1;
        {
          v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
        }
      }
      else
      {
        v24 = (__int128 *)((char *)v52 + 24);
        v52 = (__int128 *)((char *)v52 + 24);
        v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if (v24 < v53 || (v26 & 1) != 0)
        {
          v28 = v24 >= v53 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v24;
          v29 = *(_DWORD *)v28;
        }
        else
        {
          v27 = v27 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
          v26 = 1;
          LOBYTE(v29) = v27;
        }
        if ((v29 & 0x3F) != 0x10)
          break;
        v24 = (__int128 *)((char *)v24 + 24);
        v52 = v24;
      }
      WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFeatureTagValue(&v52, v10, &v66);
      v21 = (uint64_t)v66;
      if (!v66)
        goto LABEL_55;
    }
    v66 = (__int128 ***)v69;
    v67 = 4;
    v39 = v71;
    if (v71 == (__int128 **)v73)
    {
      v40 = HIDWORD(v72);
      memcpy(v69, v73, 8 * HIDWORD(v72));
    }
    else
    {
      v71 = (__int128 **)v73;
      v66 = (__int128 ***)v39;
      v51 = v72;
      v40 = HIDWORD(v72);
      LODWORD(v72) = 4;
      v67 = v51;
    }
    HIDWORD(v72) = 0;
    v68 = v40;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v66, (uint64_t *)&v70);
    v33 = v70;
    if (v68)
    {
      v41 = v66;
      v42 = 8 * v68;
      do
      {
        v43 = *v41;
        *v41 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v10);
          else
            *(_DWORD *)v43 -= 2;
        }
        ++v41;
        v42 -= 8;
      }
      while (v42);
    }
    v44 = (WTF *)v66;
    if (v69 != (_BYTE *)v66 && v66 != 0)
    {
      v66 = 0;
      v67 = 0;
      WTF::fastFree(v44, v10);
    }
  }
  else
  {
LABEL_55:
    v33 = 0;
  }
  if (HIDWORD(v72))
  {
    v34 = v71;
    v35 = 8 * HIDWORD(v72);
    do
    {
      v36 = *v34;
      *v34 = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v10);
        else
          *(_DWORD *)v36 -= 2;
      }
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
  v37 = (WTF *)v71;
  if (v73 == (_BYTE *)v71 || v71 == 0)
  {
    if (!v33)
      goto LABEL_96;
  }
  else
  {
    v71 = 0;
    LODWORD(v72) = 0;
    WTF::fastFree(v37, v10);
    if (!v33)
      goto LABEL_96;
  }
LABEL_69:
  if (v52 == v53)
  {
    *a2 = v33;
  }
  else
  {
    *a2 = 0;
    if (*v33 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, v10);
    else
      *v33 -= 2;
  }
LABEL_97:
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v54, v10);
  v49 = v61;
  v61 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v48);
    else
      *(_DWORD *)v49 -= 2;
  }
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v48);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserWorkerSafe::parseFontFaceDisplay@<X0>(const WTF::String *a1@<X1>, int **a2@<X8>)
{
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  __int128 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  unsigned int *v23;
  __int128 *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  int v28;
  char v29;
  unsigned int v30;
  __int128 *v31;
  int v32;
  int v33;
  int *v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  WTF::StringImpl *v44;
  BOOL v45;
  int v46;
  char v47;
  int v48;
  char v49;
  char **v50;
  char *v51;

  if (*((_BYTE *)a1 + 274))
    v5 = 0;
  else
    v5 = *((_BYTE *)a1 + 3192) == 2;
  v37 = 0;
  WTF::URL::invalidate((WTF::URL *)&v37);
  v7 = v37;
  if (v37)
    *(_DWORD *)v37 += 2;
  v41 = v7;
  v42 = v38;
  v43 = v39;
  v44 = 0;
  v45 = v5;
  v46 = 0;
  v47 = 0;
  v48 &= 0xC0000000;
  v8 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v8 != -1)
  {
    v51 = &v49;
    v50 = &v51;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v50, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v9 = v37;
  v37 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v37, (uint64_t)&v41);
  v11 = 0;
  v12 = *(_QWORD *)(v40 + 48);
  v13 = v12 + 24 * *(unsigned int *)(v40 + 60);
  v14 = 24 * *(unsigned int *)(v40 + 60);
  v16 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    v17 = v12 + v11;
    if (v12 + v11 < v13 || (v15 & 1) != 0)
    {
      if (v17 >= v13)
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v18 = (__int128 *)(v12 + v11);
      v19 = *(_DWORD *)v18;
    }
    else
    {
      v19 = v16 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
      v15 = 1;
      v16 = v19;
    }
    v11 += 24;
  }
  while ((v19 & 0x3F) == 0x10);
  v20 = v14 + 24;
  v21 = v20 - v11;
  if (v20 == v11)
    goto LABEL_26;
  v22 = (__int128 *)(v12 + v11);
  v23 = (unsigned int *)(v12 + v11 - 24);
  if (v17 >= v13)
  {
    if ((v15 & 1) == 0)
    {
      v16 = v16 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
    }
    if ((v16 & 0x3F) != 0)
      goto LABEL_26;
    v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v16 = *v23;
    if ((*v23 & 0x3F) != 0)
    {
LABEL_26:
      *a2 = 0;
      goto LABEL_27;
    }
    v24 = (__int128 *)(v12 + v11 - 24);
  }
  if ((v16 & 0x3F) != 0)
    goto LABEL_26;
  v28 = *((_DWORD *)v24 + 4);
  if (v28 < 0)
  {
    v28 = WebCore::cssValueKeywordID(*((_QWORD *)v24 + 1), *((unsigned int *)v24 + 1) | ((unint64_t)((v16 >> 22) & 1) << 32));
    *((_DWORD *)v24 + 4) = v28;
  }
  if ((unsigned __int16)v28 - 967 >= 3 && (unsigned __int16)v28 != 394 && (unsigned __int16)v28 != 367)
    goto LABEL_26;
  v30 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if ((unint64_t)v22 < v13 || (v29 & 1) != 0)
    {
      if ((unint64_t)v22 >= v13)
        v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v31 = v22;
      v32 = *(_DWORD *)v31;
    }
    else
    {
      v30 = v30 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
      v29 = 1;
      LOBYTE(v32) = v30;
    }
    v22 = (__int128 *)((char *)v22 + 24);
    v21 -= 24;
  }
  while ((v32 & 0x3F) == 0x10);
  if ((*v23 & 0x3F) != 0)
  {
    LOWORD(v33) = 0;
  }
  else
  {
    v36 = v12 + v11;
    v33 = *(_DWORD *)(v36 - 8);
    if (v33 < 0)
    {
      v33 = WebCore::cssValueKeywordID(*(_QWORD *)(v36 - 16), *(unsigned int *)(v36 - 20) | ((unint64_t)((*v23 >> 22) & 1) << 32));
      *(_DWORD *)(v36 - 8) = v33;
    }
    if ((unsigned __int16)v33 >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958E8DBCLL);
    }
  }
  v34 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v33 + 3088];
  v35 = *v34;
  *v34 += 2;
  if (v21)
  {
    *a2 = 0;
    if (v35)
      *v34 = v35;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v10);
  }
  else
  {
    *a2 = v34;
  }
LABEL_27:
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v37, v10);
  v26 = v44;
  v44 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPropertyParserWorkerSafe::parseFontFaceSizeAdjust@<X0>(const WTF::String *a1@<X1>, __int128 ***a2@<X8>)
{
  BOOL v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 *v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  unsigned int v17;
  __int128 **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  __int128 *v22;
  __int128 *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  char v35;
  __int128 **v36;

  if (*((_BYTE *)a1 + 274))
    v5 = 0;
  else
    v5 = *((_BYTE *)a1 + 3192) == 2;
  v24 = 0;
  WTF::URL::invalidate((WTF::URL *)&v24);
  v7 = v24;
  if (v24)
    *(_DWORD *)v24 += 2;
  v28 = v7;
  v29 = v25;
  v30 = v26;
  v31 = 0;
  v32 = v5;
  v33 = 0;
  v34 = 0;
  v8 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v8 != -1)
  {
    v22 = (__int128 *)&v35;
    v36 = &v22;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)&v24, (uint64_t)&v28);
  v11 = *(__int128 **)(v27 + 48);
  v12 = (char *)v11 + 24 * *(unsigned int *)(v27 + 60);
  v13 = 24 * *(unsigned int *)(v27 + 60);
  v22 = v11;
  v23 = (__int128 *)v12;
  v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v11 < (__int128 *)v12 || (v14 & 1) != 0)
    {
      v16 = v11 >= (__int128 *)v12 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = v15 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v14 = 1;
      v15 = v17;
    }
    if ((v17 & 0x3F) != 0x10)
      break;
    v11 = (__int128 *)((char *)v11 + 24);
    v22 = v11;
    v13 -= 24;
  }
  if (v13
    && (WebCore::CSSPropertyParserHelpers::consumePercent((WebCore::CSSCalcValue *)&v22, 1u, &v36), (v18 = v36) != 0))
  {
    if (v22 == v23)
    {
      *a2 = v36;
    }
    else
    {
      *a2 = 0;
      v36 = 0;
      if (*(_DWORD *)v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v10);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)&v24, v10);
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontStyleAngle(_QWORD *a1, __int128 *a2, unsigned int a3)
{
  void *v5;
  _DWORD *result;
  WTF::StringImpl *v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int16 *v12;

  v10 = *a2;
  v12 = 0;
  v11 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw>::consumeAndResolve((uint64_t)&v10, &v12, (uint64_t)&v11, a3 | 0x10100000000, &v9);
  if (v11)
    WTF::fastFree((WTF *)(v11 - 16), v5);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 8), v5);
  result = (_DWORD *)v9;
  if (!v9)
    goto LABEL_12;
  if ((*(_WORD *)(v9 + 4) & 0x7F) == 0x49)
    goto LABEL_11;
  v8 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v9, 0xCu));
  if (!(_BYTE)v7)
    v8 = 0.0;
  result = (_DWORD *)v9;
  if (v8 >= -90.0 && v8 <= 90.0)
  {
LABEL_11:
    *a2 = v10;
LABEL_12:
    *a1 = result;
    return result;
  }
  *a1 = 0;
  v9 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
    else
      *result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFeatureTagValue@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  WebCore::CSSParserTokenRange *v6;
  __int128 *v7;
  __int128 *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  int v16;
  char v17;

  v5 = WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontTag(this, a2);
  v16 = v5;
  v17 = BYTE4(v5);
  if (!BYTE4(v5))
  {
LABEL_16:
    result = 0;
    goto LABEL_5;
  }
  v7 = *this;
  v8 = this[1];
  if (*this == v8)
    goto LABEL_3;
  if (*this >= v8)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) == 0x15)
  {
LABEL_3:
    v9 = 1;
  }
  else
  {
    v12 = WebCore::CSSPropertyParserHelpers::consumeNonNegativeIntegerRaw((WebCore::CSSPropertyParserHelpers *)this, v6);
    v9 = v12;
    if ((v12 & 0xFF00000000) == 0)
    {
      v13 = *this;
      if (*this >= this[1])
      {
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if (WebCore::CSSParserToken::id((unsigned int *)v13) != 712)
      {
        v15 = *this;
        if (*this >= this[1])
        {
          v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        if (WebCore::CSSParserToken::id((unsigned int *)v15) != 713)
          goto LABEL_16;
      }
      v14 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
      v9 = WebCore::CSSParserToken::id((unsigned int *)v14) == 712;
    }
  }
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  result = WebCore::CSSFontFeatureValue::CSSFontFeatureValue(v10, &v16, v9);
LABEL_5:
  *a3 = result;
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontTag(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = *this;
  if (*this >= this[1])
  {
    v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v3 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x3F) != 0x1C || *((_DWORD *)v2 + 1) != 4)
    goto LABEL_16;
  v4 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  if ((v3 & 0x400000) != 0)
  {
    v5 = *v4;
    if (v5 - 32 >= 0x5F)
      goto LABEL_16;
    v6 = v4[1];
    if ((v6 - 32) >= 0x5F)
      goto LABEL_16;
    v7 = v4[2];
    if ((v7 - 32) > 0x5E)
      goto LABEL_16;
    v8 = v4[3];
  }
  else
  {
    v5 = *(unsigned __int16 *)v4;
    if (v5 - 32 >= 0x5F)
      goto LABEL_16;
    v6 = *((unsigned __int16 *)v4 + 1);
    if ((v6 - 32) >= 0x5F)
      goto LABEL_16;
    v7 = *((unsigned __int16 *)v4 + 2);
    if ((v7 - 32) >= 0x5F)
      goto LABEL_16;
    v8 = *((unsigned __int16 *)v4 + 3);
  }
  if ((v8 - 32) > 0x5E)
  {
LABEL_16:
    v10 = 0;
    v5 = 0;
    v9 = 0;
    return v9 | v5 | (unint64_t)(v10 << 32);
  }
  WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
  v9 = (v7 << 16) | (v6 << 8) | (v8 << 24);
  v10 = 1;
  return v9 | v5 | (unint64_t)(v10 << 32);
}

uint64_t WebCore::CSSPropertyParserHelpersWorkerSafe::consumeVariationTagValue@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  int v6;
  double v7;
  void *v8;
  float v9;
  uint64_t result;
  int v11;
  void *v12;
  char v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;

  v5 = WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontTag(this, a2);
  if (!BYTE4(v5))
    goto LABEL_8;
  v6 = v5;
  v16 = 0;
  v17 = 0;
  v7 = COERCE_DOUBLE(WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<WebCore::NumberRaw>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::NumberRaw>::consumeAndResolve(this, &v17, (uint64_t)&v16, 0x10100000000));
  if (v16)
  {
    v14 = v7;
    v12 = v8;
    WTF::fastFree((WTF *)(v16 - 16), v8);
    v8 = v12;
    v7 = v14;
  }
  if (v17)
  {
    v15 = v7;
    v13 = (char)v8;
    WTF::fastFree((WTF *)(v17 - 16), v8);
    LOBYTE(v8) = v13;
    v7 = v15;
  }
  if ((_BYTE)v8)
  {
    v9 = v7;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v11 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(result + 4) = 14336;
    *(_BYTE *)(result + 6) = BYTE2(v11);
    *(_DWORD *)(result + 7) = v6;
    *(float *)(result + 12) = v9;
  }
  else
  {
LABEL_8:
    result = 0;
  }
  *a3 = result;
  return result;
}

WebCore::StyleSheetContents *WebCore::parseMutableCSSSelectorList@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, WebCore::StyleSheetContents *a3@<X2>, WTF::AtomString *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v8;
  __int128 *v9;
  char v10;
  unsigned int v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  WebCore::CSSParserTokenRange *v18;
  uint64_t v19;
  uint64_t *v20;
  WTF::AtomString *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::StyleSheetContents *result;
  unsigned int v26;
  WTF::AtomString *v27;
  WTF *v28;
  WTF *v29;
  void *v30;
  unsigned int v31;
  WebCore::MutableCSSSelector *v32;
  WTF *v33;
  unsigned int **v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::MutableCSSSelector *v38;
  WTF *v39;
  void *v40;
  __int128 *v41;
  __int128 *v42;
  __int128 *v43;
  __int128 *v44;
  char v45;
  unsigned int v46;
  WTF *v47;
  WebCore::MutableCSSSelector *v48;
  WTF *v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  WTF *v53;
  unsigned int **v54;
  uint64_t *v55;
  WTF *v56;
  uint64_t v57;
  WebCore::MutableCSSSelector *v58;
  WTF *v59;
  void *v60;
  WTF *v61;
  uint64_t v62;
  WebCore::MutableCSSSelector *v63;
  WTF *v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  WebCore::StyleSheetContents *v72;
  char v73;
  uint64_t v74;
  WebCore::MutableCSSSelector *v75;
  WTF *v76;
  WebCore::MutableCSSSelector **v77;
  uint64_t *v78;
  WTF **v79;
  WTF *v80;
  unint64_t v81;

  v70 = *(_QWORD *)a2;
  v71 = a2[8];
  if (a3)
    ++*(_DWORD *)a3;
  v72 = a3;
  v73 = (char)a4;
  v74 = 0;
  v9 = *(__int128 **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    if ((unint64_t)v9 < v8 || (v10 & 1) != 0)
    {
      if ((unint64_t)v9 >= v8)
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v11 = *(_DWORD *)v9;
    }
    else
    {
      v11 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
      v10 = 1;
    }
    if ((v11 & 0x3F) != 0x10)
      break;
    v9 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v9;
  }
  if (!(_DWORD)a4)
  {
    v76 = (WTF *)&v70;
    if (a5)
      WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>((WebCore::MutableCSSSelector *)&v68, (uint64_t)&v70, (__int128 **)a1, (__int128 **)&v76);
    else
      WebCore::CSSSelectorParser::consumeSelectorList<WebCore::CSSSelectorParser::consumeComplexSelectorList(WebCore::CSSParserTokenRange &)::$_0>((uint64_t)&v68, (uint64_t)&v70, (__int128 **)a1, &v76);
    goto LABEL_35;
  }
  if ((a5 & 1) != 0)
  {
    v75 = (WebCore::MutableCSSSelector *)&v70;
    v76 = (WTF *)a1;
    v80 = 0;
    v81 = 0;
    v77 = &v75;
    v78 = &v70;
    v79 = &v80;
    while (1)
    {
      WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeNestedComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>(WebCore::CSSParserTokenRange &,WebCore::CSSSelectorParser::consumeNestedComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0 &&)::{lambda(void)#1}::operator()((__int128 ***)&v76, (uint64_t)a2, (uint64_t)a3, a4);
      v13 = *(__int128 **)a1;
      v12 = *(__int128 **)(a1 + 8);
      if (*(__int128 **)a1 == v12)
        break;
      if (v13 >= v12)
      {
        v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v13 & 0x3F) != 0x15)
        break;
      v14 = *(__int128 **)a1;
      if (*(__int128 **)a1 == v12)
      {
        v16 = 1;
        v15 = v12;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v15 = *(__int128 **)a1;
        }
      }
      else
      {
        v15 = (__int128 *)((char *)v14 + 24);
        *(_QWORD *)a1 = (char *)v14 + 24;
      }
      while (1)
      {
        if (v15 < v12 || (v16 & 1) != 0)
        {
          if (v15 >= v12)
            v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v17 = *(_DWORD *)v15;
        }
        else
        {
          v17 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
          v16 = 1;
        }
        if ((v17 & 0x3F) != 0x10)
          break;
        v15 = (__int128 *)(*(_QWORD *)a1 + 24);
        *(_QWORD *)a1 = v15;
      }
    }
    if (HIDWORD(v81))
    {
      v68 = v80;
      v69 = v81;
      goto LABEL_35;
    }
    if (BYTE5(v74))
      LOBYTE(v74) = 1;
    v68 = 0;
    v69 = 0;
    v28 = v80;
    if (v80)
    {
      v80 = 0;
      LODWORD(v81) = 0;
LABEL_99:
      WTF::fastFree(v28, a2);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v76 = 0;
  v77 = 0;
  WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v68, (WebCore::CSSParserTokenRange *)&v70, (__int128 **)a1, a4);
  if (v68)
  {
    v19 = 0;
    v75 = v68;
  }
  else
  {
    v26 = WebCore::CSSSelectorParser::consumeCombinator((__int128 **)a1, v18);
    if (v26 < 2
      || (v31 = v26,
          WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v80, (WebCore::CSSParserTokenRange *)&v70, (__int128 **)a1, v27), (v32 = v80) == 0))
    {
      v68 = 0;
      v69 = 0;
      goto LABEL_96;
    }
    v33 = v80;
    do
    {
      v34 = (unsigned int **)v33;
      v33 = (WTF *)*((_QWORD *)v33 + 1);
    }
    while (v33);
    **v34 = **v34 & 0xFFFFFFF0 | v31;
    v19 = HIDWORD(v77);
    v75 = v32;
    if (HIDWORD(v77) != (_DWORD)v77)
    {
      v75 = 0;
      *((_QWORD *)v76 + HIDWORD(v77)) = v32;
      goto LABEL_67;
    }
  }
  v20 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, v19 + 1, (unint64_t)&v75);
  v19 = HIDWORD(v77);
  v22 = v76;
  v23 = *v20;
  *v20 = 0;
  *((_QWORD *)v22 + v19) = v23;
LABEL_67:
  while (1)
  {
    HIDWORD(v77) = v19 + 1;
    v42 = *(__int128 **)a1;
    v41 = *(__int128 **)(a1 + 8);
    if (*(__int128 **)a1 == v41)
      break;
    if (v42 >= v41)
    {
      v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v42 & 0x3F) != 0x15)
      break;
    v43 = *(__int128 **)a1;
    if (*(__int128 **)a1 == v41)
    {
      v45 = 1;
      v44 = v41;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v44 = *(__int128 **)a1;
      }
    }
    else
    {
      v44 = (__int128 *)((char *)v43 + 24);
      *(_QWORD *)a1 = (char *)v43 + 24;
    }
    while (1)
    {
      if (v44 < v41 || (v45 & 1) != 0)
      {
        if (v44 >= v41)
          v44 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v46 = *(_DWORD *)v44;
      }
      else
      {
        v46 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v46;
        v45 = 1;
      }
      if ((v46 & 0x3F) != 0x10)
        break;
      v44 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v44;
    }
    WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v68, (WebCore::CSSParserTokenRange *)&v70, (__int128 **)a1, v21);
    v47 = v68;
    if (!v68)
    {
      v51 = WebCore::CSSSelectorParser::consumeCombinator((__int128 **)a1, (WebCore::CSSParserTokenRange *)a2);
      if (v51 >= 2)
      {
        v52 = v51;
        WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v80, (WebCore::CSSParserTokenRange *)&v70, (__int128 **)a1, v21);
        v47 = v80;
        v53 = v80;
        if (v80)
        {
          do
          {
            v54 = (unsigned int **)v53;
            v53 = (WTF *)*((_QWORD *)v53 + 1);
          }
          while (v53);
          **v54 = **v54 & 0xFFFFFFF0 | v52;
        }
      }
      else
      {
        v47 = 0;
      }
    }
    v48 = v75;
    v75 = v47;
    if (v48)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v48, a2);
      WTF::fastFree(v49, v50);
      v47 = v75;
    }
    if (!v47)
      goto LABEL_93;
    LODWORD(v19) = HIDWORD(v77);
    if (HIDWORD(v77) == (_DWORD)v77)
    {
      v55 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, HIDWORD(v77) + 1, (unint64_t)&v75);
      v19 = HIDWORD(v77);
      v56 = v76;
      v57 = *v55;
      *v55 = 0;
      *((_QWORD *)v56 + v19) = v57;
    }
    else
    {
      v75 = 0;
      *((_QWORD *)v76 + HIDWORD(v77)) = v47;
    }
  }
  if ((_BYTE)v74)
  {
LABEL_93:
    v68 = 0;
    v69 = 0;
    goto LABEL_94;
  }
  v68 = v76;
  v66 = v77;
  v67 = HIDWORD(v77);
  v76 = 0;
  v77 = 0;
  v69 = __PAIR64__(v67, v66);
LABEL_94:
  v58 = v75;
  v75 = 0;
  if (v58)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(v58, a2);
    WTF::fastFree(v59, v60);
  }
LABEL_96:
  v61 = v76;
  if (HIDWORD(v77))
  {
    v62 = 8 * HIDWORD(v77);
    do
    {
      v63 = *(WebCore::MutableCSSSelector **)v61;
      *(_QWORD *)v61 = 0;
      if (v63)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v63, a2);
        WTF::fastFree(v64, v65);
      }
      v61 = (WTF *)((char *)v61 + 8);
      v62 -= 8;
    }
    while (v62);
    v61 = v76;
  }
  if (v61)
  {
    v76 = 0;
    LODWORD(v77) = 0;
    v28 = v61;
    goto LABEL_99;
  }
LABEL_35:
  v24 = HIDWORD(v69);
  if (HIDWORD(v69))
  {
    if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    {
      *(_QWORD *)a6 = v68;
      *(_DWORD *)(a6 + 8) = v69;
      *(_DWORD *)(a6 + 12) = v24;
      goto LABEL_38;
    }
    v36 = 0;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    v37 = 8 * v24;
    v35 = v68;
    do
    {
      v38 = *(WebCore::MutableCSSSelector **)((char *)v35 + v36);
      *(_QWORD *)((char *)v35 + v36) = 0;
      if (v38)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v38, a2);
        WTF::fastFree(v39, v40);
      }
      v36 += 8;
    }
    while (v37 != v36);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    v35 = v68;
  }
  if (v35)
    WTF::fastFree(v35, a2);
LABEL_38:
  result = v72;
  v72 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
      return (WebCore::StyleSheetContents *)WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebCore::MutableCSSSelector *WebCore::parseCSSSelectorList@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, WebCore::StyleSheetContents *a4@<X3>, WTF::AtomString *a5@<X4>, uint64_t a6@<X8>)
{
  WebCore::MutableCSSSelector *result;
  void *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  result = WebCore::parseMutableCSSSelectorList((uint64_t)&v18, a3, a4, a5, 0, (uint64_t)&v16);
  v9 = v17;
  if (v17)
  {
    if (v18 == v19)
    {
      WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)a6, (uint64_t)&v16);
      v10 = 1;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)a6 = 0;
    }
    v11 = 0;
    *(_BYTE *)(a6 + 8) = v10;
    v12 = v16;
    v13 = 8 * v9;
    do
    {
      result = *(WebCore::MutableCSSSelector **)((char *)v12 + v11);
      *(_QWORD *)((char *)v12 + v11) = 0;
      if (result)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(result, v8);
        result = (WebCore::MutableCSSSelector *)WTF::fastFree(v14, v15);
      }
      v11 += 8;
    }
    while (v13 != v11);
  }
  else
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 8) = 0;
    v12 = v16;
  }
  if (v12)
    return (WebCore::MutableCSSSelector *)WTF::fastFree(v12, v8);
  return result;
}

WebCore::MutableCSSSelector *WebCore::CSSSelectorParser::consumeSelectorList<WebCore::CSSSelectorParser::consumeComplexSelectorList(WebCore::CSSParserTokenRange &)::$_0>(uint64_t a1, uint64_t a2, __int128 **a3, WebCore::CSSParserTokenRange **a4)
{
  WebCore::MutableCSSSelector *result;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  __int128 *i;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  WebCore::MutableCSSSelector *v21;
  WebCore::MutableCSSSelector *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  WebCore::MutableCSSSelector *v36;
  WebCore::MutableCSSSelector *v37;
  WTF *v38;
  uint64_t v39;

  v38 = 0;
  v39 = 0;
  result = (WebCore::MutableCSSSelector *)WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v37, *a4);
  if (v37)
  {
    v10 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, 1uLL, (unint64_t)&v37);
    v11 = HIDWORD(v39);
    v12 = v38;
    v13 = *v10;
    *v10 = 0;
    *((_QWORD *)v12 + v11) = v13;
    v14 = v11 + 1;
    HIDWORD(v39) = v11 + 1;
    v16 = *a3;
    for (i = a3[1]; *a3 != i; i = a3[1])
    {
      if (v16 >= i)
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v16 & 0x3F) != 0x15)
        break;
      v17 = *a3;
      if (*a3 == i)
      {
        v19 = 1;
        v18 = i;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v18 = *a3;
        }
      }
      else
      {
        v18 = (__int128 *)((char *)v17 + 24);
        *a3 = (__int128 *)((char *)v17 + 24);
      }
      while (1)
      {
        if (v18 < i || (v19 & 1) != 0)
        {
          if (v18 >= i)
            v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v20 = *(_DWORD *)v18;
        }
        else
        {
          v20 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
          v19 = 1;
        }
        if ((v20 & 0x3F) != 0x10)
          break;
        v18 = (__int128 *)((char *)*a3 + 24);
        *a3 = v18;
      }
      WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v36, *a4);
      v22 = v36;
      v21 = v37;
      v37 = v36;
      if (v21)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v21, v9);
        WTF::fastFree(v23, v24);
        v22 = v37;
      }
      if (!v22)
        goto LABEL_28;
      LODWORD(v25) = HIDWORD(v39);
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        v26 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, HIDWORD(v39) + 1, (unint64_t)&v37);
        v25 = HIDWORD(v39);
        v27 = v38;
        v28 = *v26;
        *v26 = 0;
        *((_QWORD *)v27 + v25) = v28;
      }
      else
      {
        v37 = 0;
        *((_QWORD *)v38 + HIDWORD(v39)) = v22;
      }
      v14 = v25 + 1;
      HIDWORD(v39) = v14;
      v16 = *a3;
    }
    if (*(_BYTE *)(a2 + 25))
    {
LABEL_28:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_QWORD *)a1 = v38;
      v29 = v39;
      v38 = 0;
      v39 = 0;
      *(_DWORD *)(a1 + 8) = v29;
      *(_DWORD *)(a1 + 12) = v14;
    }
    result = v37;
    v37 = 0;
    if (result)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(result, v9);
      result = (WebCore::MutableCSSSelector *)WTF::fastFree(v30, v31);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  v32 = v38;
  if (!HIDWORD(v39))
  {
    if (!v38)
      return result;
LABEL_41:
    v38 = 0;
    LODWORD(v39) = 0;
    return (WebCore::MutableCSSSelector *)WTF::fastFree(v32, v9);
  }
  v33 = 8 * HIDWORD(v39);
  do
  {
    result = *(WebCore::MutableCSSSelector **)v32;
    *(_QWORD *)v32 = 0;
    if (result)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(result, v9);
      result = (WebCore::MutableCSSSelector *)WTF::fastFree(v34, v35);
    }
    v32 = (WTF *)((char *)v32 + 8);
    v33 -= 8;
  }
  while (v33);
  v32 = v38;
  if (v38)
    goto LABEL_41;
  return result;
}

WebCore::MutableCSSSelector *WebCore::CSSSelectorParser::consumeSelectorList<WebCore::CSSSelectorParser::consumeRelativeSelectorList(WebCore::CSSParserTokenRange &)::$_0>(uint64_t a1, uint64_t a2, __int128 **a3, WebCore::CSSParserTokenRange **a4)
{
  WebCore::MutableCSSSelector *result;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  __int128 *i;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  unsigned int v20;
  WebCore::MutableCSSSelector *v21;
  WebCore::MutableCSSSelector *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  WTF *v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  WebCore::MutableCSSSelector *v36;
  WebCore::MutableCSSSelector *v37;
  WTF *v38;
  uint64_t v39;

  v38 = 0;
  v39 = 0;
  result = (WebCore::MutableCSSSelector *)WebCore::CSSSelectorParser::consumeRelativeScopeSelector((WebCore::CSSSelectorParser *)&v37, *a4, a3);
  if (v37)
  {
    v10 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, 1uLL, (unint64_t)&v37);
    v11 = HIDWORD(v39);
    v12 = v38;
    v13 = *v10;
    *v10 = 0;
    *((_QWORD *)v12 + v11) = v13;
    v14 = v11 + 1;
    HIDWORD(v39) = v11 + 1;
    v16 = *a3;
    for (i = a3[1]; *a3 != i; i = a3[1])
    {
      if (v16 >= i)
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v16 & 0x3F) != 0x15)
        break;
      v17 = *a3;
      if (*a3 == i)
      {
        v19 = 1;
        v18 = i;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v18 = *a3;
        }
      }
      else
      {
        v18 = (__int128 *)((char *)v17 + 24);
        *a3 = (__int128 *)((char *)v17 + 24);
      }
      while (1)
      {
        if (v18 < i || (v19 & 1) != 0)
        {
          if (v18 >= i)
            v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v20 = *(_DWORD *)v18;
        }
        else
        {
          v20 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
          v19 = 1;
        }
        if ((v20 & 0x3F) != 0x10)
          break;
        v18 = (__int128 *)((char *)*a3 + 24);
        *a3 = v18;
      }
      WebCore::CSSSelectorParser::consumeRelativeScopeSelector((WebCore::CSSSelectorParser *)&v36, *a4, a3);
      v22 = v36;
      v21 = v37;
      v37 = v36;
      if (v21)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v21, v9);
        WTF::fastFree(v23, v24);
        v22 = v37;
      }
      if (!v22)
        goto LABEL_28;
      LODWORD(v25) = HIDWORD(v39);
      if (HIDWORD(v39) == (_DWORD)v39)
      {
        v26 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, HIDWORD(v39) + 1, (unint64_t)&v37);
        v25 = HIDWORD(v39);
        v27 = v38;
        v28 = *v26;
        *v26 = 0;
        *((_QWORD *)v27 + v25) = v28;
      }
      else
      {
        v37 = 0;
        *((_QWORD *)v38 + HIDWORD(v39)) = v22;
      }
      v14 = v25 + 1;
      HIDWORD(v39) = v14;
      v16 = *a3;
    }
    if (*(_BYTE *)(a2 + 25))
    {
LABEL_28:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_QWORD *)a1 = v38;
      v29 = v39;
      v38 = 0;
      v39 = 0;
      *(_DWORD *)(a1 + 8) = v29;
      *(_DWORD *)(a1 + 12) = v14;
    }
    result = v37;
    v37 = 0;
    if (result)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(result, v9);
      result = (WebCore::MutableCSSSelector *)WTF::fastFree(v30, v31);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  v32 = v38;
  if (!HIDWORD(v39))
  {
    if (!v38)
      return result;
LABEL_41:
    v38 = 0;
    LODWORD(v39) = 0;
    return (WebCore::MutableCSSSelector *)WTF::fastFree(v32, v9);
  }
  v33 = 8 * HIDWORD(v39);
  do
  {
    result = *(WebCore::MutableCSSSelector **)v32;
    *(_QWORD *)v32 = 0;
    if (result)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(result, v9);
      result = (WebCore::MutableCSSSelector *)WTF::fastFree(v34, v35);
    }
    v32 = (WTF *)((char *)v32 + 8);
    v33 -= 8;
  }
  while (v33);
  v32 = v38;
  if (v38)
    goto LABEL_41;
  return result;
}

WebCore::MutableCSSSelector *WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>(WebCore::MutableCSSSelector *result, uint64_t a2, __int128 **a3, __int128 **a4)
{
  WebCore::MutableCSSSelector *v4;
  void *v7;
  __int128 *i;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  char v12;
  unsigned int v13;
  int v14;
  __int128 **v15[4];
  WTF *v16;
  uint64_t v17;

  v4 = result;
  if (*(_BYTE *)(a2 + 25))
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v15[0] = a3;
    v15[1] = a4;
    v15[2] = (__int128 **)a2;
    v15[3] = (__int128 **)&v16;
    result = WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>(WebCore::CSSParserTokenRange &,WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0 &&)::{lambda(void)#1}::operator()(v15);
    v9 = *a3;
    for (i = a3[1]; *a3 != i; i = a3[1])
    {
      if (v9 >= i)
      {
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v9 & 0x3F) != 0x15)
        break;
      v10 = *a3;
      if (*a3 == i)
      {
        v12 = 1;
        v11 = i;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v11 = *a3;
        }
      }
      else
      {
        v11 = (__int128 *)((char *)v10 + 24);
        *a3 = (__int128 *)((char *)v10 + 24);
      }
      while (1)
      {
        if (v11 < i || (v12 & 1) != 0)
        {
          if (v11 >= i)
            v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v13 = *(_DWORD *)v11;
        }
        else
        {
          v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
          v12 = 1;
        }
        if ((v13 & 0x3F) != 0x10)
          break;
        v11 = (__int128 *)((char *)*a3 + 24);
        *a3 = v11;
      }
      result = WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>(WebCore::CSSParserTokenRange &,WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0 &&)::{lambda(void)#1}::operator()(v15);
      v9 = *a3;
    }
    v14 = HIDWORD(v17);
    if (HIDWORD(v17))
    {
      *(_QWORD *)v4 = v16;
      *((_DWORD *)v4 + 2) = v17;
      *((_DWORD *)v4 + 3) = v14;
    }
    else
    {
      if (*(_BYTE *)(a2 + 30))
        *(_BYTE *)(a2 + 25) = 1;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      result = v16;
      if (v16)
      {
        v16 = 0;
        LODWORD(v17) = 0;
        return (WebCore::MutableCSSSelector *)WTF::fastFree(result, v7);
      }
    }
  }
  return result;
}

WebCore::MutableCSSSelector *WebCore::CSSSelectorParser::consumeCompoundSelectorList(WebCore::CSSSelectorParser *this, WebCore::CSSParserTokenRange *a2, __int128 **a3)
{
  WebCore::MutableCSSSelector *result;
  void *v7;
  unint64_t v8;
  __int128 *v9;
  char v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  __int128 *i;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  char v21;
  unsigned int v22;
  WTF *v23;
  void *v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  WebCore::MutableCSSSelector *v28;
  uint64_t v29;
  uint64_t *v30;
  WTF *v31;
  uint64_t v32;
  int v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  WebCore::MutableCSSSelector *v40;
  WebCore::MutableCSSSelector *v41;
  WTF *v42;
  uint64_t v43;

  v42 = 0;
  v43 = 0;
  result = (WebCore::MutableCSSSelector *)WebCore::CSSSelectorParser::consumeCompoundSelector((WebCore::CSSSelectorParser *)&v41, a2);
  v9 = *a3;
  v8 = (unint64_t)a3[1];
  while (1)
  {
    if ((unint64_t)v9 < v8 || (v10 & 1) != 0)
    {
      if ((unint64_t)v9 >= v8)
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v11 = *(_DWORD *)v9;
    }
    else
    {
      v11 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
      v10 = 1;
    }
    if ((v11 & 0x3F) != 0x10)
      break;
    v9 = (__int128 *)((char *)*a3 + 24);
    *a3 = v9;
  }
  if (v41)
  {
    v12 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, 1uLL, (unint64_t)&v41);
    v13 = HIDWORD(v43);
    v14 = v42;
    v15 = *v12;
    *v12 = 0;
    *((_QWORD *)v14 + v13) = v15;
    v16 = v13 + 1;
    HIDWORD(v43) = v13 + 1;
    v18 = *a3;
    for (i = a3[1]; *a3 != i; v18 = *a3)
    {
      if (v18 >= i)
      {
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v18 & 0x3F) != 0x15)
        break;
      v19 = *a3;
      if (*a3 == i)
      {
        v21 = 1;
        v20 = i;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v20 = *a3;
        }
      }
      else
      {
        v20 = (__int128 *)((char *)v19 + 24);
        *a3 = (__int128 *)((char *)v19 + 24);
      }
      while (1)
      {
        if (v20 < i || (v21 & 1) != 0)
        {
          if (v20 >= i)
            v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v22 = *(_DWORD *)v20;
        }
        else
        {
          v22 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v22;
          v21 = 1;
        }
        if ((v22 & 0x3F) != 0x10)
          break;
        v20 = (__int128 *)((char *)*a3 + 24);
        *a3 = v20;
      }
      WebCore::CSSSelectorParser::consumeCompoundSelector((WebCore::CSSSelectorParser *)&v40, a2);
      result = v41;
      v41 = v40;
      if (result)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(result, v7);
        result = (WebCore::MutableCSSSelector *)WTF::fastFree(v23, v24);
      }
      v25 = *a3;
      i = a3[1];
      while (1)
      {
        if (v25 < i || (v26 & 1) != 0)
        {
          if (v25 >= i)
            v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v27 = *(_DWORD *)v25;
        }
        else
        {
          v27 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
          v26 = 1;
        }
        if ((v27 & 0x3F) != 0x10)
          break;
        v25 = (__int128 *)((char *)*a3 + 24);
        *a3 = v25;
      }
      v28 = v41;
      if (!v41)
        goto LABEL_45;
      LODWORD(v29) = HIDWORD(v43);
      if (HIDWORD(v43) == (_DWORD)v43)
      {
        v30 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, HIDWORD(v43) + 1, (unint64_t)&v41);
        v29 = HIDWORD(v43);
        v31 = v42;
        v32 = *v30;
        *v30 = 0;
        *((_QWORD *)v31 + v29) = v32;
        i = a3[1];
      }
      else
      {
        v41 = 0;
        *((_QWORD *)v42 + HIDWORD(v43)) = v28;
      }
      v16 = v29 + 1;
      HIDWORD(v43) = v16;
    }
    result = v41;
    *(_QWORD *)this = v42;
    v33 = v43;
    v42 = 0;
    v43 = 0;
    *((_DWORD *)this + 2) = v33;
    *((_DWORD *)this + 3) = v16;
    v41 = 0;
    if (result)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(result, v7);
      result = (WebCore::MutableCSSSelector *)WTF::fastFree(v34, v35);
    }
  }
  else
  {
LABEL_45:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  v36 = v42;
  if (!HIDWORD(v43))
  {
    if (!v42)
      return result;
LABEL_56:
    v42 = 0;
    LODWORD(v43) = 0;
    return (WebCore::MutableCSSSelector *)WTF::fastFree(v36, v7);
  }
  v37 = 8 * HIDWORD(v43);
  do
  {
    result = *(WebCore::MutableCSSSelector **)v36;
    *(_QWORD *)v36 = 0;
    if (result)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(result, v7);
      result = (WebCore::MutableCSSSelector *)WTF::fastFree(v38, v39);
    }
    v36 = (WTF *)((char *)v36 + 8);
    v37 -= 8;
  }
  while (v37);
  v36 = v42;
  if (v42)
    goto LABEL_56;
  return result;
}

WebCore::MutableCSSSelector *WebCore::MutableCSSSelector::setTagHistory(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::MutableCSSSelector *result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(WebCore::MutableCSSSelector **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (result)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(result, a2);
    return (WebCore::MutableCSSSelector *)WTF::fastFree(v5, v6);
  }
  return result;
}

WebCore::MutableCSSSelector **WebCore::CSSSelectorParser::consumeRelativeScopeSelector(WebCore::CSSSelectorParser *this, WebCore::CSSParserTokenRange *a2, __int128 **a3)
{
  unsigned int v5;
  int v6;
  void *v7;
  WebCore::MutableCSSSelector *v8;
  WebCore::MutableCSSSelector *v9;
  _DWORD **v10;
  WebCore::MutableCSSSelector *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  WebCore::MutableCSSSelector *v16;
  WebCore::MutableCSSSelector *v17;
  WebCore::MutableCSSSelector *v18;

  v5 = WebCore::CSSSelectorParser::consumeCombinator(a3, a2);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v5;
  WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v18, a2);
  v8 = v18;
  if (v18)
  {
    v9 = v18;
    do
    {
      v10 = (_DWORD **)v9;
      v9 = (WebCore::MutableCSSSelector *)*((_QWORD *)v9 + 1);
    }
    while (v9);
    v11 = (WebCore::MutableCSSSelector *)WTF::fastMalloc((WTF *)0x10);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = 786433;
    v12[1] = 0;
    *(_QWORD *)v11 = v12;
    *((_QWORD *)v11 + 1) = 0;
    *(_DWORD *)v12 = *(_DWORD *)v12 & 0xFFFFFE0F | 0xF0;
    **v10 = **v10 & 0xFFFFFFF0 | v6;
    v16 = v11;
    v17 = 0;
    WebCore::MutableCSSSelector::setTagHistory((uint64_t)v10, (uint64_t *)&v16);
    std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v16, v13);
    v18 = 0;
    *(_QWORD *)this = v8;
    std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v17, v14);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v18, v7);
}

WebCore::MutableCSSSelector *WebCore::CSSSelectorParser::splitCompoundAtImplicitShadowCrossingCombinator(WebCore::MutableCSSSelector *result, uint64_t *a2, _BYTE *a3)
{
  WebCore::MutableCSSSelector *v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD **v7;
  _DWORD **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WebCore::MutableCSSSelector *v13;
  WebCore::MutableCSSSelector *v14;
  WTF *v15;
  void *v16;
  BOOL v17;
  int v18;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  WTF *v24;
  void *v25;
  WebCore::MutableCSSSelector *v26;
  _DWORD *v27;

  v4 = result;
  v5 = *a2;
  v6 = *(_DWORD ***)(*a2 + 8);
  if (v6)
  {
    v7 = (_DWORD **)*a2;
    while (1)
    {
      v8 = v6;
      v9 = **v6;
      if ((v9 & 0x1F0) == 0x90)
      {
        v10 = (v9 >> 9);
        if (v10 - 26 < 3)
          break;
        v17 = v10 > 0x13;
        v18 = (1 << v10) & 0xA0800;
        if (!v17 && v18 != 0)
          break;
      }
      v6 = (_DWORD **)v8[1];
      v7 = v8;
      if (!v6)
        goto LABEL_2;
    }
    v11 = v9 & 0x1FFF0;
    *(_QWORD *)result = 0;
    if ((v9 & 0x1FFF0) == 0x2290 || *a3 == 4)
    {
      **v7 &= 0xFFFFFFF0;
      v13 = (WebCore::MutableCSSSelector *)v7[1];
      v7[1] = 0;
      v26 = v13;
      WebCore::CSSSelectorParser::splitCompoundAtImplicitShadowCrossingCombinator(&v27, &v26);
      v14 = v26;
      v20 = v27;
      *(_QWORD *)v4 = v27;
      v26 = 0;
      if (v14)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v14, a2);
        WTF::fastFree(v15, v16);
      }
    }
    else
    {
      **v7 &= 0xFFFFFFF0;
      v20 = v7[1];
      v7[1] = 0;
      *(_QWORD *)result = v20;
    }
    v21 = *a2;
    *a2 = 0;
    do
    {
      v22 = v20;
      v20 = (_DWORD *)*((_QWORD *)v20 + 1);
    }
    while (v20);
    if (v11 == 8848)
      v23 = 6;
    else
      v23 = 5;
    if (v11 == 9872)
      v23 = 7;
    **(_DWORD **)v22 = **(_DWORD **)v22 & 0xFFFFFFF0 | v23;
    result = (WebCore::MutableCSSSelector *)*((_QWORD *)v22 + 1);
    *((_QWORD *)v22 + 1) = v21;
    if (result)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(result, a2);
      return (WebCore::MutableCSSSelector *)WTF::fastFree(v24, v25);
    }
  }
  else
  {
LABEL_2:
    *a2 = 0;
    *(_QWORD *)result = v5;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSSelectorParser::consumeId(WTF::StringImpl *this, WebCore::CSSParserTokenRange *a2, __int128 **a3)
{
  WTF::StringImpl *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v5 = this;
  v6 = *a3;
  if (*a3 >= a3[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (*((_DWORD *)v6 + 4))
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    v7 = WTF::fastMalloc((WTF *)0x10);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = 786433;
    v8[1] = 0;
    *(_QWORD *)v7 = v8;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)v5 = v7;
    *(_DWORD *)v8 = *(_DWORD *)v8 & 0xFFFFFE0F | 0x20;
    v9 = *a3;
    if (*a3 == a3[1])
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    else
    {
      *a3 = (__int128 *)((char *)v9 + 24);
    }
    if ((*(_DWORD *)v9 & 0x400000) != 0)
      WTF::AtomStringImpl::add();
    else
      WTF::AtomStringImpl::add();
    WebCore::CSSSelector::setValue(*(WTF::StringImpl ***)v7, (const WTF::AtomString *)&v11, *(unsigned __int8 *)a2 == 1);
    this = v11;
    v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v10);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::CSSSelectorParser::consumeClass(WTF::StringImpl *this, WebCore::CSSParserTokenRange *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v5 = this;
  v6 = *(__int128 **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v7)
  {
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v6 = *(__int128 **)a3;
    }
  }
  else
  {
    v6 = (__int128 *)((char *)v6 + 24);
    *(_QWORD *)a3 = v6;
  }
  if ((unint64_t)v6 >= v7)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x10);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = 786433;
    v9[1] = 0;
    *(_QWORD *)v8 = v9;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)v5 = v8;
    *(_DWORD *)v9 = *(_DWORD *)v9 & 0xFFFFFE0F | 0x30;
    v10 = *(__int128 **)a3;
    if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    else
    {
      *(_QWORD *)a3 = (char *)v10 + 24;
    }
    if ((*(_DWORD *)v10 & 0x400000) != 0)
      WTF::AtomStringImpl::add();
    else
      WTF::AtomStringImpl::add();
    WebCore::CSSSelector::setValue(*(WTF::StringImpl ***)v8, (const WTF::AtomString *)&v12, *(unsigned __int8 *)a2 == 1);
    this = v12;
    v12 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

_QWORD *WebCore::CSSSelectorParser::consumeNesting(WebCore::CSSSelectorParser *this, WebCore::CSSParserTokenRange *a2)
{
  _QWORD *v3;
  _QWORD *result;

  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
  {
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
    }
  }
  else
  {
    *(_QWORD *)a2 += 24;
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = 786433;
  result[1] = 0;
  *v3 = result;
  v3[1] = 0;
  *(_QWORD *)this = v3;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFE0F | 0xE0;
  return result;
}

WTF::StringImpl *WebCore::CSSSelectorParser::consumeAttribute(WebCore::CSSSelectorParser *this, WebCore::CSSParserTokenRange *a2, __int128 **a3, WTF::AtomString *a4)
{
  __int128 *v6;
  __int128 *v7;
  char v8;
  char v9;
  __int128 *v10;
  int v11;
  __int128 *v12;
  char v13;
  __int128 *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  __int128 *v19;
  unsigned int v20;
  void *v21;
  __int128 *v22;
  __int128 *v23;
  char v24;
  unsigned int v25;
  __int128 *v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unsigned int v38;
  __int128 *v39;
  __int128 *v40;
  unsigned int v41;
  int v42;
  __int128 *v43;
  unsigned int v44;
  __int128 *v45;
  unsigned int v46;
  int v47;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *result;
  WTF *v55;
  void *v56;
  __int128 *v57;
  char v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  WebCore::QualifiedName::QualifiedNameImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  __int128 *v66;
  __int128 *v67;
  WTF::StringImpl *v68;

  v7 = *a3;
  v6 = a3[1];
  if (*a3 >= v6)
    v9 = 1;
  else
  if (*a3 >= v6)
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v10 = *a3;
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v8 = 1;
    v7 = *a3;
    v9 = 1;
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v11 = 0;
  v12 = (__int128 *)((char *)v10 + 24);
  v13 = v9;
  while (1)
  {
    if (v7 == v6)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v13 & 1) != 0)
      {
        v14 = v6;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v14 = *a3;
        v8 = 1;
        v9 = 1;
      }
      v13 = 1;
    }
    else
    {
      v14 = (__int128 *)((char *)v7 + 24);
      *a3 = (__int128 *)((char *)v7 + 24);
    }
    v15 = *(_DWORD *)v7 >> 6;
    v16 = v15 == 2 ? -1 : 0;
    v17 = v15 == 1 ? 1 : v16;
    v11 += v17;
    if (!v11)
      break;
    v7 = v14;
    if (v14 >= v6)
      goto LABEL_23;
  }
  v14 = (__int128 *)((char *)v14 - 24);
LABEL_23:
  if ((v9 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v8 = 1;
  }
  if (v12 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v12 = v6;
  if (v14 != &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v6 = v14;
  v66 = v12;
  v67 = v6;
  v18 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v12 < v6 || (v8 & 1) != 0)
    {
      v19 = v12 >= v6 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v12;
      v20 = *(_DWORD *)v19;
    }
    else
    {
      v20 = v18 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
      v8 = 1;
      v18 = v20;
    }
    if ((v20 & 0x3F) != 0x10)
      break;
    v12 = (__int128 *)((char *)v12 + 24);
    v66 = v12;
  }
  v64 = 0;
  v65 = 0;
  if ((WebCore::CSSSelectorParser::consumeName(&v66, &v64, &v65, a4) & 1) == 0)
    goto LABEL_119;
  v23 = v66;
  v22 = v67;
  v25 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v23 < v67 || (v24 & 1) != 0)
    {
      v26 = v23 >= v67 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v23;
      v27 = *(_DWORD *)v26;
    }
    else
    {
      v27 = v25 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
      v24 = 1;
      v25 = v27;
    }
    if ((v27 & 0x3F) != 0x10)
      break;
    v23 = (__int128 *)((char *)v23 + 24);
    v66 = v23;
  }
  v28 = v65;
  if (v65)
  {
    if (*((_DWORD *)v65 + 1))
    {
      if (v65 == (WTF::StringImpl *)WebCore::starAtomData)
      {
        *(_DWORD *)v65 += 2;
        v63 = v28;
        goto LABEL_52;
      }
      v61 = *((_QWORD *)a2 + 2);
      v30 = (WTF::StringImpl **)(v61
                               ? WebCore::StyleSheetContents::namespaceURIFromPrefix(v61, (uint64_t)&v65)
                               : MEMORY[0x1E0CBF2F8]);
    }
    else
    {
      v30 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
    }
  }
  else
  {
    v29 = *((_QWORD *)a2 + 2);
    v30 = (WTF::StringImpl **)&WebCore::starAtomData;
    if (v29)
    {
      v31 = (WTF::StringImpl **)(v29 + 112);
      if (!*((_BYTE *)a2 + 29))
        v30 = v31;
    }
  }
  v28 = *v30;
  if (!*v30)
  {
LABEL_119:
    *(_QWORD *)this = 0;
    goto LABEL_94;
  }
  v32 = v65;
  *(_DWORD *)v28 += 2;
  v63 = v28;
  if (v32)
  {
LABEL_52:
    v33 = &v65;
    v34 = &v63;
    goto LABEL_53;
  }
  v33 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v34 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_53:
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v62, v33, &v64, v34);
  v35 = WTF::fastMalloc((WTF *)0x10);
  v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v36 = 786433;
  v36[1] = 0;
  *(_QWORD *)v35 = v36;
  *(_QWORD *)(v35 + 8) = 0;
  if (v23 == v22)
  {
    WebCore::CSSSelector::setAttribute((uint64_t)v36, (_DWORD **)&v62, 0);
    **(_DWORD **)v35 = **(_DWORD **)v35 & 0xFFFFFE0F | 0x50;
    goto LABEL_88;
  }
  v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v39 = v23;
  do
  {
    v39 = (__int128 *)((char *)v39 + 24);
    if (v39 < v22 || (v37 & 1) != 0)
    {
      if (v39 >= v22)
        v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v40 = v39;
      v41 = *(_DWORD *)v40;
    }
    else
    {
      v41 = v38 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v41;
      v37 = 1;
      v38 = v41;
    }
  }
  while ((v41 & 0x3F) == 0x10);
  v66 = v39;
  if ((*(_DWORD *)v23 & 0x3F) == 6)
  {
    if (*((_WORD *)v23 + 8) != 61)
LABEL_118:
      *((_BYTE *)a2 + 25) = 1;
    v42 = 64;
  }
  else
  {
    v42 = 96;
    switch(*(_DWORD *)v23 & 0x3F)
    {
      case 0xA:
        break;
      case 0xB:
        v42 = 112;
        break;
      case 0xC:
        v42 = 176;
        break;
      case 0xD:
        v42 = 192;
        break;
      case 0xE:
        v42 = 160;
        break;
      default:
        goto LABEL_118;
    }
  }
  **(_DWORD **)v35 = **(_DWORD **)v35 & 0xFFFFFE0F | v42;
  if (v39 == v22)
  {
    v44 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v37 & 1) == 0)
    {
      v44 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v44;
    }
    v37 = 1;
    v43 = v22;
    v39 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v43 = (__int128 *)((char *)v39 + 24);
    v66 = (__int128 *)((char *)v39 + 24);
    v44 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  while (1)
  {
    if (v43 < v22 || (v37 & 1) != 0)
    {
      v45 = v43 >= v22 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v43;
      v46 = *(_DWORD *)v45;
    }
    else
    {
      v46 = v44 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v46;
      v37 = 1;
      v44 = v46;
    }
    if ((v46 & 0x3F) != 0x10)
      break;
    v43 = (__int128 *)((char *)v43 + 24);
    v66 = v43;
  }
  v47 = *(_DWORD *)v39 & 0x3F;
  if (v47 != 28 && v47 != 0)
    goto LABEL_117;
  if ((*(_DWORD *)v39 & 0x400000) != 0)
    WTF::AtomStringImpl::add();
  else
    WTF::AtomStringImpl::add();
  WebCore::CSSSelector::setValue(*(WTF::StringImpl ***)v35, (const WTF::AtomString *)&v68, 0);
  v50 = v68;
  v68 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (v43 >= v22)
  {
    v43 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v43 & 0x3F) != 0)
    goto LABEL_86;
  v57 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v66);
  v58 = WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v57 + 1), *((unsigned int *)v57 + 1) | ((unint64_t)((*(_DWORD *)v57 >> 22) & 1) << 32), "i", 2uLL);
  v51 = 1;
  if ((v58 & 1) == 0)
  {
    *((_BYTE *)a2 + 25) = 1;
LABEL_86:
    v51 = 0;
  }
  WebCore::CSSSelector::setAttribute(*(_QWORD *)v35, (_DWORD **)&v62, v51);
  if (v66 != v67)
  {
LABEL_117:
    *(_QWORD *)this = 0;
    WebCore::MutableCSSSelector::~MutableCSSSelector((WebCore::MutableCSSSelector *)v35, v21);
    WTF::fastFree(v59, v60);
    goto LABEL_89;
  }
LABEL_88:
  *(_QWORD *)this = v35;
LABEL_89:
  v52 = (WTF::StringImpl **)v62;
  v62 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v52);
      WTF::fastFree(v55, v56);
    }
    else
    {
      --*(_DWORD *)v52;
    }
  }
  v63 = 0;
  if (*(_DWORD *)v28 == 2)
    WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v21);
  else
    *(_DWORD *)v28 -= 2;
LABEL_94:
  v53 = v64;
  v64 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)v53 -= 2;
  }
  result = v65;
  v65 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSSelectorParser::consumePseudo(uint64_t this, WebCore::CSSParserTokenRange *a2, __int128 **a3)
{
  uint64_t **v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  char v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  __int128 *v19;
  __int128 *v20;
  char v21;
  char v22;
  __int128 *v23;
  int v24;
  __int128 *v25;
  char v26;
  __int128 *v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  __int128 *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  char v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF *v45;
  WTF::StringImpl *v46;
  uint64_t *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  __int128 *v57;
  char v58;
  unsigned int v59;
  __int128 *v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  __int128 *v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  WTF::StringImpl **v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  void *v89;
  WTF *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  void *v93;
  __int128 *v94;
  __int128 *v95;
  char v96;
  unsigned int v97;
  __int128 *v98;
  unsigned int v99;
  uint64_t *v100;
  WTF::StringImpl *v101;
  void *v102;
  unsigned int *v103;
  unsigned int *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF **v107;
  WTF::StringImpl *v108;
  __int128 *v109;
  unsigned int v110;
  uint64_t v111;
  char v112;
  void *v113;
  uint64_t *v114;
  void *v115;
  uint64_t *v116;
  WTF::StringImpl *v117;
  WTF *v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl **v123;
  WTF::StringImpl *v124;
  uint64_t *v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF *v129;
  void *v130;
  __int128 *v131;
  __int128 *v132;
  char v133;
  unsigned int v134;
  __int128 *v135;
  unsigned int v136;
  WTF::StringImpl *v137;
  char v138;
  unsigned int v139;
  unint64_t v140;
  __int128 *v141;
  unsigned int v142;
  uint64_t v143;
  __int128 *v144;
  WTF::StringImpl *v145;
  unsigned int v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  char v150;
  unsigned int v151;
  __int128 *v152;
  unsigned int v153;
  WTF::StringImpl **v154;
  __int128 *v155;
  __int128 *v156;
  __int128 *v157;
  char v158;
  unsigned int v159;
  __int128 *v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  WTF::StringImpl *v164;
  uint64_t *v165;
  __int128 *v166;
  char v167;
  unsigned int v168;
  __int128 *v169;
  unsigned int v170;
  uint64_t v171;
  int v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  WTF::StringImpl **v178;
  int v179;
  WTF::StringImpl *v180;
  char *v181;
  WTF::StringImpl **v182;
  void *v183;
  int v184;
  int v185;
  __int128 *v186;
  unsigned int v187;
  __int128 *v188;
  char v189;
  unsigned int v190;
  __int128 *v191;
  unsigned int v192;
  int v193;
  char *v194;
  unsigned int *v195;
  WTF *v196;
  WTF *v197;
  WTF *v198;
  WTF::StringImpl **v199;
  WTF::StringImpl **v200;
  WTF *v201;
  WTF::StringImpl **v202;
  WTF *v203;
  __int128 *v204;
  __int128 *v205;
  WTF::StringImpl *v206;
  unint64_t v207;
  WTF::StringImpl *v208;
  unint64_t v209;
  WTF::StringImpl *v210;
  unint64_t v211;
  int v212;
  char v213;
  uint64_t v214;

  v5 = (uint64_t **)this;
  v214 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v7 = *a3;
    }
  }
  else
  {
    v7 = (__int128 *)((char *)v7 + 24);
    *a3 = v7;
  }
  if (v7 >= v6)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v7 = *a3;
    }
  }
  else
  {
    v8 = v7;
  }
  v9 = *(_DWORD *)v8 & 0x3F;
  if (v9 == 19)
  {
    if (v7 == v6)
    {
      {
        if ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3E) != 0)
          goto LABEL_412;
        v10 = (unint64_t)((WebCore::CSSParserTokenRange::eofToken(void)::eofToken >> 22) & 1) << 32;
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        goto LABEL_408;
      }
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v7 = *a3;
    }
    else
    {
      v7 = (__int128 *)((char *)v7 + 24);
      *a3 = v7;
    }
  }
  if (v7 >= v6)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3E) != 0)
    goto LABEL_412;
  v10 = (unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32;
  if (v9 != 19)
  {
    this = WebCore::MutableCSSSelector::parsePseudoClassSelector(*((WebCore::SelectorPseudoClassAndCompatibilityElementMapHash **)v7 + 1), (const char *)(v10 | *((unsigned int *)v7 + 1)), a2, (WTF::StringImpl ****)&v210);
    v12 = (uint64_t *)v210;
    goto LABEL_10;
  }
LABEL_408:
  this = (uint64_t)WebCore::MutableCSSSelector::parsePseudoElementSelector(*((WTF::StringImpl **)v7 + 1), (WTF::StringImpl *)(v10 | *((unsigned int *)v7 + 1)), (unsigned __int8 *)a2, (uint64_t *)&v210);
  v12 = (uint64_t *)v210;
  if ((*(_BYTE *)v7 & 0x3F) != 0)
  {
LABEL_10:
    if (v12)
      goto LABEL_11;
LABEL_412:
    *v5 = 0;
    return this;
  }
  if (!v210)
    goto LABEL_412;
  v184 = **(_DWORD **)v210;
  if ((v184 & 0x1FFF0) == 0x1690)
    **(_DWORD **)v210 = v184 & 0xFFFE01FF | 0x3400;
LABEL_11:
  if ((*(_DWORD *)*v12 & 0x1F0) == 0x90)
  {
    if (*((_BYTE *)a2 + 26))
    {
      *v5 = 0;
      goto LABEL_95;
    }
    v13 = 0;
  }
  else
  {
    v13 = *((_BYTE *)a2 + 26);
  }
  *((_BYTE *)a2 + 26) = 1;
  if ((*(_BYTE *)v7 & 0x3F) == 0)
  {
    if (*a3 == a3[1])
    {
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      }
    }
    else
    {
      *a3 = (__int128 *)((char *)*a3 + 24);
    }
    v14 = *(_DWORD *)*v12;
    v15 = (v14 >> 4) & 0x1F;
    v16 = (v14 >> 9);
    if (v15 == 8)
    {
      if ((v16 - 21 > 0x3D || ((1 << (v16 - 21)) & 0x20080003E0602001) == 0) && v16 != 6)
        goto LABEL_24;
    }
    else
    {
      v31 = v15 != 9 || v16 > 0x19;
      v32 = (1 << v16) & 0x3CA8000;
      if (v31 || v32 == 0)
        goto LABEL_24;
    }
    goto LABEL_56;
  }
  v20 = *a3;
  v19 = a3[1];
  if (*a3 >= v19)
    v22 = 1;
  else
  if (*a3 >= v19)
    v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v23 = *a3;
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v21 = 1;
    v20 = *a3;
    v22 = 1;
    v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v24 = 0;
  v25 = (__int128 *)((char *)v23 + 24);
  v26 = v22;
  while (1)
  {
    if (v20 == v19)
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v26 & 1) != 0)
      {
        v27 = v19;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v27 = *a3;
        v21 = 1;
        v22 = 1;
      }
      v26 = 1;
    }
    else
    {
      v27 = (__int128 *)((char *)v20 + 24);
      *a3 = (__int128 *)((char *)v20 + 24);
    }
    v28 = *(_DWORD *)v20 >> 6;
    v29 = v28 == 2 ? -1 : 0;
    v30 = v28 == 1 ? 1 : v29;
    v24 += v30;
    if (!v24)
      break;
    v20 = v27;
    if (v27 >= v19)
      goto LABEL_62;
  }
  v27 = (__int128 *)((char *)v27 - 24);
LABEL_62:
  if ((v22 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v21 = 1;
  }
  if (v25 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v34 = v19;
  else
    v34 = v25;
  if (v27 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v35 = v19;
  else
    v35 = v27;
  v204 = v34;
  v205 = v35;
  LODWORD(v36) = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v34 < v35 || (v21 & 1) != 0)
    {
      if (v34 >= v35)
        v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v37 = v34;
      v38 = *(_DWORD *)v37;
      goto LABEL_77;
    }
LABEL_438:
    v38 = v36 & 0xFF000000 | 0x1E;
    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
    v21 = 1;
    LODWORD(v36) = v38;
LABEL_77:
    if ((v38 & 0x3F) != 0x10)
      break;
    v34 = (__int128 *)((char *)v34 + 24);
    v204 = v34;
  }
  v39 = *(_DWORD *)*v12;
  v40 = (v39 >> 4) & 0x1F;
  if (v40 != 8)
  {
    if (v40 != 9)
      goto LABEL_56;
    if ((v39 >> 9) - 22 >= 4)
    {
      switch((v39 >> 9))
      {
        case 0xBu:
          WebCore::CSSSelectorParser::consumeCompoundSelectorList((WebCore::CSSSelectorParser *)&v210, a2, &v204);
          if (HIDWORD(v211) && v204 == v205)
          {
            v178 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)8);
            v199 = WebCore::CSSSelectorList::CSSSelectorList(v178, (uint64_t)&v210);
            WebCore::MutableCSSSelector::setSelectorList(v12, (uint64_t *)&v199);
            std::unique_ptr<WebCore::CSSSelectorList>::~unique_ptr[abi:sn180100]((WTF **)&v199);
            v116 = v12;
            v12 = 0;
          }
          else
          {
            v116 = 0;
          }
          *v5 = v116;
          goto LABEL_212;
        case 0xFu:
          v141 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v204);
          v142 = *(_DWORD *)v141;
          if ((*(_DWORD *)v141 & 0x3F) != 0 || v204 != v205)
            goto LABEL_56;
          v143 = *((unsigned int *)v141 + 1);
          v208 = (WTF::StringImpl *)*((_QWORD *)v141 + 1);
          v209 = v143 | ((unint64_t)((v142 >> 22) & 1) << 32);
          WTF::StringView::toAtomString((WTF::StringView *)&v208, &v210);
          LOBYTE(v211) = 0;
          WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector(&v198, (uint64_t)&v210, 1);
          WebCore::MutableCSSSelector::setArgumentList(v12, &v198);
          v107 = &v198;
          goto LABEL_194;
        case 0x11u:
          v210 = 0;
          v211 = 0;
          break;
        case 0x13u:
          WebCore::CSSSelectorParser::consumeCompoundSelector((WebCore::CSSSelectorParser *)&v208, a2);
          v94 = v204;
          v95 = v205;
          v151 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          while (1)
          {
            if (v94 < v205 || (v150 & 1) != 0)
            {
              v152 = v94 >= v205 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v94;
              v153 = *(_DWORD *)v152;
            }
            else
            {
              v153 = v151 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v153;
              v150 = 1;
              v151 = v153;
            }
            if ((v153 & 0x3F) != 0x10)
              break;
            v94 = (__int128 *)((char *)v94 + 24);
            v204 = v94;
          }
LABEL_174:
          v100 = 0;
          v101 = v208;
          if (v208 && v94 == v95)
          {
            v210 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
            v211 = 0x100000001;
            v208 = 0;
            *(_QWORD *)v210 = v101;
            WebCore::MutableCSSSelector::adoptSelectorVector(v12, (uint64_t)&v210);
            WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v210, v102);
            v100 = v12;
            v12 = 0;
          }
          *v5 = v100;
          this = (uint64_t)std::unique_ptr<WebCore::MutableCSSSelector>::~unique_ptr[abi:sn180100](&v208, v93);
          goto LABEL_94;
        default:
          goto LABEL_56;
      }
      while (1)
      {
        v144 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v204);
        v146 = *(_DWORD *)v144;
        if ((*(_DWORD *)v144 & 0x3F) != 0)
          break;
        v147 = *((unsigned int *)v144 + 1);
        v206 = (WTF::StringImpl *)*((_QWORD *)v144 + 1);
        v207 = v147 | ((unint64_t)((v146 >> 22) & 1) << 32);
        WTF::StringView::toAtomString((WTF::StringView *)&v206, &v208);
        LOBYTE(v209) = 0;
        if (HIDWORD(v211) == (_DWORD)v211)
        {
          WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PossiblyQuotedIdentifier>((uint64_t)&v210, (unint64_t)&v208);
        }
        else
        {
          v179 = HIDWORD(v211) + 1;
          v180 = v208;
          v181 = (char *)v210 + 16 * HIDWORD(v211);
          v208 = 0;
          *(_QWORD *)v181 = v180;
          v181[8] = 0;
          HIDWORD(v211) = v179;
        }
        v149 = v208;
        v208 = 0;
        if (v149)
        {
          if (*(_DWORD *)v149 == 2)
            WTF::StringImpl::destroy(v149, v148);
          else
            *(_DWORD *)v149 -= 2;
        }
        if (v204 == v205)
        {
          WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector<0ul,WTF::CrashOnOverflow>(&v195, (uint64_t)&v210);
          WebCore::MutableCSSSelector::setArgumentList(v12, (WTF **)&v195);
          WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::~FixedVector((WTF **)&v195, v164);
          v165 = v12;
          v12 = 0;
          goto LABEL_345;
        }
      }
      v165 = 0;
LABEL_345:
      *v5 = v165;
      this = WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v210, v145);
      goto LABEL_94;
    }
    v103 = (unsigned int *)WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v204);
    if (v204 != v205)
    {
LABEL_56:
      *v5 = 0;
      *((_BYTE *)a2 + 26) = v13;
      goto LABEL_95;
    }
    v104 = v103;
    if ((*(_BYTE *)v103 & 0x3F) != 0
      || (v139 = WebCore::CSSParserToken::id(v103), v139 - 1 < 5)
      || v139 == 395)
    {
      if ((*v104 & 0x3F) != 6 || *((_WORD *)v104 + 8) != 42)
        goto LABEL_56;
      v105 = (WTF::StringImpl *)WebCore::starAtomData;
      if (WebCore::starAtomData)
        *(_DWORD *)WebCore::starAtomData += 2;
      v210 = v105;
      LOBYTE(v211) = 0;
      WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector(&v196, (uint64_t)&v210, 1);
      WebCore::MutableCSSSelector::setArgumentList(v12, &v196);
      v107 = &v196;
    }
    else
    {
      v140 = v104[1] | ((unint64_t)((*v104 >> 22) & 1) << 32);
      v208 = (WTF::StringImpl *)*((_QWORD *)v104 + 1);
      v209 = v140;
      WTF::StringView::toAtomString((WTF::StringView *)&v208, &v210);
      LOBYTE(v211) = 0;
      WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector(&v197, (uint64_t)&v210, 1);
      WebCore::MutableCSSSelector::setArgumentList(v12, &v197);
      v107 = &v197;
    }
LABEL_194:
    WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::~FixedVector(v107, v106);
    this = (uint64_t)v210;
    v210 = 0;
    if (!this)
      goto LABEL_24;
LABEL_195:
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v108);
    else
      *(_DWORD *)this -= 2;
    goto LABEL_24;
  }
  v41 = (v39 >> 9);
  if (v41 <= 33)
  {
    if (v41 == 21)
    {
LABEL_198:
      v109 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v204);
      v110 = *(_DWORD *)v109;
      if ((*(_DWORD *)v109 & 0x3F) != 0 || v204 != v205)
        goto LABEL_56;
      v111 = *((unsigned int *)v109 + 1);
      v210 = (WTF::StringImpl *)*((_QWORD *)v109 + 1);
      v211 = v111 | ((unint64_t)((v110 >> 22) & 1) << 32);
      WTF::StringView::toAtomString((WTF::StringView *)&v210, &v208);
      WebCore::CSSSelector::setArgument((WebCore::CSSSelector *)*v12, (const WTF::AtomString *)&v208);
      this = (uint64_t)v208;
      v208 = 0;
      if (!this)
        goto LABEL_24;
      goto LABEL_195;
    }
    if (v41 != 6)
      goto LABEL_56;
LABEL_227:
    v42 = *((_BYTE *)a2 + 28);
    *((_BYTE *)a2 + 28) = 1;
    v118 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v118 = 0;
    v208 = a2;
    this = (uint64_t)WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>((WebCore::MutableCSSSelector *)&v210, (uint64_t)a2, &v204, (__int128 **)&v208);
    v119 = HIDWORD(v211);
    if (v204 == v205)
    {
      if (HIDWORD(v211))
      {
        WebCore::CSSSelectorList::CSSSelectorList(&v208, (uint64_t)&v210);
        v120 = v208;
        v208 = 0;
        v121 = *(WTF::StringImpl **)v118;
        *(_QWORD *)v118 = v120;
        if (v121)
        {
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v118, v121);
          v122 = v208;
          v208 = 0;
          if (v122)
          {
            v123 = &v208;
            goto LABEL_232;
          }
        }
      }
      else
      {
        v122 = *(WTF::StringImpl **)v118;
        *(_QWORD *)v118 = 0;
        if (v122)
        {
          v123 = (WTF::StringImpl **)v118;
LABEL_232:
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v123, v122);
        }
      }
      v201 = v118;
      this = WebCore::MutableCSSSelector::setSelectorList(v12, (uint64_t *)&v201);
      v118 = v201;
      v201 = 0;
      if (v118)
      {
        v124 = *(WTF::StringImpl **)v118;
        *(_QWORD *)v118 = 0;
        if (v124)
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v118, v124);
        this = WTF::fastFree(v118, v124);
        v118 = 0;
      }
      v125 = v12;
      v12 = 0;
    }
    else
    {
      v125 = 0;
    }
    *v5 = v125;
    v126 = v210;
    if ((_DWORD)v119)
    {
      v127 = 8 * v119;
      v128 = v210;
      do
      {
        this = *(_QWORD *)v128;
        *(_QWORD *)v128 = 0;
        if (this)
        {
          WebCore::MutableCSSSelector::~MutableCSSSelector((WebCore::MutableCSSSelector *)this, (void *)v11);
          this = WTF::fastFree(v129, v130);
        }
        v128 = (WTF::StringImpl *)((char *)v128 + 8);
        v127 -= 8;
      }
      while (v127);
    }
    if (v126)
      this = WTF::fastFree(v126, (void *)v11);
    if (v118)
    {
      v11 = *(_QWORD *)v118;
      *(_QWORD *)v118 = 0;
      if (v11)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v118, (WTF::StringImpl *)v11);
      v90 = v118;
LABEL_158:
      this = WTF::fastFree(v90, (void *)v11);
    }
LABEL_93:
    *((_BYTE *)a2 + 28) = v42;
    goto LABEL_94;
  }
  switch(v41)
  {
    case '"':
      if (*((_BYTE *)a2 + 27))
        goto LABEL_56;
      v112 = *((_BYTE *)a2 + 28);
      *(_WORD *)((char *)a2 + 27) = 257;
      v208 = a2;
      WebCore::CSSSelectorParser::consumeSelectorList<WebCore::CSSSelectorParser::consumeRelativeSelectorList(WebCore::CSSParserTokenRange &)::$_0>((uint64_t)&v210, (uint64_t)a2, &v204, &v208);
      if (HIDWORD(v211) && v204 == v205)
      {
        v154 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)8);
        v200 = WebCore::CSSSelectorList::CSSSelectorList(v154, (uint64_t)&v210);
        WebCore::MutableCSSSelector::setSelectorList(v12, (uint64_t *)&v200);
        std::unique_ptr<WebCore::CSSSelectorList>::~unique_ptr[abi:sn180100]((WTF **)&v200);
        v114 = v12;
        v12 = 0;
      }
      else
      {
        v114 = 0;
      }
      *v5 = v114;
      this = WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v210, v113);
      *((_BYTE *)a2 + 27) = 0;
      *((_BYTE *)a2 + 28) = v112;
      goto LABEL_94;
    case '#':
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case ',':
    case '-':
    case '.':
    case '/':
    case '0':
    case '1':
      goto LABEL_56;
    case '$':
      WebCore::CSSSelectorParser::consumeCompoundSelector((WebCore::CSSSelectorParser *)&v208, a2);
      v94 = v204;
      v95 = v205;
      v97 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      while (1)
      {
        if (v94 < v205 || (v96 & 1) != 0)
        {
          v98 = v94 >= v205 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v94;
          v99 = *(_DWORD *)v98;
        }
        else
        {
          v99 = v97 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v99;
          v96 = 1;
          v97 = v99;
        }
        if ((v99 & 0x3F) != 0x10)
          break;
        v94 = (__int128 *)((char *)v94 + 24);
        v204 = v94;
      }
      goto LABEL_174;
    case '*':
      goto LABEL_227;
    case '+':
      v210 = 0;
      v211 = 0;
      this = WebCore::consumePossiblyQuotedIdentifier((uint64_t)&v208, &v204);
      if (!v208)
        goto LABEL_281;
      v74 = WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, 1uLL, (unint64_t)&v208);
      v75 = HIDWORD(v211);
      v76 = (char *)v210 + 16 * HIDWORD(v211);
      v77 = *(_QWORD *)v74;
      *(_QWORD *)v74 = 0;
      *(_QWORD *)v76 = v77;
      v76[8] = *(_BYTE *)(v74 + 8);
      HIDWORD(v211) = v75 + 1;
      v78 = v204;
      v79 = v205;
      if (v204 == v205)
        goto LABEL_137;
      do
      {
        if (v78 >= v79)
        {
          v78 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v78 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
        }
        if ((*(_DWORD *)v78 & 0x3F) != 0x15)
          break;
        WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v204);
        WebCore::consumePossiblyQuotedIdentifier((uint64_t)&v206, &v204);
        v137 = v206;
        this = (uint64_t)v208;
        v208 = v206;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v11);
            v137 = v208;
          }
          else
          {
            *(_DWORD *)this -= 2;
          }
        }
        v138 = v207;
        LOBYTE(v209) = v207;
        if (!v137)
        {
LABEL_281:
          v206 = 0;
          goto LABEL_140;
        }
        if (HIDWORD(v211) == (_DWORD)v211)
        {
          WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PossiblyQuotedIdentifier>((uint64_t)&v210, (unint64_t)&v208);
        }
        else
        {
          v193 = HIDWORD(v211) + 1;
          v208 = 0;
          v194 = (char *)v210 + 16 * HIDWORD(v211);
          *(_QWORD *)v194 = v137;
          v194[8] = v138;
          HIDWORD(v211) = v193;
        }
        v78 = v204;
        v79 = v205;
      }
      while (v204 != v205);
LABEL_137:
      WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector<0ul,WTF::CrashOnOverflow>((unsigned int **)&v206, (uint64_t)&v210);
      this = (uint64_t)v208;
      v208 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)this -= 2;
      }
LABEL_140:
      v80 = v210;
      if (HIDWORD(v211))
      {
        v91 = 16 * HIDWORD(v211);
        v92 = v210;
        do
        {
          this = *(_QWORD *)v92;
          *(_QWORD *)v92 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v11);
            else
              *(_DWORD *)this -= 2;
          }
          v92 = (WTF::StringImpl *)((char *)v92 + 16);
          v91 -= 16;
        }
        while (v91);
      }
      if (v80)
        this = WTF::fastFree(v80, (void *)v11);
      v81 = v206;
      if (!v206)
        goto LABEL_334;
      if (!*(_DWORD *)v206)
      {
        v88 = 0;
        *v5 = 0;
        v206 = 0;
        goto LABEL_156;
      }
      if (v204 != v205)
      {
        *v5 = 0;
        v206 = 0;
LABEL_155:
        v88 = *(unsigned int *)v81;
LABEL_156:
        WTF::VectorTypeOperations<WebCore::PossiblyQuotedIdentifier>::destruct((WTF::StringImpl *)((char *)v81 + 8), (WTF::StringImpl *)((char *)v81 + 16 * v88 + 8));
        this = WTF::fastFree(v81, v89);
        goto LABEL_94;
      }
      v206 = 0;
      v82 = *v12;
      v210 = v81;
      this = WebCore::CSSSelector::setArgumentList(v82, (WTF::StringImpl *)&v210);
      v83 = v210;
      v210 = 0;
      if (v83)
      {
        v85 = (WTF::StringImpl **)((char *)v83 + 8);
        v84 = *(unsigned int *)v83;
        if ((_DWORD)v84)
        {
          v86 = 16 * v84;
          do
          {
            v87 = *v85;
            *v85 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 2)
                WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v11);
              else
                *(_DWORD *)v87 -= 2;
            }
            v85 += 2;
            v86 -= 16;
          }
          while (v86);
        }
        this = WTF::fastFree(v83, (void *)v11);
      }
      v81 = v206;
      *v5 = v12;
      v206 = 0;
      v12 = 0;
      if (v81)
        goto LABEL_155;
      goto LABEL_94;
    case '2':
      v42 = *((_BYTE *)a2 + 28);
      *((_BYTE *)a2 + 28) = 1;
      v208 = a2;
      this = (uint64_t)WebCore::CSSSelectorParser::consumeSelectorList<WebCore::CSSSelectorParser::consumeComplexSelectorList(WebCore::CSSParserTokenRange &)::$_0>((uint64_t)&v210, (uint64_t)a2, &v204, &v208);
      v43 = HIDWORD(v211);
      if (HIDWORD(v211))
      {
        if (v204 == v205)
        {
          v44 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)8);
          v203 = (WTF *)WebCore::CSSSelectorList::CSSSelectorList(v44, (uint64_t)&v210);
          WebCore::MutableCSSSelector::setSelectorList(v12, (uint64_t *)&v203);
          v45 = v203;
          v203 = 0;
          if (v45)
          {
            v46 = *(WTF::StringImpl **)v45;
            *(_QWORD *)v45 = 0;
            if (v46)
              WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v45, v46);
            WTF::fastFree(v45, v46);
          }
          v47 = v12;
          v12 = 0;
        }
        else
        {
          v47 = 0;
        }
        v48 = 0;
        *v5 = v47;
        v49 = v210;
        v50 = 8 * v43;
        do
        {
          this = *(_QWORD *)((char *)v49 + v48);
          *(_QWORD *)((char *)v49 + v48) = 0;
          if (this)
          {
            WebCore::MutableCSSSelector::~MutableCSSSelector((WebCore::MutableCSSSelector *)this, (void *)v11);
            this = WTF::fastFree(v51, v52);
          }
          v48 += 8;
        }
        while (v50 != v48);
      }
      else
      {
        *v5 = 0;
        v49 = v210;
      }
      if (!v49)
        goto LABEL_93;
      v90 = v49;
      goto LABEL_158;
    case '3':
    case '4':
    case '5':
    case '6':
      if (v34 == v35)
      {
        v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((v21 & 1) == 0)
        {
          LODWORD(v36) = v36 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v36;
        }
      }
      else
      {
        v204 = (__int128 *)((char *)v34 + 24);
        LODWORD(v36) = *(_DWORD *)v34;
      }
      if ((v36 & 0x3F) == 7)
      {
        if ((v36 & 0x100) == 0)
        {
          v55 = 0;
          v56 = (int)*((double *)v34 + 2);
          goto LABEL_103;
        }
      }
      else if ((v36 & 0x3F) == 0)
      {
        if ((WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v34 + 1), *((unsigned int *)v34 + 1) | ((unint64_t)((v36 >> 22) & 1) << 32), "odd", 4uLL) & 1) != 0)
        {
          v55 = 2;
          v56 = 1;
          goto LABEL_103;
        }
        this = WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v34 + 1), *((unsigned int *)v34 + 1) | ((unint64_t)((*(_DWORD *)v34 >> 22) & 1) << 32), "even", 5uLL);
        if ((this & 1) != 0)
        {
          v56 = 0;
          v55 = 2;
          goto LABEL_103;
        }
        LODWORD(v36) = *(_DWORD *)v34;
      }
      if ((v36 & 0x3F) != 6 || *((_WORD *)v34 + 8) != 43)
        goto LABEL_322;
      v155 = v204;
      v156 = v204;
      if (v204 >= v205)
      {
        v156 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      v35 = (__int128 *)*(unsigned __int8 *)v156;
      if ((v35 & 0x3F) == 0)
      {
        if (v204 == v205)
        {
          v155 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        else
        {
          v204 = (__int128 *)((char *)v204 + 24);
        }
        this = *((_QWORD *)v155 + 1);
        v11 = *((unsigned int *)v155 + 1) | ((unint64_t)((*(_DWORD *)v155 >> 22) & 1) << 32);
        goto LABEL_347;
      }
      LODWORD(v36) = *(_DWORD *)v34;
LABEL_322:
      if ((v36 & 0x3F) != 0)
      {
        if ((v36 & 0x3F) != 9 || (v36 & 0x100) != 0)
        {
          v157 = v204;
          v159 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          while (1)
          {
            if (v157 < v205 || (v158 & 1) != 0)
            {
              v160 = v157 >= v205 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v157;
              v161 = *(_DWORD *)v160;
            }
            else
            {
              v161 = v159 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v161;
              v158 = 1;
              v159 = v161;
            }
            if ((v161 & 0x3F) != 0x10)
              break;
            v157 = (__int128 *)((char *)v157 + 24);
            v204 = v157;
          }
          goto LABEL_334;
        }
        v55 = (int)*((double *)v34 + 2);
        this = (uint64_t)WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)v34);
      }
      else
      {
        this = *((_QWORD *)v34 + 1);
        v162 = *((unsigned int *)v34 + 1);
        if ((v36 & 0x400000) != 0)
        {
          if (!(_DWORD)v162)
            goto LABEL_437;
          v35 = (__int128 *)*(unsigned __int8 *)this;
        }
        else
        {
          if (!(_DWORD)v162)
            goto LABEL_437;
          v35 = (__int128 *)*(unsigned __int16 *)this;
        }
        if ((_DWORD)v35 != 45)
        {
          v11 = v162 | ((unint64_t)((v36 >> 22) & 1) << 32);
LABEL_347:
          v55 = 1;
          goto LABEL_348;
        }
        if (v162 <= 1)
        {
          v188 = v204;
          v190 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          while (1)
          {
            if (v188 < v205 || (v189 & 1) != 0)
            {
              v191 = v188 >= v205 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v188;
              v192 = *(_DWORD *)v191;
            }
            else
            {
              v192 = v190 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v192;
              v189 = 1;
              v190 = v192;
            }
            if ((v192 & 0x3F) != 0x10)
              break;
            v188 = (__int128 *)((char *)v188 + 24);
            v204 = v188;
          }
          goto LABEL_334;
        }
        v163 = v162 - 1;
        v11 = v163;
        if ((v36 & 0x400000) != 0)
        {
          if (v163 < v163)
            goto LABEL_437;
          ++this;
          v11 = v163 | 0x100000000;
        }
        else
        {
          if (v163 < v163)
            goto LABEL_437;
          this += 2;
        }
        v55 = -1;
      }
LABEL_348:
      v166 = v204;
      v35 = v205;
      v168 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      while (1)
      {
        if (v166 < v205 || (v167 & 1) != 0)
        {
          v169 = v166 >= v205 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v166;
          v170 = *(_DWORD *)v169;
        }
        else
        {
          v170 = v168 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v170;
          v167 = 1;
          v168 = v170;
        }
        if ((v170 & 0x3F) != 0x10)
          break;
        v166 = (__int128 *)((char *)v166 + 24);
        v204 = v166;
      }
      if (!(_DWORD)v11)
        goto LABEL_334;
      v171 = v11 & 0xFF00000000;
      v172 = (v11 & 0xFF00000000) != 0 ? *(unsigned __int8 *)this : *(unsigned __int16 *)this;
      if ((v172 & 0xFFFFFFDF) != 0x4E)
        goto LABEL_334;
      if (v11 >= 2)
      {
        if (v171)
          v173 = *(unsigned __int8 *)(this + 1);
        else
          v173 = *(unsigned __int16 *)(this + 2);
        if (v173 != 45)
          goto LABEL_334;
        if (v11 < 3)
          goto LABEL_420;
        v174 = (v11 - 1);
        v36 = v11 - 1;
        if (v171)
        {
          if (v36 >= v174)
          {
            v175 = this + 1;
            v174 |= 0x100000000uLL;
            goto LABEL_368;
          }
        }
        else if (v36 >= v174)
        {
          v175 = this + 2;
LABEL_368:
          this = WTF::parseInteger<int>(v175, v174);
          v56 = this;
          if ((this & 0xFF00000000) != 0)
            goto LABEL_103;
          goto LABEL_334;
        }
LABEL_437:
        __break(1u);
        goto LABEL_438;
      }
      if (v166 >= v205)
      {
        if ((v167 & 1) == 0)
        {
          v168 = v168 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v168;
        }
      }
      else
      {
        v168 = *(_DWORD *)v166;
      }
      if ((v168 & 0x3F) == 6)
      {
        this = (uint64_t)WebCore::CSSParserTokenRange::consumeIncludingWhitespace(&v204);
        v185 = *(unsigned __int16 *)(this + 16) << 24;
        if (v185 == 721420288)
        {
          v177 = 0;
          v176 = 0;
LABEL_421:
          v186 = v204;
          if (v204 == v205)
          {
            v186 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
          }
          else
          {
            v204 = (__int128 *)((char *)v204 + 24);
          }
          if ((*(_DWORD *)v186 & 0x13F) == 7)
          {
            this = WebCore::CSSParserToken::numericSign((WebCore::CSSParserToken *)v186);
            if (((v177 ^ ((_DWORD)this != 0)) & 1) == 0)
            {
              v187 = (int)*((double *)v186 + 2);
              if (v176)
                v56 = -v187;
              else
                v56 = v187;
              goto LABEL_103;
            }
          }
          goto LABEL_334;
        }
        if (v185 == 754974720)
        {
LABEL_420:
          v177 = 0;
          v176 = 1;
          goto LABEL_421;
        }
LABEL_334:
        *v5 = 0;
        goto LABEL_94;
      }
      if ((v168 & 0x3F) == 7)
      {
        v176 = 0;
        v177 = 1;
        goto LABEL_421;
      }
      v56 = 0;
LABEL_103:
      v57 = v204;
      v59 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      while (1)
      {
        if (v57 < v205 || (v58 & 1) != 0)
        {
          v60 = v57 >= v205 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v57;
          v61 = *(_DWORD *)v60;
        }
        else
        {
          v61 = v59 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v61;
          v58 = 1;
          v59 = v61;
        }
        if ((v61 & 0x3F) != 0x10)
          break;
        v57 = (__int128 *)((char *)v57 + 24);
        v204 = v57;
      }
      if (v55)
      {
        v210 = 0;
        v211 = 0;
        v212 = 0;
        v213 = 1;
        if (v55 == -1)
        {
          WTF::StringBuilder::append((uint64_t)&v210, 0x2Du);
        }
        else if (v55 != 1)
        {
          LODWORD(v208) = v55;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v210, (unsigned int *)&v208);
        }
        WTF::StringBuilder::append((uint64_t)&v210, 0x6Eu);
        if ((_DWORD)v56)
        {
          if ((int)v56 >= 1)
            WTF::StringBuilder::append((uint64_t)&v210, 0x2Bu);
          LODWORD(v208) = v56;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v210, (unsigned int *)&v208);
        }
        v62 = v55;
        WTF::StringBuilder::toAtomString((WTF::AtomString *)&v210, (WTF::AtomString *)&v208);
        WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)&v210, v117);
      }
      else
      {
        v62 = 0;
        WTF::AtomString::number((WTF::AtomString *)v56);
      }
      v63 = *v12;
      v64 = *(_DWORD **)(*v12 + 8);
      if ((*(_BYTE *)(*v12 + 2) & 0x10) != 0)
      {
        v65 = *(_QWORD *)(*v12 + 8);
      }
      else
      {
        v65 = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)v65 = 1;
        if (v64)
          *v64 += 2;
        *(_QWORD *)(v65 + 8) = v64;
        *(_QWORD *)(v65 + 16) = v64;
        *(_QWORD *)(v65 + 24) = 0;
        v66 = WebCore::anyName;
        if (WebCore::anyName)
          ++*(_DWORD *)WebCore::anyName;
        *(_QWORD *)(v65 + 32) = v66;
        *(_QWORD *)(v65 + 40) = 0;
        *(_QWORD *)(v65 + 48) = 0;
        *(_QWORD *)(v65 + 56) = 0;
        *(_QWORD *)(v63 + 8) = v65;
        *(_DWORD *)v63 |= 0x100000u;
      }
      v67 = v62;
      v68 = v208;
      if (v208)
        *(_DWORD *)v208 += 2;
      v69 = *(WTF::StringImpl **)(v65 + 40);
      *(_QWORD *)(v65 + 40) = v68;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
        {
          WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v11);
          v68 = v208;
        }
        else
        {
          *(_DWORD *)v69 -= 2;
        }
      }
      v208 = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v68 -= 2;
      }
      v70 = v204;
      if (v204 != v205)
      {
        if ((*(_DWORD *)*v12 >> 9) - 53 >= 2)
        {
          v131 = v204;
          if (v204 >= v205)
          {
            v131 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            }
          }
          if ((*(_BYTE *)v131 & 0x3F) == 0)
          {
            v204 = (__int128 *)((char *)v204 + 24);
            if (WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v70 + 1), *((unsigned int *)v70 + 1) | ((unint64_t)((*(_DWORD *)v70 >> 22) & 1) << 32), "of", 3uLL))
            {
              v132 = v204;
              v134 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              while (1)
              {
                if (v132 < v205 || (v133 & 1) != 0)
                {
                  v135 = v132 >= v205 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v132;
                  v136 = *(_DWORD *)v135;
                }
                else
                {
                  v136 = v134 & 0xFF000000 | 0x1E;
                  WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v136;
                  v133 = 1;
                  v134 = v136;
                }
                if ((v136 & 0x3F) != 0x10)
                  break;
                v132 = (__int128 *)((char *)v132 + 24);
                v204 = v132;
              }
              v208 = a2;
              WebCore::CSSSelectorParser::consumeSelectorList<WebCore::CSSSelectorParser::consumeComplexSelectorList(WebCore::CSSParserTokenRange &)::$_0>((uint64_t)&v210, (uint64_t)a2, &v204, &v208);
              if (HIDWORD(v211) && v204 == v205)
              {
                v182 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)8);
                v202 = WebCore::CSSSelectorList::CSSSelectorList(v182, (uint64_t)&v210);
                WebCore::MutableCSSSelector::setSelectorList(v12, (uint64_t *)&v202);
                std::unique_ptr<WebCore::CSSSelectorList>::~unique_ptr[abi:sn180100]((WTF **)&v202);
                WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v210, v183);
                goto LABEL_128;
              }
              *v5 = 0;
LABEL_212:
              this = WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v210, v115);
LABEL_94:
              *((_BYTE *)a2 + 26) = v13;
              if (!v12)
                return this;
LABEL_95:
              WebCore::MutableCSSSelector::~MutableCSSSelector((WebCore::MutableCSSSelector *)v12, (void *)v11);
              return WTF::fastFree(v53, v54);
            }
          }
        }
        goto LABEL_56;
      }
LABEL_128:
      v71 = *v12;
      v72 = *(_DWORD **)(*v12 + 8);
      if ((*(_BYTE *)(*v12 + 2) & 0x10) != 0)
      {
        this = *(_QWORD *)(*v12 + 8);
      }
      else
      {
        this = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)this = 1;
        if (v72)
          *v72 += 2;
        *(_QWORD *)(this + 8) = v72;
        *(_QWORD *)(this + 16) = v72;
        *(_QWORD *)(this + 24) = 0;
        v73 = WebCore::anyName;
        if (WebCore::anyName)
          ++*(_DWORD *)WebCore::anyName;
        *(_QWORD *)(this + 32) = v73;
        *(_QWORD *)(this + 40) = 0;
        *(_QWORD *)(this + 48) = 0;
        *(_QWORD *)(this + 56) = 0;
        *(_QWORD *)(v71 + 8) = this;
        *(_DWORD *)v71 |= 0x100000u;
      }
      *(_DWORD *)(this + 24) = v67;
      *(_DWORD *)(*(_QWORD *)(v71 + 8) + 28) = v56;
LABEL_24:
      *v5 = v12;
      *((_BYTE *)a2 + 26) = v13;
      return this;
    default:
      if (v41 == 72)
        goto LABEL_198;
      if (v41 != 82)
        goto LABEL_56;
      goto LABEL_227;
  }
}

uint64_t WebCore::isSimpleSelectorValidAfterPseudoElement(unsigned int *a1, int a2)
{
  unsigned int v2;

  if (a2 == 17)
  {
    v2 = *a1;
    if ((*a1 & 0x1F0) != 0x90 || (*a1 & 0x1FE00) == 8704)
      goto LABEL_4;
    return 1;
  }
  if (a2 == 19)
  {
    v2 = *a1;
    if ((*a1 & 0x1F0) != 0x90 || ((v2 >> 9) - 8) >= 9u || ((0x107u >> ((v2 >> 9) - 8)) & 1) == 0)
      goto LABEL_4;
    return 1;
  }
  v2 = *a1;
LABEL_4:
  if ((v2 & 0x1F0) == 0x80)
    return WebCore::isPseudoClassValidAfterPseudoElement((v2 >> 9), a2);
  else
    return 0;
}

uint64_t WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::StringImpl ***)a1;
    v7 = 16 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WebCore::CSSSelectorParser::resolveNestingParent@<X0>(WebCore::CSSSelectorParser *this@<X0>, const WebCore::CSSSelectorList *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WebCore::CSSSelector *v6;
  WebCore::MutableCSSSelector *v7;
  WebCore::MutableCSSSelector *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  int v15;
  WebCore::MutableCSSSelector *v16;
  WTF *v17;
  void *v18;
  WebCore::MutableCSSSelector *v19;
  WebCore::MutableCSSSelector *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  int v27;
  WebCore::MutableCSSSelector *v28;
  WTF *v29;
  void *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t v33;
  WebCore::MutableCSSSelector *v34;
  WTF *v35;
  void *v36;
  WTF *result;
  WebCore::MutableCSSSelector *v38;
  WebCore::CSSSelector *v39;
  WTF *v40;
  uint64_t v41;

  v40 = 0;
  v41 = 0;
  WebCore::CSSSelectorList::CSSSelectorList(&v39, (uint64_t *)this);
  v6 = v39;
  if (v39)
  {
    if (a2)
    {
      do
      {
        WebCore::CSSSelector::resolveNestingParentSelectors(v6, a2);
        v7 = (WebCore::MutableCSSSelector *)WTF::fastMalloc((WTF *)0x10);
        v8 = WebCore::MutableCSSSelector::MutableCSSSelector(v7, v6);
        v38 = v8;
        LODWORD(v10) = HIDWORD(v41);
        if (HIDWORD(v41) == (_DWORD)v41)
        {
          v11 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v38);
          v10 = HIDWORD(v41);
          v12 = v40;
          v13 = *v11;
          *v11 = 0;
          *((_QWORD *)v12 + v10) = v13;
        }
        else
        {
          v38 = 0;
          *((_QWORD *)v40 + HIDWORD(v41)) = v8;
        }
        HIDWORD(v41) = v10 + 1;
        do
        {
          v15 = *(_DWORD *)v6;
          v6 = (WebCore::CSSSelector *)((char *)v6 + 16);
          v14 = v15;
        }
        while ((v15 & 0x80000) == 0);
        v16 = v38;
        v38 = 0;
        if (v16)
        {
          WebCore::MutableCSSSelector::~MutableCSSSelector(v16, v9);
          WTF::fastFree(v17, v18);
        }
      }
      while ((v14 & 0x20000) == 0);
    }
    else
    {
      do
      {
        WebCore::CSSSelector::replaceNestingParentByPseudoClassScope(v6);
        v19 = (WebCore::MutableCSSSelector *)WTF::fastMalloc((WTF *)0x10);
        v20 = WebCore::MutableCSSSelector::MutableCSSSelector(v19, v6);
        v38 = v20;
        LODWORD(v22) = HIDWORD(v41);
        if (HIDWORD(v41) == (_DWORD)v41)
        {
          v23 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)&v38);
          v22 = HIDWORD(v41);
          v24 = v40;
          v25 = *v23;
          *v23 = 0;
          *((_QWORD *)v24 + v22) = v25;
        }
        else
        {
          v38 = 0;
          *((_QWORD *)v40 + HIDWORD(v41)) = v20;
        }
        HIDWORD(v41) = v22 + 1;
        do
        {
          v27 = *(_DWORD *)v6;
          v6 = (WebCore::CSSSelector *)((char *)v6 + 16);
          v26 = v27;
        }
        while ((v27 & 0x80000) == 0);
        v28 = v38;
        v38 = 0;
        if (v28)
        {
          WebCore::MutableCSSSelector::~MutableCSSSelector(v28, v21);
          WTF::fastFree(v29, v30);
        }
      }
      while ((v26 & 0x20000) == 0);
    }
  }
  WebCore::CSSSelectorList::CSSSelectorList(a3, (uint64_t)&v40);
  v31 = v39;
  v39 = 0;
  if (v31)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v39, v31);
  if (HIDWORD(v41))
  {
    v32 = v40;
    v33 = 8 * HIDWORD(v41);
    do
    {
      v34 = *(WebCore::MutableCSSSelector **)v32;
      *(_QWORD *)v32 = 0;
      if (v34)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v34, v31);
        WTF::fastFree(v35, v36);
      }
      v32 = (WTF *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
  }
  result = v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    return (WTF *)WTF::fastFree(result, v31);
  }
  return result;
}

void WebCore::CSSSelectorParser::parsePseudoElement(unsigned int **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  unsigned int PseudoClassAndCompatibilityElementName;
  __int128 *v13;
  unsigned int v14;
  unsigned __int16 v15;
  unsigned __int8 v16;
  char v17;
  unsigned int v18;
  char v19;
  __int128 *v20;
  int v21;
  __int128 *v22;
  __int128 *v23;
  char v24;
  __int128 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  unsigned int v32;
  __int128 *v33;
  unsigned int v34;
  __int128 *v35;
  _DWORD *v36;
  unsigned int v37;
  __int128 *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  __int128 *v43;
  _BYTE v45[48];
  __int128 *v46;
  unsigned int v47;
  uint64_t v48;

  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v45, this, 0, 0);
  if (v47)
  {
    v7 = (__int128 *)((char *)v46 + 24);
    v8 = v46;
  }
  else
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
    v7 = v46;
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0x13)
    goto LABEL_58;
  v9 = (__int128 *)((char *)v46 + 24 * v47);
  if (v7 == v9)
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v10 = (__int128 *)((char *)v46 + 24 * v47);
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v10 = (__int128 *)((char *)v46 + 24 * v47);
    }
  }
  else
  {
    v10 = (__int128 *)((char *)v7 + 24);
  }
  v11 = *(_DWORD *)v7 & 0x3F;
  if (v11 == 19)
  {
    v13 = v10;
    if (v10 >= v9)
    {
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    v14 = *(_DWORD *)v13 & 0x3F;
    if (v14 >= 2)
      goto LABEL_58;
    v15 = WebCore::CSSSelector::parsePseudoElementName(*((WebCore::SelectorPseudoElementMapHash **)v13 + 1), (const char *)(*((unsigned int *)v13 + 1) | ((unint64_t)((*(_DWORD *)v13 >> 22) & 1) << 32)), (unsigned __int8 *)a2);
    if (v15 <= 0xFFu)
      goto LABEL_58;
    v16 = v15;
    if (v14)
    {
      v18 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if (v10 >= v9)
        v19 = 1;
      else
      if (v10 >= v9)
        v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v20 = v10;
      {
        v18 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v18;
        v17 = 1;
        v19 = 1;
        v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v21 = 0;
      v22 = (__int128 *)((char *)v20 + 24);
      v23 = v10;
      v24 = v19;
      while (1)
      {
        if (v23 == v9)
        {
          if ((v24 & 1) != 0)
          {
            v25 = v9;
          }
          else
          {
            v18 = v18 & 0xFF000000 | 0x1E;
            v17 = 1;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v18;
            v19 = 1;
            v25 = v10;
          }
          v24 = 1;
          v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v10 = (__int128 *)((char *)v23 + 24);
          v25 = (__int128 *)((char *)v23 + 24);
        }
        v26 = *(_DWORD *)v23 >> 6;
        v27 = v26 == 2 ? -1 : 0;
        v28 = v26 == 1 ? 1 : v27;
        v21 += v28;
        if (!v21)
          break;
        v23 = v25;
        if (v25 >= v9)
          goto LABEL_49;
      }
      v25 = (__int128 *)((char *)v25 - 24);
LABEL_49:
      if ((v19 & 1) == 0)
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v17 = 1;
      }
      if (v22 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
        v30 = v9;
      else
        v30 = v22;
      if (v25 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
        v31 = v9;
      else
        v31 = v25;
      if (v10 != v9)
        goto LABEL_58;
      v32 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      do
      {
        if (v30 < v31 || (v17 & 1) != 0)
        {
          if (v30 >= v31)
            v33 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          else
            v33 = v30;
          v34 = *(_DWORD *)v33;
        }
        else
        {
          v34 = v32 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v34;
          v17 = 1;
          v32 = v34;
        }
        v30 = (__int128 *)((char *)v30 + 24);
      }
      while ((v34 & 0x3F) == 0x10);
      v35 = (__int128 *)((char *)v30 - 24);
      if (v16 - 22 >= 4)
      {
        if (v16 != 15)
          goto LABEL_58;
        if (v35 == v31)
        {
          v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          if ((v17 & 1) == 0)
          {
            v32 = v32 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v32;
          }
          v17 = 1;
          v30 = v31;
        }
        do
        {
          if (v30 < v31 || (v17 & 1) != 0)
          {
            if (v30 >= v31)
              v43 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            else
              v43 = v30;
            v42 = *(_DWORD *)v43;
          }
          else
          {
            v42 = v32 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v42;
            v17 = 1;
            v32 = v42;
          }
          v30 = (__int128 *)((char *)v30 + 24);
        }
        while ((v42 & 0x3F) == 0x10);
        if ((*(_DWORD *)v35 & 0x3F) != 0 || (__int128 *)((char *)v30 - 24) != v31)
          goto LABEL_58;
        if ((*(_DWORD *)v35 & 0x400000) != 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v41 = v48;
        *(_BYTE *)a3 = 1;
        *(_DWORD *)(a3 + 8) = 4;
      }
      else
      {
        if (v35 == v31)
        {
          v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          if ((v17 & 1) == 0)
          {
            v32 = v32 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v32;
          }
          v17 = 1;
          v30 = v31;
        }
        do
        {
          if (v30 < v31 || (v17 & 1) != 0)
          {
            if (v30 >= v31)
              v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            else
              v38 = v30;
            v37 = *(_DWORD *)v38;
          }
          else
          {
            v37 = v32 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v37;
            v17 = 1;
            v32 = v37;
          }
          v30 = (__int128 *)((char *)v30 + 24);
        }
        while ((v37 & 0x3F) == 0x10);
        if ((*(_DWORD *)v35 & 0x3F) != 0)
          goto LABEL_58;
        v39 = *((_DWORD *)v35 + 4);
        if (v39 < 0)
        {
          v39 = WebCore::cssValueKeywordID(*((_QWORD *)v35 + 1), *((unsigned int *)v35 + 1) | ((unint64_t)((*(_DWORD *)v35 >> 22) & 1) << 32));
          *((_DWORD *)v35 + 4) = v39;
        }
        if ((unsigned __int16)v39 - 1 < 5
          || (unsigned __int16)v39 == 395
          || (__int128 *)((char *)v30 - 24) != v31)
        {
          goto LABEL_58;
        }
        if (v16 > 0x1Cu)
          v40 = 0;
        else
          v40 = dword_1969EFEC0[(char)v16];
        if ((*((_BYTE *)v35 + 2) & 0x40) != 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        v41 = v48;
        *(_BYTE *)a3 = 1;
        *(_DWORD *)(a3 + 8) = v40;
      }
      *(_QWORD *)(a3 + 16) = v41;
      *(_BYTE *)(a3 + 24) = 1;
      goto LABEL_60;
    }
    if (v10 == v9)
    {
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      }
    }
    else if ((__int128 *)((char *)v10 + 24) != v9)
    {
LABEL_58:
      *(_BYTE *)a3 = 0;
      goto LABEL_59;
    }
    v29 = 1;
    switch((char)v15)
    {
      case 0:
        v29 = 23;
        goto LABEL_77;
      case 1:
        v29 = 22;
        goto LABEL_77;
      case 2:
        v29 = 10;
        goto LABEL_77;
      case 3:
        v29 = 18;
        goto LABEL_77;
      case 4:
        v29 = 21;
        goto LABEL_77;
      case 5:
        v29 = 17;
        goto LABEL_77;
      case 6:
        v29 = 19;
        goto LABEL_77;
      case 7:
        v29 = 20;
        goto LABEL_77;
      case 8:
        v29 = 7;
        goto LABEL_77;
      case 9:
        v29 = 9;
        goto LABEL_77;
      case 10:
        v29 = 6;
        goto LABEL_77;
      case 12:
        v29 = 2;
        goto LABEL_77;
      case 13:
        goto LABEL_77;
      case 14:
        v29 = 3;
        goto LABEL_77;
      case 15:
      case 17:
      case 19:
      case 22:
      case 23:
      case 24:
      case 25:
        goto LABEL_58;
      case 16:
        v29 = 5;
        goto LABEL_77;
      case 18:
        v29 = 8;
        goto LABEL_77;
      case 20:
        v29 = 11;
        goto LABEL_77;
      case 21:
        v29 = 12;
        goto LABEL_77;
      default:
        goto LABEL_12;
    }
  }
  if (v11)
    goto LABEL_58;
  if (v10 != v9)
    goto LABEL_58;
  PseudoClassAndCompatibilityElementName = WebCore::findPseudoClassAndCompatibilityElementName(*((WebCore::SelectorPseudoClassAndCompatibilityElementMapHash **)v7 + 1), (const char *)(*((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32)));
  if (!HIBYTE(PseudoClassAndCompatibilityElementName))
    goto LABEL_58;
  if (BYTE2(PseudoClassAndCompatibilityElementName) > 0x19u
    || ((0x3F5F7FFu >> SBYTE2(PseudoClassAndCompatibilityElementName)) & 1) == 0)
  {
LABEL_12:
    *(_BYTE *)a3 = 1;
LABEL_59:
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_60;
  }
  v29 = dword_1969EFE58[SBYTE2(PseudoClassAndCompatibilityElementName)];
LABEL_77:
  v36 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v36 += 2;
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 8) = v29;
  *(_QWORD *)(a3 + 16) = v36;
  *(_BYTE *)(a3 + 24) = 1;
LABEL_60:
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v45, v6);
}

uint64_t WebCore::CSSSelectorParserContext::CSSSelectorParserContext(uint64_t this, const WebCore::Document *a2)
{
  uint64_t v2;

  *(_BYTE *)this = *((_BYTE *)a2 + 3384) == 2;
  v2 = *((_QWORD *)a2 + 85);
  *(_BYTE *)(this + 1) = (*(_DWORD *)(v2 + 672) & 0x40000) != 0;
  *(_BYTE *)(this + 2) = (*(_QWORD *)(v2 + 672) & 0x4000000000) != 0;
  *(_BYTE *)(this + 3) = (*(_DWORD *)(v2 + 680) & 0x4000) != 0;
  *(_BYTE *)(this + 4) = (*(_DWORD *)(v2 + 680) & 0x40000) != 0;
  *(_BYTE *)(this + 5) = (*(_DWORD *)(v2 + 688) & 0x20000000) != 0;
  *(_BYTE *)(this + 6) = (*(_QWORD *)(v2 + 696) & 0x20000000000000) != 0;
  *(_WORD *)(this + 7) = (*(_DWORD *)(v2 + 704) & 0x400) != 0;
  return this;
}

uint64_t WebCore::CSSSupportsParser::supportsCondition(__int128 *a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 *v7;
  char v8;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  __int128 *v15[2];

  v7 = a1;
  v15[0] = a1;
  v15[1] = a2;
  v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v7 < a2 || (v8 & 1) != 0)
    {
      v10 = v7 >= a2 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v7;
      v11 = *(_DWORD *)v10;
    }
    else
    {
      v11 = v9 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
      v8 = 1;
      v9 = v11;
    }
    if ((v11 & 0x3F) != 0x10)
      break;
    v7 = (__int128 *)((char *)v7 + 24);
    v15[0] = v7;
  }
  v13 = a3;
  v14 = a5;
  result = WebCore::CSSSupportsParser::consumeCondition((WebCore::CSSSupportsParser *)&v13, v7, a2);
  if (a4)
  {
    if ((_DWORD)result == 2)
      return WebCore::CSSSupportsParser::consumeSupportsFeatureOrGeneralEnclosed((WebCore::CSSSupportsParser *)&v13, v15);
  }
  return result;
}

uint64_t WebCore::CSSSupportsParser::consumeCondition(WebCore::CSSSupportsParser *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  __int128 *v15;
  char v16;
  unsigned int v17;
  __int128 *v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 *v25;
  __int128 *v26;
  char v27;
  unsigned int v28;
  __int128 *v29;
  unsigned int v30;
  __int128 *v31;
  __int128 *v32;

  v31 = a2;
  v32 = a3;
  if (a3 <= a2)
  {
    v6 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v6 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v6;
    }
    if ((v6 & 0x3F) == 0)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
LABEL_4:
      if (WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((v6 >> 22) & 1) << 32), "not", 4uLL))return WebCore::CSSSupportsParser::consumeNegation(a1, a2, a3);
    }
  }
  else
  {
    v6 = *(_DWORD *)a2;
    if ((*(_DWORD *)a2 & 0x3F) == 0)
    {
      v7 = a2;
      goto LABEL_4;
    }
  }
  v8 = WebCore::CSSSupportsParser::consumeConditionInParenthesis(a1, &v31, 0);
  if (v8 == 2)
    return 2;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v13 = v8 != 0;
    v14 = v11 | v13;
    if (v12 == 1)
      v14 = v11 & v13;
    v11 = v12 ? v14 : v8 != 0;
    v15 = v31;
    if (v31 == v32)
      break;
    v17 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if (v15 < v32 || (v16 & 1) != 0)
      {
        v18 = v15 >= v32 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v15;
        v19 = *(_DWORD *)v18;
      }
      else
      {
        v19 = v17 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
        v16 = 1;
        v17 = v19;
      }
      if ((v19 & 0x3F) != 0x10)
        break;
      v15 = (__int128 *)((char *)v15 + 24);
      v31 = v15;
    }
    if (v15 == v32)
      break;
    v20 = (v15 < v32) | v16;
    if (v15 >= v32)
      v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v20 & 1) == 0)
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17 & 0xFF000000 | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v21 = *(_DWORD *)v15;
    if ((*(_DWORD *)v15 & 0x3F) != 0)
      return 2;
    if (v12)
    {
      if (v12 != 2)
      {
        v22 = *((unsigned int *)v15 + 1);
LABEL_38:
        if ((WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v15 + 1), v22 | ((unint64_t)((v21 >> 22) & 1) << 32), "and", 4uLL) & 1) == 0)return 2;
        v12 = 1;
        goto LABEL_44;
      }
      v23 = *((unsigned int *)v15 + 1);
    }
    else
    {
      v23 = *((unsigned int *)v15 + 1);
      if ((_DWORD)v23 == 3)
      {
        v22 = 3;
        goto LABEL_38;
      }
    }
    v24 = WTF::equalLettersIgnoringASCIICase(*((unsigned __int16 **)v15 + 1), v23 | ((unint64_t)((v21 >> 22) & 1) << 32), "or", 3uLL);
    v12 = 2;
    v9 = 2;
    if (!v24)
      return v9;
LABEL_44:
    v25 = v31;
    if (v31 == v32)
    {
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    else
    {
      v25 = (__int128 *)((char *)v31 + 24);
      v31 = (__int128 *)((char *)v31 + 24);
    }
    v26 = v25;
    if (v25 >= v32)
    {
      v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v26 & 0x3F) != 0x10)
      return 2;
    v28 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if (v25 < v32 || (v27 & 1) != 0)
      {
        v29 = v25 >= v32 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v25;
        v30 = *(_DWORD *)v29;
      }
      else
      {
        v30 = v28 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
        v27 = 1;
        v28 = v30;
      }
      if ((v30 & 0x3F) != 0x10)
        break;
      v25 = (__int128 *)((char *)v25 + 24);
      v31 = v25;
    }
    v8 = WebCore::CSSSupportsParser::consumeConditionInParenthesis(a1, &v31, 0);
    v9 = 2;
    if (v8 == 2)
      return v9;
  }
  return v11 & 1;
}

uint64_t WebCore::CSSSupportsParser::consumeSupportsFeatureOrGeneralEnclosed(WebCore::CSSSupportsParser *this, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t result;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) == 1)
  {
    result = WebCore::CSSSupportsParser::consumeSupportsFunction(this, a2);
    if ((_DWORD)result != 2)
      return result;
    v4 = a2[1];
  }
  v6 = *a2;
  if (*a2 >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
    return 0;
  else
    return WebCore::CSSParserImpl::supportsDeclaration(*(WebCore::CSSParserImpl **)this, (WebCore::CSSParserTokenRange *)a2);
}

uint64_t WebCore::CSSSupportsParser::consumeNegation(WebCore::CSSSupportsParser *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  int v4;
  __int128 *v5;
  char v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  int v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  __int128 *v15;
  unsigned int v16;
  __int128 *v18;
  __int128 *v19;

  v18 = a2;
  v19 = a3;
  v3 = a2;
  if (a3 <= a2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v4 = *(_DWORD *)v3 & 0x3F;
  if (!v4)
  {
    if (a2 == a3)
    {
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      }
    }
    else
    {
      a2 = (__int128 *)((char *)a2 + 24);
      v18 = a2;
    }
  }
  v5 = a2;
  if (a2 >= a3)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0x10)
    return 2;
  v7 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (a2 < a3 || (v6 & 1) != 0)
    {
      v8 = a2 >= a3 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : a2;
      v9 = *(_DWORD *)v8;
    }
    else
    {
      v9 = v7 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
      v6 = 1;
      v7 = v9;
    }
    if ((v9 & 0x3F) != 0x10)
      break;
    a2 = (__int128 *)((char *)a2 + 24);
    v18 = a2;
  }
  v11 = WebCore::CSSSupportsParser::consumeConditionInParenthesis(a1, &v18, v4);
  v12 = v18;
  v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v12 < v19 || (v13 & 1) != 0)
    {
      v15 = v12 >= v19 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v12;
      v16 = *(_DWORD *)v15;
    }
    else
    {
      v16 = v14 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v16;
      v13 = 1;
      v14 = v16;
    }
    if ((v16 & 0x3F) != 0x10)
      break;
    v12 = (__int128 *)((char *)v12 + 24);
    v18 = v12;
  }
  if (v11 != 2 && v12 == v19)
    return v11 == 0;
  else
    return 2;
}

uint64_t WebCore::CSSSupportsParser::consumeConditionInParenthesis(WebCore::CSSSupportsParser *a1, __int128 **this, int a3)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  char v7;
  unsigned int v8;
  __int128 *v9;
  unsigned int v10;
  uint64_t result;
  __int128 *v12[2];

  if (!a3)
  {
    v4 = *this;
    if (*this >= this[1])
    {
      v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v4 & 0x3F) != 0x16)
      return WebCore::CSSSupportsParser::consumeSupportsFunction(a1, this);
  }
  v6 = WebCore::CSSParserTokenRange::consumeBlock(this);
  v12[0] = v6;
  v12[1] = v5;
  v8 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if (v6 < v5 || (v7 & 1) != 0)
    {
      v9 = v6 >= v5 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v6;
      v10 = *(_DWORD *)v9;
    }
    else
    {
      v10 = v8 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
      v7 = 1;
      v8 = v10;
    }
    if ((v10 & 0x3F) != 0x10)
      break;
    v6 = (__int128 *)((char *)v6 + 24);
    v12[0] = v6;
  }
  result = WebCore::CSSSupportsParser::consumeCondition(a1, v6, v5);
  if ((_DWORD)result == 2)
    return WebCore::CSSSupportsParser::consumeSupportsFeatureOrGeneralEnclosed(a1, v12);
  return result;
}

uint64_t WebCore::CSSSupportsParser::consumeSupportsFunction(WebCore::CSSSupportsParser *this, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  int *v7;
  unsigned int v8;
  WebCore::CSSParserTokenRange *v9;

  v5 = *a2;
  v4 = a2[1];
  if (*a2 >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 1)
    return 2;
  v7 = (int *)*a2;
  if (*a2 >= v4)
  {
    v7 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v8 = WebCore::CSSParserToken::functionId(v7);
  switch(v8)
  {
    case 0x3E2u:
      return WebCore::CSSSupportsParser::consumeSupportsFontTechFunction(a2, v9);
    case 0x3E1u:
      return WebCore::CSSSupportsParser::consumeSupportsFontFormatFunction(a2, v9);
    case 0x3E0u:
      return WebCore::CSSSupportsParser::consumeSupportsSelectorFunction(this, (WebCore::CSSParserTokenRange *)a2);
  }
  WebCore::CSSParserTokenRange::consumeComponentValue(a2);
  return 0;
}

BOOL WebCore::CSSSupportsParser::consumeSupportsSelectorFunction(WebCore::CSSSupportsParser *this, WebCore::CSSParserTokenRange *a2)
{
  unint64_t v2;
  __int128 *v3;
  char v4;
  char v5;
  __int128 *v6;
  int v7;
  __int128 *v8;
  char v9;
  __int128 *v10;
  int v11;
  WTF::AtomString *v12;
  int v13;
  unsigned int v14;
  __int128 *v15;
  __int128 *v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  int16x8_t v21;
  int v22;
  int v23;
  __int128 *v24;
  unsigned int v25;
  WebCore::CSSParserTokenRange *v26;
  WebCore::MutableCSSSelector *v27;
  unsigned int v28;
  WTF::AtomString *v29;
  _BOOL8 v30;
  WTF *v31;
  void *v32;
  WebCore::StyleSheetContents *v33;
  WebCore::CSSParserTokenRange *v35;
  int v36;
  int v37;
  unsigned int v38;
  WebCore::MutableCSSSelector *v39;
  unsigned int **v40;
  WTF *v41;
  void *v42;
  char v43;
  unsigned __int32 v44;
  char v45;
  BOOL v46;
  BOOL v47;
  char v48;
  WebCore::StyleSheetContents *v49;
  char v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  WebCore::MutableCSSSelector *v54;
  WebCore::MutableCSSSelector *v55;

  v3 = *(__int128 **)a2;
  v2 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 >= v2)
    v5 = 1;
  else
  if (*(_QWORD *)a2 >= v2)
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v6 = *(__int128 **)a2;
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v4 = 1;
    v3 = *(__int128 **)a2;
    v5 = 1;
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v7 = 0;
  v8 = (__int128 *)((char *)v6 + 24);
  v9 = v5;
  while (1)
  {
    if (v3 == (__int128 *)v2)
    {
      if ((v9 & 1) != 0)
      {
        v10 = (__int128 *)v2;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v10 = *(__int128 **)a2;
        v4 = 1;
        v5 = 1;
      }
      v9 = 1;
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (__int128 *)((char *)v3 + 24);
      *(_QWORD *)a2 = (char *)v3 + 24;
    }
    v11 = *(_DWORD *)v3 >> 6;
    v12 = v11 == 2 ? (WTF::AtomString *)0xFFFFFFFFLL : 0;
    v13 = v11 == 1 ? 1 : (int)v12;
    v7 += v13;
    if (!v7)
      break;
    v3 = v10;
    if ((unint64_t)v10 >= v2)
      goto LABEL_27;
  }
  v10 = (__int128 *)((char *)v10 - 24);
LABEL_27:
  if ((v5 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v4 = 1;
  }
  if (v8 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v8 = (__int128 *)v2;
  if (v10 != &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v2 = (unint64_t)v10;
  v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  v15 = (__int128 *)((char *)v8 - 24);
  do
  {
    if ((unint64_t)v8 < v2 || (v4 & 1) != 0)
    {
      if ((unint64_t)v8 >= v2)
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v16 = v8;
      v17 = *(_DWORD *)v16;
    }
    else
    {
      v17 = v14 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v4 = 1;
      v14 = v17;
    }
    v8 = (__int128 *)((char *)v8 + 24);
    v15 = (__int128 *)((char *)v15 + 24);
  }
  while ((v17 & 0x3F) == 0x10);
  v18 = *(_QWORD *)(*(_QWORD *)this + 64);
  v19 = *(_BYTE *)(v18 + 48);
  v20 = *(unsigned __int16 *)(v18 + 51) | (*(unsigned __int8 *)(v18 + 53) << 16);
  v21 = (int16x8_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vdupq_n_s32(v20) & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0);
  *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
  v22 = *(_DWORD *)(v18 + 54);
  v23 = *((unsigned __int8 *)this + 8);
  v52 = v15;
  v53 = (__int128 *)v2;
  while (1)
  {
    v24 = (__int128 *)((char *)v8 - 24);
    if ((unint64_t)v8 - 24 < v2 || (v4 & 1) != 0)
    {
      if ((unint64_t)v24 >= v2)
        v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v25 = *(_DWORD *)v24;
    }
    else
    {
      v25 = v14 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
      v4 = 1;
      v14 = v25;
    }
    if ((v25 & 0x3F) != 0x10)
      break;
    v52 = v8;
    v8 = (__int128 *)((char *)v8 + 24);
  }
  v43 = v19;
  *(int8x8_t *)v21.i8 = vand_s8(*(int8x8_t *)v21.i8, (int8x8_t)0x1000100010001);
  v44 = vmovn_s16(v21).u32[0];
  v45 = BYTE2(v20) & 1;
  v46 = (v20 & 0x400000) != 0;
  v47 = (v22 & 0x20000000) != 0;
  v48 = 0;
  v49 = 0;
  v50 = v23;
  v51 = 0x10000000000;
  if (v23)
  {
    WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v54, (WebCore::CSSParserTokenRange *)&v43, &v52, v12);
    v27 = v54;
    if (!v54)
    {
      v28 = WebCore::CSSSelectorParser::consumeCombinator(&v52, v26);
      if (v28 >= 2)
      {
        v38 = v28;
        WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v55, (WebCore::CSSParserTokenRange *)&v43, &v52, v29);
        v27 = v55;
        if (v55)
        {
          v39 = v55;
          do
          {
            v40 = (unsigned int **)v39;
            v39 = (WebCore::MutableCSSSelector *)*((_QWORD *)v39 + 1);
          }
          while (v39);
          **v40 = **v40 & 0xFFFFFFF0 | v38;
        }
      }
      else
      {
        v27 = 0;
      }
    }
  }
  else
  {
    WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v55, (WebCore::CSSParserTokenRange *)&v43, &v52, v12);
    v27 = v55;
  }
  if (!(_BYTE)v51 && v52 == v53)
  {
    if (!v27)
    {
      v30 = 0;
      goto LABEL_62;
    }
    v26 = *(WebCore::CSSParserTokenRange **)v27;
    *(_QWORD *)v27 = 0;
    v35 = v26;
    do
    {
      v36 = *(_DWORD *)v35;
      v35 = (WebCore::CSSParserTokenRange *)((char *)v35 + 16);
      v37 = v36 & 0x1FFF0;
    }
    while ((v36 & 0x80000) == 0 && v37 != 14480);
    v30 = v37 != 14480;
    v55 = 0;
    if (v26)
      std::default_delete<WebCore::CSSSelector>::operator()[abi:sn180100]((int)&v55, (WebCore::CSSSelector::RareData **)v26);
  }
  else
  {
    v30 = 0;
  }
  if (v27)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(v27, v26);
    WTF::fastFree(v31, v32);
  }
LABEL_62:
  v33 = v49;
  v49 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v33, v26);
      WTF::fastFree(v41, v42);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  return v30;
}

BOOL WebCore::CSSSupportsParser::consumeSupportsFontFormatFunction(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  _BOOL8 v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  WebCore::CSSPropertyParserHelpers::consumeFontFormat(this, (WebCore::CSSParserTokenRange *)1, &v7);
  if (!v7)
    return 0;
  v4 = WebCore::FontCustomPlatformData::supportsFormat((WebCore::FontCustomPlatformData *)&v7, v2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WebCore::CSSSupportsParser::consumeSupportsFontTechFunction(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  void *v2;
  WTF *v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v7;
  int v8;
  int v9;

  WebCore::CSSPropertyParserHelpers::consumeFontTech(this, (WebCore::CSSParserTokenRange *)1, (uint64_t)&v7);
  v3 = v7;
  if (v9)
  {
    v4 = *(char *)v7;
    if (v4 >= 0xB)
      v5 = 0;
    else
      v5 = dword_1969EFF34[v4];
  }
  else
  {
    v5 = 0;
    if (!v7)
      return v5;
  }
  v7 = 0;
  v8 = 0;
  WTF::fastFree(v3, v2);
  return v5;
}

WebCore::CSSTokenizer *WebCore::CSSTokenizer::tryCreate@<X0>(unsigned int **this@<X0>, const WTF::String *a2@<X1>, WebCore::CSSTokenizer **a3@<X8>)
{
  WebCore::CSSTokenizer *v7;
  WebCore::CSSTokenizer *result;
  WTF::StringImpl *v9;
  WTF *v10;
  void *v11;
  BOOL v12;

  v12 = 1;
  v7 = (WebCore::CSSTokenizer *)WTF::fastMalloc((WTF *)0x368);
  result = WebCore::CSSTokenizer::CSSTokenizer(v7, this, a2, &v12);
  if (!v12)
  {
    WebCore::CSSTokenizer::~CSSTokenizer(result, v9);
    WTF::fastFree(v10, v11);
    result = 0;
  }
  *a3 = result;
  return result;
}

char *WebCore::CSSParserObserverWrapper::addComment(WebCore::CSSParserObserverWrapper *this, unsigned int a2, unsigned int a3, int a4)
{
  char *result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  unint64_t v10;
  int v11;

  v10 = __PAIR64__(a3, a2);
  v11 = a4;
  result = (char *)this + 40;
  v6 = *((unsigned int *)this + 13);
  if ((_DWORD)v6 == *((_DWORD *)this + 12))
  {
    result = WTF::Vector<WebCore::ContentExtensions::ImmutableRange<char>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v6 + 1, (unint64_t)&v10);
    v7 = *((_QWORD *)this + 5) + 12 * *((unsigned int *)this + 13);
    v8 = *(char **)result;
    v9 = *((_DWORD *)result + 2);
  }
  else
  {
    v7 = *(_QWORD *)result + 12 * v6;
    v8 = (char *)v10;
    v9 = v11;
  }
  *(_DWORD *)(v7 + 8) = v9;
  *(_QWORD *)v7 = v8;
  ++*((_DWORD *)this + 13);
  return result;
}

_DWORD *WebCore::CSSParserObserverWrapper::addToken(WebCore::CSSParserObserverWrapper *this, int a2)
{
  _DWORD *result;
  uint64_t v4;
  int v5;

  v5 = a2;
  result = (_DWORD *)((char *)this + 16);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4 == *((_DWORD *)this + 6))
  {
    result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    *(_DWORD *)(*((_QWORD *)this + 2) + 4 * *((unsigned int *)this + 7)) = *result;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)result + 4 * v4) = a2;
  }
  ++*((_DWORD *)this + 7);
  return result;
}

uint64_t WebCore::CSSTokenizer::lessThan@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::CSSTokenizerInputStream *v3;
  uint64_t result;

  v3 = (WebCore::CSSTokenizerInputStream *)(a1 + 848);
  result = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(a1 + 848), 0);
  if ((_DWORD)result == 33
    && (result = WebCore::CSSTokenizerInputStream::peek(v3, 1u), (_DWORD)result == 45)
    && (result = WebCore::CSSTokenizerInputStream::peek(v3, 2u), (_DWORD)result == 45))
  {
    *(_QWORD *)v3 += 3;
    *(_QWORD *)a2 = (*(unsigned __int8 *)(a2 + 3) << 24) | 0x11u;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_DWORD *)a2 = (*(unsigned __int8 *)(a2 + 3) << 24) | 6;
    *(_DWORD *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 60;
  }
  return result;
}

uint64_t WebCore::CSSTokenizer::circumflexAccent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;

  result = WebCore::CSSTokenizer::consumeIfNext(a1, 61);
  v4 = *(unsigned __int8 *)(a2 + 3) << 24;
  if ((_DWORD)result)
  {
    v5 = v4 | 0xC;
  }
  else
  {
    v5 = v4 | 6;
    *(_WORD *)(a2 + 16) = 94;
  }
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t WebCore::CSSTokenizer::verticalLine@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(result + 848);
  if (v2 >= *(_QWORD *)(result + 856))
  {
LABEL_10:
    *(_DWORD *)a2 = (*(unsigned __int8 *)(a2 + 3) << 24) | 6;
    *(_DWORD *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 124;
    return result;
  }
  v3 = *(_QWORD *)(result + 864);
  if (*(_DWORD *)(v3 + 4) > v2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(result + 848);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      v6 = *(unsigned __int8 *)(v4 + v5);
    else
      v6 = *(unsigned __int16 *)(v4 + 2 * v5);
    if (v6 == 61)
    {
      *(_QWORD *)(result + 848) = v2 + 1;
      v7 = *(unsigned __int8 *)(a2 + 3);
      v8 = 11;
LABEL_9:
      *(_QWORD *)a2 = v8 | (v7 << 24);
      *(_QWORD *)(a2 + 8) = 0;
      return result;
    }
    if (v6 == 124)
    {
      *(_QWORD *)(result + 848) = v2 + 1;
      v7 = *(unsigned __int8 *)(a2 + 3);
      v8 = 15;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  result = 1161;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSTokenizer::tilde@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(result + 848);
  if (v2 >= *(_QWORD *)(result + 856))
  {
LABEL_7:
    *(_DWORD *)a2 = (*(unsigned __int8 *)(a2 + 3) << 24) | 6;
    *(_DWORD *)(a2 + 4) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 126;
    return result;
  }
  v3 = *(_QWORD *)(result + 864);
  if (*(_DWORD *)(v3 + 4) > v2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(result + 848);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      v6 = *(unsigned __int8 *)(v4 + v5);
    else
      v6 = *(unsigned __int16 *)(v4 + 2 * v5);
    if (v6 == 61)
    {
      *(_QWORD *)(result + 848) = v2 + 1;
      *(_QWORD *)a2 = (*(unsigned __int8 *)(a2 + 3) << 24) | 0xAu;
      *(_QWORD *)(a2 + 8) = 0;
      return result;
    }
    goto LABEL_7;
  }
  result = 1161;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSTokenizerInputStream::skipWhilePredicate<&(BOOL WTF::isASCIIDigit<char16_t>(char16_t))>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(unsigned int *)(v3 + 4);
  v6 = *a1;
  v7 = *a1 + a2;
  v8 = *(unsigned __int8 *)(v3 + 16);
  if ((v8 & 4) != 0)
  {
    while (v7 < v2)
    {
      if (v7 >= v5)
        goto LABEL_12;
      if (*(unsigned __int8 *)(v4 + v7) - 48 > 9)
        break;
      a2 = (a2 + 1);
      v7 = v6 + a2;
    }
  }
  else if (v7 < v2)
  {
    v8 = a2;
    while (v7 < v5)
    {
      if (*(unsigned __int16 *)(v4 + 2 * v7) - 48 > 9)
        return v8;
      v8 = (v8 + 1);
      v7 = v6 + v8;
      a2 = v8;
      if (v6 + v8 >= v2)
        return a2;
    }
LABEL_12:
    __break(1u);
    return v8;
  }
  return a2;
}

uint64_t WebCore::CSSTokenizer::consumeSingleWhitespaceIfNext(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;

  v1 = *(_QWORD *)(this + 848);
  if (v1 < *(_QWORD *)(this + 856))
  {
    v2 = *(_QWORD *)(this + 864);
    if (*(_DWORD *)(v2 + 4) <= v1)
    {
      this = 1161;
      __break(0xC471u);
      return this;
    }
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(this + 848);
    v5 = (*(_BYTE *)(v2 + 16) & 4) != 0 ? *(unsigned __int8 *)(v3 + v4) : *(unsigned __int16 *)(v3 + 2 * v4);
    if (v5 <= 0x20)
    {
      v6 = (unint64_t *)(this + 848);
      if (((1 << v5) & 0x100001600) != 0)
        goto LABEL_7;
      if (v5 == 13)
      {
        v8 = (unint64_t *)(this + 848);
        this = WebCore::CSSTokenizerInputStream::peek((WebCore::CSSTokenizerInputStream *)(this + 848), 1u);
        v6 = v8;
        v1 = *v8;
        if ((_DWORD)this == 10)
        {
          v7 = v1 + 2;
          goto LABEL_8;
        }
LABEL_7:
        v7 = v1 + 1;
LABEL_8:
        *v6 = v7;
      }
    }
  }
  return this;
}

uint64_t WTF::StringBuilder::append<char32_t>(WTF::StringBuilder *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  __int16 v5;

  v2 = a2;
  v3 = *((_QWORD *)a1 + 1);
  if (v3 || (v3 = *(_QWORD *)a1) != 0)
  {
    if (a2 <= 0xFF && (*(_DWORD *)(v3 + 16) & 4) != 0)
      goto LABEL_5;
  }
  else if (a2 <= 0xFF)
  {
LABEL_5:
    result = MEMORY[0x19AEA4824]();
    if (result)
      *(_BYTE *)result = v2;
    return result;
  }
  result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    if (HIWORD(v2))
    {
      v5 = v2 & 0x3FF | 0xDC00;
      v2 = (v2 >> 10) - 10304;
      *(_WORD *)(result + 2) = v5;
    }
    *(_WORD *)result = v2;
  }
  return result;
}

unint64_t WebCore::CSSVariableParser::parseDeclarationValue@<X0>(unint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, const WebCore::CSSParserContext *a4@<X3>, uint64_t *a5@<X8>)
{
  _DWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  char v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;
  _DWORD *v19;
  char *v20[2];
  uint64_t v21;

  v20[0] = a2;
  v20[1] = a3;
  if (a3 == a2
    || (v7 = (_DWORD **)result, result = WebCore::classifyVariableRange((__int128 *)a2, (__int128 *)a3), !HIWORD(result)))
  {
    *a5 = 0;
  }
  else if ((result & 0xFF0000) != 0)
  {
    return WebCore::CSSCustomPropertyValue::createWithID(v7, result, a5);
  }
  else if ((result & 0xFF00000000) != 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x40);
    v9 = WTF::fastMalloc((WTF *)0x60);
    v10 = WebCore::CSSVariableData::CSSVariableData(v9, v20, a4);
    *(_DWORD *)v8 = 2;
    v11 = (((*(unsigned __int8 *)(v8 + 6) >> 2) & 0x3F) << 18) | 0x10000;
    *(_WORD *)(v8 + 4) = -16384;
    *(_BYTE *)(v8 + 6) = BYTE2(v11);
    v21 = 0;
    *(_QWORD *)(v8 + 8) = v10;
    *(_QWORD *)(v8 + 16) = 0;
    *(_BYTE *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = 0;
    WebCore::CSSVariableReferenceValue::cacheSimpleReference((WebCore::CSSVariableReferenceValue *)v8);
    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v21, v12);
    result = WTF::fastCompactMalloc((WTF *)0x60);
    *(_DWORD *)result = 2;
    v13 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = -6144;
    *(_BYTE *)(result + 6) = v13 & 0xFC;
    v14 = *v7;
    if (*v7)
      *v14 += 2;
    *(_QWORD *)(result + 8) = v14;
    *(_QWORD *)(result + 24) = v8;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *a5 = result;
  }
  else
  {
    v15 = WTF::fastMalloc((WTF *)0x60);
    WebCore::CSSVariableData::CSSVariableData(v15, v20, a4);
    v16 = WTF::fastCompactMalloc((WTF *)0x60);
    v21 = 0;
    *(_DWORD *)v16 = 2;
    v18 = *(_BYTE *)(v16 + 6);
    *(_WORD *)(v16 + 4) = -6144;
    *(_BYTE *)(v16 + 6) = v18 & 0xFC;
    v19 = *v7;
    if (*v7)
      *v19 += 2;
    *(_QWORD *)(v16 + 8) = v19;
    *(_QWORD *)(v16 + 24) = v15;
    *(_DWORD *)(v16 + 72) = 2;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = 0;
    *a5 = v16;
    return (unint64_t)WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v21, v17);
  }
  return result;
}

unint64_t WebCore::CSSVariableParser::parseInitialValueForUniversalSyntax@<X0>(unint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  char *v15[2];

  v15[0] = a2;
  v15[1] = a3;
  if (a3 == a2
    || (v7 = (_DWORD **)result,
        WebCore::strictCSSParserContext((WebCore *)result),
        result = WebCore::classifyVariableRange((__int128 *)a2, (__int128 *)a3),
        !HIWORD(result))
    || (result & 0xFF00FF0000) != 0)
  {
    *a4 = 0;
  }
  else
  {
    v8 = WebCore::strictCSSParserContext((WebCore *)result);
    v9 = WTF::fastMalloc((WTF *)0x60);
    WebCore::CSSVariableData::CSSVariableData(v9, v15, (const WebCore::CSSParserContext *)v8);
    v10 = WTF::fastCompactMalloc((WTF *)0x60);
    v14 = 0;
    *(_DWORD *)v10 = 2;
    v12 = *(_BYTE *)(v10 + 6);
    *(_WORD *)(v10 + 4) = -6144;
    *(_BYTE *)(v10 + 6) = v12 & 0xFC;
    v13 = *v7;
    if (*v7)
      *v13 += 2;
    *(_QWORD *)(v10 + 8) = v13;
    *(_QWORD *)(v10 + 24) = v9;
    *(_DWORD *)(v10 + 72) = 2;
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 88) = 0;
    *a4 = v10;
    return (unint64_t)WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v14, v11);
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpersWorkerSafe::consumeAndAppendOptionalDelimiter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v9;
  uint64_t v10;

  v3 = *(__int128 **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v3 & 0x3F) != 6)
    return 0;
  v4 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (*((_WORD *)v4 + 8) != 63)
    return 0;
  if (*(_QWORD *)a2 == v2)
  {
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
    }
  }
  else
  {
    *(_QWORD *)a2 += 24;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5
    && ((v6 = *(unsigned int *)(a1 + 16), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a1 == 0)
      : (v7 = 0),
        v7))
  {
    v9 = *(_DWORD *)(v5 + 16);
    v10 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(a1 + 16) = v6 + 1;
    if ((v9 & 4) != 0)
      *(_BYTE *)(v10 + v6) = 63;
    else
      *(_WORD *)(v10 + 2 * v6) = 63;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  return 1;
}

void std::default_delete<WebCore::CSSSelector>::operator()[abi:sn180100](int a1, WebCore::CSSSelector::RareData **this)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  if (this)
  {
    if ((*(_DWORD *)this & 0x100000) != 0)
    {
      WTF::RefCounted<WebCore::CSSSelector::RareData>::deref(this[1]);
      this[1] = 0;
      v4 = *(_DWORD *)this & 0xFFEFFFFF;
    }
    else
    {
      v3 = this[1];
      if ((*(_DWORD *)this & 0x1F0) != 0x10)
      {
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, (WTF::StringImpl *)this);
          else
            *(_DWORD *)v3 -= 2;
          this[1] = 0;
        }
        goto LABEL_5;
      }
      if (*(_DWORD *)v3 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v3);
        WTF::fastFree(v5, v6);
      }
      else
      {
        --*(_DWORD *)v3;
      }
      this[1] = 0;
      v4 = *(_DWORD *)this & 0xFFFFFE0F;
    }
    *(_DWORD *)this = v4;
LABEL_5:
    WTF::fastFree((WTF *)this, this);
  }
}

uint64_t WebCore::isPseudoClassValidAfterPseudoElement(unsigned int a1, int a2)
{
  uint64_t result;
  BOOL v4;
  unint64_t v5;
  BOOL v6;

  result = 1;
  if ((a1 - 34 > 0x30 || ((1 << (a1 - 34)) & 0x1000000010101) == 0) && a1 != 6)
  {
    result = 0;
    switch(a2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        result = WebCore::isScrollbarPseudoClass(a1);
        break;
      case 17:
        v6 = ((0x1F8300019000000uLL >> a1) & 1) == 0 || a1 > 0x38;
        result = v6 && a1 != 68;
        break;
      case 18:
        v4 = a1 == 83;
        goto LABEL_7;
      case 22:
      case 23:
      case 24:
      case 25:
        v4 = a1 == 55;
LABEL_7:
        result = v4;
        break;
      case 26:
      case 27:
      case 28:
        v6 = a1 > 0x25;
        v5 = (0x20E0000800uLL >> a1) & 1;
        if (v6)
          result = 0;
        else
          result = v5;
        break;
      default:
        return result;
    }
  }
  return result;
}

BOOL WebCore::isScrollbarPseudoClass(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 11) > 0x3F || ((1 << (a1 - 11)) & 0xC00000401500D8C1) == 0)
    return a1 == 79 || a1 == 83;
  return result;
}

uint64_t WebCore::consumePossiblyQuotedIdentifier(uint64_t this, __int128 **a2)
{
  uint64_t v2;
  unint64_t v3;
  __int128 *v4;
  __int128 *v5;
  char v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;

  v2 = this;
  v4 = *a2;
  v3 = (unint64_t)a2[1];
  if (*a2 == (__int128 *)v3)
  {
    v6 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v5 = *a2;
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v5 = (__int128 *)((char *)v4 + 24);
    *a2 = (__int128 *)((char *)v4 + 24);
  }
  while (1)
  {
    if ((unint64_t)v5 < v3 || (v6 & 1) != 0)
    {
      if ((unint64_t)v5 >= v3)
        v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v7 = *(_DWORD *)v5;
    }
    else
    {
      v7 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v7;
      v6 = 1;
    }
    if ((v7 & 0x3F) != 0x10)
      break;
    v5 = (__int128 *)((char *)*a2 + 24);
    *a2 = v5;
  }
  v8 = *(_DWORD *)v4 & 0x3F;
  if (v8)
    v9 = v8 == 28;
  else
    v9 = 1;
  if (!v9
    || (v10 = *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32),
        this = WTF::StringView::startsWith(),
        (_DWORD)this))
  {
    *(_QWORD *)v2 = 0;
    *(_BYTE *)(v2 + 8) = 0;
  }
  else
  {
    if (BYTE4(v10))
      this = WTF::AtomStringImpl::add();
    else
      this = WTF::AtomStringImpl::add();
    *(_QWORD *)v2 = v11;
    *(_BYTE *)(v2 + 8) = (*(_DWORD *)v4 & 0x3F) == 28;
  }
  return this;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::PossiblyQuotedIdentifier>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::parseInteger<int>(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0)
    return WTF::parseInteger<int,unsigned char>(a1, a2, 10, 0);
  else
    return WTF::parseInteger<int,char16_t>(a1, a2, 10, 0);
}

uint64_t WebCore::isValidConstantReference(__int128 *a1, __int128 *a2)
{
  char v2;
  unsigned int v3;
  __int128 *v4;
  unsigned int v5;
  __int128 *v6;
  char *v7;
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  __int128 *v12;
  BOOL v13;
  char v14;
  char v15;
  char v16;
  unsigned int v17;
  __int128 *v18;
  int v19;

  v3 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if (a1 < a2 || (v2 & 1) != 0)
    {
      if (a1 >= a2)
        v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v4 = a1;
      v5 = *(_DWORD *)v4;
    }
    else
    {
      v5 = v3 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v5;
      v2 = 1;
      v3 = v5;
    }
    a1 = (__int128 *)((char *)a1 + 24);
  }
  while ((v5 & 0x3F) == 0x10);
  v6 = (__int128 *)((char *)a1 - 24);
  if ((__int128 *)((char *)a1 - 24) == a2)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v2 & 1) == 0)
    {
      v3 = v3 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v3;
    }
    v2 = 1;
    a1 = a2;
  }
  v7 = (char *)a1 - 24;
  do
  {
    v8 = a1;
    if (a1 < a2 || (v2 & 1) != 0)
    {
      if (a1 >= a2)
        v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v9 = a1;
      v10 = *(_DWORD *)v9;
    }
    else
    {
      v10 = v3 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
      v2 = 1;
      v3 = v10;
    }
    a1 = (__int128 *)((char *)a1 + 24);
    v7 += 24;
  }
  while ((v10 & 0x3F) == 0x10);
  if ((*(_BYTE *)v6 & 0x3F) != 0)
    return 0;
  v12 = v8;
  if (v8 == a2)
    return 1;
  v13 = v8 >= a2;
  v14 = !v13;
  v15 = v14 | v2;
  if (v13)
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  if ((v15 & 1) != 0)
  {
    v16 = v13 | v2;
  }
  else
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v3 & 0xFF000000 | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v16 = 1;
    v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  if ((*(_DWORD *)v12 & 0x3F) != 0x15)
    return 0;
  v17 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if (a1 < a2 || (v16 & 1) != 0)
    {
      if (a1 >= a2)
        v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v18 = a1;
      v19 = *(_DWORD *)v18;
    }
    else
    {
      v17 = v17 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v17;
      v16 = 1;
      LOBYTE(v19) = v17;
    }
    a1 = (__int128 *)((char *)a1 + 24);
    v7 += 24;
  }
  while ((v19 & 0x3F) == 0x10);
  if ((__int128 *)((char *)a1 - 24) == a2)
    return 1;
  else
    return WebCore::classifyBlock(v7);
}

WebCore::MutableCSSSelector *WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>(WebCore::CSSParserTokenRange &,WebCore::CSSSelectorParser::consumeComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0 &&)::{lambda(void)#1}::operator()(__int128 ***a1)
{
  __int128 **v2;
  __int128 **v3;
  char *v4;
  __int128 *v5;
  void *v6;
  WebCore::MutableCSSSelector *v7;
  WTF *v8;
  void *v9;
  __int128 *v10;
  __int128 *v11;
  WebCore::MutableCSSSelector *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  char v21;
  __int128 *v22;
  unsigned int v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 *v28;
  char *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF *v42;
  void *v43;
  WebCore::MutableCSSSelector *result;
  WTF *v45;
  void *v46;
  WebCore::MutableCSSSelector *v47;
  WTF::StringImpl *v48;
  char *v49[2];
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;

  v2 = a1[2];
  v3 = *a1;
  v5 = **a1;
  v4 = (char *)(*a1)[1];
  WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v47, (WebCore::CSSParserTokenRange *)*a1[1]);
  if (*((_BYTE *)v2 + 25) && !*((_BYTE *)v2 + 30))
  {
    v7 = v47;
    v47 = 0;
    if (v7)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v7, v6);
      WTF::fastFree(v8, v9);
    }
    *((_BYTE *)v2 + 25) = 0;
  }
  v10 = **a1;
  v11 = (*a1)[1];
  if (v10 != v11)
  {
    if (v10 >= v11)
    {
      v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0x15)
      goto LABEL_12;
  }
  v12 = v47;
  if (v47)
  {
    v13 = (uint64_t)a1[3];
    v14 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v14 == *(_DWORD *)(v13 + 8))
    {
      v15 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v47);
      v16 = *(unsigned int *)(v13 + 12);
      v17 = *(_QWORD *)v13;
      v18 = *v15;
      *v15 = 0;
      *(_QWORD *)(v17 + 8 * v16) = v18;
      *(_DWORD *)(v13 + 12) = v16 + 1;
    }
    else
    {
      v35 = *(_QWORD *)v13;
      v47 = 0;
      *(_QWORD *)(v35 + 8 * v14) = v12;
      *(_DWORD *)(v13 + 12) = v14 + 1;
    }
  }
  else
  {
LABEL_12:
    v20 = **a1;
    v19 = (*a1)[1];
    if (v20 != v19)
    {
      do
      {
        if (v20 < v19 || (v21 & 1) != 0)
        {
          v22 = v20 >= v19 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v20;
          v23 = *(_DWORD *)v22;
        }
        else
        {
          v23 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v23;
          v21 = 1;
        }
        if ((v23 & 0x3F) == 0x15)
          break;
        v24 = **a1;
        v19 = (*a1)[1];
        if (v24 == v19)
        {
          if ((v21 & 1) != 0)
            break;
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v21 = 1;
          v20 = **a1;
          v19 = (*a1)[1];
        }
        else
        {
          v20 = (__int128 *)((char *)v24 + 24);
          **a1 = v20;
        }
      }
      while (v20 != v19);
    }
    if (!*((_BYTE *)v2 + 30))
    {
      v25 = (uint64_t)a1[3];
      v26 = WTF::fastMalloc((WTF *)0x10);
      v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v27 = 786433;
      v27[1] = 0;
      *(_QWORD *)v26 = v27;
      *(_QWORD *)(v26 + 8) = 0;
      v28 = *v3;
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      }
      if (v5 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
        v29 = v4;
      else
        v29 = (char *)v5;
      if (v28 != &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
        v4 = (char *)v28;
      v49[0] = v29;
      v49[1] = v4;
      **(_DWORD **)v26 = **(_DWORD **)v26 & 0xFFFFFE0F | 0x100;
      WebCore::CSSParserTokenRange::serialize(v49, 0, &v48);
      v30 = v48;
      v48 = 0;
      if (v30)
      {
        v50 = v30;
        if ((*((_BYTE *)v30 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v32 = v50;
          v30 = v51;
          v50 = 0;
          v51 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v31);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
      }
      v51 = v30;
      WebCore::CSSSelector::setValue(*(WTF::StringImpl ***)v26, (const WTF::AtomString *)&v51, 0);
      v33 = v51;
      v51 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = v48;
      v48 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v34 -= 2;
      }
      while (v29 != v4)
      {
        if ((*(_DWORD *)v29 & 0x3F) == 6 && *((_WORD *)v29 + 8) == 38)
        {
          **(_DWORD **)v26 = **(_DWORD **)v26 & 0xFFFFFE0F | 0x110;
          break;
        }
        v29 += 24;
      }
      v51 = (WTF::StringImpl *)v26;
      v36 = *(unsigned int *)(v25 + 12);
      if ((_DWORD)v36 == *(_DWORD *)(v25 + 8))
      {
        v37 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25, v36 + 1, (unint64_t)&v51);
        v38 = *(unsigned int *)(v25 + 12);
        v39 = *(_QWORD *)v25;
        v40 = *v37;
        *v37 = 0;
        *(_QWORD *)(v39 + 8 * v38) = v40;
        v41 = v51;
        *(_DWORD *)(v25 + 12) = v38 + 1;
        v51 = 0;
        if (v41)
        {
          WebCore::MutableCSSSelector::~MutableCSSSelector(v41, v6);
          WTF::fastFree(v42, v43);
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v25 + 8 * v36) = v26;
        *(_DWORD *)(v25 + 12) = v36 + 1;
      }
    }
  }
  result = v47;
  v47 = 0;
  if (result)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(result, v6);
    return (WebCore::MutableCSSSelector *)WTF::fastFree(v45, v46);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSSelectorParser::consumeForgivingSelectorList<WebCore::CSSSelectorParser::consumeNestedComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0>(WebCore::CSSParserTokenRange &,WebCore::CSSSelectorParser::consumeNestedComplexForgivingSelectorList(WebCore::CSSParserTokenRange &)::$_0 &&)::{lambda(void)#1}::operator()(__int128 ***a1, uint64_t a2, uint64_t a3, WTF::AtomString *a4)
{
  __int128 **v5;
  __int128 **v6;
  char *v7;
  __int128 *v8;
  WebCore::CSSParserTokenRange *v9;
  WTF::StringImpl *result;
  WebCore::CSSParserTokenRange *v11;
  WTF::StringImpl *v12;
  WTF::AtomString *v13;
  int v14;
  char *v15;
  _DWORD **v16;
  __int128 *v17;
  __int128 *v18;
  WTF *v19;
  void *v20;
  __int128 **v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  char v28;
  __int128 *v29;
  unsigned int v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 *v35;
  __int128 *v36;
  char *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  void *v50;
  WebCore::MutableCSSSelector *v51;
  WTF::StringImpl *v52;
  char *v53[2];
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;

  v5 = a1[2];
  v6 = *a1;
  v8 = **a1;
  v7 = (char *)(*a1)[1];
  v9 = (WebCore::CSSParserTokenRange *)*a1[1];
  result = WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)&v55, v9, *a1, a4);
  v12 = v55;
  if (!v55)
  {
    result = (WTF::StringImpl *)WebCore::CSSSelectorParser::consumeCombinator(v6, v11);
    if (result >= 2)
    {
      v14 = (int)result;
      result = WebCore::CSSSelectorParser::consumeComplexSelector((WebCore::CSSSelectorParser *)v53, v9, v6, v13);
      v12 = (WTF::StringImpl *)v53[0];
      if (v53[0])
      {
        v15 = v53[0];
        do
        {
          v16 = (_DWORD **)v15;
          v15 = (char *)*((_QWORD *)v15 + 1);
        }
        while (v15);
        **v16 = **v16 & 0xFFFFFFF0 | v14;
      }
    }
    else
    {
      v12 = 0;
    }
  }
  v51 = v12;
  if (*((_BYTE *)v5 + 25) && !*((_BYTE *)v5 + 30))
  {
    v51 = 0;
    if (v12)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v12, v11);
      result = (WTF::StringImpl *)WTF::fastFree(v19, v20);
    }
    v12 = 0;
    *((_BYTE *)v5 + 25) = 0;
    v17 = **a1;
    v18 = (*a1)[1];
    if (v17 == v18)
    {
LABEL_37:
      if (!*((_BYTE *)v5 + 30))
      {
        v32 = (uint64_t)a1[3];
        v33 = WTF::fastMalloc((WTF *)0x10);
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v34 = 786433;
        v34[1] = 0;
        *(_QWORD *)v33 = v34;
        *(_QWORD *)(v33 + 8) = 0;
        v35 = *v6;
        {
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        }
        if (v8 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
          v36 = (__int128 *)v7;
        else
          v36 = v8;
        if (v35 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
          v37 = v7;
        else
          v37 = (char *)v35;
        v53[0] = (char *)v36;
        v53[1] = v37;
        **(_DWORD **)v33 = **(_DWORD **)v33 & 0xFFFFFE0F | 0x100;
        WebCore::CSSParserTokenRange::serialize(v53, 0, &v52);
        v38 = v52;
        v52 = 0;
        if (v38)
        {
          v54 = v38;
          if ((*((_BYTE *)v38 + 16) & 0x10) == 0)
          {
            WTF::AtomStringImpl::addSlowCase();
            v40 = v54;
            v38 = v55;
            v54 = 0;
            v55 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v39);
              else
                *(_DWORD *)v40 -= 2;
            }
          }
        }
        v55 = v38;
        WebCore::CSSSelector::setValue(*(WTF::StringImpl ***)v33, (const WTF::AtomString *)&v55, 0);
        v41 = v55;
        v55 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v11);
          else
            *(_DWORD *)v41 -= 2;
        }
        result = v52;
        v52 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
        while (v36 != (__int128 *)v37)
        {
          if ((*(_DWORD *)v36 & 0x3F) == 6 && *((_WORD *)v36 + 8) == 38)
          {
            **(_DWORD **)v33 = **(_DWORD **)v33 & 0xFFFFFE0F | 0x110;
            break;
          }
          v36 = (__int128 *)((char *)v36 + 24);
        }
        v55 = (WTF::StringImpl *)v33;
        v42 = *(unsigned int *)(v32 + 12);
        if ((_DWORD)v42 == *(_DWORD *)(v32 + 8))
        {
          v43 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v42 + 1, (unint64_t)&v55);
          v44 = *(unsigned int *)(v32 + 12);
          v45 = *(_QWORD *)v32;
          v46 = *v43;
          *v43 = 0;
          *(_QWORD *)(v45 + 8 * v44) = v46;
          result = v55;
          *(_DWORD *)(v32 + 12) = v44 + 1;
          v55 = 0;
          if (result)
          {
            WebCore::MutableCSSSelector::~MutableCSSSelector(result, v11);
            result = (WTF::StringImpl *)WTF::fastFree(v47, v48);
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v32 + 8 * v42) = v33;
          *(_DWORD *)(v32 + 12) = v42 + 1;
        }
      }
      goto LABEL_67;
    }
    goto LABEL_16;
  }
  v17 = **a1;
  v18 = (*a1)[1];
  if (v17 != v18)
  {
LABEL_16:
    if (v17 >= v18)
    {
      v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if (!v12 || (*(_DWORD *)v17 & 0x3F) != 0x15)
    {
      v27 = **a1;
      v26 = (*a1)[1];
      if (v27 != v26)
      {
        while (1)
        {
          if (v27 < v26 || (v28 & 1) != 0)
          {
            v29 = v27 >= v26 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v27;
            v30 = *(_DWORD *)v29;
          }
          else
          {
            v30 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
            v28 = 1;
          }
          if ((v30 & 0x3F) == 0x15)
            break;
          v31 = **a1;
          v26 = (*a1)[1];
          if (v31 == v26)
          {
            if ((v28 & 1) != 0)
              goto LABEL_37;
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v28 = 1;
            v27 = **a1;
            v26 = (*a1)[1];
          }
          else
          {
            v27 = (__int128 *)((char *)v31 + 24);
            **a1 = v27;
          }
          if (v27 == v26)
            goto LABEL_37;
        }
      }
      goto LABEL_37;
    }
    goto LABEL_19;
  }
  if (!v12)
    goto LABEL_37;
LABEL_19:
  v21 = a1[3];
  v22 = *((unsigned int *)v21 + 3);
  if ((_DWORD)v22 != *((_DWORD *)v21 + 2))
  {
    *((_QWORD *)*v21 + v22) = v12;
    *((_DWORD *)v21 + 3) = v22 + 1;
    return result;
  }
  result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1[3], v22 + 1, (unint64_t)&v51);
  v23 = *((unsigned int *)v21 + 3);
  v24 = *v21;
  v25 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *((_QWORD *)v24 + v23) = v25;
  *((_DWORD *)v21 + 3) = v23 + 1;
  v12 = v51;
LABEL_67:
  v51 = 0;
  if (v12)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(v12, v11);
    return (WTF::StringImpl *)WTF::fastFree(v49, v50);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PossiblyQuotedIdentifier>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  v7 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v6 = v7;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(result + 8);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = v11;
      v14 = v5;
      do
      {
        v15 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)v13 = v15;
        *(_BYTE *)(v13 + 8) = *((_BYTE *)v14 + 8);
        WebCore::ContentType::~ContentType((WTF::StringImpl **)v14, v12);
        v14 = (WTF *)(v16 + 16);
        v13 += 16;
      }
      while (v14 != (WTF *)((char *)v5 + 16 * v10));
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::PossiblyQuotedIdentifier,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        result = (uint64_t)v7;
        do
        {
          v11 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v10 = v11;
          *(_BYTE *)(v10 + 8) = *(_BYTE *)(result + 8);
          WebCore::ContentType::~ContentType((WTF::StringImpl **)result, v9);
          result = v12 + 16;
          v10 += 16;
        }
        while ((WTF *)result != (WTF *)((char *)v7 + 16 * v8));
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned int **WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector<0ul,WTF::CrashOnOverflow>(unsigned int **a1, uint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  void *v15;

  *a1 = 0;
  v3 = *(WTF **)a2;
  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if ((_DWORD)v4)
  {
    v5 = (unsigned int *)WTF::fastMalloc((WTF *)((16 * v4) | 8));
    v6 = v5;
    v7 = 0;
    *v5 = v4;
    do
    {
      v8 = &v5[v7 / 4];
      v9 = (_QWORD *)((char *)v3 + v7);
      v10 = *(_QWORD *)((char *)v3 + v7);
      *v9 = 0;
      *((_QWORD *)v8 + 1) = v10;
      *((_BYTE *)v8 + 16) = *((_BYTE *)v3 + v7 + 8);
      v7 += 16;
    }
    while (v9 + 2 != (_QWORD *)((char *)v3 + 16 * v4));
    v11 = 0;
    v12 = 16 * v4;
    do
    {
      v13 = *(WTF::StringImpl **)((char *)v3 + v11);
      *(_QWORD *)((char *)v3 + v11) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 16;
    }
    while (v12 != v11);
    if (v3)
    {
      WTF::fastFree(v3, (void *)a2);
      v3 = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  v14 = *a1;
  *a1 = v6;
  if (v14)
  {
    WTF::VectorTypeOperations<WebCore::PossiblyQuotedIdentifier>::destruct((WTF::StringImpl *)(v14 + 2), (WTF::StringImpl *)&v14[4 * *v14 + 2]);
    WTF::fastFree((WTF *)v14, v15);
  }
  if (v3)
    WTF::fastFree(v3, (void *)a2);
  return a1;
}

uint64_t WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF *v14;

  if (a3)
  {
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * a3) | 8));
    v9 = v7;
    *v7 = a3;
    if ((_DWORD)a3)
      bzero(v7 + 2, 16 * a3);
    v14 = 0;
    *a1 = v9;
    WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::~FixedVector(&v14, v8);
    v10 = 0;
    v11 = 16 * a3;
    v12 = -1;
    while (*(_DWORD *)*a1 > ++v12)
    {
      v13 = v10 + 16;
      WebCore::PossiblyQuotedIdentifier::operator=(*a1 + v10 + 8, (WTF::StringImpl *)(a2 + v10));
      v10 = v13;
      if (v11 == v13)
        return (uint64_t)a1;
    }
    result = 146;
    __break(0xC471u);
  }
  else
  {
    *a1 = 0;
    return (uint64_t)a1;
  }
  return result;
}

uint64_t WebCore::PossiblyQuotedIdentifier::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t WTF::VectorBuffer<WebCore::CSSParserToken,32ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  uint64_t v5;

  if (a2 < 0x21)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 32;
  }
  else
  {
    if (a2 > 0xAAAAAAA)
      return 0;
    v3 = 24 * a2;
    WTF::tryFastMalloc((WTF *)(24 * a2));
    if (!v5)
      return 0;
    *(_DWORD *)(a1 + 8) = v3 / 0x18;
    *(_QWORD *)a1 = v5;
  }
  return 1;
}

BOOL WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,WebCore::CSSParserToken&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  if (v3)
  {
    v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
    v5 = *(_OWORD *)v3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v5;
    ++*(_DWORD *)(a1 + 12);
  }
  return v3 != 0;
}

uint64_t WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  __int128 v10;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(WTF **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    result = WTF::VectorBuffer<WebCore::CSSParserToken,32ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2);
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)v4)
    {
      v7 = *(WTF **)a1;
      v8 = 24 * v4;
      v9 = v3;
      do
      {
        v10 = *(_OWORD *)v9;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v7 = v10;
        v7 = (WTF *)((char *)v7 + 24);
        v9 = (WTF *)((char *)v9 + 24);
        v8 -= 24;
      }
      while (v8);
    }
    if ((WTF *)(a1 + 16) != v3 && v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v6);
    }
  }
  return 1;
}

_DWORD *WTF::Vector<WebCore::CSSParserTokenType,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSParserTokenType&>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;
  uint64_t v4;

  result = (_DWORD *)WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WebCore::MutableCSSSelector::parsePagePseudoSelector@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  _QWORD *v7;
  int v8;

  if ((_DWORD)a2 != 5)
  {
    if ((_DWORD)a2 == 4)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)result & 0xDF) != 0x4C
          || (*(_BYTE *)(result + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(result + 2) & 0xDF) != 0x46)
        {
          goto LABEL_3;
        }
        v5 = *(unsigned __int8 *)(result + 3);
      }
      else
      {
        if ((*(_WORD *)result & 0xFFDF) != 0x4C
          || (*(_WORD *)(result + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(result + 4) & 0xFFDF) != 0x46)
        {
          goto LABEL_3;
        }
        v5 = *(unsigned __int16 *)(result + 6);
      }
      if ((v5 & 0xFFFFFFDF) == 0x54)
      {
        v4 = 512;
        goto LABEL_25;
      }
    }
LABEL_3:
    *a3 = 0;
    return result;
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    v8 = *(_WORD *)result & 0xFFDF;
    if (v8 == 70)
    {
      if ((*(_WORD *)(result + 2) & 0xFFDF) != 0x49
        || (*(_WORD *)(result + 4) & 0xFFDF) != 0x52
        || (*(_WORD *)(result + 6) & 0xFFDF) != 0x53
        || (*(_WORD *)(result + 8) & 0xFFDF) != 0x54)
      {
        goto LABEL_3;
      }
      goto LABEL_10;
    }
    if (v8 != 82
      || (*(_WORD *)(result + 2) & 0xFFDF) != 0x49
      || (*(_WORD *)(result + 4) & 0xFFDF) != 0x47
      || (*(_WORD *)(result + 6) & 0xFFDF) != 0x48)
    {
      goto LABEL_3;
    }
    v6 = *(unsigned __int16 *)(result + 8);
LABEL_23:
    if ((v6 & 0xFFFFFFDF) == 0x54)
    {
      v4 = 1024;
      goto LABEL_25;
    }
    goto LABEL_3;
  }
  if ((*(_BYTE *)result & 0xDF) != 0x46
    || (*(_BYTE *)(result + 1) & 0xDF) != 0x49
    || (*(_BYTE *)(result + 2) & 0xDF) != 0x52
    || (*(_BYTE *)(result + 3) & 0xDF) != 0x53
    || (*(_BYTE *)(result + 4) & 0xDF) != 0x54)
  {
    if ((*(_BYTE *)result & 0xDF) != 0x52
      || (*(_BYTE *)(result + 1) & 0xDF) != 0x49
      || (*(_BYTE *)(result + 2) & 0xDF) != 0x47
      || (*(_BYTE *)(result + 3) & 0xDF) != 0x48)
    {
      goto LABEL_3;
    }
    v6 = *(unsigned __int8 *)(result + 4);
    goto LABEL_23;
  }
LABEL_10:
  v4 = 0;
LABEL_25:
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  result = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)result = 786433;
  *(_QWORD *)(result + 8) = 0;
  *v7 = result;
  v7[1] = 0;
  *a3 = v7;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFE0F | 0xD0;
  *(_DWORD *)*v7 = *(_DWORD *)*v7 & 0xFFFE01FF | v4;
  return result;
}

WTF::StringImpl *WebCore::MutableCSSSelector::parsePseudoElementSelector@<X0>(WTF::StringImpl *result@<X0>, WTF::StringImpl *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int16 *v7;
  unsigned __int16 PseudoElementName;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl *v12;
  const char *v13;
  unint64_t v14;
  _QWORD v15[2];
  WTF::StringImpl *v16[2];

  v15[0] = result;
  v15[1] = a2;
  v16[0] = result;
  v16[1] = a2;
  if (!(_DWORD)a2)
    goto LABEL_11;
  v7 = (unsigned __int16 *)result;
  PseudoElementName = WebCore::findPseudoElementName(result, (const char *)a2);
  if (PseudoElementName < 0x100u)
  {
    result = (WTF::StringImpl *)WTF::StringView::startsWithIgnoringASCIICase();
    if ((result & 1) != 0)
    {
      v9 = 28;
      goto LABEL_4;
    }
LABEL_11:
    *a4 = 0;
    return result;
  }
  v9 = PseudoElementName;
  result = (WTF::StringImpl *)WebCore::CSSSelector::isPseudoElementEnabled(PseudoElementName, (uint64_t)v7, (uint64_t)a2, a3);
  if ((result & 1) == 0)
    goto LABEL_11;
LABEL_4:
  v10 = WTF::fastMalloc((WTF *)0x10);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = 786433;
  v11[1] = 0;
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = 0;
  *a4 = v10;
  *(_DWORD *)v11 = *(_DWORD *)v11 & 0xFFFFFE0F | 0x90;
  **(_DWORD **)v10 = **(_DWORD **)v10 & 0xFFFE01FF | (v9 << 9);
  if (v9 == 27)
  {
    v13 = WebCore::CSSSelector::nameForUserAgentPartLegacyAlias(v7, (uint64_t)a2);
    WTF::AtomString::AtomString(v16, (uint64_t)v13, v14);
  }
  else
  {
    WTF::StringView::convertToASCIILowercaseAtom((WTF::StringView *)v15);
  }
  WebCore::CSSSelector::setValue(*(WTF::StringImpl ***)v10, (const WTF::AtomString *)v16, 0);
  result = v16[0];
  v16[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

const char *WebCore::CSSSelector::nameForUserAgentPartLegacyAlias(unsigned __int16 *a1, uint64_t a2)
{
  if ((WTF::equalLettersIgnoringASCIICase(a1, a2, "-webkit-file-upload-button", 0x1BuLL) & 1) != 0)
    return "file-selector-button";
  if (WTF::equalLettersIgnoringASCIICase(a1, a2, "-webkit-input-placeholder", 0x1AuLL))
    return "placeholder";
  return "";
}

uint64_t WebCore::MutableCSSSelector::parsePseudoClassSelector@<X0>(WebCore::SelectorPseudoClassAndCompatibilityElementMapHash *a1@<X0>, const char *a2@<X1>, _BYTE *a3@<X2>, WTF::StringImpl ****a4@<X8>)
{
  uint64_t result;
  int v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  result = WebCore::findPseudoClassAndCompatibilityElementName(a1, a2);
  v7 = result;
  if ((result & 0xFF00) != 0)
  {
    switch((char)result)
    {
      case 0:
        result = (uint64_t)WebCore::DeprecatedGlobalSettings::shared((WebCore::DeprecatedGlobalSettings *)result);
        if (!*(_BYTE *)(result + 25))
          break;
        goto LABEL_7;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        if (*a3 != 4)
          break;
        goto LABEL_7;
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        goto LABEL_7;
      case 12:
        if (!a3[7])
          break;
        goto LABEL_7;
      default:
        if (result != 64)
        {
          if (result == 72 && !a3[2])
            break;
LABEL_7:
          v8 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)0x10);
          result = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)result = 786433;
          *(_QWORD *)(result + 8) = 0;
          *v8 = (WTF::StringImpl **)result;
          v8[1] = 0;
          *a4 = v8;
          *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFE0F | 0x80;
          *(_DWORD *)*v8 = *(_DWORD *)*v8 & 0xFFFE01FF | (v7 << 9);
          return result;
        }
        if (a3[5])
          goto LABEL_7;
        break;
    }
LABEL_21:
    *a4 = 0;
    return result;
  }
  if (!BYTE3(result))
    goto LABEL_21;
  v9 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)0x10);
  v10 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
  *v10 = (WTF::StringImpl *)786433;
  v10[1] = 0;
  *v9 = v10;
  v9[1] = 0;
  *a4 = v9;
  *(_DWORD *)v10 = *(_DWORD *)v10 & 0xFFFFFE0F | 0x90;
  *(_DWORD *)*v9 = *(_DWORD *)*v9 & 0xFFFE01FF | (BYTE2(v7) << 9);
  v11 = *v9;
  WTF::StringView::convertToASCIILowercaseAtom((WTF::StringView *)v14);
  WebCore::CSSSelector::setValue(v11, (const WTF::AtomString *)&v13, 0);
  result = (uint64_t)v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::MutableCSSSelector::MutableCSSSelector(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  _DWORD *v5;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = *(_DWORD *)v4 & 0xFE000000 | 0xC0011;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *a2;
  *(_QWORD *)(v4 + 8) = *a2;
  ++*v5;
  *a1 = v4;
  a1[1] = 0;
  return a1;
}

WebCore::MutableCSSSelector *WebCore::MutableCSSSelector::MutableCSSSelector(WebCore::MutableCSSSelector *this, const WebCore::CSSSelector *a2)
{
  WebCore::CSSSelector *v4;
  WebCore::MutableCSSSelector *v5;
  void *v6;
  WebCore::MutableCSSSelector *v7;
  WTF *v8;
  void *v9;

  v4 = (WebCore::CSSSelector *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)this = WebCore::CSSSelector::CSSSelector(v4, a2);
  *((_QWORD *)this + 1) = 0;
  if ((*((_BYTE *)a2 + 2) & 8) == 0)
  {
    v5 = (WebCore::MutableCSSSelector *)WTF::fastMalloc((WTF *)0x10);
    WebCore::MutableCSSSelector::MutableCSSSelector(v5, (const WebCore::CSSSelector *)((char *)a2 + 16));
    v7 = (WebCore::MutableCSSSelector *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v7)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v7, v6);
      WTF::fastFree(v8, v9);
    }
  }
  return this;
}

void WebCore::MutableCSSSelector::~MutableCSSSelector(WebCore::MutableCSSSelector *this, void *a2)
{
  WebCore::MutableCSSSelector *v3;
  WebCore::CSSSelector::RareData **v4;
  unsigned int v5;
  int v6;
  WebCore::MutableCSSSelector *v7;
  WebCore::MutableCSSSelector *v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  WebCore::MutableCSSSelector *v15;
  WTF *v16;
  void *v17;
  WebCore::MutableCSSSelector *v19;
  WTF *v20;
  void *v21;
  WebCore::MutableCSSSelector *v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[128];

  v3 = (WebCore::MutableCSSSelector *)*((_QWORD *)this + 1);
  if (v3)
  {
    v5 = 0;
    v22 = (WebCore::MutableCSSSelector *)*((_QWORD *)this + 1);
    v23 = (WTF *)v25;
    v24 = 16;
    *((_QWORD *)this + 1) = 0;
    v6 = 16;
    while (1)
    {
      v7 = (WebCore::MutableCSSSelector *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5 == v6)
      {
        WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::MutableCSSSelector>>((uint64_t)&v23, (unint64_t)&v22);
      }
      else
      {
        v22 = 0;
        *((_QWORD *)v23 + v5) = v3;
        HIDWORD(v24) = v5 + 1;
      }
      v8 = v22;
      if (!v7)
        break;
      v22 = v7;
      if (v8)
      {
        WebCore::MutableCSSSelector::~MutableCSSSelector(v8);
        WTF::fastFree(v9, v10);
        v7 = v22;
      }
      v6 = v24;
      v5 = HIDWORD(v24);
      v3 = v7;
    }
    v22 = 0;
    if (v8)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v8);
      WTF::fastFree(v11, v12);
    }
    v13 = v23;
    if (HIDWORD(v24))
    {
      v14 = 8 * HIDWORD(v24);
      do
      {
        v15 = *(WebCore::MutableCSSSelector **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          WebCore::MutableCSSSelector::~MutableCSSSelector(v15);
          WTF::fastFree(v16, v17);
        }
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
      v13 = v23;
    }
    if (v25 != (_BYTE *)v13 && v13 != 0)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v13, a2);
    }
    v19 = (WebCore::MutableCSSSelector *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v19)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v19);
      WTF::fastFree(v20, v21);
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  v4 = *(WebCore::CSSSelector::RareData ***)this;
  *(_QWORD *)this = 0;
  if (v4)
    std::default_delete<WebCore::CSSSelector>::operator()[abi:sn180100]((int)this, v4);
}

WTF **WebCore::MutableCSSSelector::adoptSelectorVector(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v6;

  v3 = *a1;
  v4 = WTF::fastMalloc((WTF *)8);
  v6 = (WTF *)WebCore::CSSSelectorList::CSSSelectorList(v4, a2);
  WebCore::CSSSelector::setSelectorList(v3, (uint64_t *)&v6);
  return std::unique_ptr<WebCore::CSSSelectorList>::~unique_ptr[abi:sn180100](&v6);
}

uint64_t WebCore::MutableCSSSelector::setArgumentList(uint64_t *a1, WTF **a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v11 = v3;
  result = WebCore::CSSSelector::setArgumentList(v2, (WTF::StringImpl *)&v11);
  v6 = v11;
  if (v11)
  {
    v8 = (WTF::StringImpl **)((char *)v11 + 8);
    v7 = *(unsigned int *)v11;
    if ((_DWORD)v7)
    {
      v9 = 16 * v7;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v5);
          else
            *(_DWORD *)v10 -= 2;
        }
        v8 += 2;
        v9 -= 16;
      }
      while (v9);
    }
    return WTF::fastFree(v6, v5);
  }
  return result;
}

uint64_t WebCore::MutableCSSSelector::setSelectorList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t result;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v4 = *(_DWORD **)(v2 + 8);
  if ((*(_BYTE *)(v2 + 2) & 0x10) != 0)
  {
    result = *(_QWORD *)(v2 + 8);
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)result = 1;
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 8) = v4;
    *(_QWORD *)(result + 16) = v4;
    *(_QWORD *)(result + 24) = 0;
    v6 = WebCore::anyName;
    if (WebCore::anyName)
      ++*(_DWORD *)WebCore::anyName;
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(v2 + 8) = result;
    *(_DWORD *)v2 |= 0x100000u;
  }
  v7 = *(WTF **)(result + 56);
  *(_QWORD *)(result + 56) = v3;
  if (v7)
  {
    v8 = *(WTF::StringImpl **)v7;
    *(_QWORD *)v7 = 0;
    if (v8)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v7, v8);
    return WTF::fastFree(v7, v8);
  }
  return result;
}

WebCore::CSSSelector::RareData **WebCore::MutableCSSSelector::prependTagSelector(WebCore::CSSSelector::RareData ***this, WebCore::CSSSelector::RareData **a2, int a3)
{
  WebCore::CSSSelector::RareData ***v6;
  WebCore::CSSSelector::RareData **v7;
  WebCore::CSSSelector::RareData **v8;
  WebCore::CSSSelector::RareData **v9;
  WebCore::CSSSelector::RareData **v10;
  WebCore::MutableCSSSelector *v11;
  WTF *v12;
  void *v13;
  WebCore::MutableCSSSelector *v14;
  WTF *v15;
  void *v16;
  WebCore::CSSSelector::RareData **result;
  int v18;
  WebCore::CSSSelector::RareData *v19;
  WebCore::CSSSelector::RareData **v20;

  v6 = (WebCore::CSSSelector::RareData ***)WTF::fastMalloc((WTF *)0x10);
  v7 = (WebCore::CSSSelector::RareData **)WTF::fastMalloc((WTF *)0x10);
  *v7 = (WebCore::CSSSelector::RareData *)786433;
  v7[1] = 0;
  *v6 = v7;
  v6[1] = 0;
  v8 = *this;
  *this = 0;
  v9 = *v6;
  *v6 = v8;
  if (v9)
    std::default_delete<WebCore::CSSSelector>::operator()[abi:sn180100]((int)v6, v9);
  v10 = this[1];
  this[1] = 0;
  v11 = (WebCore::MutableCSSSelector *)v6[1];
  v6[1] = v10;
  if (v11)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(v11, v9);
    WTF::fastFree(v12, v13);
  }
  v14 = (WebCore::MutableCSSSelector *)this[1];
  this[1] = (WebCore::CSSSelector::RareData **)v6;
  if (v14)
  {
    WebCore::MutableCSSSelector::~MutableCSSSelector(v14, v9);
    WTF::fastFree(v15, v16);
  }
  result = (WebCore::CSSSelector::RareData **)WTF::fastMalloc((WTF *)0x10);
  if (a3)
    v18 = 4980753;
  else
    v18 = 786449;
  *(_DWORD *)result = *(_DWORD *)result & 0xFE000000 | v18;
  result[1] = 0;
  v19 = *a2;
  result[1] = *a2;
  ++*(_DWORD *)v19;
  v20 = *this;
  *this = result;
  if (v20)
  {
    std::default_delete<WebCore::CSSSelector>::operator()[abi:sn180100]((int)this, v20);
    result = *this;
  }
  *(_DWORD *)result &= 0xFFFFFFF0;
  return result;
}

float WebCore::SizesAttributeParser::computeLength(void *a1, _QWORD *a2, __n128 a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::FontCascadeFonts *v8;
  int v9;
  WebCore *v10;
  char v11;
  uint64_t v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WebCore *v17;
  WebCore *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore *v25;
  float v26;
  double v27;
  WTF *v28;
  void *v29;
  WebCore::Node *v30;
  WebCore::FontCascadeFonts *v32;
  int v33;
  WebCore *v34;
  _QWORD v35[4];
  WebCore::Node *v36;
  int v37;
  char v38;
  char v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;

  if (!a2)
    return 0.0;
  v5 = a3.n128_u64[0];
  v6 = a2[4];
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 + 80;
    else
      v6 = 0;
  }
  v35[0] = a2 + 10;
  v35[1] = a2 + 10;
  v35[2] = v6;
  v35[3] = a2;
  v36 = 0;
  v37 = 1065353216;
  v38 = 1;
  v39 = 0;
  v40 = 0;
  v41 = a2 + 10;
  v42 = 0;
  if (((_DWORD)a1 - 67) <= 4 && ((1 << ((_BYTE)a1 - 67)) & 0x15) != 0 || (_DWORD)a1 == 5)
  {
    v8 = *(WebCore::FontCascadeFonts **)(a2[14] + 248);
    if (v8)
    {
      v9 = (*(_DWORD *)v8)++;
      v10 = (WebCore *)*((_QWORD *)v8 + 14);
      if (v9)
      {
        *(_DWORD *)v8 = v9;
        if (v10)
        {
LABEL_12:
          v11 = 0;
          ++*((_DWORD *)v10 + 2);
          goto LABEL_13;
        }
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v8, a2);
        v8 = (WebCore::FontCascadeFonts *)WTF::fastFree(v28, v29);
        if (v10)
          goto LABEL_12;
      }
    }
    else
    {
      v10 = 0;
    }
    v11 = 1;
LABEL_13:
    v12 = a2[14] + 32;
    v34 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v14 = *(_QWORD *)(StatusReg + 736);
    if (!v14 || (v8 = *(WebCore::FontCascadeFonts **)(v14 + 96)) == 0)
      v8 = (WebCore::FontCascadeFonts *)WebCore::threadGlobalDataSlow(v8);
    v15 = *((_QWORD *)v8 + 10);
    if (!v15)
    {
      v32 = v8;
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v8);
      v15 = *((_QWORD *)v32 + 10);
    }
    WebCore::FontCache::updateFontCascade(v15, v12, &v34);
    v17 = v34;
    v34 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v17 + 8))(v17);
      else
        --*((_DWORD *)v17 + 2);
    }
    v16.n128_u64[0] = v5;
    v19 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)v35, a1, v16);
    v20 = a2[14];
    if ((v11 & 1) == 0)
      ++*((_DWORD *)v10 + 2);
    v21 = v20 + 32;
    v34 = v10;
    v22 = *(_QWORD *)(StatusReg + 736);
    if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
      v23 = WebCore::threadGlobalDataSlow(v18);
    v24 = *(_QWORD *)(v23 + 80);
    if (!v24)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v23);
      v24 = *(_QWORD *)(v23 + 80);
    }
    WebCore::FontCache::updateFontCascade(v24, v21, &v34);
    v25 = v34;
    v34 = 0;
    if (v25)
    {
      if (*((_DWORD *)v25 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v25 + 8))(v25);
      else
        --*((_DWORD *)v25 + 2);
    }
    v26 = v19;
    if ((v11 & 1) == 0)
    {
      if (*((_DWORD *)v10 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v10 + 8))(v10);
      else
        --*((_DWORD *)v10 + 2);
    }
    goto LABEL_43;
  }
  v27 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)v35, a1, a3);
  if (v27 >= 3.40282347e38)
  {
    v33 = 2139095039;
  }
  else
  {
    if (v27 > -3.40282347e38)
    {
      v26 = v27;
      goto LABEL_43;
    }
    v33 = -8388609;
  }
  v26 = *(float *)&v33;
LABEL_43:
  v30 = v36;
  v36 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 6) == 2)
    {
      if ((*((_WORD *)v30 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v30);
    }
    else
    {
      *((_DWORD *)v30 + 6) -= 2;
    }
  }
  return v26;
}

WebCore::SizesAttributeParser *WebCore::SizesAttributeParser::SizesAttributeParser(WebCore::SizesAttributeParser *this, unsigned int **a2, const WebCore::Document *a3)
{
  unsigned int *v5;
  unsigned int v6;
  __int128 *v7;
  __int128 *v8;
  WTF::StringImpl *v9;
  _BYTE v11[872];

  v5 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + 22) = 0;
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v11, a2);
  v7 = (__int128 *)WebCore::CSSTokenizer::tokenRange((WebCore::CSSTokenizer *)v11);
  *((_BYTE *)this + 29) = WebCore::SizesAttributeParser::parse((uint64_t)this, v7, v8);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v11, v9);
  return this;
}

float WebCore::SizesAttributeParser::length(WebCore::SizesAttributeParser *this)
{
  if (*((_BYTE *)this + 29) && *((_BYTE *)this + 28))
    return *((float *)this + 6);
  else
    return (float)WebCore::SizesAttributeParser::effectiveSizeDefaultValue(this);
}

uint64_t WebCore::SizesAttributeParser::calculateLengthInPixels(uint64_t a1, __int128 *a2, __int128 *a3, float *a4)
{
  unint64_t v6;
  __int128 *v8;
  unsigned int v9;
  int v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  __int128 *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  __int16 v30;
  char *v31;
  int v32;
  void *v33;
  __n128 v34;
  unsigned int v35;
  uint64_t v36;
  char *v38;
  int v39;
  char *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  double *v58;
  double v59;
  int v60;
  double *v61;
  double v62;
  int v63;
  double v64;
  unint64_t v65;
  WTF *v66;
  char v67;
  char *v68;
  int v69;
  double v70;
  float v71;
  unsigned int i;
  uint64_t v73;
  char *v75;
  int v76;
  int v78;
  WTF *v79;
  uint64_t v80;
  char v81;
  float v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  __int128 v86;

  v6 = (unint64_t)a2;
  v8 = a2;
  if (a2 >= a3)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  v9 = *(_DWORD *)v8;
  v10 = *(_DWORD *)v8 & 0x3F;
  if (v10 != 1)
  {
    if (v10 == 7)
    {
      if (*((double *)v8 + 2) == 0.0)
      {
        *a4 = 0.0;
        return 1;
      }
    }
    else if (v10 == 9)
    {
      v11 = (void *)((v9 >> 11) & 0x7F);
      if (WebCore::CSSPrimitiveValue::isLength((v9 >> 11) & 0x7F))
      {
        v12.n128_u64[0] = *((_QWORD *)v8 + 2);
        v13 = *(_QWORD *)(*(_QWORD *)a1 + 8);
        *(_DWORD *)(v13 + 24) += 2;
        v14 = WebCore::SizesAttributeParser::computeLength(v11, *(_QWORD **)(v13 + 1944), v12);
        *a4 = v14;
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v13);
            v14 = *a4;
          }
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
        if (v14 >= 0.0)
          return 1;
      }
    }
    return 0;
  }
  v16 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  *(_DWORD *)(v16 + 24) += 2;
  v79 = 0;
  v80 = 0;
  v82 = 0.0;
  v83 = v16;
  v84 = 0;
  v85 = 0;
  if ((__int128 *)v6 == a3)
  {
LABEL_104:
    v57 = 0;
    goto LABEL_114;
  }
  v17 = 0;
  v18 = 0;
  v19 = (__int128 *)v6;
  do
  {
    v21 = *(_DWORD *)v19;
    v19 = (__int128 *)((char *)v19 + 24);
    v20 = v21;
    v22 = 0;
    switch(v21 & 0x3F)
    {
      case 0u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 8u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Fu:
        goto LABEL_69;
      case 1u:
        if (*(_DWORD *)(v6 + 4) != 4)
          goto LABEL_68;
        v23 = *(_QWORD *)(v6 + 8);
        if ((v20 & 0x400000) != 0)
        {
          if ((*(_BYTE *)v23 & 0xDF) != 0x43
            || (*(_BYTE *)(v23 + 1) & 0xDF) != 0x41
            || (*(_BYTE *)(v23 + 2) & 0xDF) != 0x4C)
          {
            goto LABEL_68;
          }
          v24 = *(unsigned __int8 *)(v23 + 3);
        }
        else
        {
          if ((*(_WORD *)v23 & 0xFFDF) != 0x43
            || (*(_WORD *)(v23 + 2) & 0xFFDF) != 0x41
            || (*(_WORD *)(v23 + 4) & 0xFFDF) != 0x4C)
          {
            goto LABEL_68;
          }
          v24 = *(unsigned __int16 *)(v23 + 6);
        }
        if ((v24 & 0xFFFFFFDF) != 0x43)
          goto LABEL_68;
        goto LABEL_22;
      case 6u:
        v28 = *(unsigned __int16 *)(v6 + 16) - 42;
        if (v28 > 5 || ((0x2Bu >> v28) & 1) == 0)
          goto LABEL_68;
        v29 = HIDWORD(v85);
        if (HIDWORD(v85) && (*((_DWORD *)v84 + 6 * HIDWORD(v85) - 6) & 0x3F) == 6)
        {
          v22 = 0;
          v30 = *((_WORD *)v84 + 12 * HIDWORD(v85) - 4);
          switch(v30)
          {
            case '*':
            case '/':
              goto LABEL_30;
            case '+':
            case '-':
              if (((0x21u >> v28) & 1) == 0)
              {
LABEL_30:
                *(_QWORD *)&v86 = 0;
                BYTE8(v86) = 0;
                WORD5(v86) = v30;
                if (v18 == (_DWORD)v80)
                {
                  v31 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v18 + 1, (unint64_t)&v86);
                  v32 = HIDWORD(v80);
                  v17 = v79;
                  *((_OWORD *)v79 + HIDWORD(v80)) = *(_OWORD *)v31;
                }
                else
                {
                  *((_OWORD *)v17 + v18) = v86;
                  v32 = HIDWORD(v80);
                }
                v18 = v32 + 1;
                HIDWORD(v80) = v32 + 1;
                if (!HIDWORD(v85))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1958F17C0);
                }
                v29 = --HIDWORD(v85);
              }
              break;
            default:
              goto LABEL_69;
          }
        }
        if (v29 == (_DWORD)v85)
        {
          v48 = WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, v29 + 1, v6);
          v29 = HIDWORD(v85);
          v49 = (char *)v84 + 24 * HIDWORD(v85);
          v50 = *(_QWORD *)(v48 + 16);
          *(_OWORD *)v49 = *(_OWORD *)v48;
          *((_QWORD *)v49 + 2) = v50;
        }
        else
        {
          v46 = (char *)v84 + 24 * v29;
          v47 = *(_OWORD *)v6;
          *((_QWORD *)v46 + 2) = *(_QWORD *)(v6 + 16);
          *(_OWORD *)v46 = v47;
        }
        goto LABEL_57;
      case 7u:
        BYTE8(v86) = 0;
        WORD5(v86) = 0;
        *(_QWORD *)&v86 = *(_QWORD *)(v6 + 16);
        goto LABEL_46;
      case 9u:
        v33 = (void *)((v20 >> 11) & 0x7F);
        if (!WebCore::CSSPrimitiveValue::isLength((v20 >> 11) & 0x7F))
          goto LABEL_68;
        WORD5(v86) = 0;
        v34.n128_u64[0] = *(_QWORD *)(v6 + 16);
        *(double *)&v86 = WebCore::SizesAttributeParser::computeLength(v33, *(_QWORD **)(v83 + 1944), v34);
        BYTE8(v86) = 1;
LABEL_46:
        if (v18 == (_DWORD)v80)
        {
          v40 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v18 + 1, (unint64_t)&v86);
          v41 = HIDWORD(v80);
          v17 = v79;
          *((_OWORD *)v79 + HIDWORD(v80)) = *(_OWORD *)v40;
        }
        else
        {
          *((_OWORD *)v17 + v18) = v86;
          v41 = HIDWORD(v80);
        }
        v18 = v41 + 1;
        HIDWORD(v80) = v41 + 1;
        goto LABEL_59;
      case 0x16u:
LABEL_22:
        if (HIDWORD(v85) != (_DWORD)v85)
        {
          v25 = HIDWORD(v85) + 1;
          v26 = (char *)v84 + 24 * HIDWORD(v85);
          v27 = *(_QWORD *)(v6 + 16);
          *(_OWORD *)v26 = *(_OWORD *)v6;
          *((_QWORD *)v26 + 2) = v27;
          HIDWORD(v85) = v25;
          goto LABEL_59;
        }
        v43 = WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, HIDWORD(v85) + 1, v6);
        v29 = HIDWORD(v85);
        v44 = (char *)v84 + 24 * HIDWORD(v85);
        v45 = *(_QWORD *)(v43 + 16);
        *(_OWORD *)v44 = *(_OWORD *)v43;
        *((_QWORD *)v44 + 2) = v45;
LABEL_57:
        v42 = v29 + 1;
        goto LABEL_58;
      case 0x17u:
        v35 = HIDWORD(v85);
        if (!HIDWORD(v85))
          goto LABEL_68;
        break;
      default:
        goto LABEL_59;
    }
    while (1)
    {
      v36 = v35 - 1;
      if ((*((_DWORD *)v84 + 6 * v36) & 0x3F) == 1 || (*((_DWORD *)v84 + 6 * v36) & 0x3F) == 22)
        break;
      *(_QWORD *)&v86 = 0;
      BYTE8(v86) = 0;
      WORD5(v86) = *((_WORD *)v84 + 12 * v36 + 8);
      if (v18 == (_DWORD)v80)
      {
        v38 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v18 + 1, (unint64_t)&v86);
        v39 = HIDWORD(v80);
        v17 = v79;
        *((_OWORD *)v79 + HIDWORD(v80)) = *(_OWORD *)v38;
      }
      else
      {
        *((_OWORD *)v17 + v18) = v86;
        v39 = HIDWORD(v80);
      }
      v18 = v39 + 1;
      HIDWORD(v80) = v39 + 1;
      if (!HIDWORD(v85))
      {
        __break(0xC471u);
        JUMPOUT(0x1958F17B8);
      }
      v35 = HIDWORD(v85) - 1;
      HIDWORD(v85) = v35;
      if (!v35)
      {
LABEL_68:
        v22 = 0;
        goto LABEL_69;
      }
    }
    v42 = v35 - 1;
LABEL_58:
    HIDWORD(v85) = v42;
LABEL_59:
    v6 = (unint64_t)v19;
  }
  while (v19 != a3);
  for (i = HIDWORD(v85); i; HIDWORD(v85) = i)
  {
    v73 = i - 1;
    if ((*((_DWORD *)v84 + 6 * v73) & 0x3F) != 1 && (*((_DWORD *)v84 + 6 * v73) & 0x3F) != 22)
    {
      *(_QWORD *)&v86 = 0;
      BYTE8(v86) = 0;
      WORD5(v86) = *((_WORD *)v84 + 12 * v73 + 8);
      if (v18 == (_DWORD)v80)
      {
        v75 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v79, v18 + 1, (unint64_t)&v86);
        v76 = HIDWORD(v80);
        v17 = v79;
        *((_OWORD *)v79 + HIDWORD(v80)) = *(_OWORD *)v75;
      }
      else
      {
        *((_OWORD *)v17 + v18) = v86;
        v76 = HIDWORD(v80);
      }
      v18 = v76 + 1;
      HIDWORD(v80) = v76 + 1;
      i = HIDWORD(v85);
      if (!HIDWORD(v85))
      {
        __break(0xC471u);
        JUMPOUT(0x1958F17C8);
      }
    }
    --i;
  }
  v22 = 1;
LABEL_69:
  v51 = v84;
  if (!v84)
  {
    if (v22)
      goto LABEL_71;
LABEL_108:
    v81 = 0;
    if (*(_DWORD *)(v16 + 24) != 2)
    {
      v15 = 0;
      *(_DWORD *)(v16 + 24) -= 2;
      goto LABEL_136;
    }
    if ((*(_WORD *)(v16 + 30) & 0x400) != 0)
      goto LABEL_135;
    goto LABEL_134;
  }
  v84 = 0;
  LODWORD(v85) = 0;
  WTF::fastFree(v51, a2);
  if ((v22 & 1) == 0)
    goto LABEL_108;
LABEL_71:
  v84 = 0;
  v85 = 0;
  if (!v18)
    goto LABEL_104;
  v52 = 0;
  v53 = 0;
  v54 = 16 * v18;
  do
  {
    v55 = *((unsigned __int16 *)v17 + 5);
    if (*((_WORD *)v17 + 5))
    {
      v56 = v53 - 2;
      if (v53 < 2)
        goto LABEL_110;
      v57 = 0;
      v58 = (double *)((char *)v52 + 16 * v53);
      v59 = *(v58 - 2);
      v60 = *((unsigned __int8 *)v58 - 8);
      v61 = (double *)((char *)v52 + 16 * v53 - 16);
      v62 = *(v61 - 2);
      v63 = *((unsigned __int8 *)v61 - 8);
      HIDWORD(v85) = v56;
      switch(v55)
      {
        case '*':
          if ((v60 & 1) != 0 && (v63 & 1) != 0)
            goto LABEL_112;
          LOBYTE(v63) = v60 | v63;
          v64 = v59 * v62;
          goto LABEL_87;
        case '+':
          if (((v63 ^ v60) & 1) != 0)
            goto LABEL_112;
          v67 = v60 & v63 & 1;
          v64 = v59 + v62;
          goto LABEL_90;
        case '-':
          if (((v63 ^ v60) & 1) != 0)
            goto LABEL_112;
          v67 = v60 & v63 & 1;
          v64 = v62 - v59;
          goto LABEL_90;
        case '/':
          if ((v60 & 1) != 0 || v59 == 0.0)
            goto LABEL_112;
          v64 = v62 / v59;
LABEL_87:
          v67 = v63 & 1;
LABEL_90:
          *(double *)&v86 = v64;
          BYTE8(v86) = v67;
          WORD5(v86) = 0;
          if ((_DWORD)v56 == (_DWORD)v85)
          {
            v65 = v56 + 1;
            v66 = (WTF *)&v86;
            goto LABEL_92;
          }
          *((_OWORD *)v52 + v56) = v86;
          v69 = HIDWORD(v85);
          break;
        default:
          goto LABEL_113;
      }
    }
    else
    {
      if (v53 != (_DWORD)v85)
      {
        *((_OWORD *)v52 + v53) = *(_OWORD *)v17;
        v53 = HIDWORD(v85) + 1;
        goto LABEL_95;
      }
      v65 = v53 + 1;
      v66 = v17;
LABEL_92:
      v68 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, v65, (unint64_t)v66);
      v69 = HIDWORD(v85);
      v52 = v84;
      *((_OWORD *)v84 + HIDWORD(v85)) = *(_OWORD *)v68;
    }
    v53 = v69 + 1;
LABEL_95:
    HIDWORD(v85) = v53;
    v17 = (WTF *)((char *)v17 + 16);
    v54 -= 16;
  }
  while (v54);
  if (v53 == 1)
  {
    if (!*((_BYTE *)v52 + 8))
    {
LABEL_112:
      v57 = 0;
      goto LABEL_113;
    }
    v70 = *(double *)v52;
    if (*(double *)v52 >= 3.40282347e38)
    {
      *(float *)&v78 = 3.4028e38;
    }
    else
    {
      if (v70 > -3.40282347e38)
      {
        v71 = v70;
LABEL_101:
        if (v71 < 0.0)
          v71 = 0.0;
        v82 = v71;
        v57 = 1;
        goto LABEL_113;
      }
      *(float *)&v78 = -3.4028e38;
    }
    v71 = *(float *)&v78;
    goto LABEL_101;
  }
LABEL_110:
  v57 = 0;
  if (!v52)
    goto LABEL_114;
LABEL_113:
  v84 = 0;
  LODWORD(v85) = 0;
  WTF::fastFree(v52, a2);
LABEL_114:
  v81 = v57;
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) != 0)
    {
      if (!v57)
        goto LABEL_135;
      goto LABEL_116;
    }
LABEL_134:
    WebCore::Node::removedLastRef((WebCore::Node *)v16);
    if (!v81)
      goto LABEL_135;
LABEL_116:
    *a4 = v82;
    v15 = 1;
    goto LABEL_136;
  }
  *(_DWORD *)(v16 + 24) -= 2;
  if ((v57 & 1) != 0)
    goto LABEL_116;
LABEL_135:
  v15 = 0;
LABEL_136:
  if (v79)
    WTF::fastFree(v79, a2);
  return v15;
}

BOOL WebCore::CSSPrimitiveValue::isLength(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 60 > 0x15 || ((1 << (a1 - 60)) & 0x201FE7) == 0) && a1 - 4 >= 8 && (a1 < 0x19 || a1 >= 0x31))
    return a1 == 81 || a1 - 49 < 6;
  return result;
}

BOOL WebCore::SizesAttributeParser::mediaConditionMatches(WebCore::SizesAttributeParser *this, const WebCore::MQ::MediaQuery *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;
  _BOOL8 v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  char v24;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v3 + 2;
  v4 = *((_QWORD *)this + 243);
  if (v4)
  {
    v6 = v4 + 80;
    v7 = (WTF::StringImpl *)WebCore::screenAtomData;
    if (WebCore::screenAtomData)
      *(_DWORD *)WebCore::screenAtomData += 2;
    v21 = v7;
    v8 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v8)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v22 = (WTF *)v8;
    v23 = v6;
    v24 = 2;
    v11 = WebCore::MQ::MediaQueryEvaluator::evaluate((WebCore::MQ::MediaQueryEvaluator *)&v21, a2);
    v12 = v22;
    v22 = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v17 = *((unsigned int *)v12 + 7);
        if ((_DWORD)v17)
        {
          v20 = v12;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v12 + 2), (WTF::StringImpl *)(*((_QWORD *)v12 + 2) + 32 * v17));
          v12 = v20;
        }
        v18 = (WTF *)*((_QWORD *)v12 + 2);
        if (v18)
        {
          *((_QWORD *)v12 + 2) = 0;
          *((_DWORD *)v12 + 6) = 0;
          v19 = v12;
          WTF::fastFree(v18, v10);
          v12 = v19;
        }
        WTF::fastFree(v12, v10);
      }
    }
    v15 = v21;
    v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v10);
      else
        *(_DWORD *)v15 -= 2;
    }
    v3 = *((_DWORD *)this + 6) - 2;
    if (*((_DWORD *)this + 6) != 2)
      goto LABEL_13;
  }
  else
  {
    v11 = 0;
    if (v3)
    {
LABEL_13:
      *((_DWORD *)this + 6) = v3;
      return v11;
    }
  }
  if ((*((_WORD *)this + 15) & 0x400) == 0)
    WebCore::Node::removedLastRef(this);
  return v11;
}

uint64_t WebCore::MQ::MediaQuery::MediaQuery(uint64_t this, const WebCore::MQ::MediaQuery *a2)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = this;
  *(_WORD *)this = *(_WORD *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(this + 8) = v4;
  *(_BYTE *)(this + 16) = 0;
  *(_BYTE *)(this + 48) = 0;
  if (!*((_BYTE *)a2 + 48))
    return v3;
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  v5 = *((_DWORD *)a2 + 9);
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 36) = v5;
  if (!v5)
  {
LABEL_11:
    *(_DWORD *)(v3 + 40) = *((_DWORD *)a2 + 10);
    *(_BYTE *)(v3 + 48) = 1;
    return v3;
  }
  if (v5 < 0x2E8BA2F)
  {
    v6 = 88 * v5;
    v7 = WTF::fastMalloc((WTF *)(88 * v5));
    *(_DWORD *)(v3 + 32) = (v6 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)(v3 + 24) = v7;
    v8 = *((_DWORD *)a2 + 9);
    if (v8)
    {
      v9 = v7;
      v10 = *((_QWORD *)a2 + 3);
      v11 = 88 * v8;
      do
      {
        *(_BYTE *)v9 = 0;
        *(_DWORD *)(v9 + 80) = -1;
        v12 = *(unsigned int *)(v10 + 80);
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1E339E600[v12])(&v13, v9, v10);
          *(_DWORD *)(v9 + 80) = v12;
        }
        v9 += 88;
        v10 += 88;
        v11 -= 88;
      }
      while (v11);
    }
    goto LABEL_11;
  }
  __break(0xC471u);
  return this;
}

uint64_t std::optional<WebCore::MQ::MediaQuery>::~optional(uint64_t a1, void *a2)
{
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v9;

  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v3 = *(_DWORD *)(a1 + 36);
      v4 = *(unsigned int **)(a1 + 24);
      if (v3)
      {
        v5 = 88 * v3;
        do
        {
          v6 = v4[20];
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, unsigned int *))off_1E339E5E8[v6])(&v9, v4);
          v4[20] = -1;
          v4 += 22;
          v5 -= 88;
        }
        while (v5);
        v4 = *(unsigned int **)(a1 + 24);
      }
      if (v4)
      {
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v7 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::CQ::requiredAxesForFeature(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  WTF::StringImpl *v27;

  v1 = *(uint64_t **)(a1 + 72);
  if ((_MergedGlobals_165 & 1) == 0)
  {
    v21 = a1;
    WTF::AtomStringImpl::add();
    if (v27)
    {
      v16 = *(_DWORD *)v27;
      *(_DWORD *)v27 += 2;
      word_1ECE82A58 = 513;
      qword_1ECE82A60 = 0;
      qword_1ECE82A48 = (uint64_t)&off_1E339E658;
      qword_1ECE82A50 = (uint64_t)v27;
      if (v16)
        *(_DWORD *)v27 = v16;
      else
        WTF::StringImpl::destroy(v27, v8);
    }
    else
    {
      qword_1ECE82A50 = 0;
      word_1ECE82A58 = 513;
      qword_1ECE82A60 = 0;
    }
    qword_1ECE82A48 = (uint64_t)off_1E339E628;
    _MergedGlobals_165 = 1;
    a1 = v21;
  }
  if (v1 == &qword_1ECE82A48)
    return 4;
  v2 = *(uint64_t **)(a1 + 72);
  if ((byte_1ECE82A21 & 1) == 0)
  {
    v22 = a1;
    WTF::AtomStringImpl::add();
    if (v27)
    {
      v17 = *(_DWORD *)v27;
      *(_DWORD *)v27 += 2;
      word_1ECE82A78 = 513;
      qword_1ECE82A80 = 0;
      qword_1ECE82A68 = (uint64_t)&off_1E339E658;
      qword_1ECE82A70 = (uint64_t)v27;
      if (v17)
        *(_DWORD *)v27 = v17;
      else
        WTF::StringImpl::destroy(v27, v9);
    }
    else
    {
      qword_1ECE82A70 = 0;
      word_1ECE82A78 = 513;
      qword_1ECE82A80 = 0;
    }
    qword_1ECE82A68 = (uint64_t)off_1E339E688;
    byte_1ECE82A21 = 1;
    a1 = v22;
  }
  if (v2 == &qword_1ECE82A68)
    return 8;
  v3 = *(uint64_t **)(a1 + 72);
  if ((byte_1ECE82A22 & 1) == 0)
  {
    v23 = a1;
    WTF::AtomStringImpl::add();
    if (v27)
    {
      v18 = *(_DWORD *)v27;
      *(_DWORD *)v27 += 2;
      word_1ECE82A98 = 513;
      qword_1ECE82AA0 = 0;
      qword_1ECE82A88 = (uint64_t)&off_1E339E658;
      qword_1ECE82A90 = (uint64_t)v27;
      if (v18)
        *(_DWORD *)v27 = v18;
      else
        WTF::StringImpl::destroy(v27, v10);
    }
    else
    {
      qword_1ECE82A90 = 0;
      word_1ECE82A98 = 513;
      qword_1ECE82AA0 = 0;
    }
    qword_1ECE82A88 = (uint64_t)off_1E339E6B8;
    byte_1ECE82A22 = 1;
    a1 = v23;
  }
  if (v3 == &qword_1ECE82A88)
    return 2;
  v4 = *(uint64_t **)(a1 + 72);
  if ((byte_1ECE82A23 & 1) == 0)
  {
    v24 = a1;
    WTF::AtomStringImpl::add();
    if (v27)
    {
      v19 = *(_DWORD *)v27;
      *(_DWORD *)v27 += 2;
      word_1ECE82AB8 = 513;
      qword_1ECE82AC0 = 0;
      qword_1ECE82AA8 = (uint64_t)&off_1E339E658;
      qword_1ECE82AB0 = (uint64_t)v27;
      if (v19)
        *(_DWORD *)v27 = v19;
      else
        WTF::StringImpl::destroy(v27, v11);
    }
    else
    {
      qword_1ECE82AB0 = 0;
      word_1ECE82AB8 = 513;
      qword_1ECE82AC0 = 0;
    }
    qword_1ECE82AA8 = (uint64_t)off_1E339E6E8;
    byte_1ECE82A23 = 1;
    a1 = v24;
  }
  if (v4 == &qword_1ECE82AA8)
    return 1;
  v5 = *(uint64_t **)(a1 + 72);
  if ((byte_1ECE82A24 & 1) == 0)
  {
    v25 = a1;
    WTF::AtomStringImpl::add();
    if (v27)
    {
      v20 = *(_DWORD *)v27;
      *(_DWORD *)v27 += 2;
      word_1ECE82AD8 = 769;
      qword_1ECE82AE0 = 0;
      qword_1ECE82AC8 = (uint64_t)&off_1E339E658;
      qword_1ECE82AD0 = (uint64_t)v27;
      if (v20)
        *(_DWORD *)v27 = v20;
      else
        WTF::StringImpl::destroy(v27, v12);
    }
    else
    {
      qword_1ECE82AD0 = 0;
      word_1ECE82AD8 = 769;
      qword_1ECE82AE0 = 0;
    }
    qword_1ECE82AC8 = (uint64_t)off_1E339E718;
    byte_1ECE82A24 = 1;
    a1 = v25;
  }
  if (v5 == &qword_1ECE82AC8)
    return 3;
  v6 = *(uint64_t **)(a1 + 72);
  if ((byte_1ECE82A25 & 1) == 0)
  {
    v26 = *(uint64_t **)(a1 + 72);
    WTF::AtomStringImpl::add();
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v13 = 0x1D501E400000002;
    if (v27)
    {
      v15 = *(_DWORD *)v27;
      *(_DWORD *)v27 += 2;
      word_1ECE82AF8 = 1280;
      qword_1ECE82B00 = (uint64_t)v13;
      qword_1ECE82AE8 = (uint64_t)&off_1E339E658;
      qword_1ECE82AF0 = (uint64_t)v27;
      if (v15)
        *(_DWORD *)v27 = v15;
      else
        WTF::StringImpl::destroy(v27, v14);
    }
    else
    {
      qword_1ECE82AF0 = 0;
      word_1ECE82AF8 = 1280;
      qword_1ECE82B00 = (uint64_t)v13;
    }
    qword_1ECE82AE8 = (uint64_t)off_1E339E748;
    byte_1ECE82A25 = 1;
    v6 = v26;
  }
  if (v6 == &qword_1ECE82AE8)
    return 3;
  else
    return 0;
}

WTF::StringImpl *WebCore::CQ::serialize(WTF::String *a1, WTF::StringImpl **a2, const Condition *a3)
{
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  char v15;

  v5 = *a2;
  if (*a2)
  {
    v6 = *((_DWORD *)v5 + 1);
    *(_DWORD *)v5 += 2;
    v14 = v5;
    if (v6)
    {
      WebCore::serializeIdentifier((WTF::String *)&v14, a1, 0);
      v15 = 32;
      v7 = *((_QWORD *)a1 + 1);
      if (v7
        && ((v8 = *((unsigned int *)a1 + 4), v8 < *(_DWORD *)(v7 + 4))
          ? (v9 = *(_QWORD *)a1 == 0)
          : (v9 = 0),
            v9))
      {
        v12 = *(_DWORD *)(v7 + 16);
        v13 = *(_QWORD *)(v7 + 8);
        *((_DWORD *)a1 + 4) = v8 + 1;
        if ((v12 & 4) != 0)
          *(_BYTE *)(v13 + v8) = 32;
        else
          *(_WORD *)(v13 + 2 * v8) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
    }
  }
  else
  {
    v14 = 0;
  }
  WebCore::MQ::serialize((uint64_t)a1, (WTF::StringBuilder *)(a2 + 1), a3);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CQ::ContainerQueryParser::consumeContainerQuery(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::CQ::ContainerQueryParser *v5;
  __int128 *v7;
  __int128 *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned __int16 v26;
  uint64_t v27;
  WebCore::CSSParserTokenRange *v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t v32[2];
  unsigned __int16 v33;
  WTF::StringImpl *v34;
  WebCore::CSSParserTokenRange *v35;
  unsigned int v36;
  int v37;
  char v38;
  WTF::StringImpl *v39[3];
  WTF::StringImpl **v40;

  v5 = (WebCore::CQ::ContainerQueryParser *)this;
  v7 = *this;
  if ((unint64_t)v7 >= *((_QWORD *)v5 + 1))
  {
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v7 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) == 0x16)
    goto LABEL_14;
  v8 = *(__int128 **)v5;
  if (*(_QWORD *)v5 >= *((_QWORD *)v5 + 1))
  {
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) == 1
    || (WebCore::CSSPropertyParserHelpers::consumeSingleContainerName((__int128 **)v5, v32), (v10 = v32[0]) == 0))
  {
LABEL_14:
    v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = (*(_WORD *)(v32[0] + 4) & 0x7Fu) - 20;
  if (v12 <= 0x3C)
  {
    if (((1 << ((*(_WORD *)(v32[0] + 4) & 0x7Fu) - 20)) & 0x20008000000000BLL) == 0)
    {
      if (v12 != 60)
        goto LABEL_58;
      v30 = WebCore::nameString(*(unsigned __int16 *)(v32[0] + 8));
      goto LABEL_54;
    }
    v11 = *(WTF::StringImpl **)(v32[0] + 8);
    if (v11)
    {
LABEL_9:
      *(_DWORD *)v11 += 2;
      v39[0] = v11;
      if ((*((_BYTE *)v11 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v13 = v39[0];
        v11 = v34;
        v34 = 0;
        v39[0] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
      goto LABEL_11;
    }
  }
  while (1)
  {
LABEL_11:
    v14 = (_DWORD *)v32[0];
    v32[0] = 0;
    if (v14)
    {
      if (*v14 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v9);
      else
        *v14 -= 2;
    }
LABEL_16:
    LOBYTE(v39[0]) = 0;
    BYTE2(v39[0]) = 0;
    WebCore::MQ::GenericMediaQueryParser<WebCore::CQ::ContainerQueryParser>::consumeCondition((uint64_t)&v34, (__int128 **)v5, (uint64_t)a2, (__int16 *)v39);
    if (!v38)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 48) = 0;
      if (!v11)
        return;
      goto LABEL_40;
    }
    v33 = 0;
    v32[0] = (uint64_t)&v33 + 1;
    v32[1] = (uint64_t)&v33;
    a2 = v35;
    v16 = v36;
    if (!v36)
      break;
    v17 = 88 * v36;
    v5 = v35;
    while (1)
    {
      v39[0] = (WTF::StringImpl *)v32;
      v39[1] = (WTF::StringImpl *)v32;
      v39[2] = (WTF::StringImpl *)v32;
      v18 = *((unsigned int *)v5 + 20);
      if ((_DWORD)v18 == -1)
        break;
      v40 = v39;
      ((void (*)(WTF::StringImpl ***, WebCore::CQ::ContainerQueryParser *))off_1E339E790[v18])(&v40, v5);
      v5 = (WebCore::CQ::ContainerQueryParser *)((char *)v5 + 88);
      v17 -= 88;
      if (!v17)
        goto LABEL_21;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_58:
    if (v12 == 59)
    {
      v30 = WebCore::nameString(*(unsigned __int16 *)(v10 + 8));
LABEL_54:
      v11 = (WTF::StringImpl *)*v30;
      if (*v30)
        goto LABEL_9;
    }
  }
LABEL_21:
  if (v11)
    *(_DWORD *)v11 += 2;
  v31 = (char)v34;
  if (v16)
  {
    if (v16 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1958F2650);
    }
    v19 = (WTF *)(88 * v16);
    v20 = WTF::fastMalloc(v19);
    v21 = 0;
    do
    {
      v22 = (char *)v21 + v20;
      *v22 = 0;
      *((_DWORD *)v22 + 20) = -1;
      v23 = *(unsigned int *)((char *)v21 + (_QWORD)a2 + 80);
      if ((_DWORD)v23 != -1)
      {
        ((void (*)(WTF::StringImpl **, char *))off_1E339E600[v23])(v39, (char *)v21 + v20);
        *((_DWORD *)v22 + 20) = v23;
      }
      v21 = (WTF *)((char *)v21 + 88);
    }
    while (v19 != v21);
    v24 = v19 / 0x58;
  }
  else
  {
    v24 = 0;
    v20 = 0;
  }
  v25 = v37;
  v26 = _byteswap_ushort(v33);
  *(_QWORD *)a3 = v11;
  *(_BYTE *)(a3 + 8) = v31;
  *(_QWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 24) = v24;
  *(_DWORD *)(a3 + 28) = v16;
  *(_DWORD *)(a3 + 32) = v25;
  *(_WORD *)(a3 + 40) = v26;
  *(_BYTE *)(a3 + 48) = 1;
  if (v16)
  {
    v27 = 88 * v16;
    v28 = a2;
    do
    {
      v29 = *((unsigned int *)v28 + 20);
      if ((_DWORD)v29 != -1)
        ((void (*)(WTF::StringImpl **, WebCore::CSSParserTokenRange *))off_1E339E5E8[v29])(v39, v28);
      *((_DWORD *)v28 + 20) = -1;
      v28 = (WebCore::CSSParserTokenRange *)((char *)v28 + 88);
      v27 -= 88;
    }
    while (v27);
  }
  if (a2)
  {
    v35 = 0;
    WTF::fastFree(a2, v15);
  }
  if (v11)
  {
LABEL_40:
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v11 -= 2;
  }
}

uint64_t WebCore::MQ::evaluateRatioComparison(uint64_t a1, WTF::StringImpl *a2, float a3, float a4)
{
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  _BOOL8 v10;
  float v11;

  if (!*(_BYTE *)(a1 + 16))
    return 1;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    return 2;
  v6 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  if (((*(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16)) & 0x3F800) != 0xA800)
  {
    if (v6)
      *(_DWORD *)v5 = v6;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v5, a2);
    return 2;
  }
  v7 = *(float *)(v5 + 12);
  if (v7 == 0.0)
  {
    v9 = 0.0;
    v8 = 1.0;
  }
  else
  {
    v8 = a4 * *(float *)(v5 + 8);
    v9 = a3 * v7;
  }
  if ((_DWORD)a2)
    v11 = v9;
  else
    v11 = v8;
  if (!(_DWORD)a2)
    v8 = v9;
  switch(*(_BYTE *)a1)
  {
    case 0:
      v10 = v11 < v8;
      if (!v6)
        goto LABEL_27;
      goto LABEL_25;
    case 1:
      v10 = v11 <= v8;
      if (!v6)
        goto LABEL_27;
      goto LABEL_25;
    case 2:
      v10 = v11 == v8;
      if (!v6)
        goto LABEL_27;
      goto LABEL_25;
    case 3:
      v10 = v11 > v8;
      if (v6)
        goto LABEL_25;
      goto LABEL_27;
    case 4:
      v10 = v11 >= v8;
      if (v6)
LABEL_25:
        *(_DWORD *)v5 = v6;
      else
LABEL_27:
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v5, a2);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1958F27A4);
  }
  return v10;
}

uint64_t WebCore::MQ::evaluateBooleanFeature(WebCore::MQ *this, const WebCore::MQ::Feature *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  double v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  v2 = (uint64_t)a2;
  if (*((_BYTE *)this + 56))
  {
    v3 = *((_QWORD *)this + 6);
    v4 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
    if ((v4 & 0x3F800) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1958F288CLL);
    }
    *(_DWORD *)v3 += 2;
    if ((v4 & 0x7F) == 0x49)
    {
      v9 = v3;
      v8 = *(_QWORD *)(v3 + 8);
      v11 = 0;
      v10 = WebCore::CSSCalcValue::doubleValue(v8, (uint64_t)&v11);
      if (v11)
        WTF::fastFree((WTF *)(v11 - 16), a2);
      v3 = v9;
      v5 = v10;
    }
    else
    {
      v5 = *(double *)(v3 + 8);
    }
    v6 = v5 >= 2147483650.0 || v5 <= -2147483650.0;
    if (v6 || (int)v5 > 1)
      v2 = 2;
    else
      v2 = (int)v5 == (_DWORD)v2;
    if (*(_DWORD *)v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

BOOL WebCore::MQ::evaluateIntegerComparison(int a1, char *a2, int a3)
{
  int v3;
  char *v4;
  uint64_t v6;
  int v7;
  double v8;
  int v9;
  _BOOL8 result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;

  if (!a2[16])
    return 1;
  v4 = a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  if ((v7 & 0x3F800) != 0)
  {
    a2 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Develope"
         "r/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
    v6 = 96;
    __break(0xC471u);
    goto LABEL_28;
  }
  v3 = a3;
  *(_DWORD *)v6 += 2;
  if ((v7 & 0x7F) == 0x49)
  {
    v13 = v6;
    v14 = *(_QWORD *)(v6 + 8);
    v16 = 0;
    v15 = WebCore::CSSCalcValue::doubleValue(v14, (uint64_t)&v16);
    if (v16)
      WTF::fastFree((WTF *)(v16 - 16), a2);
    v6 = v13;
    v8 = v15;
  }
  else
  {
    v8 = *(double *)(v6 + 8);
  }
  if (v8 >= 2147483650.0)
    goto LABEL_29;
  if (v8 > -2147483650.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  while (1)
  {
    if (*(_DWORD *)v6 == 2)
      v6 = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
    v11 = v3 ? a1 : v9;
    v12 = v3 ? v9 : a1;
    if (v4[16])
      break;
LABEL_28:
    __break(1u);
LABEL_29:
    v9 = 0x7FFFFFFF;
  }
  switch(*v4)
  {
    case 0:
      result = v11 < v12;
      break;
    case 1:
      result = v11 <= v12;
      break;
    case 2:
      result = v11 == v12;
      break;
    case 3:
      result = v11 > v12;
      break;
    case 4:
      result = v11 >= v12;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1958F2A60);
  }
  return result;
}

BOOL WebCore::MQ::evaluateResolutionComparison(uint64_t a1, int a2, float a3)
{
  int v3;
  float v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  double v8;
  BOOL v9;
  float v10;
  float v11;
  _BOOL8 result;
  float v13;
  float v14;

  if (!*(_BYTE *)(a1 + 16))
    return 1;
  v6 = *(_QWORD *)(a1 + 8);
  if (((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F800) != 0)
  {
    v7 = (WTF::StringImpl *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/us"
                            "r/local/include/wtf/TypeCasts.h";
    __break(0xC471u);
    goto LABEL_28;
  }
  v3 = a2;
  v4 = a3;
  *(_DWORD *)v6 += 2;
  v8 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v6, 0x37u));
  if (!(_BYTE)v7)
    v8 = 0.0;
  if (v8 >= 3.40282347e38)
    goto LABEL_29;
  v9 = v8 <= -3.40282347e38;
  v10 = v8;
  if (v9)
    v11 = -3.4028e38;
  else
    v11 = v10;
  while (1)
  {
    if (*(_DWORD *)v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, v7);
    else
      *(_DWORD *)v6 -= 2;
    v13 = v3 ? v4 : v11;
    v14 = v3 ? v11 : v4;
    if (*(_BYTE *)(a1 + 16))
      break;
LABEL_28:
    __break(1u);
LABEL_29:
    v11 = 3.4028e38;
  }
  switch(*(_BYTE *)a1)
  {
    case 0:
      result = v13 < v14;
      break;
    case 1:
      result = v13 <= v14;
      break;
    case 2:
      result = v13 == v14;
      break;
    case 3:
      result = v13 > v14;
      break;
    case 4:
      result = v13 >= v14;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1958F2C18);
  }
  return result;
}

void WebCore::MQ::FeatureParser::consumeBooleanOrPlainFeature(__int128 **this@<X0>, __n128 *a2@<X8>)
{
  char v4;
  WTF::StringImpl *v7;
  const WebCore::MediaQueryParserContext *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  char v13;
  WTF::StringImpl *v14;
  __int128 *i;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int8x16_t *v42;
  WTF::StringImpl *v43;
  __n128 v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;

  WebCore::MQ::consumeFeatureName((WebCore::MQ *)&v52, this);
  v9 = v52;
  if (!v52)
    goto LABEL_2;
  v10 = *(_DWORD *)(v52 + 4);
  if (!v10)
  {
    v9 = 0;
    v13 = 0;
    v4 = 0;
    goto LABEL_11;
  }
  if (v10 >= 3)
  {
    v11 = *(_QWORD *)(v52 + 8);
    if ((*(_BYTE *)(v52 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v11 != 45)
        goto LABEL_42;
      v12 = *(unsigned __int8 *)(v11 + 1);
    }
    else
    {
      if (*(_WORD *)v11 != 45)
        goto LABEL_42;
      v12 = *(unsigned __int16 *)(v11 + 2);
    }
    if (v12 == 45)
    {
LABEL_9:
      *(_DWORD *)v9 += 2;
      v4 = 2;
      v13 = 1;
      goto LABEL_11;
    }
  }
LABEL_42:
  v22 = WTF::StringImpl::startsWith();
  v23 = (WTF::StringImpl *)v52;
  if (v22)
  {
    if (!v52)
      goto LABEL_49;
    v24 = *(unsigned int *)(v52 + 4);
    if (v24 < 5)
      goto LABEL_49;
    v25 = (v24 - 4);
    v26 = v24 - 4;
    if ((*(_BYTE *)(v52 + 16) & 4) != 0)
    {
      if (v26 >= v25)
      {
        v25 |= 0x100000000uLL;
        goto LABEL_48;
      }
    }
    else if (v26 >= v25)
    {
LABEL_48:
      if ((v25 & 0x100000000) == 0)
      {
        WTF::AtomStringImpl::add();
        goto LABEL_50;
      }
LABEL_49:
      WTF::AtomStringImpl::add();
LABEL_50:
      v13 = 0;
      v9 = v44.n128_u64[0];
LABEL_51:
      v4 = 4;
      goto LABEL_11;
    }
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (!v52)
    goto LABEL_2;
  v27 = WTF::StringImpl::startsWith();
  v23 = (WTF::StringImpl *)v52;
  if (!v27)
  {
    if (v52)
    {
      v31 = WTF::StringImpl::startsWith();
      v23 = (WTF::StringImpl *)v52;
      if (v31)
      {
        if (v52 && (v32 = *(unsigned int *)(v52 + 4), v32 >= 0xD))
        {
          v33 = *(_QWORD *)(v52 + 8);
          v34 = (v32 - 12);
          v35 = v32 - 12;
          if ((*(_BYTE *)(v52 + 16) & 4) != 0)
          {
            if (v35 < v34)
              goto LABEL_114;
            v36 = (int8x16_t *)(v33 + 12);
            v34 |= 0x100000000uLL;
          }
          else
          {
            if (v35 < v34)
              goto LABEL_114;
            v36 = (int8x16_t *)(v33 + 24);
          }
        }
        else
        {
          v34 = 0x100000000;
          v36 = (int8x16_t *)"";
        }
        WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((WTF::StringImpl *)&v44, v36, v34);
        v9 = v44.n128_u64[0];
        if (v44.n128_u64[0])
        {
          v13 = 0;
          goto LABEL_51;
        }
        goto LABEL_120;
      }
      if (v52)
      {
        v23 = (WTF::StringImpl *)WTF::StringImpl::startsWith();
        v9 = v52;
        if ((_DWORD)v23)
        {
          if (v52 && (v38 = *(unsigned int *)(v52 + 4), v38 >= 0xD))
          {
            v39 = *(_QWORD *)(v52 + 8);
            v40 = (v38 - 12);
            v41 = v38 - 12;
            if ((*(_BYTE *)(v52 + 16) & 4) != 0)
            {
              if (v41 < v40)
                goto LABEL_114;
              v42 = (int8x16_t *)(v39 + 12);
              v40 |= 0x100000000uLL;
            }
            else
            {
              if (v41 < v40)
                goto LABEL_114;
              v42 = (int8x16_t *)(v39 + 24);
            }
          }
          else
          {
            v40 = 0x100000000;
            v42 = (int8x16_t *)"";
          }
          WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((WTF::StringImpl *)&v44, v42, v40);
          v9 = v44.n128_u64[0];
          if (v44.n128_u64[0])
          {
            v13 = 0;
            goto LABEL_62;
          }
LABEL_120:
          __break(0xC471u);
          JUMPOUT(0x1958F3298);
        }
        if (v52)
          goto LABEL_9;
      }
    }
LABEL_2:
    a2->n128_u8[0] = 0;
    a2[5].n128_u8[0] = 0;
    return;
  }
  if (!v52)
    goto LABEL_119;
  v28 = *(unsigned int *)(v52 + 4);
  if (v28 < 5)
    goto LABEL_119;
  v29 = (v28 - 4);
  v30 = v28 - 4;
  if ((*(_BYTE *)(v52 + 16) & 4) != 0)
  {
    if (v30 < v29)
      goto LABEL_114;
    v29 |= 0x100000000uLL;
  }
  else if (v30 < v29)
  {
    goto LABEL_114;
  }
  if ((v29 & 0x100000000) != 0)
LABEL_119:
    WTF::AtomStringImpl::add();
  else
    WTF::AtomStringImpl::add();
  v13 = 0;
  v9 = v44.n128_u64[0];
LABEL_62:
  v4 = 1;
LABEL_11:
  v14 = (WTF::StringImpl *)v52;
  v52 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v7);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (!v9)
    goto LABEL_2;
  if (*(_DWORD *)(v9 + 4))
  {
    for (i = *this; ; *this = i)
    {
      if (i >= this[1])
      {
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v16 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          i = *this;
        }
      }
      else
      {
        v16 = i;
      }
      if ((*(_DWORD *)v16 & 0x3F) != 0x10)
        break;
      i = (__int128 *)((char *)i + 24);
    }
    v17 = this[1];
    if (i == v17)
    {
      if ((v13 & 1) != 0)
      {
        *(_DWORD *)v9 += 2;
        v44.n128_u64[0] = v9;
        v44.n128_u8[8] = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        std::optional<WebCore::MQ::Feature>::optional[abi:sn180100]<WebCore::MQ::Feature,0>(a2, &v44);
        WebCore::MQ::Feature::~Feature((WebCore::MQ::Feature *)&v44, v37);
        goto LABEL_36;
      }
    }
    else
    {
      if (i >= v17)
      {
        {
          i = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          i = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_DWORD *)i & 0x3F) == 0x13)
      {
        v18 = *this;
        if (*this == this[1])
        {
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v18 = *this;
          }
        }
        else
        {
          v18 = (__int128 *)((char *)v18 + 24);
          *this = v18;
        }
        while (1)
        {
          if (v18 >= this[1])
          {
            v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              v18 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            }
          }
          if ((*(_DWORD *)v18 & 0x3F) != 0x10)
            break;
          v18 = (__int128 *)((char *)*this + 24);
          *this = v18;
        }
        if (*(_DWORD *)(v9 + 4) < 3u)
          goto LABEL_32;
        v19 = *(_QWORD *)(v9 + 8);
        if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        {
          if (*(_BYTE *)v19 != 45)
            goto LABEL_32;
          v20 = *(unsigned __int8 *)(v19 + 1);
        }
        else
        {
          if (*(_WORD *)v19 != 45)
          {
LABEL_32:
            WebCore::MQ::FeatureParser::consumeValue((WebCore::MQ::FeatureParser *)&v44, (WebCore::CSSParserTokenRange *)this, v8);
            goto LABEL_33;
          }
          v20 = *(unsigned __int16 *)(v19 + 2);
        }
        if (v20 != 45)
          goto LABEL_32;
        *(_DWORD *)v9 += 2;
        v43 = (WTF::StringImpl *)v9;
        WebCore::MQ::consumeCustomPropertyValue(&v44, (WebCore::CSSParserTokenRange *)&v43, (__int128 *)this);
        v23 = v43;
        v43 = 0;
        if (!v23)
        {
LABEL_33:
          v21 = (_DWORD *)v44.n128_u64[0];
          if (v44.n128_u64[0])
          {
            if (*this == this[1])
            {
              *(_DWORD *)v9 += 2;
              a2->n128_u64[0] = v9;
              a2->n128_u8[8] = 1;
              a2[1].n128_u8[0] = 0;
              a2[2].n128_u8[0] = 0;
              a2[2].n128_u8[8] = v4;
              a2[3].n128_u64[0] = (unint64_t)v21;
              a2[3].n128_u8[8] = 1;
              a2[4].n128_u8[0] = 0;
              a2[4].n128_u8[2] = 0;
              a2[4].n128_u64[1] = 0;
              a2[5].n128_u8[0] = 1;
            }
            else
            {
              a2->n128_u8[0] = 0;
              a2[5].n128_u8[0] = 0;
              if (*v21 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v7);
              else
                *v21 -= 2;
            }
            goto LABEL_36;
          }
          goto LABEL_105;
        }
        if (*(_DWORD *)v23 != 2)
        {
          *(_DWORD *)v23 -= 2;
          goto LABEL_33;
        }
LABEL_115:
        WTF::StringImpl::destroy(v23, v7);
        goto LABEL_33;
      }
    }
  }
LABEL_105:
  a2->n128_u8[0] = 0;
  a2[5].n128_u8[0] = 0;
LABEL_36:
  if (*(_DWORD *)v9 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v9, v7);
  else
    *(_DWORD *)v9 -= 2;
}

WTF::StringImpl *WebCore::MQ::FeatureParser::consumeRangeFeature@<X0>(__int128 **this@<X0>, const WebCore::MediaQueryParserContext *a2@<X2>, uint64_t a3@<X8>)
{
  int *v4;
  int *v5;
  __int128 *v8;
  unsigned __int16 v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  unsigned __int16 v16;
  const WebCore::MediaQueryParserContext *v17;
  _BOOL4 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  int *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  __int128 **v25;
  int *v26;

  v25 = this;
  v8 = *this;
  if (v8 >= this[1])
  {
    v4 = &dword_1ECE90000;
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_BYTE *)v8 & 0x3F) != 0)
  {
    WebCore::MQ::FeatureParser::consumeValue((WebCore::MQ::FeatureParser *)&v26, (WebCore::CSSParserTokenRange *)this, a2);
    v4 = v26;
    if (v26)
    {
      v9 = WebCore::MQ::FeatureParser::consumeRangeFeature(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_0::operator()(&v25);
      if (v9 >= 0x100u)
      {
        v13 = 0;
        v11 = v9;
        v12 = 1;
      }
      else
      {
        if (*v4 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v10);
          v11 = 0;
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 0;
          *v4 -= 2;
        }
        v13 = 1;
      }
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  WebCore::MQ::consumeFeatureName((WebCore::MQ *)&v24, this);
  if (!v24 || !*((_DWORD *)v24 + 1))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 80) = 0;
    goto LABEL_16;
  }
  v16 = WebCore::MQ::FeatureParser::consumeRangeFeature(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_0::operator()(&v25);
  if (v16 >= 0x100u)
  {
    v20 = v16;
    WebCore::MQ::FeatureParser::consumeValue((WebCore::MQ::FeatureParser *)&v26, (WebCore::CSSParserTokenRange *)this, v17);
    v5 = v26;
    v18 = v26 != 0;
    if (v26)
    {
      v19 = v20;
    }
    else
    {
      v13 = 1;
      v19 = 0;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (*this == this[1] && !v13)
  {
    if (v12)
    {
      if (!v18)
      {
        v19 = 0;
        v21 = v5;
LABEL_49:
        v23 = v24;
        v24 = 0;
        *(_QWORD *)a3 = v23;
        *(_BYTE *)(a3 + 8) = 2;
        *(_BYTE *)(a3 + 16) = v11;
        *(_QWORD *)(a3 + 24) = v4;
        *(_BYTE *)(a3 + 32) = 1;
        *(_BYTE *)(a3 + 40) = 0;
        *(_BYTE *)(a3 + 56) = 0;
        v4 = 0;
        if (!v18)
        {
LABEL_51:
          v5 = v21;
          *(_BYTE *)(a3 + 64) = 0;
          *(_BYTE *)(a3 + 66) = 0;
          *(_DWORD *)(a3 + 67) = (_DWORD)v26;
          *(_BYTE *)(a3 + 71) = BYTE4(v26);
          *(_QWORD *)(a3 + 72) = 0;
          *(_BYTE *)(a3 + 80) = 1;
          if (v12 && v4)
          {
            if (*v4 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v14);
            else
              *v4 -= 2;
          }
          goto LABEL_44;
        }
LABEL_50:
        *(_BYTE *)(a3 + 40) = v19;
        *(_QWORD *)(a3 + 48) = v5;
        *(_BYTE *)(a3 + 56) = 1;
        goto LABEL_51;
      }
      if (v11 != 2 && v19 != 2 && v11 > 1 != v19 < 2u)
      {
        v21 = 0;
        goto LABEL_49;
      }
    }
    else if (v18)
    {
      v21 = 0;
      v22 = v24;
      v24 = 0;
      *(_QWORD *)a3 = v22;
      *(_BYTE *)(a3 + 8) = 2;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 32) = 0;
      goto LABEL_50;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 80) = 0;
LABEL_44:
  if (v18 && v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v14);
    else
      *v5 -= 2;
  }
LABEL_16:
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
      if (!v12)
        return result;
      goto LABEL_20;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v12)
    return result;
LABEL_20:
  if (v4)
  {
    if (*v4 == 2)
      return (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, v14);
    else
      *v4 -= 2;
  }
  return result;
}

__n128 std::optional<WebCore::MQ::Feature>::optional[abi:sn180100]<WebCore::MQ::Feature,0>(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 result;

  v2 = a2->n128_u64[0];
  a2->n128_u64[0] = 0;
  a1->n128_u64[0] = v2;
  a1->n128_u8[8] = a2->n128_u8[8];
  a1[1].n128_u8[0] = 0;
  a1[2].n128_u8[0] = 0;
  if (a2[2].n128_u8[0])
  {
    a1[1].n128_u8[0] = a2[1].n128_u8[0];
    v3 = a2[1].n128_u64[1];
    a2[1].n128_u64[1] = 0;
    a1[1].n128_u64[1] = v3;
    a1[2].n128_u8[0] = 1;
  }
  a1[2].n128_u8[8] = 0;
  a1[3].n128_u8[8] = 0;
  if (a2[3].n128_u8[8])
  {
    a1[2].n128_u8[8] = a2[2].n128_u8[8];
    v4 = a2[3].n128_u64[0];
    a2[3].n128_u64[0] = 0;
    a1[3].n128_u64[0] = v4;
    a1[3].n128_u8[8] = 1;
  }
  result = a2[4];
  a1[4] = result;
  a1[5].n128_u8[0] = 1;
  return result;
}

unint64_t WebCore::MQ::consumeCustomPropertyValue(_QWORD *a1, WebCore::CSSParserTokenRange *a2, __int128 *a3)
{
  WebCore *v5;
  __int128 v6;
  uint64_t *v7;
  unint64_t result;
  uint64_t v9;
  __int128 v10;

  v10 = *a3;
  *(_QWORD *)a3 = *((_QWORD *)a3 + 1);
  v5 = (WebCore *)WebCore::CSSParserImpl::consumeTrailingImportantAndWhitespace((WebCore::CSSParserImpl *)&v10, a2);
  v6 = v10;
  if ((_QWORD)v10 == *((_QWORD *)&v10 + 1))
  {
    result = (unint64_t)WebCore::CSSCustomPropertyValue::createEmpty(a2, &v9);
  }
  else
  {
    v7 = WebCore::strictCSSParserContext(v5);
    result = WebCore::CSSVariableParser::parseDeclarationValue((unint64_t)a2, (char *)v6, *((char **)&v6 + 1), (const WebCore::CSSParserContext *)v7, &v9);
  }
  *a1 = v9;
  return result;
}

void WebCore::MQ::FeatureParser::consumeValue(WebCore::MQ::FeatureParser *this, WebCore::CSSParserTokenRange *a2, const WebCore::MediaQueryParserContext *a3)
{
  uint64_t v5;
  int *v6;
  WebCore::CSSParserTokenRange *v7;
  void *v8;
  WebCore::CSSPrimitiveValue *v9;
  void *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::CSSPrimitiveValue *v13;
  double v14;
  BOOL v15;
  float v16;
  float v17;
  double v18;
  float v19;
  float v20;
  char v21;
  WebCore::CSSPrimitiveValue *v22;
  WebCore::CSSPrimitiveValue *v23;
  __int128 v24;
  WebCore::CSSPrimitiveValue *v25;
  WebCore::CSSPrimitiveValue *v26;

  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
  {
LABEL_41:
    *(_QWORD *)this = 0;
    return;
  }
  v5 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw((__int128 **)a2, a2);
  if ((v5 & 0xFF0000) != 0)
  {
    if ((unsigned __int16)v5 >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1958F3858);
    }
    v6 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v5 + 3088];
    *v6 += 2;
    *(_QWORD *)this = v6;
    return;
  }
  v24 = *(_OWORD *)a2;
  WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)a2, (void *)1, &v26);
  if (!v26)
    goto LABEL_7;
  if ((WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace((__int128 **)a2, v7) & 1) != 0
    && (WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)a2, (void *)1, &v25), v25))
  {
    v14 = WebCore::CSSPrimitiveValue::doubleValue(v26);
    if (v14 >= 3.40282347e38)
    {
      v17 = 3.4028e38;
    }
    else
    {
      v15 = v14 <= -3.40282347e38;
      v16 = v14;
      if (v15)
        v17 = -3.4028e38;
      else
        v17 = v16;
    }
    v18 = WebCore::CSSPrimitiveValue::doubleValue(v25);
    if (v18 >= 3.40282347e38)
    {
      v20 = 3.4028e38;
    }
    else
    {
      v15 = v18 <= -3.40282347e38;
      v19 = v18;
      if (v15)
        v20 = -3.4028e38;
      else
        v20 = v19;
    }
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 2;
    v21 = *(_BYTE *)(v12 + 6);
    *(_WORD *)(v12 + 4) = -22528;
    *(_BYTE *)(v12 + 6) = v21 & 0xFC;
    *(float *)(v12 + 8) = v17;
    *(float *)(v12 + 12) = v20;
    *(_QWORD *)this = v12;
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v11);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  else
  {
    v12 = 0;
    *(_QWORD *)this = 0;
  }
  v13 = v26;
  v26 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v12)
  {
LABEL_7:
    *(_OWORD *)a2 = v24;
    v25 = 0;
    v26 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::IntegerRaw<int,(WebCore::CSSPropertyParserHelpers::IntegerValueRange)0>>::consumeAndResolve((__int128 **)a2, (unsigned __int16 **)&v26, (uint64_t)&v25, 0x10100000000, &v23);
    if (v25)
      WTF::fastFree((WebCore::CSSPrimitiveValue *)((char *)v25 - 16), v8);
    if (v26)
      WTF::fastFree((WebCore::CSSPrimitiveValue *)((char *)v26 - 16), v8);
    v9 = v23;
    if (v23)
      goto LABEL_18;
    WebCore::CSSPropertyParserHelpers::consumeNumber((__int128 **)a2, 0, &v26);
    v9 = v26;
    if (v26)
      goto LABEL_18;
    v25 = 0;
    v26 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)a2, (unsigned __int16 **)&v26, (uint64_t)&v25, 0x100000000, &v23);
    if (v25)
      WTF::fastFree((WebCore::CSSPrimitiveValue *)((char *)v25 - 16), v10);
    if (v26)
      WTF::fastFree((WebCore::CSSPrimitiveValue *)((char *)v26 - 16), v10);
    v9 = v23;
    if (v23 || (WebCore::CSSPropertyParserHelpers::consumeResolution(a2, &v26), (v9 = v26) != 0))
    {
LABEL_18:
      *(_QWORD *)this = v9;
      return;
    }
    goto LABEL_41;
  }
}

uint64_t WebCore::MQ::FeatureParser::validateFeatureAgainstSchema(WebCore::MQ::FeatureParser *this, WebCore::MQ::Feature *a2, const WebCore::MQ::FeatureSchema *a3)
{
  WebCore::MQ::Feature *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  WebCore::MQ::Feature *v10;

  v3 = a2;
  v10 = a2;
  if (!*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)this + 8) == 2)
      goto LABEL_19;
    if (*((_BYTE *)this + 56) && *((_BYTE *)this + 40) != 2)
      goto LABEL_19;
  }
  if (*((_BYTE *)a2 + 17) == 6)
  {
    v5 = *(_QWORD *)this;
    if (!*(_QWORD *)this || *(_DWORD *)(v5 + 4) < 3u)
      goto LABEL_19;
    v6 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v6 != 45)
        goto LABEL_19;
      v7 = *(unsigned __int8 *)(v6 + 1);
    }
    else
    {
      if (*(_WORD *)v6 != 45)
        goto LABEL_19;
      v7 = *(unsigned __int16 *)(v6 + 2);
    }
    if (v7 == 45)
      goto LABEL_9;
LABEL_19:
    result = 0;
    v3 = 0;
    goto LABEL_20;
  }
LABEL_9:
  if (*((_BYTE *)this + 32)
    && !WebCore::MQ::FeatureParser::validateFeatureAgainstSchema(WebCore::MQ::Feature &,WebCore::MQ::FeatureSchema const&)::$_0::operator()<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v10, (WebCore::MQ::FeatureParser *)((char *)this + 24))|| *((_BYTE *)this + 56)&& !WebCore::MQ::FeatureParser::validateFeatureAgainstSchema(WebCore::MQ::Feature &,WebCore::MQ::FeatureSchema const&)::$_0::operator()<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v10, (WebCore::MQ::FeatureParser *)((char *)this + 48)))
  {
    goto LABEL_19;
  }
  result = 1;
LABEL_20:
  *((_QWORD *)this + 9) = v3;
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MQ::Feature,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      v3 = *(_DWORD **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v3)
      {
        if (*v3 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
        else
          *v3 -= 2;
      }
    }
    if (*(_BYTE *)(a1 + 32))
    {
      v4 = *(_DWORD **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v4)
      {
        if (*v4 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
        else
          *v4 -= 2;
      }
    }
    v5 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(WTF::StringImpl *result, int8x16_t *a2, uint64_t a3)
{
  WTF::AtomString *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6[17];

  v3 = result;
  v6[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((a3 & 0x80000000) != 0 || __OFADD__((_DWORD)a3, 8))
  {
    *(_QWORD *)result = 0;
  }
  else
  {
    v4 = a3 & 0xFF00000000;
    if ((a3 + 8) > 0x3F)
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>((a3 + 8), v4 != 0, (int8x16_t *)"-webkit-", 8u, a2, a3, v6);
      WTF::AtomString::AtomString(v3, v6[0]);
      result = v6[0];
      v6[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else if (v4)
    {
      v6[0] = (WTF::StringImpl *)0x2D74696B6265772DLL;
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>>(&v6[1], a2, a3);
      return (WTF::StringImpl *)WTF::AtomStringImpl::add();
    }
    else
    {
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v6, a2, a3);
      return (WTF::StringImpl *)WTF::AtomStringImpl::add();
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(_OWORD *a1, int8x16_t *a2, uint64_t a3)
{
  char *result;
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  int8x16x2_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  *a1 = xmmword_1969EFF90;
  result = (char *)(a1 + 1);
  if ((a3 & 0xFF00000000) != 0)
  {
    v4 = &result[2 * a3];
    if (a3 >= 0x40)
    {
      v5 = &result[2 * (a3 & 0xFFFFFFC0)];
      v6 = 0uLL;
      do
      {
        v14.val[0] = *a2;
        v7 = a2[1];
        v15.val[0] = a2[2];
        v8 = a2[3];
        a2 += 4;
        v9 = v8;
        v15.val[1] = 0uLL;
        v16.val[0] = v7;
        v14.val[1] = 0uLL;
        v10 = result;
        vst2q_s8(v10, v14);
        v10 += 32;
        v16.val[1] = 0uLL;
        vst2q_s8(v10, v16);
        v11 = result + 64;
        vst2q_s8(v11, v15);
        v12 = result + 96;
        vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
        result += 128;
      }
      while (result != v5);
      result = v5;
    }
    while (result != v4)
    {
      v13 = a2->u8[0];
      a2 = (int8x16_t *)((char *)a2 + 1);
      *(_WORD *)result = v13;
      result += 2;
    }
  }
  else if ((_DWORD)a3 == 1)
  {
    *(_WORD *)result = a2->i16[0];
  }
  else if ((_DWORD)a3)
  {
    return (char *)memcpy(result, a2, 2 * a3);
  }
  return result;
}

uint64_t WebCore::MQ::FeatureParser::consumeRangeFeature(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_0::operator()(__int128 ***a1)
{
  __int128 **v1;
  __int128 *v2;
  unint64_t v3;
  __int128 *v4;
  int v6;
  int v7;
  int v9;
  int *v10;
  __int128 *v11;
  int *v12;
  __int128 *v13;
  __int128 *v14;
  int *v15;
  __int128 *v16;
  int *v17;
  __int128 *v18;
  __int128 *v19;
  int *v20;
  __int128 *v21;
  int *v22;
  __int128 *v23;
  int *v24;
  __int128 *v25;
  int *v26;
  __int128 *v27;
  int *v28;
  __int128 *v29;
  int *v30;
  __int128 ***v31;
  __int128 ***v32;
  __int128 ***v33;
  __int128 ***v34;

  v1 = *a1;
  v2 = **a1;
  v3 = (unint64_t)(*a1)[1];
  if (v2 == (__int128 *)v3)
    goto LABEL_6;
  v4 = (__int128 *)((char *)v2 + 24);
  *v1 = (__int128 *)((char *)v2 + 24);
  if ((__int128 *)((char *)v2 + 24) == (__int128 *)v3 || (*(_DWORD *)v2 & 0x3F) != 6)
    goto LABEL_6;
  v9 = *((unsigned __int16 *)v2 + 8);
  switch(v9)
  {
    case '<':
      if ((unint64_t)v4 >= v3)
      {
        {
          v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v32 = a1;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          a1 = v32;
          v1 = *v32;
        }
      }
      if ((*(_DWORD *)v4 & 0x3F) != 6)
        goto LABEL_49;
      v18 = *v1;
      if (*v1 >= v1[1])
      {
        {
          v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v34 = a1;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v1 = *v34;
        }
      }
      if (*((_WORD *)v18 + 8) == 61)
      {
        v19 = *v1;
        if (*v1 == v1[1])
        {
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v19 = *v1;
          }
        }
        else
        {
          v19 = (__int128 *)((char *)v19 + 24);
          *v1 = v19;
        }
        v20 = &dword_1ECE90000;
        v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        while (1)
        {
          if (v19 >= v1[1])
          {
            v19 = v21;
            if ((v20[312] & 1) == 0)
            {
              v22 = v20;
              v21 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v21, 30, 0);
              v20 = v22;
              *((_BYTE *)v22 + 1248) = 1;
              v19 = v21;
            }
          }
          if ((*(_DWORD *)v19 & 0x3F) != 0x10)
            break;
          v19 = (__int128 *)((char *)*v1 + 24);
          *v1 = v19;
        }
        v6 = 1;
      }
      else
      {
LABEL_49:
        v27 = *v1;
        v28 = &dword_1ECE90000;
        v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        while (1)
        {
          if (v27 >= v1[1])
          {
            v27 = v29;
            if ((v28[312] & 1) == 0)
            {
              v30 = v28;
              v29 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v29, 30, 0);
              v28 = v30;
              *((_BYTE *)v30 + 1248) = 1;
              v27 = v29;
            }
          }
          if ((*(_DWORD *)v27 & 0x3F) != 0x10)
            break;
          v27 = (__int128 *)((char *)*v1 + 24);
          *v1 = v27;
        }
        v6 = 0;
      }
      v7 = 1;
      break;
    case '>':
      if ((unint64_t)v4 >= v3)
      {
        {
          v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v31 = a1;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          a1 = v31;
          v1 = *v31;
        }
      }
      if ((*(_DWORD *)v4 & 0x3F) != 6)
        goto LABEL_42;
      v13 = *v1;
      if (*v1 >= v1[1])
      {
        {
          v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v33 = a1;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v1 = *v33;
        }
      }
      if (*((_WORD *)v13 + 8) == 61)
      {
        v14 = *v1;
        if (*v1 == v1[1])
        {
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v14 = *v1;
          }
        }
        else
        {
          v14 = (__int128 *)((char *)v14 + 24);
          *v1 = v14;
        }
        v15 = &dword_1ECE90000;
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        while (1)
        {
          if (v14 >= v1[1])
          {
            v14 = v16;
            if ((v15[312] & 1) == 0)
            {
              v17 = v15;
              v16 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v16, 30, 0);
              v15 = v17;
              *((_BYTE *)v17 + 1248) = 1;
              v14 = v16;
            }
          }
          if ((*(_DWORD *)v14 & 0x3F) != 0x10)
            break;
          v14 = (__int128 *)((char *)*v1 + 24);
          *v1 = v14;
        }
        v7 = 1;
        v6 = 4;
      }
      else
      {
LABEL_42:
        v23 = *v1;
        v24 = &dword_1ECE90000;
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        while (1)
        {
          if (v23 >= v1[1])
          {
            v23 = v25;
            if ((v24[312] & 1) == 0)
            {
              v26 = v24;
              v25 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v25, 30, 0);
              v24 = v26;
              *((_BYTE *)v26 + 1248) = 1;
              v23 = v25;
            }
          }
          if ((*(_DWORD *)v23 & 0x3F) != 0x10)
            break;
          v23 = (__int128 *)((char *)*v1 + 24);
          *v1 = v23;
        }
        v7 = 1;
        v6 = 3;
      }
      break;
    case '=':
      v10 = &dword_1ECE90000;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      while (1)
      {
        if ((unint64_t)v4 >= v3)
        {
          v4 = v11;
          if ((v10[312] & 1) == 0)
          {
            v12 = v10;
            v11 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v11, 30, 0);
            v10 = v12;
            *((_BYTE *)v12 + 1248) = 1;
            v4 = v11;
          }
        }
        if ((*(_DWORD *)v4 & 0x3F) != 0x10)
          break;
        v3 = (unint64_t)v1[1];
        v4 = (__int128 *)((char *)*v1 + 24);
        *v1 = v4;
      }
      v7 = 1;
      v6 = 2;
      break;
    default:
LABEL_6:
      v6 = 0;
      v7 = 0;
      return v6 | (v7 << 8);
  }
  return v6 | (v7 << 8);
}

BOOL WebCore::MQ::FeatureParser::validateFeatureAgainstSchema(WebCore::MQ::Feature &,WebCore::MQ::FeatureSchema const&)::$_0::operator()<WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  int v5;
  __int16 v6;
  int v7;
  int v8;
  _BYTE *v9;
  __int16 v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  double v16;
  _BOOL8 isLength;
  __int16 v18;
  int v19;
  double v22;
  float v23;
  double v24;
  BOOL v25;
  float v26;
  float v27;
  uint64_t v28;
  char v29;
  _DWORD *v30;
  __int16 v31;
  int v32;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int *v39;
  int v40;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(_DWORD *)v4;
    *(_DWORD *)v4 += 2;
    if (((*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F800) != 0)
    {
      if (v5)
        *(_DWORD *)v4 = v5;
      else
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, a2);
      v4 = 0;
    }
  }
  switch(*(_BYTE *)(*(_QWORD *)a1 + 17))
  {
    case 0:
      if (!v4)
        return 0;
      v6 = *(_WORD *)(v4 + 4);
      v7 = v6 & 0x7F;
      v8 = 22;
      if ((v7 - 79) < 2)
        goto LABEL_75;
      if (v7 == 77)
        goto LABEL_144;
      if (v7 == 63)
        goto LABEL_75;
      v8 = *(_WORD *)(v4 + 4) & 0x7F;
      if ((v6 & 0x7F) != 0x49)
        goto LABEL_75;
      v9 = *(_BYTE **)(*(_QWORD *)(v4 + 8) + 8);
      if (v9[12] == 1)
        goto LABEL_107;
      v8 = 1;
      switch(v9[12])
      {
        case 0:
          goto LABEL_75;
        case 2:
          goto LABEL_131;
        case 3:
          goto LABEL_146;
        case 4:
          goto LABEL_130;
        case 5:
        case 6:
        case 7:
        case 8:
          goto LABEL_107;
        default:
          goto LABEL_143;
      }
      goto LABEL_75;
    case 1:
      if (!v4)
        return 0;
      v31 = *(_WORD *)(v4 + 4);
      v32 = v31 & 0x7F;
      if ((v32 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v4 + 4) & 0x7F) - 63)) & 0x34001) != 0)
        goto LABEL_71;
      if (v32 != 73)
        goto LABEL_69;
      v49 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 8) + 8);
      v50 = v49[12];
      if (v50 != 1 && (v50 - 5) >= 4)
      {
        if (!v49[12])
          goto LABEL_95;
        goto LABEL_71;
      }
      v32 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v49 + 72))(v49);
LABEL_69:
      if (v32 != 1)
      {
        v31 = *(_WORD *)(v4 + 4);
LABEL_71:
        v34 = v31 & 0x7F;
        v8 = 22;
        if ((v34 - 79) >= 2)
        {
          if (v34 == 77)
          {
LABEL_144:
            v8 = 20;
          }
          else if (v34 != 63)
          {
            v8 = v31 & 0x7F;
            if (v8 == 73)
            {
              v9 = *(_BYTE **)(*(_QWORD *)(v4 + 8) + 8);
              if (v9[12] == 1)
              {
LABEL_107:
                v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 72))(v9);
              }
              else
              {
                v8 = 1;
                switch(v9[12])
                {
                  case 0:
                    break;
                  case 2:
LABEL_131:
                    v8 = 3;
                    break;
                  case 3:
LABEL_146:
                    v8 = 74;
                    break;
                  case 4:
LABEL_130:
                    v8 = 75;
                    break;
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                    goto LABEL_107;
                  default:
LABEL_143:
                    v8 = 0;
                    break;
                }
              }
            }
          }
        }
LABEL_75:
        v13 = v8 == 2;
LABEL_76:
        isLength = v13;
        goto LABEL_125;
      }
LABEL_95:
      isLength = 1;
      goto LABEL_125;
    case 2:
      if (!v4)
        return 0;
      v14 = *(_WORD *)(v4 + 4) & 0x7F;
      if ((v14 - 63) <= 0x11 && ((1 << (v14 - 63)) & 0x34001) != 0)
        goto LABEL_30;
      if (v14 != 73)
        goto LABEL_24;
      v45 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 8) + 8);
      v46 = v45[12];
      if (v46 == 1 || (v46 - 5) <= 3)
      {
        v14 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v45 + 72))(v45);
LABEL_24:
        if (v14 == 2)
        {
          if ((*(_WORD *)(v4 + 4) & 0x7F) == 0x49)
          {
            v55 = *(_QWORD *)(v4 + 8);
            v61 = 0;
            v59 = WebCore::CSSCalcValue::doubleValue(v55, (uint64_t)&v61);
            if (v61)
              WTF::fastFree((WTF *)(v61 - 16), a2);
            v16 = v59;
          }
          else
          {
            v16 = *(double *)(v4 + 8);
          }
          if (v16 < 2147483650.0 && v16 > -2147483650.0 && !(int)v16)
            goto LABEL_95;
        }
      }
LABEL_30:
      isLength = WebCore::CSSPrimitiveValue::isLength((WebCore::CSSPrimitiveValue *)v4);
      goto LABEL_125;
    case 3:
      if (!v4)
        goto LABEL_120;
      v18 = *(_WORD *)(v4 + 4);
      v19 = v18 & 0x7F;
      if ((v19 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v4 + 4) & 0x7F) - 63)) & 0x34001) != 0)
        goto LABEL_40;
      if (v19 != 73)
        goto LABEL_38;
      v47 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 8) + 8);
      v48 = v47[12];
      if (v48 != 1 && (v48 - 5) >= 4)
      {
        if (!v47[12])
          goto LABEL_48;
LABEL_40:
        if ((v19 - 63) > 0x11 || ((1 << (v19 - 63)) & 0x34001) == 0)
        {
          if ((v18 & 0x7F) == 0x49)
          {
            v51 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 8) + 8);
            v52 = v51[12];
            if (v52 != 1 && (v52 - 5) > 3)
              goto LABEL_120;
            v19 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v51 + 72))(v51);
          }
          if (v19 == 2)
          {
            v18 = *(_WORD *)(v4 + 4);
            goto LABEL_48;
          }
        }
LABEL_120:
        v42 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v43 = 43008;
LABEL_122:
          isLength = ((*(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16)) & 0x3F800) == v43;
        }
        else
        {
LABEL_123:
          isLength = 0;
        }
        goto LABEL_124;
      }
      v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47 + 72))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
      v18 = *(_WORD *)(v4 + 4);
LABEL_38:
      if (v19 != 1)
      {
        v19 = v18 & 0x7F;
        goto LABEL_40;
      }
LABEL_48:
      if ((v18 & 0x7F) == 0x49)
      {
        v54 = *(_QWORD *)(v4 + 8);
        v61 = 0;
        v58 = WebCore::CSSCalcValue::doubleValue(v54, (uint64_t)&v61);
        if (v61)
          WTF::fastFree((WTF *)(v61 - 16), a2);
        v22 = v58;
      }
      else
      {
        v22 = *(double *)(v4 + 8);
      }
      if (v22 >= 3.40282347e38 || (isLength = 0, v22 > -3.40282347e38) && (v23 = v22, v23 >= 0.0))
      {
        if ((*(_WORD *)(v4 + 4) & 0x7F) == 0x49)
        {
          v56 = *(_QWORD *)(v4 + 8);
          v61 = 0;
          v60 = WebCore::CSSCalcValue::doubleValue(v56, (uint64_t)&v61);
          if (v61)
            WTF::fastFree((WTF *)(v61 - 16), v57);
          v24 = v60;
        }
        else
        {
          v24 = *(double *)(v4 + 8);
        }
        if (v24 >= 3.40282347e38)
        {
          v27 = 3.4028e38;
        }
        else
        {
          v25 = v24 <= -3.40282347e38;
          v26 = v24;
          if (v25)
            v27 = -3.4028e38;
          else
            v27 = v26;
        }
        v28 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v28 = 2;
        v29 = *(_BYTE *)(v28 + 6);
        *(_WORD *)(v28 + 4) = -22528;
        *(_BYTE *)(v28 + 6) = v29 & 0xFC;
        *(float *)(v28 + 8) = v27;
        *(_DWORD *)(v28 + 12) = 1065353216;
        v30 = *(_DWORD **)a2;
        *(_QWORD *)a2 = v28;
        if (v30)
        {
          if (*v30 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, a2);
          else
            *v30 -= 2;
        }
        goto LABEL_95;
      }
LABEL_125:
      if (*(_DWORD *)v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
      return isLength;
    case 4:
      if (!v4)
        return 0;
      v10 = *(_WORD *)(v4 + 4);
      v11 = v10 & 0x7F;
      v12 = 22;
      if ((v11 - 79) >= 2)
      {
        if (v11 == 77)
        {
          v12 = 20;
        }
        else if (v11 != 63)
        {
          v12 = *(_WORD *)(v4 + 4) & 0x7F;
          if ((v10 & 0x7F) == 0x49)
          {
            v44 = *(_BYTE **)(*(_QWORD *)(v4 + 8) + 8);
            if (v44[12] == 1)
            {
LABEL_97:
              v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44 + 72))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8));
            }
            else
            {
              v12 = 1;
              switch(v44[12])
              {
                case 0:
                  break;
                case 2:
                  v12 = 3;
                  break;
                case 3:
                  v12 = 74;
                  break;
                case 4:
                  v12 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_97;
                default:
                  v12 = 0;
                  break;
              }
            }
          }
        }
      }
      v13 = WebCore::unitCategory(v12) == 8;
      goto LABEL_76;
    case 5:
      if (!v4)
        return 0;
      if ((*(_WORD *)(v4 + 4) & 0x7F) != 0x50
        || (v35 = *(unsigned int **)(*(_QWORD *)a1 + 24)) == 0
        || (v36 = *v35, !(_DWORD)v36))
      {
        isLength = 0;
        goto LABEL_125;
      }
      v37 = 0;
      v38 = *(unsigned __int16 *)(v4 + 8);
      v39 = v35 + 1;
      do
      {
        if ((_DWORD)v36 == (_DWORD)v37)
        {
          __break(0xC471u);
          JUMPOUT(0x1958F46FCLL);
        }
        v40 = *((unsigned __int16 *)v39 + v37);
        isLength = v40 == v38;
      }
      while (v40 != v38 && v36 - 1 != v37++);
LABEL_124:
      if (v4)
        goto LABEL_125;
      return isLength;
    case 6:
      v42 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_123;
      v43 = 59392;
      goto LABEL_122;
    default:
      goto LABEL_123;
  }
}

uint64_t *WTF::Vector<std::unique_ptr<WebCore::MutableCSSSelector>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::MutableCSSSelector>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<JSC::Identifier,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t *WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _WORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;

  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 < 0x4924925)
    {
      v5 = 56 * a3;
      v6 = WTF::fastMalloc((WTF *)(56 * a3));
      *((_DWORD *)a1 + 2) = v5 / 0x38;
      *a1 = v6;
      v27 = a2 + v5;
      v7 = *((_DWORD *)a1 + 3);
      while (1)
      {
        v8 = *a1;
        v9 = (_WORD *)(*a1 + 56 * v7);
        *v9 = *(_WORD *)a2;
        v10 = v9 + 4;
        v11 = *(_DWORD **)(a2 + 8);
        if (v11)
          *v11 += 2;
        v12 = v7;
        *v10 = v11;
        v13 = v8 + 56 * v7;
        *(_BYTE *)(v13 + 16) = 0;
        v14 = (_BYTE *)(v13 + 16);
        v14[32] = 0;
        v15 = v14 + 32;
        if (*(_BYTE *)(a2 + 48))
        {
          *v14 = *(_BYTE *)(a2 + 16);
          v16 = v8 + 56 * v12;
          v17 = *(_DWORD *)(a2 + 36);
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          v18 = v16 + 24;
          *(_DWORD *)(v18 + 12) = v17;
          if (v17)
          {
            if (v17 >= 0x2E8BA2F)
            {
              __break(0xC471u);
              goto LABEL_19;
            }
            v19 = 88 * v17;
            v20 = WTF::fastMalloc((WTF *)(88 * v17));
            *(_DWORD *)(v8 + 56 * v12 + 32) = (v19 & 0xFFFFFFF8) / 0x58;
            *(_QWORD *)v18 = v20;
            v21 = *(_DWORD *)(a2 + 36);
            if (v21)
            {
              v22 = v20;
              v23 = *(_QWORD *)(a2 + 24);
              v24 = 88 * v21;
              do
              {
                *(_BYTE *)v22 = 0;
                *(_DWORD *)(v22 + 80) = -1;
                v25 = *(unsigned int *)(v23 + 80);
                if ((_DWORD)v25 != -1)
                {
                  ((void (*)(char *, uint64_t, uint64_t))off_1E339E600[v25])(&v28, v22, v23);
                  *(_DWORD *)(v22 + 80) = v25;
                }
                v22 += 88;
                v23 += 88;
                v24 -= 88;
              }
              while (v24);
            }
          }
          *(_DWORD *)(v8 + 56 * v12 + 40) = *(_DWORD *)(a2 + 40);
          *v15 = 1;
        }
        v7 = *((_DWORD *)a1 + 3) + 1;
        *((_DWORD *)a1 + 3) = v7;
        a2 += 56;
        if (a2 == v27)
          return a1;
      }
    }
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x1958F4BB4);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MQ::MediaQueryResult>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v3 + 16);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MQ::MediaQueryResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0xAAAAAAB)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(_DWORD *)(result + 12);
    v8 = 24 * v4;
    v9 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = v9;
    if (v7)
    {
      v11 = v9;
      v12 = (uint64_t)v6;
      do
      {
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v13 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)v11 = v13;
        LODWORD(v13) = *(_DWORD *)(v12 + 8);
        *(_DWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v11 + 8) = v13;
        LODWORD(v13) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v12 + 12) = 0;
        *(_DWORD *)(v11 + 12) = v13;
        *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
        v12 = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v12, v10) + 24;
        v11 += 24;
      }
      while ((WTF *)v12 != (WTF *)((char *)v6 + 24 * v7));
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CQ::Features::SizeFeatureSchema::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v8;

  v3 = *(_QWORD *)(a3 + 80);
  if (!v3 || (*(_BYTE *)(v3 + 45) & 4) == 0)
    return 2;
  ++*(_DWORD *)(v3 + 16);
  if (WebCore::RenderElement::hasEligibleContainmentForSizeQuery((WebCore::RenderElement *)v3))
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, v3, a3 + 8);
  else
    result = 2;
  v8 = *(_DWORD *)(v3 + 16);
  if (v8)
  {
    *(_DWORD *)(v3 + 16) = v8 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WebCore::CQ::Features::width(void)::Schema::~Schema(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E339E7B8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::CQ::Features::width(void)::Schema::~Schema(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::CQ::Features::width(void)::Schema::evaluate(uint64_t a1, uint64_t a2, _QWORD *a3, const WebCore::CSSToLengthConversionData *a4)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v28;
  uint64_t (*v31)(_QWORD *);
  _QWORD *v32;
  unsigned int v33;
  int v34;
  int v35;

  v7 = *((_DWORD *)a3 + 40);
  v8 = (*(uint64_t (**)(_QWORD *))(*a3 + 1016))(a3);
  if (__OFSUB__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v9 = v7 - v8;
  v10 = (*(uint64_t (**)(_QWORD *))(*a3 + 1024))(a3);
  if (__OFSUB__(v9, v10))
    v11 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v11 = v9 - v10;
  v12 = (*(uint64_t (**)(_QWORD *))(*a3 + 1352))(a3);
  v13 = v12 << 6;
  if (v12 < -33554432)
    v13 = 0x80000000;
  if (v12 > 0x1FFFFFF)
    v13 = 0x7FFFFFFF;
  v14 = __OFSUB__(v11, v13);
  v15 = v11 - v13;
  if (v14)
    v15 = (v11 >> 31) + 0x7FFFFFFF;
  v16 = v15 & ~(v15 >> 31);
  v17 = (*(uint64_t (**)(_QWORD *))(*a3 + 944))(a3);
  if (__OFSUB__(v16, v17))
    v18 = 0x7FFFFFFF;
  else
    v18 = v16 - v17;
  v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 952))(a3);
  v20 = v18 - v19;
  if (__OFSUB__(v18, v19))
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(a3[11] + 40) + 584) & 0x100) != 0)
  {
    v31 = *(uint64_t (**)(_QWORD *))(*a3 + 1352);
    v32 = a3;
    v33 = v20;
    v34 = v31(v32);
    v20 = v33;
    v35 = v34 << 6;
    if (v34 > 0x1FFFFFF)
      v35 = 0x7FFFFFFF;
    if (v34 >= -33554432)
      v21 = v35;
    else
      v21 = 0x80000000;
  }
  else
  {
    v21 = 0;
  }
  v14 = __OFSUB__(v20, v21);
  v22 = v20 - v21;
  v23 = (v20 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v23 = v22;
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v23 > 0;
  v24 = v23 & ~(v23 >> 31);
  v25 = WebCore::MQ::evaluateLengthComparison(v24, a2 + 16, 0, a4);
  v26 = WebCore::MQ::evaluateLengthComparison(v24, a2 + 40, 1, a4);
  v28 = v25 == 1 && v26 == 1;
  if (v26 == 2 || v25 == 2)
    return 2;
  else
    return v28;
}

uint64_t WebCore::MQ::FeatureSchema::evaluate()
{
  return 2;
}

void WebCore::MQ::FeatureSchema::~FeatureSchema(WebCore::MQ::FeatureSchema *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::CQ::Features::height(void)::Schema::~Schema(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E339E7B8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::CQ::Features::height(void)::Schema::~Schema(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::CQ::Features::height(void)::Schema::evaluate(uint64_t a1, uint64_t a2, _QWORD *a3, const WebCore::CSSToLengthConversionData *a4)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v28;
  uint64_t (*v31)(_QWORD *);
  _QWORD *v32;
  unsigned int v33;
  int v34;
  int v35;

  v7 = *((_DWORD *)a3 + 41);
  v8 = (*(uint64_t (**)(_QWORD *))(*a3 + 1000))(a3);
  if (__OFSUB__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v9 = v7 - v8;
  v10 = (*(uint64_t (**)(_QWORD *))(*a3 + 1008))(a3);
  if (__OFSUB__(v9, v10))
    v11 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v11 = v9 - v10;
  v12 = (*(uint64_t (**)(_QWORD *))(*a3 + 1360))(a3);
  v13 = v12 << 6;
  if (v12 < -33554432)
    v13 = 0x80000000;
  if (v12 > 0x1FFFFFF)
    v13 = 0x7FFFFFFF;
  v14 = __OFSUB__(v11, v13);
  v15 = v11 - v13;
  if (v14)
    v15 = (v11 >> 31) + 0x7FFFFFFF;
  v16 = v15 & ~(v15 >> 31);
  v17 = (*(uint64_t (**)(_QWORD *))(*a3 + 928))(a3);
  if (__OFSUB__(v16, v17))
    v18 = 0x7FFFFFFF;
  else
    v18 = v16 - v17;
  v19 = (*(uint64_t (**)(_QWORD *))(*a3 + 936))(a3);
  v20 = v18 - v19;
  if (__OFSUB__(v18, v19))
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(a3[11] + 40) + 584) & 0x100) != 0)
  {
    v31 = *(uint64_t (**)(_QWORD *))(*a3 + 1360);
    v32 = a3;
    v33 = v20;
    v34 = v31(v32);
    v20 = v33;
    v35 = v34 << 6;
    if (v34 > 0x1FFFFFF)
      v35 = 0x7FFFFFFF;
    if (v34 >= -33554432)
      v21 = v35;
    else
      v21 = 0x80000000;
  }
  else
  {
    v21 = 0;
  }
  v14 = __OFSUB__(v20, v21);
  v22 = v20 - v21;
  v23 = (v20 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v23 = v22;
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v23 > 0;
  v24 = v23 & ~(v23 >> 31);
  v25 = WebCore::MQ::evaluateLengthComparison(v24, a2 + 16, 0, a4);
  v26 = WebCore::MQ::evaluateLengthComparison(v24, a2 + 40, 1, a4);
  v28 = v25 == 1 && v26 == 1;
  if (v26 == 2 || v25 == 2)
    return 2;
  else
    return v28;
}

_QWORD *WebCore::CQ::Features::inlineSize(void)::Schema::~Schema(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E339E7B8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::CQ::Features::inlineSize(void)::Schema::~Schema(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::CQ::Features::inlineSize(void)::Schema::evaluate(int a1, uint64_t a2, WebCore::RenderBox *this, const WebCore::CSSToLengthConversionData *a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;

  v6 = WebCore::RenderBox::contentLogicalWidth(this);
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v6 != 0;
  v7 = v6;
  v8 = WebCore::MQ::evaluateLengthComparison(v6, a2 + 16, 0, a4);
  v9 = WebCore::MQ::evaluateLengthComparison(v7, a2 + 40, 1, a4);
  v11 = v8 == 1 && v9 == 1;
  if (v9 == 2 || v8 == 2)
    return 2;
  else
    return v11;
}

_QWORD *WebCore::CQ::Features::blockSize(void)::Schema::~Schema(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E339E7B8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::CQ::Features::blockSize(void)::Schema::~Schema(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::CQ::Features::blockSize(void)::Schema::evaluate(int a1, uint64_t a2, WebCore::RenderBox *this, const WebCore::CSSToLengthConversionData *a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;

  v6 = WebCore::RenderBox::contentLogicalHeight(this);
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v6 != 0;
  v7 = v6;
  v8 = WebCore::MQ::evaluateLengthComparison(v6, a2 + 16, 0, a4);
  v9 = WebCore::MQ::evaluateLengthComparison(v7, a2 + 40, 1, a4);
  v11 = v8 == 1 && v9 == 1;
  if (v9 == 2 || v8 == 2)
    return 2;
  else
    return v11;
}

_QWORD *WebCore::CQ::Features::aspectRatio(void)::Schema::~Schema(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E339E7B8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::CQ::Features::aspectRatio(void)::Schema::~Schema(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WebCore::CQ::Features::aspectRatio(void)::Schema::evaluate(int a1, uint64_t a2, WebCore::RenderBox *this)
{
  unint64_t v4;
  float v5;
  float v6;
  int v7;
  int v8;
  _BOOL4 v10;

  v4 = WebCore::RenderBox::contentSize(this);
  v5 = (float)(int)v4 * 0.015625;
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v5 != 0.0;
  v6 = (float)SHIDWORD(v4) * 0.015625;
  v7 = WebCore::MQ::evaluateRatioComparison(a2 + 16, 0, v5, v6);
  v8 = WebCore::MQ::evaluateRatioComparison(a2 + 40, (WTF::StringImpl *)1, v5, v6);
  v10 = v7 == 1 && v8 == 1;
  if (v8 == 2 || v7 == 2)
    return 2;
  else
    return v10;
}

unint64_t WebCore::RenderBox::contentSize(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v35;
  int v36;
  int v37;

  v2 = *((_DWORD *)this + 40);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  v11 = v10 & ~(v10 >> 31);
  v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
  v9 = __OFSUB__(v11, v12);
  v13 = v11 - v12;
  if (v9)
    v13 = 0x7FFFFFFF;
  v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 952))(this);
  if (__OFSUB__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v15 = v13 - v14;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v37 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    if (v37 >= -33554432)
    {
      v16 = v37 << 6;
      if (v37 > 0x1FFFFFF)
        v16 = 0x7FFFFFFF;
    }
    else
    {
      v16 = 0x80000000;
    }
  }
  else
  {
    v16 = 0;
  }
  v9 = __OFSUB__(v15, v16);
  v17 = v15 - v16;
  if (v9)
    v18 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17;
  v19 = *((_DWORD *)this + 41);
  v20 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  if (__OFSUB__(v19, v20))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  else
    v21 = v19 - v20;
  v22 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v21, v22))
    v23 = (v21 >> 31) + 0x7FFFFFFF;
  else
    v23 = v21 - v22;
  v24 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  v25 = v24 << 6;
  if (v24 < -33554432)
    v25 = 0x80000000;
  if (v24 > 0x1FFFFFF)
    v25 = 0x7FFFFFFF;
  v9 = __OFSUB__(v23, v25);
  v26 = v23 - v25;
  if (v9)
    v26 = (v23 >> 31) + 0x7FFFFFFF;
  v27 = v26 & ~(v26 >> 31);
  v28 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
  v9 = __OFSUB__(v27, v28);
  v29 = v27 - v28;
  if (v9)
    v29 = 0x7FFFFFFF;
  v30 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 936))(this);
  if (__OFSUB__(v29, v30))
    v31 = (v29 >> 31) + 0x7FFFFFFF;
  else
    v31 = v29 - v30;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v35 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    v36 = v35 << 6;
    if (v35 > 0x1FFFFFF)
      v36 = 0x7FFFFFFF;
    if (v35 >= -33554432)
      v32 = v36;
    else
      v32 = 0x80000000;
  }
  else
  {
    v32 = 0;
  }
  v9 = __OFSUB__(v31, v32);
  v33 = v31 - v32;
  if (v9)
    v33 = (v31 >> 31) + 0x7FFFFFFF;
  return v18 & ~(v18 >> 31) | ((unint64_t)(v33 & ~(v33 >> 31)) << 32);
}

_QWORD *WebCore::CQ::Features::orientation(void)::Schema::~Schema(_QWORD *a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *a1 = &off_1E339E7B8;
  v3 = (WTF *)a1[3];
  a1[3] = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

uint64_t WebCore::CQ::Features::orientation(void)::Schema::~Schema(WTF *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::fastFree(this, a2);
}

BOOL WebCore::CQ::Features::orientation(void)::Schema::evaluate(int a1, uint64_t a2, WebCore::RenderBox *this)
{
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(WebCore::RenderBox *);
  WebCore::RenderBox *v28;
  unsigned int v29;
  int v30;
  int v31;

  v5 = WebCore::RenderBox::contentHeight(this);
  v6 = *((_DWORD *)this + 40);
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  if (__OFSUB__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 - v7;
  v9 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
  if (__OFSUB__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 - v9;
  v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  v12 = v11 << 6;
  if (v11 < -33554432)
    v12 = 0x80000000;
  if (v11 > 0x1FFFFFF)
    v12 = 0x7FFFFFFF;
  v13 = __OFSUB__(v10, v12);
  v14 = v10 - v12;
  if (v13)
    v14 = (v10 >> 31) + 0x7FFFFFFF;
  v15 = v14 & ~(v14 >> 31);
  v16 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
  if (__OFSUB__(v15, v16))
    v17 = 0x7FFFFFFF;
  else
    v17 = v15 - v16;
  v18 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 952))(this);
  v19 = v17 - v18;
  if (__OFSUB__(v17, v18))
    v19 = (v17 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v27 = *(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352);
    v28 = this;
    v29 = v19;
    v30 = v27(v28);
    v19 = v29;
    v31 = v30 << 6;
    if (v30 > 0x1FFFFFF)
      v31 = 0x7FFFFFFF;
    if (v30 >= -33554432)
      v20 = v31;
    else
      v20 = 0x80000000;
  }
  else
  {
    v20 = 0;
  }
  v13 = __OFSUB__(v19, v20);
  v21 = v19 - v20;
  v22 = (v19 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v22 = v21;
  if (v5 >= (v22 & ~(v22 >> 31)))
    v23 = 484;
  else
    v23 = 469;
  if (!*(_BYTE *)(a2 + 56))
    return 1;
  v25 = *(_QWORD *)(a2 + 48);
  if (((*(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1958F5CF0);
  }
  if ((*(_WORD *)(v25 + 4) & 0x7F) == 0x50)
    v26 = *(unsigned __int16 *)(v25 + 8);
  else
    v26 = 0;
  return v26 == v23;
}

BOOL WebCore::CQ::Features::StyleFeatureSchema::evaluate(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int i;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF::StringImpl *v42;
  void *v43;
  void *v44;
  const WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD **v54;
  _DWORD *v55;
  WTF *v56;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  _DWORD *v61;
  unint64_t v62;
  unsigned int *v63;
  WTF *v64;
  WTF *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD **v70;
  _DWORD *v71;
  WTF *v72;
  uint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  _DWORD *v77;
  unint64_t v78;
  unsigned int *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD **v86;
  _DWORD *v87;
  WTF *v88;
  uint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  _DWORD *v93;
  unint64_t v94;
  unsigned int *v95;
  _DWORD *v96;
  int v97;
  int v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107[2];
  WTF *v108[2];
  WTF *v109[2];
  WTF *v110;
  uint64_t v111;
  uint64_t v112;
  const WebCore::CSSLinearGradientValue **v113[1976];
  int v114;
  _DWORD *v115;
  uint64_t v116;
  _DWORD *v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122[3];
  uint64_t v123;
  uint64_t v124;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = (_QWORD *)v3[1];
  v5 = v3[3];
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  v9 = v3;
  v10 = *(_QWORD *)(*(_QWORD *)(v4[1] + 40) + 288);
  if (v10)
  {
    v11 = *v2;
    do
    {
      v12 = *(_QWORD *)(v10 + 16);
      if (v12)
      {
        v13 = 0;
        for (i = *(_DWORD *)(v11 + 16) >> 8; ; i = v13 + v15)
        {
          v15 = i & *(_DWORD *)(v12 - 8);
          v16 = *(_QWORD *)(v12 + 16 * v15);
          if (!v16)
            break;
          if (v16 != -1 && v16 == v11)
          {
            v18 = *(_DWORD **)(v12 + 16 * v15 + 8);
            if (v18)
              goto LABEL_33;
            break;
          }
          ++v13;
        }
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
  }
  v19 = *(_QWORD *)(v4[3] + 216);
  if (v19)
  {
    v20 = *v2;
    do
    {
      v21 = *(_QWORD *)(v19 + 16);
      if (v21)
      {
        v22 = 0;
        for (j = *(_DWORD *)(v20 + 16) >> 8; ; j = v22 + v24)
        {
          v24 = j & *(_DWORD *)(v21 - 8);
          v25 = *(_QWORD *)(v21 + 16 * v24);
          if (!v25)
            break;
          if (v25 != -1 && v25 == v20)
          {
            v18 = *(_DWORD **)(v21 + 16 * v24 + 8);
            if (v18)
              goto LABEL_33;
            break;
          }
          ++v22;
        }
      }
      v19 = *(_QWORD *)(v19 + 8);
    }
    while (v19);
  }
  v18 = 0;
LABEL_33:
  if (!*((_BYTE *)v2 + 56))
  {
    if (v18)
      return v18[18] != 1 || *((_WORD *)v18 + 12) != 0;
    return 0;
  }
  v27 = v2[6];
  if (v27)
  {
    v28 = *(_DWORD *)v27;
    *(_DWORD *)v27 += 2;
    if (((*(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16)) & 0x3F800) != 0xE800)
    {
      if (v28)
      {
        *(_DWORD *)v27 = v28;
        v27 = 0;
      }
      else
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v27, (WTF::StringImpl *)v2);
        v27 = 0;
        v5 = v9[3];
      }
    }
  }
  v29 = *(_QWORD *)(*v9 + 8);
  *(_DWORD *)(v29 + 24) += 2;
  v122[0] = v29;
  v122[1] = v5;
  v122[2] = v9[2];
  v30 = v9[5];
  if (v30)
    *(_DWORD *)(v30 + 24) += 2;
  v123 = v30;
  v124 = 0;
  v114 = 0;
  v31 = (_DWORD *)v4[1];
  ++*v31;
  v32 = v4[2];
  v33 = (_DWORD *)v4[3];
  v115 = v31;
  v116 = v32;
  ++*v33;
  v117 = v33;
  v34 = (_DWORD *)v4[4];
  ++*v34;
  v35 = v4[5];
  v118 = v34;
  v119 = v35;
  v120 = 0;
  v36 = (_DWORD *)v4[7];
  ++*v36;
  v121 = v36;
  LOWORD(v106) = 0;
  BYTE2(v106) = 0;
  *(_OWORD *)v107 = 0u;
  *(_OWORD *)v108 = 0u;
  *(_OWORD *)v109 = 0u;
  v110 = (WTF *)&v112;
  v111 = 4;
  WebCore::Style::Builder::Builder((unsigned __int8 *)v113, (uint64_t)&v114, v122, (uint64_t)&v106, 0, 3u, 0);
  v38 = v110;
  if (&v112 != (uint64_t *)v110 && v110)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree(v38, v37);
  }
  if (HIDWORD(v109[1]))
  {
    v48 = v109[0];
    v49 = (WTF *)((char *)v109[0] + 16 * HIDWORD(v109[1]));
    do
    {
      v50 = *(_QWORD *)v48;
      *(_QWORD *)v48 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 1)
        {
          v51 = *(unsigned int *)(v50 + 4);
          if ((v51 & 8) != 0)
          {
            v52 = *(unsigned int *)(v50 + 28);
            if ((_DWORD)v52)
            {
              v53 = 16 * v52;
              v54 = (_DWORD **)(*(_QWORD *)(v50 + 16) + 8);
              do
              {
                v55 = *v54;
                *v54 = 0;
                if (v55)
                {
                  if (*v55 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, (WTF::StringImpl *)v37);
                  else
                    *v55 -= 2;
                }
                v54 += 2;
                v53 -= 16;
              }
              while (v53);
            }
            v56 = *(WTF **)(v50 + 16);
            if ((WTF *)(v50 + 32) != v56 && v56 != 0)
            {
              *(_QWORD *)(v50 + 16) = 0;
              *(_DWORD *)(v50 + 24) = 0;
              WTF::fastFree(v56, v37);
            }
            v58 = *(_QWORD *)(v50 + 8);
            *(_QWORD *)(v50 + 8) = 0;
            if (v58)
              (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          }
          else if (v51 >= 0x10)
          {
            v59 = 0;
            v60 = (unsigned int *)(v50 + ((v51 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v61 = (_DWORD *)(*v60 | ((unint64_t)*((unsigned __int8 *)v60 + 4) << 32));
              if (*v61 == 2)
              {
                v62 = v59;
                v63 = v60;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, (WTF::StringImpl *)v37);
                v60 = v63;
                v59 = v62;
              }
              else
              {
                *v61 -= 2;
              }
              ++v59;
              v60 = (unsigned int *)((char *)v60 + 5);
            }
            while (v59 < (unint64_t)*(unsigned int *)(v50 + 4) >> 4);
          }
          WTF::fastFree((WTF *)v50, v37);
        }
        else
        {
          --*(_DWORD *)v50;
        }
      }
      v48 = (WTF *)((char *)v48 + 16);
    }
    while (v48 != v49);
  }
  v39 = v109[0];
  if (v109[0])
  {
    v109[0] = 0;
    LODWORD(v109[1]) = 0;
    WTF::fastFree(v39, v37);
  }
  if (HIDWORD(v108[1]))
  {
    v64 = v108[0];
    v65 = (WTF *)((char *)v108[0] + 16 * HIDWORD(v108[1]));
    do
    {
      v66 = *(_QWORD *)v64;
      *(_QWORD *)v64 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 1)
        {
          v67 = *(unsigned int *)(v66 + 4);
          if ((v67 & 8) != 0)
          {
            v68 = *(unsigned int *)(v66 + 28);
            if ((_DWORD)v68)
            {
              v69 = 16 * v68;
              v70 = (_DWORD **)(*(_QWORD *)(v66 + 16) + 8);
              do
              {
                v71 = *v70;
                *v70 = 0;
                if (v71)
                {
                  if (*v71 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)v37);
                  else
                    *v71 -= 2;
                }
                v70 += 2;
                v69 -= 16;
              }
              while (v69);
            }
            v72 = *(WTF **)(v66 + 16);
            if ((WTF *)(v66 + 32) != v72 && v72 != 0)
            {
              *(_QWORD *)(v66 + 16) = 0;
              *(_DWORD *)(v66 + 24) = 0;
              WTF::fastFree(v72, v37);
            }
            v74 = *(_QWORD *)(v66 + 8);
            *(_QWORD *)(v66 + 8) = 0;
            if (v74)
              (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
          }
          else if (v67 >= 0x10)
          {
            v75 = 0;
            v76 = (unsigned int *)(v66 + ((v67 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v77 = (_DWORD *)(*v76 | ((unint64_t)*((unsigned __int8 *)v76 + 4) << 32));
              if (*v77 == 2)
              {
                v78 = v75;
                v79 = v76;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v77, (WTF::StringImpl *)v37);
                v76 = v79;
                v75 = v78;
              }
              else
              {
                *v77 -= 2;
              }
              ++v75;
              v76 = (unsigned int *)((char *)v76 + 5);
            }
            while (v75 < (unint64_t)*(unsigned int *)(v66 + 4) >> 4);
          }
          WTF::fastFree((WTF *)v66, v37);
        }
        else
        {
          --*(_DWORD *)v66;
        }
      }
      v64 = (WTF *)((char *)v64 + 16);
    }
    while (v64 != v65);
  }
  v40 = v108[0];
  if (v108[0])
  {
    v108[0] = 0;
    LODWORD(v108[1]) = 0;
    WTF::fastFree(v40, v37);
  }
  if (HIDWORD(v107[1]))
  {
    v80 = v107[0];
    v81 = (WTF *)((char *)v107[0] + 16 * HIDWORD(v107[1]));
    do
    {
      v82 = *(_QWORD *)v80;
      *(_QWORD *)v80 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 1)
        {
          v83 = *(unsigned int *)(v82 + 4);
          if ((v83 & 8) != 0)
          {
            v84 = *(unsigned int *)(v82 + 28);
            if ((_DWORD)v84)
            {
              v85 = 16 * v84;
              v86 = (_DWORD **)(*(_QWORD *)(v82 + 16) + 8);
              do
              {
                v87 = *v86;
                *v86 = 0;
                if (v87)
                {
                  if (*v87 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v87, (WTF::StringImpl *)v37);
                  else
                    *v87 -= 2;
                }
                v86 += 2;
                v85 -= 16;
              }
              while (v85);
            }
            v88 = *(WTF **)(v82 + 16);
            if ((WTF *)(v82 + 32) != v88 && v88 != 0)
            {
              *(_QWORD *)(v82 + 16) = 0;
              *(_DWORD *)(v82 + 24) = 0;
              WTF::fastFree(v88, v37);
            }
            v90 = *(_QWORD *)(v82 + 8);
            *(_QWORD *)(v82 + 8) = 0;
            if (v90)
              (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
          }
          else if (v83 >= 0x10)
          {
            v91 = 0;
            v92 = (unsigned int *)(v82 + ((v83 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v93 = (_DWORD *)(*v92 | ((unint64_t)*((unsigned __int8 *)v92 + 4) << 32));
              if (*v93 == 2)
              {
                v94 = v91;
                v95 = v92;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v93, (WTF::StringImpl *)v37);
                v92 = v95;
                v91 = v94;
              }
              else
              {
                *v93 -= 2;
              }
              ++v91;
              v92 = (unsigned int *)((char *)v92 + 5);
            }
            while (v91 < (unint64_t)*(unsigned int *)(v82 + 4) >> 4);
          }
          WTF::fastFree((WTF *)v82, v37);
        }
        else
        {
          --*(_DWORD *)v82;
        }
      }
      v80 = (WTF *)((char *)v80 + 16);
    }
    while (v80 != v81);
  }
  v41 = v107[0];
  if (v107[0])
  {
    v107[0] = 0;
    LODWORD(v107[1]) = 0;
    WTF::fastFree(v41, v37);
  }
  WebCore::Style::Builder::resolveCustomPropertyForContainerQueries((WebCore::Style::Builder *)v113, (const WebCore::CSSCustomPropertyValue *)v27, &v105);
  WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)v113, v42);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v114, v43);
  v46 = v123;
  v123 = 0;
  if (v46)
  {
    if (*(_DWORD *)(v46 + 24) == 2)
    {
      if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v46, v44);
    }
    else
    {
      *(_DWORD *)(v46 + 24) -= 2;
    }
  }
  v47 = v122[0];
  v122[0] = 0;
  if (v47)
  {
    if (*(_DWORD *)(v47 + 24) == 2)
    {
      if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v47, v44);
    }
    else
    {
      *(_DWORD *)(v47 + 24) -= 2;
    }
  }
  if (*(_DWORD *)v27 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v27, (WTF::StringImpl *)v44);
  else
    *(_DWORD *)v27 -= 2;
  v96 = (_DWORD *)v105;
  if (!v105)
    return 0;
  if (*(_DWORD *)(v105 + 72) == 1 && !*(_WORD *)(v105 + 24))
  {
    if (!v18)
    {
      v7 = 1;
      goto LABEL_168;
    }
    if (v18[18] == 1)
    {
      v7 = *((_WORD *)v18 + 12) == 0;
      goto LABEL_168;
    }
LABEL_167:
    v7 = 0;
LABEL_168:
    v105 = 0;
LABEL_169:
    if (*v96 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v96, (WTF::StringImpl *)v44);
    else
      *v96 -= 2;
    return v7;
  }
  if (!v18)
    goto LABEL_167;
  v97 = *((unsigned __int16 *)v18 + 2) | (*((unsigned __int8 *)v18 + 6) << 16);
  v98 = *(unsigned __int16 *)(v105 + 4) | (*(unsigned __int8 *)(v105 + 6) << 16);
  if (((v98 ^ v97) & 0x3F800) != 0)
  {
    if ((v97 & 0x3F800) == 0x1D800)
    {
LABEL_176:
      v100 = v18;
      while (v100[2] == 1)
      {
        v100 = (_DWORD *)*((_QWORD *)v100 + 2);
        v101 = *((unsigned __int16 *)v100 + 2) | (*((unsigned __int8 *)v100 + 6) << 16);
        if (((v101 ^ v98) & 0x3F800) == 0)
        {
          v106 = (uint64_t)v96;
          goto LABEL_192;
        }
        if ((v101 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v102 = v98 & 0x3F800;
          v98 = *((unsigned __int16 *)v100 + 2) | (*((unsigned __int8 *)v100 + 6) << 16);
          v18 = v96;
          v96 = v100;
          if (v102 == 120832)
            goto LABEL_176;
          goto LABEL_158;
        }
      }
    }
    else if ((v98 & 0x3F800) == 0x1D800)
    {
LABEL_183:
      v100 = v96;
      while (v100[2] == 1)
      {
        v100 = (_DWORD *)*((_QWORD *)v100 + 2);
        v103 = *((unsigned __int16 *)v100 + 2) | (*((unsigned __int8 *)v100 + 6) << 16);
        if (((v103 ^ v97) & 0x3F800) == 0)
        {
          v106 = (uint64_t)v18;
LABEL_192:
          v113[0] = (const WebCore::CSSLinearGradientValue **)&v106;
          v99 = (uint64_t)v100;
          goto LABEL_157;
        }
        if ((v103 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v104 = v97 & 0x3F800;
          v97 = *((unsigned __int16 *)v100 + 2) | (*((unsigned __int8 *)v100 + 6) << 16);
          v96 = v18;
          v18 = v100;
          if (v104 == 120832)
            goto LABEL_183;
          goto LABEL_158;
        }
      }
    }
    v7 = 0;
  }
  else
  {
    v106 = v105;
    v113[0] = (const WebCore::CSSLinearGradientValue **)&v106;
    v99 = (uint64_t)v18;
LABEL_157:
    v7 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v99, v113, v45);
  }
LABEL_158:
  v96 = (_DWORD *)v105;
  v105 = 0;
  if (v96)
    goto LABEL_169;
  return v7;
}

void WebCore::CQ::Features::StyleFeatureSchema::~StyleFeatureSchema(WebCore::CQ::Features::StyleFeatureSchema *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = &off_1E339E7B8;
  v3 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::fastFree(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::MQ::GenericMediaQueryParser<WebCore::CQ::ContainerQueryParser>::consumeCondition(uint64_t a1, __int128 **a2, uint64_t a3, __int16 *a4)
{
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 *v24;
  __int128 *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BYTE v32[80];
  int v33;
  unsigned __int8 v34;
  char v35;
  char v36[8];
  WTF *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  if (*a2 >= a2[1])
  {
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_BYTE *)v8 & 0x3F) == 0)
  {
    v9 = *a2;
    if (*a2 >= a2[1])
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) == 0)
    {
      v23 = *((_DWORD *)v9 + 4);
      if (v23 < 0)
      {
        v23 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = v23;
      }
      if ((unsigned __int16)v23 == 1008)
      {
        v24 = *a2;
        if (*a2 == a2[1])
        {
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v24 = *a2;
          }
        }
        else
        {
          v24 = (__int128 *)((char *)v24 + 24);
          *a2 = v24;
        }
        v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        while (1)
        {
          if (v24 >= a2[1])
          {
            v24 = v25;
            {
              v25 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v25, 30, 0);
              v24 = v25;
            }
          }
          if ((*(_DWORD *)v24 & 0x3F) != 0x10)
            break;
          v24 = (__int128 *)((char *)*a2 + 24);
          *a2 = v24;
        }
        WebCore::MQ::GenericMediaQueryParser<WebCore::CQ::ContainerQueryParser>::consumeQueryInParens((uint64_t)v32, (uint64_t)a2, a3, a4);
        v26 = v34;
        if (v34 && *a2 == a2[1])
        {
          v36[0] = 0;
          v27 = -1;
          v40 = -1;
          v28 = v33;
          if (v33 != -1)
          {
            ((void (*)(char *, char *, _BYTE *))off_1E339E600[v33])(&v35, v36, v32);
            v40 = v28;
          }
          v29 = WTF::fastMalloc((WTF *)0x58);
          *(_BYTE *)v29 = 0;
          *(_DWORD *)(v29 + 80) = -1;
          v30 = v40;
          if (v40 != -1)
          {
            ((void (*)(char *, uint64_t, char *))off_1E339E600[v40])(&v35, v29, v36);
            *(_DWORD *)(v29 + 80) = v30;
            v27 = v40;
          }
          *(_BYTE *)a1 = 2;
          *(_QWORD *)(a1 + 8) = v29;
          *(_QWORD *)(a1 + 16) = 0x100000001;
          *(_DWORD *)(a1 + 24) = 0;
          *(_BYTE *)(a1 + 32) = 1;
          if (v27 != -1)
            ((void (*)(char *, char *))off_1E339E5E8[v27])(&v35, v36);
          v26 = v34;
        }
        else
        {
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 32) = 0;
        }
        if (v26 && v33 != -1)
          ((void (*)(char *, _BYTE *))off_1E339E5E8[v33])(v36, v32);
        return;
      }
    }
  }
  v31 = a1;
  v36[0] = 0;
  BYTE2(v39) = 0;
  v37 = 0;
  v38 = 0;
  LOBYTE(v39) = 0;
  while (1)
  {
    if (!HIDWORD(v38))
      goto LABEL_22;
    v10 = *a2;
    if (*a2 != a2[1])
    {
      v11 = (__int128 *)((char *)v10 + 24);
      goto LABEL_9;
    }
    v11 = *a2;
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v18 = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v11 = *a2;
      v10 = (__int128 *)v18;
    }
    while (1)
    {
      if (v11 >= a2[1])
      {
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v17 = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v11 = (__int128 *)v17;
        }
      }
      if ((*(_DWORD *)v11 & 0x3F) != 0x10)
        break;
      v11 = (__int128 *)((char *)*a2 + 24);
LABEL_9:
      *a2 = v11;
    }
    if ((*(_DWORD *)v10 & 0x3F) != 0)
      break;
    v12 = *((_DWORD *)v10 + 4);
    if (v12 < 0)
      LOWORD(v12) = WebCore::cssValueKeywordID(*((_QWORD *)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*(_DWORD *)v10 >> 22) & 1) << 32));
    if ((unsigned __int16)v12 == 1006)
    {
      v13 = 0;
    }
    else
    {
      if ((unsigned __int16)v12 != 1007)
        break;
      v13 = 1;
    }
    if (HIDWORD(v38) >= 2 && v36[0] != v13)
      break;
    v36[0] = v13;
LABEL_22:
    WebCore::MQ::GenericMediaQueryParser<WebCore::CQ::ContainerQueryParser>::consumeQueryInParens((uint64_t)v32, (uint64_t)a2, a3, a4);
    if (!v34)
      break;
    if (HIDWORD(v38) == (_DWORD)v38)
    {
      v14 = WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v37, HIDWORD(v38) + 1, (unint64_t)v32);
      v15 = (char *)v37 + 88 * HIDWORD(v38);
      *v15 = 0;
      *((_DWORD *)v15 + 20) = -1;
      v16 = *(unsigned int *)(v14 + 80);
      if ((_DWORD)v16 == -1)
        goto LABEL_27;
      ((void (*)(char *, char *, unint64_t))off_1E339E600[v16])(&v35, v15, v14);
      goto LABEL_26;
    }
    v15 = (char *)v37 + 88 * HIDWORD(v38);
    *v15 = 0;
    *((_DWORD *)v15 + 20) = -1;
    LODWORD(v16) = v33;
    if (v33 != -1)
    {
      ((void (*)(char *, char *, _BYTE *))off_1E339E600[v33])(&v35, v15, v32);
LABEL_26:
      *((_DWORD *)v15 + 20) = v16;
    }
LABEL_27:
    ++HIDWORD(v38);
    if (v34 && v33 != -1)
      ((void (*)(char *, _BYTE *))off_1E339E5E8[v33])(&v35, v32);
    if (*a2 == a2[1])
    {
      *(_BYTE *)v31 = v36[0];
      *(_QWORD *)(v31 + 8) = v37;
      v19 = v38;
      v37 = 0;
      v38 = 0;
      *(_QWORD *)(v31 + 16) = v19;
      *(_DWORD *)(v31 + 24) = v39;
      *(_BYTE *)(v31 + 32) = 1;
      goto LABEL_40;
    }
  }
  *(_BYTE *)v31 = 0;
  *(_BYTE *)(v31 + 32) = 0;
LABEL_40:
  v20 = (unsigned int *)v37;
  if (HIDWORD(v38))
  {
    v21 = 88 * HIDWORD(v38);
    do
    {
      v22 = v20[20];
      if ((_DWORD)v22 != -1)
        ((void (*)(_BYTE *, unsigned int *))off_1E339E5E8[v22])(v32, v20);
      v20[20] = -1;
      v20 += 22;
      v21 -= 88;
    }
    while (v21);
    v20 = (unsigned int *)v37;
  }
  if (v20)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    WTF::fastFree((WTF *)v20, a2);
  }
}

void WebCore::MQ::GenericMediaQueryParser<WebCore::CQ::ContainerQueryParser>::consumeQueryInParens(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  __int16 v4;
  __int16 *v5;
  __int128 *v8;
  int v9;
  int *v10;
  __int16 v11;
  __int128 *v12;
  __int128 *v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int16 *v18;
  __int128 *v19;
  __int128 *v20;
  __int16 *v21;
  __int128 *v22;
  char *v23;
  unsigned __int16 v24;
  char v25;
  __int16 v26;
  int v27;
  void *v28;
  unsigned int v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v39;
  WTF *v40;
  char v41;
  WebCore::MQ::Feature *v42;
  __int128 *v43;
  int v44;
  WTF::StringImpl *v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  __int128 *v56;
  WTF::StringImpl *v57;
  char v58;
  int v59;
  int v60;
  char v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  _DWORD *v68;
  char v69;
  __int128 *v70;
  char v71;
  WTF::StringImpl *v72;
  uint64_t *v73;
  WTF::StringImpl *v74;
  char v75;
  uint64_t v76;
  __int128 *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  _QWORD *v89;
  WTF::StringImpl *v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  char v98;
  char v99;
  __int128 *v100;
  int v101;
  char v102;
  __int128 v104;
  _QWORD v105[2];
  char *v106[2];
  WTF::StringImpl *v107[2];
  char v108;
  unsigned int v109;
  __int128 *v110;
  char v111;
  char v112;
  _DWORD *v113;
  char v114;
  _BYTE v115[13];
  char v116;
  WTF::StringImpl *v117;
  WTF *v118;
  int v119;
  unsigned int v120;
  _QWORD v121[2];
  _BYTE v122[24];
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;

  v5 = a4;
  v126 = *MEMORY[0x1E0C80C00];
  v8 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
    v5 = a4;
  }
  v9 = *(_DWORD *)v8 & 0x3F;
  if (v9 != 1)
  {
    v12 = *(__int128 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      {
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v12 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)v12 & 0x3F) == 0x16)
    {
      v11 = 0;
      v102 = 0;
      goto LABEL_10;
    }
LABEL_16:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 88) = 0;
    return;
  }
  if (*((_BYTE *)v5 + 2))
    goto LABEL_16;
  v10 = *(int **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    {
      v10 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v10 = (int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if (WebCore::CSSParserToken::functionId(v10) == 923)
  {
    v4 = 3;
    v102 = 1;
    v11 = 155;
LABEL_10:
    v13 = WebCore::CSSParserTokenRange::consumeBlock((__int128 **)a2);
    v15 = (unint64_t)v14;
    v106[0] = (char *)v13;
    v106[1] = v14;
    v16 = *(__int128 **)a2;
    v17 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    while (1)
    {
      if ((unint64_t)v16 >= *(_QWORD *)(a2 + 8))
      {
        v16 = v17;
        {
          v100 = v13;
          v18 = v5;
          v19 = v17;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)v17, 30, 0);
          v17 = v19;
          v5 = v18;
          v13 = v100;
          v16 = v17;
        }
      }
      if ((*(_DWORD *)v16 & 0x3F) != 0x10)
        break;
      v16 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v16;
    }
    do
    {
      v20 = v13;
      if ((unint64_t)v13 >= v15)
      {
        v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v21 = v5;
          v22 = v13;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v13 = v22;
          v5 = v21;
          v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      v13 = (__int128 *)((char *)v13 + 24);
    }
    while ((*(_DWORD *)v20 & 0x3F) == 0x10);
    v23 = (char *)v13 - 24;
    v24 = v11 | (v4 << 8);
    if (v9 == 1)
    {
      v25 = 1;
      v26 = v11 | (v4 << 8);
    }
    else
    {
      v26 = *v5;
      v25 = *((_BYTE *)v5 + 2);
    }
    v27 = *(_DWORD *)v5;
    *v5 = v26;
    *((_BYTE *)v5 + 2) = v25;
    v105[0] = (char *)v13 - 24;
    v105[1] = v15;
    WebCore::MQ::GenericMediaQueryParser<WebCore::CQ::ContainerQueryParser>::consumeCondition(v107, v105, a3, v5);
    if (v111)
    {
      v101 = v27;
      LOWORD(v110) = v11 | (v4 << 8);
      BYTE2(v110) = v102;
      *(_BYTE *)(a1 + 88) = 0;
      *(_BYTE *)a1 = v107[0];
      v29 = v109;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 20) = v29;
      if (v29)
      {
        if (v29 >= 0x2E8BA2F)
        {
          __break(0xC471u);
          JUMPOUT(0x1958F7804);
        }
        v30 = v5;
        v31 = WTF::fastMalloc((WTF *)(88 * v29));
        v32 = 0;
        *(_DWORD *)(a1 + 16) = 88 * v29 / 0x58;
        *(_QWORD *)(a1 + 8) = v31;
        v33 = v107[1];
        do
        {
          v34 = v31 + v32;
          *(_BYTE *)v34 = 0;
          *(_DWORD *)(v34 + 80) = -1;
          v35 = *(unsigned int *)((char *)v33 + v32 + 80);
          if ((_DWORD)v35 != -1)
          {
            ((void (*)(_BYTE *, uint64_t))off_1E339E600[v35])(v122, v31 + v32);
            *(_DWORD *)(v34 + 80) = v35;
          }
          v32 += 88;
        }
        while (88 * v29 != v32);
        v36 = 0;
        *(_DWORD *)(a1 + 24) = (_DWORD)v110;
        *(_DWORD *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 88) = 1;
        v5 = v30;
        do
        {
          v37 = *(unsigned int *)((char *)v33 + v36 + 80);
          if ((_DWORD)v37 != -1)
            ((void (*)(_BYTE *, char *))off_1E339E5E8[v37])(v122, (char *)v33 + v36);
          *(_DWORD *)((char *)v33 + v36 + 80) = -1;
          v36 += 88;
        }
        while (88 * v29 != v36);
      }
      else
      {
        *(_DWORD *)(a1 + 24) = (_DWORD)v110;
        *(_DWORD *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 88) = 1;
        v33 = v107[1];
      }
      v27 = v101;
      if (v33)
        WTF::fastFree(v33, v28);
LABEL_151:
      *v5 = v27;
      *((_BYTE *)v5 + 2) = BYTE2(v27);
      return;
    }
    *(_QWORD *)&v104 = v23;
    *((_QWORD *)&v104 + 1) = v15;
    *(_OWORD *)v122 = v104;
    WebCore::MQ::FeatureParser::consumeBooleanOrPlainFeature((__int128 **)&v104, (__n128 *)v107);
    if (!v116)
    {
      v104 = *(_OWORD *)v122;
      WebCore::MQ::FeatureParser::consumeRangeFeature((__int128 **)&v104, v40, (uint64_t)v107);
      if (!v116)
        goto LABEL_123;
    }
    if (*((_BYTE *)v5 + 2) && *v5 == 923 && *(_BYTE *)(a3 + 1))
    {
      if ((byte_1ECE82A26 & 1) != 0)
      {
        v42 = (WebCore::MQ::Feature *)&qword_1ECE82B08;
      }
      else
      {
        WTF::AtomStringImpl::add();
        v67 = *(WTF::StringImpl **)v122;
        qword_1ECE82B08 = (uint64_t)&off_1E339E7B8;
        if (*(_QWORD *)v122)
        {
          v92 = **(_DWORD **)v122;
          **(_DWORD **)v122 += 2;
          qword_1ECE82B10 = (uint64_t)v67;
          word_1ECE82B18 = 1536;
          qword_1ECE82B20 = 0;
          if (v92)
            *(_DWORD *)v67 = v92;
          else
            WTF::StringImpl::destroy(v67, v66);
        }
        else
        {
          qword_1ECE82B10 = 0;
          word_1ECE82B18 = 1536;
          qword_1ECE82B20 = 0;
        }
        qword_1ECE82B08 = (uint64_t)&off_1E339E778;
        v42 = (WebCore::MQ::Feature *)&qword_1ECE82B08;
        byte_1ECE82A26 = 1;
      }
LABEL_70:
      if (WebCore::MQ::FeatureParser::validateFeatureAgainstSchema((WebCore::MQ::FeatureParser *)v107, v42, v40))
      {
        if (v116)
        {
          v57 = v107[0];
          v107[0] = 0;
          if (v111)
          {
            v58 = v108;
            v56 = v110;
            v59 = 1;
            v110 = 0;
          }
          else
          {
            v59 = 0;
            v58 = 0;
          }
          v100 = v56;
          v98 = v58;
          v99 = (char)v107[1];
          if (v114)
          {
            v41 = v112;
            v15 = (unint64_t)v113;
            v60 = 1;
            v113 = 0;
          }
          else
          {
            v60 = 0;
            v41 = 0;
          }
          v61 = 0;
          v121[0] = *(_QWORD *)v115;
          *(_QWORD *)((char *)v121 + 5) = *(_QWORD *)&v115[5];
LABEL_109:
          if (v114)
          {
            v68 = v113;
            v113 = 0;
            if (v68)
            {
              if (*v68 == 2)
              {
                v69 = v41;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v68, v39);
                v41 = v69;
              }
              else
              {
                *v68 -= 2;
              }
            }
          }
          if (v111)
          {
            v70 = v110;
            v110 = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 2)
              {
                v71 = v41;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v70, v39);
                v41 = v71;
              }
              else
              {
                *(_DWORD *)v70 -= 2;
              }
            }
          }
          v72 = v107[0];
          v107[0] = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
            {
              v75 = v41;
              WTF::StringImpl::destroy(v72, v39);
              v41 = v75;
              if ((v61 & 1) != 0)
                goto LABEL_123;
              goto LABEL_130;
            }
            *(_DWORD *)v72 -= 2;
          }
          if ((v61 & 1) != 0)
            goto LABEL_123;
LABEL_130:
          if (v57)
            *(_DWORD *)v57 += 2;
          v76 = a1;
          *(_QWORD *)a1 = v57;
          *(_BYTE *)(a1 + 8) = v99;
          *(_BYTE *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 32) = 0;
          v77 = v100;
          if (v59)
          {
            *(_BYTE *)(a1 + 16) = v98;
            if (v100)
              *(_DWORD *)v100 += 2;
            v76 = a1;
            *(_QWORD *)(a1 + 24) = v100;
            *(_BYTE *)(a1 + 32) = 1;
          }
          *(_BYTE *)(v76 + 40) = 0;
          *(_BYTE *)(v76 + 56) = 0;
          if (v60)
          {
            *(_BYTE *)(v76 + 40) = v41;
            if (v15)
            {
              *(_DWORD *)v15 += 2;
              *(_QWORD *)(v76 + 48) = v15;
              *(_BYTE *)(v76 + 56) = 1;
              *(_WORD *)(v76 + 64) = v24;
              *(_BYTE *)(v76 + 66) = v102;
              *(_QWORD *)(v76 + 72) = *(_QWORD *)((char *)v121 + 5);
              *(_QWORD *)(v76 + 67) = v121[0];
              *(_DWORD *)(v76 + 80) = 1;
              *(_BYTE *)(v76 + 88) = 1;
              if (*(_DWORD *)v15 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v15, v39);
                v77 = v100;
              }
              else
              {
                *(_DWORD *)v15 -= 2;
              }
              goto LABEL_143;
            }
            *(_QWORD *)(v76 + 48) = 0;
            *(_BYTE *)(v76 + 56) = 1;
            *(_WORD *)(v76 + 64) = v24;
            *(_BYTE *)(v76 + 66) = v102;
            *(_QWORD *)(v76 + 67) = v121[0];
            *(_QWORD *)(v76 + 72) = *(_QWORD *)((char *)v121 + 5);
          }
          else
          {
            *(_WORD *)(v76 + 64) = v24;
            *(_BYTE *)(v76 + 66) = v102;
            *(_QWORD *)(v76 + 67) = v121[0];
            *(_QWORD *)(v76 + 72) = *(_QWORD *)((char *)v121 + 5);
          }
          *(_DWORD *)(v76 + 80) = 1;
          *(_BYTE *)(v76 + 88) = 1;
LABEL_143:
          if (v59 && v77)
          {
            if (*(_DWORD *)v77 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v77, v39);
            else
              *(_DWORD *)v77 -= 2;
          }
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v39);
            else
              *(_DWORD *)v57 -= 2;
          }
          goto LABEL_151;
        }
LABEL_123:
        if (v9 == 1)
          v73 = WebCore::nameString(v24);
        else
          v73 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        v74 = (WTF::StringImpl *)*v73;
        if (*v73)
          *(_DWORD *)v74 += 2;
        v107[0] = v74;
        WebCore::CSSParserTokenRange::serialize(v106, 0, &v107[1]);
        *(_OWORD *)a1 = *(_OWORD *)v107;
        *(_DWORD *)(a1 + 80) = 2;
        *(_BYTE *)(a1 + 88) = 1;
        goto LABEL_151;
      }
      if (!v116)
        goto LABEL_123;
LABEL_108:
      v60 = 0;
      v59 = 0;
      v57 = 0;
      v61 = 1;
      goto LABEL_109;
    }
    if ((byte_1ECE82A40 & 1) != 0)
    {
      v48 = qword_1ECE82A38;
      if (!qword_1ECE82A38)
        goto LABEL_107;
    }
    else
    {
      if ((_MergedGlobals_165 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        v79 = *(WTF::StringImpl **)v122;
        if (*(_QWORD *)v122)
        {
          v93 = **(_DWORD **)v122;
          **(_DWORD **)v122 += 2;
          word_1ECE82A58 = 513;
          qword_1ECE82A60 = 0;
          qword_1ECE82A48 = (uint64_t)&off_1E339E658;
          qword_1ECE82A50 = (uint64_t)v79;
          if (v93)
            *(_DWORD *)v79 = v93;
          else
            WTF::StringImpl::destroy(v79, v78);
        }
        else
        {
          qword_1ECE82A50 = 0;
          word_1ECE82A58 = 513;
          qword_1ECE82A60 = 0;
        }
        qword_1ECE82A48 = (uint64_t)off_1E339E628;
        _MergedGlobals_165 = 1;
      }
      *(_QWORD *)v122 = &qword_1ECE82A48;
      if ((byte_1ECE82A21 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        v81 = v117;
        if (v117)
        {
          v94 = *(_DWORD *)v117;
          *(_DWORD *)v117 += 2;
          word_1ECE82A78 = 513;
          qword_1ECE82A80 = 0;
          qword_1ECE82A68 = (uint64_t)&off_1E339E658;
          qword_1ECE82A70 = (uint64_t)v81;
          if (v94)
            *(_DWORD *)v81 = v94;
          else
            WTF::StringImpl::destroy(v81, v80);
        }
        else
        {
          qword_1ECE82A70 = 0;
          word_1ECE82A78 = 513;
          qword_1ECE82A80 = 0;
        }
        qword_1ECE82A68 = (uint64_t)off_1E339E688;
        byte_1ECE82A21 = 1;
      }
      *(_QWORD *)&v122[8] = &qword_1ECE82A68;
      if ((byte_1ECE82A22 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        v83 = v117;
        if (v117)
        {
          v95 = *(_DWORD *)v117;
          *(_DWORD *)v117 += 2;
          word_1ECE82A98 = 513;
          qword_1ECE82AA0 = 0;
          qword_1ECE82A88 = (uint64_t)&off_1E339E658;
          qword_1ECE82A90 = (uint64_t)v83;
          if (v95)
            *(_DWORD *)v83 = v95;
          else
            WTF::StringImpl::destroy(v83, v82);
        }
        else
        {
          qword_1ECE82A90 = 0;
          word_1ECE82A98 = 513;
          qword_1ECE82AA0 = 0;
        }
        qword_1ECE82A88 = (uint64_t)off_1E339E6B8;
        byte_1ECE82A22 = 1;
      }
      *(_QWORD *)&v122[16] = &qword_1ECE82A88;
      if ((byte_1ECE82A23 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        v85 = v117;
        if (v117)
        {
          v96 = *(_DWORD *)v117;
          *(_DWORD *)v117 += 2;
          word_1ECE82AB8 = 513;
          qword_1ECE82AC0 = 0;
          qword_1ECE82AA8 = (uint64_t)&off_1E339E658;
          qword_1ECE82AB0 = (uint64_t)v85;
          if (v96)
            *(_DWORD *)v85 = v96;
          else
            WTF::StringImpl::destroy(v85, v84);
        }
        else
        {
          qword_1ECE82AB0 = 0;
          word_1ECE82AB8 = 513;
          qword_1ECE82AC0 = 0;
        }
        qword_1ECE82AA8 = (uint64_t)off_1E339E6E8;
        byte_1ECE82A23 = 1;
      }
      v123 = &qword_1ECE82AA8;
      if ((byte_1ECE82A24 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        v87 = v117;
        if (v117)
        {
          v97 = *(_DWORD *)v117;
          *(_DWORD *)v117 += 2;
          word_1ECE82AD8 = 769;
          qword_1ECE82AE0 = 0;
          qword_1ECE82AC8 = (uint64_t)&off_1E339E658;
          qword_1ECE82AD0 = (uint64_t)v87;
          if (v97)
            *(_DWORD *)v87 = v97;
          else
            WTF::StringImpl::destroy(v87, v86);
        }
        else
        {
          qword_1ECE82AD0 = 0;
          word_1ECE82AD8 = 769;
          qword_1ECE82AE0 = 0;
        }
        qword_1ECE82AC8 = (uint64_t)off_1E339E718;
        byte_1ECE82A24 = 1;
      }
      v124 = &qword_1ECE82AC8;
      if ((byte_1ECE82A25 & 1) == 0)
      {
        WTF::AtomStringImpl::add();
        v88 = v117;
        v89 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v89 = 0x1D501E400000002;
        if (v88)
        {
          v91 = *(_DWORD *)v88;
          *(_DWORD *)v88 += 2;
          word_1ECE82AF8 = 1280;
          qword_1ECE82B00 = (uint64_t)v89;
          qword_1ECE82AE8 = (uint64_t)&off_1E339E658;
          qword_1ECE82AF0 = (uint64_t)v88;
          if (v91)
            *(_DWORD *)v88 = v91;
          else
            WTF::StringImpl::destroy(v88, v90);
        }
        else
        {
          qword_1ECE82AF0 = 0;
          word_1ECE82AF8 = 1280;
          qword_1ECE82B00 = (uint64_t)v89;
        }
        qword_1ECE82AE8 = (uint64_t)off_1E339E748;
        byte_1ECE82A25 = 1;
      }
      v125 = &qword_1ECE82AE8;
      WTF::Vector<WebCore::MQ::FeatureSchema const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v118, (uint64_t *)v122, 6uLL);
      memset(v122, 0, 21);
      v40 = v118;
      if (v120)
      {
        v62 = 8 * v120;
        v63 = v118;
        do
        {
          v64 = *(_QWORD *)v63;
          v63 = (WTF *)((char *)v63 + 8);
          WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::MQ::FeatureSchema const*&>((uint64_t)v122, (WTF::StringImpl *)(v64 + 8), v40, (uint64_t)&v117);
          v40 = v63;
          v62 -= 8;
        }
        while (v62);
        v48 = *(_QWORD *)v122;
        v15 = *(unsigned int *)&v122[8];
        v65 = *(_DWORD *)&v122[16];
        v40 = v118;
      }
      else
      {
        v65 = 0;
        v15 = 0;
        v48 = 0;
      }
      if (v40)
      {
        v118 = 0;
        v119 = 0;
        WTF::fastFree(v40, v39);
      }
      qword_1ECE82A38 = v48;
      dword_1ECE82A28 = v15;
      dword_1ECE82A30 = v65;
      byte_1ECE82A40 = 1;
      if (!v48)
        goto LABEL_107;
    }
    v49 = dword_1ECE82A28 - 1;
    v41 = (char)v107[0];
    v50 = *((_DWORD *)v107[0] + 4);
    v51 = (dword_1ECE82A30 ^ (v50 >> 8)) & (dword_1ECE82A28 - 1);
    v52 = *(_DWORD **)(v48 + 16 * v51);
    if (v52)
    {
      v53 = v50 >> 8;
      v54 = -1;
      do
      {
        v55 = v52[4];
        if (++v54 > (((_DWORD)v51 + dword_1ECE82A28 - ((dword_1ECE82A30 ^ (v55 >> 8)) & v49)) & v49))
          break;
        if (v52 == (_DWORD *)v107[0] && v55 >> 8 == v53)
        {
          v42 = *(WebCore::MQ::Feature **)(v48 + 16 * v51 + 8);
          if (!v42)
            break;
          goto LABEL_70;
        }
        v51 = ((_DWORD)v51 + 1) & v49;
        v52 = *(_DWORD **)(v48 + 16 * v51);
      }
      while (v52);
    }
LABEL_107:
    if (!v116)
      goto LABEL_123;
    goto LABEL_108;
  }
  v43 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    {
      v43 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v43 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  v44 = *(_DWORD *)v43;
  v107[0] = (WTF::StringImpl *)WebCore::CSSParserTokenRange::consumeBlock((__int128 **)a2);
  v107[1] = v45;
  v46 = *(__int128 **)a2;
  v47 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if ((unint64_t)v46 >= *(_QWORD *)(a2 + 8))
    {
      v46 = v47;
      {
        v47 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v47, 30, 0);
        v46 = v47;
      }
    }
    if ((*(_DWORD *)v46 & 0x3F) != 0x10)
      break;
    v46 = (__int128 *)(*(_QWORD *)a2 + 24);
    *(_QWORD *)a2 = v46;
  }
  if ((v44 & 0x400000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  WebCore::CSSParserTokenRange::serialize((char **)v107, 0, &v122[8]);
  *(_OWORD *)a1 = *(_OWORD *)v122;
  *(_DWORD *)(a1 + 80) = 2;
  *(_BYTE *)(a1 + 88) = 1;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &)::{lambda(WebCore::MQ::Condition const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::Feature const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t **result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;

  v2 = *(_DWORD *)(a2 + 20);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = **result;
    v5 = 88 * v2;
    while (1)
    {
      v8[0] = v4;
      v8[1] = v4;
      v8[2] = v4;
      v6 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v6 == -1)
        break;
      v9 = v8;
      result = (uint64_t **)((uint64_t (*)(_QWORD **, uint64_t))off_1E339E790[v6])(&v9, v3);
      v3 += 88;
      v5 -= 88;
      if (!v5)
        return result;
    }
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t **)std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &)::{lambda(WebCore::MQ::Condition const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::Feature const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(v7);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &)::{lambda(WebCore::MQ::Condition const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::Feature const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t a1, uint64_t a2)
{
  _BYTE **v3;
  _BYTE *v4;
  uint64_t result;

  v3 = *(_BYTE ***)(*(_QWORD *)a1 + 8);
  v4 = *v3;
  result = WebCore::CQ::requiredAxesForFeature(a2);
  *v4 |= result;
  if (!*(_QWORD *)(a2 + 72))
    *v3[1] = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &)::{lambda(WebCore::MQ::Condition const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::Feature const&)#1},void WebCore::MQ::traverseFeatures<WebCore::CQ::ContainerQueryParser::consumeContainerQuery(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&)::$_1 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t a1)
{
  _BYTE **v1;
  _BYTE *v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;

  v1 = *(_BYTE ***)(*(_QWORD *)a1 + 16);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v2 = *v1;
  result = WebCore::CQ::requiredAxesForFeature((uint64_t)&v4);
  *v2 |= result;
  *v1[1] = 1;
  return result;
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::MQ::FeatureSchema const*>,WTF::AtomString const&,WebCore::MQ::FeatureSchema const*&>(uint64_t a1, WTF::StringImpl *a2, _QWORD *a3)
{
  _DWORD *v5;
  WTF::StringImpl *result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)(a1 + 8) = *a3;
  return result;
}

uint64_t WebCore::MQ::serialize(uint64_t this, WTF::StringBuilder *a2, const Condition *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v4 = this;
  v5 = *((_DWORD *)a2 + 5);
  if (v5 == 1 && *(_BYTE *)a2 == 2)
  {
    WTF::StringBuilder::append();
    if (!*((_DWORD *)a2 + 5))
    {
      __break(0xC471u);
LABEL_20:
      JUMPOUT(0x1958F7EA0);
    }
    v10 = *((_QWORD *)a2 + 1);
    v12 = v4;
    v13 = v4;
    v11 = *(unsigned int *)(v10 + 80);
    if ((_DWORD)v11 == -1)
    {
LABEL_17:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
      __break(0xC471u);
      goto LABEL_20;
    }
    v14 = &v12;
    return ((uint64_t (*)(uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQL9serializeERNS6_13StringBuilderERKNS_7variantIJNS9_9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE3__0JZNS9_L9serializeESB_SI_E3__1EEEEEJRKNS0_6__implIJSD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v11])(&v14);
  }
  else if (v5)
  {
    v7 = *((_QWORD *)a2 + 1);
    v8 = v7 + 88 * v5;
    while (*((_DWORD *)a2 + 5))
    {
      if (v7 != *((_QWORD *)a2 + 1))
        WTF::StringBuilder::append();
      v12 = v4;
      v13 = v4;
      v9 = *(unsigned int *)(v7 + 80);
      if ((_DWORD)v9 == -1)
        goto LABEL_17;
      v14 = &v12;
      this = ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQL9serializeERNS6_13StringBuilderERKNS_7variantIJNS9_9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE3__0JZNS9_L9serializeESB_SI_E3__1EEEEEJRKNS0_6__implIJSD_SE_SF_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v14, v7);
      v7 += 88;
      if (v7 == v8)
        return this;
    }
    goto LABEL_18;
  }
  return this;
}

uint64_t WebCore::MQ::serialize(WTF::StringBuilder &,WebCore::MQ::Feature const&)::$_0::operator()(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;
  char v26;

  v4 = *a1;
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 && (v6 = *(unsigned int *)(v4 + 16), v6 < *(_DWORD *)(v5 + 4)) && !*(_QWORD *)v4)
  {
    v17 = *(_DWORD *)(v5 + 16);
    v18 = *(_QWORD *)(v5 + 8);
    *(_DWORD *)(v4 + 16) = v6 + 1;
    if ((v17 & 4) != 0)
      *(_BYTE *)(v18 + v6) = 32;
    else
      *(_WORD *)(v18 + 2 * v6) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  switch(a2)
  {
    case 0:
      v7 = *a1;
      v8 = *(_QWORD *)(*a1 + 8);
      if (!v8)
        goto LABEL_17;
      v9 = *(unsigned int *)(v7 + 16);
      if (v9 >= *(_DWORD *)(v8 + 4) || *(_QWORD *)v7)
        goto LABEL_17;
      v21 = *(_DWORD *)(v8 + 16);
      v22 = *(_QWORD *)(v8 + 8);
      *(_DWORD *)(v7 + 16) = v9 + 1;
      if ((v21 & 4) == 0)
      {
        v23 = 60;
        goto LABEL_35;
      }
      v26 = 60;
      goto LABEL_39;
    case 1:
    case 4:
      goto LABEL_17;
    case 2:
      v10 = *a1;
      v11 = *(_QWORD *)(*a1 + 8);
      if (!v11)
        goto LABEL_17;
      v9 = *(unsigned int *)(v10 + 16);
      if (v9 >= *(_DWORD *)(v11 + 4) || *(_QWORD *)v10)
        goto LABEL_17;
      v24 = *(_DWORD *)(v11 + 16);
      v22 = *(_QWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 16) = v9 + 1;
      if ((v24 & 4) == 0)
      {
        v23 = 61;
        goto LABEL_35;
      }
      v26 = 61;
      goto LABEL_39;
    case 3:
      v12 = *a1;
      v13 = *(_QWORD *)(*a1 + 8);
      if (v13 && (v9 = *(unsigned int *)(v12 + 16), v9 < *(_DWORD *)(v13 + 4)) && !*(_QWORD *)v12)
      {
        v25 = *(_DWORD *)(v13 + 16);
        v22 = *(_QWORD *)(v13 + 8);
        *(_DWORD *)(v12 + 16) = v9 + 1;
        if ((v25 & 4) != 0)
        {
          v26 = 62;
LABEL_39:
          *(_BYTE *)(v22 + v9) = v26;
        }
        else
        {
          v23 = 62;
LABEL_35:
          *(_WORD *)(v22 + 2 * v9) = v23;
        }
      }
      else
      {
LABEL_17:
        WTF::StringBuilder::append();
      }
LABEL_18:
      result = *a1;
      v15 = *(_QWORD *)(*a1 + 8);
      if (!v15)
        return WTF::StringBuilder::append();
      v16 = *(unsigned int *)(result + 16);
      if (v16 >= *(_DWORD *)(v15 + 4) || *(_QWORD *)result)
        return WTF::StringBuilder::append();
      v19 = *(_DWORD *)(v15 + 16);
      v20 = *(_QWORD *)(v15 + 8);
      *(_DWORD *)(result + 16) = v16 + 1;
      if ((v19 & 4) != 0)
        *(_BYTE *)(v20 + v16) = 32;
      else
        *(_WORD *)(v20 + 2 * v16) = 32;
      return result;
    default:
      goto LABEL_18;
  }
}

_QWORD *WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  _QWORD v11[3];
  _QWORD *v12;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v8 = !*(_DWORD *)(v2 + 4) || v2 == WebCore::allAtomData;
    if (!v8 && v2 != *a1)
      return 0;
  }
  v10 = 0;
  v9 = &v10;
  if (!*(_BYTE *)(a2 + 48))
    return 0;
  v3 = *(_DWORD *)(a2 + 36);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = 88 * v3;
  while (1)
  {
    v11[0] = &v9;
    v11[1] = &v9;
    v11[2] = &v9;
    v6 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v6 == -1)
      break;
    v12 = v11;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQ16traverseFeaturesIRZNKS9_19MediaQueryEvaluator26collectDynamicDependenciesERKNS9_10MediaQueryEE3__0EEvRKNS_7variantIJNS9_9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEOT_EUlRKSI_E_JZNSA_ISG_EEvSN_SP_EUlRKSJ_E_ZNSA_ISG_EEvSN_SP_EUlRKSK_E_EEEEEJRKNS0_6__implIJSI_SJ_SK_EEEEEEDcSP_DpOT0____fmatrix[v6])(&v12, v4);
    v4 += 88;
    v5 -= 88;
    if (!v5)
      return (_QWORD *)v10;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::animation(void)::$_0>();
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::animation(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339E928;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82B70 = 0;
    qword_1ECE82B60 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE82B68 = v3;
    qword_1ECE82B78 = 0;
    unk_1ECE82B80 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82B70 = 0;
    qword_1ECE82B60 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE82B68 = 0;
    qword_1ECE82B78 = 0;
    unk_1ECE82B80 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::anyHover(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339E978;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82B98 = 1280;
    qword_1ECE82B90 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82B88 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82BA0 = v6;
    unk_1ECE82BA8 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82B98 = 1280;
    qword_1ECE82B90 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82B88 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82BA0 = v4;
    unk_1ECE82BA8 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::anyPointer(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339E9C8;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82BC0 = 1280;
    qword_1ECE82BB8 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82BB0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82BC8 = v6;
    unk_1ECE82BD0 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82BC0 = 1280;
    qword_1ECE82BB8 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82BB0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82BC8 = v4;
    unk_1ECE82BD0 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::RatioSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::aspectRatio(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339E9F0;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82BE8 = 769;
    qword_1ECE82BD8 = (uint64_t)&off_1E339EA18;
    unk_1ECE82BE0 = v3;
    qword_1ECE82BF0 = 0;
    unk_1ECE82BF8 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82BE8 = 769;
    qword_1ECE82BD8 = (uint64_t)&off_1E339EA18;
    unk_1ECE82BE0 = 0;
    qword_1ECE82BF0 = 0;
    unk_1ECE82BF8 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IntegerSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::color(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EA40;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82C10 = 1;
    qword_1ECE82C00 = (uint64_t)&off_1E339EA68;
    *(_QWORD *)algn_1ECE82C08 = v3;
    qword_1ECE82C18 = 0;
    unk_1ECE82C20 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82C10 = 1;
    qword_1ECE82C00 = (uint64_t)&off_1E339EA68;
    *(_QWORD *)algn_1ECE82C08 = 0;
    qword_1ECE82C18 = 0;
    unk_1ECE82C20 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::colorGamut(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EA90;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82C38 = 1280;
    qword_1ECE82C30 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82C28 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82C40 = v6;
    unk_1ECE82C48 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82C38 = 1280;
    qword_1ECE82C30 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82C28 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82C40 = v4;
    unk_1ECE82C48 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IntegerSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::colorIndex(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EAB8;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82C60 = 1;
    qword_1ECE82C50 = (uint64_t)&off_1E339EA68;
    *(_QWORD *)algn_1ECE82C58 = v3;
    qword_1ECE82C68 = 0;
    unk_1ECE82C70 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82C60 = 1;
    qword_1ECE82C50 = (uint64_t)&off_1E339EA68;
    *(_QWORD *)algn_1ECE82C58 = 0;
    qword_1ECE82C68 = 0;
    unk_1ECE82C70 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::RatioSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::deviceAspectRatio(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EAE0;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82C88 = 769;
    qword_1ECE82C78 = (uint64_t)&off_1E339EA18;
    unk_1ECE82C80 = v3;
    qword_1ECE82C90 = 0;
    unk_1ECE82C98 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82C88 = 769;
    qword_1ECE82C78 = (uint64_t)&off_1E339EA18;
    unk_1ECE82C80 = 0;
    qword_1ECE82C90 = 0;
    unk_1ECE82C98 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::deviceHeight(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EB08;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82CB0 = 513;
    qword_1ECE82CA0 = (uint64_t)&off_1E339EB30;
    *(_QWORD *)algn_1ECE82CA8 = v3;
    qword_1ECE82CB8 = 0;
    unk_1ECE82CC0 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82CB0 = 513;
    qword_1ECE82CA0 = (uint64_t)&off_1E339EB30;
    *(_QWORD *)algn_1ECE82CA8 = 0;
    qword_1ECE82CB8 = 0;
    unk_1ECE82CC0 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::NumberSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::devicePixelRatio(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EB58;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82CD8 = 257;
    qword_1ECE82CC8 = (uint64_t)&off_1E339EB80;
    unk_1ECE82CD0 = v3;
    qword_1ECE82CE0 = 0;
    unk_1ECE82CE8 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82CD8 = 257;
    qword_1ECE82CC8 = (uint64_t)&off_1E339EB80;
    unk_1ECE82CD0 = 0;
    qword_1ECE82CE0 = 0;
    unk_1ECE82CE8 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::deviceWidth(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EBA8;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82D00 = 513;
    qword_1ECE82CF0 = (uint64_t)&off_1E339EB30;
    *(_QWORD *)algn_1ECE82CF8 = v3;
    qword_1ECE82D08 = 0;
    unk_1ECE82D10 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82D00 = 513;
    qword_1ECE82CF0 = (uint64_t)&off_1E339EB30;
    *(_QWORD *)algn_1ECE82CF8 = 0;
    qword_1ECE82D08 = 0;
    unk_1ECE82D10 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::dynamicRange(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EBD0;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82D28 = 1280;
    qword_1ECE82D20 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82D18 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82D30 = v6;
    unk_1ECE82D38 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82D28 = 1280;
    qword_1ECE82D20 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82D18 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82D30 = v4;
    unk_1ECE82D38 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::forcedColors(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EBF8;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82D50 = 1280;
    qword_1ECE82D48 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82D40 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82D58 = v6;
    unk_1ECE82D60 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82D50 = 1280;
    qword_1ECE82D48 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82D40 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82D58 = v4;
    unk_1ECE82D60 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::grid(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EC20;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82D78 = 0;
    qword_1ECE82D68 = (uint64_t)&off_1E339E950;
    unk_1ECE82D70 = v3;
    qword_1ECE82D80 = 0;
    unk_1ECE82D88 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82D78 = 0;
    qword_1ECE82D68 = (uint64_t)&off_1E339E950;
    unk_1ECE82D70 = 0;
    qword_1ECE82D80 = 0;
    unk_1ECE82D88 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::height(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EC48;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82DA0 = 513;
    qword_1ECE82D90 = (uint64_t)&off_1E339EB30;
    *(_QWORD *)algn_1ECE82D98 = v3;
    qword_1ECE82DA8 = 0;
    unk_1ECE82DB0 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82DA0 = 513;
    qword_1ECE82D90 = (uint64_t)&off_1E339EB30;
    *(_QWORD *)algn_1ECE82D98 = 0;
    qword_1ECE82DA8 = 0;
    unk_1ECE82DB0 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::hover(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EC70;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82DC8 = 1280;
    qword_1ECE82DC0 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82DB8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82DD0 = v6;
    unk_1ECE82DD8 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82DC8 = 1280;
    qword_1ECE82DC0 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82DB8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82DD0 = v4;
    unk_1ECE82DD8 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::invertedColors(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EC98;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82DF0 = 1280;
    qword_1ECE82DE8 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82DE0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82DF8 = v6;
    unk_1ECE82E00 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82DF0 = 1280;
    qword_1ECE82DE8 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82DE0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82DF8 = v4;
    unk_1ECE82E00 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IntegerSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::monochrome(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339ECC0;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82E18 = 1;
    qword_1ECE82E08 = (uint64_t)&off_1E339EA68;
    unk_1ECE82E10 = v3;
    qword_1ECE82E20 = 0;
    unk_1ECE82E28 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82E18 = 1;
    qword_1ECE82E08 = (uint64_t)&off_1E339EA68;
    unk_1ECE82E10 = 0;
    qword_1ECE82E20 = 0;
    unk_1ECE82E28 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::orientation(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339ECE8;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82E40 = 1280;
    qword_1ECE82E38 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82E30 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82E48 = v6;
    unk_1ECE82E50 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82E40 = 1280;
    qword_1ECE82E38 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82E30 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82E48 = v4;
    unk_1ECE82E50 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::pointer(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339ED10;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82E68 = 1280;
    qword_1ECE82E60 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82E58 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82E70 = v6;
    unk_1ECE82E78 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82E68 = 1280;
    qword_1ECE82E60 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82E58 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82E70 = v4;
    unk_1ECE82E78 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersContrast(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339ED38;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82E90 = 1280;
    qword_1ECE82E88 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82E80 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82E98 = v6;
    unk_1ECE82EA0 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82E90 = 1280;
    qword_1ECE82E88 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82E80 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82E98 = v4;
    unk_1ECE82EA0 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersDarkInterface(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339ED60;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82EB8 = 1280;
    qword_1ECE82EB0 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82EA8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82EC0 = v6;
    unk_1ECE82EC8 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82EB8 = 1280;
    qword_1ECE82EB0 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82EA8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82EC0 = v4;
    unk_1ECE82EC8 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersReducedMotion(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339ED88;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82EE0 = 1280;
    qword_1ECE82ED8 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82ED0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82EE8 = v6;
    unk_1ECE82EF0 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82EE0 = 1280;
    qword_1ECE82ED8 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82ED0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82EE8 = v4;
    unk_1ECE82EF0 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::ResolutionSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::resolution(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EDB0;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82F08 = 1025;
    qword_1ECE82EF8 = (uint64_t)&off_1E339EDD8;
    unk_1ECE82F00 = v3;
    qword_1ECE82F10 = 0;
    unk_1ECE82F18 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82F08 = 1025;
    qword_1ECE82EF8 = (uint64_t)&off_1E339EDD8;
    unk_1ECE82F00 = 0;
    qword_1ECE82F10 = 0;
    unk_1ECE82F18 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::scan(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EE00;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82F30 = 1280;
    qword_1ECE82F28 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82F20 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82F38 = v6;
    unk_1ECE82F40 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82F30 = 1280;
    qword_1ECE82F28 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82F20 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82F38 = v4;
    unk_1ECE82F40 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::scripting(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EE28;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82F58 = 1280;
    qword_1ECE82F50 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82F48 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82F60 = v6;
    unk_1ECE82F68 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82F58 = 1280;
    qword_1ECE82F50 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82F48 = (uint64_t)&off_1E339E9A0;
    qword_1ECE82F60 = v4;
    unk_1ECE82F68 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::transform2d(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EE50;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82F80 = 0;
    qword_1ECE82F70 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE82F78 = v3;
    qword_1ECE82F88 = 0;
    unk_1ECE82F90 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82F80 = 0;
    qword_1ECE82F70 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE82F78 = 0;
    qword_1ECE82F88 = 0;
    unk_1ECE82F90 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::transform3d(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EE78;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82FA8 = 0;
    qword_1ECE82F98 = (uint64_t)&off_1E339E950;
    unk_1ECE82FA0 = v3;
    qword_1ECE82FB0 = 0;
    unk_1ECE82FB8 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82FA8 = 0;
    qword_1ECE82F98 = (uint64_t)&off_1E339E950;
    unk_1ECE82FA0 = 0;
    qword_1ECE82FB0 = 0;
    unk_1ECE82FB8 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::transition(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EEA0;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE82FD0 = 0;
    qword_1ECE82FC0 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE82FC8 = v3;
    qword_1ECE82FD8 = 0;
    unk_1ECE82FE0 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE82FD0 = 0;
    qword_1ECE82FC0 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE82FC8 = 0;
    qword_1ECE82FD8 = 0;
    unk_1ECE82FE0 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::update(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EEC8;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE82FF8 = 1280;
    qword_1ECE82FF0 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE82FE8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE83000 = v6;
    unk_1ECE83008 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE82FF8 = 1280;
    qword_1ECE82FF0 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE82FE8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE83000 = v4;
    unk_1ECE83008 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::BooleanSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::videoPlayableInline(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EEF0;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE83020 = 0;
    qword_1ECE83010 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE83018 = v3;
    qword_1ECE83028 = 0;
    unk_1ECE83030 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE83020 = 0;
    qword_1ECE83010 = (uint64_t)&off_1E339E950;
    *(_QWORD *)algn_1ECE83018 = 0;
    qword_1ECE83028 = 0;
    unk_1ECE83030 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::LengthSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WebCore::MQ::Features::width(void)::$_0>()
{
  _QWORD *result;
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v3;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EF18;
  if (v3)
  {
    v2 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    word_1ECE83048 = 513;
    qword_1ECE83038 = (uint64_t)&off_1E339EB30;
    unk_1ECE83040 = v3;
    qword_1ECE83050 = 0;
    unk_1ECE83058 = result;
    if (v2)
      *(_DWORD *)v3 = v2;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v1);
  }
  else
  {
    word_1ECE83048 = 513;
    qword_1ECE83038 = (uint64_t)&off_1E339EB30;
    unk_1ECE83040 = 0;
    qword_1ECE83050 = 0;
    unk_1ECE83058 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::displayMode(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EF40;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE83070 = 1280;
    qword_1ECE83068 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE83060 = (uint64_t)&off_1E339E9A0;
    qword_1ECE83078 = v6;
    unk_1ECE83080 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE83070 = 1280;
    qword_1ECE83068 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE83060 = (uint64_t)&off_1E339E9A0;
    qword_1ECE83078 = v4;
    unk_1ECE83080 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::overflowBlock(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EF68;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE83098 = 1280;
    qword_1ECE83090 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE83088 = (uint64_t)&off_1E339E9A0;
    qword_1ECE830A0 = v6;
    unk_1ECE830A8 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE83098 = 1280;
    qword_1ECE83090 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE83088 = (uint64_t)&off_1E339E9A0;
    qword_1ECE830A0 = v4;
    unk_1ECE830A8 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::overflowInline(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EF90;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE830C0 = 1280;
    qword_1ECE830B8 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE830B0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE830C8 = v6;
    unk_1ECE830D0 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE830C0 = 1280;
    qword_1ECE830B8 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE830B0 = (uint64_t)&off_1E339E9A0;
    qword_1ECE830C8 = v4;
    unk_1ECE830D0 = result;
  }
  return result;
}

_QWORD *WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersColorScheme(void)::$_0>(uint64_t *a1)
{
  _QWORD *result;
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  WTF::AtomStringImpl::add();
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E339EFB8;
  if (v7)
  {
    v5 = *(_DWORD *)v7;
    *(_DWORD *)v7 += 2;
    word_1ECE830E8 = 1280;
    qword_1ECE830E0 = (uint64_t)v7;
    v6 = *a1;
    *a1 = 0;
    qword_1ECE830D8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE830F0 = v6;
    unk_1ECE830F8 = result;
    if (v5)
      *(_DWORD *)v7 = v5;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v7, v3);
  }
  else
  {
    word_1ECE830E8 = 1280;
    qword_1ECE830E0 = 0;
    v4 = *a1;
    *a1 = 0;
    qword_1ECE830D8 = (uint64_t)&off_1E339E9A0;
    qword_1ECE830F0 = v4;
    unk_1ECE830F8 = result;
  }
  return result;
}

WebCore::CSSTokenizer *WebCore::MQ::MediaQueryParser::parse@<X0>(unsigned int **this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::CSSTokenizer *result;
  const WebCore::CSSParserToken *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  WebCore::CSSTokenizer *v11;
  const WebCore::CSSParserToken *v12[2];

  result = WebCore::CSSTokenizer::tryCreate(this, (uint64_t *)&v11);
  if (v11)
  {
    v7 = (const WebCore::CSSParserToken *)(*((_QWORD *)v11 + 6) + 24 * *((unsigned int *)v11 + 15));
    v12[0] = *((const WebCore::CSSParserToken **)v11 + 6);
    v12[1] = v7;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(v12, a2, (uint64_t)a3);
    result = v11;
    v11 = 0;
    if (result)
    {
      WebCore::CSSTokenizer::~CSSTokenizer(result, v8);
      return (WebCore::CSSTokenizer *)WTF::fastFree(v9, v10);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::MQ::MediaQueryParser::consumeMediaQueryList@<X0>(const WebCore::CSSParserToken **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  const WebCore::CSSParserToken *i;
  WTF::StringImpl *result;
  const WebCore::CSSParserToken *v11;
  const WebCore::CSSParserToken *v12;
  int v13;
  int v14;
  __int128 *v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  WTF *v24;
  char *v25;
  uint64_t v26;
  int v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int *v50;
  int v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  const WebCore::CSSParserToken *v56;
  __int128 *v57;
  __int128 *v58;
  int v59;
  int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  _BYTE *v68;
  uint64_t v69;
  WTF *v70;
  __int128 *v71;
  __int128 *v72;
  WTF *v73;
  int v74;
  WTF::StringImpl *v75;
  __int128 *v76;
  __int128 *v77;
  unsigned int *v78;
  __int128 *v79;
  char v80;
  WTF *v81;
  WTF *v82;
  WTF *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  WTF *v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  __int128 *v92;
  WTF::StringImpl *v93;
  int v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  int v98;
  WTF *v99;
  __int16 v100;
  WTF::StringImpl *v101;
  char v102;
  WTF *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned __int8 v107;
  __int128 v108;
  uint64_t v109;
  WTF *v110;
  unsigned int v111;
  int v112;
  char v113;
  __int128 v114;
  _QWORD v115[2];

  for (i = *this; ; *this = i)
  {
    if (i >= this[1])
    {
      result = (WTF::StringImpl *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        result = (WTF::StringImpl *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        i = *this;
      }
    }
    else
    {
      result = i;
    }
    if ((*(_DWORD *)result & 0x3F) != 0x10)
      break;
    i = (const WebCore::CSSParserToken *)((char *)i + 24);
  }
  v11 = this[1];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (i != v11)
  {
    v97 = 0;
    v98 = 0;
    while (1)
    {
      if (i == v11)
        goto LABEL_34;
      v12 = i;
      while (1)
      {
        if (v12 >= v11)
        {
          v12 = (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            v12 = (const WebCore::CSSParserToken *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        v13 = *(_DWORD *)v12 & 0x3F;
        v12 = *this;
        v11 = this[1];
        if (v13 == 21)
          break;
        v14 = 0;
        do
        {
          if (v12 == v11)
          {
            {
              v15 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              v12 = v11;
            }
            else
            {
              v15 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
              v12 = *this;
              v11 = this[1];
            }
          }
          else
          {
            v15 = (__int128 *)v12;
            v12 = (const WebCore::CSSParserToken *)((char *)v12 + 24);
            *this = v12;
          }
          v16 = *(_DWORD *)v15 >> 6;
          if (v16 == 2)
            v17 = -1;
          else
            v17 = 0;
          if (v16 == 1)
            v18 = 1;
          else
            v18 = v17;
          v14 += v18;
          if (v14)
            v19 = v12 >= v11;
          else
            v19 = 1;
        }
        while (!v19);
        if (v12 == v11)
          goto LABEL_34;
      }
      if (v12 >= v11)
      {
LABEL_34:
        v12 = (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v12 = (const WebCore::CSSParserToken *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      *(_QWORD *)&v108 = WebCore::CSSParserTokenRange::makeSubRange((WebCore::CSSParserTokenRange *)this, i, v12);
      *((_QWORD *)&v108 + 1) = v20;
      v114 = v108;
      LOBYTE(v115[0]) = 0;
      BYTE2(v115[0]) = 0;
      WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeCondition((uint64_t)&v109, (__int128 **)&v108, (uint64_t)a2, (int *)v115);
      if (v113)
      {
        v22 = v111;
        if ((_QWORD)v108 == *((_QWORD *)&v108 + 1))
        {
          v95 = v109;
          if (v111)
          {
            if (v111 >= 0x2E8BA2FuLL)
            {
              __break(0xC471u);
              JUMPOUT(0x1958FAB10);
            }
            v99 = (WTF *)WTF::fastMalloc((WTF *)(88 * v111));
            v23 = 0;
            v24 = v110;
            do
            {
              v25 = (char *)v99 + v23;
              *v25 = 0;
              *((_DWORD *)v25 + 20) = -1;
              v26 = *(unsigned int *)((char *)v24 + v23 + 80);
              if ((_DWORD)v26 != -1)
              {
                ((void (*)(_QWORD *, char *))off_1E339E858[v26])(v115, v25);
                *((_DWORD *)v25 + 20) = v26;
              }
              v23 += 88;
            }
            while (88 * v22 != v23);
          }
          else
          {
            v99 = 0;
          }
          v4 = 0;
          v96 = 0;
          v98 = 1;
          v94 = v112;
          v97 = v22;
          v27 = 1;
        }
        else
        {
          v27 = 0;
          v96 = v5 & 0xFFFFFF00;
        }
        v28 = v110;
        if (v22)
        {
          v29 = 88 * v22;
          v30 = v110;
          do
          {
            v31 = *((unsigned int *)v30 + 20);
            if ((_DWORD)v31 != -1)
              ((void (*)(_QWORD *, WTF *))off_1E339E840[v31])(v115, v30);
            *((_DWORD *)v30 + 20) = -1;
            v30 = (WTF *)((char *)v30 + 88);
            v29 -= 88;
          }
          while (v29);
        }
        if (v28)
          WTF::fastFree(v28, v21);
        goto LABEL_52;
      }
      v108 = v114;
      v58 = (__int128 *)v114;
      if ((unint64_t)v114 >= *((_QWORD *)&v114 + 1))
      {
        v58 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v58 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_BYTE *)v58 & 0x3F) == 0)
      {
        v62 = (unsigned int *)v108;
        if ((unint64_t)v108 >= *((_QWORD *)&v108 + 1))
        {
          {
            v62 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v62 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        v63 = WebCore::CSSParserToken::id(v62);
        v64 = (unsigned int *)v108;
        if (v63 == 1008)
        {
          if ((_QWORD)v108 != *((_QWORD *)&v108 + 1))
          {
            v64 = (unsigned int *)(v108 + 24);
            goto LABEL_106;
          }
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v64 = (unsigned int *)v108;
          }
          while (1)
          {
            if ((unint64_t)v64 >= *((_QWORD *)&v108 + 1))
            {
              {
                v64 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              }
              else
              {
                v64 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
              }
            }
            if ((*v64 & 0x3F) != 0x10)
              break;
            v64 = (unsigned int *)(v108 + 24);
LABEL_106:
            *(_QWORD *)&v108 = v64;
          }
          v59 = 0;
          v60 = 1;
          goto LABEL_92;
        }
        if ((unint64_t)v108 >= *((_QWORD *)&v108 + 1))
        {
          {
            v64 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v64 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if (WebCore::CSSParserToken::id(v64) == 1009)
        {
          v76 = (__int128 *)v108;
          if ((_QWORD)v108 != *((_QWORD *)&v108 + 1))
          {
            v76 = (__int128 *)(v108 + 24);
            goto LABEL_126;
          }
          {
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v76 = (__int128 *)v108;
          }
          while (1)
          {
            if ((unint64_t)v76 >= *((_QWORD *)&v108 + 1))
            {
              {
                v76 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              }
              else
              {
                v76 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
              }
            }
            if ((*(_DWORD *)v76 & 0x3F) != 0x10)
              break;
            v76 = (__int128 *)(v108 + 24);
LABEL_126:
            *(_QWORD *)&v108 = v76;
          }
          v59 = 1;
          v60 = 1;
          goto LABEL_92;
        }
      }
      v59 = 0;
      v60 = 0;
LABEL_92:
      v57 = (__int128 *)v108;
      if ((unint64_t)v108 >= *((_QWORD *)&v108 + 1))
      {
        v57 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v57 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_BYTE *)v57 & 0x3F) != 0)
        goto LABEL_101;
      v61 = (unsigned int *)v108;
      if ((unint64_t)v108 >= *((_QWORD *)&v108 + 1))
      {
        {
          v61 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v61 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if (WebCore::CSSParserToken::id(v61) - 1006 < 4)
        goto LABEL_101;
      v71 = (__int128 *)v108;
      if ((_QWORD)v108 == *((_QWORD *)&v108 + 1))
      {
        {
          v72 = (__int128 *)v108;
          v71 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v71 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v72 = (__int128 *)v108;
        }
      }
      else
      {
        v72 = (__int128 *)(v108 + 24);
        *(_QWORD *)&v108 = v108 + 24;
      }
      v96 = v59 | (v60 << 8);
      while (1)
      {
        if ((unint64_t)v72 >= *((_QWORD *)&v108 + 1))
        {
          {
            v72 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v72 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v72 & 0x3F) != 0x10)
          break;
        v72 = (__int128 *)(v108 + 24);
        *(_QWORD *)&v108 = v108 + 24;
      }
      v73 = (WTF *)(*((unsigned int *)v71 + 1) | ((unint64_t)((*(_DWORD *)v71 >> 22) & 1) << 32));
      v109 = *((_QWORD *)v71 + 1);
      v110 = v73;
      WTF::StringView::convertToASCIILowercaseAtom((WTF::StringView *)&v109);
      v74 = MEMORY[0x19AEA53F4](v115[0], "layer", 5);
      v75 = (WTF::StringImpl *)v115[0];
      if (v74)
      {
        v115[0] = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v75 -= 2;
        }
LABEL_101:
        v96 = v5 & 0xFFFFFF00;
        goto LABEL_71;
      }
      v93 = (WTF::StringImpl *)v115[0];
      if (!v115[0])
        goto LABEL_101;
      v77 = (__int128 *)v108;
      if ((_QWORD)v108 == *((_QWORD *)&v108 + 1))
      {
        v98 = 0;
        v95 = 0;
        v91 = (WTF::StringImpl *)v115[0];
        *(_DWORD *)v115[0] += 2;
        v27 = 1;
        v4 = v93;
      }
      else
      {
        if ((unint64_t)v108 >= *((_QWORD *)&v108 + 1))
        {
          {
            v77 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v77 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_BYTE *)v77 & 0x3F) != 0)
          goto LABEL_190;
        v78 = (unsigned int *)v108;
        if ((unint64_t)v108 >= *((_QWORD *)&v108 + 1))
        {
          {
            v78 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v78 = (unsigned int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if (WebCore::CSSParserToken::id(v78) != 1006)
          goto LABEL_190;
        v79 = (__int128 *)v108;
        if ((_QWORD)v108 != *((_QWORD *)&v108 + 1))
        {
          v79 = (__int128 *)(v108 + 24);
          goto LABEL_142;
        }
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v79 = (__int128 *)v108;
        }
        while (1)
        {
          if ((unint64_t)v79 >= *((_QWORD *)&v108 + 1))
          {
            {
              v79 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
            else
            {
              v79 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            }
          }
          if ((*(_DWORD *)v79 & 0x3F) != 0x10)
            break;
          v79 = (__int128 *)(v108 + 24);
LABEL_142:
          *(_QWORD *)&v108 = v79;
        }
        LOBYTE(v115[0]) = 0;
        BYTE2(v115[0]) = 0;
        WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeCondition((uint64_t)&v109, (__int128 **)&v108, (uint64_t)a2, (int *)v115);
        if (v113)
        {
          if ((_QWORD)v108 != *((_QWORD *)&v108 + 1) || (v80 = v109, v109 == 1))
          {
            v27 = 0;
            v96 = v5 & 0xFFFFFF00;
            v86 = v111;
          }
          else
          {
            *(_DWORD *)v93 += 2;
            v97 = v111;
            if (v111)
            {
              if (v111 >= 0x2E8BA2FuLL)
              {
                __break(0xC471u);
                JUMPOUT(0x1958FAB20);
              }
              v81 = (WTF *)(88 * v111);
              v99 = (WTF *)WTF::fastMalloc(v81);
              v82 = 0;
              v83 = v110;
              do
              {
                v84 = (char *)v82 + (_QWORD)v99;
                *v84 = 0;
                *((_DWORD *)v84 + 20) = -1;
                v85 = *(unsigned int *)((char *)v82 + (_QWORD)v83 + 80);
                if ((_DWORD)v85 != -1)
                {
                  ((void (*)(_QWORD *, char *))off_1E339E858[v85])(v115, v84);
                  *((_DWORD *)v84 + 20) = v85;
                }
                v82 = (WTF *)((char *)v82 + 88);
              }
              while (v81 != v82);
            }
            else
            {
              v99 = 0;
            }
            v98 = 1;
            v94 = v112;
            v95 = v80;
            v4 = v93;
            v27 = 1;
            v86 = v97;
          }
          v87 = v110;
          if (v86)
          {
            v88 = 88 * v86;
            v89 = v110;
            do
            {
              v90 = *((unsigned int *)v89 + 20);
              if ((_DWORD)v90 != -1)
                ((void (*)(_QWORD *, WTF *))off_1E339E840[v90])(v115, v89);
              *((_DWORD *)v89 + 20) = -1;
              v89 = (WTF *)((char *)v89 + 88);
              v88 -= 88;
            }
            while (v88);
          }
          if (v87)
            WTF::fastFree(v87, v21);
        }
        else
        {
LABEL_190:
          v27 = 0;
          v96 = v5 & 0xFFFFFF00;
        }
        v91 = v93;
      }
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v21);
      else
        *(_DWORD *)v91 -= 2;
LABEL_52:
      if (v27)
      {
        v100 = v96;
        if (v4)
          *(_DWORD *)v4 += 2;
        v101 = v4;
        v102 = 0;
        v107 = 0;
        if (v98)
        {
          v102 = v95;
          v103 = 0;
          v104 = 0;
          v105 = v97;
          if (v97)
          {
            if (v97 >= 0x2E8BA2F)
            {
              __break(0xC471u);
              JUMPOUT(0x1958FAB18);
            }
            v32 = 88 * v97;
            v33 = (WTF *)WTF::fastMalloc((WTF *)(88 * v97));
            v104 = 88 * (int)v97 / 0x58u;
            v103 = v33;
            v34 = 88 * v97;
            v35 = v99;
            do
            {
              *(_BYTE *)v33 = 0;
              *((_DWORD *)v33 + 20) = -1;
              v36 = *((unsigned int *)v35 + 20);
              if ((_DWORD)v36 != -1)
              {
                ((void (*)(uint64_t *, WTF *, WTF *))off_1E339E858[v36])(&v109, v33, v35);
                *((_DWORD *)v33 + 20) = v36;
              }
              v33 = (WTF *)((char *)v33 + 88);
              v35 = (WTF *)((char *)v35 + 88);
              v34 -= 88;
            }
            while (v34);
            v106 = v94;
            v107 = 1;
            v37 = v99;
            do
            {
              v38 = *((unsigned int *)v37 + 20);
              if ((_DWORD)v38 != -1)
                ((void (*)(uint64_t *, WTF *))off_1E339E840[v38])(&v109, v37);
              *((_DWORD *)v37 + 20) = -1;
              v37 = (WTF *)((char *)v37 + 88);
              v32 -= 88;
            }
            while (v32);
          }
          else
          {
            v106 = v94;
            v107 = 1;
          }
          if (v99)
            WTF::fastFree(v99, v21);
        }
        if (v4)
        {
          if (*(_DWORD *)v4 == 2)
            WTF::StringImpl::destroy(v4, (WTF::StringImpl *)v21);
          else
            *(_DWORD *)v4 -= 2;
        }
        goto LABEL_74;
      }
LABEL_71:
      v100 = 256;
      v39 = (WTF::StringImpl *)WebCore::allAtomData;
      if (WebCore::allAtomData)
        *(_DWORD *)WebCore::allAtomData += 2;
      v101 = v39;
      v102 = 0;
      v107 = 0;
LABEL_74:
      v40 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v40 == *(_DWORD *)(a3 + 8))
      {
        v41 = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v40 + 1, (unint64_t)&v100);
        LODWORD(v40) = *(_DWORD *)(a3 + 12);
        v42 = *(_QWORD *)a3;
        v43 = *(_QWORD *)a3 + 56 * v40;
        *(_WORD *)v43 = *(_WORD *)v41;
        v44 = *(_QWORD *)(v41 + 8);
        *(_QWORD *)(v41 + 8) = 0;
        *(_BYTE *)(v43 + 16) = 0;
        v45 = (_BYTE *)(v43 + 16);
        *((_QWORD *)v45 - 1) = v44;
        v45[32] = 0;
        v46 = v45 + 32;
        if (!*(_BYTE *)(v41 + 48))
          goto LABEL_78;
        *v45 = *(_BYTE *)(v41 + 16);
        v47 = v42 + 56 * v40;
        *(_QWORD *)(v47 + 24) = 0;
        *(_QWORD *)(v47 + 32) = 0;
        v48 = *(_QWORD *)(v41 + 24);
        *(_QWORD *)(v41 + 24) = 0;
        *(_QWORD *)(v47 + 24) = v48;
        LODWORD(v48) = *(_DWORD *)(v41 + 32);
        *(_DWORD *)(v41 + 32) = 0;
        *(_DWORD *)(v47 + 32) = v48;
        LODWORD(v48) = *(_DWORD *)(v41 + 36);
        *(_DWORD *)(v41 + 36) = 0;
        *(_DWORD *)(v47 + 36) = v48;
        v49 = (int *)(v47 + 40);
        v50 = (int *)(v41 + 40);
      }
      else
      {
        v65 = *(_QWORD *)a3;
        v66 = *(_QWORD *)a3 + 56 * v40;
        *(_WORD *)v66 = v100;
        v67 = v101;
        v101 = 0;
        *(_BYTE *)(v66 + 16) = 0;
        v68 = (_BYTE *)(v66 + 16);
        *((_QWORD *)v68 - 1) = v67;
        v68[32] = 0;
        v46 = v68 + 32;
        if (!v107)
        {
          *(_DWORD *)(a3 + 12) = v40 + 1;
          goto LABEL_87;
        }
        v50 = &v106;
        *v68 = v102;
        v69 = v65 + 56 * v40;
        *(_QWORD *)(v69 + 24) = 0;
        *(_QWORD *)(v69 + 32) = 0;
        v70 = v103;
        v103 = 0;
        *(_QWORD *)(v69 + 24) = v70;
        LODWORD(v70) = v104;
        v104 = 0;
        *(_DWORD *)(v69 + 32) = (_DWORD)v70;
        LODWORD(v70) = v105;
        v105 = 0;
        *(_DWORD *)(v69 + 36) = (_DWORD)v70;
        v49 = (int *)(v69 + 40);
      }
      *v49 = *v50;
      *v46 = 1;
LABEL_78:
      v51 = v107;
      *(_DWORD *)(a3 + 12) = v40 + 1;
      if (v51)
      {
        v52 = (unsigned int *)v103;
        if (v105)
        {
          v53 = 88 * v105;
          do
          {
            v54 = v52[20];
            if ((_DWORD)v54 != -1)
              ((void (*)(uint64_t *, unsigned int *))off_1E339E840[v54])(&v109, v52);
            v52[20] = -1;
            v52 += 22;
            v53 -= 88;
          }
          while (v53);
          v52 = (unsigned int *)v103;
        }
        if (v52)
        {
          v103 = 0;
          v104 = 0;
          WTF::fastFree((WTF *)v52, v21);
        }
      }
LABEL_87:
      result = v101;
      v101 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v21);
        else
          *(_DWORD *)result -= 2;
      }
      v56 = *this;
      v55 = (unint64_t)this[1];
      if (*this == (const WebCore::CSSParserToken *)v55)
        return result;
      while (1)
      {
        v92 = (__int128 *)((char *)v56 + 24);
        *this = (const WebCore::CSSParserToken *)((char *)v56 + 24);
        if ((unint64_t)v56 + 24 >= v55)
        {
          {
            v92 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          else
          {
            v92 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          }
        }
        if ((*(_DWORD *)v92 & 0x3F) != 0x10)
          break;
        v56 = *this;
        v55 = (unint64_t)this[1];
      }
      i = *this;
      v11 = this[1];
      v5 = v96;
    }
  }
  return result;
}

void WebCore::MQ::MediaQueryParser::parseCondition(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v6;
  __int128 *v8;
  __int128 *v9;
  void *v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25[8];
  WTF *v26;
  unsigned int v27;
  int v28;
  char v29;
  __int128 *v30[2];
  int v31;

  v6 = a1;
  v30[0] = a1;
  v30[1] = a2;
  v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    v9 = v6;
    if (v6 >= a2)
    {
      v9 = v8;
      {
        v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v8, 30, 0);
        v9 = v8;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0x10)
      break;
    v6 = (__int128 *)((char *)v6 + 24);
    v30[0] = v6;
  }
  if (v6 == a2)
  {
    v23 = WebCore::allAtomData;
    if (WebCore::allAtomData)
      *(_DWORD *)WebCore::allAtomData += 2;
    *(_WORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v23;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 56) = 1;
  }
  else
  {
    LOBYTE(v31) = 0;
    BYTE2(v31) = 0;
    WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeCondition((uint64_t)v25, v30, a3, &v31);
    if (v29)
    {
      v11 = v27;
      v24 = v25[0];
      if (v27)
      {
        if (v27 >= 0x2E8BA2F)
        {
          __break(0xC471u);
          return;
        }
        v12 = (WTF *)(88 * v27);
        v13 = WTF::fastMalloc(v12);
        v14 = 0;
        v15 = v26;
        do
        {
          v16 = (char *)v14 + v13;
          *v16 = 0;
          *((_DWORD *)v16 + 20) = -1;
          v17 = *(unsigned int *)((char *)v14 + (_QWORD)v15 + 80);
          if ((_DWORD)v17 != -1)
          {
            ((void (*)(int *, char *))off_1E339E858[v17])(&v31, (char *)v14 + v13);
            *((_DWORD *)v16 + 20) = v17;
          }
          v14 = (WTF *)((char *)v14 + 88);
        }
        while (v12 != v14);
        v18 = v12 / 0x58;
      }
      else
      {
        v13 = 0;
        v18 = 0;
        v15 = v26;
      }
      v19 = v28;
      *(_WORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 16) = v24;
      *(_QWORD *)(a4 + 24) = v13;
      *(_DWORD *)(a4 + 32) = v18;
      *(_DWORD *)(a4 + 36) = v11;
      *(_DWORD *)(a4 + 40) = v19;
      *(_BYTE *)(a4 + 48) = 1;
      *(_BYTE *)(a4 + 56) = 1;
      if (v11)
      {
        v20 = 88 * v11;
        v21 = v15;
        do
        {
          v22 = *((unsigned int *)v21 + 20);
          if ((_DWORD)v22 != -1)
            ((void (*)(int *, WTF *))off_1E339E840[v22])(&v31, v21);
          *((_DWORD *)v21 + 20) = -1;
          v21 = (WTF *)((char *)v21 + 88);
          v20 -= 88;
        }
        while (v20);
      }
      if (v15)
        WTF::fastFree(v15, v10);
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 56) = 0;
    }
  }
}

uint64_t std::optional<WebCore::MQ::Condition>::~optional(uint64_t a1, void *a2)
{
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(_DWORD *)(a1 + 20);
    v4 = *(unsigned int **)(a1 + 8);
    if (v3)
    {
      v5 = 88 * v3;
      do
      {
        v6 = v4[20];
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, unsigned int *))off_1E339E840[v6])(&v8, v4);
        v4[20] = -1;
        v4 += 22;
        v5 -= 88;
      }
      while (v5);
      v4 = *(unsigned int **)(a1 + 8);
    }
    if (v4)
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

WTF::String *WebCore::MQ::serialize(WebCore::MQ *this, WTF::StringBuilder *a2, const Condition *a3)
{
  WTF::String *result;
  uint64_t v6;

  if (*((_BYTE *)a2 + 1))
    WTF::StringBuilder::append();
  result = (WTF::StringBuilder *)((char *)a2 + 8);
  v6 = *((_QWORD *)a2 + 1);
  if (v6 && *(_DWORD *)(v6 + 4) && (!*((_BYTE *)a2 + 48) || *((_BYTE *)a2 + 1) || v6 != WebCore::allAtomData))
  {
    result = WebCore::serializeIdentifier(result, this, 0);
    if (*((_BYTE *)a2 + 48))
      result = (WTF::String *)WTF::StringBuilder::append();
  }
  if (*((_BYTE *)a2 + 48))
    return (WTF::String *)WebCore::MQ::serialize((uint64_t)this, (WTF::StringBuilder *)((char *)a2 + 16), a3);
  return result;
}

WTF::String *WebCore::CSSKeywordValue::serialize(uint64_t a1, const WTF::String *a2)
{
  return WebCore::serializeIdentifier((WTF::String *)(a1 + 40), a2, 0);
}

uint64_t WebCore::CSSKeywordValue::toCSSValue@<X0>(WebCore::CSSKeywordValue *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  int v12;

  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  result = WebCore::cssValueKeywordID(v5, v6);
  if ((_DWORD)result)
  {
    if (result >= 0x48E)
    {
      __break(0xC471u);
      JUMPOUT(0x1958FB0A8);
    }
    v8 = &WebCore::staticCSSValuePool[4 * result + 3088];
    *v8 += 2;
    *a2 = v8;
  }
  else
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    if (v9)
      *(_DWORD *)v9 += 2;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v11 = *(_BYTE *)(result + 6);
    *(_WORD *)(result + 4) = 63;
    *(_BYTE *)(result + 6) = v11 & 0xFC;
    *(_QWORD *)(result + 8) = v9;
    if (v9)
    {
      v12 = *(_DWORD *)v9;
      *(_DWORD *)v9 += 2;
      *a2 = (int *)result;
      if (v12)
        *(_DWORD *)v9 = v12;
      else
        return WTF::StringImpl::destroy(v9, v10);
    }
    else
    {
      *a2 = (int *)result;
    }
  }
  return result;
}

WTF *WebCore::CSSNumericValue::reifyMathExpression@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  WTF *result;
  WTF::StringImpl *v6;
  int v7;
  __int16 v8;
  int v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  double v45;
  uint64_t v46;
  __int128 v47;
  __int128 *v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  _DWORD *v72;
  WTF *v73;
  uint64_t v74;
  void *v75;
  WTF *v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  _DWORD *v82;
  WTF *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  WTF *v92;
  _DWORD *v93;
  WTF *v94;
  uint64_t v95;
  _DWORD *v96;
  _BYTE *v97;
  WTF *v98;
  unint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  int v105;
  _DWORD *v106;
  int v107;
  unsigned int v108;
  WTF *v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char v116;

  v3 = a1;
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  switch((int)result)
  {
    case 1:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FBF30);
      }
      v2 = *(_QWORD *)(v3 + 16);
      v7 = *(_DWORD *)v2;
      *(_DWORD *)v2 += 2;
      v8 = *(_WORD *)(v2 + 4);
      v9 = v8 & 0x7F;
      v10 = 22;
      if ((v9 - 79) >= 2)
      {
        if (v9 == 77)
        {
          v10 = 20;
        }
        else if (v9 != 63)
        {
          if ((v8 & 0x7F) == 0x49)
          {
            v97 = *(_BYTE **)(*(_QWORD *)(v2 + 8) + 8);
            if (v97[12] == 1)
            {
LABEL_184:
              v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v97 + 72))(v97);
              v7 = *(_DWORD *)v2 - 2;
            }
            else
            {
              v10 = 1;
              switch(v97[12])
              {
                case 0:
                  goto LABEL_8;
                case 2:
                  goto LABEL_195;
                case 3:
                  v10 = 74;
                  break;
                case 4:
                  v10 = 75;
                  break;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto LABEL_184;
                default:
                  v10 = 0;
                  break;
              }
            }
          }
          else
          {
            v10 = *(_WORD *)(v2 + 4) & 0x7F;
          }
        }
      }
      goto LABEL_8;
    case 2:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FBFB0);
      }
      v15 = *(unsigned __int8 *)(v3 + 13);
      if (v15 == 2)
      {
        WebCore::reifyMathExpressions((WTF *)&v112, v3 + 16);
        v2 = v113;
        if ((_DWORD)v113)
        {
          if ((_DWORD)v113 != 1)
            goto LABEL_194;
          v27 = *((_QWORD *)&v112 + 1);
          *((_QWORD *)&v112 + 1) = 0;
          *(_BYTE *)a2 = v112;
          *(_QWORD *)(a2 + 8) = v27;
          *(_DWORD *)(a2 + 16) = 1;
        }
        else
        {
          v3 = v112;
          v55 = HIDWORD(v112);
          v112 = 0uLL;
          if (!(_DWORD)v55)
          {
            __break(0xC471u);
            JUMPOUT(0x1958FC050);
          }
          v56 = *(WTF **)v3;
          *(_QWORD *)v3 = 0;
          v109 = v56;
          LODWORD(v110) = 1;
          if ((_DWORD)v55 == 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1958FC058);
          }
          v57 = *(uint64_t **)(v3 + 8);
          *(_QWORD *)(v3 + 8) = 0;
          v104 = v57;
          v105 = 1;
          if (v55 <= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1958FC060);
          }
          v58 = *(_QWORD *)(v3 + 16);
          *(_QWORD *)(v3 + 16) = 0;
          v102 = v58;
          v103 = 1;
          WebCore::CSSMathClamp::create((uint64_t)&v109, (uint64_t)&v104, (uint64_t)&v102, (uint64_t)&v106);
          LOBYTE(v114) = 0;
          LODWORD(v115) = -1;
          v59 = v108;
          if (v108 == -1)
            goto LABEL_194;
          ((void (*)(char *, __int128 *, _DWORD **))off_1E339E890[v108])(&v111, &v114, &v106);
          LODWORD(v115) = v59;
          if ((_DWORD)v59)
          {
            if ((_DWORD)v59 != 1)
              goto LABEL_194;
            v60 = *((_QWORD *)&v114 + 1);
            *((_QWORD *)&v114 + 1) = 0;
            *(_BYTE *)a2 = v114;
            *(_QWORD *)(a2 + 8) = v60;
          }
          else
          {
            v84 = v114;
            *(_QWORD *)&v114 = 0;
            *(_QWORD *)a2 = v84;
          }
          *(_DWORD *)(a2 + 16) = v59;
          ((void (*)(char *, __int128 *))off_1E339E880[v59])(&v111, &v114);
          if (v108 != -1)
            ((void (*)(__int128 *, _DWORD **))off_1E339E880[v108])(&v114, &v106);
          v108 = -1;
          if (v103 != -1)
            ((void (*)(__int128 *, uint64_t *))off_1E339E8A0[v103])(&v114, &v102);
          if (v105 != -1)
            ((void (*)(__int128 *, uint64_t **))off_1E339E8A0[v105])(&v114, &v104);
          if ((_DWORD)v110 != -1)
            ((void (*)(__int128 *, WTF **))off_1E339E8A0[v110])(&v114, &v109);
          v86 = 0;
          v87 = 8 * v55;
          do
          {
            v88 = *(_DWORD **)(v3 + v86);
            *(_QWORD *)(v3 + v86) = 0;
            if (v88)
            {
              if (v88[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 16))(v88);
              else
                --v88[2];
            }
            v86 += 8;
          }
          while (v87 != v86);
          WTF::fastFree((WTF *)v3, v85);
        }
        return (WTF *)((uint64_t (*)(__int128 *, __int128 *))off_1E339E870[v2])(&v114, &v112);
      }
      if (v15 == 1)
      {
        WebCore::reifyMathExpressions((WTF *)&v112, v3 + 16);
        v3 = v113;
        if (!(_DWORD)v113)
        {
          v53 = *((_QWORD *)&v112 + 1);
          v109 = (WTF *)v112;
          v112 = 0uLL;
          v110 = v53;
          WebCore::CSSMathMax::create((uint64_t)&v109, (uint64_t)&v106);
          LOBYTE(v114) = 0;
          LODWORD(v115) = -1;
          v2 = v108;
          if (v108 == -1)
            goto LABEL_194;
          ((void (*)(uint64_t **, __int128 *, _DWORD **))off_1E339EFF0[v108])(&v104, &v114, &v106);
          LODWORD(v115) = v2;
          if ((_DWORD)v2)
          {
            if ((_DWORD)v2 != 1)
              goto LABEL_194;
            v54 = *((_QWORD *)&v114 + 1);
            *((_QWORD *)&v114 + 1) = 0;
            *(_BYTE *)a2 = v114;
            *(_QWORD *)(a2 + 8) = v54;
          }
          else
          {
            v74 = v114;
            *(_QWORD *)&v114 = 0;
            *(_QWORD *)a2 = v74;
          }
          *(_DWORD *)(a2 + 16) = v2;
          ((void (*)(uint64_t **, __int128 *))off_1E339E8F0[v2])(&v104, &v114);
          if (v108 != -1)
            ((void (*)(__int128 *, _DWORD **))off_1E339E8F0[v108])(&v114, &v106);
          if (HIDWORD(v110))
          {
            v76 = v109;
            v77 = 8 * HIDWORD(v110);
            do
            {
              v78 = *(_DWORD **)v76;
              *(_QWORD *)v76 = 0;
              if (v78)
              {
                if (v78[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 16))(v78);
                else
                  --v78[2];
              }
              v76 = (WTF *)((char *)v76 + 8);
              v77 -= 8;
            }
            while (v77);
          }
          goto LABEL_132;
        }
LABEL_41:
        if ((_DWORD)v3 != 1)
          goto LABEL_194;
        v26 = *((_QWORD *)&v112 + 1);
        *((_QWORD *)&v112 + 1) = 0;
        *(_BYTE *)a2 = v112;
        *(_QWORD *)(a2 + 8) = v26;
        *(_DWORD *)(a2 + 16) = 1;
        return (WTF *)((uint64_t (*)(__int128 *, __int128 *))off_1E339E870[v3])(&v114, &v112);
      }
      if (!*(_BYTE *)(v3 + 13))
      {
        WebCore::reifyMathExpressions((WTF *)&v112, v3 + 16);
        v3 = v113;
        if (!(_DWORD)v113)
        {
          v16 = *((_QWORD *)&v112 + 1);
          v109 = (WTF *)v112;
          v112 = 0uLL;
          v110 = v16;
          WebCore::CSSMathMin::create((uint64_t)&v109, (uint64_t)&v106);
          LOBYTE(v114) = 0;
          LODWORD(v115) = -1;
          v2 = v108;
          if (v108 == -1)
            goto LABEL_194;
          ((void (*)(uint64_t **, __int128 *, _DWORD **))off_1E339EFE0[v108])(&v104, &v114, &v106);
          LODWORD(v115) = v2;
          if ((_DWORD)v2)
          {
            if ((_DWORD)v2 != 1)
              goto LABEL_194;
            v17 = *((_QWORD *)&v114 + 1);
            *((_QWORD *)&v114 + 1) = 0;
            *(_BYTE *)a2 = v114;
            *(_QWORD *)(a2 + 8) = v17;
          }
          else
          {
            v79 = v114;
            *(_QWORD *)&v114 = 0;
            *(_QWORD *)a2 = v79;
          }
          *(_DWORD *)(a2 + 16) = v2;
          ((void (*)(uint64_t **, __int128 *))off_1E339E8E0[v2])(&v104, &v114);
          if (v108 != -1)
            ((void (*)(__int128 *, _DWORD **))off_1E339E8E0[v108])(&v114, &v106);
          if (HIDWORD(v110))
          {
            v80 = v109;
            v81 = 8 * HIDWORD(v110);
            do
            {
              v82 = *(_DWORD **)v80;
              *(_QWORD *)v80 = 0;
              if (v82)
              {
                if (v82[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 16))(v82);
                else
                  --v82[2];
              }
              v80 = (WTF *)((char *)v80 + 8);
              v81 -= 8;
            }
            while (v81);
          }
LABEL_132:
          v83 = v109;
          if (v109)
          {
            v109 = 0;
            LODWORD(v110) = 0;
            WTF::fastFree(v83, v75);
          }
          return (WTF *)((uint64_t (*)(__int128 *, __int128 *))off_1E339E870[v3])(&v114, &v112);
        }
        goto LABEL_41;
      }
      v109 = 0;
      v110 = 0;
      v2 = *(unsigned int *)(v3 + 28);
      if (!(_DWORD)v2)
        goto LABEL_77;
      if (v2 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FC048);
      }
      LODWORD(v110) = *(_DWORD *)(v3 + 28);
      v109 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
      v28 = *(unsigned int *)(v3 + 28);
      if (!(_DWORD)v28)
      {
LABEL_77:
        v50 = *(unsigned __int8 *)(v3 + 13);
        if (v50 == 45 || v50 == 43)
        {
          v100 = v109;
          v51 = v110;
          v109 = 0;
          v110 = 0;
          v101 = v51;
          WebCore::CSSMathSum::create((uint64_t)&v100, (uint64_t)&v112);
          LOBYTE(v114) = 0;
          LODWORD(v115) = -1;
          v3 = v113;
          if ((_DWORD)v113 == -1)
            goto LABEL_194;
          ((void (*)(_DWORD **, __int128 *, __int128 *))off_1E339F000[v113])(&v106, &v114, &v112);
          LODWORD(v115) = v3;
          if ((_DWORD)v3)
          {
            if ((_DWORD)v3 != 1)
              goto LABEL_194;
            v52 = *((_QWORD *)&v114 + 1);
            *((_QWORD *)&v114 + 1) = 0;
            *(_BYTE *)a2 = v114;
            *(_QWORD *)(a2 + 8) = v52;
          }
          else
          {
            v69 = v114;
            *(_QWORD *)&v114 = 0;
            *(_QWORD *)a2 = v69;
          }
          *(_DWORD *)(a2 + 16) = v3;
          ((void (*)(_DWORD **, __int128 *))off_1E339E8B0[v3])(&v106, &v114);
          if ((_DWORD)v113 != -1)
            ((void (*)(__int128 *, __int128 *))off_1E339E8B0[v113])(&v114, &v112);
          LODWORD(v113) = -1;
          if (HIDWORD(v101))
          {
            v70 = v100;
            v71 = 8 * HIDWORD(v101);
            do
            {
              v72 = *(_DWORD **)v70;
              *(_QWORD *)v70 = 0;
              if (v72)
              {
                if (v72[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 16))(v72);
                else
                  --v72[2];
              }
              v70 = (WTF *)((char *)v70 + 8);
              v71 -= 8;
            }
            while (v71);
          }
          v73 = v100;
          if (!v100)
            goto LABEL_173;
          v100 = 0;
          LODWORD(v101) = 0;
LABEL_172:
          WTF::fastFree(v73, v31);
          goto LABEL_173;
        }
        v61 = v109;
        v98 = v109;
        v63 = v110;
        v62 = HIDWORD(v110);
        v109 = 0;
        v110 = 0;
        v99 = __PAIR64__(v62, v63);
        if (v62)
        {
          WebCore::CSSNumericType::multiplyTypes((uint64_t **)&v98, (uint64_t)&v114);
          if (v116)
          {
            v64 = bmalloc::api::isoAllocate();
            v98 = 0;
            v99 = 0;
            *(_DWORD *)(v64 + 8) = 1;
            *(_QWORD *)(v64 + 24) = 0;
            *(_QWORD *)(v64 + 32) = 0;
            *(_QWORD *)(v64 + 16) = 0;
            v65 = v115;
            *(_OWORD *)(v64 + 40) = v114;
            *(_OWORD *)(v64 + 56) = v65;
            *(_QWORD *)v64 = &off_1E339FBA8;
            v66 = bmalloc::api::isoAllocate();
            v67 = 0;
            v68 = 0;
            *(_DWORD *)v66 = 1;
            *(_QWORD *)(v66 + 8) = v61;
            *(_DWORD *)(v66 + 16) = v63;
            *(_DWORD *)(v66 + 20) = v62;
            *(_QWORD *)(v64 + 72) = v66;
            LODWORD(v113) = 0;
            *(_QWORD *)&v112 = 0;
            LODWORD(v115) = 0;
            *(_QWORD *)&v114 = 0;
            *(_QWORD *)a2 = v64;
            v62 = 0;
            v61 = 0;
LABEL_160:
            *(_DWORD *)(a2 + 16) = v68;
            ((void (*)(_DWORD **, __int128 *))off_1E339E8C0[v67])(&v106, &v114);
            if ((_DWORD)v113 != -1)
              ((void (*)(__int128 *, __int128 *))off_1E339E8C0[v113])(&v114, &v112);
            LODWORD(v113) = -1;
            if (v62)
            {
              v91 = 8 * v62;
              v92 = v61;
              do
              {
                v93 = *(_DWORD **)v92;
                *(_QWORD *)v92 = 0;
                if (v93)
                {
                  if (v93[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v93 + 16))(v93);
                  else
                    --v93[2];
                }
                v92 = (WTF *)((char *)v92 + 8);
                v91 -= 8;
              }
              while (v91);
            }
            if (!v61)
              goto LABEL_173;
            v73 = v61;
            goto LABEL_172;
          }
          v90 = 33;
        }
        else
        {
          v90 = 9;
        }
        LOBYTE(v112) = v90;
        LODWORD(v113) = 1;
        LOBYTE(v114) = v90;
        *((_QWORD *)&v112 + 1) = 0;
        v67 = 1;
        LODWORD(v115) = 1;
        *((_QWORD *)&v114 + 1) = 0;
        *(_BYTE *)a2 = v90;
        v68 = 1;
        *(_QWORD *)(a2 + 8) = 0;
        goto LABEL_160;
      }
      v29 = 8 * v28;
      v30 = *(_QWORD **)(v3 + 16);
      v2 = (uint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix;
      while (1)
      {
        WebCore::CSSNumericValue::reifyMathExpression(&v112, *v30);
        if ((_DWORD)v113)
          break;
        v32 = v112;
        *(_QWORD *)&v112 = 0;
        v33 = *(unsigned __int8 *)(v3 + 13);
        if (v33 == 47)
        {
          v106 = (_DWORD *)v32;
          v107 = 1;
          v36 = bmalloc::api::isoAllocate();
          if (v107 == -1)
            goto LABEL_194;
          v37 = v36;
          v104 = &v102;
          ((void (*)(__int128 *__return_ptr, uint64_t **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL11negatedTypeERKNS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEEEEEE3__1JZNS8_L11negatedTypeESJ_E3__0EEEEEJRKNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v107])(&v114, &v104, &v106);
          *(_DWORD *)(v37 + 8) = 1;
          *(_QWORD *)(v37 + 16) = 0;
          *(_QWORD *)(v37 + 24) = 0;
          *(_QWORD *)(v37 + 32) = 0;
          v38 = v115;
          *(_OWORD *)(v37 + 40) = v114;
          *(_OWORD *)(v37 + 56) = v38;
          *(_QWORD *)v37 = &off_1E339F8F0;
          if (v107 == -1)
            goto LABEL_194;
          v104 = &v102;
          ((void (*)(uint64_t **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v107])(&v104, &v106);
          *(_QWORD *)&v114 = v37;
          if (v107 != -1)
            ((void (*)(uint64_t **, _DWORD **))off_1E339E8A0[v107])(&v104, &v106);
        }
        else if (v33 == 45)
        {
          v34 = bmalloc::api::isoAllocate();
          v106 = (_DWORD *)v32;
          v107 = 1;
          std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0,WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>((uint64_t *)&v106, &v114);
          *(_DWORD *)(v34 + 8) = 1;
          *(_QWORD *)(v34 + 24) = 0;
          *(_QWORD *)(v34 + 32) = 0;
          *(_QWORD *)(v34 + 16) = 0;
          v35 = v115;
          *(_OWORD *)(v34 + 40) = v114;
          *(_OWORD *)(v34 + 56) = v35;
          *(_QWORD *)v34 = &off_1E339FB48;
          if (v107 == -1)
            goto LABEL_194;
          v104 = &v102;
          ((void (*)(uint64_t **, _DWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v107])(&v104, &v106);
          if (v107 != -1)
            ((void (*)(__int128 *, _DWORD **))off_1E339E8A0[v107])(&v114, &v106);
          *(_QWORD *)&v114 = v34;
        }
        else
        {
          *(_QWORD *)&v114 = v32;
        }
        LODWORD(v39) = HIDWORD(v110);
        if (HIDWORD(v110) == (_DWORD)v110)
        {
          v40 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v109, HIDWORD(v110) + 1, (unint64_t)&v114);
          v39 = HIDWORD(v110);
          v41 = v109;
          v42 = *(_QWORD *)v40;
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v41 + v39) = v42;
        }
        else
        {
          v43 = v114;
          *(_QWORD *)&v114 = 0;
          *((_QWORD *)v109 + HIDWORD(v110)) = v43;
        }
        HIDWORD(v110) = v39 + 1;
        v44 = (_DWORD *)v114;
        *(_QWORD *)&v114 = 0;
        if (v44)
        {
          if (v44[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 16))(v44);
          else
            --v44[2];
        }
        if ((_DWORD)v113 != -1)
          ((void (*)(__int128 *, __int128 *))off_1E339E8D0[v113])(&v114, &v112);
        ++v30;
        v29 -= 8;
        if (!v29)
          goto LABEL_77;
      }
      if ((_DWORD)v113 == 1)
      {
        v89 = *((_QWORD *)&v112 + 1);
        *(_BYTE *)a2 = v112;
        *(_QWORD *)(a2 + 8) = v89;
        *(_DWORD *)(a2 + 16) = 1;
LABEL_173:
        if (HIDWORD(v110))
        {
          v94 = v109;
          v95 = 8 * HIDWORD(v110);
          do
          {
            v96 = *(_DWORD **)v94;
            *(_QWORD *)v94 = 0;
            if (v96)
            {
              if (v96[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 16))(v96);
              else
                --v96[2];
            }
            v94 = (WTF *)((char *)v94 + 8);
            v95 -= 8;
          }
          while (v95);
        }
        result = v109;
        if (v109)
        {
          v109 = 0;
          LODWORD(v110) = 0;
          return (WTF *)WTF::fastFree(result, v31);
        }
        return result;
      }
LABEL_194:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_195:
      v10 = 3;
LABEL_8:
      if (v7)
        *(_DWORD *)v2 = v7;
      else
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v2, v6);
      v45 = WebCore::CSSCalcPrimitiveValueNode::doubleValue(v3, v10);
      v46 = bmalloc::api::isoAllocate();
      result = (WTF *)WebCore::CSSNumericType::create(v10, 1, (uint64_t)&v114);
      *(_QWORD *)&v47 = 0x8000000080000000;
      *((_QWORD *)&v47 + 1) = 0x8000000080000000;
      v112 = v47;
      v113 = xmmword_1968BD2E0;
      v48 = &v112;
      if (v116)
        v48 = &v114;
      *(_DWORD *)(v46 + 8) = 1;
      *(_QWORD *)(v46 + 16) = 0;
      *(_QWORD *)(v46 + 24) = 0;
      v49 = v48[1];
      *(_OWORD *)(v46 + 40) = *v48;
      *(_QWORD *)(v46 + 32) = 0;
      *(_OWORD *)(v46 + 56) = v49;
      *(_QWORD *)v46 = &off_1E339F080;
      *(double *)(v46 + 72) = v45;
      *(_BYTE *)(v46 + 80) = v10;
      *(_QWORD *)a2 = v46;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    case 3:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3) != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FBF70);
      }
      WebCore::CSSNumericValue::reifyMathExpression(&v112, *(_QWORD *)(v3 + 16));
      v12 = v113;
      if ((_DWORD)v113)
      {
        if ((_DWORD)v113 != 1)
          goto LABEL_194;
        v13 = *((_QWORD *)&v112 + 1);
        *((_QWORD *)&v112 + 1) = 0;
        *(_BYTE *)a2 = v112;
        *(_QWORD *)(a2 + 8) = v13;
      }
      else
      {
        v18 = (_DWORD *)v112;
        *(_QWORD *)&v112 = 0;
        v19 = bmalloc::api::isoAllocate();
        v106 = v18;
        v107 = 1;
        std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0,WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>((uint64_t *)&v106, &v114);
        *(_DWORD *)(v19 + 8) = 1;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        v20 = v115;
        *(_OWORD *)(v19 + 40) = v114;
        *(_OWORD *)(v19 + 56) = v20;
        *(_QWORD *)v19 = &off_1E339FB48;
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x1958FBFD0);
        }
        v21 = v18[2];
        v18[2] = v21 + 1;
        *(_QWORD *)(v19 + 72) = v18;
        if (v21)
          v18[2] = v21;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        *(_QWORD *)a2 = v19;
      }
      *(_DWORD *)(a2 + 16) = v12;
      return (WTF *)((uint64_t (*)(__int128 *, __int128 *))off_1E339E8D0[v12])(&v114, &v112);
    case 4:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3) != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FBF90);
      }
      WebCore::CSSNumericValue::reifyMathExpression(&v112, *(_QWORD *)(v3 + 16));
      v12 = v113;
      if ((_DWORD)v113)
      {
        if ((_DWORD)v113 != 1)
          goto LABEL_194;
        v14 = *((_QWORD *)&v112 + 1);
        *((_QWORD *)&v112 + 1) = 0;
        *(_BYTE *)a2 = v112;
        *(_QWORD *)(a2 + 8) = v14;
        *(_DWORD *)(a2 + 16) = 1;
      }
      else
      {
        v22 = (_DWORD *)v112;
        *(_QWORD *)&v112 = 0;
        v106 = v22;
        v107 = 1;
        v23 = bmalloc::api::isoAllocate();
        std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::negatedType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1,WebCore::negatedType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>((uint64_t *)&v106, (uint64_t)&v114);
        *(_DWORD *)(v23 + 8) = 1;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        v24 = v115;
        *(_OWORD *)(v23 + 40) = v114;
        *(_OWORD *)(v23 + 56) = v24;
        *(_QWORD *)v23 = &off_1E339F8F0;
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x1958FBFF0);
        }
        v25 = v22[2];
        v22[2] = v25 + 1;
        *(_QWORD *)(v23 + 72) = v22;
        *(_QWORD *)a2 = v23;
        *(_DWORD *)(a2 + 16) = 0;
        if (v25)
          v22[2] = v25;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
      }
      return (WTF *)((uint64_t (*)(__int128 *, __int128 *))off_1E339E8D0[v12])(&v114, &v112);
    case 5:
      result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
      if ((_DWORD)result != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FBF50);
      }
      v11 = 24;
      goto LABEL_30;
    default:
      v11 = 9;
LABEL_30:
      *(_BYTE *)a2 = v11;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
      return result;
  }
}

WTF *WebCore::CSSNumericValue::addInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  double v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  __int128 v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD **v46;
  uint64_t v47;
  _DWORD *v48;
  WTF *result;
  _DWORD **v50;
  int v51;
  unsigned int v52;
  char v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == 9)
  {
    v6 = *(_QWORD *)(a2 + 72);
    v7 = *(unsigned int *)(v6 + 20);
    if ((_DWORD)v7)
    {
      if (v7 <= 0x10)
        v8 = 16;
      else
        v8 = *(unsigned int *)(v6 + 20);
      if (v8 >> 29)
      {
LABEL_71:
        __break(0xC471u);
        JUMPOUT(0x1958FC55CLL);
      }
      v9 = *(_QWORD *)(v6 + 8);
      v10 = WTF::fastMalloc((WTF *)(8 * v8));
      v11 = (_QWORD *)v10;
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(v9 + v12);
        ++*(_DWORD *)(v13 + 8);
        *(_QWORD *)(v10 + v12) = v13;
        v12 += 8;
      }
      while (8 * v7 != v12);
      LODWORD(v14) = v8;
      v15 = v7;
    }
    else
    {
      v11 = 0;
      LODWORD(v14) = 0;
      v8 = 0;
      v15 = 0;
    }
  }
  else
  {
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
    ++*(_DWORD *)(a2 + 8);
    *v11 = a2;
    v15 = 1;
    v8 = 16;
    LODWORD(v14) = 16;
    LODWORD(v7) = 1;
  }
  v16 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v16)
  {
    v17 = *(uint64_t **)a3;
    v7 = v15 + v16;
    v18 = v15;
    if (v15 + v16 > v8)
    {
      v19 = v8 + (v8 >> 2);
      if (v19 >= 0x10)
        v20 = v19 + 1;
      else
        v20 = 16;
      if (v20 <= v7)
        v14 = v7;
      else
        v14 = v20;
      if (v14 >> 29)
      {
LABEL_72:
        __break(0xC471u);
        JUMPOUT(0x1958FC510);
      }
      v21 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
      memcpy(v21, v11, v18 * 8);
      if (v11)
      {
        if (v21 == v11)
        {
          v21 = 0;
          LODWORD(v14) = 0;
        }
        WTF::fastFree((WTF *)v11, v22);
      }
      v11 = v21;
    }
    v23 = 8 * v16;
    do
    {
      v24 = *v17++;
      ++*(_DWORD *)(v24 + 8);
      v11[v18++] = v24;
      v23 -= 8;
    }
    while (v23);
  }
  if ((_DWORD)v7)
  {
    v25 = 0;
    v26 = v7;
    do
    {
      v27 = (unsigned __int8 *)v11[v25];
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v27 + 24))(v27) != 10)
        goto LABEL_48;
      v28 = v27[80];
      v29 = *v11;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11) != 10)
        goto LABEL_72;
      if (v28 != *(unsigned __int8 *)(v29 + 80))
        goto LABEL_48;
      ++v25;
    }
    while (v7 != v25);
    v30 = *v11;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11) != 10)
    {
      __break(0xC471u);
      JUMPOUT(0x1958FC550);
    }
    v31 = *(unsigned __int8 *)(v30 + 80);
    v32 = *(double *)(v30 + 72);
    if (v7 >= 2)
    {
      v33 = v7 - 1;
      v34 = v11 + 1;
      do
      {
        v35 = *v34;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v34 + 24))(*v34) != 10)
        {
          __break(0xC471u);
          JUMPOUT(0x1958FC530);
        }
        v32 = v32 + *(double *)(v35 + 72);
        ++v34;
        --v33;
      }
      while (v33);
    }
    v36 = bmalloc::api::isoAllocate();
    WebCore::CSSNumericType::create(v31, 1, (uint64_t)&v56);
    v38 = 0;
    v39 = (uint64_t *)&v54;
    if (v59)
      v39 = &v56;
    *(_QWORD *)&v40 = 0x8000000080000000;
    *((_QWORD *)&v40 + 1) = 0x8000000080000000;
    v54 = v40;
    v55 = xmmword_1968BD2E0;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    v41 = *((_OWORD *)v39 + 1);
    *(_OWORD *)(v36 + 40) = *(_OWORD *)v39;
    *(_QWORD *)(v36 + 32) = 0;
    *(_OWORD *)(v36 + 56) = v41;
    *(_QWORD *)v36 = &off_1E339F080;
    *(double *)(v36 + 72) = v32;
    *(_BYTE *)(v36 + 80) = v31;
    *(_QWORD *)a1 = v36;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(v36 + 8) = 1;
    do
    {
      v42 = (_DWORD *)v11[v38];
      v11[v38] = 0;
      if (v42)
      {
        if (v42[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 16))(v42);
        else
          --v42[2];
      }
      ++v38;
    }
    while (v26 != v38);
    result = (WTF *)v11;
    return (WTF *)WTF::fastFree(result, v37);
  }
LABEL_48:
  v50 = (_DWORD **)v11;
  v51 = v14;
  v52 = v7;
  WebCore::CSSMathSum::create((uint64_t)&v50, (uint64_t)&v54);
  LOBYTE(v56) = 0;
  v58 = -1;
  v43 = v55;
  if ((_DWORD)v55 == -1)
  {
LABEL_70:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_71;
  }
  ((void (*)(char *, uint64_t *, __int128 *))off_1E339F000[v55])(&v53, &v56, &v54);
  v58 = v43;
  if ((_DWORD)v43)
  {
    if ((_DWORD)v43 == 1)
    {
      v44 = v57;
      v57 = 0;
      *(_BYTE *)a1 = v56;
      *(_QWORD *)(a1 + 8) = v44;
      goto LABEL_53;
    }
    goto LABEL_70;
  }
  v45 = v56;
  v56 = 0;
  *(_QWORD *)a1 = v45;
LABEL_53:
  *(_DWORD *)(a1 + 16) = v43;
  ((void (*)(char *, uint64_t *))off_1E339E8B0[v43])(&v53, &v56);
  if ((_DWORD)v55 != -1)
    ((void (*)(uint64_t *, __int128 *))off_1E339E8B0[v55])(&v56, &v54);
  LODWORD(v55) = -1;
  if (v52)
  {
    v46 = v50;
    v47 = 8 * v52;
    do
    {
      v48 = *v46;
      *v46 = 0;
      if (v48)
      {
        if (v48[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
        else
          --v48[2];
      }
      ++v46;
      v47 -= 8;
    }
    while (v47);
  }
  result = (WTF *)v50;
  if (v50)
  {
    v50 = 0;
    v51 = 0;
    return (WTF *)WTF::fastFree(result, v37);
  }
  return result;
}

WTF *WebCore::CSSNumericValue::add@<X0>(WTF *result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  WTF *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  _DWORD *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;

  v3 = (uint64_t)result;
  v19 = 0;
  v20 = 0;
  if (!*a2)
    return WebCore::CSSNumericValue::addInternal(a3, v3, (uint64_t)&v19);
  v5 = **a2;
  if (!(_DWORD)v5)
    return WebCore::CSSNumericValue::addInternal(a3, v3, (uint64_t)&v19);
  if (!(v5 >> 29))
  {
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v20) = v5;
    v19 = v7;
    v8 = *a2;
    if (!*a2 || (v10 = (uint64_t)(v8 + 2), v9 = *v8, !(_DWORD)v9))
    {
      WebCore::CSSNumericValue::addInternal(a3, v3, (uint64_t)&v19);
      return (WTF *)WTF::fastFree(v7, v15);
    }
    v11 = v8[4];
    if ((_DWORD)v11 != -1)
    {
      v12 = 0;
      v13 = v10 + 16 * v9;
      v14 = -1;
      while (1)
      {
        v23 = &v22;
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v11](&v21, (__int128 *)&v23, v10);
        *(_QWORD *)((char *)v7 + v12) = v21;
        v10 += 16;
        if (v10 == v13)
          break;
        v11 = *(unsigned int *)(v10 + 8);
        v12 += 8;
        --v14;
        if ((_DWORD)v11 == -1)
          goto LABEL_10;
      }
      HIDWORD(v20) = -v14;
      WebCore::CSSNumericValue::addInternal(a3, v3, (uint64_t)&v19);
      if (v14)
      {
        v16 = v12 + 8;
        v17 = v7;
        do
        {
          v18 = *(_DWORD **)v17;
          *(_QWORD *)v17 = 0;
          if (v18)
          {
            if (v18[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
            else
              --v18[2];
          }
          v17 = (WTF *)((char *)v17 + 8);
          v16 -= 8;
        }
        while (v16);
      }
      return (WTF *)WTF::fastFree(v7, v15);
    }
LABEL_10:
    std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSNumericValue::addInternal(a3, v3, (uint64_t)&v19);
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::CSSNumericValue::sub@<X0>(WTF *result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  WTF *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  double *v17;
  double v18;
  unsigned int v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  _DWORD *v23;
  __int128 v24;
  _DWORD *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  _DWORD *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  _DWORD *v33;
  _OWORD v34[2];
  _OWORD v35[2];
  char v36;
  char v37;
  char *v38;

  v3 = (uint64_t)result;
  v31 = 0;
  v32 = 0;
  if (!*a2)
    return WebCore::CSSNumericValue::addInternal(a3, (uint64_t)result, (uint64_t)&v31);
  v5 = **a2;
  if (!(_DWORD)v5)
    return WebCore::CSSNumericValue::addInternal(a3, (uint64_t)result, (uint64_t)&v31);
  if (!(v5 >> 29))
  {
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v32) = v5;
    v31 = v7;
    v8 = *a2;
    if (!*a2 || (v10 = (uint64_t)(v8 + 2), v9 = *v8, !(_DWORD)v9))
    {
      WebCore::CSSNumericValue::addInternal(a3, v3, (uint64_t)&v31);
      return (WTF *)WTF::fastFree(v7, v26);
    }
    v30 = a3;
    v11 = v8[4];
    if ((_DWORD)v11 != -1)
    {
      v12 = 0;
      v13 = v10 + 16 * v9;
      v14 = -1;
      while (1)
      {
        *(_QWORD *)&v35[0] = v34;
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v11]((uint64_t *)&v33, v35, v10);
        v15 = v33;
        if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v33 + 24))(v33) == 7)
        {
          v16 = *((_QWORD *)v15 + 9);
          ++*(_DWORD *)(v16 + 8);
        }
        else
        {
          v17 = (double *)v33;
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v33 + 24))(v33) == 10)
          {
            v18 = -v17[9];
            v19 = *((unsigned __int8 *)v17 + 80);
            v16 = bmalloc::api::isoAllocate();
            WebCore::CSSNumericType::create(v19, 1, (uint64_t)v35);
            *(_QWORD *)&v20 = 0x8000000080000000;
            *((_QWORD *)&v20 + 1) = 0x8000000080000000;
            v34[0] = v20;
            v34[1] = xmmword_1968BD2E0;
            v21 = v35;
            if (!v36)
              v21 = v34;
            *(_DWORD *)(v16 + 8) = 1;
            *(_QWORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 24) = 0;
            v22 = v21[1];
            *(_OWORD *)(v16 + 40) = *v21;
            *(_QWORD *)(v16 + 32) = 0;
            *(_OWORD *)(v16 + 56) = v22;
            *(_QWORD *)v16 = &off_1E339F080;
            *(double *)(v16 + 72) = v18;
            *(_BYTE *)(v16 + 80) = v19;
          }
          else
          {
            v16 = bmalloc::api::isoAllocate();
            v23 = v33;
            v33 = 0;
            *(_QWORD *)&v34[0] = v23;
            DWORD2(v34[0]) = 1;
            std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_0,WebCore::copyType(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> const&>((uint64_t *)v34, v35);
            *(_DWORD *)(v16 + 8) = 1;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)(v16 + 32) = 0;
            *(_QWORD *)(v16 + 16) = 0;
            v24 = v35[1];
            *(_OWORD *)(v16 + 40) = v35[0];
            *(_OWORD *)(v16 + 56) = v24;
            *(_QWORD *)v16 = &off_1E339FB48;
            if (DWORD2(v34[0]) == -1)
              goto LABEL_35;
            v38 = &v37;
            ((void (*)(char **, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[DWORD2(v34[0])])(&v38, v34);
            if (DWORD2(v34[0]) != -1)
              ((void (*)(_OWORD *, _OWORD *))off_1E339E8A0[DWORD2(v34[0])])(v35, v34);
          }
        }
        v25 = v33;
        v33 = 0;
        if (v25)
        {
          if (v25[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
          else
            --v25[2];
        }
        *(_QWORD *)((char *)v7 + v12) = v16;
        v10 += 16;
        if (v10 == v13)
          break;
        v11 = *(unsigned int *)(v10 + 8);
        v12 += 8;
        --v14;
        if ((_DWORD)v11 == -1)
          goto LABEL_35;
      }
      HIDWORD(v32) = -v14;
      WebCore::CSSNumericValue::addInternal(v30, v3, (uint64_t)&v31);
      if (v14)
      {
        v27 = v12 + 8;
        v28 = v7;
        do
        {
          v29 = *(_DWORD **)v28;
          *(_QWORD *)v28 = 0;
          if (v29)
          {
            if (v29[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
            else
              --v29[2];
          }
          v28 = (WTF *)((char *)v28 + 8);
          v27 -= 8;
        }
        while (v27);
      }
      return (WTF *)WTF::fastFree(v7, v26);
    }
LABEL_35:
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::CSSNumericValue::multiplyInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  _BYTE *v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _DWORD *result;
  void *v43;
  __int128 v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == 8)
  {
    v6 = *(_QWORD *)(a2 + 72);
    v7 = *(unsigned int *)(v6 + 20);
    if ((_DWORD)v7)
    {
      if (v7 <= 0x10)
        v8 = 16;
      else
        v8 = *(unsigned int *)(v6 + 20);
      if (v8 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FCF64);
      }
      v9 = *(_QWORD *)(v6 + 8);
      v10 = WTF::fastMalloc((WTF *)(8 * v8));
      v11 = (uint64_t *)v10;
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(v9 + v12);
        ++*(_DWORD *)(v13 + 8);
        *(_QWORD *)(v10 + v12) = v13;
        v12 += 8;
      }
      while (8 * v7 != v12);
      LODWORD(v14) = v8;
      v15 = v7;
    }
    else
    {
      v11 = 0;
      LODWORD(v14) = 0;
      v8 = 0;
      v15 = 0;
    }
  }
  else
  {
    v11 = (uint64_t *)WTF::fastMalloc((WTF *)0x80);
    ++*(_DWORD *)(a2 + 8);
    *v11 = a2;
    v15 = 1;
    v8 = 16;
    LODWORD(v14) = 16;
    LODWORD(v7) = 1;
  }
  v16 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v16)
  {
    v17 = *(uint64_t **)a3;
    v7 = v15 + v16;
    v18 = v15;
    if (v15 + v16 > v8)
    {
      v19 = v8 + (v8 >> 2);
      if (v19 >= 0x10)
        v20 = v19 + 1;
      else
        v20 = 16;
      if (v20 <= v7)
        v14 = v7;
      else
        v14 = v20;
      if (v14 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FCF6CLL);
      }
      v21 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v14));
      memcpy(v21, v11, v18 * 8);
      if (v11)
      {
        if (v21 == v11)
        {
          v21 = 0;
          LODWORD(v14) = 0;
        }
        WTF::fastFree((WTF *)v11, v22);
      }
      v11 = v21;
    }
    v23 = 8 * v16;
    do
    {
      v24 = *v17++;
      ++*(_DWORD *)(v24 + 8);
      v11[v18++] = v24;
      v23 -= 8;
    }
    while (v23);
  }
  if ((_DWORD)v7)
  {
    v25 = 0;
    v26 = 8 * v7;
    while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11[v25 / 8] + 24))(v11[v25 / 8]) == 10)
    {
      v25 += 8;
      if (v26 == v25)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        do
        {
          v30 = (_BYTE *)v11[v27];
          if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v30 + 24))(v30) != 10)
            goto LABEL_81;
          if (v30[80] != 1)
          {
            if (v28)
              goto LABEL_45;
            v28 = 1;
            v29 = v27;
          }
          ++v27;
        }
        while (v7 != v27);
        v31 = 1.0;
        v32 = v11;
        do
        {
          v33 = *v32;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v32 + 24))(*v32) != 10)
          {
            __break(0xC471u);
            JUMPOUT(0x1958FCF3CLL);
          }
          v31 = v31 * *(double *)(v33 + 72);
          ++v32;
          v26 -= 8;
        }
        while (v26);
        if (v28)
        {
          if (v29 >= v7)
          {
LABEL_81:
            __break(0xC471u);
            JUMPOUT(0x1958FCF1CLL);
          }
          v34 = (unsigned __int8 *)v11[v29];
          if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v34 + 24))(v34) != 10)
          {
            __break(0xC471u);
            JUMPOUT(0x1958FCF5CLL);
          }
          v35 = v34[80];
        }
        else
        {
          v35 = 1;
        }
        goto LABEL_48;
      }
    }
LABEL_45:
    v50 = v11;
    v51 = __PAIR64__(v7, v14);
    WebCore::CSSNumericType::multiplyTypes(&v50, (uint64_t)&v55);
    if (v57)
    {
      v36 = bmalloc::api::isoAllocate();
      v50 = 0;
      v51 = 0;
      *(_DWORD *)(v36 + 8) = 1;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
      *(_QWORD *)(v36 + 16) = 0;
      v37 = v56;
      *(_OWORD *)(v36 + 40) = v55;
      *(_OWORD *)(v36 + 56) = v37;
      *(_QWORD *)v36 = &off_1E339FBA8;
      v38 = bmalloc::api::isoAllocate();
      v39 = 0;
      v40 = 0;
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = v11;
      *(_DWORD *)(v38 + 16) = v14;
      *(_DWORD *)(v38 + 20) = v7;
      *(_QWORD *)(v36 + 72) = v38;
      LODWORD(v54) = 0;
      *(_QWORD *)&v53 = 0;
      LODWORD(v56) = 0;
      *(_QWORD *)&v55 = 0;
      *(_QWORD *)a1 = v36;
      LODWORD(v7) = 0;
      v11 = 0;
    }
    else
    {
      LOBYTE(v53) = 33;
      v39 = 1;
      LODWORD(v54) = 1;
      LOBYTE(v55) = 33;
      *((_QWORD *)&v53 + 1) = 0;
      LODWORD(v56) = 1;
      *((_QWORD *)&v55 + 1) = 0;
      *(_BYTE *)a1 = 33;
      v40 = 1;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 16) = v40;
    result = (_DWORD *)((uint64_t (*)(char *, __int128 *))off_1E339E8C0[v39])(&v52, &v55);
    if ((_DWORD)v54 != -1)
      result = (_DWORD *)((uint64_t (*)(__int128 *, __int128 *))off_1E339E8C0[v54])(&v55, &v53);
    LODWORD(v54) = -1;
    if ((_DWORD)v7)
    {
      v49 = 8 * v7;
      do
      {
        result = (_DWORD *)*v11;
        *v11 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
          else
            --result[2];
        }
        ++v11;
        v49 -= 8;
      }
      while (v49);
      v11 = v50;
    }
    if (v11)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      return (_DWORD *)WTF::fastFree((WTF *)v11, v43);
    }
  }
  else
  {
    v31 = 1.0;
    v35 = 1;
LABEL_48:
    v41 = bmalloc::api::isoAllocate();
    result = (_DWORD *)WebCore::CSSNumericType::create(v35, 1, (uint64_t)&v55);
    *(_QWORD *)&v44 = 0x8000000080000000;
    *((_QWORD *)&v44 + 1) = 0x8000000080000000;
    v53 = v44;
    v54 = xmmword_1968BD2E0;
    v45 = &v53;
    if (v57)
      v45 = &v55;
    *(_DWORD *)(v41 + 8) = 1;
    *(_QWORD *)(v41 + 16) = 0;
    *(_QWORD *)(v41 + 24) = 0;
    v46 = v45[1];
    *(_OWORD *)(v41 + 40) = *v45;
    *(_QWORD *)(v41 + 32) = 0;
    *(_OWORD *)(v41 + 56) = v46;
    *(_QWORD *)v41 = &off_1E339F080;
    *(double *)(v41 + 72) = v31;
    *(_BYTE *)(v41 + 80) = v35;
    *(_QWORD *)a1 = v41;
    *(_DWORD *)(a1 + 16) = 0;
    if ((_DWORD)v7)
    {
      v47 = 8 * v7;
      v48 = v11;
      do
      {
        result = (_DWORD *)*v48;
        *v48 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
          else
            --result[2];
        }
        ++v48;
        v47 -= 8;
      }
      while (v47);
    }
    if (v11)
      return (_DWORD *)WTF::fastFree((WTF *)v11, v43);
  }
  return result;
}

_DWORD *WebCore::CSSNumericValue::mul@<X0>(_DWORD *result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  WTF *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  _DWORD *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;

  v3 = (uint64_t)result;
  v19 = 0;
  v20 = 0;
  if (!*a2)
    return WebCore::CSSNumericValue::multiplyInternal(a3, v3, (uint64_t)&v19);
  v5 = **a2;
  if (!(_DWORD)v5)
    return WebCore::CSSNumericValue::multiplyInternal(a3, v3, (uint64_t)&v19);
  if (!(v5 >> 29))
  {
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v20) = v5;
    v19 = v7;
    v8 = *a2;
    if (!*a2 || (v10 = (uint64_t)(v8 + 2), v9 = *v8, !(_DWORD)v9))
    {
      WebCore::CSSNumericValue::multiplyInternal(a3, v3, (uint64_t)&v19);
      return (_DWORD *)WTF::fastFree(v7, v15);
    }
    v11 = v8[4];
    if ((_DWORD)v11 != -1)
    {
      v12 = 0;
      v13 = v10 + 16 * v9;
      v14 = -1;
      while (1)
      {
        v23 = &v22;
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v11](&v21, (__int128 *)&v23, v10);
        *(_QWORD *)((char *)v7 + v12) = v21;
        v10 += 16;
        if (v10 == v13)
          break;
        v11 = *(unsigned int *)(v10 + 8);
        v12 += 8;
        --v14;
        if ((_DWORD)v11 == -1)
          goto LABEL_10;
      }
      HIDWORD(v20) = -v14;
      WebCore::CSSNumericValue::multiplyInternal(a3, v3, (uint64_t)&v19);
      if (v14)
      {
        v16 = v12 + 8;
        v17 = v7;
        do
        {
          v18 = *(_DWORD **)v17;
          *(_QWORD *)v17 = 0;
          if (v18)
          {
            if (v18[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
            else
              --v18[2];
          }
          v17 = (WTF *)((char *)v17 + 8);
          v16 -= 8;
        }
        while (v16);
      }
      return (_DWORD *)WTF::fastFree(v7, v15);
    }
LABEL_10:
    std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSNumericValue::multiplyInternal(a3, v3, (uint64_t)&v19);
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::CSSNumericValue::div@<X0>(_DWORD *result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  double *v16;
  double v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  _OWORD v42[2];
  _OWORD v43[2];
  char v44;
  char v45;
  _QWORD v46[2];

  v3 = (uint64_t)result;
  v40 = 0;
  v41 = 0;
  if (!*a2)
    goto LABEL_38;
  v5 = **a2;
  if (!(_DWORD)v5)
    goto LABEL_38;
  if (v5 >> 29)
    goto LABEL_53;
  LODWORD(v41) = **a2;
  v40 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
  v7 = *a2;
  if (!v7 || (v10 = *v7, v9 = (uint64_t)(v7 + 2), (v8 = v10) == 0))
  {
LABEL_38:
    result = WebCore::CSSNumericValue::multiplyInternal(a3, v3, (uint64_t)&v40);
LABEL_39:
    v33 = v40;
    if (HIDWORD(v41))
    {
      v34 = 8 * HIDWORD(v41);
      do
      {
        result = *(_DWORD **)v33;
        *(_QWORD *)v33 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
          else
            --result[2];
        }
        v33 = (WTF *)((char *)v33 + 8);
        v34 -= 8;
      }
      while (v34);
      v33 = v40;
    }
    if (v33)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      return (_DWORD *)WTF::fastFree(v33, v14);
    }
    return result;
  }
  v11 = 16 * v8;
  while (1)
  {
    v12 = *(unsigned int *)(v9 + 8);
    if ((_DWORD)v12 == -1)
      break;
    *(_QWORD *)&v43[0] = v42;
    __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v12]((uint64_t *)&v36, v43, v9);
    v13 = v36;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v36 + 24))(v36) == 4)
    {
      v15 = *((_QWORD *)v13 + 9);
      ++*(_DWORD *)(v15 + 8);
      v37 = v15;
LABEL_10:
      v39 = 0;
      goto LABEL_19;
    }
    v16 = (double *)v36;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v36 + 24))(v36) == 10 && *((_BYTE *)v16 + 80) == 1)
    {
      v17 = v16[9];
      if (v17 != 0.0)
      {
        v28 = 1.0 / v17;
        v29 = bmalloc::api::isoAllocate();
        WebCore::CSSNumericType::create(1u, 1, (uint64_t)v43);
        *(_QWORD *)&v30 = 0x8000000080000000;
        *((_QWORD *)&v30 + 1) = 0x8000000080000000;
        v42[0] = v30;
        v42[1] = xmmword_1968BD2E0;
        v31 = v43;
        if (!v44)
          v31 = v42;
        *(_DWORD *)(v29 + 8) = 1;
        *(_QWORD *)(v29 + 16) = 0;
        *(_QWORD *)(v29 + 24) = 0;
        v32 = v31[1];
        *(_OWORD *)(v29 + 40) = *v31;
        *(_QWORD *)(v29 + 32) = 0;
        *(_OWORD *)(v29 + 56) = v32;
        *(_QWORD *)v29 = &off_1E339F080;
        *(double *)(v29 + 72) = v28;
        *(_BYTE *)(v29 + 80) = 1;
        v37 = v29;
        goto LABEL_10;
      }
      LOBYTE(v37) = 32;
      v38 = 0;
      v39 = 1;
    }
    else
    {
      v18 = v36;
      v36 = 0;
      *(_QWORD *)&v42[0] = v18;
      DWORD2(v42[0]) = 1;
      v19 = bmalloc::api::isoAllocate();
      if (DWORD2(v42[0]) == -1)
        break;
      v20 = v19;
      v46[0] = &v45;
      ((void (*)(_OWORD *__return_ptr, _QWORD *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL11negatedTypeERKNS_7variantIJdNS6_6RefPtrINS8_15CSSNumericValueENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEEEEEE3__1JZNS8_L11negatedTypeESJ_E3__0EEEEEJRKNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[DWORD2(v42[0])])(v43, v46, v42);
      *(_DWORD *)(v20 + 8) = 1;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0;
      v21 = v43[1];
      *(_OWORD *)(v20 + 40) = v43[0];
      *(_OWORD *)(v20 + 56) = v21;
      *(_QWORD *)v20 = &off_1E339F8F0;
      if (DWORD2(v42[0]) == -1)
        break;
      v46[0] = &v45;
      ((void (*)(_QWORD *, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[DWORD2(v42[0])])(v46, v42);
      v37 = v20;
      v39 = 0;
      if (DWORD2(v42[0]) != -1)
        ((void (*)(_OWORD *, _OWORD *))off_1E339E8A0[DWORD2(v42[0])])(v43, v42);
    }
LABEL_19:
    result = v36;
    v36 = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      else
        --result[2];
    }
    if (v39)
    {
      if (v39 == 1)
      {
        v35 = v38;
        *(_BYTE *)a3 = v37;
        *(_QWORD *)(a3 + 8) = v35;
        *(_DWORD *)(a3 + 16) = 1;
        goto LABEL_39;
      }
      break;
    }
    v22 = v37;
    v37 = 0;
    *(_QWORD *)&v43[0] = v22;
    LODWORD(v23) = HIDWORD(v41);
    if (HIDWORD(v41) == (_DWORD)v41)
    {
      v24 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v40, HIDWORD(v41) + 1, (unint64_t)v43);
      v23 = HIDWORD(v41);
      v25 = v40;
      v26 = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v25 + v23) = v26;
    }
    else
    {
      *(_QWORD *)&v43[0] = 0;
      *((_QWORD *)v40 + HIDWORD(v41)) = v22;
    }
    HIDWORD(v41) = v23 + 1;
    v27 = *(_DWORD **)&v43[0];
    *(_QWORD *)&v43[0] = 0;
    if (v27)
    {
      if (v27[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
      else
        --v27[2];
    }
    if (v39 != -1)
      ((void (*)(_OWORD *, uint64_t *))off_1E339E8D0[v39])(v43, &v37);
    v9 += 16;
    v11 -= 16;
    if (!v11)
      goto LABEL_38;
  }
  result = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
  __break(0xC471u);
  return result;
}

unsigned __int8 *WebCore::CSSNumericValue::min@<X0>(unint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WTF *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  _DWORD *v37;
  void *v38;
  unsigned __int8 *result;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 ***v43;
  uint64_t v44;
  uint64_t (*v45[2])(uint64_t *, _QWORD *);
  unsigned int v46;
  unsigned __int8 **v47;
  uint64_t v48;
  unsigned __int8 ***v49;
  uint64_t v50;
  int v51;
  char v52;

  if (*a2 && (v5 = **a2, (_DWORD)v5))
  {
    if (v5 >> 29)
      goto LABEL_76;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    v8 = *a2;
    if (v8)
    {
      v11 = *v8;
      v10 = (uint64_t)(v8 + 2);
      v9 = v11;
      if (v11)
      {
        v12 = 0;
        v13 = 16 * v9;
        while (1)
        {
          v14 = *(unsigned int *)(v10 + 8);
          if ((_DWORD)v14 == -1)
            goto LABEL_73;
          v49 = &v47;
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v14]((uint64_t *)v45, (__int128 *)&v49, v10);
          v15 = v12 + 1;
          *((uint64_t (**)(uint64_t *, _QWORD *))v7 + v12) = v45[0];
          v10 += 16;
          ++v12;
          v13 -= 16;
          if (!v13)
            goto LABEL_12;
        }
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v15 = 0;
LABEL_12:
  v47 = 0;
  v48 = 0;
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a1 + 24))(a1) != 5)
  {
    v21 = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x80);
    v47 = v21;
    ++*(_DWORD *)(a1 + 8);
    *v21 = (unsigned __int8 *)a1;
    v48 = 0x100000010;
    v24 = 1;
    v18 = 16;
    LODWORD(a1) = 1;
    if (!v15)
      goto LABEL_47;
    goto LABEL_25;
  }
  v17 = *(_QWORD *)(a1 + 72);
  a1 = *(unsigned int *)(v17 + 20);
  if (!(_DWORD)a1)
  {
    v21 = 0;
    v18 = 0;
    v24 = 0;
    if (!v15)
      goto LABEL_47;
    goto LABEL_25;
  }
  if (a1 <= 0x10)
    v18 = 16;
  else
    v18 = *(unsigned int *)(v17 + 20);
  if (v18 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1958FD954);
  }
  v19 = *(_QWORD *)(v17 + 8);
  v20 = (unsigned __int8 **)WTF::fastMalloc((WTF *)(8 * v18));
  v21 = v20;
  v22 = 0;
  LODWORD(v48) = v18;
  v47 = v20;
  do
  {
    v23 = *(_QWORD *)(v19 + v22 * 8);
    ++*(_DWORD *)(v23 + 8);
    v20[v22++] = (unsigned __int8 *)v23;
  }
  while (a1 != v22);
  HIDWORD(v48) = a1;
  v24 = a1;
  if (v15)
  {
LABEL_25:
    v25 = v15;
    v26 = v24 + v15;
    v27 = v24;
    if (v26 <= v18)
    {
LABEL_38:
      v32 = 8 * v25;
      v33 = 8 * v25;
      v34 = v7;
      do
      {
        v35 = *(_QWORD *)v34;
        v34 = (WTF *)((char *)v34 + 8);
        ++*(_DWORD *)(v35 + 8);
        v21[v27++] = (unsigned __int8 *)v35;
        v33 -= 8;
      }
      while (v33);
      HIDWORD(v48) = v26;
      v36 = v7;
      do
      {
        v37 = *(_DWORD **)v36;
        *(_QWORD *)v36 = 0;
        if (v37)
        {
          if (v37[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
          else
            --v37[2];
        }
        v36 = (WTF *)((char *)v36 + 8);
        v32 -= 8;
      }
      while (v32);
      LODWORD(a1) = v26;
      goto LABEL_47;
    }
    v28 = v18 + (v18 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v26)
      v30 = v26;
    else
      v30 = v29;
    if (!(v30 >> 29))
    {
      v31 = (unsigned __int8 **)WTF::fastMalloc((WTF *)(8 * v30));
      LODWORD(v48) = v30;
      v47 = v31;
      memcpy(v31, v21, v27 * 8);
      if (v21)
      {
        if (v31 == v21)
        {
          v31 = 0;
          v47 = 0;
          LODWORD(v48) = 0;
        }
        WTF::fastFree((WTF *)v21, v16);
      }
      v21 = v31;
      goto LABEL_38;
    }
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x1958FD94CLL);
  }
LABEL_47:
  if (v7)
    WTF::fastFree(v7, v16);
  v45[0] = (uint64_t (*)(uint64_t *, _QWORD *))std::min[abi:sn180100]<double>;
  WebCore::operationOnValuesOfSameUnit<double const& (*)(double const&,double const&)>((uint64_t)&v49, v45, &v47);
  result = (unsigned __int8 *)v49;
  if (v49)
  {
    v40 = *((_DWORD *)v49 + 2);
    *((_DWORD *)v49 + 2) = v40 + 1;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 16) = 0;
    if (v40)
    {
      *((_DWORD *)result + 2) = v40;
      if (!(_DWORD)a1)
        goto LABEL_68;
    }
    else
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 16))(result);
      if (!(_DWORD)a1)
        goto LABEL_68;
    }
    goto LABEL_61;
  }
  WebCore::CSSMathMin::create((uint64_t)&v47, (uint64_t)v45);
  LOBYTE(v49) = 0;
  v51 = -1;
  v41 = v46;
  if (v46 == -1)
    goto LABEL_73;
  ((void (*)(char *, unsigned __int8 ****, uint64_t (**)(uint64_t *, _QWORD *)))off_1E339EFE0[v46])(&v52, &v49, v45);
  v51 = v41;
  if ((_DWORD)v41)
  {
    if ((_DWORD)v41 == 1)
    {
      v42 = v50;
      v50 = 0;
      *(_BYTE *)a3 = (_BYTE)v49;
      *(_QWORD *)(a3 + 8) = v42;
      goto LABEL_58;
    }
LABEL_73:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_76;
  }
  v43 = v49;
  v49 = 0;
  *(_QWORD *)a3 = v43;
LABEL_58:
  *(_DWORD *)(a3 + 16) = v41;
  result = (unsigned __int8 *)((uint64_t (*)(char *, unsigned __int8 ****))off_1E339E8E0[v41])(&v52, &v49);
  if (v46 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 ****, _QWORD))off_1E339E8E0[v46])(&v49, v45);
  LODWORD(a1) = HIDWORD(v48);
  v21 = v47;
  if (HIDWORD(v48))
  {
LABEL_61:
    v44 = 8 * a1;
    do
    {
      result = *v21;
      *v21 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 2);
      }
      ++v21;
      v44 -= 8;
    }
    while (v44);
    v21 = v47;
  }
LABEL_68:
  if (v21)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    return (unsigned __int8 *)WTF::fastFree((WTF *)v21, v38);
  }
  return result;
}

uint64_t WebCore::operationOnValuesOfSameUnit<double const& (*)(double const&,double const&)>(uint64_t result, uint64_t (**a2)(uint64_t *, _QWORD *), unsigned __int8 ***a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t *, _QWORD *);
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  _QWORD v24[4];
  char v25;

  v3 = (_QWORD *)result;
  v4 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v4)
  {
    v7 = *a3;
    v8 = 8 * v4;
    while (1)
    {
      v9 = *v7;
      result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)*v7 + 24))(*v7);
      if ((_DWORD)result != 10)
        break;
      if (!*((_DWORD *)a3 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1958FDB94);
      }
      v10 = v9[80];
      v11 = **a3;
      result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v11 + 24))(v11);
      if ((_DWORD)result != 10)
        goto LABEL_22;
      if (v10 != v11[80])
        break;
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        if (!*((_DWORD *)a3 + 3))
        {
LABEL_22:
          __break(0xC471u);
          JUMPOUT(0x1958FDB4CLL);
        }
        v12 = **a3;
        if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v12 + 24))(v12) != 10)
        {
          __break(0xC471u);
          JUMPOUT(0x1958FDB8CLL);
        }
        v13 = v12[80];
        v14 = *((_QWORD *)v12 + 9);
        v22 = v14;
        if (*((_DWORD *)a3 + 3) >= 2u)
        {
          v15 = 1;
          do
          {
            v16 = *a2;
            v17 = (*a3)[v15];
            if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v17 + 24))(v17) != 10)
            {
              __break(0xC471u);
              JUMPOUT(0x1958FDB6CLL);
            }
            v24[0] = *((_QWORD *)v17 + 9);
            v14 = *(_QWORD *)v16(&v22, v24);
            v22 = v14;
            ++v15;
          }
          while (v15 < *((unsigned int *)a3 + 3));
        }
        v18 = bmalloc::api::isoAllocate();
        result = WebCore::CSSNumericType::create(v13, 1, (uint64_t)v24);
        *(_QWORD *)&v19 = 0x8000000080000000;
        *((_QWORD *)&v19 + 1) = 0x8000000080000000;
        v23[0] = v19;
        v23[1] = xmmword_1968BD2E0;
        v20 = v23;
        if (v25)
          v20 = v24;
        *(_DWORD *)(v18 + 8) = 1;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v18 + 24) = 0;
        v21 = v20[1];
        *(_OWORD *)(v18 + 40) = *v20;
        *(_QWORD *)(v18 + 32) = 0;
        *(_OWORD *)(v18 + 56) = v21;
        *(_QWORD *)v18 = &off_1E339F080;
        *(_QWORD *)(v18 + 72) = v14;
        *(_BYTE *)(v18 + 80) = v13;
        *v3 = v18;
        return result;
      }
    }
  }
  *v3 = 0;
  return result;
}

double *std::min[abi:sn180100]<double>(double *result, double *a2)
{
  if (*a2 < *result)
    return a2;
  return result;
}

unsigned __int8 *WebCore::CSSNumericValue::max@<X0>(unint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WTF *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 **v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  _DWORD *v37;
  void *v38;
  unsigned __int8 *result;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 ***v43;
  uint64_t v44;
  uint64_t (*v45[2])(uint64_t *, _QWORD *);
  unsigned int v46;
  unsigned __int8 **v47;
  uint64_t v48;
  unsigned __int8 ***v49;
  uint64_t v50;
  int v51;
  char v52;

  if (*a2 && (v5 = **a2, (_DWORD)v5))
  {
    if (v5 >> 29)
      goto LABEL_76;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    v8 = *a2;
    if (v8)
    {
      v11 = *v8;
      v10 = (uint64_t)(v8 + 2);
      v9 = v11;
      if (v11)
      {
        v12 = 0;
        v13 = 16 * v9;
        while (1)
        {
          v14 = *(unsigned int *)(v10 + 8);
          if ((_DWORD)v14 == -1)
            goto LABEL_73;
          v49 = &v47;
          __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v14]((uint64_t *)v45, (__int128 *)&v49, v10);
          v15 = v12 + 1;
          *((uint64_t (**)(uint64_t *, _QWORD *))v7 + v12) = v45[0];
          v10 += 16;
          ++v12;
          v13 -= 16;
          if (!v13)
            goto LABEL_12;
        }
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v15 = 0;
LABEL_12:
  v47 = 0;
  v48 = 0;
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a1 + 24))(a1) != 6)
  {
    v21 = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x80);
    v47 = v21;
    ++*(_DWORD *)(a1 + 8);
    *v21 = (unsigned __int8 *)a1;
    v48 = 0x100000010;
    v24 = 1;
    v18 = 16;
    LODWORD(a1) = 1;
    if (!v15)
      goto LABEL_47;
    goto LABEL_25;
  }
  v17 = *(_QWORD *)(a1 + 72);
  a1 = *(unsigned int *)(v17 + 20);
  if (!(_DWORD)a1)
  {
    v21 = 0;
    v18 = 0;
    v24 = 0;
    if (!v15)
      goto LABEL_47;
    goto LABEL_25;
  }
  if (a1 <= 0x10)
    v18 = 16;
  else
    v18 = *(unsigned int *)(v17 + 20);
  if (v18 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1958FDFE4);
  }
  v19 = *(_QWORD *)(v17 + 8);
  v20 = (unsigned __int8 **)WTF::fastMalloc((WTF *)(8 * v18));
  v21 = v20;
  v22 = 0;
  LODWORD(v48) = v18;
  v47 = v20;
  do
  {
    v23 = *(_QWORD *)(v19 + v22 * 8);
    ++*(_DWORD *)(v23 + 8);
    v20[v22++] = (unsigned __int8 *)v23;
  }
  while (a1 != v22);
  HIDWORD(v48) = a1;
  v24 = a1;
  if (v15)
  {
LABEL_25:
    v25 = v15;
    v26 = v24 + v15;
    v27 = v24;
    if (v26 <= v18)
    {
LABEL_38:
      v32 = 8 * v25;
      v33 = 8 * v25;
      v34 = v7;
      do
      {
        v35 = *(_QWORD *)v34;
        v34 = (WTF *)((char *)v34 + 8);
        ++*(_DWORD *)(v35 + 8);
        v21[v27++] = (unsigned __int8 *)v35;
        v33 -= 8;
      }
      while (v33);
      HIDWORD(v48) = v26;
      v36 = v7;
      do
      {
        v37 = *(_DWORD **)v36;
        *(_QWORD *)v36 = 0;
        if (v37)
        {
          if (v37[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
          else
            --v37[2];
        }
        v36 = (WTF *)((char *)v36 + 8);
        v32 -= 8;
      }
      while (v32);
      LODWORD(a1) = v26;
      goto LABEL_47;
    }
    v28 = v18 + (v18 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v26)
      v30 = v26;
    else
      v30 = v29;
    if (!(v30 >> 29))
    {
      v31 = (unsigned __int8 **)WTF::fastMalloc((WTF *)(8 * v30));
      LODWORD(v48) = v30;
      v47 = v31;
      memcpy(v31, v21, v27 * 8);
      if (v21)
      {
        if (v31 == v21)
        {
          v31 = 0;
          v47 = 0;
          LODWORD(v48) = 0;
        }
        WTF::fastFree((WTF *)v21, v16);
      }
      v21 = v31;
      goto LABEL_38;
    }
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x1958FDFDCLL);
  }
LABEL_47:
  if (v7)
    WTF::fastFree(v7, v16);
  v45[0] = (uint64_t (*)(uint64_t *, _QWORD *))std::max[abi:sn180100]<double>;
  WebCore::operationOnValuesOfSameUnit<double const& (*)(double const&,double const&)>((uint64_t)&v49, v45, &v47);
  result = (unsigned __int8 *)v49;
  if (v49)
  {
    v40 = *((_DWORD *)v49 + 2);
    *((_DWORD *)v49 + 2) = v40 + 1;
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 16) = 0;
    if (v40)
    {
      *((_DWORD *)result + 2) = v40;
      if (!(_DWORD)a1)
        goto LABEL_68;
    }
    else
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 16))(result);
      if (!(_DWORD)a1)
        goto LABEL_68;
    }
    goto LABEL_61;
  }
  WebCore::CSSMathMax::create((uint64_t)&v47, (uint64_t)v45);
  LOBYTE(v49) = 0;
  v51 = -1;
  v41 = v46;
  if (v46 == -1)
    goto LABEL_73;
  ((void (*)(char *, unsigned __int8 ****, uint64_t (**)(uint64_t *, _QWORD *)))off_1E339EFF0[v46])(&v52, &v49, v45);
  v51 = v41;
  if ((_DWORD)v41)
  {
    if ((_DWORD)v41 == 1)
    {
      v42 = v50;
      v50 = 0;
      *(_BYTE *)a3 = (_BYTE)v49;
      *(_QWORD *)(a3 + 8) = v42;
      goto LABEL_58;
    }
LABEL_73:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_76;
  }
  v43 = v49;
  v49 = 0;
  *(_QWORD *)a3 = v43;
LABEL_58:
  *(_DWORD *)(a3 + 16) = v41;
  result = (unsigned __int8 *)((uint64_t (*)(char *, unsigned __int8 ****))off_1E339E8F0[v41])(&v52, &v49);
  if (v46 != -1)
    result = (unsigned __int8 *)((uint64_t (*)(unsigned __int8 ****, _QWORD))off_1E339E8F0[v46])(&v49, v45);
  LODWORD(a1) = HIDWORD(v48);
  v21 = v47;
  if (HIDWORD(v48))
  {
LABEL_61:
    v44 = 8 * a1;
    do
    {
      result = *v21;
      *v21 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 2);
      }
      ++v21;
      v44 -= 8;
    }
    while (v44);
    v21 = v47;
  }
LABEL_68:
  if (v21)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    return (unsigned __int8 *)WTF::fastFree((WTF *)v21, v38);
  }
  return result;
}

double *std::max[abi:sn180100]<double>(double *result, double *a2)
{
  if (*result < *a2)
    return a2;
  return result;
}

uint64_t WebCore::CSSNumericValue::equals(uint64_t result, unsigned int **a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  WTF *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  WTF *v20;
  _DWORD *v21;
  uint64_t v22;
  char v23;
  char *v24;

  if (!*a2)
    return 1;
  v2 = **a2;
  if (!(_DWORD)v2)
    return 1;
  if (!(v2 >> 29))
  {
    v4 = result;
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
    v7 = *a2;
    if (v7 && (v10 = *v7, v9 = (uint64_t)(v7 + 2), (v8 = v10) != 0))
    {
      v11 = 0;
      v12 = 16 * v8;
      do
      {
        v13 = *(unsigned int *)(v9 + 8);
        if ((_DWORD)v13 == -1)
        {
          result = std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_28;
        }
        v24 = &v23;
        __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15CSSNumericValue16rectifyNumberishEONS_7variantIJdNS6_6RefPtrIS9_NS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEEEEE3__0JZNS9_16rectifyNumberishESI_E3__1EEEEEJRNS0_6__implIJdSG_EEEEEEDcOT_DpOT0____fmatrix[v13](&v22, (__int128 *)&v24, v9);
        *(_QWORD *)((char *)v6 + v11) = v22;
        v9 += 16;
        v11 += 8;
        v12 -= 16;
      }
      while (v12);
      if (!v11)
        goto LABEL_24;
      v14 = v11 - 8;
      v15 = v6;
      do
      {
        v16 = *(_QWORD *)v15;
        v15 = (WTF *)((char *)v15 + 8);
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, v16);
        if ((_DWORD)v17)
          v18 = v14 == 0;
        else
          v18 = 1;
        v14 -= 8;
      }
      while (!v18);
      v19 = v17;
      v20 = v6;
      do
      {
        v21 = *(_DWORD **)v20;
        *(_QWORD *)v20 = 0;
        if (v21)
        {
          if (v21[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
          else
            --v21[2];
        }
        v20 = (WTF *)((char *)v20 + 8);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
LABEL_24:
      v19 = 1;
    }
    WTF::fastFree(v6, v5);
    return v19;
  }
LABEL_28:
  __break(0xC471u);
  return result;
}

WTF *WebCore::CSSNumericValue::to@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  WTF *result;
  void *v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  char v28;
  _BYTE v29[36];
  __int128 v30;
  __int128 v31;
  uint64_t v32[4];
  char v33;

  LOBYTE(v6) = 1;
  result = (WTF *)WebCore::CSSNumericType::create(a2, 1, (uint64_t)v29);
  if (!v29[32])
  {
    *(_BYTE *)a3 = 9;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  result = (WTF *)(*(_QWORD *(**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v25, a1);
  if (v28)
    v9 = v27 == 1;
  else
    v9 = 0;
  if (!v9)
    goto LABEL_30;
  v23 = *(_QWORD *)v25;
  result = (WTF *)WTF::HashTable<WebCore::CSSUnitType,WTF::KeyValuePair<WebCore::CSSUnitType,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSUnitType,int>>,WTF::IntHash<WebCore::CSSUnitType>,WTF::HashMap<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>>::HashTable((uint64_t *)&v24, (unsigned __int8 **)v25 + 1);
  v10 = v24;
  if (!v24)
    goto LABEL_20;
  v11 = *((_DWORD *)v24 - 3);
  if (v11 > 1)
    goto LABEL_24;
  if (!v11)
  {
LABEL_20:
    v15 = bmalloc::api::isoAllocate();
    result = (WTF *)WebCore::CSSNumericType::create(1u, 1, (uint64_t)v32);
    *(_QWORD *)&v18 = 0x8000000080000000;
    *((_QWORD *)&v18 + 1) = 0x8000000080000000;
    v30 = v18;
    v31 = xmmword_1968BD2E0;
    v17 = (uint64_t *)&v30;
    if (v33)
      v17 = v32;
    *(_DWORD *)(v15 + 8) = 1;
    goto LABEL_23;
  }
  v12 = *((unsigned int *)v24 - 1);
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = &v24[8 * v12];
    while (*v10 >= 0xFEu)
    {
      v10 += 8;
      v13 -= 8;
      if (!v13)
      {
        v10 = v14;
        break;
      }
    }
  }
  if (*((_DWORD *)v10 + 1) == 1)
  {
    v6 = *v10;
    v15 = bmalloc::api::isoAllocate();
    result = (WTF *)WebCore::CSSNumericType::create(v6, 1, (uint64_t)v32);
    *(_QWORD *)&v16 = 0x8000000080000000;
    *((_QWORD *)&v16 + 1) = 0x8000000080000000;
    v30 = v16;
    v31 = xmmword_1968BD2E0;
    v17 = (uint64_t *)&v30;
    if (v33)
      v17 = v32;
    *(_DWORD *)(v15 + 8) = 1;
LABEL_23:
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    v19 = *((_OWORD *)v17 + 1);
    *(_OWORD *)(v15 + 40) = *(_OWORD *)v17;
    *(_QWORD *)(v15 + 32) = 0;
    *(_OWORD *)(v15 + 56) = v19;
    *(_QWORD *)v15 = &off_1E339F080;
    *(_QWORD *)(v15 + 72) = v23;
    *(_BYTE *)(v15 + 80) = v6;
    goto LABEL_25;
  }
LABEL_24:
  v15 = 0;
LABEL_25:
  if (v24)
    result = (WTF *)WTF::fastFree((WTF *)(v24 - 16), v8);
  if (!v15)
  {
LABEL_30:
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_34;
  }
  result = (WTF *)WebCore::CSSUnitValue::convertTo(v15, a2, v32);
  if (v32[0])
  {
    v20 = 0;
    *(_QWORD *)a3 = v32[0];
  }
  else
  {
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
    v20 = 1;
  }
  *(_DWORD *)(a3 + 16) = v20;
  if (*(_DWORD *)(v15 + 8) == 1)
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  else
    --*(_DWORD *)(v15 + 8);
LABEL_34:
  if (v28)
  {
    result = v25;
    if (v27)
    {
      v21 = 16 * v27;
      v22 = (_QWORD *)((char *)v25 + 8);
      do
      {
        if (*v22)
          WTF::fastFree((WTF *)(*v22 - 16), v8);
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
      result = v25;
    }
    if (result)
    {
      v25 = 0;
      v26 = 0;
      return (WTF *)WTF::fastFree(result, v8);
    }
  }
  return result;
}

WTF *WebCore::CSSNumericValue::toSum@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  int v6;
  WTF *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  WTF *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  void *v43;
  WTF *result;
  void *v45;
  unint64_t v46;
  char *v47;
  WTF *v48;
  unsigned int v49;
  uint64_t v50;
  __int128 v51;
  uint64_t *v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  _DWORD *v57;
  _DWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD **v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  WTF *v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  WTF *v82;
  int v83;
  unsigned int v84;
  _DWORD **v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned __int8 *v89;
  WTF *v90;
  int v91;
  unsigned int v92;
  char v93;
  WTF *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98[4];
  char v99;

  v94 = 0;
  v95 = 0;
  v5 = *a2;
  if (*a2)
  {
    v6 = *v5;
    if (*v5)
    {
      v8 = (WTF *)WTF::fastMalloc((WTF *)*v5);
      LODWORD(v95) = v6;
      v94 = v8;
      v9 = *a2;
      if (*a2)
      {
        v12 = *v9;
        v11 = v9 + 2;
        v10 = v12;
        if (v12)
        {
          v13 = v8;
          v14 = 0;
          v15 = 8 * v10;
          while (1)
          {
            LOBYTE(v98[0]) = 0;
            if ((MEMORY[0x19AEA53F4](*v11, "number", 6) & 1) != 0)
            {
              LOBYTE(v16) = 1;
            }
            else
            {
              if ((MEMORY[0x19AEA53F4](*v11, "percent", 7) & 1) == 0)
              {
                v17 = *v11;
                if (*v11)
                {
                  v18 = *(unsigned __int8 **)(v17 + 8);
                  v19 = *(unsigned int *)(v17 + 4) | ((unint64_t)((*(_DWORD *)(v17 + 16) >> 2) & 1) << 32);
                }
                else
                {
                  v18 = 0;
                  v19 = 0x100000000;
                }
                v16 = WebCore::CSSParserToken::stringToUnitType(v18, v19);
                LOBYTE(v98[0]) = v16;
                if (!v16)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  *(_BYTE *)a3 = 9;
                  *(_DWORD *)(a3 + 16) = 1;
                  goto LABEL_162;
                }
                goto LABEL_14;
              }
              LOBYTE(v16) = 3;
            }
            LOBYTE(v98[0]) = v16;
LABEL_14:
            if (v14 == (_DWORD)v95)
            {
              v20 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v94, (WTF *)(v14 + 1), (unint64_t)v98);
              v14 = HIDWORD(v95);
              v13 = v94;
              *((_BYTE *)v94 + HIDWORD(v95)) = *v20;
            }
            else
            {
              *((_BYTE *)v13 + v14) = v16;
            }
            HIDWORD(v95) = ++v14;
            ++v11;
            v15 -= 8;
            if (!v15)
              goto LABEL_21;
          }
        }
      }
    }
  }
  v14 = 0;
LABEL_21:
  (*(void (**)(WTF **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v90, a1);
  if (!v93)
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 33;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_152;
  }
  v21 = v92;
  if (!v92)
  {
    LODWORD(v24) = 0;
    LODWORD(v21) = 0;
    v23 = 0;
    if (!v14)
      goto LABEL_117;
    goto LABEL_66;
  }
  if ((unint64_t)v92 >> 29)
  {
    __break(0xC471u);
    goto LABEL_169;
  }
  v22 = WTF::fastMalloc((WTF *)(8 * v92));
  if (!v93)
  {
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  v23 = (char *)v22;
  if (!v92)
  {
    LODWORD(v24) = 0;
    if (!v14)
      goto LABEL_117;
    goto LABEL_66;
  }
  v78 = a3;
  v24 = 0;
  v25 = v90;
  v26 = (WTF *)((char *)v90 + 16 * v92);
  do
  {
    v88 = *(_QWORD *)v25;
    WTF::HashTable<WebCore::CSSUnitType,WTF::KeyValuePair<WebCore::CSSUnitType,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSUnitType,int>>,WTF::IntHash<WebCore::CSSUnitType>,WTF::HashMap<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>>::HashTable((uint64_t *)&v89, (unsigned __int8 **)v25 + 1);
    v28 = v88;
    v29 = v89;
    if (!v89)
    {
LABEL_39:
      v35 = bmalloc::api::isoAllocate();
      LOBYTE(v34) = 1;
      WebCore::CSSNumericType::create(1u, 1, (uint64_t)v98);
      *(_QWORD *)&v38 = 0x8000000080000000;
      *((_QWORD *)&v38 + 1) = 0x8000000080000000;
      v96 = v38;
      v97 = xmmword_1968BD2E0;
      v37 = v98;
      if (!v99)
        v37 = (uint64_t *)&v96;
      *(_DWORD *)(v35 + 8) = 1;
      goto LABEL_42;
    }
    v30 = *((_DWORD *)v89 - 3);
    if (v30 <= 1)
    {
      if (!v30)
        goto LABEL_39;
      v31 = *((unsigned int *)v89 - 1);
      if ((_DWORD)v31)
      {
        v32 = 8 * v31;
        v33 = &v89[8 * v31];
        while (*v29 >= 0xFEu)
        {
          v29 += 8;
          v32 -= 8;
          if (!v32)
          {
            v29 = v33;
            break;
          }
        }
      }
      if (*((_DWORD *)v29 + 1) == 1)
      {
        v34 = *v29;
        v35 = bmalloc::api::isoAllocate();
        WebCore::CSSNumericType::create(v34, 1, (uint64_t)v98);
        *(_QWORD *)&v36 = 0x8000000080000000;
        *((_QWORD *)&v36 + 1) = 0x8000000080000000;
        v96 = v36;
        v97 = xmmword_1968BD2E0;
        v37 = v98;
        if (!v99)
          v37 = (uint64_t *)&v96;
        *(_DWORD *)(v35 + 8) = 1;
LABEL_42:
        *(_QWORD *)(v35 + 16) = 0;
        *(_QWORD *)(v35 + 24) = 0;
        *(_QWORD *)(v35 + 32) = 0;
        v39 = *((_OWORD *)v37 + 1);
        *(_OWORD *)(v35 + 40) = *(_OWORD *)v37;
        *(_OWORD *)(v35 + 56) = v39;
        *(_QWORD *)v35 = &off_1E339F080;
        *(_QWORD *)(v35 + 72) = v28;
        *(_BYTE *)(v35 + 80) = v34;
        goto LABEL_44;
      }
    }
    v35 = 0;
LABEL_44:
    if (v89)
      WTF::fastFree((WTF *)(v89 - 16), v27);
    if (!v35)
    {
      result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)v78 = 33;
      *(_DWORD *)(v78 + 16) = 1;
      goto LABEL_131;
    }
    if (v24 == v21)
    {
      v40 = v24 + (v24 >> 2);
      if (v40 >= 0x10)
        v41 = v40 + 1;
      else
        v41 = 16;
      if (v41 <= v24 + 1)
        v21 = v24 + 1;
      else
        v21 = v41;
      if (v21 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FED04);
      }
      v42 = (char *)WTF::fastMalloc((WTF *)(8 * v21));
      v21 = v21;
      memcpy(v42, v23, 8 * v24);
      if (v23)
      {
        if (v42 == v23)
        {
          v21 = 0;
          v42 = 0;
        }
        WTF::fastFree((WTF *)v23, v43);
      }
      v23 = v42;
      *(_QWORD *)&v42[8 * v24++] = v35;
    }
    else
    {
      *(_QWORD *)&v23[8 * v24++] = v35;
    }
    v25 = (WTF *)((char *)v25 + 16);
  }
  while (v25 != v26);
  v14 = HIDWORD(v95);
  a3 = v78;
  if (!HIDWORD(v95))
  {
LABEL_117:
    v67 = 126 - 2 * __clz(v24);
    if ((_DWORD)v24)
      v68 = v67;
    else
      v68 = 0;
    std::__introsort<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *,false>((uint64_t)v23, &v23[8 * v24], v68, 1);
    v85 = (_DWORD **)v23;
    v86 = v21;
    v87 = v24;
    WebCore::CSSMathSum::create((uint64_t)&v85, a3);
    if (v87)
    {
      v69 = v85;
      v70 = 8 * v87;
      do
      {
        v71 = *v69;
        *v69 = 0;
        if (v71)
        {
          if (v71[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 16))(v71);
          else
            --v71[2];
        }
        ++v69;
        v70 -= 8;
      }
      while (v70);
    }
    result = (WTF *)v85;
    if (v85)
    {
      v85 = 0;
      v86 = 0;
      goto LABEL_151;
    }
    goto LABEL_152;
  }
LABEL_66:
  v79 = a3;
  v46 = 0;
  v81 = 0;
  v47 = 0;
  v48 = v94;
  v80 = (WTF *)((char *)v94 + v14);
  while (2)
  {
    v49 = *(unsigned __int8 *)v48;
    v50 = bmalloc::api::isoAllocate();
    WebCore::CSSNumericType::create(v49, 1, (uint64_t)v98);
    *(_QWORD *)&v51 = 0x8000000080000000;
    *((_QWORD *)&v51 + 1) = 0x8000000080000000;
    v96 = v51;
    v97 = xmmword_1968BD2E0;
    v52 = v98;
    if (!v99)
      v52 = (uint64_t *)&v96;
    *(_DWORD *)(v50 + 8) = 1;
    *(_QWORD *)(v50 + 16) = 0;
    *(_QWORD *)(v50 + 24) = 0;
    v53 = *((_OWORD *)v52 + 1);
    *(_OWORD *)(v50 + 40) = *(_OWORD *)v52;
    *(_QWORD *)(v50 + 32) = 0;
    *(_OWORD *)(v50 + 56) = v53;
    *(_QWORD *)v50 = &off_1E339F080;
    *(_QWORD *)(v50 + 72) = 0;
    *(_BYTE *)(v50 + 80) = v49;
    if ((_DWORD)v24)
    {
      v54 = 0;
      v55 = v24;
      while (1)
      {
        v56 = &v23[8 * v54];
        v57 = *(_DWORD **)v56;
        v57[2] = *(_DWORD *)(*(_QWORD *)v56 + 8) + 1;
        if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v57 + 24))(v57) != 10)
          break;
        WebCore::CSSUnitValue::convertTo((uint64_t)v57, *(unsigned __int8 *)v48, v98);
        if (v98[0])
        {
          *(double *)(v50 + 72) = *(double *)(v50 + 72) + *(double *)(v98[0] + 72);
          v58 = *(_DWORD **)v56;
          *(_QWORD *)v56 = 0;
          if (v58)
          {
            if (v58[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 16))(v58);
            else
              --v58[2];
          }
          memmove(&v23[8 * v54], &v23[8 * v54 + 8], 8 * v55 - (8 * v54 + 8));
          LODWORD(v24) = v24 - 1;
          if (v98[0])
          {
            if (*(_DWORD *)(v98[0] + 8) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v98[0] + 16))(v98[0]);
            else
              --*(_DWORD *)(v98[0] + 8);
          }
        }
        else
        {
          ++v54;
        }
        if (v57[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 16))(v57);
        else
          --v57[2];
        v55 = v24;
        if (v54 >= v24)
          goto LABEL_87;
      }
      __break(0xC471u);
LABEL_170:
      JUMPOUT(0x1958FECCCLL);
    }
LABEL_87:
    if (v46 == v81)
    {
      v59 = v46 + (v46 >> 2);
      if (v59 >= 0x10)
        v60 = v59 + 1;
      else
        v60 = 16;
      if (v60 <= v46 + 1)
        v61 = v46 + 1;
      else
        v61 = v60;
      if (v61 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1958FECFCLL);
      }
      v62 = (char *)WTF::fastMalloc((WTF *)(8 * v61));
      v63 = v61;
      memcpy(v62, v47, 8 * v46);
      if (v47)
      {
        if (v62 == v47)
          v65 = 0;
        else
          v65 = v62;
        if (v62 == v47)
          v63 = 0;
        v81 = v63;
        WTF::fastFree((WTF *)v47, v64);
        v47 = v65;
      }
      else
      {
        v81 = v61;
        v47 = v62;
      }
      *(_QWORD *)&v47[8 * v46++] = v50;
    }
    else
    {
      *(_QWORD *)&v47[8 * v46++] = v50;
    }
    v48 = (WTF *)((char *)v48 + 1);
    if (v48 != v80)
      continue;
    break;
  }
  if ((_DWORD)v24)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66 = 0;
    *(_BYTE *)v79 = 33;
    *(_DWORD *)(v79 + 16) = 1;
    do
    {
      result = *(WTF **)&v47[v66];
      *(_QWORD *)&v47[v66] = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v66 += 8;
    }
    while (8 * v46 != v66);
    if (v47)
      result = (WTF *)WTF::fastFree((WTF *)v47, v45);
LABEL_131:
    if ((_DWORD)v24)
    {
      v72 = 0;
      do
      {
        result = *(WTF **)&v23[v72];
        *(_QWORD *)&v23[v72] = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
            result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 16))(result);
          else
            --*((_DWORD *)result + 2);
        }
        v72 += 8;
      }
      while (8 * v24 != v72);
    }
  }
  else
  {
    v82 = (WTF *)v47;
    v83 = v81;
    v84 = v46;
    WebCore::CSSMathSum::create((uint64_t)&v82, v79);
    if (v84)
    {
      v73 = v82;
      v74 = 8 * v84;
      do
      {
        v75 = *(_DWORD **)v73;
        *(_QWORD *)v73 = 0;
        if (v75)
        {
          if (v75[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 16))(v75);
          else
            --v75[2];
        }
        v73 = (WTF *)((char *)v73 + 8);
        v74 -= 8;
      }
      while (v74);
    }
    result = v82;
    if (v82)
    {
      v82 = 0;
      v83 = 0;
      result = (WTF *)WTF::fastFree(result, v45);
    }
  }
  if (v23)
  {
    result = (WTF *)v23;
LABEL_151:
    result = (WTF *)WTF::fastFree(result, v45);
  }
LABEL_152:
  if (v93)
  {
    result = v90;
    if (v92)
    {
      v76 = 16 * v92;
      v77 = (_QWORD *)((char *)v90 + 8);
      do
      {
        if (*v77)
          WTF::fastFree((WTF *)(*v77 - 16), v45);
        v77 += 2;
        v76 -= 16;
      }
      while (v76);
      result = v90;
    }
    if (result)
    {
      v90 = 0;
      v91 = 0;
      result = (WTF *)WTF::fastFree(result, v45);
    }
  }
  v13 = v94;
  if (v94)
  {
LABEL_162:
    v94 = 0;
    LODWORD(v95) = 0;
    return (WTF *)WTF::fastFree(v13, v45);
  }
  return result;
}

void WebCore::CSSNumericValue::parse(unsigned int **a1@<X0>, uint64_t a2@<X8>)
{
  WebCore::CSSParserToken *v3;
  WebCore::CSSParserToken *v4;
  uint64_t v5;
  __int128 *v6;
  _DWORD *v7;
  const WebCore::CSSParserToken *v8;
  int v9;
  WebCore::CSSParserToken *v10;
  __int128 *v11;
  WebCore::CSSParserToken *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  const WebCore::CSSParserToken *v17;
  __int128 *v18;
  _DWORD *v19;
  void *v20;
  __int128 *SubRange;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  unsigned __int8 *v32;
  __int128 v33;
  unsigned int v34;
  WebCore::CSSParserTokenRange *v35;
  int v36;
  __int128 *v37;
  __int128 *v38;
  void *v39;
  _DWORD *v40;
  WebCore::CSSParserToken *v41;
  uint64_t v42;
  const WebCore::CSSParserToken *v43;
  const WebCore::CSSParserToken *v44;
  const WebCore::CSSParserToken *v45;
  WebCore::CSSParserToken *v46;
  WebCore::CSSParserToken *v47;
  WebCore::CSSParserToken *v48;
  __int128 *v49;
  __int128 *v50;
  WebCore::CSSParserToken *v51;
  __int128 *v52;
  WebCore::CSSParserToken *v53;
  WebCore::CSSParserToken *v54;
  WebCore::CSSParserToken *v55;
  __int128 *v56;
  __int128 *v57;
  WebCore::CSSParserToken *v58;
  WebCore::CSSParserToken *v59;
  __int128 *v60;
  __int128 *v61[2];
  _QWORD v62[2];
  _BYTE v63[48];
  WebCore::CSSParserToken *v64;
  unsigned int v65;
  _OWORD v66[2];
  unsigned __int8 v67[8];
  uint64_t v68;
  char v69;

  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v63, a1, 0, 0);
  v3 = v64;
  v4 = (WebCore::CSSParserToken *)((char *)v64 + 24 * v65);
  v5 = 24 * v65;
  v62[0] = v64;
  v62[1] = v4;
  v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    v7 = v3;
    if (v3 >= v4)
    {
      v7 = v6;
      {
        v46 = v3;
        v53 = v4;
        v6 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v6, 30, 0);
        v3 = v46;
        v4 = v53;
        v7 = v6;
      }
    }
    if ((*v7 & 0x3F) != 0x10)
      break;
    v3 = (WebCore::CSSParserToken *)((char *)v3 + 24);
    v62[0] = v3;
    v5 -= 24;
  }
  if (!v5)
    goto LABEL_34;
  v8 = v3;
  if (v3 >= v4)
  {
    {
      v8 = (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v41 = v3;
      v58 = v4;
      v42 = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v4 = v58;
      v3 = v41;
      v8 = (const WebCore::CSSParserToken *)v42;
    }
  }
  v9 = 0;
  v10 = v3;
  v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if (v10 == v4)
    {
      v47 = v3;
      v54 = v4;
      v43 = v8;
      {
        v11 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v11, 30, 0);
      }
      v3 = v47;
      v4 = v54;
      v12 = v54;
      v10 = (WebCore::CSSParserToken *)v11;
      v8 = v43;
    }
    else
    {
      v3 = (WebCore::CSSParserToken *)((char *)v10 + 24);
      v62[0] = (char *)v10 + 24;
      v12 = (WebCore::CSSParserToken *)((char *)v10 + 24);
    }
    v13 = *(_DWORD *)v10 >> 6;
    if (v13 == 2)
      v14 = -1;
    else
      v14 = 0;
    if (v13 == 1)
      v15 = 1;
    else
      v15 = v14;
    v9 += v15;
    if (v9)
      v16 = v12 >= v4;
    else
      v16 = 1;
    v10 = v12;
  }
  while (!v16);
  v17 = v3;
  if (v3 >= v4)
  {
    v17 = (const WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v45 = v8;
      v51 = v3;
      v59 = v4;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      v3 = v51;
      v4 = v59;
      v8 = v45;
    }
  }
  v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    v19 = v3;
    if (v3 >= v4)
    {
      v19 = v18;
      {
        v44 = v8;
        v48 = v3;
        v55 = v4;
        v18 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v18, 30, 0);
        v3 = v48;
        v4 = v55;
        v8 = v44;
        v19 = v18;
      }
    }
    if ((*v19 & 0x3F) != 0x10)
      break;
    v3 = (WebCore::CSSParserToken *)((char *)v3 + 24);
    v62[0] = v3;
  }
  if (v3 != v4)
    goto LABEL_34;
  SubRange = (__int128 *)WebCore::CSSParserTokenRange::makeSubRange((WebCore::CSSParserTokenRange *)v62, v8, v17);
  v61[0] = SubRange;
  v61[1] = v22;
  v23 = SubRange;
  if (v22 <= SubRange)
  {
    v23 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v52 = SubRange;
      v60 = v22;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      SubRange = v52;
      v22 = v60;
    }
  }
  if ((*(_DWORD *)v23 & 0x3Fu) - 7 >= 3)
  {
    if ((*(_DWORD *)v23 & 0x3F) == 1)
    {
      if (v22 <= SubRange)
      {
        {
          SubRange = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          SubRange = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      v34 = WebCore::CSSParserToken::functionId((int *)SubRange);
      if (v34 - 864 <= 4 && v34 != 865)
      {
        v36 = v34;
        v67[0] = 1;
        v68 = 0;
        v37 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction(v61, v35);
        WebCore::CSSCalcExpressionNodeParser::parseCalc(v67, v37, v38, v36, 0, (uint64_t *)v66);
        if (*(_QWORD *)&v66[0])
        {
          WebCore::CSSNumericValue::reifyMathExpression(*(uint64_t *)&v66[0], a2);
          v40 = *(_DWORD **)&v66[0];
          *(_QWORD *)&v66[0] = 0;
          if (v40)
          {
            if (v40[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
            else
              --v40[2];
          }
          if (v68)
            WTF::fastFree((WTF *)(v68 - 16), v20);
          goto LABEL_35;
        }
        if (v68)
          WTF::fastFree((WTF *)(v68 - 16), v39);
      }
    }
LABEL_34:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 9;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_35;
  }
  if (SubRange == v22)
  {
    v50 = SubRange;
    v57 = v22;
    v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
    v25 = v50;
    v22 = v57;
  }
  else
  {
    v24 = SubRange;
    v25 = (__int128 *)((char *)SubRange + 24);
    v61[0] = v25;
  }
  while (1)
  {
    v26 = v25;
    if (v25 >= v22)
    {
      v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v49 = v25;
        v56 = v22;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v25 = v49;
        v22 = v56;
        v26 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v26 & 0x3F) != 0x10)
      break;
    v25 = (__int128 *)((char *)v25 + 24);
    v61[0] = v25;
  }
  v27 = *(_DWORD *)v24;
  if ((*(_DWORD *)v24 & 0x3F) == 9)
  {
    WebCore::CSSNumericType::create((v27 >> 11) & 0x7F, 1, (uint64_t)v67);
    if (!v69)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a2 = 9;
      *(_DWORD *)(a2 + 16) = 1;
      goto LABEL_35;
    }
    v27 = *(_DWORD *)v24;
  }
  v28 = *((_QWORD *)v24 + 2);
  v29 = bmalloc::api::isoAllocate();
  v30 = (v27 >> 11) & 0x7F;
  WebCore::CSSNumericType::create(v30, 1, (uint64_t)v67);
  *(_QWORD *)&v31 = 0x8000000080000000;
  *((_QWORD *)&v31 + 1) = 0x8000000080000000;
  v66[0] = v31;
  v66[1] = xmmword_1968BD2E0;
  v32 = (unsigned __int8 *)v66;
  if (v69)
    v32 = v67;
  *(_DWORD *)(v29 + 8) = 1;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)v32;
  *(_QWORD *)(v29 + 32) = 0;
  *(_OWORD *)(v29 + 56) = v33;
  *(_QWORD *)v29 = &off_1E339F080;
  *(_QWORD *)(v29 + 72) = v28;
  *(_BYTE *)(v29 + 80) = v30;
  *(_QWORD *)a2 = v29;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_35:
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v63, (WTF::StringImpl *)v20);
}

void WebCore::CSSOMVariableReferenceValue::serialize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WebCore::CSSKeywordValue *v21;
  WTF::StringImpl *v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  char v26;
  const char **v27;

  v23 = "var(";
  LODWORD(v24) = 4;
  v27 = *(const char ***)(a1 + 8);
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)a2, (uint64_t)&v23, (uint64_t *)&v27);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_12;
  LOBYTE(v23) = 44;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6
    && ((v7 = *(unsigned int *)(a2 + 16), v7 < *(_DWORD *)(v6 + 4))
      ? (v8 = *(_QWORD *)a2 == 0)
      : (v8 = 0),
        v8))
  {
    v19 = *(_DWORD *)(v6 + 16);
    v20 = *(_QWORD *)(v6 + 8);
    *(_DWORD *)(a2 + 16) = v7 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v7) = 44;
    else
      *(_WORD *)(v20 + 2 * v7) = 44;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v9 = *(_QWORD *)(a1 + 16);
  v26 = a3;
  v10 = *(unsigned int *)(v9 + 52);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(v9 + 40);
    v12 = 16 * v10;
    while (1)
    {
      v23 = (const char *)a2;
      v24 = a2;
      v25 = &v26;
      v13 = *(unsigned int *)(v11 + 8);
      if ((_DWORD)v13 == -1)
        break;
      v27 = &v23;
      ((void (*)(const char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore16CSSUnparsedValue9serializeERNS6_13StringBuilderENS6_9OptionSetINS8_22SerializationArgumentsEEEE3__0JZNKS9_9serializeESB_SE_E3__1EEEEEJRKNS0_6__implIJNS6_6StringENS6_6RefPtrINS8_27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISM_EENS6_21DefaultRefDerefTraitsISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v27, v11);
      v11 += 16;
      v12 -= 16;
      if (!v12)
        goto LABEL_12;
    }
    v21 = (WebCore::CSSKeywordValue *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::CSSKeywordValue::~CSSKeywordValue(v21, v22);
  }
  else
  {
LABEL_12:
    LOBYTE(v23) = 41;
    v14 = *(_QWORD *)(a2 + 8);
    if (v14
      && ((v15 = *(unsigned int *)(a2 + 16), v15 < *(_DWORD *)(v14 + 4))
        ? (v16 = *(_QWORD *)a2 == 0)
        : (v16 = 0),
          v16))
    {
      v17 = *(_DWORD *)(v14 + 16);
      v18 = *(_QWORD *)(v14 + 8);
      *(_DWORD *)(a2 + 16) = v15 + 1;
      if ((v17 & 4) != 0)
        *(_BYTE *)(v18 + v15) = 41;
      else
        *(_WORD *)(v18 + 2 * v15) = 41;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
}

void WebCore::CSSKeywordValue::~CSSKeywordValue(WebCore::CSSKeywordValue *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF::StringImpl *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  *(_QWORD *)this = &off_1E339F420;
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSKeywordValue::getType(WebCore::CSSKeywordValue *this)
{
  return 12;
}

uint64_t WebCore::CSSStyleValue::toCSSValueWithProperty(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::serialize(WTF::StringBuilder &,std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&)::$_0,WebCore::MQ::serialize(WTF::StringBuilder &,std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t **a1, uint64_t a2, const Condition *a3)
{
  uint64_t *v4;
  WTF::StringImpl **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = *a1;
  if (*(_BYTE *)(a2 + 26))
  {
    v5 = (WTF::StringImpl **)*v4;
    v6 = WebCore::nameString(*(unsigned __int16 *)(a2 + 24));
    WTF::StringBuilder::append(v5, (WTF::StringImpl **)v6);
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 8);
  if (v8 && (v9 = *(unsigned int *)(v7 + 16), v9 < *(_DWORD *)(v8 + 4)) && !*(_QWORD *)v7)
  {
    v13 = *(_DWORD *)(v8 + 16);
    v14 = *(_QWORD *)(v8 + 8);
    *(_DWORD *)(v7 + 16) = v9 + 1;
    if ((v13 & 4) != 0)
      *(_BYTE *)(v14 + v9) = 40;
    else
      *(_WORD *)(v14 + 2 * v9) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  WebCore::MQ::serialize(*v4, (WTF::StringBuilder *)a2, a3);
  result = *v4;
  v11 = *(_QWORD *)(*v4 + 8);
  if (!v11)
    return WTF::StringBuilder::append();
  v12 = *(unsigned int *)(result + 16);
  if (v12 >= *(_DWORD *)(v11 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v15 = *(_DWORD *)(v11 + 16);
  v16 = *(_QWORD *)(v11 + 8);
  *(_DWORD *)(result + 16) = v12 + 1;
  if ((v15 & 4) != 0)
    *(_BYTE *)(v16 + v12) = 41;
  else
    *(_WORD *)(v16 + 2 * v12) = 41;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::serialize(WTF::StringBuilder &,std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&)::$_0,WebCore::MQ::serialize(WTF::StringBuilder &,std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(WTF::StringImpl ****a1, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl ***v6;
  WTF::StringImpl **v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringBuilder *v18;
  WTF::String *v19;
  __n128 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  BOOL v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  int v27;
  uint64_t v28;
  WTF::StringBuilder *v29;
  WTF::String *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;

  v6 = *a1;
  if (*(_BYTE *)(a2 + 66))
  {
    v7 = *v6;
    v8 = WebCore::nameString(*(unsigned __int16 *)(a2 + 64));
    WTF::StringBuilder::append(v7, (WTF::StringImpl **)v8);
  }
  result = (uint64_t)*v6;
  LOBYTE(v39) = 40;
  v10 = *(_QWORD *)(result + 8);
  if (v10 && (v11 = *(unsigned int *)(result + 16), v11 < *(_DWORD *)(v10 + 4)) && !*(_QWORD *)result)
  {
    v27 = *(_DWORD *)(v10 + 16);
    v28 = *(_QWORD *)(v10 + 8);
    *(_DWORD *)(result + 16) = v11 + 1;
    if ((v27 & 4) != 0)
      *(_BYTE *)(v28 + v11) = 40;
    else
      *(_WORD *)(v28 + 2 * v11) = 40;
  }
  else
  {
    result = WTF::StringBuilder::append();
  }
  v12 = *v6;
  v37 = *v6;
  v13 = *(unsigned __int8 *)(a2 + 8);
  if (v13 != 2)
  {
    if (v13 != 1)
    {
      if (!*(_BYTE *)(a2 + 8))
        WebCore::serializeIdentifier((WTF::String *)a2, (const WTF::String *)v12, 0);
      goto LABEL_58;
    }
    if (*(_BYTE *)(a2 + 56))
    {
      v26 = *(unsigned __int8 *)(a2 + 40);
      if (v26 == 1 || v26 == 4)
        WTF::StringBuilder::append();
      result = (uint64_t)WebCore::serializeIdentifier((WTF::String *)a2, (const WTF::String *)v12, 0);
      if (*(_BYTE *)(a2 + 56))
      {
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v36, *(_QWORD *)(a2 + 48), v29, v30, v31);
        v40 = 2;
        v38 = v36;
        v39 = (WTF::StringImpl *)": ";
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)v12, (uint64_t)&v39, (uint64_t *)&v38);
        v25 = v36;
        v36 = 0;
        if (!v25)
          goto LABEL_58;
        goto LABEL_56;
      }
    }
LABEL_82:
    __break(1u);
    return result;
  }
  if (*(_BYTE *)(a2 + 32))
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v39, *(_QWORD *)(a2 + 24), a3, a4, a5);
    v15 = v39;
    if (*((_DWORD *)v12 + 4))
      v16 = 0;
    else
      v16 = v12[1] == 0;
    if (!v16)
    {
      if (v39 && (*((_BYTE *)v39 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      goto LABEL_25;
    }
    if (v39)
      *(_DWORD *)v39 += 2;
    v17 = *v12;
    *v12 = v15;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v14);
        v15 = v39;
        if (!v39)
          goto LABEL_24;
        goto LABEL_23;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (!v15)
    {
LABEL_24:
      *((_DWORD *)v12 + 4) = (_DWORD)v15;
LABEL_25:
      result = (uint64_t)v39;
      v39 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
        else
          *(_DWORD *)result -= 2;
      }
      if (!*(_BYTE *)(a2 + 32))
        goto LABEL_82;
      WebCore::MQ::serialize(WTF::StringBuilder &,WebCore::MQ::Feature const&)::$_0::operator()((uint64_t *)&v37, *(unsigned __int8 *)(a2 + 16));
      goto LABEL_30;
    }
LABEL_23:
    LODWORD(v15) = *((_DWORD *)v15 + 1);
    goto LABEL_24;
  }
LABEL_30:
  WebCore::serializeIdentifier((WTF::String *)a2, (const WTF::String *)v12, 0);
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_58;
  result = WebCore::MQ::serialize(WTF::StringBuilder &,WebCore::MQ::Feature const&)::$_0::operator()((uint64_t *)&v37, *(unsigned __int8 *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_82;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v39, *(_QWORD *)(a2 + 48), v18, v19, v20);
  v22 = v39;
  if (*((_DWORD *)v12 + 4))
    v23 = 0;
  else
    v23 = v12[1] == 0;
  if (v23)
  {
    if (v39)
      *(_DWORD *)v39 += 2;
    v24 = *v12;
    *v12 = v22;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v21);
        v22 = v39;
        if (!v39)
          goto LABEL_44;
        goto LABEL_43;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (!v22)
    {
LABEL_44:
      *((_DWORD *)v12 + 4) = (_DWORD)v22;
      goto LABEL_45;
    }
LABEL_43:
    LODWORD(v22) = *((_DWORD *)v22 + 1);
    goto LABEL_44;
  }
  if (v39 && (*((_BYTE *)v39 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_45:
  v25 = v39;
  v39 = 0;
  if (!v25)
    goto LABEL_58;
LABEL_56:
  if (*(_DWORD *)v25 == 2)
    WTF::StringImpl::destroy(v25, v21);
  else
    *(_DWORD *)v25 -= 2;
LABEL_58:
  result = (uint64_t)*v6;
  LOBYTE(v39) = 41;
  v32 = *(_QWORD *)(result + 8);
  if (!v32)
    return WTF::StringBuilder::append();
  v33 = *(unsigned int *)(result + 16);
  if (v33 >= *(_DWORD *)(v32 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v34 = *(_DWORD *)(v32 + 16);
  v35 = *(_QWORD *)(v32 + 8);
  *(_DWORD *)(result + 16) = v33 + 1;
  if ((v34 & 4) != 0)
    *(_BYTE *)(v35 + v33) = 41;
  else
    *(_WORD *)(v35 + 2 * v33) = 41;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::serialize(WTF::StringBuilder &,std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&)::$_0,WebCore::MQ::serialize(WTF::StringBuilder &,std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 8);
  if (*(_DWORD *)(v4 + 16) || *(_QWORD *)(v4 + 8))
  {
    if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
  }
  else
  {
    v5 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v5 += 2;
    v6 = *(WTF::StringImpl **)v4;
    *(_QWORD *)v4 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      LODWORD(v7) = *(_DWORD *)(v7 + 4);
    *(_DWORD *)(v4 + 16) = v7;
  }
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v8 + 8);
  if (v9 && (v10 = *(unsigned int *)(v8 + 16), v10 < *(_DWORD *)(v9 + 4)) && !*(_QWORD *)v8)
  {
    v19 = *(_DWORD *)(v9 + 16);
    v20 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)(v8 + 16) = v10 + 1;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v10) = 40;
    else
      *(_WORD *)(v20 + 2 * v10) = 40;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v11 = *(_QWORD *)(v3 + 8);
  if (*(_DWORD *)(v11 + 16) || *(_QWORD *)(v11 + 8))
  {
    v18 = *((_QWORD *)a2 + 1);
    if (v18 && (*(_BYTE *)(v18 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
  }
  else
  {
    v12 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v12)
      *v12 += 2;
    v13 = *(WTF::StringImpl **)v11;
    *(_QWORD *)v11 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, a2);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *((_QWORD *)a2 + 1);
    if (v14)
      LODWORD(v14) = *(_DWORD *)(v14 + 4);
    *(_DWORD *)(v11 + 16) = v14;
  }
  result = *(_QWORD *)(v3 + 8);
  v16 = *(_QWORD *)(result + 8);
  if (!v16)
    return WTF::StringBuilder::append();
  v17 = *(unsigned int *)(result + 16);
  if (v17 >= *(_DWORD *)(v16 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append();
  v21 = *(_DWORD *)(v16 + 16);
  v22 = *(_QWORD *)(v16 + 8);
  *(_DWORD *)(result + 16) = v17 + 1;
  if ((v21 & 4) != 0)
    *(_BYTE *)(v22 + v17) = 41;
  else
    *(_WORD *)(v22 + 2 * v17) = 41;
  return result;
}

uint64_t WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD *v7;

  v6[0] = a1;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = a3;
  v3 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Condition const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Feature const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(v5);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **))off_1E339E828[v3])(&v7);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Condition const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Feature const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  return WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateCondition(**a1, a2, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Condition const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Feature const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t (***v2)(_QWORD);

  v2 = *(uint64_t (****)(_QWORD))(a2 + 72);
  if (v2)
    return (**v2)(v2);
  else
    return 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Condition const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Feature const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::MQ::MediaQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>()
{
  return 2;
}

void WebCore::MQ::Condition::~Condition(WebCore::MQ::Condition *this, void *a2)
{
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *((_DWORD *)this + 5);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  if (v3)
  {
    v5 = 88 * v3;
    do
    {
      v6 = v4[20];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E339E840[v6])(&v7, v4);
      v4[20] = -1;
      v4 += 22;
      v5 -= 88;
    }
    while (v5);
    v4 = (unsigned int *)*((_QWORD *)this + 1);
  }
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
}

WTF *WebCore::reifyMathExpressions(WTF *result, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD v20[2];
  int v21;
  WTF *v22;
  uint64_t v23;

  v2 = result;
  v23 = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v3)
  {
    result = 0;
    v18 = 0;
LABEL_28:
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = v18;
    *((_DWORD *)v2 + 4) = 0;
    return result;
  }
  if (v3 >> 29)
  {
LABEL_33:
    __break(0xC471u);
    return result;
  }
  result = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
  LODWORD(v23) = v3;
  v22 = result;
  v5 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v5)
  {
    v18 = v3;
    goto LABEL_28;
  }
  v6 = *(_QWORD **)a2;
  v7 = 8 * v5;
  while (1)
  {
    result = (WTF *)WebCore::CSSNumericValue::reifyMathExpression(v20, *v6);
    if (v21)
      break;
    v9 = v20[0];
    v19 = (_DWORD *)v20[0];
    v20[0] = 0;
    LODWORD(v10) = HIDWORD(v23);
    if (HIDWORD(v23) == (_DWORD)v23)
    {
      v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v22, HIDWORD(v23) + 1, (unint64_t)&v19);
      v10 = HIDWORD(v23);
      v12 = v22;
      v13 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v12 + v10) = v13;
    }
    else
    {
      v19 = 0;
      *((_QWORD *)v22 + HIDWORD(v23)) = v9;
    }
    HIDWORD(v23) = v10 + 1;
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[2];
    }
    if (v21 != -1)
      ((void (*)(_DWORD **, _QWORD *))off_1E339E8D0[v21])(&v19, v20);
    ++v6;
    v7 -= 8;
    if (!v7)
    {
      result = v22;
      v18 = v23;
      goto LABEL_28;
    }
  }
  if (v21 != 1)
  {
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_33;
  }
  v15 = v20[1];
  *(_BYTE *)v2 = v20[0];
  *((_QWORD *)v2 + 1) = v15;
  *((_DWORD *)v2 + 4) = 1;
  v16 = v22;
  if (HIDWORD(v23))
  {
    v17 = 8 * HIDWORD(v23);
    do
    {
      result = *(WTF **)v16;
      *(_QWORD *)v16 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 16))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v16 = (WTF *)((char *)v16 + 8);
      v17 -= 8;
    }
    while (v17);
    v16 = v22;
  }
  if (v16)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    return (WTF *)WTF::fastFree(v16, v8);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[2];
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore15CSSNumericValueENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore12CSSMathClampENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore12CSSMathClampENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t *WTF::HashTable<WebCore::CSSUnitType,WTF::KeyValuePair<WebCore::CSSUnitType,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSUnitType,int>>,WTF::IntHash<WebCore::CSSUnitType>,WTF::HashMap<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *((unsigned int *)*a2 - 3);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(8 * v11 + 16));
  v13 = (_DWORD *)(v12 + 20);
  v14 = v11;
  do
  {
    *((_BYTE *)v13 - 4) = -1;
    *v13 = 0;
    v13 += 2;
    --v14;
  }
  while (v14);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v15 = *a2;
  if (*a2)
  {
    v16 = *((unsigned int *)v15 - 1);
    v17 = &v15[8 * v16];
    if (*((_DWORD *)v15 - 3))
    {
      v18 = *a2;
      if ((_DWORD)v16)
      {
        v19 = 8 * v16;
        v18 = *a2;
        while (*v18 >= 0xFEu)
        {
          v18 += 8;
          v19 -= 8;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_26;
          }
        }
      }
      goto LABEL_26;
    }
    v18 = &v15[8 * v16];
  }
  else
  {
    v18 = 0;
    v16 = 0;
  }
  v17 = &v15[8 * v16];
LABEL_26:
  if (v15)
    v15 += 8 * *((unsigned int *)v15 - 1);
  if (v15 != v18)
  {
    do
    {
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 8);
      else
        v21 = 0;
      v22 = 0;
      v23 = ~(*v18 << 15) + *v18;
      v24 = (9 * (v23 ^ (v23 >> 10))) ^ ((9 * (v23 ^ (v23 >> 10))) >> 6);
      v25 = (v24 + ~(v24 << 11)) ^ ((v24 + ~(v24 << 11)) >> 16);
      do
      {
        v26 = v25 & v21;
        v25 = ++v22 + v26;
      }
      while (*(unsigned __int8 *)(v20 + 8 * v26) != 255);
      v28 = *(_QWORD *)v18;
      v27 = v18 + 8;
      *(_QWORD *)(v20 + 8 * v26) = v28;
      v29 = v17;
      if (v27 != v17)
      {
        v29 = v27;
        while (*v29 >= 0xFEu)
        {
          v29 += 8;
          if (v29 == v17)
          {
            v29 = v17;
            break;
          }
        }
      }
      v18 = v29;
    }
    while (v29 != v15);
  }
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  const char *v21;
  const char *v22;
  int v23;
  char *v24;
  char *v25;
  _DWORD *v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  char *v34;
  _DWORD *v35;
  _DWORD *v36;
  const char *v37;
  const char *v38;
  int v39;
  _DWORD *v40;
  _DWORD *v41;
  const char *v42;
  const char *v43;
  int v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  BOOL v49;
  BOOL v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  int v54;
  uint64_t v55;
  char *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  char *v61;
  int v62;
  _DWORD *v63;
  const char *v64;
  const char *v65;
  int v66;
  int v67;
  _DWORD *v68;
  const char *v69;
  const char *v70;
  int v71;
  uint64_t *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  char *v78;
  BOOL v80;
  uint64_t v81;
  char *v82;
  char *v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t i;
  char *v87;
  uint64_t v88;
  int v89;
  _DWORD *v90;
  const char *v91;
  const char *v92;
  int v93;
  uint64_t *v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  _DWORD *v101;
  char *v102;
  _DWORD *v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  _DWORD **v118;
  _DWORD *v119;
  int v120;
  _DWORD *v121;
  const char *v122;
  const char *v123;
  int v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  _DWORD *v132;
  uint64_t *v133;
  _DWORD *v134;
  _DWORD *v135;
  uint64_t *v136;
  _DWORD *v137;
  int v138;
  const char *v139;
  const char *v140;
  int v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  _DWORD *v150;
  const char *v151;
  const char *v152;
  int v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v159;
  _DWORD *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  _DWORD *v164;

  v6 = (char *)result;
LABEL_2:
  v159 = a2 - 8;
  v155 = a2 - 24;
  v156 = a2 - 16;
  v7 = v6;
  v162 = a2;
  while (2)
  {
    v6 = v7;
    v8 = a2 - v7;
    v9 = (a2 - v7) >> 3;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*((_DWORD **)a2 - 1), (_DWORD **)v7);
        if ((_DWORD)result)
        {
          v75 = *(_DWORD **)v7;
          *(_QWORD *)v7 = 0;
          v76 = (_DWORD *)*((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = 0;
          v77 = *(_DWORD **)v7;
          *(_QWORD *)v7 = v76;
          if (v77)
          {
            if (v77[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 16))(v77);
            else
              --v77[2];
          }
          result = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v75;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            else
              --*(_DWORD *)(result + 8);
          }
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v7, (_DWORD **)v7 + 1, (_DWORD **)v159);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v7, (_DWORD **)v7 + 1, (_DWORD **)v7 + 2, (_DWORD **)v159);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *,0>((_DWORD **)v7, (_DWORD **)v7 + 1, (_DWORD **)v7 + 2, (_DWORD **)v7 + 3, (_DWORD **)v159);
      default:
        if (v8 > 191)
        {
          if (!a3)
          {
            if (v7 == a2)
              return result;
            v95 = (v9 - 2) >> 1;
            v96 = v95;
            do
            {
              v97 = v96;
              if (v95 >= v96)
              {
                v98 = (2 * v96) | 1;
                v99 = &v6[8 * v98];
                if (2 * v96 + 2 < (uint64_t)v9
                  && WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*(_DWORD **)v99, (_DWORD **)v99 + 1))
                {
                  v99 += 8;
                  v98 = 2 * v97 + 2;
                }
                v100 = &v6[8 * v97];
                if ((WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*(_DWORD **)v99, (_DWORD **)v100) & 1) == 0)
                {
                  v101 = *(_DWORD **)v100;
                  *(_QWORD *)v100 = 0;
                  v164 = v101;
                  do
                  {
                    v102 = v99;
                    v103 = *(_DWORD **)v99;
                    *(_QWORD *)v99 = 0;
                    v104 = *(_DWORD **)v100;
                    *(_QWORD *)v100 = v103;
                    if (v104)
                    {
                      if (v104[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v104 + 16))(v104);
                      else
                        --v104[2];
                    }
                    if (v95 < v98)
                      break;
                    v105 = (2 * v98) | 1;
                    v99 = &v6[8 * v105];
                    v106 = 2 * v98 + 2;
                    if (v106 < (uint64_t)v9
                      && WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*(_DWORD **)v99, (_DWORD **)v99 + 1))
                    {
                      v99 += 8;
                      v105 = v106;
                    }
                    v100 = v102;
                    v98 = v105;
                  }
                  while (!WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*(_DWORD **)v99, &v164));
                  v107 = v164;
                  v164 = 0;
                  v108 = *(_DWORD **)v102;
                  *(_QWORD *)v102 = v107;
                  if (v108)
                  {
                    if (v108[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v108 + 16))(v108);
                    else
                      --v108[2];
                  }
                  if (v164)
                  {
                    if (v164[2] == 1)
                      (*(void (**)(void))(*(_QWORD *)v164 + 16))();
                    else
                      --v164[2];
                  }
                }
              }
              v96 = v97 - 1;
            }
            while (v97);
            v109 = (unint64_t)v8 >> 3;
            v110 = (uint64_t *)v162;
            v161 = v6;
            while (1)
            {
              v111 = 0;
              v160 = *(_DWORD **)v6;
              *(_QWORD *)v6 = 0;
              v112 = (unint64_t)(v109 - 2) >> 1;
              v113 = (uint64_t *)v6;
              v163 = v109;
              do
              {
                v114 = v113;
                v113 += v111 + 1;
                v115 = 2 * v111;
                v111 = (2 * v111) | 1;
                v116 = v115 + 2;
                if (v115 + 2 < v109)
                {
                  v117 = v110;
                  v118 = (_DWORD **)(v113 + 1);
                  v119 = (_DWORD *)*v113;
                  v119[2] = *(_DWORD *)(*v113 + 8) + 1;
                  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v119 + 24))(v119) != 10)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195902240);
                  }
                  v120 = *((unsigned __int8 *)v119 + 80);
                  v121 = *v118;
                  v121[2] = (*v118)[2] + 1;
                  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v121 + 24))(v121) != 10)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195902260);
                  }
                  v122 = WebCore::CSSPrimitiveValue::unitTypeString(v120);
                  v123 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v121 + 80));
                  v124 = strcmp(v122, v123);
                  if (v121[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v121 + 16))(v121);
                  else
                    --v121[2];
                  v109 = v163;
                  if (v119[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v119 + 16))(v119);
                  else
                    --v119[2];
                  if (v124 < 0)
                  {
                    ++v113;
                    v111 = v116;
                  }
                  v110 = v117;
                  v6 = v161;
                }
                v125 = (_DWORD *)*v113;
                *v113 = 0;
                v126 = (_DWORD *)*v114;
                *v114 = (uint64_t)v125;
                if (v126)
                {
                  if (v126[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v126 + 16))(v126);
                  else
                    --v126[2];
                }
              }
              while (v111 <= v112);
              if (v113 == --v110)
              {
                result = *v113;
                *v113 = (uint64_t)v160;
                if (!result)
                  goto LABEL_528;
                goto LABEL_526;
              }
              v127 = (_DWORD *)*v110;
              *v110 = 0;
              v128 = (_DWORD *)*v113;
              *v113 = (uint64_t)v127;
              if (v128)
              {
                if (v128[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v128 + 16))(v128);
                else
                  --v128[2];
              }
              result = *v110;
              *v110 = (uint64_t)v160;
              if (result)
              {
                if (*(_DWORD *)(result + 8) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                else
                  --*(_DWORD *)(result + 8);
              }
              v129 = (char *)(v113 + 1) - v6;
              if (v129 >= 9)
              {
                v130 = (((unint64_t)v129 >> 3) - 2) >> 1;
                v131 = (uint64_t *)&v6[8 * v130];
                result = WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>((_DWORD *)*v131, (_DWORD **)v113);
                if ((_DWORD)result)
                  break;
              }
LABEL_528:
              if (v109-- <= 2)
                return result;
            }
            v132 = (_DWORD *)*v113;
            *v113 = 0;
            while (1)
            {
              v133 = v131;
              v134 = (_DWORD *)*v131;
              *v131 = 0;
              v135 = (_DWORD *)*v113;
              *v113 = (uint64_t)v134;
              if (v135)
              {
                if (v135[2] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v135 + 16))(v135);
                  if (!v130)
                    goto LABEL_523;
                  goto LABEL_512;
                }
                --v135[2];
              }
              if (!v130)
                goto LABEL_523;
LABEL_512:
              v136 = v110;
              v130 = (v130 - 1) >> 1;
              v131 = (uint64_t *)&v6[8 * v130];
              v137 = (_DWORD *)*v131;
              v137[2] = *(_DWORD *)(*v131 + 8) + 1;
              if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v137 + 24))(v137) != 10)
                goto LABEL_574;
              v138 = *((unsigned __int8 *)v137 + 80);
              ++v132[2];
              if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v132 + 24))(v132) != 10)
              {
                __break(0xC471u);
                JUMPOUT(0x1959023D8);
              }
              v139 = WebCore::CSSPrimitiveValue::unitTypeString(v138);
              v140 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v132 + 80));
              v141 = strcmp(v139, v140);
              if (v132[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v132 + 16))(v132);
              else
                --v132[2];
              if (v137[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v137 + 16))(v137);
              else
                --v137[2];
              v113 = v133;
              v110 = v136;
              if ((v141 & 0x80000000) == 0)
              {
LABEL_523:
                result = *v133;
                *v133 = (uint64_t)v132;
                v109 = v163;
                if (!result)
                  goto LABEL_528;
LABEL_526:
                if (*(_DWORD *)(result + 8) == 1)
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                else
                  --*(_DWORD *)(result + 8);
                goto LABEL_528;
              }
            }
          }
          v10 = &v7[8 * (v9 >> 1)];
          if ((unint64_t)v8 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)&v7[8 * (v9 >> 1)], (_DWORD **)v7, (_DWORD **)v159);
            a2 = v162;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v7, (_DWORD **)&v7[8 * (v9 >> 1)], (_DWORD **)v159);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v7 + 1, (_DWORD **)v10 - 1, (_DWORD **)v156);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v7 + 2, (_DWORD **)&v7[8 * (v9 >> 1) + 8], (_DWORD **)v155);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v10 - 1, (_DWORD **)&v7[8 * (v9 >> 1)], (_DWORD **)&v7[8 * (v9 >> 1) + 8]);
            v11 = *(_DWORD **)v7;
            *(_QWORD *)v7 = 0;
            v12 = *(_DWORD **)v10;
            *(_QWORD *)v10 = 0;
            v13 = *(_DWORD **)v7;
            *(_QWORD *)v7 = v12;
            a2 = v162;
            if (v13)
            {
              if (v13[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
              else
                --v13[2];
            }
            v14 = *(_DWORD **)v10;
            *(_QWORD *)v10 = v11;
            if (v14)
            {
              if (v14[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
              else
                --v14[2];
            }
          }
          v15 = a3 - 1;
          if ((a4 & 1) == 0
            && (WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*((_DWORD **)v7 - 1), (_DWORD **)v7) & 1) == 0)
          {
            v52 = *(_DWORD **)v7;
            *(_QWORD *)v7 = 0;
            if ((WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(v52, (_DWORD **)v159) & 1) != 0)
            {
              while (1)
              {
                v7 += 8;
                if (v7 == a2)
                  goto LABEL_573;
                if ((WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(v52, (_DWORD **)v7) & 1) != 0)goto LABEL_354;
              }
            }
            v53 = v7 + 8;
            do
            {
              v7 = v53;
              if (v53 >= a2)
                break;
              v54 = WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(v52, (_DWORD **)v53);
              v53 = v7 + 8;
            }
            while (!v54);
LABEL_354:
            v55 = v15;
            v56 = a2;
            if (v7 < a2)
            {
              v56 = a2;
              while (v56 != v6)
              {
                v56 -= 8;
                if ((WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(v52, (_DWORD **)v56) & 1) == 0)goto LABEL_358;
              }
              goto LABEL_573;
            }
LABEL_358:
            if (v7 < v56)
            {
              v57 = *(_DWORD **)v7;
              *(_QWORD *)v7 = 0;
              v58 = *(_DWORD **)v56;
              *(_QWORD *)v56 = 0;
              v59 = *(_DWORD **)v7;
              *(_QWORD *)v7 = v58;
              if (v59)
              {
                if (v59[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 16))(v59);
                else
                  --v59[2];
              }
              v60 = *(_DWORD **)v56;
              *(_QWORD *)v56 = v57;
              if (v60)
              {
                if (v60[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 16))(v60);
                else
                  --v60[2];
              }
              v61 = v7 + 8;
              do
              {
                if (v61 == a2)
                  goto LABEL_573;
                ++v52[2];
                if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v52 + 24))(v52) != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959022C0);
                }
                v62 = *((unsigned __int8 *)v52 + 80);
                v63 = *(_DWORD **)v61;
                v63[2] = *(_DWORD *)(*(_QWORD *)v61 + 8) + 1;
                if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v63 + 24))(v63) != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1959022E0);
                }
                v64 = WebCore::CSSPrimitiveValue::unitTypeString(v62);
                v65 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v63 + 80));
                v66 = strcmp(v64, v65);
                if (v63[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 16))(v63);
                else
                  --v63[2];
                if (v52[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 16))(v52);
                else
                  --v52[2];
                v61 += 8;
              }
              while ((v66 & 0x80000000) == 0);
              v7 = v61 - 8;
              while (v56 != v6)
              {
                ++v52[2];
                if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v52 + 24))(v52) != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195902300);
                }
                v67 = *((unsigned __int8 *)v52 + 80);
                v68 = (_DWORD *)*((_QWORD *)v56 - 1);
                ++v68[2];
                if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v68 + 24))(v68) != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195902320);
                }
                v69 = WebCore::CSSPrimitiveValue::unitTypeString(v67);
                v70 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v68 + 80));
                v71 = strcmp(v69, v70);
                if (v68[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 16))(v68);
                else
                  --v68[2];
                if (v52[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 16))(v52);
                else
                  --v52[2];
                v56 -= 8;
                if ((v71 & 0x80000000) == 0)
                  goto LABEL_358;
              }
              goto LABEL_573;
            }
            v72 = (uint64_t *)(v7 - 8);
            a3 = v55;
            if (v7 - 8 != v6)
            {
              v73 = (_DWORD *)*v72;
              *v72 = 0;
              v74 = *(_DWORD **)v6;
              *(_QWORD *)v6 = v73;
              if (v74)
              {
                if (v74[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 16))(v74);
                else
                  --v74[2];
              }
            }
            a4 = 0;
            result = *v72;
            *v72 = (uint64_t)v52;
            if (result)
            {
              if (*(_DWORD *)(result + 8) == 1)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                a4 = 0;
              }
              else
              {
                a4 = 0;
                --*(_DWORD *)(result + 8);
              }
            }
            continue;
          }
          v16 = 0;
          v17 = *(_DWORD **)v7;
          *(_QWORD *)v7 = 0;
          v164 = v17;
          do
          {
            v18 = (uint64_t)&v6[v16 + 8];
            if ((char *)v18 == a2)
              goto LABEL_573;
            v19 = *(_DWORD **)v18;
            v19[2] = *(_DWORD *)(*(_QWORD *)v18 + 8) + 1;
            if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v19 + 24))(v19) != 10)
            {
              __break(0xC471u);
              JUMPOUT(0x195902200);
            }
            v20 = *((unsigned __int8 *)v19 + 80);
            ++v17[2];
            if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 24))(v17) != 10)
            {
              __break(0xC471u);
              JUMPOUT(0x195902220);
            }
            v21 = WebCore::CSSPrimitiveValue::unitTypeString(v20);
            v22 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v17 + 80));
            v23 = strcmp(v21, v22);
            if (v17[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
            else
              --v17[2];
            if (v19[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
            else
              --v19[2];
            v16 += 8;
          }
          while (v23 < 0);
          v157 = v15;
          v24 = &v6[v16];
          v25 = a2;
          if (v16 != 8)
          {
            while (v25 != v6)
            {
              v26 = (_DWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              if (WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(v26, &v164))goto LABEL_35;
            }
            goto LABEL_573;
          }
          v25 = a2;
          do
          {
            if (v24 >= v25)
              break;
            v27 = (_DWORD *)*((_QWORD *)v25 - 1);
            v25 -= 8;
          }
          while ((WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(v27, &v164) & 1) == 0);
LABEL_35:
          if (v24 >= v25)
          {
            v51 = v24 - 8;
          }
          else
          {
            v154 = &v6[v16];
            v28 = &v6[v16];
            v29 = v25;
            do
            {
              v30 = *(_DWORD **)v28;
              *(_QWORD *)v28 = 0;
              v31 = *(_DWORD **)v29;
              *(_QWORD *)v29 = 0;
              v32 = *(_DWORD **)v28;
              *(_QWORD *)v28 = v31;
              if (v32)
              {
                if (v32[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
                else
                  --v32[2];
              }
              v33 = *(_DWORD **)v29;
              *(_QWORD *)v29 = v30;
              if (v33)
              {
                if (v33[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
                else
                  --v33[2];
              }
              v34 = v28 + 8;
              v35 = v164;
              do
              {
                if (v34 == v162)
                  goto LABEL_573;
                v36 = *(_DWORD **)v34;
                v36[2] = *(_DWORD *)(*(_QWORD *)v34 + 8) + 1;
                if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v36 + 24))(v36) != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195901878);
                }
                v37 = "cap";
                switch(*((_BYTE *)v36 + 80))
                {
                  case 3:
                    v37 = "%";
                    break;
                  case 4:
                    v37 = "em";
                    break;
                  case 5:
                    v37 = "ex";
                    break;
                  case 6:
                    v37 = "px";
                    break;
                  case 7:
                    v37 = "cm";
                    break;
                  case 8:
                    v37 = "mm";
                    break;
                  case 9:
                    v37 = "in";
                    break;
                  case 0xA:
                    v37 = "pt";
                    break;
                  case 0xB:
                    v37 = "pc";
                    break;
                  case 0xC:
                    v37 = "deg";
                    break;
                  case 0xD:
                    v37 = "rad";
                    break;
                  case 0xE:
                    v37 = "grad";
                    break;
                  case 0xF:
                    v37 = "ms";
                    break;
                  case 0x10:
                    v37 = "s";
                    break;
                  case 0x11:
                    v37 = "hz";
                    break;
                  case 0x12:
                    v37 = "khz";
                    break;
                  case 0x19:
                    v37 = "vw";
                    break;
                  case 0x1A:
                    v37 = "vh";
                    break;
                  case 0x1B:
                    v37 = "vmin";
                    break;
                  case 0x1C:
                    v37 = "vmax";
                    break;
                  case 0x1D:
                    v37 = "vb";
                    break;
                  case 0x1E:
                    v37 = "vi";
                    break;
                  case 0x1F:
                    v37 = "svw";
                    break;
                  case 0x20:
                    v37 = "svh";
                    break;
                  case 0x21:
                    v37 = "svmin";
                    break;
                  case 0x22:
                    v37 = "svmax";
                    break;
                  case 0x23:
                    v37 = "svb";
                    break;
                  case 0x24:
                    v37 = "svi";
                    break;
                  case 0x25:
                    v37 = "lvw";
                    break;
                  case 0x26:
                    v37 = "lvh";
                    break;
                  case 0x27:
                    v37 = "lvmin";
                    break;
                  case 0x28:
                    v37 = "lvmax";
                    break;
                  case 0x29:
                    v37 = "lvb";
                    break;
                  case 0x2A:
                    v37 = "lvi";
                    break;
                  case 0x2B:
                    v37 = "dvw";
                    break;
                  case 0x2C:
                    v37 = "dvh";
                    break;
                  case 0x2D:
                    v37 = "dvmin";
                    break;
                  case 0x2E:
                    v37 = "dvmax";
                    break;
                  case 0x2F:
                    v37 = "dvb";
                    break;
                  case 0x30:
                    v37 = "dvi";
                    break;
                  case 0x31:
                    v37 = "cqw";
                    break;
                  case 0x32:
                    v37 = "cqh";
                    break;
                  case 0x33:
                    v37 = "cqi";
                    break;
                  case 0x34:
                    v37 = "cqb";
                    break;
                  case 0x35:
                    v37 = "cqmin";
                    break;
                  case 0x36:
                    v37 = "cqmax";
                    break;
                  case 0x37:
                    v37 = "dppx";
                    break;
                  case 0x38:
                    v37 = "x";
                    break;
                  case 0x39:
                    v37 = "dpi";
                    break;
                  case 0x3A:
                    v37 = "dpcm";
                    break;
                  case 0x3B:
                    v37 = "fr";
                    break;
                  case 0x3C:
                    v37 = "q";
                    break;
                  case 0x3D:
                    v37 = "lh";
                    break;
                  case 0x3E:
                    v37 = "rlh";
                    break;
                  case 0x40:
                    v37 = "turn";
                    break;
                  case 0x41:
                    v37 = "rem";
                    break;
                  case 0x42:
                    v37 = "rex";
                    break;
                  case 0x43:
                    break;
                  case 0x44:
                    v37 = "rcap";
                    break;
                  case 0x45:
                    v37 = "ch";
                    break;
                  case 0x46:
                    v37 = "rch";
                    break;
                  case 0x47:
                    v37 = "ic";
                    break;
                  case 0x48:
                    v37 = "ric";
                    break;
                  default:
                    v37 = (const char *)&str_1_37;
                    break;
                }
                ++v35[2];
                if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v35 + 24))(v35) != 10)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195901898);
                }
                v38 = "cap";
                switch(*((_BYTE *)v35 + 80))
                {
                  case 3:
                    v38 = "%";
                    break;
                  case 4:
                    v38 = "em";
                    break;
                  case 5:
                    v38 = "ex";
                    break;
                  case 6:
                    v38 = "px";
                    break;
                  case 7:
                    v38 = "cm";
                    break;
                  case 8:
                    v38 = "mm";
                    break;
                  case 9:
                    v38 = "in";
                    break;
                  case 0xA:
                    v38 = "pt";
                    break;
                  case 0xB:
                    v38 = "pc";
                    break;
                  case 0xC:
                    v38 = "deg";
                    break;
                  case 0xD:
                    v38 = "rad";
                    break;
                  case 0xE:
                    v38 = "grad";
                    break;
                  case 0xF:
                    v38 = "ms";
                    break;
                  case 0x10:
                    v38 = "s";
                    break;
                  case 0x11:
                    v38 = "hz";
                    break;
                  case 0x12:
                    v38 = "khz";
                    break;
                  case 0x19:
                    v38 = "vw";
                    break;
                  case 0x1A:
                    v38 = "vh";
                    break;
                  case 0x1B:
                    v38 = "vmin";
                    break;
                  case 0x1C:
                    v38 = "vmax";
                    break;
                  case 0x1D:
                    v38 = "vb";
                    break;
                  case 0x1E:
                    v38 = "vi";
                    break;
                  case 0x1F:
                    v38 = "svw";
                    break;
                  case 0x20:
                    v38 = "svh";
                    break;
                  case 0x21:
                    v38 = "svmin";
                    break;
                  case 0x22:
                    v38 = "svmax";
                    break;
                  case 0x23:
                    v38 = "svb";
                    break;
                  case 0x24:
                    v38 = "svi";
                    break;
                  case 0x25:
                    v38 = "lvw";
                    break;
                  case 0x26:
                    v38 = "lvh";
                    break;
                  case 0x27:
                    v38 = "lvmin";
                    break;
                  case 0x28:
                    v38 = "lvmax";
                    break;
                  case 0x29:
                    v38 = "lvb";
                    break;
                  case 0x2A:
                    v38 = "lvi";
                    break;
                  case 0x2B:
                    v38 = "dvw";
                    break;
                  case 0x2C:
                    v38 = "dvh";
                    break;
                  case 0x2D:
                    v38 = "dvmin";
                    break;
                  case 0x2E:
                    v38 = "dvmax";
                    break;
                  case 0x2F:
                    v38 = "dvb";
                    break;
                  case 0x30:
                    v38 = "dvi";
                    break;
                  case 0x31:
                    v38 = "cqw";
                    break;
                  case 0x32:
                    v38 = "cqh";
                    break;
                  case 0x33:
                    v38 = "cqi";
                    break;
                  case 0x34:
                    v38 = "cqb";
                    break;
                  case 0x35:
                    v38 = "cqmin";
                    break;
                  case 0x36:
                    v38 = "cqmax";
                    break;
                  case 0x37:
                    v38 = "dppx";
                    break;
                  case 0x38:
                    v38 = "x";
                    break;
                  case 0x39:
                    v38 = "dpi";
                    break;
                  case 0x3A:
                    v38 = "dpcm";
                    break;
                  case 0x3B:
                    v38 = "fr";
                    break;
                  case 0x3C:
                    v38 = "q";
                    break;
                  case 0x3D:
                    v38 = "lh";
                    break;
                  case 0x3E:
                    v38 = "rlh";
                    break;
                  case 0x40:
                    v38 = "turn";
                    break;
                  case 0x41:
                    v38 = "rem";
                    break;
                  case 0x42:
                    v38 = "rex";
                    break;
                  case 0x43:
                    break;
                  case 0x44:
                    v38 = "rcap";
                    break;
                  case 0x45:
                    v38 = "ch";
                    break;
                  case 0x46:
                    v38 = "rch";
                    break;
                  case 0x47:
                    v38 = "ic";
                    break;
                  case 0x48:
                    v38 = "ric";
                    break;
                  default:
                    v38 = (const char *)&str_1_37;
                    break;
                }
                v39 = strcmp(v37, v38);
                if (v35[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
                else
                  --v35[2];
                if (v36[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
                else
                  --v36[2];
                v34 += 8;
              }
              while (v39 < 0);
              v28 = v34 - 8;
              do
              {
                while (1)
                {
                  if (v29 == v6)
                    goto LABEL_573;
                  v41 = (_DWORD *)*((_QWORD *)v29 - 1);
                  v29 -= 8;
                  v40 = v41;
                  ++v41[2];
                  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v41 + 24))(v41) != 10)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959018B8);
                  }
                  v42 = "cap";
                  switch(*((_BYTE *)v40 + 80))
                  {
                    case 3:
                      v42 = "%";
                      break;
                    case 4:
                      v42 = "em";
                      break;
                    case 5:
                      v42 = "ex";
                      break;
                    case 6:
                      v42 = "px";
                      break;
                    case 7:
                      v42 = "cm";
                      break;
                    case 8:
                      v42 = "mm";
                      break;
                    case 9:
                      v42 = "in";
                      break;
                    case 0xA:
                      v42 = "pt";
                      break;
                    case 0xB:
                      v42 = "pc";
                      break;
                    case 0xC:
                      v42 = "deg";
                      break;
                    case 0xD:
                      v42 = "rad";
                      break;
                    case 0xE:
                      v42 = "grad";
                      break;
                    case 0xF:
                      v42 = "ms";
                      break;
                    case 0x10:
                      v42 = "s";
                      break;
                    case 0x11:
                      v42 = "hz";
                      break;
                    case 0x12:
                      v42 = "khz";
                      break;
                    case 0x19:
                      v42 = "vw";
                      break;
                    case 0x1A:
                      v42 = "vh";
                      break;
                    case 0x1B:
                      v42 = "vmin";
                      break;
                    case 0x1C:
                      v42 = "vmax";
                      break;
                    case 0x1D:
                      v42 = "vb";
                      break;
                    case 0x1E:
                      v42 = "vi";
                      break;
                    case 0x1F:
                      v42 = "svw";
                      break;
                    case 0x20:
                      v42 = "svh";
                      break;
                    case 0x21:
                      v42 = "svmin";
                      break;
                    case 0x22:
                      v42 = "svmax";
                      break;
                    case 0x23:
                      v42 = "svb";
                      break;
                    case 0x24:
                      v42 = "svi";
                      break;
                    case 0x25:
                      v42 = "lvw";
                      break;
                    case 0x26:
                      v42 = "lvh";
                      break;
                    case 0x27:
                      v42 = "lvmin";
                      break;
                    case 0x28:
                      v42 = "lvmax";
                      break;
                    case 0x29:
                      v42 = "lvb";
                      break;
                    case 0x2A:
                      v42 = "lvi";
                      break;
                    case 0x2B:
                      v42 = "dvw";
                      break;
                    case 0x2C:
                      v42 = "dvh";
                      break;
                    case 0x2D:
                      v42 = "dvmin";
                      break;
                    case 0x2E:
                      v42 = "dvmax";
                      break;
                    case 0x2F:
                      v42 = "dvb";
                      break;
                    case 0x30:
                      v42 = "dvi";
                      break;
                    case 0x31:
                      v42 = "cqw";
                      break;
                    case 0x32:
                      v42 = "cqh";
                      break;
                    case 0x33:
                      v42 = "cqi";
                      break;
                    case 0x34:
                      v42 = "cqb";
                      break;
                    case 0x35:
                      v42 = "cqmin";
                      break;
                    case 0x36:
                      v42 = "cqmax";
                      break;
                    case 0x37:
                      v42 = "dppx";
                      break;
                    case 0x38:
                      v42 = "x";
                      break;
                    case 0x39:
                      v42 = "dpi";
                      break;
                    case 0x3A:
                      v42 = "dpcm";
                      break;
                    case 0x3B:
                      v42 = "fr";
                      break;
                    case 0x3C:
                      v42 = "q";
                      break;
                    case 0x3D:
                      v42 = "lh";
                      break;
                    case 0x3E:
                      v42 = "rlh";
                      break;
                    case 0x40:
                      v42 = "turn";
                      break;
                    case 0x41:
                      v42 = "rem";
                      break;
                    case 0x42:
                      v42 = "rex";
                      break;
                    case 0x43:
                      break;
                    case 0x44:
                      v42 = "rcap";
                      break;
                    case 0x45:
                      v42 = "ch";
                      break;
                    case 0x46:
                      v42 = "rch";
                      break;
                    case 0x47:
                      v42 = "ic";
                      break;
                    case 0x48:
                      v42 = "ric";
                      break;
                    default:
                      v42 = (const char *)&str_1_37;
                      break;
                  }
                  ++v35[2];
                  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v35 + 24))(v35) != 10)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959018D8);
                  }
                  v43 = "cap";
                  switch(*((_BYTE *)v35 + 80))
                  {
                    case 3:
                      v43 = "%";
                      break;
                    case 4:
                      v43 = "em";
                      break;
                    case 5:
                      v43 = "ex";
                      break;
                    case 6:
                      v43 = "px";
                      break;
                    case 7:
                      v43 = "cm";
                      break;
                    case 8:
                      v43 = "mm";
                      break;
                    case 9:
                      v43 = "in";
                      break;
                    case 0xA:
                      v43 = "pt";
                      break;
                    case 0xB:
                      v43 = "pc";
                      break;
                    case 0xC:
                      v43 = "deg";
                      break;
                    case 0xD:
                      v43 = "rad";
                      break;
                    case 0xE:
                      v43 = "grad";
                      break;
                    case 0xF:
                      v43 = "ms";
                      break;
                    case 0x10:
                      v43 = "s";
                      break;
                    case 0x11:
                      v43 = "hz";
                      break;
                    case 0x12:
                      v43 = "khz";
                      break;
                    case 0x19:
                      v43 = "vw";
                      break;
                    case 0x1A:
                      v43 = "vh";
                      break;
                    case 0x1B:
                      v43 = "vmin";
                      break;
                    case 0x1C:
                      v43 = "vmax";
                      break;
                    case 0x1D:
                      v43 = "vb";
                      break;
                    case 0x1E:
                      v43 = "vi";
                      break;
                    case 0x1F:
                      v43 = "svw";
                      break;
                    case 0x20:
                      v43 = "svh";
                      break;
                    case 0x21:
                      v43 = "svmin";
                      break;
                    case 0x22:
                      v43 = "svmax";
                      break;
                    case 0x23:
                      v43 = "svb";
                      break;
                    case 0x24:
                      v43 = "svi";
                      break;
                    case 0x25:
                      v43 = "lvw";
                      break;
                    case 0x26:
                      v43 = "lvh";
                      break;
                    case 0x27:
                      v43 = "lvmin";
                      break;
                    case 0x28:
                      v43 = "lvmax";
                      break;
                    case 0x29:
                      v43 = "lvb";
                      break;
                    case 0x2A:
                      v43 = "lvi";
                      break;
                    case 0x2B:
                      v43 = "dvw";
                      break;
                    case 0x2C:
                      v43 = "dvh";
                      break;
                    case 0x2D:
                      v43 = "dvmin";
                      break;
                    case 0x2E:
                      v43 = "dvmax";
                      break;
                    case 0x2F:
                      v43 = "dvb";
                      break;
                    case 0x30:
                      v43 = "dvi";
                      break;
                    case 0x31:
                      v43 = "cqw";
                      break;
                    case 0x32:
                      v43 = "cqh";
                      break;
                    case 0x33:
                      v43 = "cqi";
                      break;
                    case 0x34:
                      v43 = "cqb";
                      break;
                    case 0x35:
                      v43 = "cqmin";
                      break;
                    case 0x36:
                      v43 = "cqmax";
                      break;
                    case 0x37:
                      v43 = "dppx";
                      break;
                    case 0x38:
                      v43 = "x";
                      break;
                    case 0x39:
                      v43 = "dpi";
                      break;
                    case 0x3A:
                      v43 = "dpcm";
                      break;
                    case 0x3B:
                      v43 = "fr";
                      break;
                    case 0x3C:
                      v43 = "q";
                      break;
                    case 0x3D:
                      v43 = "lh";
                      break;
                    case 0x3E:
                      v43 = "rlh";
                      break;
                    case 0x40:
                      v43 = "turn";
                      break;
                    case 0x41:
                      v43 = "rem";
                      break;
                    case 0x42:
                      v43 = "rex";
                      break;
                    case 0x43:
                      break;
                    case 0x44:
                      v43 = "rcap";
                      break;
                    case 0x45:
                      v43 = "ch";
                      break;
                    case 0x46:
                      v43 = "rch";
                      break;
                    case 0x47:
                      v43 = "ic";
                      break;
                    case 0x48:
                      v43 = "ric";
                      break;
                    default:
                      v43 = (const char *)&str_1_37;
                      break;
                  }
                  v44 = strcmp(v42, v43);
                  if (v35[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
                  else
                    --v35[2];
                  if (v40[2] == 1)
                    break;
                  --v40[2];
                  if (v44 < 0)
                    goto LABEL_322;
                }
                (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 16))(v40);
              }
              while ((v44 & 0x80000000) == 0);
LABEL_322:
              ;
            }
            while (v28 < v29);
            v51 = v34 - 16;
            a2 = v162;
            v24 = v154;
          }
          if (v51 != v6)
          {
            v45 = *(_DWORD **)v51;
            *(_QWORD *)v51 = 0;
            v46 = *(_DWORD **)v6;
            *(_QWORD *)v6 = v45;
            if (v46)
            {
              if (v46[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
              else
                --v46[2];
            }
          }
          v47 = v164;
          v164 = 0;
          v48 = *(_DWORD **)v51;
          *(_QWORD *)v51 = v47;
          if (v48)
          {
            if (v48[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
            else
              --v48[2];
          }
          if (v164)
          {
            if (v164[2] == 1)
              (*(void (**)(void))(*(_QWORD *)v164 + 16))();
            else
              --v164[2];
          }
          v49 = v24 >= v25;
          a3 = v157;
          if (!v49)
          {
LABEL_341:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *,false>(v6, v51, v157, a4 & 1);
            a4 = 0;
            v7 = v51 + 8;
            continue;
          }
          v50 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v6, (_DWORD **)v51);
          v7 = v51 + 8;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>((_DWORD **)v51 + 1, (_DWORD **)a2);
          if (!(_DWORD)result)
          {
            if (!v50)
              goto LABEL_341;
            continue;
          }
          a2 = v51;
          if (v50)
            return result;
          goto LABEL_2;
        }
        v78 = v7 + 8;
        v80 = v7 == a2 || v78 == a2;
        if ((a4 & 1) == 0)
        {
          if (!v80)
          {
            v143 = 0;
            v144 = 1;
            do
            {
              v145 = v143;
              v143 = v144;
              result = WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*(_DWORD **)v78, (_DWORD **)&v7[8 * v145]);
              if ((_DWORD)result)
              {
                result = 0;
                v146 = *(_DWORD **)v78;
                *(_QWORD *)v78 = 0;
                do
                {
                  v147 = (uint64_t *)&v7[8 * v145];
                  v148 = *v147;
                  *v147 = 0;
                  v147[1] = v148;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 8) == 1)
                      (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                    else
                      --*(_DWORD *)(result + 8);
                  }
                  if (v145 == -1)
                    goto LABEL_573;
                  ++v146[2];
                  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v146 + 24))(v146) != 10)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195902280);
                  }
                  v149 = *((unsigned __int8 *)v146 + 80);
                  v150 = *(_DWORD **)&v7[8 * v145 - 8];
                  ++v150[2];
                  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v150 + 24))(v150) != 10)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1959022A0);
                  }
                  v151 = WebCore::CSSPrimitiveValue::unitTypeString(v149);
                  v152 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v150 + 80));
                  v153 = strcmp(v151, v152);
                  if (v150[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v150 + 16))(v150);
                  else
                    --v150[2];
                  if (v146[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v146 + 16))(v146);
                  else
                    --v146[2];
                  result = *v147;
                  --v145;
                }
                while (v153 < 0);
                *(_QWORD *)&v7[8 * v145 + 8] = v146;
                a2 = v162;
                if (result)
                {
                  if (*(_DWORD *)(result + 8) == 1)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                  else
                    --*(_DWORD *)(result + 8);
                }
              }
              v144 = v143 + 1;
              v78 = &v7[8 * v143 + 8];
            }
            while (v78 != a2);
          }
          return result;
        }
        if (v80)
          return result;
        v81 = 0;
        v82 = v7;
        do
        {
          v83 = v82;
          v82 = v78;
          result = WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*((_DWORD **)v83 + 1), (_DWORD **)v83);
          if (!(_DWORD)result)
            goto LABEL_448;
          v84 = 0;
          v85 = *(_QWORD *)v78;
          *(_QWORD *)v78 = 0;
          for (i = v81; ; i -= 8)
          {
            v87 = &v7[i];
            v88 = *(_QWORD *)&v7[i];
            *(_QWORD *)v87 = 0;
            *((_QWORD *)v87 + 1) = v88;
            if (!v84)
              goto LABEL_431;
            if (v84[2] != 1)
            {
              --v84[2];
LABEL_431:
              if (!i)
                goto LABEL_443;
              goto LABEL_432;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 16))(v84);
            if (!i)
            {
LABEL_443:
              v94 = (uint64_t *)v7;
              goto LABEL_445;
            }
LABEL_432:
            ++*(_DWORD *)(v85 + 8);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v85 + 24))(v85) != 10)
            {
              __break(0xC471u);
              JUMPOUT(0x195902378);
            }
            v89 = *(unsigned __int8 *)(v85 + 80);
            v90 = *(_DWORD **)&v7[i - 8];
            ++v90[2];
            if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v90 + 24))(v90) != 10)
            {
              __break(0xC471u);
LABEL_573:
              __break(1u);
LABEL_574:
              __break(0xC471u);
              JUMPOUT(0x1959023B8);
            }
            v91 = WebCore::CSSPrimitiveValue::unitTypeString(v89);
            v92 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v90 + 80));
            v93 = strcmp(v91, v92);
            if (v90[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 16))(v90);
            else
              --v90[2];
            if (*(_DWORD *)(v85 + 8) == 1)
              break;
            --*(_DWORD *)(v85 + 8);
            if ((v93 & 0x80000000) == 0)
              goto LABEL_444;
LABEL_438:
            v84 = *(_DWORD **)v87;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
          if (v93 < 0)
            goto LABEL_438;
LABEL_444:
          v94 = (uint64_t *)&v7[i];
LABEL_445:
          result = *v94;
          *v94 = v85;
          a2 = v162;
          if (result)
          {
            if (*(_DWORD *)(result + 8) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
            else
              --*(_DWORD *)(result + 8);
          }
LABEL_448:
          v78 = v82 + 8;
          v81 += 8;
        }
        while (v82 + 8 != a2);
        return result;
    }
  }
}

uint64_t WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(_DWORD *a1, _DWORD **a2)
{
  int v4;
  _DWORD *v5;
  const char *v6;
  const char *v7;
  unsigned int v8;

  ++a1[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1) != 10
    || (v4 = *((unsigned __int8 *)a1 + 80),
        v5 = *a2,
        ++v5[2],
        (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v5 + 24))(v5) != 10))
  {
    __break(0xC471u);
    JUMPOUT(0x195902A14);
  }
  v6 = WebCore::CSSPrimitiveValue::unitTypeString(v4);
  v7 = WebCore::CSSPrimitiveValue::unitTypeString(*((unsigned __int8 *)v5 + 80));
  v8 = strcmp(v6, v7);
  if (v5[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  else
    --v5[2];
  if (a1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  else
    --a1[2];
  return v8 >> 31;
}

_DWORD *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *,0>(_DWORD **a1, _DWORD **a2, _DWORD **a3, _DWORD **a4, _DWORD **a5)
{
  _DWORD *result;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(a1, a2, a3, a4);
  result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a5, a4);
  if ((_DWORD)result)
  {
    v11 = *a4;
    *a4 = 0;
    v12 = *a5;
    *a5 = 0;
    v13 = *a4;
    *a4 = v12;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[2];
    }
    v14 = *a5;
    *a5 = v11;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[2];
    }
    result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a4, a3);
    if ((_DWORD)result)
    {
      v15 = *a3;
      *a3 = 0;
      v16 = *a4;
      *a4 = 0;
      v17 = *a3;
      *a3 = v16;
      if (v17)
      {
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
        else
          --v17[2];
      }
      v18 = *a4;
      *a4 = v15;
      if (v18)
      {
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        else
          --v18[2];
      }
      result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a3, a2);
      if ((_DWORD)result)
      {
        v19 = *a2;
        *a2 = 0;
        v20 = *a3;
        *a3 = 0;
        v21 = *a2;
        *a2 = v20;
        if (v21)
        {
          if (v21[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
          else
            --v21[2];
        }
        v22 = *a3;
        *a3 = v19;
        if (v22)
        {
          if (v22[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
          else
            --v22[2];
        }
        result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a2, a1);
        if ((_DWORD)result)
        {
          v23 = *a1;
          *a1 = 0;
          v24 = *a2;
          *a2 = 0;
          v25 = *a1;
          *a1 = v24;
          if (v25)
          {
            if (v25[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
            else
              --v25[2];
          }
          result = *a2;
          *a2 = v23;
          if (result)
          {
            if (result[2] == 1)
              return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
            else
              --result[2];
          }
        }
      }
    }
  }
  return result;
}

_DWORD *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(_DWORD **a1, _DWORD **a2, _DWORD **a3)
{
  char v6;
  _DWORD *result;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v6 = WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a2, a1);
  result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a3, a2);
  if ((v6 & 1) != 0)
  {
    v8 = *a1;
    *a1 = 0;
    if ((_DWORD)result)
    {
      v9 = *a3;
      *a3 = 0;
      v10 = *a1;
      *a1 = v9;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[2];
      }
      result = *a3;
      *a3 = v8;
      if (!result)
        return result;
LABEL_32:
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
      --result[2];
      return result;
    }
    v18 = *a2;
    *a2 = 0;
    v19 = *a1;
    *a1 = v18;
    if (v19)
    {
      if (v19[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
      else
        --v19[2];
    }
    v20 = *a2;
    *a2 = v8;
    if (v20)
    {
      if (v20[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
      else
        --v20[2];
    }
    result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a3, a2);
    if ((_DWORD)result)
    {
      v21 = *a2;
      *a2 = 0;
      v22 = *a3;
      *a3 = 0;
      v23 = *a2;
      *a2 = v22;
      if (v23)
      {
        if (v23[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
        else
          --v23[2];
      }
      result = *a3;
      *a3 = v21;
      if (result)
        goto LABEL_32;
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = 0;
    v12 = *a3;
    *a3 = 0;
    v13 = *a2;
    *a2 = v12;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[2];
    }
    v14 = *a3;
    *a3 = v11;
    if (v14)
    {
      if (v14[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
      else
        --v14[2];
    }
    result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a2, a1);
    if ((_DWORD)result)
    {
      v15 = *a1;
      *a1 = 0;
      v16 = *a2;
      *a2 = 0;
      v17 = *a1;
      *a1 = v16;
      if (v17)
      {
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 16))(v17);
        else
          --v17[2];
      }
      result = *a2;
      *a2 = v15;
      if (result)
        goto LABEL_32;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(_DWORD **a1, _DWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD **v10;
  _DWORD **v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t i;
  char *v17;
  uint64_t v18;
  _DWORD **v19;
  _DWORD *v20;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*(a2 - 1), a1))
      {
        v6 = *a1;
        *a1 = 0;
        v7 = *(a2 - 1);
        *(a2 - 1) = 0;
        v8 = *a1;
        *a1 = v7;
        if (v8)
        {
          if (v8[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
          else
            --v8[2];
        }
        v9 = *(a2 - 1);
        *(a2 - 1) = v6;
        if (v9)
        {
          if (v9[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
          else
            --v9[2];
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*v11, v10))
    {
      v14 = 0;
      v15 = *v11;
      *v11 = 0;
      for (i = v12; ; i -= 8)
      {
        v17 = (char *)a1 + i;
        v18 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v18;
        if (v14)
        {
          if (v14[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          else
            --v14[2];
        }
        if (i == -16)
        {
          v19 = a1;
          goto LABEL_22;
        }
        if ((WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(v15, (_DWORD **)((char *)a1 + i + 8)) & 1) == 0)break;
        v14 = (_DWORD *)*((_QWORD *)v17 + 2);
      }
      v19 = (_DWORD **)((char *)a1 + i + 16);
LABEL_22:
      v20 = *v19;
      *v19 = v15;
      if (v20)
      {
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
        else
          --v20[2];
      }
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(_DWORD **a1, _DWORD **a2, _DWORD **a3, _DWORD **a4)
{
  _DWORD *result;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0 &,WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>> *>(a1, a2, a3);
  result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a4, a3);
  if ((_DWORD)result)
  {
    v9 = *a3;
    *a3 = 0;
    v10 = *a4;
    *a4 = 0;
    v11 = *a3;
    *a3 = v10;
    if (v11)
    {
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
      else
        --v11[2];
    }
    v12 = *a4;
    *a4 = v9;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
      else
        --v12[2];
    }
    result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a3, a2);
    if ((_DWORD)result)
    {
      v13 = *a2;
      *a2 = 0;
      v14 = *a3;
      *a3 = 0;
      v15 = *a2;
      *a2 = v14;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        else
          --v15[2];
      }
      v16 = *a3;
      *a3 = v13;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
        else
          --v16[2];
      }
      result = (_DWORD *)WebCore::CSSNumericValue::toSum(WTF::FixedVector<WTF::String> &&)::$_0::operator()<WTF::Ref<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>(*a2, a1);
      if ((_DWORD)result)
      {
        v17 = *a1;
        *a1 = 0;
        v18 = *a2;
        *a2 = 0;
        v19 = *a1;
        *a1 = v18;
        if (v19)
        {
          if (v19[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 16))(v19);
          else
            --v19[2];
        }
        result = *a2;
        *a2 = v17;
        if (result)
        {
          if (result[2] == 1)
            return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
          else
            --result[2];
        }
      }
    }
  }
  return result;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &)::{lambda(WebCore::MQ::Condition const&)#1},void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::Feature const&)#1},void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t **result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;

  v2 = *(_DWORD *)(a2 + 20);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = **result;
    v5 = 88 * v2;
    while (1)
    {
      v8[0] = v4;
      v8[1] = v4;
      v8[2] = v4;
      v6 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v6 == -1)
        break;
      v9 = v8;
      result = (uint64_t **)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQ16traverseFeaturesIRZNKS9_19MediaQueryEvaluator26collectDynamicDependenciesERKNS9_10MediaQueryEE3__0EEvRKNS_7variantIJNS9_9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEOT_EUlRKSI_E_JZNSA_ISG_EEvSN_SP_EUlRKSJ_E_ZNSA_ISG_EEvSN_SP_EUlRKSK_E_EEEEEJRKNS0_6__implIJSI_SJ_SK_EEEEEEDcSP_DpOT0____fmatrix[v6])(&v9, v3);
      v3 += 88;
      v5 -= 88;
      if (!v5)
        return result;
    }
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t **)std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &)::{lambda(WebCore::MQ::Condition const&)#1},void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::Feature const&)#1},void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(v7);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &)::{lambda(WebCore::MQ::Condition const&)#1},void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::Feature const&)#1},void WebCore::MQ::traverseFeatures<WebCore::MQ::MediaQueryEvaluator::collectDynamicDependencies(WebCore::MQ::MediaQuery const&)::$_0 &>(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::Condition const)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  _BYTE **v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _BYTE **v31;
  _BYTE **v32;
  _BYTE **v33;
  _BYTE **v34;
  _BYTE **v35;
  _BYTE **v36;
  _BYTE **v37;
  _BYTE **v38;
  _BYTE **v39;
  _BYTE **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  WTF::StringImpl *v51;

  v2 = *(uint64_t **)(a2 + 72);
  if (v2)
  {
    v3 = *(_BYTE ***)(*(_QWORD *)result + 8);
    if ((byte_1ECE82B3D & 1) == 0)
    {
      v31 = *(_BYTE ***)(*(_QWORD *)result + 8);
      v41 = *(uint64_t **)(a2 + 72);
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339EF18;
      if (v51)
      {
        v21 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE83048 = 513;
        qword_1ECE83038 = (uint64_t)&off_1E339EB30;
        unk_1ECE83040 = v51;
        qword_1ECE83050 = 0;
        unk_1ECE83058 = result;
        if (v21)
          *(_DWORD *)v51 = v21;
        else
          result = WTF::StringImpl::destroy(v51, v5);
      }
      else
      {
        word_1ECE83048 = 513;
        qword_1ECE83038 = (uint64_t)&off_1E339EB30;
        unk_1ECE83040 = 0;
        qword_1ECE83050 = 0;
        unk_1ECE83058 = result;
      }
      byte_1ECE82B3D = 1;
      v3 = v31;
      v2 = v41;
    }
    if (v2 == &qword_1ECE83038)
      goto LABEL_26;
    if ((byte_1ECE82B31 & 1) == 0)
    {
      v32 = v3;
      v42 = v2;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339EC48;
      if (v51)
      {
        v22 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82DA0 = 513;
        qword_1ECE82D90 = (uint64_t)&off_1E339EB30;
        *(_QWORD *)algn_1ECE82D98 = v51;
        qword_1ECE82DA8 = 0;
        unk_1ECE82DB0 = result;
        if (v22)
          *(_DWORD *)v51 = v22;
        else
          result = WTF::StringImpl::destroy(v51, v6);
      }
      else
      {
        word_1ECE82DA0 = 513;
        qword_1ECE82D90 = (uint64_t)&off_1E339EB30;
        *(_QWORD *)algn_1ECE82D98 = 0;
        qword_1ECE82DA8 = 0;
        unk_1ECE82DB0 = result;
      }
      byte_1ECE82B31 = 1;
      v3 = v32;
      v2 = v42;
    }
    if (v2 == &qword_1ECE82D90)
      goto LABEL_26;
    if ((byte_1ECE82B34 & 1) == 0)
    {
      v33 = v3;
      v43 = v2;
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v7 = 0x1E401D500000002;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339ECE8;
      if (v51)
      {
        v23 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82E40 = 1280;
        qword_1ECE82E30 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82E38 = (uint64_t)v51;
        qword_1ECE82E48 = (uint64_t)v7;
        unk_1ECE82E50 = result;
        if (v23)
          *(_DWORD *)v51 = v23;
        else
          result = WTF::StringImpl::destroy(v51, v8);
      }
      else
      {
        word_1ECE82E40 = 1280;
        qword_1ECE82E30 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82E38 = 0;
        qword_1ECE82E48 = (uint64_t)v7;
        unk_1ECE82E50 = result;
      }
      byte_1ECE82B34 = 1;
      v3 = v33;
      v2 = v43;
    }
    if (v2 == &qword_1ECE82E30)
      goto LABEL_26;
    if ((byte_1ECE82B29 & 1) == 0)
    {
      v34 = v3;
      v44 = v2;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339E9F0;
      if (v51)
      {
        v24 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82BE8 = 769;
        qword_1ECE82BD8 = (uint64_t)&off_1E339EA18;
        unk_1ECE82BE0 = v51;
        qword_1ECE82BF0 = 0;
        unk_1ECE82BF8 = result;
        if (v24)
          *(_DWORD *)v51 = v24;
        else
          result = WTF::StringImpl::destroy(v51, v9);
      }
      else
      {
        word_1ECE82BE8 = 769;
        qword_1ECE82BD8 = (uint64_t)&off_1E339EA18;
        unk_1ECE82BE0 = 0;
        qword_1ECE82BF0 = 0;
        unk_1ECE82BF8 = result;
      }
      byte_1ECE82B29 = 1;
      v3 = v34;
      v2 = v44;
    }
    if (v2 == &qword_1ECE82BD8)
    {
LABEL_26:
      v4 = 1;
      goto LABEL_24;
    }
    if ((byte_1ECE82B36 & 1) == 0)
    {
      v35 = v3;
      v45 = v2;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v10 = 0x3BD03BF00000002;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339ED60;
      if (v51)
      {
        v25 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82EB8 = 1280;
        qword_1ECE82EA8 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82EB0 = (uint64_t)v51;
        qword_1ECE82EC0 = (uint64_t)v10;
        unk_1ECE82EC8 = result;
        if (v25)
          *(_DWORD *)v51 = v25;
        else
          result = WTF::StringImpl::destroy(v51, v11);
      }
      else
      {
        word_1ECE82EB8 = 1280;
        qword_1ECE82EA8 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82EB0 = 0;
        qword_1ECE82EC0 = (uint64_t)v10;
        unk_1ECE82EC8 = result;
      }
      byte_1ECE82B36 = 1;
      v3 = v35;
      v2 = v45;
    }
    if (v2 == &qword_1ECE82EA8)
      goto LABEL_23;
    if ((byte_1ECE82B3E & 1) == 0)
    {
      v36 = v3;
      v46 = v2;
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v12 = 0x3C403C300000002;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339EFB8;
      if (v51)
      {
        v26 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE830E8 = 1280;
        qword_1ECE830D8 = (uint64_t)&off_1E339E9A0;
        qword_1ECE830E0 = (uint64_t)v51;
        qword_1ECE830F0 = (uint64_t)v12;
        unk_1ECE830F8 = result;
        if (v26)
          *(_DWORD *)v51 = v26;
        else
          result = WTF::StringImpl::destroy(v51, v13);
      }
      else
      {
        word_1ECE830E8 = 1280;
        qword_1ECE830D8 = (uint64_t)&off_1E339E9A0;
        qword_1ECE830E0 = 0;
        qword_1ECE830F0 = (uint64_t)v12;
        unk_1ECE830F8 = result;
      }
      byte_1ECE82B3E = 1;
      v3 = v36;
      v2 = v46;
    }
    if (v2 == &qword_1ECE830D8)
    {
LABEL_23:
      v4 = 2;
      goto LABEL_24;
    }
    if ((byte_1ECE82B32 & 1) == 0)
    {
      v37 = v3;
      v47 = v2;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v14 = 0x1CF000600000002;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339EC98;
      if (v51)
      {
        v27 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82DF0 = 1280;
        qword_1ECE82DE0 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82DE8 = (uint64_t)v51;
        qword_1ECE82DF8 = (uint64_t)v14;
        unk_1ECE82E00 = result;
        if (v27)
          *(_DWORD *)v51 = v27;
        else
          result = WTF::StringImpl::destroy(v51, v15);
      }
      else
      {
        word_1ECE82DF0 = 1280;
        qword_1ECE82DE0 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82DE8 = 0;
        qword_1ECE82DF8 = (uint64_t)v14;
        unk_1ECE82E00 = result;
      }
      byte_1ECE82B32 = 1;
      v3 = v37;
      v2 = v47;
    }
    if (v2 == &qword_1ECE82DE0)
      goto LABEL_22;
    if ((byte_1ECE82B33 & 1) == 0)
    {
      v38 = v3;
      v48 = v2;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339ECC0;
      if (v51)
      {
        v28 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82E18 = 1;
        qword_1ECE82E08 = (uint64_t)&off_1E339EA68;
        unk_1ECE82E10 = v51;
        qword_1ECE82E20 = 0;
        unk_1ECE82E28 = result;
        if (v28)
          *(_DWORD *)v51 = v28;
        else
          result = WTF::StringImpl::destroy(v51, v16);
      }
      else
      {
        word_1ECE82E18 = 1;
        qword_1ECE82E08 = (uint64_t)&off_1E339EA68;
        unk_1ECE82E10 = 0;
        qword_1ECE82E20 = 0;
        unk_1ECE82E28 = result;
      }
      byte_1ECE82B33 = 1;
      v3 = v38;
      v2 = v48;
    }
    if (v2 == &qword_1ECE82E08)
      goto LABEL_22;
    if ((byte_1ECE82B37 & 1) == 0)
    {
      v39 = v3;
      v49 = v2;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v17 = 0x3BE03BF00000002;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339ED88;
      if (v51)
      {
        v29 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82EE0 = 1280;
        qword_1ECE82ED0 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82ED8 = (uint64_t)v51;
        qword_1ECE82EE8 = (uint64_t)v17;
        unk_1ECE82EF0 = result;
        if (v29)
          *(_DWORD *)v51 = v29;
        else
          result = WTF::StringImpl::destroy(v51, v18);
      }
      else
      {
        word_1ECE82EE0 = 1280;
        qword_1ECE82ED0 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82ED8 = 0;
        qword_1ECE82EE8 = (uint64_t)v17;
        unk_1ECE82EF0 = result;
      }
      byte_1ECE82B37 = 1;
      v3 = v39;
      v2 = v49;
    }
    if (v2 == &qword_1ECE82ED0)
      goto LABEL_22;
    if ((byte_1ECE82B35 & 1) == 0)
    {
      v40 = v3;
      v50 = v2;
      v19 = WTF::fastMalloc((WTF *)0xC);
      *(_DWORD *)v19 = 4;
      *(_QWORD *)(v19 + 4) = 0x3C203C103C003BFLL;
      WTF::AtomStringImpl::add();
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = off_1E339ED38;
      if (v51)
      {
        v30 = *(_DWORD *)v51;
        *(_DWORD *)v51 += 2;
        word_1ECE82E90 = 1280;
        qword_1ECE82E80 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82E88 = (uint64_t)v51;
        qword_1ECE82E98 = v19;
        unk_1ECE82EA0 = result;
        if (v30)
          *(_DWORD *)v51 = v30;
        else
          result = WTF::StringImpl::destroy(v51, v20);
      }
      else
      {
        word_1ECE82E90 = 1280;
        qword_1ECE82E80 = (uint64_t)&off_1E339E9A0;
        qword_1ECE82E88 = 0;
        qword_1ECE82E98 = v19;
        unk_1ECE82EA0 = result;
      }
      byte_1ECE82B35 = 1;
      v3 = v40;
      v2 = v50;
    }
    if (v2 == &qword_1ECE82E80)
    {
LABEL_22:
      v4 = 4;
LABEL_24:
      **v3 |= v4;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::animation(void)::$_0,BOOL,WebCore::MQ::FeatureEvaluationContext const&>::call()
{
  return 1;
}

uint64_t WebCore::MQ::Features::BooleanSchema::evaluate(uint64_t a1, WebCore::MQ *a2, uint64_t a3)
{
  const WebCore::MQ::Feature *v4;

  v4 = (const WebCore::MQ::Feature *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3);
  return WebCore::MQ::evaluateBooleanFeature(a2, v4);
}

void WebCore::MQ::Features::BooleanSchema::~BooleanSchema(WebCore::MQ::Features::BooleanSchema *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339E950;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339E950;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MQ::Features::anyHover(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  WTF *v6;
  void *v7;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    ++*(_DWORD *)v4;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 288))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16)))
      v5 = 733;
    else
      v5 = 6;
    *(_WORD *)(a2 + 16) = v5;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x100000001;
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::Page::~Page(v4);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    *(_WORD *)(a2 + 16) = 6;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x100000001;
  }
}

void WebCore::MQ::Features::IdentifierSchema::~IdentifierSchema(WebCore::MQ::Features::IdentifierSchema *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339E9A0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339E9A0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::anyPointer(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  __int16 *v7;
  unsigned int v8;
  __int16 v9;
  __int16 *v10;
  int v11;
  BOOL v12;
  WTF *v13;
  void *v14;
  __int16 *v15;
  __int16 v16;
  __int16 *v17;
  uint64_t v18;
  __int16 v19;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 24);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v4 = 0;
    v17 = &v19;
    v18 = 1;
    v6 = 1;
    goto LABEL_7;
  }
  ++*(_DWORD *)v4;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 304))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16));
  v17 = &v19;
  v18 = 1;
  if ((result & 2) == 0)
  {
    if ((result & 1) == 0)
    {
      v6 = 0;
LABEL_7:
      v7 = &v19;
      goto LABEL_8;
    }
    v9 = 731;
LABEL_21:
    *(_WORD *)(a2 + 16) = v9;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x100000001;
    goto LABEL_22;
  }
  v9 = 732;
  v19 = 732;
  HIDWORD(v18) = 1;
  if ((result & 1) == 0)
    goto LABEL_21;
  v16 = 731;
  v10 = (__int16 *)WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, 2uLL, (unint64_t)&v16);
  v11 = HIDWORD(v18);
  v7 = v17;
  v17[HIDWORD(v18)] = *v10;
  v12 = __CFADD__(v11, 1);
  v8 = v11 + 1;
  HIDWORD(v18) = v8;
  if (v12)
  {
    v16 = 6;
    if (!(_DWORD)v18)
    {
      v15 = (__int16 *)WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v17, 1uLL, (unint64_t)&v16);
      v6 = 0;
      v8 = HIDWORD(v18) + 1;
      v7 = v17;
      v17[HIDWORD(v18)] = *v15;
      goto LABEL_9;
    }
    v6 = 0;
LABEL_8:
    *v7 = 6;
    v8 = 1;
LABEL_9:
    HIDWORD(v18) = v8;
    goto LABEL_10;
  }
  v6 = 0;
LABEL_10:
  result = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 1;
  if (v7 == &v19)
  {
    result = (uint64_t)memcpy((void *)result, v7, 2 * v8);
    *(_DWORD *)(a2 + 12) = HIDWORD(v18);
    if ((v6 & 1) != 0)
      return result;
  }
  else
  {
    *(_QWORD *)a2 = v7;
    *(_DWORD *)(a2 + 8) = v18;
    *(_DWORD *)(a2 + 12) = v8;
    if ((v6 & 1) != 0)
      return result;
  }
LABEL_22:
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    return WTF::fastFree(v13, v14);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 2 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      if (v10 < 2)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_30;
      }
      if (!(v10 >> 31))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(2 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 2 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 2 * ((uint64_t)(v3 - (_QWORD)v5) >> 1);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1959042B8);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 2)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v15 >> 31)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(2 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 2 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

float WTF::Detail::CallableWrapper<WebCore::MQ::Features::aspectRatio(void)::$_0,WebCore::FloatSize,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    v4 = *(_QWORD *)(v3 + 288);
  else
    v4 = 0;
  if (*(int *)(v4 + 248) >= 1 && *(int *)(v4 + 252) >= 1 && *(_BYTE *)(v4 + 321))
  {
    v6 = *(_QWORD *)(v4 + 248);
    v5 = v6;
  }
  else
  {
    v5 = WebCore::ScrollView::sizeForUnobscuredContent((id *)v4, 0);
    LODWORD(v6) = *(_DWORD *)(v4 + 248);
  }
  if ((int)v6 < 1 || *(int *)(v4 + 252) < 1 || !*(_BYTE *)(v4 + 321))
    WebCore::ScrollView::sizeForUnobscuredContent((id *)v4, 0);
  return (float)v5;
}

uint64_t WebCore::MQ::Features::RatioSchema::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  int v9;
  _BOOL4 v11;

  v4 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3);
  v6 = v4;
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v4 != 0.0;
  v7 = v5;
  v8 = WebCore::MQ::evaluateRatioComparison(a2 + 16, 0, v4, v5);
  v9 = WebCore::MQ::evaluateRatioComparison(a2 + 40, (WTF::StringImpl *)1, v6, v7);
  v11 = v8 == 1 && v9 == 1;
  if (v9 == 2 || v8 == 2)
    return 2;
  else
    return v11;
}

void WebCore::MQ::Features::RatioSchema::~RatioSchema(WebCore::MQ::Features::RatioSchema *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EA18;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EA18;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::color(void)::$_0,int,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528) + 8) + 128) + 8);
  v3 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  if (v3)
  {
    v4 = v3[2];
    v3[2] = v4 + 1;
    if (v4)
      v3[2] = v4;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  return 8;
}

uint64_t WebCore::MQ::Features::IntegerSchema::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  _BOOL4 v9;

  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3);
  v5 = v4;
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v4 != 0;
  v6 = WebCore::MQ::evaluateIntegerComparison(v4, (char *)(a2 + 16), 0);
  v7 = WebCore::MQ::evaluateIntegerComparison(v5, (char *)(a2 + 40), 1);
  v9 = v6 == 1 && v7 == 1;
  if (v7 == 2 || v6 == 2)
    return 2;
  else
    return v9;
}

void WebCore::MQ::Features::IntegerSchema::~IntegerSchema(WebCore::MQ::Features::IntegerSchema *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EA68;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EA68;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebCore::MQ::Features::colorGamut(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  WebCore::Widget *v9;
  _DWORD *v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  __int16 *v16;
  void *result;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;
  _QWORD *v24;

  v3 = *a1;
  v21 = &v23;
  v23 = 936;
  v22 = 0x100000001;
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 528);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
    v5 = 0;
  }
  v8 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v5 + 128) + 8) + 56))(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 8));
  if (v8)
  {
    v10 = v8;
    ++v8[2];
    v11 = WebCore::screenSupportsExtendedColor((WebCore *)v8, v9);
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  else
  {
    v11 = WebCore::screenSupportsExtendedColor(0, v9);
  }
  v12 = (unsigned int *)(v5 + 8);
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v12;
    v24 = v19;
    WTF::ensureOnMainThread();
    v20 = v24;
    v24 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  }
  if (v11)
  {
    LOWORD(v24) = 934;
    v15 = HIDWORD(v22);
    if (HIDWORD(v22) == (_DWORD)v22)
    {
      v16 = (__int16 *)WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, HIDWORD(v22) + 1, (unint64_t)&v24);
      v15 = HIDWORD(v22);
      v21[HIDWORD(v22)] = *v16;
    }
    else
    {
      v21[HIDWORD(v22)] = 934;
    }
    HIDWORD(v22) = v15 + 1;
  }
  result = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_DWORD *)(a2 + 8) = 1;
  if (v21 == &v23)
  {
    v18 = HIDWORD(v22);
    result = memcpy(result, &v23, 2 * HIDWORD(v22));
  }
  else
  {
    *(_QWORD *)a2 = v21;
    v18 = HIDWORD(v22);
    *(_DWORD *)(a2 + 8) = v22;
  }
  *(_DWORD *)(a2 + 12) = v18;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::colorIndex(void)::$_0,int,WebCore::MQ::FeatureEvaluationContext const&>::call()
{
  return 0;
}

float WTF::Detail::CallableWrapper<WebCore::MQ::Features::deviceAspectRatio(void)::$_0,WebCore::FloatSize,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, WebCore::Widget *a2)
{
  unsigned int *v2;
  BOOL v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  float v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528) + 8) + 128)
                        + 8);
  if (v2)
    v3 = *((_BYTE *)v2 + 144) == 0;
  else
    v3 = 0;
  if (!v3)
    return 0.0;
  v4 = v2 + 2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v9 = WebCore::LocalFrame::screenSize((WebCore::LocalFrame *)v2, a2);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = off_1E31FE290;
    v10[1] = v4;
    v11 = v10;
    WTF::ensureOnMainThread();
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  return v9;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::deviceHeight(void)::$_0,WebCore::LayoutUnit,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, WebCore::Widget *a2)
{
  unsigned int *v2;
  BOOL v3;
  unsigned int *v4;
  unsigned int v5;
  float v6;
  double v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528) + 8) + 128)
                        + 8);
  if (v2)
    v3 = *((_BYTE *)v2 + 144) == 0;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v4 = v2 + 2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::LocalFrame::screenSize((WebCore::LocalFrame *)v2, a2);
  v7 = v6 * 64.0;
  if (v7 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFFLL;
  }
  else if (v7 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v7;
  }
  do
  {
    v8 = __ldaxr(v4);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v4));
  if (!v9)
  {
    atomic_store(1u, v4);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v4;
    v13 = v12;
    WTF::ensureOnMainThread();
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  return v11;
}

void WebCore::MQ::Features::LengthSchema::~LengthSchema(WebCore::MQ::Features::LengthSchema *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EB30;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EB30;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::devicePixelRatio(void)::$_0,double,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 288);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 328) + 280)
                                                                       + 16)
                                                         + 896))(&v16);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8) + 200);
        if (v14)
        {
          v7 = *(WTF::StringImpl **)(v14 + 136);
          if (v7)
          {
            if (*((_DWORD *)v7 + 1))
            {
              *(_DWORD *)v7 += 2;
              v15 = v16;
              v16 = v7;
              if (!v15)
                goto LABEL_7;
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v5);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
    }
  }
  v7 = v16;
  if (!v16)
  {
    v7 = *(WTF::StringImpl **)(v4 + 1040);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
LABEL_7:
  if (v7 == (WTF::StringImpl *)WebCore::screenAtomData)
  {
    v8 = *(_QWORD *)(v3 + 24);
    v9 = 1.0;
    if (v8)
    {
      v10 = *(_QWORD *)(v8 + 8);
      if (v10)
        v9 = *(float *)(v10 + 364);
    }
    if (v7)
      goto LABEL_12;
  }
  else
  {
    if (v7 == (WTF::StringImpl *)WebCore::printAtomData)
      v9 = 3.125;
    else
      v9 = 0.0;
    if (v7)
    {
LABEL_12:
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return v9;
}

void WebCore::MQ::Features::NumberSchema::~NumberSchema(WebCore::MQ::Features::NumberSchema *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EB80;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EB80;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::deviceWidth(void)::$_0,WebCore::LayoutUnit,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, WebCore::Widget *a2)
{
  unsigned int *v2;
  BOOL v3;
  unsigned int *v4;
  unsigned int v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528) + 8) + 128)
                        + 8);
  if (v2)
    v3 = *((_BYTE *)v2 + 144) == 0;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v4 = v2 + 2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WebCore::LocalFrame::screenSize((WebCore::LocalFrame *)v2, a2) * 64.0;
  if (v6 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFFLL;
  }
  else if (v6 <= -2147483650.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v6;
  }
  do
  {
    v7 = __ldaxr(v4);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v4));
  if (!v8)
  {
    atomic_store(1u, v4);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = off_1E31FE290;
    v11[1] = v4;
    v12 = v11;
    WTF::ensureOnMainThread();
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
  return v10;
}

void *WTF::Detail::CallableWrapper<WebCore::MQ::Features::dynamicRange(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned __int8 v7;
  _DWORD *v8;
  WebCore::Widget *v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  __int16 *v13;
  int v14;
  __int16 *v15;
  unsigned int v16;
  void *result;
  __int16 *v18;
  __int16 *v19;
  __int16 v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;

  v3 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528);
  if (v3)
    v3 = (_QWORD *)v3[1];
  v4 = (unsigned int *)(v3 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(unsigned __int8 *)(v3[17] + 376);
  if (v6 == 1)
  {
    v7 = 1;
  }
  else if (v6 == 2)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3[16] + 8) + 56))(*(_QWORD *)(v3[16] + 8));
    if (v8)
    {
      v10 = v8;
      ++v8[2];
      v7 = WebCore::screenSupportsHighDynamicRange((WebCore *)v8, v9);
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
    else
    {
      v7 = WebCore::screenSupportsHighDynamicRange(0, v9);
    }
  }
  do
  {
    v11 = __ldaxr(v4);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v4));
  if (!v12)
  {
    atomic_store(1u, v4);
    v18 = (__int16 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = off_1E31FE290;
    *((_QWORD *)v18 + 1) = v4;
    v21 = v18;
    WTF::ensureOnMainThread();
    v19 = v21;
    v21 = 0;
    if (v19)
      (*(void (**)(__int16 *))(*(_QWORD *)v19 + 8))(v19);
  }
  v21 = &v23;
  v23 = 975;
  v22 = 0x100000001;
  if ((v7 & 1) == 0)
  {
    result = (void *)(a2 + 16);
    *(_QWORD *)a2 = a2 + 16;
    v16 = 1;
    *(_DWORD *)(a2 + 8) = 1;
    goto LABEL_18;
  }
  v20 = 976;
  v13 = (__int16 *)WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, 2uLL, (unint64_t)&v20);
  v14 = HIDWORD(v22);
  v15 = v21;
  v21[HIDWORD(v22)] = *v13;
  v16 = v14 + 1;
  result = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_DWORD *)(a2 + 8) = 1;
  if (v15 == &v23)
  {
LABEL_18:
    result = memcpy(result, &v23, 2 * v16);
    goto LABEL_19;
  }
  *(_QWORD *)a2 = v15;
  *(_DWORD *)(a2 + 8) = v22;
LABEL_19:
  *(_DWORD *)(a2 + 12) = v16;
  return result;
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::forcedColors(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_WORD *)(a1 + 16) = 6;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 8) = 0x100000001;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::grid(void)::$_0,BOOL,WebCore::MQ::FeatureEvaluationContext const&>::call()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::height(void)::$_0,WebCore::LayoutUnit,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  BOOL v11;
  unsigned int v12;
  double v14;
  double v15;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = *(_QWORD *)(v4 + 288);
    if (v5)
      ++*(_DWORD *)(v5 + 8);
  }
  else
  {
    v5 = 0;
  }
  if (*(int *)(v5 + 248) >= 1 && *(int *)(v5 + 252) >= 1 && *(_BYTE *)(v5 + 321))
    v6 = *(_QWORD *)(v5 + 248);
  else
    v6 = WebCore::ScrollView::sizeForUnobscuredContent((id *)v5, 0);
  v7 = HIDWORD(v6);
  if (*(_DWORD *)(v5 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 1944);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
    *(_DWORD *)(v8 + 16) = v9 + 1;
    v10 = *(float *)(*(_QWORD *)(v8 + 104) + 184);
    v11 = v10 <= 1.0;
    if (v10 == 1.0)
    {
      if (v9 != -1)
      {
LABEL_13:
        *(_DWORD *)(v8 + 16) = v9;
        goto LABEL_14;
      }
    }
    else
    {
      v14 = v10;
      if (!v11)
      {
        if (v6 >= 0)
          LODWORD(v7) = HIDWORD(v6) + 1;
        else
          LODWORD(v7) = HIDWORD(v6) - 1;
      }
      v15 = (double)(int)v7 / v14 + dbl_1968DE9C0[(double)(int)v7 / v14 < 0.0];
      if (v15 >= -2147483650.0 && v15 <= 2147483650.0)
        LODWORD(v7) = (int)v15;
      else
        LODWORD(v7) = 0;
      if (v9 != -1)
        goto LABEL_13;
    }
    __break(0xC471u);
    JUMPOUT(0x19590531CLL);
  }
LABEL_14:
  v12 = (_DWORD)v7 << 6;
  if ((int)v7 < -33554432)
    v12 = 0x80000000;
  if ((int)v7 <= 0x1FFFFFF)
    return v12;
  else
    return 0x7FFFFFFFLL;
}

void WTF::Detail::CallableWrapper<WebCore::MQ::Features::hover(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  WTF *v6;
  void *v7;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    ++*(_DWORD *)v4;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 280))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16)))
      v5 = 733;
    else
      v5 = 6;
    *(_WORD *)(a2 + 16) = v5;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x100000001;
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::Page::~Page(v4);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    *(_WORD *)(a2 + 16) = 6;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x100000001;
  }
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::invertedColors(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  __int16 v7;
  WebCore *v8;
  _DWORD *v9;
  int IsInvertColorsEnabled;
  unsigned int v11;
  unsigned int v12;
  double result;
  _QWORD *v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 136) + 372);
  if (v6 == 1)
  {
    v7 = 463;
  }
  else if (v6 == 2)
  {
    v7 = 6;
  }
  else
  {
    {
      v8 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
    }
    else
    {
      v8 = 0;
      WebCore::screenProperties(void)::screenProperties = 0;
      qword_1ECE90D08 = 0;
    }
    v9 = WebCore::screenData(v8);
    if (v9)
      IsInvertColorsEnabled = *((_BYTE *)v9 + 49) != 0;
    else
      IsInvertColorsEnabled = PAL::softLinkUIKitUIAccessibilityIsInvertColorsEnabled(0);
    if (IsInvertColorsEnabled)
      v7 = 463;
    else
      v7 = 6;
  }
  do
  {
    v11 = __ldaxr(v4);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v4));
  if (!v12)
  {
    atomic_store(1u, v4);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E31FE290;
    v14[1] = v4;
    v15 = v14;
    WTF::ensureOnMainThread();
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  *(_WORD *)(a2 + 16) = v7;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::monochrome(void)::$_0,int,WebCore::MQ::FeatureEvaluationContext const&>::call(PAL *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  char IsGrayscaleEnabled;
  char v12;
  _DWORD *v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;

  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528);
  if (v2)
    v2 = (_QWORD *)v2[1];
  v3 = (unsigned int *)(v2 + 1);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (*(_BYTE *)(*(_QWORD *)(v2[16] + 8) + 144))
    v5 = 0;
  else
    v5 = *(_QWORD *)(v2[16] + 8);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = *(unsigned __int8 *)(v2[17] + 373);
  if (v8 == 1)
  {
    if (v5)
    {
LABEL_21:
      v13 = *(_DWORD **)(v5 + 288);
      if (v13)
      {
        v14 = v13[2];
        v13[2] = v14 + 1;
        if (v14)
          v13[2] = v14;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      }
      v9 = 8;
      goto LABEL_29;
    }
LABEL_25:
    v9 = 0;
    goto LABEL_32;
  }
  if (v8 == 2)
  {
    v9 = 0;
    if (!v5)
      goto LABEL_32;
    goto LABEL_29;
  }
  if (!v5)
    goto LABEL_25;
  v10 = *(_DWORD **)(v5 + 288);
  if (v10)
  {
    ++v10[2];
    IsGrayscaleEnabled = PAL::softLinkUIKitUIAccessibilityIsGrayscaleEnabled(a1);
    v12 = IsGrayscaleEnabled;
    if (v10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      if ((v12 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      --v10[2];
      if ((IsGrayscaleEnabled & 1) != 0)
        goto LABEL_21;
    }
  }
  else if ((PAL::softLinkUIKitUIAccessibilityIsGrayscaleEnabled(a1) & 1) != 0)
  {
    goto LABEL_21;
  }
  v9 = 0;
LABEL_29:
  v15 = (unsigned int *)(v5 + 8);
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v22 = off_1E31FE290;
    v22[1] = v15;
    v24 = v22;
    WTF::ensureOnMainThread();
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  do
  {
LABEL_32:
    v18 = __ldaxr(v3);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v3));
  if (!v19)
  {
    atomic_store(1u, v3);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E31FE290;
    v21[1] = v3;
    v23 = v21;
    WTF::ensureOnMainThread();
    if (v23)
      (*(void (**)(_QWORD *))(*v23 + 8))(v23);
  }
  return v9;
}

unint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::orientation(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  __int16 v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    v5 = *(_QWORD *)(v4 + 288);
  else
    v5 = 0;
  ++*(_DWORD *)(v5 + 8);
  if (*(int *)(v5 + 248) >= 1 && *(int *)(v5 + 252) >= 1 && *(_BYTE *)(v5 + 321))
  {
    v7 = *(_QWORD *)(v5 + 248);
    v6 = v7;
  }
  else
  {
    v6 = WebCore::ScrollView::sizeForUnobscuredContent((id *)v5, 0);
    LODWORD(v7) = *(_DWORD *)(v5 + 248);
  }
  v8 = HIDWORD(v6);
  if ((int)v7 >= 1 && *(int *)(v5 + 252) >= 1 && *(_BYTE *)(v5 + 321))
    result = *(_QWORD *)(v5 + 248);
  else
    result = WebCore::ScrollView::sizeForUnobscuredContent((id *)v5, 0);
  if ((int)v8 >= (int)result)
    v10 = 484;
  else
    v10 = 469;
  *(_WORD *)(a2 + 16) = v10;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  if (*(_DWORD *)(v5 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 8);
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::MQ::Features::pointer(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *result;
  char v7;
  char v8;
  char v9;
  WebCore::Quirks *v10;
  __int16 v11;
  __int16 *v12;
  unsigned int v13;
  __int16 *v14;
  int v15;
  BOOL v16;
  WTF *v17;
  void *v18;
  __int16 *v19;
  __int16 v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 24);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v4 = 0;
    v21 = &v23;
    v22 = 1;
    v9 = 1;
LABEL_15:
    v12 = &v23;
    goto LABEL_16;
  }
  ++*(_DWORD *)v4;
  result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 296))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16));
  v7 = (char)result;
  if ((unsigned __int16)result <= 0x100u)
    v7 = 0;
  if ((v7 & 1) != 0)
  {
    v8 = (char)result;
    v10 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 688);
    if (!v10)
      v10 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)a1 + 8));
    result = (void *)WebCore::Quirks::shouldPreventPointerMediaQueryFromEvaluatingToCoarse(v10);
    if ((_DWORD)result)
    {
      v11 = 732;
      goto LABEL_29;
    }
  }
  else
  {
    v8 = v7;
  }
  v21 = &v23;
  v22 = 1;
  if ((v8 & 2) == 0)
  {
    if ((v8 & 1) == 0)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v11 = 731;
LABEL_29:
    *(_WORD *)(a2 + 16) = v11;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x100000001;
    goto LABEL_30;
  }
  v11 = 732;
  v23 = 732;
  HIDWORD(v22) = 1;
  if ((v8 & 1) == 0)
    goto LABEL_29;
  v20 = 731;
  v14 = (__int16 *)WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, 2uLL, (unint64_t)&v20);
  v15 = HIDWORD(v22);
  v12 = v21;
  v21[HIDWORD(v22)] = *v14;
  v16 = __CFADD__(v15, 1);
  v13 = v15 + 1;
  HIDWORD(v22) = v13;
  if (v16)
  {
    v20 = 6;
    if (!(_DWORD)v22)
    {
      v19 = (__int16 *)WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v21, 1uLL, (unint64_t)&v20);
      v9 = 0;
      v13 = HIDWORD(v22) + 1;
      v12 = v21;
      v21[HIDWORD(v22)] = *v19;
      goto LABEL_17;
    }
    v9 = 0;
LABEL_16:
    *v12 = 6;
    v13 = 1;
LABEL_17:
    HIDWORD(v22) = v13;
    goto LABEL_18;
  }
  v9 = 0;
LABEL_18:
  result = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 1;
  if (v12 == &v23)
  {
    result = memcpy(result, v12, 2 * v13);
    *(_DWORD *)(a2 + 12) = HIDWORD(v22);
    if ((v9 & 1) != 0)
      return result;
  }
  else
  {
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 8) = v22;
    *(_DWORD *)(a2 + 12) = v13;
    if ((v9 & 1) != 0)
      return result;
  }
LABEL_30:
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page(v4);
    return (void *)WTF::fastFree(v17, v18);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::prefersContrast(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  __int16 v7;
  uint64_t (**v8)();
  unsigned int v9;
  unsigned int v10;
  double result;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 136) + 374);
  if (v6)
  {
    if (v6 == 1)
      v7 = 960;
    else
      v7 = 959;
  }
  else
  {
    {
      v8 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
    }
    else
    {
      v8 = &off_1E3354DA0;
      WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
    }
    if (((unsigned int (*)(uint64_t *))v8[6])(&WebCore::Theme::singleton(void)::theme))
      v7 = 960;
    else
      v7 = 959;
  }
  do
  {
    v9 = __ldaxr(v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v4));
  if (!v10)
  {
    atomic_store(1u, v4);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v4;
    v13 = v12;
    WTF::ensureOnMainThread();
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  *(_WORD *)(a2 + 16) = v7;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::MQ::Features::prefersDarkInterface(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WebCore::Page *v4;
  int v5;
  __int16 v6;
  WTF *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 24);
  if (v3)
    v4 = *(WebCore::Page **)(v3 + 8);
  else
    v4 = 0;
  v5 = (*(_DWORD *)v4)++;
  v6 = 959;
  if (*((_BYTE *)v4 + 450))
  {
    if (WebCore::Page::useDarkAppearance(v4))
      v6 = 957;
    else
      v6 = 959;
    v5 = *(_DWORD *)v4 - 1;
  }
  *(_WORD *)(a2 + 16) = v6;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page((uint64_t)v4);
    WTF::fastFree(v7, v8);
  }
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::prefersReducedMotion(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  __int16 v7;
  uint64_t (**v8)();
  unsigned int v9;
  unsigned int v10;
  double result;
  _QWORD *v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 136) + 375);
  if (v6)
  {
    if (v6 == 1)
      v7 = 958;
    else
      v7 = 959;
  }
  else
  {
    {
      v8 = (uint64_t (**)())WebCore::Theme::singleton(void)::theme;
    }
    else
    {
      v8 = &off_1E3354DA0;
      WebCore::Theme::singleton(void)::theme = (uint64_t)&off_1E3354DA0;
    }
    if (((unsigned int (*)(uint64_t *))v8[7])(&WebCore::Theme::singleton(void)::theme))
      v7 = 958;
    else
      v7 = 959;
  }
  do
  {
    v9 = __ldaxr(v4);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v4));
  if (!v10)
  {
    atomic_store(1u, v4);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v4;
    v13 = v12;
    WTF::ensureOnMainThread();
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  *(_WORD *)(a2 + 16) = v7;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  return result;
}

float WTF::Detail::CallableWrapper<WebCore::MQ::Features::resolution(void)::$_0,float,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 288);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v4 + 328) + 280)
                                                                       + 16)
                                                         + 896))(&v16);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8) + 200);
        if (v14)
        {
          v7 = *(WTF::StringImpl **)(v14 + 136);
          if (v7)
          {
            if (*((_DWORD *)v7 + 1))
            {
              *(_DWORD *)v7 += 2;
              v15 = v16;
              v16 = v7;
              if (!v15)
                goto LABEL_7;
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v5);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
        }
      }
    }
  }
  v7 = v16;
  if (!v16)
  {
    v7 = *(WTF::StringImpl **)(v4 + 1040);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
LABEL_7:
  if (v7 == (WTF::StringImpl *)WebCore::screenAtomData)
  {
    v8 = *(_QWORD *)(v3 + 24);
    v9 = 1.0;
    if (v8)
    {
      v10 = *(_QWORD *)(v8 + 8);
      if (v10)
        v9 = *(float *)(v10 + 364);
    }
    if (v7)
      goto LABEL_12;
  }
  else
  {
    if (v7 == (WTF::StringImpl *)WebCore::printAtomData)
      v9 = 3.125;
    else
      v9 = 0.0;
    if (v7)
    {
LABEL_12:
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  return v9;
}

uint64_t WebCore::MQ::Features::ResolutionSchema::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  float v5;
  int v6;
  int v7;
  _BOOL4 v9;

  v4 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a3);
  v5 = v4;
  if (!(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a2 + 56)))
    return v4 != 0.0;
  v6 = WebCore::MQ::evaluateResolutionComparison(a2 + 16, 0, v4);
  v7 = WebCore::MQ::evaluateResolutionComparison(a2 + 40, 1, v5);
  v9 = v6 == 1 && v7 == 1;
  if (v7 == 2 || v6 == 2)
    return 2;
  else
    return v9;
}

void WebCore::MQ::Features::ResolutionSchema::~ResolutionSchema(WebCore::MQ::Features::ResolutionSchema *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EDD8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E339EDD8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E339E7B8;
  v4 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    WTF::fastFree(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::scan(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *a1 = a1 + 2;
  *(_QWORD *)&result = 1;
  a1[1] = 1;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::MQ::Features::scripting(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v3 + 304);
  v7 = *(_DWORD *)(v6 + 8) + 1;
  *(_DWORD *)(v6 + 8) = v7;
  v8 = *(_QWORD **)(v6 + 16);
  v9 = v8[37];
  if (!v9 || (*(_BYTE *)(v9 + 268) & 0x10) == 0)
  {
    v10 = v8[3];
    if (v10)
    {
      if (*(_QWORD *)(v10 + 8))
      {
        v11 = v8[17];
        if (*(_BYTE *)(v11 + 245))
          v12 = *(unsigned __int8 *)(v11 + 244) != 0;
        else
          v12 = (*(_QWORD *)(v11 + 688) >> 52) & 1;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v8[35] + 16) + 968))(*(_QWORD *)(v8[35] + 16), v12))
        {
          v13 = 738;
        }
        else
        {
          v13 = 6;
        }
        v7 = *(_DWORD *)(v6 + 8);
        if (v7)
          goto LABEL_13;
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x195906224);
      }
    }
  }
  v13 = 6;
  if (!v7)
    goto LABEL_18;
LABEL_13:
  *(_DWORD *)(v6 + 8) = v7 - 1;
  *(_WORD *)(a2 + 16) = v13;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  do
  {
    v14 = __ldaxr(v4);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v4));
  if (!v15)
  {
    atomic_store(1u, v4);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E31FE290;
    v16[1] = v4;
    v17 = v16;
    WTF::ensureOnMainThread();
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::transform2d(void)::$_0,BOOL,WebCore::MQ::FeatureEvaluationContext const&>::call()
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::transform3d(void)::$_0,BOOL,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  WebCore::RenderLayerCompositor *v4;
  uint64_t result;
  WebCore::RenderLayerCompositor *v6;
  WebCore::RenderLayerCompositor *v7;
  WTF *v8;
  void *v9;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 1944);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 + 16) + 1;
  *(_DWORD *)(v2 + 16) = v3;
  v4 = *(WebCore::RenderLayerCompositor **)(v2 + 400);
  if (!v4)
  {
    v6 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v4 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v6, (WebCore::RenderView *)v2);
    v7 = *(WebCore::RenderLayerCompositor **)(v2 + 400);
    *(_QWORD *)(v2 + 400) = v4;
    if (v7)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v7);
      WTF::fastFree(v8, v9);
      v4 = *(WebCore::RenderLayerCompositor **)(v2 + 400);
    }
    v3 = *(_DWORD *)(v2 + 16);
    if (v3)
      goto LABEL_4;
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x195906358);
  }
  if (!v3)
    goto LABEL_11;
LABEL_4:
  if (*((_BYTE *)v4 + 132))
    result = *((_BYTE *)v4 + 128) & 1;
  else
    result = 0;
  *(_DWORD *)(v2 + 16) = v3 - 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::transition(void)::$_0,BOOL,WebCore::MQ::FeatureEvaluationContext const&>::call()
{
  return 1;
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::update(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  _BOOL4 v7;
  __int16 v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 288);
  if (!v3)
  {
    *(_WORD *)(a2 + 16) = 538;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)(a2 + 8) = 0x100000001;
    return result;
  }
  ++*(_DWORD *)(v3 + 8);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v3 + 328) + 280)
                                                                       + 16)
                                                         + 896))(&v14);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 328) + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 80) + 8) + 200);
        if (v12)
        {
          v6 = *(WTF::StringImpl **)(v12 + 136);
          if (v6)
          {
            if (*((_DWORD *)v6 + 1))
            {
              *(_DWORD *)v6 += 2;
              v13 = v14;
              v14 = v6;
              if (!v13)
                goto LABEL_6;
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v4);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
        }
      }
    }
  }
  v6 = v14;
  if (!v14)
  {
    v6 = *(WTF::StringImpl **)(v3 + 1040);
    if (!v6)
    {
      v7 = WebCore::printAtomData == 0;
      goto LABEL_8;
    }
    *(_DWORD *)v6 += 2;
  }
LABEL_6:
  v7 = v6 == (WTF::StringImpl *)WebCore::printAtomData;
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v4);
  else
    *(_DWORD *)v6 -= 2;
LABEL_8:
  if (v7)
    v8 = 6;
  else
    v8 = 538;
  *(_WORD *)(a2 + 16) = v8;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  if (*(_DWORD *)(v3 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  else
    --*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::videoPlayableInline(void)::$_0,BOOL,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528) + 8) + 136)
                    + 664) >> 22) & 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::width(void)::$_0,WebCore::LayoutUnit,WebCore::MQ::FeatureEvaluationContext const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float v9;
  BOOL v10;
  unsigned int v11;
  double v13;
  double v14;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 528);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v5 = *(_QWORD *)(v4 + 288);
    if (v5)
      ++*(_DWORD *)(v5 + 8);
  }
  else
  {
    v5 = 0;
  }
  if (*(int *)(v5 + 248) >= 1 && *(int *)(v5 + 252) >= 1 && *(_BYTE *)(v5 + 321))
    v6 = *(_QWORD *)(v5 + 248);
  else
    LODWORD(v6) = WebCore::ScrollView::sizeForUnobscuredContent((id *)v5, 0);
  if (*(_DWORD *)(v5 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  else
    --*(_DWORD *)(v5 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 1944);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 16);
    *(_DWORD *)(v7 + 16) = v8 + 1;
    v9 = *(float *)(*(_QWORD *)(v7 + 104) + 184);
    v10 = v9 <= 1.0;
    if (v9 == 1.0)
    {
      if (v8 != -1)
      {
LABEL_13:
        *(_DWORD *)(v7 + 16) = v8;
        goto LABEL_14;
      }
    }
    else
    {
      v13 = v9;
      if (!v10)
      {
        if ((int)v6 >= 0)
          LODWORD(v6) = v6 + 1;
        else
          LODWORD(v6) = v6 - 1;
      }
      v14 = (double)(int)v6 / v13 + dbl_1968DE9C0[(double)(int)v6 / v13 < 0.0];
      if (v14 >= -2147483650.0 && v14 <= 2147483650.0)
        LODWORD(v6) = (int)v14;
      else
        LODWORD(v6) = 0;
      if (v8 != -1)
        goto LABEL_13;
    }
    __break(0xC471u);
    JUMPOUT(0x1959066C4);
  }
LABEL_14:
  v11 = (_DWORD)v6 << 6;
  if ((int)v6 < -33554432)
    v11 = 0x80000000;
  if ((int)v6 <= 0x1FFFFFF)
    return v11;
  else
    return 0x7FFFFFFFLL;
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::displayMode(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  double result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[9];
  unsigned __int8 v16;
  char v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v3 + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    LOBYTE(v15[0]) = 0;
    v17 = 0;
    v8 = 973;
    if (*(_BYTE *)(v7 + 1528))
    {
      WebCore::ApplicationManifest::ApplicationManifest((WebCore::ApplicationManifest *)v15, (const WebCore::ApplicationManifest *)(v7 + 1264));
      v17 = 1;
      if (v16 >= 4u)
        v8 = 973;
      else
        v8 = 973 - v16;
      WebCore::ApplicationManifest::~ApplicationManifest(v15, v9);
    }
  }
  else
  {
    v8 = 973;
  }
  do
  {
    v10 = __ldaxr(v4);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v4));
  if (!v11)
  {
    atomic_store(1u, v4);
    v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = off_1E31FE290;
    *((_QWORD *)v13 + 1) = v4;
    v15[0] = v13;
    WTF::ensureOnMainThread();
    v14 = v15[0];
    v15[0] = 0;
    if (v14)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 8))(v14);
  }
  *(_WORD *)(a2 + 16) = v8;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  return result;
}

WebCore::ApplicationManifest *WebCore::ApplicationManifest::ApplicationManifest(WebCore::ApplicationManifest *this, const WebCore::ApplicationManifest *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  _DWORD *v10;
  __int128 v11;
  _DWORD *v12;
  __int128 v13;
  _DWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  _DWORD *v26;
  uint64_t *v27;
  _DWORD *v28;
  __int128 v29;
  _QWORD *v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 1) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 2) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 3) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 4) = v8;
  v9 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v9;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  v10 = (_DWORD *)*((_QWORD *)a2 + 10);
  if (v10)
    *v10 += 2;
  *((_QWORD *)this + 10) = v10;
  v11 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 88) = v11;
  v12 = (_DWORD *)*((_QWORD *)a2 + 15);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 15) = v12;
  v13 = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = v13;
  v14 = (_DWORD *)*((_QWORD *)a2 + 20);
  if (v14)
    *v14 += 2;
  *((_QWORD *)this + 20) = v14;
  v15 = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)this + 168) = v15;
  v16 = *((_QWORD *)a2 + 25);
  *((_QWORD *)this + 25) = v16;
  if ((v16 & 0x8000000000000) != 0)
  {
    v36 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v17 = *((_QWORD *)a2 + 26);
  *((_QWORD *)this + 26) = v17;
  if ((v17 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
  v18 = *((unsigned int *)a2 + 57);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 57) = v18;
  if ((_DWORD)v18)
  {
    if (v18 >> 29)
      goto LABEL_43;
    v31 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v18));
    *((_DWORD *)this + 56) = v18;
    *((_QWORD *)this + 27) = v31;
    v32 = *((unsigned int *)a2 + 57);
    if ((_DWORD)v32)
    {
      v33 = (_DWORD **)*((_QWORD *)a2 + 27);
      v34 = 8 * v32;
      do
      {
        v35 = *v33;
        if (*v33)
          *v35 += 2;
        *v31++ = v35;
        ++v33;
        v34 -= 8;
      }
      while (v34);
    }
  }
  WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)this + 232, (uint64_t *)a2 + 29);
  v19 = *((unsigned int *)a2 + 65);
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 65) = v19;
  if (!(_DWORD)v19)
    return this;
  if (v19 >> 26)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x195906A74);
  }
  v20 = WTF::fastMalloc((WTF *)(v19 << 6));
  *((_DWORD *)this + 64) = v19;
  *((_QWORD *)this + 31) = v20;
  v21 = *((unsigned int *)a2 + 65);
  if ((_DWORD)v21)
  {
    v22 = *((_QWORD *)a2 + 31);
    v23 = (uint64_t *)(v22 + (v21 << 6));
    v24 = v20 + 48;
    v25 = (uint64_t *)(v22 + 48);
    do
    {
      v27 = v25 - 6;
      v26 = (_DWORD *)*(v25 - 6);
      if (v26)
        *v26 += 2;
      *(_QWORD *)(v24 - 48) = v26;
      v28 = (_DWORD *)*(v25 - 5);
      if (v28)
        *v28 += 2;
      *(_QWORD *)(v24 - 40) = v28;
      v29 = *((_OWORD *)v25 - 1);
      *(_OWORD *)(v24 - 32) = *((_OWORD *)v25 - 2);
      *(_OWORD *)(v24 - 16) = v29;
      v24 = WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v24, v25)+ 64;
      v25 += 8;
    }
    while (v27 + 8 != v23);
  }
  return this;
}

uint64_t WTF::Vector<WebCore::ApplicationManifest::Icon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  __int128 v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD *v19;

  v3 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >= 0x38E38E4)
    {
LABEL_20:
      __break(0xC471u);
      JUMPOUT(0x195906BD8);
    }
    v5 = 72 * v3;
    v6 = WTF::fastMalloc((WTF *)(72 * v3));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = v6;
      v9 = *a2;
      v10 = v9 + 72 * v7;
      do
      {
        v11 = *(_DWORD **)v9;
        if (*(_QWORD *)v9)
          *v11 += 2;
        *(_QWORD *)v8 = v11;
        v12 = *(_OWORD *)(v9 + 8);
        *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v8 + 8) = v12;
        v13 = *(unsigned int *)(v9 + 52);
        *(_QWORD *)(v8 + 40) = 0;
        *(_QWORD *)(v8 + 48) = 0;
        *(_DWORD *)(v8 + 52) = v13;
        if ((_DWORD)v13)
        {
          if (v13 >> 29)
            goto LABEL_20;
          v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v13));
          *(_DWORD *)(v8 + 48) = v13;
          *(_QWORD *)(v8 + 40) = v15;
          v16 = *(unsigned int *)(v9 + 52);
          if ((_DWORD)v16)
          {
            v17 = *(_DWORD ***)(v9 + 40);
            v18 = 8 * v16;
            do
            {
              v19 = *v17;
              if (*v17)
                *v19 += 2;
              *v15++ = v19;
              ++v17;
              v18 -= 8;
            }
            while (v18);
          }
        }
        v14 = *(_DWORD **)(v9 + 56);
        if (v14)
          *v14 += 2;
        *(_QWORD *)(v8 + 56) = v14;
        *(_BYTE *)(v8 + 64) = *(_BYTE *)(v9 + 64);
        v8 += 72;
        v9 += 72;
      }
      while (v9 != v10);
    }
  }
  return a1;
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::overflowBlock(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  __int16 v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 288);
  if (!v3)
    goto LABEL_27;
  ++*(_DWORD *)(v3 + 8);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v3 + 328) + 280)
                                                                       + 16)
                                                         + 896))(&v17);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v3 + 328) + 24);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 80) + 8) + 200);
        if (v15)
        {
          v6 = *(WTF::StringImpl **)(v15 + 136);
          if (v6)
          {
            if (*((_DWORD *)v6 + 1))
            {
              *(_DWORD *)v6 += 2;
              v16 = v17;
              v17 = v6;
              if (!v16)
                goto LABEL_6;
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v4);
              else
                *(_DWORD *)v16 -= 2;
            }
          }
        }
      }
    }
  }
  v6 = v17;
  if (!v17)
  {
    v6 = *(WTF::StringImpl **)(v3 + 1040);
    if (v6)
      *(_DWORD *)v6 += 2;
  }
LABEL_6:
  if (v6 == (WTF::StringImpl *)WebCore::printAtomData)
  {
    v10 = 1;
  }
  else
  {
    LODWORD(v7) = *(unsigned __int8 *)(v3 + 1316);
    if (!*(_BYTE *)(v3 + 1316))
    {
      if (*(_BYTE *)(v3 + 1317)
        || *(_DWORD *)(v3 + 1320)
        || *(_DWORD *)(v3 + 1324)
        || (v8 = *(_QWORD *)(v3 + 328), *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8) != v8))
      {
        LODWORD(v7) = 0;
      }
      else
      {
        v7 = *(unsigned __int8 **)(v8 + 24);
        if (v7)
        {
          v9 = *((_QWORD *)v7 + 1);
          if (v9)
            v7 = (unsigned __int8 *)(v9 + 468);
          else
            v7 = (unsigned __int8 *)(v3 + 1316);
          LODWORD(v7) = *v7;
        }
      }
    }
    v10 = (_DWORD)v7 != 0;
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*(_DWORD *)(v3 + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (v10)
      goto LABEL_25;
LABEL_27:
    v11 = 489;
    goto LABEL_28;
  }
  --*(_DWORD *)(v3 + 8);
  if (!v10)
    goto LABEL_27;
LABEL_25:
  v11 = 737;
LABEL_28:
  *(_WORD *)(a2 + 16) = v11;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  return result;
}

double WTF::Detail::CallableWrapper<WebCore::MQ::Features::overflowInline(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_WORD *)(a1 + 16) = 489;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 8) = 0x100000001;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MQ::Features::prefersColorScheme(void)::$_0,WTF::Vector<WebCore::CSSValueID,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::MQ::FeatureEvaluationContext const&>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  WebCore::Page *v4;
  uint64_t result;
  __int16 v6;
  WTF *v7;
  void *v8;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 528) + 8) + 24);
  if (v3)
    v4 = *(WebCore::Page **)(v3 + 8);
  else
    v4 = 0;
  ++*(_DWORD *)v4;
  result = WebCore::Page::useDarkAppearance(v4);
  if ((_DWORD)result)
    v6 = 964;
  else
    v6 = 963;
  *(_WORD *)(a2 + 16) = v6;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::Page::~Page((uint64_t)v4);
    return WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

void WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeCondition(uint64_t a1, __int128 **this, uint64_t a3, int *a4)
{
  __int128 *v8;
  __int128 *v9;
  void *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int16 v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  char v24[8];
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE v28[80];
  int v29;
  unsigned __int8 v30;
  char v31;
  char v32[8];
  WTF *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *this;
  if (*this >= this[1])
  {
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v8 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_BYTE *)v8 & 0x3F) == 0)
  {
    v9 = *this;
    if (*this >= this[1])
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) == 0)
    {
      v15 = *((_DWORD *)v9 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
        *((_DWORD *)v9 + 4) = v15;
      }
      if ((unsigned __int16)v15 == 1008)
      {
        WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
        WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeQueryInParens((uint64_t)v28, (WTF::StringImpl **)this, a3, a4);
        v16 = v30;
        if (v30 && *this == this[1])
        {
          v24[0] = 2;
          v32[0] = 0;
          v36 = -1;
          v21 = v29;
          if (v29 != -1)
          {
            ((void (*)(char *, char *, _BYTE *))off_1E339E858[v29])(&v31, v32, v28);
            v36 = v21;
          }
          WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(&v25, (uint64_t)v32, 1uLL);
          LOBYTE(v27) = 0;
          BYTE2(v27) = 0;
          *(_BYTE *)a1 = v24[0];
          *(_QWORD *)(a1 + 8) = v25;
          v22 = v26;
          v25 = 0;
          v26 = 0;
          *(_QWORD *)(a1 + 16) = v22;
          *(_DWORD *)(a1 + 24) = v27;
          *(_BYTE *)(a1 + 32) = 1;
          WebCore::MQ::Condition::~Condition((WebCore::MQ::Condition *)v24, v23);
          if (v36 != -1)
            ((void (*)(char *, char *))off_1E339E840[v36])(&v31, v32);
          v16 = v30;
        }
        else
        {
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 32) = 0;
        }
        if (v16 && v29 != -1)
          ((void (*)(char *, _BYTE *))off_1E339E840[v29])(v32, v28);
        return;
      }
    }
  }
  v32[0] = 0;
  BYTE2(v35) = 0;
  v33 = 0;
  v34 = 0;
  LOBYTE(v35) = 0;
  while (1)
  {
    if (!HIDWORD(v34))
      goto LABEL_7;
    v17 = WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeCondition(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&,WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::State &)::{lambda(void)#1}::operator()(this);
    if (v17 <= 0xFFu || HIDWORD(v34) >= 2 && v32[0] != v17)
      break;
    v32[0] = v17;
LABEL_7:
    WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeQueryInParens((uint64_t)v28, (WTF::StringImpl **)this, a3, a4);
    if (!v30)
      break;
    if (HIDWORD(v34) == (_DWORD)v34)
    {
      v11 = WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, HIDWORD(v34) + 1, (unint64_t)v28);
      v12 = (char *)v33 + 88 * HIDWORD(v34);
      *v12 = 0;
      *((_DWORD *)v12 + 20) = -1;
      v13 = *(unsigned int *)(v11 + 80);
      if ((_DWORD)v13 == -1)
        goto LABEL_12;
      ((void (*)(char *, char *, unint64_t))off_1E339E858[v13])(v24, v12, v11);
      goto LABEL_11;
    }
    v12 = (char *)v33 + 88 * HIDWORD(v34);
    *v12 = 0;
    *((_DWORD *)v12 + 20) = -1;
    LODWORD(v13) = v29;
    if (v29 != -1)
    {
      ((void (*)(char *, char *, _BYTE *))off_1E339E858[v29])(v24, v12, v28);
LABEL_11:
      *((_DWORD *)v12 + 20) = v13;
    }
LABEL_12:
    ++HIDWORD(v34);
    if (v30 && v29 != -1)
      ((void (*)(char *, _BYTE *))off_1E339E840[v29])(v24, v28);
    if (*this == this[1])
    {
      *(_BYTE *)a1 = v32[0];
      *(_QWORD *)(a1 + 8) = v33;
      v14 = v34;
      v33 = 0;
      v34 = 0;
      *(_QWORD *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 24) = v35;
      *(_BYTE *)(a1 + 32) = 1;
      goto LABEL_35;
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
LABEL_35:
  v18 = (unsigned int *)v33;
  if (HIDWORD(v34))
  {
    v19 = 88 * HIDWORD(v34);
    do
    {
      v20 = v18[20];
      if ((_DWORD)v20 != -1)
        ((void (*)(_BYTE *, unsigned int *))off_1E339E840[v20])(v28, v18);
      v18[20] = -1;
      v18 += 22;
      v19 -= 88;
    }
    while (v19);
    v18 = (unsigned int *)v33;
  }
  if (v18)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    WTF::fastFree((WTF *)v18, v10);
  }
}

WTF::StringImpl *WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeQueryInParens(uint64_t a1, WTF::StringImpl **this, uint64_t a3, int *a4)
{
  __int128 *v4;
  WTF::StringImpl *result;
  __int128 *v10;
  char *v11;
  char *v12;
  __int128 *i;
  __int128 *v14;
  int v15;
  char *v16;
  unint64_t v17;
  const WebCore::MediaQueryParserContext *v18;
  char v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  WebCore::MQ::Feature *v27;
  uint64_t *v28;
  int v29;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  char v36;
  _DWORD *v37;
  uint64_t *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int *v41;
  __int128 *v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  WTF::StringImpl *v46;
  void *v47;
  _DWORD *v48;
  __n128 v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  WTF *v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  unsigned __int8 v65;
  char v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  char v70;
  __int128 v71;
  _QWORD v72[2];
  char *v73[2];
  __n128 v74;
  char v75;
  uint64_t *v76;
  char v77;
  char v78;
  _DWORD *v79;
  char v80;
  __int128 v81;
  char v82;
  int v83;
  __int128 v84;
  int v85;
  char v86;

  result = *this;
  if (*this >= this[1])
  {
    {
      result = (WTF::StringImpl *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      result = (WTF::StringImpl *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)result & 0x3F) != 1)
  {
    result = *this;
    if (*this >= this[1])
    {
      {
        result = (WTF::StringImpl *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        result = (WTF::StringImpl *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)result & 0x3F) != 0x16)
      goto LABEL_5;
    v10 = WebCore::CSSParserTokenRange::consumeBlock((__int128 **)this);
    v12 = v11;
    v73[0] = (char *)v10;
    v73[1] = v11;
    for (i = (__int128 *)*this; ; *this = (WTF::StringImpl *)i)
    {
      if (i >= (__int128 *)this[1])
      {
        i = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v4 = v10;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          i = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v10 = v4;
        }
      }
      if ((*(_DWORD *)i & 0x3F) != 0x10)
        break;
      i = (__int128 *)((char *)*this + 24);
    }
    do
    {
      v14 = v10;
      if (v10 >= (__int128 *)v12)
      {
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v4 = v10;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v10 = v4;
        }
      }
      v10 = (__int128 *)((char *)v10 + 24);
    }
    while ((*(_DWORD *)v14 & 0x3F) == 0x10);
    v15 = *a4;
    v16 = (char *)v10 - 24;
    v72[0] = (char *)v10 - 24;
    v72[1] = v12;
    WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeCondition((int)&v74, (WebCore::CSSParserTokenRange *)v72);
    if (v77)
    {
      LOWORD(v76) = 0;
      BYTE2(v76) = 0;
      std::optional<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>>::optional[abi:sn180100]<WebCore::MQ::Condition,0>(a1, (uint64_t)&v74);
      result = (WTF::StringImpl *)std::optional<WebCore::MQ::Condition>::~optional((uint64_t)&v74, v47);
LABEL_72:
      *(_WORD *)a4 = v15;
      *((_BYTE *)a4 + 2) = BYTE2(v15);
      return result;
    }
    *(_QWORD *)&v71 = v16;
    *((_QWORD *)&v71 + 1) = v12;
    v84 = v71;
    WebCore::MQ::FeatureParser::consumeBooleanOrPlainFeature((__int128 **)&v71, &v74);
    if (!v82)
    {
      v71 = v84;
      WebCore::MQ::FeatureParser::consumeRangeFeature((__int128 **)&v71, v18, (uint64_t)&v74);
      if (!v82)
      {
        LOBYTE(v61) = 0;
        v70 = 0;
        goto LABEL_99;
      }
    }
    if ((byte_1ECE82B58 & 1) == 0)
    {
      WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::schemaForFeatureName(WTF::AtomString const&,WebCore::MediaQueryParserContext const&,WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::State &)::{lambda(void)#1}::operator()((uint64_t)&v84);
      qword_1ECE82B50 = v84;
      v51 = v85;
      dword_1ECE82B40 = DWORD2(v84);
      v84 = 0uLL;
      v85 = 0;
      dword_1ECE82B48 = v51;
      v86 = 0;
      WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v84, v52);
      byte_1ECE82B58 = 1;
    }
    if (qword_1ECE82B50)
    {
      v20 = dword_1ECE82B40 - 1;
      v19 = dword_1ECE82B48;
      v21 = *(_DWORD *)(v74.n128_u64[0] + 16);
      v22 = (dword_1ECE82B48 ^ (v21 >> 8)) & (dword_1ECE82B40 - 1);
      v23 = *(_QWORD *)(qword_1ECE82B50 + 16 * v22);
      if (v23)
      {
        v24 = v21 >> 8;
        v25 = -1;
        do
        {
          v26 = *(_DWORD *)(v23 + 16);
          v17 = (v22 + dword_1ECE82B40);
          if (++v25 > ((v17 - ((dword_1ECE82B48 ^ (v26 >> 8)) & v20)) & v20))
            break;
          if (v23 == v74.n128_u64[0] && v26 >> 8 == v24)
          {
            v27 = *(WebCore::MQ::Feature **)(qword_1ECE82B50 + 16 * v22 + 8);
            goto LABEL_25;
          }
          v22 = ((_DWORD)v22 + 1) & v20;
          v23 = *(_QWORD *)(qword_1ECE82B50 + 16 * v22);
        }
        while (v23);
      }
    }
    v27 = 0;
LABEL_25:
    v28 = &qword_1ECE82000;
    if ((byte_1ECE82B36 & 1) == 0)
    {
      v83 = 62718911;
      v53 = (uint64_t *)WTF::FixedVector<WebCore::CSSValueID>::FixedVector(&v84, (__int16 *)&v83, 2);
      WTF::NeverDestroyed<WebCore::MQ::Features::IdentifierSchema,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral,WTF::FixedVector<WebCore::CSSValueID>,WebCore::MQ::Features::prefersDarkInterface(void)::$_0>(v53);
      v54 = (WTF *)v84;
      *(_QWORD *)&v84 = 0;
      if (v54)
        WTF::fastFree(v54, (void *)v17);
      byte_1ECE82B36 = 1;
    }
    v29 = *(unsigned __int8 *)(a3 + 2);
    if (v29 != 4 && *(_BYTE *)a3 == 0 && v27 == (WebCore::MQ::Feature *)&qword_1ECE82EA8 || v27 == 0)
    {
      LOBYTE(v61) = 0;
      v70 = 0;
      if (!v82)
        goto LABEL_99;
    }
    else
    {
      LOBYTE(v61) = 0;
      v70 = 0;
      if (WebCore::MQ::FeatureParser::validateFeatureAgainstSchema((WebCore::MQ::FeatureParser *)&v74, v27, v18))
      {
        if (!v82)
          goto LABEL_99;
        v33 = (WTF::StringImpl *)v74.n128_u64[0];
        v74.n128_u64[0] = 0;
        v61 = v33;
        LOBYTE(v4) = v74.n128_u8[8];
        LOBYTE(v62) = v74.n128_u8[8];
        v63 = 0;
        v65 = 0;
        if (v77)
        {
          LOBYTE(v29) = v75;
          v63 = v75;
          v28 = v76;
          v76 = 0;
          v64 = v28;
          v34 = 1;
          v65 = 1;
        }
        else
        {
          LOBYTE(v29) = 0;
          v34 = 0;
        }
        v66 = 0;
        v68 = 0;
        if (v80)
        {
          v19 = v78;
          v66 = v78;
          a3 = (uint64_t)v79;
          v79 = 0;
          v67 = a3;
          v35 = 1;
          v68 = 1;
        }
        else
        {
          v19 = 0;
          v35 = 0;
        }
        v36 = 0;
        v69 = v81;
        v70 = 1;
LABEL_43:
        if (v80)
        {
          v37 = v79;
          v79 = 0;
          if (v37)
          {
            if (*v37 == 2)
            {
              v55 = v19;
              v58 = v29;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, (WTF::StringImpl *)v17);
              v19 = v55;
              LOBYTE(v29) = v58;
            }
            else
            {
              *v37 -= 2;
            }
          }
        }
        if (v77)
        {
          v38 = v76;
          v76 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
            {
              v56 = v19;
              v59 = v29;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, (WTF::StringImpl *)v17);
              v19 = v56;
              LOBYTE(v29) = v59;
            }
            else
            {
              *(_DWORD *)v38 -= 2;
            }
          }
        }
        v39 = (WTF::StringImpl *)v74.n128_u64[0];
        v74.n128_u64[0] = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
          {
            v57 = v19;
            v60 = v29;
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
            v19 = v57;
            LOBYTE(v29) = v60;
          }
          else
          {
            *(_DWORD *)v39 -= 2;
          }
        }
        if ((v36 & 1) == 0)
        {
          LOWORD(v69) = 0;
          BYTE2(v69) = 0;
          v40 = v61;
          if (v61)
            *(_DWORD *)v61 += 2;
          *(_QWORD *)a1 = v40;
          *(_BYTE *)(a1 + 8) = (_BYTE)v4;
          *(_BYTE *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 32) = 0;
          if (v34)
          {
            *(_BYTE *)(a1 + 16) = v29;
            if (v28)
              *(_DWORD *)v28 += 2;
            *(_QWORD *)(a1 + 24) = v28;
            *(_BYTE *)(a1 + 32) = 1;
          }
          *(_BYTE *)(a1 + 40) = 0;
          *(_BYTE *)(a1 + 56) = 0;
          if (v35)
          {
            *(_BYTE *)(a1 + 40) = v19;
            if (a3)
            {
              *(_DWORD *)a3 += 2;
              *(_QWORD *)(a1 + 48) = a3;
              *(_BYTE *)(a1 + 56) = 1;
              *(_OWORD *)(a1 + 64) = v69;
              *(_DWORD *)(a1 + 80) = 1;
              *(_BYTE *)(a1 + 88) = 1;
              v67 = 0;
              if (*(_DWORD *)a3 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(a3, (WTF::StringImpl *)v17);
                v34 = v65;
              }
              else
              {
                *(_DWORD *)a3 -= 2;
              }
            }
            else
            {
              *(_QWORD *)(a1 + 48) = 0;
              *(_BYTE *)(a1 + 56) = 1;
              *(_OWORD *)(a1 + 64) = v69;
              *(_DWORD *)(a1 + 80) = 1;
              *(_BYTE *)(a1 + 88) = 1;
            }
          }
          else
          {
            *(_OWORD *)(a1 + 64) = v69;
            *(_DWORD *)(a1 + 80) = 1;
            *(_BYTE *)(a1 + 88) = 1;
          }
          if (v34 && v64)
          {
            if (*(_DWORD *)v64 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, (WTF::StringImpl *)v17);
            else
              *(_DWORD *)v64 -= 2;
          }
          result = v61;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v17);
            else
              *(_DWORD *)v61 -= 2;
          }
          goto LABEL_72;
        }
LABEL_99:
        std::__optional_destruct_base<WebCore::MQ::Feature,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v61, (WTF::StringImpl *)v17);
        v48 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *v48 += 2;
        v74.n128_u64[0] = (unint64_t)v48;
        WebCore::CSSParserTokenRange::serialize(v73, 0, &v74.n128_u64[1]);
        v49 = v74;
        v74 = 0uLL;
        *(__n128 *)a1 = v49;
        *(_DWORD *)(a1 + 80) = 2;
        *(_BYTE *)(a1 + 88) = 1;
        result = (WTF::StringImpl *)WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)&v74, v50);
        goto LABEL_72;
      }
      if (!v82)
        goto LABEL_99;
    }
    v35 = 0;
    v34 = 0;
    v36 = 1;
    goto LABEL_43;
  }
  if (*((_BYTE *)a4 + 2))
  {
LABEL_5:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 88) = 0;
    return result;
  }
  v41 = (int *)*this;
  if (*this >= this[1])
  {
    {
      v41 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v41 = (int *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  WebCore::CSSParserToken::functionId(v41);
  v42 = (__int128 *)*this;
  if (*this >= this[1])
  {
    {
      v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v42 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  v43 = *((unsigned int *)v42 + 1) | ((unint64_t)((*(_DWORD *)v42 >> 22) & 1) << 32);
  v74.n128_u64[0] = *((_QWORD *)v42 + 1);
  v74.n128_u64[1] = v43;
  v61 = (WTF::StringImpl *)WebCore::CSSParserTokenRange::consumeBlock((__int128 **)this);
  v62 = v44;
  WebCore::CSSParserTokenRange::consumeWhitespace((__int128 **)this);
  WTF::StringView::toString((uint64_t *)&v84, (WTF::StringView *)&v74);
  WebCore::CSSParserTokenRange::serialize((char **)&v61, 0, (_QWORD *)&v84 + 1);
  v45 = v84;
  v84 = 0uLL;
  *(_OWORD *)a1 = v45;
  *(_DWORD *)(a1 + 80) = 2;
  *(_BYTE *)(a1 + 88) = 1;
  return (WTF::StringImpl *)WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)&v84, v46);
}

uint64_t *WTF::Vector<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x2E8BA2F)
  {
    v5 = 88 * a3;
    v6 = WTF::fastMalloc((WTF *)(88 * a3));
    *((_DWORD *)v3 + 2) = (v5 & 0xFFFFFFF8) / 0x58;
    *v3 = v6;
    v7 = *((_DWORD *)v3 + 3);
    do
    {
      v8 = *v3 + 88 * v7;
      *(_BYTE *)v8 = 0;
      *(_DWORD *)(v8 + 80) = -1;
      v9 = *(unsigned int *)(a2 + 80);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t))off_1E339E858[v9])(&v10, v8, a2);
        *(_DWORD *)(v8 + 80) = v9;
      }
      v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v7;
      a2 += 88;
      v5 -= 88;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::consumeCondition(WebCore::CSSParserTokenRange &,WebCore::MediaQueryParserContext const&,WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::State &)::{lambda(void)#1}::operator()(__int128 **a1)
{
  __int128 *v1;
  _BOOL4 v2;
  int v3;
  __int128 v5;
  uint64_t v6;

  v1 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(a1);
  v5 = *v1;
  v6 = *((_QWORD *)v1 + 2);
  if ((v5 & 0x3F) != 0)
  {
    v2 = 0;
    v3 = 0;
  }
  else if (WebCore::CSSParserToken::id((unsigned int *)&v5) == 1006)
  {
    v2 = 0;
    v3 = 1;
  }
  else
  {
    v2 = WebCore::CSSParserToken::id((unsigned int *)&v5) == 1007;
    v3 = v2;
  }
  return v2 | (v3 << 8);
}

uint64_t std::optional<std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed>>::optional[abi:sn180100]<WebCore::MQ::Condition,0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = result;
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 88) = 0;
  if (!*(_BYTE *)(a2 + 32))
    return v2;
  *(_BYTE *)result = *(_BYTE *)a2;
  v4 = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v4;
  if (!v4)
  {
LABEL_9:
    *(_DWORD *)(v2 + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v2 + 80) = 0;
    *(_BYTE *)(v2 + 88) = 1;
    return v2;
  }
  if (v4 < 0x2E8BA2F)
  {
    v5 = 88 * v4;
    v6 = WTF::fastMalloc((WTF *)(88 * v4));
    *(_DWORD *)(v2 + 16) = (v5 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)(v2 + 8) = v6;
    v7 = *(_DWORD *)(a2 + 20);
    if (v7)
    {
      v8 = v6;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = 88 * v7;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 80) = -1;
        v11 = *(unsigned int *)(v9 + 80);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1E339E858[v11])(&v12, v8, v9);
          *(_DWORD *)(v8 + 80) = v11;
        }
        v8 += 88;
        v9 += 88;
        v10 -= 88;
      }
      while (v10);
    }
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::schemaForFeatureName(WTF::AtomString const&,WebCore::MediaQueryParserContext const&,WebCore::MQ::GenericMediaQueryParser<WebCore::MQ::MediaQueryParser>::State &)::{lambda(void)#1}::operator()(uint64_t a1)
{
  WTF::StringImpl *v2;
  char v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  WTF *result;
  uint64_t v13;
  _QWORD v14[3];
  WTF *v15;
  int v16;
  unsigned int v17;

  WebCore::MQ::Features::allSchemas((WebCore::MQ::Features *)a1, (uint64_t *)&v15);
  memset(v14, 0, 21);
  v3 = v17;
  if (v17)
  {
    v4 = v15;
    v5 = 8 * v17;
    v6 = v15;
    do
    {
      v7 = *(_QWORD *)v6;
      v6 = (WTF *)((char *)v6 + 8);
      WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::MQ::FeatureSchema const*&>((uint64_t)v14, (WTF::StringImpl *)(v7 + 8), v4, (uint64_t)&v13);
      v4 = v6;
      v5 -= 8;
    }
    while (v5);
    v8 = v14[0];
    v9 = v14[1];
    v10 = v14[2];
    v3 = BYTE4(v14[2]);
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v9 = 0;
  }
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v9;
  LODWORD(v14[2]) = 0;
  *(_DWORD *)(a1 + 16) = v10;
  BYTE4(v14[2]) = 0;
  *(_BYTE *)(a1 + 20) = v3;
  WTF::HashMap<WTF::AtomString,WebCore::MQ::FeatureSchema const*,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::MQ::FeatureSchema const*>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)v14, v2);
  result = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>@<X0>(WTF::StringImpl **a1@<X1>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  int v6;

  v3 = *a1;
  *a1 = 0;
  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E339E7E0;
  if (v3)
  {
    v6 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    *(_QWORD *)(result + 40) = v3;
    *a2 = result;
    if (v6)
      *(_DWORD *)v3 = v6;
    else
      return WTF::StringImpl::destroy(v3, v5);
  }
  else
  {
    *(_QWORD *)(result + 40) = 0;
    *a2 = result;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore10CSSMathMinENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore10CSSMathMinENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore10CSSMathMaxENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore10CSSMathMaxENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore10CSSMathSumENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore10CSSMathSumENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSNumericValue::rectifyNumberish(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> &&)::$_0,WebCore::CSSNumericValue::rectifyNumberish(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> &>@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __n128 result;
  __int128 v8;
  _OWORD v9[2];
  _BYTE v10[36];

  v3 = *a1;
  v4 = bmalloc::api::isoAllocate();
  WebCore::CSSNumericType::create(1u, 1, (uint64_t)v10);
  *(_QWORD *)&v5 = 0x8000000080000000;
  *((_QWORD *)&v5 + 1) = 0x8000000080000000;
  v9[0] = v5;
  v9[1] = xmmword_1968BD2E0;
  v6 = v9;
  if (v10[32])
    v6 = v10;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  result = *(__n128 *)v6;
  v8 = *((_OWORD *)v6 + 1);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 56) = v8;
  *(_QWORD *)v4 = &off_1E339F080;
  *(_QWORD *)(v4 + 72) = v3;
  *(_BYTE *)(v4 + 80) = 1;
  *a2 = v4;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSNumericValue::rectifyNumberish(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> &&)::$_0,WebCore::CSSNumericValue::rectifyNumberish(std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>> &>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  if (*a1)
  {
    ++*(_DWORD *)(v2 + 8);
    *a2 = v2;
  }
  else
  {
    result = 325;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleImageValue::serialize(uint64_t a1, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  BOOL v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v11, *(_QWORD *)(a1 + 40), a3, a4, a5);
  v7 = v11;
  if (*(_DWORD *)(a2 + 16))
    v8 = 0;
  else
    v8 = *(_QWORD *)(a2 + 8) == 0;
  if (!v8)
  {
    if (v11 && (*((_BYTE *)v11 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_14;
  }
  if (v11)
    *(_DWORD *)v11 += 2;
  v9 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v7;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v6);
      v7 = v11;
      if (!v11)
        goto LABEL_13;
      goto LABEL_12;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (v7)
LABEL_12:
    LODWORD(v7) = *((_DWORD *)v7 + 1);
LABEL_13:
  *(_DWORD *)(a2 + 16) = (_DWORD)v7;
LABEL_14:
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSStyleImageValue::toCSSValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 40);
  *v2 += 2;
  *a2 = v2;
  return this;
}

WTF::StringImpl *WebCore::CSSStyleValue::parse@<X0>(WebCore::CSSStyleValue *this@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  WTF *v5;
  unsigned __int128 *v6;
  WTF::StringImpl *v7;
  const WebCore::Document *v8;
  unsigned int *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  __int128 v37;
  char *v38;
  int8x16_t v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  _WORD *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  __int128 v50;
  int8x16_t v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  char *v55;
  char *v56;
  __int16 v57;
  unsigned __int128 *v58;
  unsigned __int128 *v59;
  unsigned __int128 *v60;
  unsigned __int128 v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unsigned __int128 v64;
  char v65;
  char v66;
  WTF::StringImpl *v67[5];
  WTF::StringImpl *v68;
  WTF *v69;
  uint64_t v70;
  int v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;

  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v67, this);
  WebCore::CSSStyleValueFactory::parseStyleValue((WebCore::CSSStyleValueFactory *)a2, a3, 0, (const WTF::String *)v67, (uint64_t)&v69);
  v13 = v68;
  v68 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v67[0];
  v67[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (!v71)
  {
    v5 = v69;
    v16 = HIDWORD(v70);
    v69 = 0;
    v70 = 0;
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a4 = v17;
      *(_DWORD *)(a4 + 16) = 0;
      v18 = 8 * v16;
      v19 = (WTF::StringImpl **)v5;
      do
      {
        result = *v19;
        *v19 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 2) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
          else
            --*((_DWORD *)result + 2);
        }
        ++v19;
        v18 -= 8;
      }
      while (v18);
      goto LABEL_93;
    }
    a3 = (unsigned int **)*a3;
    if (a3)
      *(_DWORD *)a3 += 2;
    a2 = (unsigned int **)*a2;
    if (a2)
      *(_DWORD *)a2 += 2;
    if (a3)
    {
      v20 = *((_DWORD *)a3 + 1);
      if (a2)
        goto LABEL_24;
    }
    else
    {
      v20 = 0;
      if (a2)
      {
LABEL_24:
        v21 = *((_DWORD *)a2 + 1);
        if (v21 < 0)
          goto LABEL_119;
LABEL_25:
        v22 = __OFADD__(v21, 23);
        v23 = v21 + 23;
        v24 = v22;
        if (v20 < 0)
          goto LABEL_119;
        if ((v24 & 1) != 0)
          goto LABEL_119;
        v25 = (v20 + v23);
        if (__OFADD__(v20, v23))
          goto LABEL_119;
        if (a3)
        {
          v26 = *((_DWORD *)a3 + 4);
          if (!a2 || (v26 & 4) == 0)
          {
            v27 = 1;
LABEL_36:
            v8 = (const WebCore::Document *)a2;
            if ((v26 & 4) == 0)
            {
              if (v25 <= 0x7FFFFFEF)
              {
                result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(2 * v25 + 20));
                v7 = v67[0];
                if (v67[0])
                {
                  v28 = (_WORD *)((char *)v67[0] + 20);
                  *(_DWORD *)v67[0] = 2;
                  *((_DWORD *)v7 + 1) = v25;
                  *((_QWORD *)v7 + 1) = (char *)v7 + 20;
                  *((_DWORD *)v7 + 4) = 0;
                  if (v27)
                  {
                    v12 = a3[1];
                    v29 = *((unsigned int *)a3 + 1);
                    if (((_BYTE)a3[2] & 4) != 0)
                    {
                      v30 = (char *)&v28[v29];
                      if (v29 >= 0x40)
                      {
                        v31 = (char *)&v28[v29 & 0xFFFFFFC0];
                        v37 = 0uLL;
                        v38 = (char *)v7 + 20;
                        do
                        {
                          v72.val[0] = *(int8x16_t *)v12;
                          v39 = *((int8x16_t *)v12 + 1);
                          v74.val[0] = (int8x16_t)*((_OWORD *)v12 + 2);
                          v40 = *((_OWORD *)v12 + 3);
                          v12 += 16;
                          v41 = v40;
                          v74.val[1] = 0uLL;
                          v76.val[0] = v39;
                          v72.val[1] = 0uLL;
                          v42 = v38;
                          vst2q_s8(v42, v72);
                          v42 += 32;
                          v76.val[1] = 0uLL;
                          vst2q_s8(v42, v76);
                          v43 = v38 + 64;
                          vst2q_s8(v43, v74);
                          v44 = v38 + 96;
                          vst2q_s8(v44, *(int8x16x2_t *)(&v37 - 1));
                          v38 += 128;
                        }
                        while (v38 != v31);
                      }
                      else
                      {
                        v31 = (char *)v7 + 20;
                      }
                      while (v31 != v30)
                      {
                        v45 = *(unsigned __int8 *)v12;
                        v12 = (unsigned int *)((char *)v12 + 1);
                        *(_WORD *)v31 = v45;
                        v31 += 2;
                      }
                    }
                    else if ((_DWORD)v29 == 1)
                    {
                      *v28 = *(_WORD *)v12;
                    }
                    else if ((_DWORD)v29)
                    {
                      result = (WTF::StringImpl *)memcpy((char *)v7 + 20, v12, 2 * v29);
                    }
                    v36 = *((unsigned int *)a3 + 1);
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v46 = &v28[v36];
                  *(_OWORD *)v46 = xmmword_1969EFFC0;
                  *((_OWORD *)v46 + 1) = xmmword_1969EFFD0;
                  *((_QWORD *)v46 + 4) = 0x73006100200064;
                  *((_DWORD *)v46 + 10) = 6357024;
                  v46[22] = 32;
                  if (a2)
                  {
                    result = (WTF::StringImpl *)(v46 + 23);
                    v12 = a2[1];
                    v47 = *((unsigned int *)a2 + 1);
                    if (((_BYTE)a2[2] & 4) == 0)
                    {
                      if ((_DWORD)v47 == 1)
                      {
                        *(_WORD *)result = *(_WORD *)v12;
                        goto LABEL_80;
                      }
                      if (!(_DWORD)v47)
                        goto LABEL_80;
                      v35 = 2 * v47;
                      goto LABEL_63;
                    }
                    v48 = (WTF::StringImpl *)((char *)result + 2 * v47);
                    if (v47 >= 0x40)
                    {
                      v49 = (WTF::StringImpl *)((char *)result + 2 * (v47 & 0xFFFFFFC0));
                      v50 = 0uLL;
                      do
                      {
                        v73.val[0] = *(int8x16_t *)v12;
                        v51 = *((int8x16_t *)v12 + 1);
                        v75.val[0] = (int8x16_t)*((_OWORD *)v12 + 2);
                        v52 = *((_OWORD *)v12 + 3);
                        v12 += 16;
                        v53 = v52;
                        v75.val[1] = 0uLL;
                        v77.val[0] = v51;
                        v73.val[1] = 0uLL;
                        v54 = (char *)result;
                        vst2q_s8(v54, v73);
                        v54 += 32;
                        v77.val[1] = 0uLL;
                        vst2q_s8(v54, v77);
                        v55 = (char *)result + 64;
                        vst2q_s8(v55, v75);
                        v56 = (char *)result + 96;
                        vst2q_s8(v56, *(int8x16x2_t *)(&v50 - 1));
                        result = (WTF::StringImpl *)((char *)result + 128);
                      }
                      while (result != v49);
                      result = v49;
                    }
                    while (result != v48)
                    {
                      v57 = *(unsigned __int8 *)v12;
                      v12 = (unsigned int *)((char *)v12 + 1);
                      *(_WORD *)result = v57;
                      result = (WTF::StringImpl *)((char *)result + 2);
                    }
                  }
LABEL_87:
                  *(_BYTE *)a4 = 9;
                  *(_QWORD *)(a4 + 8) = v7;
                  *(_DWORD *)(a4 + 16) = 1;
                  if (!a2)
                    goto LABEL_90;
                  goto LABEL_88;
                }
              }
              goto LABEL_119;
            }
LABEL_51:
            if ((v25 & 0x80000000) == 0)
            {
              result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v25 + 20));
              v7 = v67[0];
              if (v67[0])
              {
                v6 = (unsigned __int128 *)((char *)v67[0] + 20);
                *(_DWORD *)v67[0] = 2;
                *((_DWORD *)v7 + 1) = v25;
                *((_QWORD *)v7 + 1) = (char *)v7 + 20;
                *((_DWORD *)v7 + 4) = 4;
                if (!v27)
                {
                  v33 = 0;
LABEL_59:
                  v34 = (char *)v6 + v33;
                  qmemcpy(v34, " cannot be parsed as a ", 23);
                  if (v8)
                  {
                    result = (WTF::StringImpl *)(v34 + 23);
                    v12 = a2[1];
                    v35 = *((unsigned int *)a2 + 1);
                    if (((_BYTE)a2[2] & 4) != 0)
                    {
                      if (!(_DWORD)v35)
                      {
LABEL_80:
                        *(_BYTE *)a4 = 9;
                        *(_QWORD *)(a4 + 8) = v7;
                        *(_DWORD *)(a4 + 16) = 1;
LABEL_88:
                        if (*(_DWORD *)a2 == 2)
                        {
                          result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)a2, (WTF::StringImpl *)v12);
                          if (!a3)
                            goto LABEL_93;
                          goto LABEL_91;
                        }
                        *(_DWORD *)a2 -= 2;
LABEL_90:
                        if (!a3)
                          goto LABEL_93;
LABEL_91:
                        if (*(_DWORD *)a3 == 2)
                          result = (WTF::StringImpl *)WTF::StringImpl::destroy((WTF::StringImpl *)a3, (WTF::StringImpl *)v12);
                        else
                          *(_DWORD *)a3 -= 2;
LABEL_93:
                        if (v5)
                          result = (WTF::StringImpl *)WTF::fastFree(v5, v12);
                        goto LABEL_95;
                      }
                      if ((_DWORD)v35 == 1)
                      {
                        *(_BYTE *)result = *(_BYTE *)v12;
                        goto LABEL_80;
                      }
LABEL_63:
                      result = (WTF::StringImpl *)memcpy(result, v12, v35);
                      goto LABEL_80;
                    }
                    v62 = (WTF::StringImpl *)((char *)result + v35);
                    if (v35 >= 0x10)
                    {
                      v63 = (WTF::StringImpl *)((char *)result + (v35 & 0xFFFFFFF0));
                      do
                      {
                        v64 = (unsigned __int128)vld2q_s8((const char *)v12);
                        v12 += 8;
                        *(_OWORD *)result = v64;
                        result = (WTF::StringImpl *)((char *)result + 16);
                      }
                      while (result != v63);
                      result = v63;
                    }
                    while (result != v62)
                    {
                      v65 = *(_BYTE *)v12;
                      v12 = (unsigned int *)((char *)v12 + 2);
                      *(_BYTE *)result = v65;
                      result = (WTF::StringImpl *)((char *)result + 1);
                    }
                  }
                  goto LABEL_87;
                }
                v12 = a3[1];
                v32 = *((unsigned int *)a3 + 1);
                if (((_BYTE)a3[2] & 4) != 0)
                {
                  if ((_DWORD)v32)
                  {
                    if ((_DWORD)v32 == 1)
                      *(_BYTE *)v6 = *(_BYTE *)v12;
                    else
                      result = (WTF::StringImpl *)memcpy((char *)v7 + 20, v12, v32);
                  }
                  goto LABEL_58;
                }
                v58 = (unsigned __int128 *)((char *)v6 + v32);
                if (v32 >= 0x10)
                {
                  v59 = (unsigned __int128 *)((char *)v6 + (v32 & 0xFFFFFFF0));
                  v60 = (unsigned __int128 *)((char *)v7 + 20);
                  do
                  {
                    v61 = (unsigned __int128)vld2q_s8((const char *)v12);
                    v12 += 8;
                    *v60++ = v61;
                  }
                  while (v60 != v59);
                  goto LABEL_117;
                }
LABEL_115:
                v59 = v6;
LABEL_117:
                while (v59 != v58)
                {
                  v66 = *(_BYTE *)v12;
                  v12 = (unsigned int *)((char *)v12 + 2);
                  *(_BYTE *)v59 = v66;
                  v59 = (unsigned __int128 *)((char *)v59 + 1);
                }
LABEL_58:
                v33 = *((unsigned int *)a3 + 1);
                goto LABEL_59;
              }
            }
LABEL_119:
            __break(0xC471u);
            return result;
          }
        }
        else if (!a2)
        {
          v27 = 0;
          v8 = 0;
          goto LABEL_51;
        }
        LOBYTE(v26) = *((_BYTE *)a2 + 16);
        v27 = (uint64_t)a3;
        goto LABEL_36;
      }
    }
    v21 = 0;
    goto LABEL_25;
  }
  if (v71 != 1)
  {
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_115;
  }
  v15 = v70;
  v70 = 0;
  *(_BYTE *)a4 = (_BYTE)v69;
  *(_QWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 16) = 1;
LABEL_95:
  if (v71 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF **))off_1E339F258[v71])(v67, &v69);
  return result;
}

void WebCore::CSSStyleValueFactory::parseStyleValue(WebCore::CSSStyleValueFactory *this@<X0>, unsigned int **a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  char v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringBuilder *v43;
  WTF::String *v44;
  WTF::StringBuilder *v45;
  WTF::String *v46;
  __n128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  WTF::String *v54;
  __n128 v55;
  int v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  uint64_t v59;
  _DWORD **v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  _DWORD *v64;
  unsigned int v65;
  _DWORD *v66;
  _QWORD *v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD **v75;
  _DWORD *v76;
  WTF *v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD **v82;
  _DWORD *v83;
  WTF *v84;
  uint64_t v86;
  uint64_t *v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  _DWORD *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  _DWORD *v100;
  WTF::StringImpl *v101;
  _DWORD *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  WTF *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  _DWORD *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  char v127;

  v9 = (int)a3;
  v12 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v12 + 4) < 3u)
    goto LABEL_14;
  v13 = *(_QWORD *)(v12 + 8);
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
  {
    if (*(_BYTE *)v13 != 45)
      goto LABEL_14;
    v14 = *(unsigned __int8 *)(v13 + 1);
  }
  else
  {
    if (*(_WORD *)v13 != 45)
      goto LABEL_14;
    v14 = *(unsigned __int16 *)(v13 + 2);
  }
  if (v14 == 45)
  {
    if (!*a2 || !(*a2)[1])
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = 33;
      LOBYTE(v112) = 33;
      v114 = 1;
LABEL_11:
      v16 = v113;
      v113 = 0;
      *(_BYTE *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v16;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_12:
      if (v114 != -1)
        ((void (*)(uint64_t *, _DWORD **))off_1E339F268[v114])(&v115, &v112);
      return;
    }
    WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)&v115, a2, 0, 0);
    WebCore::CSSUnparsedValue::create((__int128 *)v119, (__int128 *)(v119 + 24 * HIDWORD(v119)), (uint64_t *)&v112);
    v114 = 0;
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)&v115, v41);
    if (!v114)
    {
      v66 = v112;
      v112 = 0;
      v67 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      v68 = v66[2];
      v66[2] = v68 + 1;
      *v67 = v66;
      *(_QWORD *)a5 = v67;
      *(_QWORD *)(a5 + 8) = 0x100000001;
      *(_DWORD *)(a5 + 16) = 0;
      if (v68)
        v66[2] = v68;
      else
        (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 16))(v66);
      goto LABEL_12;
    }
    if (v114 == 1)
    {
      v15 = (char)v112;
      goto LABEL_11;
    }
LABEL_181:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_182:
    __break(0xC471u);
    JUMPOUT(0x195909184);
  }
LABEL_14:
  WTF::AtomString::convertToASCIILowercase(this);
  v17 = v111;
  if (v111)
  {
    v18 = *((_QWORD *)v111 + 1);
    v17 = *((_DWORD *)v111 + 1);
    v19 = ((unint64_t)*((unsigned int *)v111 + 4) >> 2) & 1;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = WebCore::cssPropertyID(v18, (const char *)(v17 | (v19 << 32)));
  if (!(_DWORD)v20)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 33;
    *(_DWORD *)(a5 + 16) = 1;
    goto LABEL_166;
  }
  v21 = v20;
  if ((v20 - 459) <= 0x5E)
  {
    v22 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v22 = 0x900000001;
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 16) = v22 + 32;
    *(_QWORD *)(v22 + 24) = 4;
    v23 = WebCore::CSSParser::parseValue(v22, v21);
    if (v23 != 2)
    {
      v115 = WebCore::shorthandForProperty(v21);
      v116 = v42;
      v117 = 0u;
      v118 = 0u;
      v119 = 0u;
      v120 = 0u;
      v121 = 0u;
      v122 = 0u;
      v123 = 0u;
      v124 = 0u;
      v125 = 0u;
      v126 = 0;
      v127 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)&v115, (const WebCore::StyleProperties *)v22, v43, v44, (__n128)0);
      WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)&v115, v45, v46, (WebCore::ShorthandSerializer *)&v109, v47);
      WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)&v115, v48);
      WebCore::CSSStyleValueFactory::constructStyleValueForShorthandSerialization((unsigned int **)&v109, a4, (uint64_t *)&v112);
      v29 = (char)v112;
      v115 = (uint64_t)v112;
      LODWORD(v117) = 0;
      v49 = v109;
      v109 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v28);
        else
          *(_DWORD *)v49 -= 2;
      }
      v30 = 0;
      goto LABEL_50;
    }
    v24 = *a2;
    if (*a2)
    {
      v25 = v24[1];
      *v24 += 2;
      if ((v25 & 0x80000000) != 0 || (v26 = v25 + 18, __OFADD__(v25, 18)))
      {
        v112 = 0;
        goto LABEL_184;
      }
      if ((v24[4] & 4) == 0)
      {
        v27 = 0;
LABEL_24:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v26, v27, (uint64_t)v24, (int8x16_t *)" cannot be parsed.", 0x12u, &v112);
        v6 = (uint64_t)v112;
        if (v112)
        {
          v29 = 33;
          LOBYTE(v115) = 33;
          v116 = (uint64_t)v112;
          v30 = 1;
          LODWORD(v117) = 1;
          v112 = 0;
          if (v24)
          {
            if (*v24 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v24, v28);
            else
              *v24 -= 2;
            v29 = 33;
            v30 = 1;
          }
LABEL_50:
          if (*(_DWORD *)v22 == 1)
          {
            v73 = *(unsigned int *)(v22 + 28);
            if ((_DWORD)v73)
            {
              v74 = 16 * v73;
              v75 = (_DWORD **)(*(_QWORD *)(v22 + 16) + 8);
              do
              {
                v76 = *v75;
                *v75 = 0;
                if (v76)
                {
                  if (*v76 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v76, v28);
                  else
                    *v76 -= 2;
                }
                v75 += 2;
                v74 -= 16;
              }
              while (v74);
            }
            v77 = *(WTF **)(v22 + 16);
            if ((WTF *)(v22 + 32) != v77 && v77 != 0)
            {
              *(_QWORD *)(v22 + 16) = 0;
              *(_DWORD *)(v22 + 24) = 0;
              WTF::fastFree(v77, v28);
            }
            v79 = *(_QWORD *)(v22 + 8);
            *(_QWORD *)(v22 + 8) = 0;
            if (v79)
              (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
            WTF::fastFree((WTF *)v22, v28);
          }
          else
          {
            --*(_DWORD *)v22;
          }
          if (v23 == 2)
          {
            v116 = 0;
            *(_BYTE *)a5 = v29;
            *(_QWORD *)(a5 + 8) = v6;
            *(_DWORD *)(a5 + 16) = 1;
          }
          else
          {
            v50 = (_DWORD *)v115;
            v115 = 0;
            if (v50)
            {
              v51 = (_QWORD *)WTF::fastMalloc((WTF *)8);
              v52 = v50[2];
              v50[2] = v52 + 1;
              *v51 = v50;
              *(_QWORD *)a5 = v51;
              *(_QWORD *)(a5 + 8) = 0x100000001;
              *(_DWORD *)(a5 + 16) = 0;
              if (v52)
                v50[2] = v52;
              else
                (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 16))(v50);
            }
            else
            {
              *(_QWORD *)a5 = 0;
              *(_QWORD *)(a5 + 8) = 0;
              *(_DWORD *)(a5 + 16) = 0;
            }
          }
          ((void (*)(_DWORD **, uint64_t *))off_1E339F278[v30])(&v112, &v115);
          goto LABEL_166;
        }
LABEL_184:
        __break(0xC471u);
        JUMPOUT(0x195909190);
      }
    }
    else
    {
      v26 = 18;
    }
    v27 = 1;
    goto LABEL_24;
  }
  v32 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v32 = 0x900000001;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = v32 + 32;
  *(_QWORD *)(v32 + 24) = 4;
  v33 = WebCore::CSSParser::parseValue(v32, v21);
  if (v33 != 2)
  {
    WebCore::StyleProperties::getPropertyCSSValue(v32, v21, &v112);
    v40 = 0;
    v39 = (char)v112;
    v115 = (uint64_t)v112;
    LODWORD(v117) = 0;
    goto LABEL_55;
  }
  v34 = *a2;
  if (!v34)
  {
    v36 = 18;
LABEL_35:
    v37 = 1;
    goto LABEL_36;
  }
  v35 = v34[1];
  *v34 += 2;
  if ((v35 & 0x80000000) != 0 || (v36 = v35 + 18, __OFADD__(v35, 18)))
  {
    v112 = 0;
    goto LABEL_186;
  }
  if ((v34[4] & 4) != 0)
    goto LABEL_35;
  v37 = 0;
LABEL_36:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v36, v37, (uint64_t)v34, (int8x16_t *)" cannot be parsed.", 0x12u, &v112);
  v7 = (uint64_t)v112;
  if (!v112)
  {
LABEL_186:
    __break(0xC471u);
    JUMPOUT(0x19590919CLL);
  }
  v39 = 33;
  LOBYTE(v115) = 33;
  v116 = (uint64_t)v112;
  LODWORD(v117) = 1;
  v112 = 0;
  if (v34)
  {
    if (*v34 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v34, v38);
    else
      *v34 -= 2;
    v39 = 33;
  }
  v40 = 1;
LABEL_55:
  if (*(_DWORD *)v32 == 1)
  {
    v105 = v40;
    v80 = *(unsigned int *)(v32 + 28);
    if ((_DWORD)v80)
    {
      v81 = 16 * v80;
      v82 = (_DWORD **)(*(_QWORD *)(v32 + 16) + 8);
      do
      {
        v83 = *v82;
        *v82 = 0;
        if (v83)
        {
          if (*v83 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v83, v38);
          else
            *v83 -= 2;
        }
        v82 += 2;
        v81 -= 16;
      }
      while (v81);
    }
    v84 = *(WTF **)(v32 + 16);
    if ((WTF *)(v32 + 32) != v84 && v84 != 0)
    {
      *(_QWORD *)(v32 + 16) = 0;
      *(_DWORD *)(v32 + 24) = 0;
      WTF::fastFree(v84, v38);
    }
    v86 = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v32 + 8) = 0;
    if (v86)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
    WTF::fastFree((WTF *)v32, v38);
    v40 = v105;
  }
  else
  {
    --*(_DWORD *)v32;
  }
  if (v33 != 2)
  {
    v109 = 0;
    v110 = 0;
    v53 = v115;
    v115 = 0;
    if (v53)
    {
      if (WebCore::CSSProperty::listValuedPropertySeparator(v21)
        && ((*(unsigned __int16 *)(v53 + 4) | (*(unsigned __int8 *)(v53 + 6) << 16)) & 0x3F800u) > 0x1D000
        && (v56 = *(_DWORD *)(v53 + 8)) != 0)
      {
        v104 = v40;
        v57 = 0;
        LODWORD(v40) = 0;
        v58 = 0;
        v59 = 0;
        do
        {
          if (v58 > 3)
          {
            if (*(_DWORD *)(v53 + 8) <= v58)
              goto LABEL_182;
            v60 = (_DWORD **)(*(_QWORD *)(v53 + 48) + 8 * (v59 - 4));
          }
          else
          {
            v60 = (_DWORD **)(v53 + 16 + 8 * v59);
          }
          v61 = *v60;
          *v61 += 2;
          v112 = v61;
          if ((_DWORD)v40 == (_DWORD)v110)
          {
            v62 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v109, v40 + 1, (unint64_t)&v112);
            v40 = HIDWORD(v110);
            v57 = v109;
            v63 = *(_QWORD *)v62;
            *(_QWORD *)v62 = 0;
            *((_QWORD *)v57 + v40) = v63;
          }
          else
          {
            v112 = 0;
            *((_QWORD *)v57 + v40) = v61;
          }
          LODWORD(v40) = v40 + 1;
          HIDWORD(v110) = v40;
          v64 = v112;
          v112 = 0;
          if (v64)
          {
            if (*v64 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, v38);
            else
              *v64 -= 2;
          }
          v58 = v59 + 1;
          v59 = (v59 + 1);
        }
        while (v56 != v58);
        if ((_DWORD)v40)
        {
          if (*(_DWORD *)v53 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v53, v38);
          else
            *(_DWORD *)v53 -= 2;
          v107 = 0;
          v108 = 0;
          v87 = (uint64_t *)((char *)v57 + 8 * v40);
LABEL_129:
          v88 = 0;
          LODWORD(v89) = 0;
          v90 = v21;
          v91 = (uint64_t *)v57;
          while (1)
          {
            v21 = v21 & 0xFFFFFFFF00000000 | v90 | 0x10000;
            WebCore::CSSStyleValueFactory::reifyValue(*v91, v21, 0, v54, (uint64_t)&v112, v55);
            if (v114)
              break;
            v92 = (uint64_t)v112;
            v112 = 0;
            v106 = (_DWORD *)v92;
            if ((_DWORD)v89 == (_DWORD)v108)
            {
              v93 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v107, v89 + 1, (unint64_t)&v106);
              v89 = HIDWORD(v108);
              v88 = v107;
              v94 = *(_QWORD *)v93;
              *(_QWORD *)v93 = 0;
              *((_QWORD *)v88 + v89) = v94;
            }
            else
            {
              v106 = 0;
              *((_QWORD *)v88 + v89) = v92;
            }
            LODWORD(v89) = v89 + 1;
            HIDWORD(v108) = v89;
            v95 = v106;
            v106 = 0;
            if (v95)
            {
              if (v95[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 16))(v95);
              else
                --v95[2];
            }
            if (v114 != -1)
              ((void (*)(_DWORD **, _DWORD **))off_1E339F288[v114])(&v106, &v112);
            if (v9)
            {
              if (++v91 != v87)
                continue;
            }
            *(_QWORD *)a5 = v88;
            *(_DWORD *)(a5 + 8) = v108;
            *(_DWORD *)(a5 + 12) = v89;
            *(_DWORD *)(a5 + 16) = 0;
            goto LABEL_156;
          }
          if (v114 != 1)
            goto LABEL_181;
          v97 = v113;
          v113 = 0;
          *(_BYTE *)a5 = (_BYTE)v112;
          *(_QWORD *)(a5 + 8) = v97;
          *(_DWORD *)(a5 + 16) = 1;
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13CSSStyleValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_((uint64_t)&v106, (WTF::StringImpl *)&v112);
          if ((_DWORD)v89)
          {
            v98 = 8 * v89;
            v99 = v88;
            do
            {
              v100 = *(_DWORD **)v99;
              *(_QWORD *)v99 = 0;
              if (v100)
              {
                if (v100[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v100 + 16))(v100);
                else
                  --v100[2];
              }
              v99 = (WTF *)((char *)v99 + 8);
              v98 -= 8;
            }
            while (v98);
          }
          if (v88)
          {
            v107 = 0;
            LODWORD(v108) = 0;
            WTF::fastFree(v88, v38);
          }
LABEL_156:
          v101 = v57;
          do
          {
            v102 = *(_DWORD **)v101;
            *(_QWORD *)v101 = 0;
            if (v102)
            {
              if (*v102 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v102, v38);
              else
                *v102 -= 2;
            }
            v101 = (WTF::StringImpl *)((char *)v101 + 8);
          }
          while (v101 != (WTF::StringImpl *)v87);
          v40 = v104;
          goto LABEL_163;
        }
        v40 = v104;
      }
      else
      {
        v57 = 0;
      }
      v112 = (_DWORD *)v53;
      if ((_DWORD)v110)
      {
        v112 = 0;
        *(_QWORD *)v57 = v53;
        v65 = 1;
      }
      else
      {
        v69 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v109, 1uLL, (unint64_t)&v112);
        v70 = HIDWORD(v110);
        v57 = v109;
        v71 = *(_QWORD *)v69;
        *(_QWORD *)v69 = 0;
        *((_QWORD *)v57 + v70) = v71;
        v65 = v70 + 1;
      }
      HIDWORD(v110) = v65;
      v72 = v112;
      v112 = 0;
      if (v72)
      {
        if (*v72 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, v38);
        else
          *v72 -= 2;
      }
      v107 = 0;
      v108 = 0;
      if (v65)
      {
        v104 = v40;
        v87 = (uint64_t *)((char *)v57 + 8 * v65);
        goto LABEL_129;
      }
    }
    else
    {
      v57 = 0;
      v107 = 0;
      v108 = 0;
    }
    *(_QWORD *)a5 = 0;
    v96 = v108;
    *(_DWORD *)(a5 + 12) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    *(_DWORD *)(a5 + 8) = v96;
LABEL_163:
    if (v57)
    {
      v109 = 0;
      LODWORD(v110) = 0;
      WTF::fastFree(v57, v38);
    }
    goto LABEL_165;
  }
  v116 = 0;
  *(_BYTE *)a5 = v39;
  *(_QWORD *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_165:
  ((void (*)(_DWORD **, uint64_t *))off_1E339F298[v40])(&v112, &v115);
LABEL_166:
  v103 = v111;
  v111 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, v31);
    else
      *(_DWORD *)v103 -= 2;
  }
}

WTF::StringImpl *WebCore::CSSStyleValue::toString@<X0>(WebCore::CSSStyleValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  (**(void (***)(WebCore::CSSStyleValue *, WTF::StringImpl **, _QWORD))this)(this, &v6, 0);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleValue::serialize(WTF::StringImpl *result, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  BOOL v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v6 = *((_QWORD *)result + 4);
  if (!v6)
    return result;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v11, v6, a3, a4, a5);
  v8 = v11;
  if (*(_DWORD *)(a2 + 16))
    v9 = 0;
  else
    v9 = *(_QWORD *)(a2 + 8) == 0;
  if (!v9)
  {
    if (v11 && (*((_BYTE *)v11 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_15;
  }
  if (v11)
    *(_DWORD *)v11 += 2;
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v8;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v7);
      v8 = v11;
      if (!v11)
        goto LABEL_14;
      goto LABEL_13;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (v8)
LABEL_13:
    LODWORD(v8) = *((_DWORD *)v8 + 1);
LABEL_14:
  *(_DWORD *)(a2 + 16) = (_DWORD)v8;
LABEL_15:
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CSSStyleValueFactory::constructStyleValueForShorthandSerialization(unsigned int **this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char *v14[2];
  _BYTE v15[48];
  char *v16;
  int v17;
  uint64_t v18;

  if (*this)
  {
    WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v15, this, 0, 0);
    if (!*this || WTF::StringImpl::find() == -1)
    {
      v14[0] = v16;
      v14[1] = &v16[24 * v17];
      v7 = WTF::fastCompactMalloc((WTF *)0x40);
      v8 = WTF::fastMalloc((WTF *)0x60);
      v9 = WebCore::CSSVariableData::CSSVariableData(v8, v14, a2);
      *(_DWORD *)v7 = 2;
      v10 = (((*(unsigned __int8 *)(v7 + 6) >> 2) & 0x3F) << 18) | 0x10000;
      *(_WORD *)(v7 + 4) = -16384;
      *(_BYTE *)(v7 + 6) = BYTE2(v10);
      v18 = 0;
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 16) = 0;
      *(_BYTE *)(v7 + 24) = 0;
      *(_BYTE *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      WebCore::CSSVariableReferenceValue::cacheSimpleReference((WebCore::CSSVariableReferenceValue *)v7);
      WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v18, v11);
      v12 = bmalloc::api::isoAllocate();
      *(_DWORD *)(v12 + 8) = 1;
      *(_QWORD *)v12 = &off_1E339F420;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = v7;
      *a3 = v12;
    }
    else
    {
      WebCore::CSSUnparsedValue::create((__int128 *)v16, (__int128 *)&v16[24 * v17], a3);
    }
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v15, v13);
  }
  else
  {
    *a3 = 0;
  }
}

WTF::StringImpl *WebCore::CSSUnparsedValue::create@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  void *v7;
  int v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  __int128 v48;
  unsigned int v49;
  _BYTE *v50;
  _BYTE *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  WTF *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  _QWORD *v68;
  WTF *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  __int128 *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  __int128 v98;
  unsigned int v99;
  WTF *v100;
  WTF *v101;
  WTF::StringImpl *v102;
  WTF *v103;
  char *v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int v112;
  WTF *v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  int *v117;
  WTF *v118;
  int v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  WTF *v130;
  char *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  WTF *v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *result;
  uint64_t *v142;
  __int128 *v143;
  unsigned int v144;
  WTF::StringImpl *v145;
  unsigned int v146;
  WTF *v147;
  uint64_t v148;
  unsigned int v149;
  WTF *v150[2];
  uint64_t v151;
  WTF *v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  char v157;
  _BYTE v158[9];

  v154 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 1;
  v152 = 0;
  v153 = 0;
  v150[0] = 0;
  v150[1] = 0;
  v6 = WTF::Vector<WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, 1uLL, (unint64_t)v150);
  v8 = HIDWORD(v153);
  v9 = (char *)v152 + 16 * HIDWORD(v153);
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = *(_QWORD *)v6;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)v9 = v10;
  LODWORD(v10) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v6 + 8) = 0;
  *((_DWORD *)v9 + 2) = v10;
  LODWORD(v10) = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = 0;
  *((_DWORD *)v9 + 3) = v10;
  v11 = (unsigned int *)v150[0];
  v12 = v8 + 1;
  HIDWORD(v153) = v8 + 1;
  if (HIDWORD(v150[1]))
  {
    v13 = 16 * HIDWORD(v150[1]);
    do
    {
      v14 = v11[2];
      if ((_DWORD)v14 != -1)
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v14])(&v147, v11);
      v11[2] = -1;
      v11 += 4;
      v13 -= 16;
    }
    while (v13);
    v11 = (unsigned int *)v150[0];
  }
  if (v11)
  {
    v150[0] = 0;
    LODWORD(v150[1]) = 0;
    WTF::fastFree((WTF *)v11, v7);
  }
  if (a1 == a2)
  {
    v113 = 0;
    goto LABEL_187;
  }
  v142 = a3;
  v15 = 0;
  v144 = 0;
  v16 = 0;
  while (1)
  {
    v17 = (__int128 *)((char *)a1 + 24);
    v18 = *((_QWORD *)a1 + 2);
    *(_OWORD *)v150 = *a1;
    v151 = v18;
    v19 = (uint64_t)v150[0] & 0x3F;
    if (v19 != 1)
    {
      if (v19 == 23)
      {
        if (v156)
        {
          v29 = HIDWORD(v153);
          if (!HIDWORD(v153))
          {
            __break(0xC471u);
            JUMPOUT(0x19590A2DCLL);
          }
          v30 = v16;
          v31 = v152;
          v32 = v154;
          if (v154
            || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v154),
                WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v154),
                (v32 = v154) != 0))
          {
            *(_DWORD *)v32 += 2;
          }
          v33 = (uint64_t)v31 + 16 * v29 - 16;
          v34 = *((unsigned int *)v31 + 4 * v29 - 1);
          if ((_DWORD)v34 == *((_DWORD *)v31 + 4 * v29 - 2))
          {
            v35 = v34 + (v34 >> 2);
            if (v35 >= 0x10)
              v36 = v35 + 1;
            else
              v36 = 16;
            if (v36 <= v34 + 1)
              v37 = v34 + 1;
            else
              v37 = v36;
            WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v31 + 16 * v29 - 16, v37);
            v34 = *((unsigned int *)v31 + 4 * v29 - 1);
            v38 = *(_QWORD *)v33 + 16 * v34;
          }
          else
          {
            v38 = *(_QWORD *)v33 + 16 * v34;
          }
          LODWORD(v16) = v30;
          *(_QWORD *)v38 = v32;
          *(_DWORD *)(v38 + 8) = 0;
          *(_DWORD *)(v33 + 12) = v34 + 1;
        }
        v52 = v154;
        v154 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v7);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = v155;
        v155 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v7);
          else
            *(_DWORD *)v53 -= 2;
        }
        v156 = 0;
        if (!(_DWORD)v16)
          goto LABEL_230;
        v54 = (char *)v15 + 24 * v16;
        v16 = (v16 - 1);
        if (*(v54 - 8))
        {
          if (*(v54 - 12))
            WTF::String::String();
          else
            WTF::String::String();
          v55 = HIDWORD(v153);
          if (!HIDWORD(v153))
          {
            __break(0xC471u);
            JUMPOUT(0x19590A2E4);
          }
          v56 = v16;
          v57 = v15;
          v58 = HIDWORD(v153) - 1;
          v59 = v152;
          v60 = (uint64_t *)((char *)v152 + 16 * HIDWORD(v153) - 16);
          v61 = *v60;
          --HIDWORD(v153);
          v62 = v60[1];
          *v60 = 0;
          v60[1] = 0;
          v63 = bmalloc::api::isoAllocate();
          *(_DWORD *)(v63 + 8) = 1;
          *(_QWORD *)(v63 + 16) = 0;
          *(_QWORD *)(v63 + 24) = 0;
          *(_QWORD *)v63 = &off_1E339F0D8;
          *(_QWORD *)(v63 + 32) = 0;
          *(_QWORD *)(v63 + 40) = v61;
          *(_QWORD *)(v63 + 48) = v62;
          if (v145 && WTF::StringImpl::startsWith())
          {
            v64 = (WTF *)bmalloc::api::isoAllocate();
            *(_DWORD *)v64 = 1;
            v66 = v145;
            v145 = 0;
            *((_QWORD *)v64 + 1) = v66;
            *((_QWORD *)v64 + 2) = v63;
            v147 = v64;
            v149 = 0;
          }
          else
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            LOBYTE(v147) = 33;
            v149 = 1;
            if (*(_DWORD *)(v63 + 8) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
            else
              --*(_DWORD *)(v63 + 8);
          }
          v67 = v145;
          v145 = 0;
          if (!v67)
            goto LABEL_79;
          if (*(_DWORD *)v67 == 2)
          {
            WTF::StringImpl::destroy(v67, v65);
            if (!v58)
            {
LABEL_235:
              __break(0xC471u);
              JUMPOUT(0x19590A2F4);
            }
          }
          else
          {
            *(_DWORD *)v67 -= 2;
LABEL_79:
            if (!v58)
              goto LABEL_235;
          }
          if (v149)
            goto LABEL_229;
          v68 = (_QWORD *)((char *)v59 + 16 * v55 - 32);
          v69 = v147;
          v147 = 0;
          v70 = *((unsigned int *)v59 + 4 * v55 - 5);
          v15 = v57;
          if ((_DWORD)v70 == *((_DWORD *)v59 + 4 * v55 - 6))
          {
            v71 = v70 + (v70 >> 2);
            if (v71 >= 0x10)
              v72 = v71 + 1;
            else
              v72 = 16;
            if (v72 <= v70 + 1)
              v73 = v70 + 1;
            else
              v73 = v72;
            WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v59 + 16 * v55 - 32, v73);
            v74 = *((unsigned int *)v59 + 4 * v55 - 5);
            v75 = *v68 + 16 * v74;
            v76 = v149;
            *(_QWORD *)v75 = v69;
            *(_DWORD *)(v75 + 8) = 1;
            *((_DWORD *)v59 + 4 * v55 - 5) = v74 + 1;
            v16 = v56;
            if ((_DWORD)v76 == -1)
              goto LABEL_179;
          }
          else
          {
            v76 = 0;
            v79 = *v68 + 16 * v70;
            *(_QWORD *)v79 = v69;
            *(_DWORD *)(v79 + 8) = 1;
            *((_DWORD *)v59 + 4 * v55 - 5) = v70 + 1;
            v16 = v56;
          }
LABEL_178:
          ((void (*)(WTF::StringImpl **, WTF **))off_1E339F2E8[v76])(&v145, &v147);
          goto LABEL_179;
        }
LABEL_73:
        WebCore::CSSParserToken::serialize((char *)v150, (WTF::StringBuilder *)&v154, 0, 0);
        goto LABEL_179;
      }
      if (v19 != 22)
        goto LABEL_73;
    }
    if (WebCore::CSSParserToken::functionId((int *)v150) != 610)
    {
      WebCore::CSSParserToken::serialize((char *)v150, (WTF::StringBuilder *)&v154, 0, 0);
      v39 = v16;
      if ((_DWORD)v16 == v144)
      {
        v40 = ((unint64_t)v144 >> 2) + v144;
        if (v40 >= 0x10)
          v41 = v40 + 1;
        else
          v41 = 16;
        if (v41 <= (unint64_t)v16 + 1)
          v41 = v16 + 1;
        if (v41 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x19590A2ECLL);
        }
        v42 = 24 * v41;
        v43 = WTF::fastMalloc((WTF *)(24 * v41));
        v44 = (WTF *)v43;
        if (v144)
        {
          v45 = 24 * v16;
          v46 = v43;
          v47 = v15;
          do
          {
            v48 = *(_OWORD *)v47;
            *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
            *(_OWORD *)v46 = v48;
            v46 += 24;
            v47 = (WTF *)((char *)v47 + 24);
            v45 -= 24;
          }
          while (v45);
        }
        v49 = (v42 & 0xFFFFFFF8) / 0x18;
        if (v15)
        {
          if ((WTF *)v43 == v15)
          {
            v49 = 0;
            v44 = 0;
          }
          WTF::fastFree(v15, v7);
        }
        v50 = (char *)v44 + 24 * v16;
        *v50 = 0;
        v50[16] = 0;
        v16 = v144 + 1;
        v144 = v49;
        v15 = v44;
      }
      else
      {
        v16 = (v16 + 1);
        v51 = (char *)v15 + 24 * v39;
        *v51 = 0;
        v51[16] = 0;
      }
      goto LABEL_179;
    }
    if (v156)
    {
      v20 = HIDWORD(v153);
      if (!HIDWORD(v153))
      {
        __break(0xC471u);
        JUMPOUT(0x19590A2D4);
      }
      v21 = v152;
      v22 = v154;
      if (v154
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v154),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v154),
            (v22 = v154) != 0))
      {
        *(_DWORD *)v22 += 2;
      }
      v23 = (_QWORD *)((char *)v21 + 16 * v20 - 16);
      v24 = *((unsigned int *)v21 + 4 * v20 - 1);
      if ((_DWORD)v24 == *((_DWORD *)v21 + 4 * v20 - 2))
      {
        v25 = v24 + (v24 >> 2);
        if (v25 >= 0x10)
          v26 = v25 + 1;
        else
          v26 = 16;
        if (v26 <= v24 + 1)
          v27 = v24 + 1;
        else
          v27 = v26;
        WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v21 + 16 * v20 - 16, v27);
        v24 = *((unsigned int *)v21 + 4 * v20 - 1);
        v28 = *v23 + 16 * v24;
      }
      else
      {
        v28 = *v23 + 16 * v24;
      }
      *(_QWORD *)v28 = v22;
      *(_DWORD *)(v28 + 8) = 0;
      *((_DWORD *)v21 + 4 * v20 - 1) = v24 + 1;
      v77 = v154;
      v154 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v77 -= 2;
      }
      v78 = v155;
      v155 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v78 -= 2;
      }
      v156 = 0;
    }
    do
    {
      a1 = (__int128 *)((char *)a1 + 24);
      v80 = a1;
      if (a1 >= a2)
      {
        v80 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v81 = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v80 = (__int128 *)v81;
        }
      }
    }
    while ((*(_DWORD *)v80 & 0x3F) == 0x10);
    if (a1 == a2)
    {
      {
        v17 = a2;
        a1 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v82 = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        v17 = a2;
        a1 = (__int128 *)v82;
      }
    }
    else
    {
      v17 = (__int128 *)((char *)a1 + 24);
    }
    do
    {
      v85 = v17;
      if (v17 >= a2)
      {
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
        LOBYTE(v83) = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v84 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3F;
        v17 = (__int128 *)((char *)v17 + 24);
      }
      else
      {
        v17 = (__int128 *)((char *)v17 + 24);
        v83 = *(_DWORD *)v85;
        v84 = *(_DWORD *)v85 & 0x3F;
      }
    }
    while (v84 == 16);
    v86 = v16;
    v87 = *(_DWORD *)a1;
    v88 = *((unsigned int *)a1 + 1);
    v89 = *((_QWORD *)a1 + 1);
    if (v84 == 21)
      break;
    if ((v83 & 0x3F) == 0x17)
    {
      if ((v87 & 0x400000) != 0)
        WTF::String::String();
      else
        WTF::String::String();
      if (v145 && WTF::StringImpl::startsWith())
      {
        v101 = (WTF *)bmalloc::api::isoAllocate();
        *(_DWORD *)v101 = 1;
        *((_QWORD *)v101 + 1) = v145;
        *((_QWORD *)v101 + 2) = 0;
        v147 = v101;
        v149 = 0;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v147) = 33;
        v102 = v145;
        v149 = 1;
        v145 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 2)
            WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v7);
          else
            *(_DWORD *)v102 -= 2;
        }
      }
      if (!HIDWORD(v153))
      {
        __break(0xC471u);
        JUMPOUT(0x19590A304);
      }
      if (v149)
      {
LABEL_229:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_230:
        __break(0xC471u);
        JUMPOUT(0x19590A2CCLL);
      }
      v103 = v15;
      v104 = (char *)v152 + 16 * HIDWORD(v153) - 16;
      v105 = v147;
      v147 = 0;
      v145 = v105;
      v146 = 1;
      v106 = *((unsigned int *)v152 + 4 * HIDWORD(v153) - 1);
      if ((_DWORD)v106 == *((_DWORD *)v152 + 4 * HIDWORD(v153) - 2))
      {
        v107 = WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v104, v106 + 1, (unint64_t)&v145);
        v108 = *(_QWORD *)v104 + 16 * *((unsigned int *)v104 + 3);
        *(_BYTE *)v108 = 0;
        *(_DWORD *)(v108 + 8) = -1;
        v109 = *(unsigned int *)(v107 + 8);
        if ((_DWORD)v109 == -1)
          goto LABEL_158;
        ((void (*)(_BYTE *, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v109])(v158, v108, v107);
      }
      else
      {
        v108 = *(_QWORD *)v104 + 16 * v106;
        *(_BYTE *)v108 = 0;
        *(_DWORD *)(v108 + 8) = -1;
        LODWORD(v109) = v146;
        if (v146 == -1)
        {
          ++*((_DWORD *)v104 + 3);
          goto LABEL_176;
        }
        ((void (*)(_BYTE *, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v146])(v158, v108, &v145);
      }
      *(_DWORD *)(v108 + 8) = v109;
LABEL_158:
      v110 = v146;
      ++*((_DWORD *)v104 + 3);
      if ((_DWORD)v110 != -1)
        ((void (*)(_BYTE *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v110])(v158, &v145);
LABEL_176:
      v15 = v103;
      if (v85 == a2)
      {
        v17 = a2;
        {
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v17 = a2;
        }
      }
      v76 = v149;
      v16 = v86;
      if (v149 == -1)
        goto LABEL_179;
      goto LABEL_178;
    }
    v17 = v85;
    v16 = v86;
LABEL_179:
    a1 = v17;
    if (v17 == a2)
    {
      v113 = v15;
      v12 = HIDWORD(v153);
      goto LABEL_185;
    }
  }
  if ((_DWORD)v86 == v144)
  {
    v143 = v85;
    v90 = ((unint64_t)v144 >> 2) + v144;
    if (v90 >= 0x10)
      v91 = v90 + 1;
    else
      v91 = 16;
    if (v91 <= (unint64_t)v86 + 1)
      v91 = v86 + 1;
    if (v91 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x19590A2FCLL);
    }
    v92 = a2;
    v93 = 24 * v91;
    v94 = WTF::fastMalloc((WTF *)(24 * v91));
    if (v144)
    {
      v95 = 24 * v86;
      v96 = v94;
      v97 = v15;
      do
      {
        v98 = *(_OWORD *)v97;
        *(_QWORD *)(v96 + 16) = *((_QWORD *)v97 + 2);
        *(_OWORD *)v96 = v98;
        v96 += 24;
        v97 = (WTF *)((char *)v97 + 24);
        v95 -= 24;
      }
      while (v95);
    }
    v99 = (v93 & 0xFFFFFFF8) / 0x18;
    if (v15)
    {
      if ((WTF *)v94 == v15)
        v99 = 0;
      v144 = v99;
      v100 = v15;
      if ((WTF *)v94 == v15)
        v15 = 0;
      else
        v15 = (WTF *)v94;
      WTF::fastFree(v100, v7);
    }
    else
    {
      v144 = (v93 & 0xFFFFFFF8) / 0x18;
      v15 = (WTF *)v94;
    }
    a2 = v92;
    v85 = v143;
  }
  v111 = (char *)v15 + 24 * v86;
  *(_QWORD *)v111 = v89;
  *((_QWORD *)v111 + 1) = v88 | ((unint64_t)((v87 >> 22) & 1) << 32);
  v111[16] = 1;
  v147 = 0;
  v148 = 0;
  v112 = HIDWORD(v153);
  v113 = v15;
  if (HIDWORD(v153) == (_DWORD)v153)
  {
    v114 = WTF::Vector<WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v152, HIDWORD(v153) + 1, (unint64_t)&v147);
    v112 = HIDWORD(v153);
    v115 = (char *)v152 + 16 * HIDWORD(v153);
    *(_QWORD *)v115 = 0;
    *((_QWORD *)v115 + 1) = 0;
    v116 = *(_QWORD *)v114;
    *(_QWORD *)v114 = 0;
    *(_QWORD *)v115 = v116;
    LODWORD(v116) = *(_DWORD *)(v114 + 8);
    *(_DWORD *)(v114 + 8) = 0;
    *((_DWORD *)v115 + 2) = v116;
    v117 = (int *)(v114 + 12);
  }
  else
  {
    v115 = (char *)v152 + 16 * HIDWORD(v153);
    *(_QWORD *)v115 = 0;
    *((_QWORD *)v115 + 1) = 0;
    v118 = v147;
    v147 = 0;
    *(_QWORD *)v115 = v118;
    LODWORD(v118) = v148;
    LODWORD(v148) = 0;
    *((_DWORD *)v115 + 2) = (_DWORD)v118;
    v117 = (int *)&v148 + 1;
  }
  v119 = *v117;
  *v117 = 0;
  *((_DWORD *)v115 + 3) = v119;
  v12 = v112 + 1;
  HIDWORD(v153) = v112 + 1;
  v120 = (unsigned int *)v147;
  if (HIDWORD(v148))
  {
    v121 = 16 * HIDWORD(v148);
    do
    {
      v122 = v120[2];
      if ((_DWORD)v122 != -1)
        ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v122])(&v145, v120);
      v120[2] = -1;
      v120 += 4;
      v121 -= 16;
    }
    while (v121);
    v120 = (unsigned int *)v147;
  }
  if (v120)
  {
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((WTF *)v120, v7);
  }
  if (v85 != a2)
  {
    v16 = (v86 + 1);
    v15 = v113;
    goto LABEL_179;
  }
  {
    WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
  }
LABEL_185:
  a3 = v142;
LABEL_187:
  if (!v156)
  {
    if (v12)
      goto LABEL_204;
LABEL_238:
    __break(0xC471u);
    JUMPOUT(0x19590A118);
  }
  if (!v12)
    goto LABEL_238;
  v123 = (char *)v152 + 16 * v12 - 16;
  v124 = v154;
  if (v154
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v154),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v154),
        (v124 = v154) != 0))
  {
    *(_DWORD *)v124 += 2;
  }
  v125 = *((unsigned int *)v123 + 3);
  if ((_DWORD)v125 == *((_DWORD *)v123 + 2))
  {
    v126 = v125 + (v125 >> 2);
    if (v126 >= 0x10)
      v127 = v126 + 1;
    else
      v127 = 16;
    if (v127 <= v125 + 1)
      v128 = v125 + 1;
    else
      v128 = v127;
    WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v123, v128);
    v125 = *((unsigned int *)v123 + 3);
    v129 = *(_QWORD *)v123 + 16 * v125;
  }
  else
  {
    v129 = *(_QWORD *)v123 + 16 * v125;
  }
  *(_QWORD *)v129 = v124;
  *(_DWORD *)(v129 + 8) = 0;
  *((_DWORD *)v123 + 3) = v125 + 1;
LABEL_204:
  v130 = v152;
  v131 = (char *)v152 + 16 * v12;
  v132 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v132 + 8) = 1;
  *(_QWORD *)(v132 + 16) = 0;
  *(_QWORD *)(v132 + 24) = 0;
  *(_QWORD *)v132 = &off_1E339F0D8;
  *(_QWORD *)(v132 + 40) = 0;
  *(_QWORD *)(v132 + 48) = 0;
  *(_QWORD *)(v132 + 32) = 0;
  v134 = *((_QWORD *)v131 - 2);
  *((_QWORD *)v131 - 2) = 0;
  *(_QWORD *)(v132 + 40) = v134;
  LODWORD(v134) = *((_DWORD *)v131 - 2);
  *((_DWORD *)v131 - 2) = 0;
  *(_DWORD *)(v132 + 48) = v134;
  LODWORD(v134) = *((_DWORD *)v131 - 1);
  *((_DWORD *)v131 - 1) = 0;
  *(_DWORD *)(v132 + 52) = v134;
  *a3 = v132;
  if (!v113 || (WTF::fastFree(v113, v133), v12 = HIDWORD(v153), v130 = v152, HIDWORD(v153)))
  {
    v135 = v130;
    do
    {
      v136 = *((unsigned int *)v135 + 3);
      v137 = *(unsigned int **)v135;
      if ((_DWORD)v136)
      {
        v138 = 16 * v136;
        do
        {
          v139 = v137[2];
          if ((_DWORD)v139 != -1)
            ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v139])(v150, v137);
          v137[2] = -1;
          v137 += 4;
          v138 -= 16;
        }
        while (v138);
        v137 = *(unsigned int **)v135;
      }
      if (v137)
      {
        *(_QWORD *)v135 = 0;
        *((_DWORD *)v135 + 2) = 0;
        WTF::fastFree((WTF *)v137, v133);
      }
      v135 = (WTF *)((char *)v135 + 16);
    }
    while (v135 != (WTF *)((char *)v130 + 16 * v12));
  }
  if (v130)
  {
    v152 = 0;
    LODWORD(v153) = 0;
    WTF::fastFree(v130, v133);
  }
  v140 = v155;
  v155 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v133);
    else
      *(_DWORD *)v140 -= 2;
  }
  result = v154;
  v154 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v133);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleValueFactory::reifyValue@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  int v9;
  uint64_t v11;
  WTF::StringImpl *result;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t (**v22)();
  int *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringBuilder *v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  int *v42;
  WTF::StringBuilder **v43;
  int *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;

  v38 = a2;
  v37 = a3;
  v9 = (*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) & 0x3F800;
  switch(v9)
  {
    case 0:
      if ((*(_WORD *)(a1 + 4) & 0x7F) != 0x49)
      {
        switch(*(_WORD *)(a1 + 4) & 0x7F)
        {
          case 1:
          case 2:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 1;
            result = (WTF::StringImpl *)WebCore::CSSNumericType::create(1u, 1, (uint64_t)&v41);
            *(_QWORD *)&v18 = 0x8000000080000000;
            *((_QWORD *)&v18 + 1) = 0x8000000080000000;
            v39 = v18;
            v40 = xmmword_1968BD2E0;
            v19 = (WTF::StringImpl **)&v39;
            if ((_BYTE)v45)
              v19 = &v41;
            *(_DWORD *)(v16 + 8) = 1;
            goto LABEL_88;
          case 3:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 3;
            v29 = 3;
            goto LABEL_85;
          case 4:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 4;
            v29 = 4;
            goto LABEL_85;
          case 5:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 5;
            v29 = 5;
            goto LABEL_85;
          case 6:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 6;
            v29 = 6;
            goto LABEL_85;
          case 7:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 7;
            v29 = 7;
            goto LABEL_85;
          case 8:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 8;
            v29 = 8;
            goto LABEL_85;
          case 9:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 9;
            v29 = 9;
            goto LABEL_85;
          case 0xA:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 10;
            v29 = 10;
            goto LABEL_85;
          case 0xB:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 11;
            v29 = 11;
            goto LABEL_85;
          case 0xC:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 12;
            v29 = 12;
            goto LABEL_85;
          case 0xD:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 13;
            v29 = 13;
            goto LABEL_85;
          case 0xE:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 14;
            v29 = 14;
            goto LABEL_85;
          case 0xF:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 15;
            v29 = 15;
            goto LABEL_85;
          case 0x10:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 16;
            v29 = 16;
            goto LABEL_85;
          case 0x11:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 17;
            v29 = 17;
            goto LABEL_85;
          case 0x12:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 18;
            v29 = 18;
            goto LABEL_85;
          case 0x16:
          case 0x3F:
          case 0x4F:
          case 0x50:
            _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v35, a1, a3, a4, a6);
            v27 = v35;
            v35 = 0;
            v41 = v27;
            LODWORD(v42) = 0;
            std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&)::$_0,WebCore::CSSKeywordValue::rectifyKeywordish(std::variant<WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSKeywordValue,WTF::RawPtrTraits<WebCore::CSSKeywordValue>,WTF::DefaultRefDerefTraits<WebCore::CSSKeywordValue>>> &&>(&v41, &v36);
            *(_QWORD *)a5 = v36;
            *(_DWORD *)(a5 + 16) = 0;
            if ((_DWORD)v42 != -1)
              ((void (*)(__int128 *, WTF::StringImpl **))off_1E339F2B8[v42])(&v39, &v41);
            LODWORD(v42) = -1;
            result = v35;
            v35 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
              else
                *(_DWORD *)result -= 2;
            }
            return result;
          case 0x19:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 25;
            v29 = 25;
            goto LABEL_85;
          case 0x1A:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 26;
            v29 = 26;
            goto LABEL_85;
          case 0x1B:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 27;
            v29 = 27;
            goto LABEL_85;
          case 0x1C:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 28;
            v29 = 28;
            goto LABEL_85;
          case 0x31:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 49;
            v29 = 49;
            goto LABEL_85;
          case 0x32:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 50;
            v29 = 50;
            goto LABEL_85;
          case 0x33:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 51;
            v29 = 51;
            goto LABEL_85;
          case 0x34:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 52;
            v29 = 52;
            goto LABEL_85;
          case 0x35:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 53;
            v29 = 53;
            goto LABEL_85;
          case 0x36:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 54;
            v29 = 54;
            goto LABEL_85;
          case 0x37:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 55;
            v29 = 55;
            goto LABEL_85;
          case 0x39:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 57;
            v29 = 57;
            goto LABEL_85;
          case 0x3A:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 58;
            v29 = 58;
            goto LABEL_85;
          case 0x3B:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 59;
            v29 = 59;
            goto LABEL_85;
          case 0x3C:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 60;
            v29 = 60;
            goto LABEL_85;
          case 0x3D:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 61;
            v29 = 61;
            goto LABEL_85;
          case 0x3E:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 62;
            v29 = 62;
            goto LABEL_85;
          case 0x40:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 64;
            v29 = 64;
            goto LABEL_85;
          case 0x41:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 65;
            v29 = 65;
            goto LABEL_85;
          case 0x43:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 67;
            v29 = 67;
            goto LABEL_85;
          case 0x44:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 68;
            v29 = 68;
            goto LABEL_85;
          case 0x45:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 69;
            v29 = 69;
            goto LABEL_85;
          case 0x46:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 70;
            v29 = 70;
            goto LABEL_85;
          case 0x47:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 71;
            v29 = 71;
            goto LABEL_85;
          case 0x48:
            v15 = *(_QWORD *)(a1 + 8);
            v16 = bmalloc::api::isoAllocate();
            v17 = 72;
            v29 = 72;
LABEL_85:
            result = (WTF::StringImpl *)WebCore::CSSNumericType::create(v29, 1, (uint64_t)&v41);
            *(_QWORD *)&v30 = 0x8000000080000000;
            *((_QWORD *)&v30 + 1) = 0x8000000080000000;
            v39 = v30;
            v40 = xmmword_1968BD2E0;
            v19 = (WTF::StringImpl **)&v39;
            if ((_BYTE)v45)
              v19 = &v41;
            *(_DWORD *)(v16 + 8) = 1;
LABEL_88:
            *(_QWORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 24) = 0;
            v31 = *((_OWORD *)v19 + 1);
            *(_OWORD *)(v16 + 40) = *(_OWORD *)v19;
            *(_QWORD *)(v16 + 32) = 0;
            *(_OWORD *)(v16 + 56) = v31;
            *(_QWORD *)v16 = &off_1E339F080;
            *(_QWORD *)(v16 + 72) = v15;
            *(_BYTE *)(v16 + 80) = v17;
            *(_QWORD *)a5 = v16;
            break;
          default:
            goto LABEL_21;
        }
        goto LABEL_89;
      }
      WebCore::CSSNumericValue::reifyMathExpression(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)&v41);
      v13 = v43;
      if ((_DWORD)v43)
      {
        if ((_DWORD)v43 != 1)
          goto LABEL_97;
        v14 = v42;
        v42 = 0;
        *(_BYTE *)a5 = (_BYTE)v41;
        *(_QWORD *)(a5 + 8) = v14;
      }
      else
      {
        v21 = v41;
        v41 = 0;
        *(_QWORD *)a5 = v21;
      }
      *(_DWORD *)(a5 + 16) = v13;
      v22 = off_1E339F2A8;
      return (WTF::StringImpl *)((uint64_t (*)(__int128 *, WTF::StringImpl **))v22[v13])(&v39, &v41);
    case 114688:
      v20 = *(_QWORD *)(a1 + 8);
      break;
    case 94208:
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      break;
    case 2048:
      *(_DWORD *)a1 += 2;
      v11 = bmalloc::api::isoAllocate();
      result = 0;
      *(_DWORD *)(v11 + 8) = 1;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)v11 = &off_1E339F040;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = a1;
      if (a3)
      {
        result = (WTF::StringImpl *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)a3);
        if (result)
        {
          do
            v32 = __ldaxr((unsigned int *)result);
          while (__stlxr(v32 + 1, (unsigned int *)result));
        }
      }
      *(_QWORD *)(v11 + 48) = result;
      *(_QWORD *)a5 = v11;
      goto LABEL_89;
    case 135168:
      WebCore::CSSTransformValue::create(a1, (uint64_t)&v41);
      v13 = v43;
      if ((_DWORD)v43)
      {
        if ((_DWORD)v43 != 1)
          goto LABEL_97;
        v23 = v42;
        v42 = 0;
        *(_BYTE *)a5 = (_BYTE)v41;
        *(_QWORD *)(a5 + 8) = v23;
      }
      else
      {
        v26 = v41;
        v41 = 0;
        *(_QWORD *)a5 = v26;
      }
      *(_DWORD *)(a5 + 16) = v13;
      v22 = off_1E339F2C8;
      return (WTF::StringImpl *)((uint64_t (*)(__int128 *, WTF::StringImpl **))v22[v13])(&v39, &v41);
    case 120832:
      v24 = *(_DWORD *)(a1 + 8);
      if (v24 == 1)
      {
        if ((a2 & 0xFF0000) == 0 || (a2 & 0xFFFC) != 0x84)
          return (WTF::StringImpl *)WebCore::CSSStyleValueFactory::reifyValue((_QWORD *)a5, *(_QWORD *)(a1 + 16), a2, a3);
      }
      else
      {
        if (!v24)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
          v25 = v41;
          *(_BYTE *)a5 = 33;
          *(_QWORD *)(a5 + 8) = v25;
          *(_DWORD *)(a5 + 16) = 1;
          return result;
        }
        if ((a2 & 0xFF0000) == 0)
          goto LABEL_21;
      }
      if (!WebCore::CSSProperty::listValuedPropertySeparator((unsigned __int16)a2))
        goto LABEL_21;
      return (WTF::StringImpl *)WebCore::CSSStyleValueFactory::reifyValue((_QWORD *)a5, *(_QWORD *)(a1 + 16), a2, a3);
    case 59392:
      v36 = a1;
      v41 = (WTF::StringImpl *)a1;
      v42 = (int *)&v38;
      v43 = &v37;
      v44 = (int *)&v38;
      v45 = a1;
      v46 = &v36;
      v47 = &v36;
      v48 = &v36;
      v33 = *(unsigned int *)(a1 + 72);
      if ((_DWORD)v33 != -1)
      {
        *(_QWORD *)&v39 = &v41;
        return (WTF::StringImpl *)((uint64_t (*)(__int128 *, uint64_t))off_1E339F358[v33])(&v39, a1 + 24);
      }
LABEL_97:
      v34 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings(v34);
    default:
LABEL_21:
      *(_DWORD *)a1 += 2;
      result = (WTF::StringImpl *)bmalloc::api::isoAllocate();
      *((_DWORD *)result + 2) = 1;
      *(_QWORD *)result = &off_1E339F420;
      *((_QWORD *)result + 2) = 0;
      *((_QWORD *)result + 3) = 0;
      *((_QWORD *)result + 4) = a1;
      *(_QWORD *)a5 = result;
      goto LABEL_89;
  }
  result = WebCore::CSSUnparsedValue::create(*(__int128 **)(v20 + 16), (__int128 *)(*(_QWORD *)(v20 + 16) + 24 * *(unsigned int *)(v20 + 28)), (uint64_t *)&v41);
  *(_QWORD *)a5 = v41;
LABEL_89:
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

_DWORD *WebCore::CSSStyleValueFactory::vectorFromStyleValuesOrStrings@<X0>(_DWORD *result@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v5;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  WTF *v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v5 = result;
  v21 = 0;
  v22 = 0;
  v7 = *a2;
  if (*a2)
    v8 = (uint64_t)(*a2 + 2);
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)&(*a2)[4 * *v7 + 2];
  else
    v9 = 0;
  if (v8 == v9)
  {
    v12 = 0;
    v13 = 0;
LABEL_13:
    *(_QWORD *)a4 = v12;
    *(_QWORD *)(a4 + 8) = v13;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    while (1)
    {
      v18 = 0;
      v20 = 0;
      v23[2] = a3;
      v23[3] = &v18;
      v23[4] = &v21;
      v23[0] = &v21;
      v23[1] = v5;
      v10 = *(unsigned int *)(v8 + 8);
      if ((_DWORD)v10 == -1)
      {
        v17 = std::__throw_bad_variant_access[abi:sn180100]();
        return (_DWORD *)WebCore::CSSUnitValue::serialize(v17);
      }
      v24 = v23;
      result = (_DWORD *)((uint64_t (*)(_QWORD **, uint64_t))off_1E339F3B8[v10])(&v24, v8);
      if (v20)
        break;
      v8 += 16;
      if (v8 == v9)
      {
        v12 = v21;
        v13 = v22;
        goto LABEL_13;
      }
    }
    v14 = v19;
    *(_BYTE *)a4 = v18;
    *(_QWORD *)(a4 + 8) = v14;
    *(_DWORD *)(a4 + 16) = 1;
    v15 = v21;
    if (HIDWORD(v22))
    {
      v16 = 8 * HIDWORD(v22);
      do
      {
        result = *(_DWORD **)v15;
        *(_QWORD *)v15 = 0;
        if (result)
        {
          if (result[2] == 1)
            result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
          else
            --result[2];
        }
        v15 = (WTF *)((char *)v15 + 8);
        v16 -= 8;
      }
      while (v16);
      v15 = v21;
    }
    if (v15)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      return (_DWORD *)WTF::fastFree(v15, v11);
    }
  }
  return result;
}

uint64_t WebCore::CSSUnitValue::serialize(uint64_t a1, uint64_t *a2)
{
  int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  __int128 v14;
  int8x16_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char __s[332];
  _DWORD __n[3];
  int8x16x2_t v25;
  int8x16x2_t v26;
  int8x16x2_t v27;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  WTF::numberToCSSString();
  __n[0] = strlen(__s);
  v4 = *((_DWORD *)a2 + 4);
  v5 = __CFADD__(v4, __n[0]);
  v6 = v4 + __n[0];
  if (v5)
    v7 = 0xFFFFFFFFLL;
  else
    v7 = v6;
  v8 = a2[1];
  if ((v8 || (v8 = *a2) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    v9 = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a2);
    if (v9)
    {
      v10 = &v9[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v13 = &v9[2 * (__n[0] & 0xFFFFFFC0)];
        v11 = __s;
        v14 = 0uLL;
        do
        {
          v25.val[0] = *(int8x16_t *)v11;
          v15 = *((int8x16_t *)v11 + 1);
          v26.val[0] = (int8x16_t)*((_OWORD *)v11 + 2);
          v16 = *((_OWORD *)v11 + 3);
          v11 += 64;
          v17 = v16;
          v26.val[1] = 0uLL;
          v27.val[0] = v15;
          v25.val[1] = 0uLL;
          v18 = v9;
          vst2q_s8(v18, v25);
          v18 += 32;
          v27.val[1] = 0uLL;
          vst2q_s8(v18, v27);
          v19 = v9 + 64;
          vst2q_s8(v19, v26);
          v20 = v9 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v14 - 1));
          v9 += 128;
        }
        while (v9 != v13);
        v9 = v13;
      }
      else
      {
        v11 = __s;
      }
      while (v9 != v10)
      {
        v21 = *v11++;
        *(_WORD *)v9 = v21;
        v9 += 2;
      }
    }
  }
  else
  {
    v12 = (_BYTE *)MEMORY[0x19AEA4824](a2, v7);
    if (v12 && __n[0])
    {
      if (__n[0] == 1)
        *v12 = __s[0];
      else
        memcpy(v12, __s, __n[0]);
    }
  }
  WebCore::CSSPrimitiveValue::unitTypeString(*(unsigned __int8 *)(a1 + 80));
  return WTF::StringBuilder::append();
}

uint64_t WebCore::CSSUnitValue::create@<X0>(WebCore::CSSUnitValue *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  int v16;
  _OWORD v17[2];
  char v18;
  _OWORD v19[2];
  _BYTE v20[36];

  if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "number", 6) & 1) != 0)
  {
    v7 = 1;
  }
  else if ((MEMORY[0x19AEA53F4](*(_QWORD *)this, "percent", 7) & 1) != 0)
  {
    v7 = 3;
  }
  else
  {
    v8 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v9 = *(unsigned __int8 **)(v8 + 8);
      v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v9 = 0;
      v10 = 0x100000000;
    }
    result = WebCore::CSSParserToken::stringToUnitType(v9, v10);
    v7 = result;
    if (!(_DWORD)result)
      goto LABEL_13;
  }
  result = WebCore::CSSNumericType::create(v7, 1, (uint64_t)v17);
  if (!v18)
  {
LABEL_13:
    *(_BYTE *)a3 = 33;
    *(_QWORD *)(a3 + 8) = 0;
    v16 = 1;
    goto LABEL_14;
  }
  v12 = bmalloc::api::isoAllocate();
  result = WebCore::CSSNumericType::create(v7, 1, (uint64_t)v20);
  *(_QWORD *)&v13 = 0x8000000080000000;
  *((_QWORD *)&v13 + 1) = 0x8000000080000000;
  v19[0] = v13;
  v19[1] = xmmword_1968BD2E0;
  v14 = v19;
  if (v20[32])
    v14 = v20;
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  v15 = v14[1];
  *(_OWORD *)(v12 + 40) = *v14;
  *(_QWORD *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 56) = v15;
  *(_QWORD *)v12 = &off_1E339F080;
  *(double *)(v12 + 72) = a2;
  *(_BYTE *)(v12 + 80) = v7;
  if (v18)
  {
    v16 = 0;
    *(_OWORD *)(v12 + 40) = v17[0];
    *(_OWORD *)(v12 + 53) = *(_OWORD *)((char *)v17 + 13);
    *(_QWORD *)a3 = v12;
LABEL_14:
    *(_DWORD *)(a3 + 16) = v16;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::CSSUnitValue::convertTo@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned int v6;
  int v7;
  uint64_t result;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD v16[2];
  _BYTE v17[36];

  v6 = *(unsigned __int8 *)(a1 + 80);
  v7 = WebCore::unitCategory(v6);
  result = WebCore::unitCategory(a2);
  if (v7 == (_DWORD)result)
  {
    v9 = 0.001;
    v10 = 0.001;
    switch(v6)
    {
      case 7u:
        v10 = 37.7952756;
        break;
      case 8u:
        v10 = 3.77952756;
        break;
      case 9u:
        v10 = 96.0;
        break;
      case 0xAu:
        v10 = 1.33333333;
        break;
      case 0xBu:
        v10 = 16.0;
        break;
      case 0xCu:
      case 0x10u:
      case 0x11u:
LABEL_15:
        v10 = 1.0;
        break;
      case 0xDu:
        v10 = 57.2957795;
        break;
      case 0xEu:
        v10 = 0.9;
        break;
      case 0xFu:
        break;
      case 0x12u:
        v10 = 1000.0;
        break;
      default:
        switch(v6)
        {
          case '9':
            v10 = 0.0104166667;
            break;
          case ':':
            v10 = 0.0264583333;
            break;
          case '<':
            v10 = 0.94488189;
            break;
          case '@':
            v10 = 360.0;
            break;
          default:
            goto LABEL_15;
        }
        break;
    }
    switch(a2)
    {
      case 7u:
        v9 = 37.7952756;
        break;
      case 8u:
        v9 = 3.77952756;
        break;
      case 9u:
        v9 = 96.0;
        break;
      case 0xAu:
        v9 = 1.33333333;
        break;
      case 0xBu:
        v9 = 16.0;
        break;
      case 0xCu:
      case 0x10u:
      case 0x11u:
LABEL_30:
        v9 = 1.0;
        break;
      case 0xDu:
        v9 = 57.2957795;
        break;
      case 0xEu:
        v9 = 0.9;
        break;
      case 0xFu:
        break;
      case 0x12u:
        v9 = 1000.0;
        break;
      default:
        switch(a2)
        {
          case '9':
            v9 = 0.0104166667;
            break;
          case ':':
            v9 = 0.0264583333;
            break;
          case '<':
            v9 = 0.94488189;
            break;
          case '@':
            v9 = 360.0;
            break;
          default:
            goto LABEL_30;
        }
        break;
    }
    v12 = *(double *)(a1 + 72) * v10 / v9;
    v11 = bmalloc::api::isoAllocate();
    result = WebCore::CSSNumericType::create(a2, 1, (uint64_t)v17);
    *(_QWORD *)&v13 = 0x8000000080000000;
    *((_QWORD *)&v13 + 1) = 0x8000000080000000;
    v16[0] = v13;
    v16[1] = xmmword_1968BD2E0;
    v14 = v16;
    if (v17[32])
      v14 = v17;
    *(_DWORD *)(v11 + 8) = 1;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    v15 = v14[1];
    *(_OWORD *)(v11 + 40) = *v14;
    *(_QWORD *)(v11 + 32) = 0;
    *(_OWORD *)(v11 + 56) = v15;
    *(_QWORD *)v11 = &off_1E339F080;
    *(double *)(v11 + 72) = v12;
    *(_BYTE *)(v11 + 80) = a2;
  }
  else
  {
    v11 = 0;
  }
  *a3 = v11;
  return result;
}

uint64_t *WebCore::CSSUnitValue::toSumValue@<X0>(WebCore::CSSUnitValue *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t *result;
  void *v25;
  double v26;
  unsigned __int8 *v27[2];

  v27[1] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)this + 80);
  v5 = v4;
  v6 = WebCore::unitCategory(v4);
  if (v6 <= 9 && ((0x3E7u >> v6) & 1) != 0)
    v5 = byte_1969F0120[v6];
  v7 = 0.001;
  v8 = 0.001;
  switch(v4)
  {
    case 7u:
      v8 = 37.7952756;
      break;
    case 8u:
      v8 = 3.77952756;
      break;
    case 9u:
      v8 = 96.0;
      break;
    case 0xAu:
      v8 = 1.33333333;
      break;
    case 0xBu:
      v8 = 16.0;
      break;
    case 0xCu:
    case 0x10u:
    case 0x11u:
LABEL_15:
      v8 = 1.0;
      break;
    case 0xDu:
      v8 = 57.2957795;
      break;
    case 0xEu:
      v8 = 0.9;
      break;
    case 0xFu:
      break;
    case 0x12u:
      v8 = 1000.0;
      break;
    default:
      switch(v4)
      {
        case '9':
          v8 = 0.0104166667;
          break;
        case ':':
          v8 = 0.0264583333;
          break;
        case '<':
          v8 = 0.94488189;
          break;
        case '@':
          v8 = 360.0;
          break;
        default:
          goto LABEL_15;
      }
      break;
  }
  v9 = *((double *)this + 9) * v8;
  switch(v5)
  {
    case 7u:
      v7 = 37.7952756;
      break;
    case 8u:
      v7 = 3.77952756;
      break;
    case 9u:
      v7 = 96.0;
      break;
    case 0xAu:
      v7 = 1.33333333;
      break;
    case 0xBu:
      v7 = 16.0;
      break;
    case 0xCu:
    case 0x10u:
    case 0x11u:
LABEL_30:
      v7 = 1.0;
      break;
    case 0xDu:
      v7 = 57.2957795;
      break;
    case 0xEu:
      v7 = 0.9;
      break;
    case 0xFu:
      break;
    case 0x12u:
      v7 = 1000.0;
      break;
    default:
      switch(v5)
      {
        case '9':
          v7 = 0.0104166667;
          break;
        case ':':
          v7 = 0.0264583333;
          break;
        case '<':
          v7 = 0.94488189;
          break;
        case '@':
          v7 = 360.0;
          break;
        default:
          goto LABEL_30;
      }
      break;
  }
  v10 = v9 / v7;
  if (v4 == 1)
  {
    v27[0] = 0;
    v11 = WTF::fastMalloc((WTF *)0x10);
    v12 = v11;
    *(double *)v11 = v10;
    goto LABEL_51;
  }
  v26 = v9 / v7;
  v13 = WTF::fastMalloc((WTF *)0x50);
  *(_BYTE *)(v13 + 16) = -1;
  *(_DWORD *)(v13 + 20) = 0;
  *(_BYTE *)(v13 + 24) = -1;
  *(_DWORD *)(v13 + 28) = 0;
  *(_BYTE *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 36) = 0;
  *(_BYTE *)(v13 + 40) = -1;
  *(_DWORD *)(v13 + 44) = 0;
  *(_BYTE *)(v13 + 48) = -1;
  *(_DWORD *)(v13 + 52) = 0;
  *(_BYTE *)(v13 + 56) = -1;
  *(_DWORD *)(v13 + 60) = 0;
  *(_BYTE *)(v13 + 64) = -1;
  *(_DWORD *)(v13 + 68) = 0;
  *(_BYTE *)(v13 + 72) = -1;
  *(_DWORD *)(v13 + 76) = 0;
  v27[0] = (unsigned __int8 *)(v13 + 16);
  *(_OWORD *)v13 = xmmword_1968A5190;
  v14 = 9 * ((~(v5 << 15) + v5) ^ ((~(v5 << 15) + v5) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = (v15 ^ HIWORD(v15)) & 7;
  v17 = (unsigned __int8 *)(v13 + 16 + 8 * v16);
  v18 = *v17;
  if (v18 != 255)
  {
    v19 = 0;
    v20 = 1;
    while (v5 != v18)
    {
      if (v18 == 254)
        v19 = v17;
      v16 = ((_BYTE)v16 + (_BYTE)v20) & 7;
      v17 = (unsigned __int8 *)(v13 + 16 + 8 * v16);
      v18 = *v17;
      ++v20;
      if (v18 == 255)
      {
        if (v19)
        {
          *v19 = -1;
          *((_DWORD *)v19 + 1) = 0;
          --*(_DWORD *)v13;
          v17 = v19;
        }
        goto LABEL_44;
      }
    }
    goto LABEL_50;
  }
LABEL_44:
  *v17 = v5;
  *((_DWORD *)v17 + 1) = 1;
  *(_DWORD *)(v13 + 4) = 1;
  v21 = (*(_DWORD *)v13 + 1);
  v22 = *(unsigned int *)(v13 + 12);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_50;
    goto LABEL_47;
  }
  if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v23 = 8;
      goto LABEL_49;
    }
LABEL_47:
    v23 = (_DWORD)v22 << ((2 * v22) < 7);
LABEL_49:
    WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash((uint64_t *)v27, v23, v17);
  }
LABEL_50:
  v11 = WTF::fastMalloc((WTF *)0x10);
  v12 = v11;
  *(double *)v11 = v26;
LABEL_51:
  result = WTF::HashTable<WebCore::CSSUnitType,WTF::KeyValuePair<WebCore::CSSUnitType,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSUnitType,int>>,WTF::IntHash<WebCore::CSSUnitType>,WTF::HashMap<WebCore::CSSUnitType,int,WTF::IntHash<WebCore::CSSUnitType>,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CSSUnitType>>::HashTable((uint64_t *)(v11 + 8), v27);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = 0x100000001;
  *(_BYTE *)(a2 + 16) = 1;
  if (v27[0])
    return (uint64_t *)WTF::fastFree((WTF *)(v27[0] - 16), v25);
  return result;
}

BOOL WebCore::CSSUnitValue::equals(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == 10
      && *(double *)(a1 + 72) == *(double *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80);
}

int *WebCore::CSSUnitValue::toCSSValue@<X0>(WebCore::CSSUnitValue *this@<X0>, int **a2@<X8>)
{
  double v3;
  int v4;
  int *v6;
  int *result;
  int v8;
  BOOL v9;
  char v11;

  v3 = *((double *)this + 9);
  v4 = *((unsigned __int8 *)this + 80);
  if (v4 == 6)
  {
    if ((int)v3 > 0xFF || *(_QWORD *)&v3 != COERCE__INT64((double)(int)v3))
      goto LABEL_20;
    v6 = &WebCore::staticCSSValuePool[4 * (int)v3];
    v8 = v6[16];
    result = v6 + 16;
    *result = v8 + 2;
  }
  else
  {
    if (v4 == 1)
    {
      if ((int)v3 <= 0xFF && *(_QWORD *)&v3 == COERCE__INT64((double)(int)v3))
      {
        result = &WebCore::staticCSSValuePool[4 * (int)v3 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v4 != 3
      || ((int)v3 <= 0xFF
        ? (v9 = *(_QWORD *)&v3 == COERCE__INT64((double)(int)v3))
        : (v9 = 0),
          !v9))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v11 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v4 & 0x7F;
      *((_BYTE *)result + 6) = v11 & 0xFC;
      *((double *)result + 1) = v3;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * (int)v3 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

int *WebCore::CSSUnitValue::toCSSValueWithProperty@<X0>(uint64_t a1@<X0>, int a2@<W1>, int **a3@<X8>)
{
  double v5;
  int v6;
  int isSimpleLengthPropertyID;
  uint64_t v10;
  uint64_t v11;
  int *v13;
  int *v14;
  int v15;
  char v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  int v22;
  char v23;
  WTF *v24;
  int v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int *result;
  char v32;
  double v33;
  int *v36;
  int v37;
  BOOL v38;
  char v40;
  _BYTE *v41;
  _DWORD *v42;
  WTF *v43[2];

  v5 = *(double *)(a1 + 72);
  v6 = *(unsigned __int8 *)(a1 + 80);
  LOBYTE(v43[0]) = 0;
  isSimpleLengthPropertyID = WebCore::CSSParserFastPaths::isSimpleLengthPropertyID(a2, (char *)v43);
  if (v5 < 0.0 && isSimpleLengthPropertyID != 0 && LOBYTE(v43[0]) == 1)
    goto LABEL_40;
  if (a2 > 280)
  {
    if (a2 <= 353)
    {
      if (a2 == 281)
        goto LABEL_39;
      if (a2 != 295)
      {
        if (a2 != 300)
          goto LABEL_74;
LABEL_22:
        if (round(v5) == v5)
          goto LABEL_74;
        goto LABEL_40;
      }
LABEL_69:
      v33 = round(v5);
      if (v5 < 1.0 || v33 != v5)
        goto LABEL_40;
      goto LABEL_74;
    }
    if ((a2 - 354) <= 0x3F && ((1 << (a2 - 98)) & 0xBE00010162490B49) != 0
      || (a2 - 440) < 8)
    {
      goto LABEL_39;
    }
  }
  else
  {
    if (a2 > 117)
    {
      v10 = (a2 - 185);
      if (v10 > 0x3E)
        goto LABEL_30;
      if (((1 << (a2 + 71)) & 0x28800001C402010) != 0)
        goto LABEL_39;
      if (a2 != 185)
      {
        if (v10 == 62)
        {
          if (v5 >= 0.0)
          {
            if (v6 != 1 || round(v5) == v5)
              goto LABEL_74;
            goto LABEL_55;
          }
LABEL_40:
          if (v6 == 6)
          {
            if ((int)v5 <= 0xFF && *(_QWORD *)&v5 == COERCE__INT64((double)(int)v5))
            {
              v13 = &WebCore::staticCSSValuePool[4 * (int)v5];
              v15 = v13[16];
              v14 = v13 + 16;
              *v14 = v15 + 2;
              goto LABEL_60;
            }
            goto LABEL_59;
          }
          if (v6 != 1)
          {
            if (v6 == 3
              && (int)v5 <= 0xFF
              && *(_QWORD *)&v5 == COERCE__INT64((double)(int)v5))
            {
              v14 = &WebCore::staticCSSValuePool[4 * (int)v5 + 1040];
              *v14 += 2;
              goto LABEL_60;
            }
            goto LABEL_59;
          }
LABEL_55:
          if ((int)v5 <= 0xFF && *(_QWORD *)&v5 == COERCE__INT64((double)(int)v5))
          {
            v14 = &WebCore::staticCSSValuePool[4 * (int)v5 + 2064];
            *v14 += 2;
LABEL_60:
            v19 = WTF::fastMalloc((WTF *)0x18);
            v20 = *((_WORD *)v14 + 2);
            v21 = v20 & 0x7F;
            v22 = 22;
            if ((v21 - 79) >= 2)
            {
              if (v21 == 77)
              {
                v22 = 20;
              }
              else if (v21 != 63)
              {
                v22 = v14[1] & 0x7F;
                if ((v20 & 0x7F) == 0x49)
                {
                  v41 = *(_BYTE **)(*((_QWORD *)v14 + 1) + 8);
                  if (v41[12] == 1)
                  {
LABEL_99:
                    v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41 + 72))(*(_QWORD *)(*((_QWORD *)v14 + 1)
                                                                                                + 8));
                  }
                  else
                  {
                    v22 = 1;
                    switch(v41[12])
                    {
                      case 0:
                        break;
                      case 2:
                        v22 = 3;
                        break;
                      case 3:
                        v22 = 74;
                        break;
                      case 4:
                        v22 = 75;
                        break;
                      case 5:
                      case 6:
                      case 7:
                      case 8:
                        goto LABEL_99;
                      default:
                        v22 = 0;
                        break;
                    }
                  }
                }
              }
            }
            v23 = WebCore::calcUnitCategory(v22);
            *(_DWORD *)(v19 + 8) = 1;
            *(_BYTE *)(v19 + 12) = v23;
            *(_QWORD *)v19 = off_1E3399F60;
            *(_QWORD *)(v19 + 16) = v14;
            v24 = (WTF *)WTF::fastMalloc((WTF *)8);
            v43[0] = v24;
            ++*(_DWORD *)(v19 + 8);
            *(_QWORD *)v24 = v19;
            v43[1] = (WTF *)0x100000001;
            v25 = WebCore::determineCategory(v43, 43);
            if (v25 == 9)
            {
              v42 = *(_DWORD **)v24;
              *(_QWORD *)v24 = 0;
              if (v42)
              {
                if (v42[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
                else
                  --v42[2];
              }
              if (v43[0])
                WTF::fastFree(v43[0], v26);
              v28 = 0;
            }
            else
            {
              v27 = v25;
              v28 = WTF::fastMalloc((WTF *)0x28);
              *(_DWORD *)(v28 + 8) = 1;
              *(_BYTE *)(v28 + 12) = v27;
              *(_QWORD *)v28 = off_1E339A040;
              *(_BYTE *)(v28 + 13) = 43;
              *(_QWORD *)(v28 + 16) = v24;
              *(_QWORD *)(v28 + 24) = 0x100000001;
              *(_WORD *)(v28 + 32) = 256;
            }
            if (*(_DWORD *)(v19 + 8) == 1)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
              if (v28)
                goto LABEL_68;
            }
            else
            {
              --*(_DWORD *)(v19 + 8);
              if (v28)
              {
LABEL_68:
                v29 = WTF::fastCompactMalloc((WTF *)0x18);
                *(_DWORD *)v29 = 2;
                v30 = *(_BYTE *)(v29 + 6);
                *(_WORD *)(v29 + 4) = -14336;
                *(_BYTE *)(v29 + 6) = v30 & 0xFC;
                *(_QWORD *)(v29 + 8) = v28;
                *(_BYTE *)(v29 + 16) = 0;
                result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
                *result = 2;
                v32 = *((_BYTE *)result + 6);
                *((_WORD *)result + 2) = 73;
                *((_BYTE *)result + 6) = v32 & 0xFC;
                *((_QWORD *)result + 1) = v29;
                goto LABEL_96;
              }
            }
            result = 0;
            goto LABEL_96;
          }
LABEL_59:
          v14 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *v14 = 2;
          v18 = *((_BYTE *)v14 + 6);
          *((_WORD *)v14 + 2) = v6 & 0x7F;
          *((_BYTE *)v14 + 6) = v18 & 0xFC;
          *((double *)v14 + 1) = v5;
          goto LABEL_60;
        }
LABEL_30:
        if ((a2 - 118) > 0x24 || ((1 << (a2 - 118)) & 0x100018280DLL) == 0)
        {
          if (a2 != 184)
            goto LABEL_74;
          goto LABEL_22;
        }
LABEL_39:
        if (v5 >= 0.0)
          goto LABEL_74;
        goto LABEL_40;
      }
      goto LABEL_69;
    }
    v11 = (a2 - 13);
    if (v11 > 0x3F)
      goto LABEL_38;
    if (((1 << (a2 - 13)) & 0xA820005000000007) != 0)
      goto LABEL_39;
    if (v11 != 15)
    {
LABEL_38:
      switch(a2)
      {
        case 'Z':
          goto LABEL_69;
        case '\\':
        case '_':
        case 'a':
          goto LABEL_39;
        default:
          goto LABEL_74;
      }
    }
    if (v5 < 1.0 || v5 > 1000.0)
      goto LABEL_40;
  }
LABEL_74:
  if (v6 == 6)
  {
    if ((int)v5 > 0xFF || *(_QWORD *)&v5 != COERCE__INT64((double)(int)v5))
      goto LABEL_95;
    v36 = &WebCore::staticCSSValuePool[4 * (int)v5];
    v37 = v36[16];
    result = v36 + 16;
    *result = v37 + 2;
  }
  else
  {
    if (v6 == 1)
    {
      if ((int)v5 <= 0xFF && *(_QWORD *)&v5 == COERCE__INT64((double)(int)v5))
      {
        result = &WebCore::staticCSSValuePool[4 * (int)v5 + 2064];
        *result += 2;
        goto LABEL_96;
      }
      goto LABEL_95;
    }
    if (v6 != 3
      || ((int)v5 <= 0xFF
        ? (v38 = *(_QWORD *)&v5 == COERCE__INT64((double)(int)v5))
        : (v38 = 0),
          !v38))
    {
LABEL_95:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v40 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v6 & 0x7F;
      *((_BYTE *)result + 6) = v40 & 0xFC;
      *((double *)result + 1) = v5;
      goto LABEL_96;
    }
    result = &WebCore::staticCSSValuePool[4 * (int)v5 + 1040];
    *result += 2;
  }
LABEL_96:
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSUnitValue::toCalcExpressionNode@<X0>(WebCore::CSSUnitValue *this@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  int v4;
  int *v6;
  int *v7;
  int v8;
  char v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  uint64_t result;
  _BYTE *v17;

  v3 = *((double *)this + 9);
  v4 = *((unsigned __int8 *)this + 80);
  if (v4 == 6)
  {
    if ((int)v3 <= 0xFF && *(_QWORD *)&v3 == COERCE__INT64((double)(int)v3))
    {
      v6 = &WebCore::staticCSSValuePool[4 * (int)v3];
      v8 = v6[16];
      v7 = v6 + 16;
      *v7 = v8 + 2;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v4 != 1)
  {
    if (v4 == 3 && (int)v3 <= 0xFF && *(_QWORD *)&v3 == COERCE__INT64((double)(int)v3))
    {
      v7 = &WebCore::staticCSSValuePool[4 * (int)v3 + 1040];
      *v7 += 2;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((int)v3 > 0xFF || *(_QWORD *)&v3 != COERCE__INT64((double)(int)v3))
  {
LABEL_20:
    v7 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v7 = 2;
    v11 = *((_BYTE *)v7 + 6);
    *((_WORD *)v7 + 2) = v4 & 0x7F;
    *((_BYTE *)v7 + 6) = v11 & 0xFC;
    *((double *)v7 + 1) = v3;
    goto LABEL_21;
  }
  v7 = &WebCore::staticCSSValuePool[4 * (int)v3 + 2064];
  *v7 += 2;
LABEL_21:
  v12 = WTF::fastMalloc((WTF *)0x18);
  v13 = *((_WORD *)v7 + 2);
  v14 = v13 & 0x7F;
  v15 = 22;
  if ((v14 - 79) >= 2)
  {
    if (v14 == 77)
    {
      v15 = 20;
    }
    else if (v14 != 63)
    {
      v15 = v7[1] & 0x7F;
      if ((v13 & 0x7F) == 0x49)
      {
        v17 = *(_BYTE **)(*((_QWORD *)v7 + 1) + 8);
        if (v17[12] == 1)
        {
LABEL_28:
          v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v17 + 72))(*(_QWORD *)(*((_QWORD *)v7 + 1) + 8));
        }
        else
        {
          v15 = 1;
          switch(v17[12])
          {
            case 0:
              break;
            case 2:
              v15 = 3;
              break;
            case 3:
              v15 = 74;
              break;
            case 4:
              v15 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_28;
            default:
              v15 = 0;
              break;
          }
        }
      }
    }
  }
  result = WebCore::calcUnitCategory(v15);
  *(_DWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 12) = result;
  *(_QWORD *)v12 = off_1E3399F60;
  *(_QWORD *)(v12 + 16) = v7;
  *a2 = v12;
  return result;
}

unsigned int *WebCore::CSSUnparsedValue::serialize(unsigned int *result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  char v13;
  _QWORD *v14;

  v13 = a3;
  v3 = result[13];
  if ((_DWORD)v3)
  {
    v5 = *((_QWORD *)result + 5);
    v6 = 16 * v3;
    while (1)
    {
      v12[0] = a2;
      v12[1] = a2;
      v12[2] = &v13;
      v7 = *(unsigned int *)(v5 + 8);
      if ((_DWORD)v7 == -1)
        break;
      v14 = v12;
      result = (unsigned int *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore16CSSUnparsedValue9serializeERNS6_13StringBuilderENS6_9OptionSetINS8_22SerializationArgumentsEEEE3__0JZNKS9_9serializeESB_SE_E3__1EEEEEJRKNS0_6__implIJNS6_6StringENS6_6RefPtrINS8_27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISM_EENS6_21DefaultRefDerefTraitsISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v14, v5);
      v5 += 16;
      v6 -= 16;
      if (!v6)
        return result;
    }
    v8 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSUnparsedValue::setItem(v8, v9, v10, v11);
  }
  return result;
}

unsigned int *WebCore::CSSUnparsedValue::setItem@<X0>(unsigned int *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  unint64_t v22;
  const char *v23;
  unsigned int v24;

  v6 = result[13];
  if (v6 < a2)
  {
    v22 = a2;
    v23 = "Index ";
    v24 = 6;
    v20 = " exceeds index range for unparsed segments.";
    v21 = 43;
    result = (unsigned int *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v23, &v22, (uint64_t)&v20, &v19);
    v7 = v19;
    if (v19)
    {
      *(_BYTE *)(a4 + 8) = 32;
      *(_QWORD *)(a4 + 16) = v7;
      *(_DWORD *)(a4 + 24) = 1;
      return result;
    }
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x19590C684);
  }
  v8 = result;
  v9 = result + 10;
  if (v6 == a2)
  {
    if ((_DWORD)v6 == result[12])
    {
      result = (unsigned int *)WTF::Vector<std::variant<WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WebCore::CSSOMVariableReferenceValue>,WTF::DefaultRefDerefTraits<WebCore::CSSOMVariableReferenceValue>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(result + 10), a2 + 1, a3);
      v10 = *((_QWORD *)v8 + 5) + 16 * v8[13];
      *(_BYTE *)v10 = 0;
      *(_DWORD *)(v10 + 8) = -1;
      v11 = result[2];
      if ((_DWORD)v11 != -1)
      {
        a3 = (unint64_t)result;
LABEL_13:
        result = (unsigned int *)((uint64_t (*)(const char **, uint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v11])(&v23, v10, a3);
        *(_DWORD *)(v10 + 8) = v11;
      }
    }
    else
    {
      v10 = *v9 + 16 * a2;
      *(_BYTE *)v10 = 0;
      *(_DWORD *)(v10 + 8) = -1;
      v11 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v11 != -1)
        goto LABEL_13;
    }
    ++v8[13];
    goto LABEL_17;
  }
  if (v6 <= a2)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  v12 = *v9 + 16 * a2;
  v13 = *(unsigned int *)(v12 + 8);
  v14 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v13 == -1)
  {
    if ((_DWORD)v14 == -1)
      goto LABEL_17;
LABEL_16:
    v23 = (const char *)(*v9 + 16 * a2);
    result = (unsigned int *)((uint64_t (*)(const char **, uint64_t))off_1E339F328[v14])(&v23, v12);
    goto LABEL_17;
  }
  if ((_DWORD)v14 != -1)
    goto LABEL_16;
  result = (unsigned int *)((uint64_t (*)(const char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v13])(&v23, *v9 + 16 * a2);
  *(_DWORD *)(v12 + 8) = -1;
LABEL_17:
  if (v8[13] <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19590C68CLL);
  }
  v15 = *v9 + 16 * a2;
  LOBYTE(v23) = 0;
  v24 = -1;
  v16 = *(unsigned int *)(v15 + 8);
  if ((_DWORD)v16 == -1)
  {
    *(_BYTE *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = -1;
    *(_DWORD *)(a4 + 24) = 0;
  }
  else
  {
    ((void (*)(const char **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JSO_SN_EEEDcmSQ_DpOT0____fdiagonal[v16])(&v20, &v23);
    *(_BYTE *)(a4 + 8) = 0;
    v17 = a4 + 8;
    v24 = v16;
    *(_DWORD *)(v17 + 8) = -1;
    result = (unsigned int *)((uint64_t (*)(const char **, uint64_t, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JSM_SL_EEEDcmSO_DpOT0____fdiagonal[v16])(&v20, v17, &v23);
    *(_DWORD *)(v17 + 8) = v16;
    v18 = v24;
    *(_DWORD *)(v17 + 16) = 0;
    if ((_DWORD)v18 != -1)
      return (unsigned int *)((uint64_t (*)(const char **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v18])(&v20, &v23);
  }
  return result;
}

void WebCore::CSSUnparsedValue::toCSSValue(WebCore::CSSUnparsedValue *this@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v3;
  WebCore *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[2];
  _BYTE v13[48];
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t v16;

  WebCore::CSSStyleValue::toString(this, v12);
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v13, (unsigned int **)v12, 0, 0);
  v4 = v12[0];
  if (v12[0])
  {
    if (*(_DWORD *)v12[0] == 2)
      v4 = (WebCore *)WTF::StringImpl::destroy(v12[0], v3);
    else
      *(_DWORD *)v12[0] -= 2;
  }
  v12[0] = v14;
  v12[1] = (WTF::StringImpl *)((char *)v14 + 24 * v15);
  v5 = WebCore::strictCSSParserContext(v4);
  v6 = WTF::fastCompactMalloc((WTF *)0x40);
  v7 = WTF::fastMalloc((WTF *)0x60);
  v8 = WebCore::CSSVariableData::CSSVariableData(v7, (char **)v12, (const WebCore::CSSParserContext *)v5);
  *(_DWORD *)v6 = 2;
  v9 = (((*(unsigned __int8 *)(v6 + 6) >> 2) & 0x3F) << 18) | 0x10000;
  *(_WORD *)(v6 + 4) = -16384;
  *(_BYTE *)(v6 + 6) = BYTE2(v9);
  v16 = 0;
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  WebCore::CSSVariableReferenceValue::cacheSimpleReference((WebCore::CSSVariableReferenceValue *)v6);
  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v16, v10);
  *a2 = v6;
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v13, v11);
}

unsigned int *WebCore::ComputedStylePropertyMapReadOnly::propertyValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::Node *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *result;
  WebCore::Node *v7;
  char v8;
  WTF::StringImpl *v9;
  char v10;
  char v11;

  v3 = *(WebCore::Node **)(a1 + 16);
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  v7 = v3;
  v8 = 0;
  v10 = 0;
  v11 = 0;
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v7, a2, 1, 1, a3);
  if (v10)
  {
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  result = (unsigned int *)v7;
  v7 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::ComputedStylePropertyMapReadOnly::shorthandPropertySerialization@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore *a3@<X8>)
{
  unsigned int *result;
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  WTF::StringImpl *v8;
  unsigned int *v9;

  result = WebCore::ComputedStylePropertyMapReadOnly::propertyValue(a1, a2, &v9);
  if (v9)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a3, (uint64_t)v9, v5, v6, v7);
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v8);
      else
        *result -= 2;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
  }
  return result;
}

unsigned int *WebCore::ComputedStylePropertyMapReadOnly::customPropertyValue@<X0>(WebCore::ComputedStylePropertyMapReadOnly *this@<X0>, const WTF::AtomString *a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  WebCore::Node *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int *result;
  WebCore::Node *v8;
  char v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;

  v4 = (WebCore::Node *)*((_QWORD *)this + 2);
  if (v4)
    *((_DWORD *)v4 + 6) += 2;
  v8 = v4;
  v9 = 0;
  v11 = 0;
  v12 = 0;
  WebCore::ComputedStyleExtractor::customPropertyValue((WebCore::ComputedStyleExtractor *)&v8, a2, a3, a4);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  result = (unsigned int *)v8;
  v8 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ComputedStylePropertyMapReadOnly::size(WebCore::ComputedStylePropertyMapReadOnly *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  WebCore::ComputedStyleExtractor::updateStyleIfNeededForProperty(*((_QWORD *)this + 2), 1, a3);
  v4 = *((_QWORD *)this + 2);
  v10[0] = 0;
  v12 = 0;
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 264))(v4, v10);
  if (v12)
  {
    v7 = v11;
    v11 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v5);
        if (v6)
          goto LABEL_6;
        return 0;
      }
      *(_DWORD *)v7 -= 2;
    }
  }
  if (!v6)
    return 0;
LABEL_6:
  v8 = *(_DWORD **)WebCore::Document::exposedComputedCSSPropertyIDs(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 40)
                                                                              + 8));
  if (v8)
    LODWORD(v8) = *v8;
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 216) + 24)
                      + (_DWORD)v8
                      + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 40) + 288) + 24));
}

unsigned int *WebCore::ComputedStylePropertyMapReadOnly::entries@<X0>(WebCore::ComputedStylePropertyMapReadOnly *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *result;
  WTF::StringImpl *v8;
  unsigned int *v9;
  WebCore::Node *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  unint64_t v15;
  int v16;
  WTF *v17;
  WebCore::Node *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl **v31;
  WTF::String *v32;
  __n128 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  const WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  char v53;
  char v54;
  WebCore::Node *v55;
  _QWORD v56[2];
  _DWORD *v57;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  WebCore::ComputedStyleExtractor::updateStyleIfNeededForProperty(*((_QWORD *)this + 2), 1, a2);
  v6 = *((_QWORD *)this + 2);
  LOBYTE(v50) = 0;
  LOBYTE(v52) = 0;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v6 + 264))(v6, &v50);
  v9 = result;
  if (!(_BYTE)v52 || (result = (unsigned int *)v51, v51 = 0, !result))
  {
LABEL_5:
    if (!v9)
      return result;
    goto LABEL_6;
  }
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_5;
  }
  result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
  if (!v9)
    return result;
LABEL_6:
  v10 = *(WebCore::Node **)(*(_QWORD *)(*((_QWORD *)this + 2) + 40) + 8);
  *((_DWORD *)v10 + 6) += 2;
  v55 = v10;
  v11 = *(_QWORD *)(*((_QWORD *)v9 + 3) + 216);
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 1) + 40) + 288);
  v13 = (unsigned int **)WebCore::Document::exposedComputedCSSPropertyIDs((uint64_t)v10);
  v14 = *v13;
  if (*v13)
    v14 = (unsigned int *)*v14;
  v15 = (unint64_t)v14 + *(unsigned int *)(v11 + 24) + *(unsigned int *)(v12 + 24);
  if (v15)
  {
    if (v15 >= 0xAAAAAAB)
      goto LABEL_65;
    v16 = 24 * v15;
    v17 = (WTF *)WTF::fastMalloc((WTF *)(24 * v15));
    LODWORD(v15) = (v16 & 0xFFFFFFF8) / 0x18;
    *(_DWORD *)(a3 + 8) = v15;
    *(_QWORD *)a3 = v17;
  }
  else
  {
    v17 = 0;
  }
  v18 = (WebCore::Node *)*((_QWORD *)this + 2);
  if (v18)
    *((_DWORD *)v18 + 6) += 2;
  v50 = v18;
  LOBYTE(v51) = 0;
  v53 = 0;
  v54 = 0;
  if (*v13)
  {
    v19 = **v13;
    if (v19 <= v15)
      goto LABEL_22;
    if (v19 < 0xAAAAAAB)
    {
      v20 = 24 * v19;
      v21 = WTF::fastMalloc((WTF *)(24 * v19));
      v23 = (WTF *)v21;
      *(_DWORD *)(a3 + 8) = (v20 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a3 = v21;
      if (v17)
      {
        if ((WTF *)v21 == v17)
        {
          v23 = 0;
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        WTF::fastFree(v17, v22);
      }
      v17 = v23;
LABEL_22:
      v24 = *v13;
      if (*v13)
      {
        v27 = *v24;
        v26 = (unsigned __int16 *)(v24 + 1);
        v25 = v27;
        if (v27)
        {
          v28 = 0;
          v29 = 2 * v25;
          while (1)
          {
            v30 = *v26;
            WebCore::ComputedStyleExtractor::propertyValue((uint64_t)&v50, *v26, 0, 1, &v57);
            v31 = (WTF::StringImpl **)WebCore::nameString(v30);
            WebCore::StylePropertyMapReadOnly::reifyValueToVector(&v57, v30 | 0x10000, v10, v32, (uint64_t)v56, v33);
            v35 = *v31;
            if (*v31)
              *(_DWORD *)v35 += 2;
            v36 = v56[0];
            v37 = v56[1];
            v38 = v57;
            v57 = 0;
            if (v38)
            {
              if (*v38 == 2)
              {
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v34);
                if (!v35)
                  goto LABEL_32;
LABEL_31:
                *(_DWORD *)v35 += 2;
                goto LABEL_32;
              }
              *v38 -= 2;
            }
            if (v35)
              goto LABEL_31;
LABEL_32:
            *((_QWORD *)v17 + 3 * v28) = v35;
            v39 = (char *)v17 + 24 * v28;
            *((_QWORD *)v39 + 1) = v36;
            *((_QWORD *)v39 + 2) = v37;
            v28 = *(_DWORD *)(a3 + 12) + 1;
            *(_DWORD *)(a3 + 12) = v28;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v34);
              else
                *(_DWORD *)v35 -= 2;
            }
            ++v26;
            v29 -= 2;
            if (!v29)
              goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x19590CE2CLL);
  }
LABEL_40:
  v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v40 = off_1E339F3F8;
  v40[1] = a3;
  v40[2] = &v55;
  v56[0] = v40;
  WebCore::StyleCustomPropertyData::forEachInternal<WTF::Function<WTF::IterationStatus ()(WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&)> const&>(v12, v56);
  v41 = v56[0];
  v56[0] = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v42 = off_1E339F3F8;
  v42[1] = a3;
  v42[2] = &v55;
  v56[0] = v42;
  WebCore::StyleCustomPropertyData::forEachInternal<WTF::Function<WTF::IterationStatus ()(WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&)> const&>(v11, v56);
  v43 = v56[0];
  v56[0] = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(unsigned int *)(a3 + 12);
  v45 = 126 - 2 * __clz(v44);
  if ((_DWORD)v44)
    v46 = (const WTF::StringImpl *)v45;
  else
    v46 = 0;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *,false>(*(_QWORD *)a3, (WTF::StringImpl *)(*(_QWORD *)a3 + 24 * v44), v46, 1);
  if (v53)
  {
    v48 = v52;
    v52 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v47);
      else
        *(_DWORD *)v48 -= 2;
    }
  }
  v49 = v50;
  v50 = 0;
  if (v49)
  {
    if (*((_DWORD *)v49 + 6) == 2)
    {
      if ((*((_WORD *)v49 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v49, v47);
    }
    else
    {
      *((_DWORD *)v49 + 6) -= 2;
    }
  }
  result = (unsigned int *)v55;
  v55 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v47);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DeclaredStylePropertyMap::size(WebCore::DeclaredStylePropertyMap *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_DWORD *)(v4 + 4);
  if ((v5 & 8) != 0)
    return *(unsigned int *)(v4 + 28);
  else
    return v5 >> 4;
}

uint64_t WebCore::DeclaredStylePropertyMap::entries@<X0>(uint64_t this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, WTF::String *a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringBuilder *v16;
  uint64_t v17;
  int i;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a2)
  {
    v6 = *(_QWORD *)(this + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 32);
        if (v8)
        {
          if (*((_BYTE *)a2 + 274))
          {
            __break(0xC471u);
            JUMPOUT(0x19590D0C4);
          }
          v10 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          v11 = *(_DWORD *)(v10 + 4);
          if ((v11 & 8) != 0)
          {
            v12 = *(_DWORD *)(v10 + 28);
            if (v12)
              goto LABEL_8;
          }
          else
          {
            v12 = v11 >> 4;
            if (v12)
            {
LABEL_8:
              if (v12 >= 0xAAAAAAB)
              {
                __break(0xC471u);
LABEL_36:
                JUMPOUT(0x19590D0A4);
              }
              v13 = 24 * v12;
              this = WTF::fastMalloc((WTF *)(24 * v12));
              v14 = this;
              *(_DWORD *)(a4 + 8) = (v13 & 0xFFFFFFF8) / 0x18;
              *(_QWORD *)a4 = this;
              goto LABEL_14;
            }
          }
          v14 = 0;
LABEL_14:
          v15 = 0;
          v16 = (WebCore::ScriptExecutionContext *)((char *)a2 - 192);
          v17 = v10 + 8;
          for (i = 1; ; ++i)
          {
            v19 = *(unsigned int *)(v10 + 4);
            if ((v19 & 8) != 0)
            {
              if (*(_DWORD *)(v10 + 28) <= v15)
                return this;
              v20 = *(_QWORD *)(v10 + 16) + 16 * v15;
              v22 = *(_QWORD *)(v20 + 8);
            }
            else
            {
              if (v15 >= v19 >> 4)
                return this;
              v20 = v17 + 2 * v15;
              v21 = (unsigned int *)(v17 + 5 * v15 + ((v19 >> 3) & 0x1FFFFFFE));
              v22 = *v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32);
            }
            v23 = *(_WORD *)v20 & 0x3FF;
            if (v23 != 1)
              break;
            if (((*(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16)) & 0x3F800) != 0xE800)
            {
              __break(0xC471u);
              goto LABEL_36;
            }
            v24 = *(_DWORD **)(v22 + 8);
            if (v24)
              goto LABEL_23;
LABEL_24:
            if (v22)
              *(_DWORD *)v22 += 2;
            v29 = v22;
            WebCore::StylePropertyMapReadOnly::reifyValueToVector(&v29, *(_WORD *)v20 & 0x3FF | 0x10000, v16, a3, (uint64_t)&v30, a5);
            this = v29;
            v26 = v30;
            v27 = v31;
            v30 = 0;
            v31 = 0;
            v29 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
                this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(this, v25);
              else
                *(_DWORD *)this -= 2;
            }
            v28 = (_QWORD *)(v14 + 24 * (i - 1));
            *v28 = v24;
            v28[1] = v26;
            v28[2] = v27;
            *(_DWORD *)(a4 + 12) = i;
            v15 = (v15 + 1);
          }
          v24 = (_DWORD *)*WebCore::nameString(v23);
          if (!v24)
            goto LABEL_24;
LABEL_23:
          *v24 += 2;
          goto LABEL_24;
        }
      }
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  return this;
}

uint64_t WebCore::DeclaredStylePropertyMap::propertyValue@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
        return WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(v5 + 8), a2, a3);
    }
  }
  *a3 = 0;
  return result;
}

void WebCore::DeclaredStylePropertyMap::shorthandPropertySerialization(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, WebCore *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::StyleProperties *v10;
  uint64_t v11;
  WTF::StringBuilder *v12;
  WTF::String *v13;
  WTF::StringBuilder *v14;
  WTF::String *v15;
  __n128 v16;
  WTF::StringImpl *v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && (v9 = *(_QWORD *)(v8 + 32)) != 0)
  {
    v10 = *(const WebCore::StyleProperties **)(v9 + 8);
    if ((a2 - 2) <= 0x1C8)
    {
      WebCore::StyleProperties::serializeLonghandValue((uint64_t)v10, a2, a3, a4, a5, a6);
    }
    else
    {
      v18[0] = WebCore::shorthandForProperty(a2);
      v18[1] = v11;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0;
      v29 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)v18, v10, v12, v13, (__n128)0);
      WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v18, v14, v15, a5, v16);
      WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v18, v17);
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
  }
}

uint64_t WebCore::DeclaredStylePropertyMap::customPropertyValue@<X0>(uint64_t result@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
        return WebCore::StyleProperties::getCustomPropertyCSSValue(*(_QWORD *)(v5 + 8), a2, a3);
    }
  }
  *a3 = 0;
  return result;
}

BOOL WebCore::DeclaredStylePropertyMap::setShorthandProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::CSSRule *v5;
  WebCore::StyleRuleKeyframe *v6;
  WebCore::MutableStyleProperties *v8;
  _BOOL8 v9;
  WTF::StringImpl *v10;
  BOOL v12;
  _BYTE v13[32];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v5 = *(WebCore::CSSRule **)(v3 + 8);
  if (!v5)
    return 0;
  v6 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)v5 + 4);
  if (!v6)
    return 0;
  WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v13, v5);
  v12 = 0;
  v8 = WebCore::StyleRuleKeyframe::mutableProperties(v6);
  WebCore::MutableStyleProperties::setProperty((uint64_t)v8, a2, a3, 0, &v12);
  v9 = !v12;
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v13, v10);
  return v9;
}

BOOL WebCore::DeclaredStylePropertyMap::setProperty(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WebCore::CSSRule *v5;
  WebCore::StyleRuleKeyframe *v6;
  WebCore::MutableStyleProperties *v8;
  WTF::StringBuilder *v9;
  WTF::String *v10;
  __n128 v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _BOOL8 v14;
  WTF::StringImpl *v16;
  BOOL v17;
  _BYTE v18[32];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v5 = *(WebCore::CSSRule **)(v3 + 8);
  if (!v5)
    return 0;
  v6 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)v5 + 4);
  if (!v6)
    return 0;
  WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v18, v5);
  v17 = 0;
  v8 = WebCore::StyleRuleKeyframe::mutableProperties(v6);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v16, *a3, v9, v10, v11);
  WebCore::MutableStyleProperties::setProperty((uint64_t)v8, a2, (uint64_t)&v16, 0, &v17);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = !v17;
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v18, v12);
  return v14;
}

uint64_t WebCore::DeclaredStylePropertyMap::setCustomProperty(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t *a4)
{
  uint64_t v4;
  WebCore::CSSRule *v5;
  WebCore::StyleRuleKeyframe *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  WebCore::MutableStyleProperties *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  __int16 v19;
  _DWORD *v20;
  _BYTE v21[32];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return 0;
  v5 = *(WebCore::CSSRule **)(v4 + 8);
  if (!v5)
    return 0;
  v6 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)v5 + 4);
  if (!v6)
    return 0;
  WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v21, v5);
  v9 = WTF::fastCompactMalloc((WTF *)0x60);
  v10 = v9;
  v11 = *a4;
  *a4 = 0;
  *(_DWORD *)v9 = 2;
  v12 = *(_BYTE *)(v9 + 6);
  *(_WORD *)(v9 + 4) = -6144;
  *(_BYTE *)(v9 + 6) = v12 & 0xFC;
  v13 = *a3;
  if (*a3)
    *v13 += 2;
  *(_QWORD *)(v9 + 8) = v13;
  *(_QWORD *)(v9 + 24) = v11;
  *(_DWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v14 = WebCore::StyleRuleKeyframe::mutableProperties(v6);
  v19 = -32767;
  v20 = (_DWORD *)v10;
  WebCore::MutableStyleProperties::addParsedProperty(v14, (unint64_t)&v19, v15);
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v16);
    else
      *v17 -= 2;
  }
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v21, v16);
  return 1;
}

void WebCore::DeclaredStylePropertyMap::removeProperty(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::CSSRule *v4;
  WebCore::StyleRuleKeyframe *v5;
  WebCore::MutableStyleProperties *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  _BYTE v10[32];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = *(WebCore::CSSRule **)(v2 + 8);
    if (v4)
    {
      v5 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)v4 + 4);
      if (v5)
      {
        WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v10, v4);
        v6 = WebCore::StyleRuleKeyframe::mutableProperties(v5);
        WebCore::MutableStyleProperties::removeProperty((uint64_t)v6, a2, 0, v7, v8);
        WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v10, v9);
      }
    }
  }
}

void WebCore::DeclaredStylePropertyMap::removeCustomProperty(WebCore::DeclaredStylePropertyMap *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  WebCore::CSSRule *v4;
  WebCore::StyleRuleKeyframe *v5;
  WebCore::MutableStyleProperties *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  _BYTE v10[32];

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = *(WebCore::CSSRule **)(v2 + 8);
    if (v4)
    {
      v5 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)v4 + 4);
      if (v5)
      {
        WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v10, v4);
        v6 = WebCore::StyleRuleKeyframe::mutableProperties(v5);
        WebCore::MutableStyleProperties::removeCustomProperty(v6, a2, 0, v7, v8);
        WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v10, v9);
      }
    }
  }
}

void WebCore::DeclaredStylePropertyMap::clear(WebCore::DeclaredStylePropertyMap *this)
{
  uint64_t v1;
  WebCore::CSSRule *v2;
  WebCore::StyleRuleKeyframe *v3;
  WebCore::MutableStyleProperties *v4;
  void *v5;
  WTF::StringImpl *v6;
  _BYTE v7[32];

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(WebCore::CSSRule **)(v1 + 8);
    if (v2)
    {
      v3 = (WebCore::StyleRuleKeyframe *)*((_QWORD *)v2 + 4);
      if (v3)
      {
        WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v7, v2);
        v4 = WebCore::StyleRuleKeyframe::mutableProperties(v3);
        WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::MutableStyleProperties *)((char *)v4 + 16), v5);
        WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v7, v6);
      }
    }
  }
}

void WebCore::HashMapStylePropertyMapReadOnly::~HashMapStylePropertyMapReadOnly(WebCore::HashMapStylePropertyMapReadOnly *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = *((_QWORD *)this + 2);
      do
      {
        v5 = *(WTF::StringImpl **)v4;
        if (*(_QWORD *)v4 != -1)
        {
          v6 = *(_DWORD **)(v4 + 8);
          *(_QWORD *)(v4 + 8) = 0;
          if (v6)
          {
            if (*v6 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
              v5 = *(WTF::StringImpl **)v4;
            }
            else
            {
              *v6 -= 2;
            }
          }
          *(_QWORD *)v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 16;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 2);
      do
      {
        v6 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(_DWORD **)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
          {
            if (*v7 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
              v6 = *(WTF::StringImpl **)v5;
            }
            else
            {
              *v7 -= 2;
            }
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::HashMapStylePropertyMapReadOnly::propertyValue@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _DWORD *v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;

  result = WebCore::nameString(a2);
  v6 = *(_DWORD **)(a1 + 16);
  if (v6)
  {
    v7 = 0;
    for (i = *(_DWORD *)(*result + 16) >> 8; ; i = v7 + v9)
    {
      v9 = i & *(v6 - 2);
      v10 = *(_QWORD *)&v6[4 * v9];
      if (v10 != -1)
      {
        if (!v10)
        {
          v6 = 0;
          goto LABEL_10;
        }
        if (v10 == *result)
          break;
      }
      ++v7;
    }
    v6 = *(_DWORD **)&v6[4 * v9 + 2];
    if (v6)
      *v6 += 2;
  }
LABEL_10:
  *a3 = v6;
  return result;
}

void WebCore::HashMapStylePropertyMapReadOnly::shorthandPropertySerialization(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::HashMapStylePropertyMapReadOnly::customPropertyValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;
  int v4;
  unsigned int i;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD **)(result + 16);
  if (v3)
  {
    v4 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v4 + v6)
    {
      v6 = i & *(v3 - 2);
      v7 = *(_QWORD *)&v3[4 * v6];
      if (v7 != -1)
      {
        if (!v7)
        {
          v3 = 0;
          goto LABEL_10;
        }
        if (v7 == *(_QWORD *)a2)
          break;
      }
      ++v4;
    }
    v3 = *(_DWORD **)&v3[4 * v6 + 2];
    if (v3)
      *v3 += 2;
  }
LABEL_10:
  *a3 = v3;
  return result;
}

uint64_t WebCore::HashMapStylePropertyMapReadOnly::size(WebCore::HashMapStylePropertyMapReadOnly *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return *(unsigned int *)(v1 - 12);
  else
    return 0;
}

WTF::StringImpl *WebCore::HashMapStylePropertyMapReadOnly::entries@<X0>(WTF::StringImpl *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringBuilder *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **i;
  WTF::StringImpl **v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  WTF::String *v23;
  __n128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  WTF::StringImpl **v32;
  _QWORD v33[2];
  int v34;
  char v35;

  if (!a2)
    goto LABEL_6;
  v5 = (uint64_t)this;
  this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 80))(a2);
  if ((_DWORD)this
    && (this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 488))(a2),
        (_DWORD)this))
  {
    v6 = *((_QWORD *)a2 + 54);
    if (!v6 || (v7 = *(WTF::StringBuilder **)(v6 + 8)) == 0)
    {
LABEL_6:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      return this;
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 274))
      goto LABEL_55;
    v7 = (WebCore::ScriptExecutionContext *)((char *)a2 - 192);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    return this;
  v9 = *(unsigned int *)(v8 - 12);
  if (!(_DWORD)v9)
    return this;
  if (v9 >= 0xAAAAAAB)
  {
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x19590DABCLL);
  }
  v10 = 24 * v9;
  this = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(24 * v9));
  *(_DWORD *)(a3 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
  *(_QWORD *)a3 = this;
  v11 = *(_QWORD *)(v5 + 16);
  if (v11 && *(_DWORD *)(v11 - 12))
  {
    v12 = (uint64_t)this;
    v13 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v13)
    {
      v14 = 16 * v13;
      for (i = *(WTF::StringImpl ***)(v5 + 16); (unint64_t)*i + 1 <= 1; i += 2)
      {
        v14 -= 16;
        if (!v14)
          return this;
      }
    }
    else
    {
      i = *(WTF::StringImpl ***)(v5 + 16);
    }
    v16 = (WTF::StringImpl **)(v11 + 16 * v13);
    if (i != v16)
    {
      v17 = 0;
LABEL_22:
      v18 = i[1];
      if (v18)
        *(_DWORD *)v18 += 2;
      v19 = *i;
      if (*i)
      {
        v20 = *((_QWORD *)v19 + 1);
        v21 = *((unsigned int *)v19 + 1) | ((unint64_t)((*((_DWORD *)v19 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v20 = 0;
        v21 = 0x100000000;
      }
      v22 = WebCore::cssPropertyID(v20, (const char *)v21);
      if (v18)
      {
        WebCore::CSSStyleValueFactory::reifyValue((uint64_t)v18, v22 | 0x10000, v7, v23, (uint64_t)v33, v24);
        if (*(_DWORD *)v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v25);
        else
          *(_DWORD *)v18 -= 2;
        if (v34 == -1)
        {
          this = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
          v27 = this;
          v18 = 0;
        }
        else
        {
          if (v34)
          {
            v18 = 0;
          }
          else
          {
            v18 = (WTF::StringImpl *)v33[0];
            v33[0] = 0;
          }
          ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13CSSStyleValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v34])(&v35, v33);
          this = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
          v27 = this;
          if (v18)
          {
            v28 = 0;
            ++*((_DWORD *)v18 + 2);
LABEL_39:
            *(_QWORD *)v27 = v18;
            v29 = *i;
            if (*i)
            {
              v30 = *(_DWORD *)v29;
              *(_DWORD *)v29 += 4;
              v31 = v30 + 2;
              if (!v31)
              {
                this = (WTF::StringImpl *)WTF::StringImpl::destroy(v29, v26);
                if ((v28 & 1) != 0)
                  goto LABEL_45;
                goto LABEL_43;
              }
              *(_DWORD *)v29 = v31;
            }
            if ((v28 & 1) != 0)
              goto LABEL_45;
LABEL_43:
            if (*((_DWORD *)v18 + 2) == 1)
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 16))(v18);
            else
              --*((_DWORD *)v18 + 2);
LABEL_45:
            v32 = (WTF::StringImpl **)(v12 + 24 * v17);
            *v32 = v29;
            v32[1] = v27;
            v32[2] = (WTF::StringImpl *)0x100000001;
            *(_DWORD *)(a3 + 12) = ++v17;
            while (1)
            {
              i += 2;
              if (i == v16)
                return this;
              if ((unint64_t)*i + 1 > 1)
              {
                if (i != v16)
                  goto LABEL_22;
                return this;
              }
            }
          }
        }
      }
      else
      {
        this = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
        v27 = this;
      }
      v28 = 1;
      goto LABEL_39;
    }
  }
  return this;
}

void WebCore::CSSStyleValue::~CSSStyleValue(WebCore::CSSStyleValue *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E339F420;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E339F420;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSStyleValue::getType(WebCore::CSSStyleValue *this)
{
  return 0;
}

uint64_t WebCore::CSSStyleValue::toCSSValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 32);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

void WebCore::CSSStyleImageValue::~CSSStyleImageValue(WebCore::CSSStyleImageValue *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CSSStyleImageValue::~CSSStyleImageValue(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*v6 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, (WTF::StringImpl *)a2);
    else
      *v6 -= 2;
  }
  *(_QWORD *)this = &off_1E339F420;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, (WTF::StringImpl *)a2);
    else
      *v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::CSSStyleImageValue::getType(WebCore::CSSStyleImageValue *this)
{
  return 1;
}

void WebCore::CSSUnitValue::~CSSUnitValue(WebCore::CSSUnitValue *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E339F420;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E339F420;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSUnitValue::getType(WebCore::CSSUnitValue *this)
{
  return 10;
}

void WebCore::CSSUnparsedValue::~CSSUnparsedValue(WebCore::CSSUnparsedValue *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;

  v3 = *((unsigned int *)this + 13);
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = v4[2];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v10, v4);
      v4[2] = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    v4 = (unsigned int *)*((_QWORD *)this + 5);
  }
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = &off_1E339F420;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, (WTF::StringImpl *)a2);
    else
      *v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;

  v3 = *((unsigned int *)this + 13);
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    do
    {
      v6 = v4[2];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v10, v4);
      v4[2] = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
    v4 = (unsigned int *)*((_QWORD *)this + 5);
  }
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  *(_QWORD *)this = &off_1E339F420;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, (WTF::StringImpl *)a2);
    else
      *v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSUnparsedValue::getType(WebCore::CSSUnparsedValue *this)
{
  return 11;
}

void WebCore::ComputedStylePropertyMapReadOnly::~ComputedStylePropertyMapReadOnly(WebCore::ComputedStylePropertyMapReadOnly *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::DeclaredStylePropertyMap::~DeclaredStylePropertyMap(WebCore::DeclaredStylePropertyMap *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16CSSUnparsedValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16CSSUnparsedValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8CSSValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8CSSValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnparsedValue::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_0,WebCore::CSSUnparsedValue::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>> const&>(uint64_t **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *result;
  uint64_t v6;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 16) || *(_QWORD *)(v3 + 8))
  {
    if (*(_QWORD *)a2 && (*(_BYTE *)(*(_QWORD *)a2 + 16) & 4) == 0)
      return (WTF::StringImpl *)WTF::StringBuilder::append();
    else
      return (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  else
  {
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v4 += 2;
    result = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      LODWORD(v6) = *(_DWORD *)(v6 + 4);
    *(_DWORD *)(v3 + 16) = v6;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSUnparsedValue::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_0,WebCore::CSSUnparsedValue::serialize(WTF::StringBuilder &,WTF::OptionSet<WebCore::SerializationArguments>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CSSOMVariableReferenceValue,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>> const&>(uint64_t a1, uint64_t *a2)
{
  WebCore::CSSOMVariableReferenceValue::serialize(*a2, *(_QWORD *)(*(_QWORD *)a1 + 8), **(_BYTE **)(*(_QWORD *)a1 + 16));
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSW_EEEDcSO_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSW_EEEDcSO_DpT0_(uint64_t result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  bmalloc::api *v7;
  uint64_t v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_6RefPtrIN7WebCore27CSSOMVariableReferenceValueENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *(bmalloc::api **)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[2];
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      return bmalloc::api::isoDeallocate(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *,false>(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3, char a4)
{
  const WTF::StringImpl *v4;
  uint64_t *v5;
  uint64_t v6;
  WTF **v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF **v13;
  const WTF::StringImpl *v14;
  __int128 v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  unint64_t v20;
  WTF **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int16 *v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int16 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned __int8 *v68;
  unsigned __int16 *v69;
  unsigned int v70;
  unsigned int v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  _DWORD **v76;
  uint64_t v77;
  _DWORD *v78;
  WTF *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  _DWORD **v83;
  uint64_t v84;
  _DWORD *v85;
  WTF **v86;
  WTF *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  _DWORD *v92;
  BOOL v93;
  const WTF::StringImpl *v94;
  __int128 v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  int v108;
  unsigned __int16 *v109;
  unsigned __int16 *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned __int16 *v113;
  unsigned __int8 *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned __int8 *v117;
  unsigned __int16 *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unsigned int v129;
  BOOL v130;
  int v131;
  unsigned __int16 *v132;
  unsigned __int16 *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned __int16 *v136;
  unsigned __int8 *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned __int8 *v140;
  unsigned __int16 *v141;
  unsigned int v142;
  unsigned int v143;
  WTF::StringImpl **v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  _DWORD **v148;
  uint64_t v149;
  _DWORD *v150;
  WTF *v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  _DWORD **v156;
  uint64_t v157;
  _DWORD *v158;
  WTF *v159;
  WTF::StringImpl *v160;
  WTF *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  _DWORD *v164;
  uint64_t *v165;
  BOOL v167;
  uint64_t *v168;
  uint64_t *v169;
  WTF::StringImpl *v170;
  WTF *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  uint64_t v178;
  _DWORD **v179;
  uint64_t v180;
  _DWORD *v181;
  WTF *v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  unsigned __int8 *v189;
  unsigned __int8 *v190;
  unsigned int v191;
  unsigned int v192;
  BOOL v193;
  int v194;
  unsigned __int16 *v195;
  unsigned __int16 *v196;
  unsigned int v197;
  unsigned int v198;
  unsigned __int16 *v199;
  unsigned __int8 *v200;
  unsigned int v201;
  unsigned int v202;
  unsigned __int8 *v203;
  unsigned __int16 *v204;
  unsigned int v205;
  unsigned int v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  _DWORD **v209;
  uint64_t v210;
  _DWORD *v211;
  int64_t v212;
  int64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  WTF *v221;
  WTF::StringImpl *v222;
  uint64_t v223;
  _DWORD **v224;
  uint64_t v225;
  _DWORD *v226;
  WTF *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  uint64_t v233;
  _DWORD **v234;
  uint64_t v235;
  _DWORD *v236;
  WTF *v237;
  WTF::StringImpl *v238;
  WTF *v239;
  uint64_t v240;
  WTF::StringImpl *v241;
  _DWORD *v242;
  int64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  unsigned __int8 *v257;
  unsigned __int8 *v258;
  unsigned int v259;
  unsigned int v260;
  BOOL v261;
  int v262;
  unsigned __int16 *v263;
  unsigned __int16 *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned __int16 *v267;
  unsigned __int8 *v268;
  unsigned int v269;
  unsigned int v270;
  unsigned __int8 *v271;
  unsigned __int16 *v272;
  unsigned int v273;
  unsigned int v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  uint64_t v277;
  _DWORD **v278;
  uint64_t v279;
  _DWORD *v280;
  WTF *v281;
  uint64_t v282;
  uint64_t v283;
  WTF::StringImpl *v284;
  uint64_t v285;
  _DWORD **v286;
  uint64_t v287;
  _DWORD *v288;
  WTF *v289;
  uint64_t v290;
  WTF::StringImpl *v291;
  uint64_t v292;
  _DWORD **v293;
  uint64_t v294;
  _DWORD *v295;
  uint64_t v296;
  unint64_t v297;
  WTF **v298;
  uint64_t v299;
  WTF *v300;
  WTF **v301;
  WTF *v302;
  WTF::StringImpl *v303;
  uint64_t v304;
  _DWORD **v305;
  uint64_t v306;
  _DWORD *v307;
  WTF *v308;
  WTF *v309;
  char v310;
  char v311;
  WTF::StringImpl *v312;
  uint64_t v313;
  _DWORD **v314;
  uint64_t v315;
  _DWORD *v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  WTF *v319;
  uint64_t v320;
  _DWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  WTF::StringImpl *v326;
  WTF *v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  WTF::StringImpl *v331;
  uint64_t v332;
  _DWORD **v333;
  uint64_t v334;
  _DWORD *v335;
  uint64_t v336;
  _DWORD *v337;
  int v338;
  _DWORD *v339;
  int v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t v344;
  int v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  unsigned __int8 *v349;
  unsigned __int8 *v350;
  unsigned int v351;
  unsigned int v352;
  BOOL v353;
  int v354;
  unsigned __int16 *v355;
  unsigned __int16 *v356;
  unsigned int v357;
  unsigned int v358;
  unsigned __int16 *v359;
  unsigned __int8 *v360;
  unsigned int v361;
  unsigned int v362;
  unsigned __int8 *v363;
  unsigned __int16 *v364;
  unsigned int v365;
  unsigned int v366;
  WTF::StringImpl *v367;
  uint64_t v368;
  _DWORD **v369;
  uint64_t v370;
  _DWORD *v371;
  uint64_t v372;
  int v374;
  unint64_t v375;
  uint64_t v376;
  int v377;
  _DWORD **v378;
  const WTF::StringImpl *v379;
  int64_t v380;
  uint64_t v381;
  WTF *v382;
  uint64_t v383;
  WTF::StringImpl *v384[2];
  uint64_t v385;

  v4 = a3;
  v5 = (uint64_t *)a2;
  v6 = result;
LABEL_2:
  v7 = (WTF **)(v5 - 3);
  v8 = (uint64_t *)v6;
  while (2)
  {
    v6 = (uint64_t)v8;
    v9 = (char *)v5 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v5 - v8);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v7, (uint64_t *)v6, a3);
        if ((_DWORD)result)
          return (uint64_t)std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v6, (WTF::StringImpl *)v7);
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)v6, (WTF **)(v6 + 24), (const WTF::StringImpl *)v7);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)v6, (WTF **)(v6 + 24), (const WTF::StringImpl *)(v6 + 48), v7);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *,0>((uint64_t *)v6, (WTF **)(v6 + 24), (const WTF::StringImpl *)(v6 + 48), (WTF **)(v6 + 72), v7);
      default:
        if (v9 <= 575)
        {
          v165 = (uint64_t *)(v6 + 24);
          v167 = (uint64_t *)v6 == v5 || v165 == v5;
          if ((a4 & 1) != 0)
          {
            if (v167)
              return result;
            v168 = (uint64_t *)v6;
LABEL_391:
            v169 = v165;
            result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)v165, v168, a3);
            if (!(_DWORD)result)
              goto LABEL_480;
            v171 = (WTF *)*v165;
            *v165 = 0;
            v172 = v168[4];
            v173 = v168[5];
            v174 = (uint64_t)v165;
            v168[4] = 0;
            v168[5] = 0;
            while (1)
            {
              v175 = (uint64_t)v168;
              v176 = *v168;
              *v168 = 0;
              v177 = *(WTF::StringImpl **)v174;
              *(_QWORD *)v174 = v176;
              if (v177)
              {
                if (*(_DWORD *)v177 == 2)
                  WTF::StringImpl::destroy(v177, v170);
                else
                  *(_DWORD *)v177 -= 2;
              }
              v178 = *(unsigned int *)(v174 + 20);
              if ((_DWORD)v178)
              {
                v179 = *(_DWORD ***)(v174 + 8);
                v180 = 8 * v178;
                do
                {
                  v181 = *v179;
                  *v179 = 0;
                  if (v181)
                  {
                    if (v181[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v181 + 16))(v181);
                    else
                      --v181[2];
                  }
                  ++v179;
                  v180 -= 8;
                }
                while (v180);
              }
              v182 = *(WTF **)(v174 + 8);
              if (v182)
              {
                *(_QWORD *)(v174 + 8) = 0;
                *(_DWORD *)(v174 + 16) = 0;
                WTF::fastFree(v182, v170);
              }
              v183 = *(_QWORD *)(v175 + 8);
              *(_QWORD *)(v175 + 8) = 0;
              *(_QWORD *)(v174 + 8) = v183;
              *(_DWORD *)(v174 + 16) = *(_DWORD *)(v175 + 16);
              LODWORD(v183) = *(_DWORD *)(v175 + 20);
              *(_QWORD *)(v175 + 16) = 0;
              *(_DWORD *)(v174 + 20) = v183;
              if (v175 == v6)
              {
                v175 = v6;
LABEL_466:
                v207 = *(WTF::StringImpl **)v175;
                *(_QWORD *)v175 = v171;
                if (v207)
                {
                  if (*(_DWORD *)v207 == 2)
                    WTF::StringImpl::destroy(v207, v170);
                  else
                    *(_DWORD *)v207 -= 2;
                }
                v208 = *(unsigned int *)(v175 + 20);
                if ((_DWORD)v208)
                {
                  v209 = *(_DWORD ***)(v175 + 8);
                  v210 = 8 * v208;
                  do
                  {
                    v211 = *v209;
                    *v209 = 0;
                    if (v211)
                    {
                      if (v211[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v211 + 16))(v211);
                      else
                        --v211[2];
                    }
                    ++v209;
                    v210 -= 8;
                  }
                  while (v210);
                }
                result = *(_QWORD *)(v175 + 8);
                if (result)
                {
                  *(_QWORD *)(v175 + 8) = 0;
                  *(_DWORD *)(v175 + 16) = 0;
                  result = WTF::fastFree((WTF *)result, v170);
                }
                *(_QWORD *)(v175 + 8) = v172;
                *(_QWORD *)(v175 + 16) = v173;
LABEL_480:
                v165 = v169 + 3;
                v168 = v169;
                if (v169 + 3 == v5)
                  return result;
                goto LABEL_391;
              }
              v168 = (uint64_t *)(v175 - 24);
              if (!v171)
                goto LABEL_429;
              if (WTF::StringImpl::startsWith())
              {
                if (!*v168 || (WTF::StringImpl::startsWith() & 1) == 0)
                  goto LABEL_466;
LABEL_417:
                v184 = *v168;
LABEL_418:
                if (!v184)
                  goto LABEL_466;
                v185 = *(_DWORD *)(v184 + 16);
                v186 = *((_DWORD *)v171 + 1);
                v187 = *(_DWORD *)(v184 + 4);
                if (v187 >= v186)
                  v188 = v186;
                else
                  v188 = v187;
                if ((*((_BYTE *)v171 + 16) & 4) == 0)
                {
                  if ((v185 & 4) != 0)
                  {
                    if ((_DWORD)v188)
                    {
                      v203 = *(unsigned __int8 **)(v184 + 8);
                      v204 = (unsigned __int16 *)*((_QWORD *)v171 + 1);
                      while (1)
                      {
                        v205 = *v204;
                        v206 = *v203;
                        v193 = v205 > v206;
                        if (v205 != v206)
                          goto LABEL_460;
                        ++v204;
                        ++v203;
                        if (!--v188)
                          goto LABEL_454;
                      }
                    }
                  }
                  else if ((_DWORD)v188)
                  {
                    v195 = *(unsigned __int16 **)(v184 + 8);
                    v196 = (unsigned __int16 *)*((_QWORD *)v171 + 1);
                    while (1)
                    {
                      v197 = *v196;
                      v198 = *v195;
                      v193 = v197 > v198;
                      if (v197 != v198)
                        goto LABEL_460;
                      ++v196;
                      ++v195;
                      if (!--v188)
                        goto LABEL_454;
                    }
                  }
                  goto LABEL_454;
                }
                if ((v185 & 4) != 0)
                {
                  if (!(_DWORD)v188)
                    goto LABEL_454;
                  v189 = *(unsigned __int8 **)(v184 + 8);
                  v190 = (unsigned __int8 *)*((_QWORD *)v171 + 1);
                  while (1)
                  {
                    v191 = *v190;
                    v192 = *v189;
                    v193 = v191 > v192;
                    if (v191 != v192)
                      break;
                    ++v190;
                    ++v189;
                    if (!--v188)
                      goto LABEL_454;
                  }
LABEL_460:
                  v174 = v175;
                  if (v193)
                    goto LABEL_466;
                }
                else if ((_DWORD)v188)
                {
                  v199 = *(unsigned __int16 **)(v184 + 8);
                  v200 = (unsigned __int8 *)*((_QWORD *)v171 + 1);
                  while (1)
                  {
                    v201 = *v200;
                    v202 = *v199;
                    if (v202 != v201)
                      break;
                    ++v200;
                    ++v199;
                    if (!--v188)
                      goto LABEL_454;
                  }
                  v174 = v175;
                  if (v202 < v201)
                    goto LABEL_466;
                }
                else
                {
LABEL_454:
                  if (v187 < v186)
                    v194 = 1;
                  else
                    v194 = -1;
                  if (v186 == v187)
                    goto LABEL_466;
LABEL_458:
                  v174 = v175;
                  if ((v194 & 0x80000000) == 0)
                    goto LABEL_466;
                }
              }
              else if (WTF::StringImpl::startsWith())
              {
                if (!*v168)
                  goto LABEL_466;
                v174 = v175;
                if ((WTF::StringImpl::startsWith() & 1) == 0)
                {
                  if (!*v168 || (WTF::StringImpl::startsWith() & 1) == 0)
                    goto LABEL_466;
                  goto LABEL_417;
                }
              }
              else
              {
LABEL_429:
                if (!*v168)
                {
                  v184 = 0;
                  if (!v171)
                  {
LABEL_432:
                    if (!v184)
                      goto LABEL_466;
                    if (*(_DWORD *)(v184 + 4))
                      v194 = -1;
                    else
                      v194 = 0;
                    goto LABEL_458;
                  }
                  goto LABEL_418;
                }
                v174 = v175;
                if ((WTF::StringImpl::startsWith() & 1) == 0)
                {
                  v184 = *v168;
                  if (!v171)
                    goto LABEL_432;
                  goto LABEL_418;
                }
              }
            }
          }
          if (v167)
            return result;
          v322 = 0;
          v323 = 1;
          v324 = (uint64_t *)v6;
          while (1)
          {
            v325 = v323;
            result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)v165, v324, a3);
            if ((_DWORD)result)
              break;
LABEL_801:
            v324 = (uint64_t *)(v6 + 24 * v325);
            v323 = v325 + 1;
            v165 = v324 + 3;
            v322 = v325;
            if (v324 + 3 == v5)
              return result;
          }
          v383 = v325;
          v327 = (WTF *)*v165;
          *v165 = 0;
          v378 = (_DWORD **)v324[4];
          v328 = v324[5];
          v324[4] = 0;
          v324[5] = 0;
          while (1)
          {
            v329 = (uint64_t *)(v6 + 24 * v322);
            v330 = *v329;
            *v329 = 0;
            v331 = (WTF::StringImpl *)*v165;
            *v165 = v330;
            if (v331)
            {
              if (*(_DWORD *)v331 == 2)
                WTF::StringImpl::destroy(v331, v326);
              else
                *(_DWORD *)v331 -= 2;
            }
            v332 = *((unsigned int *)v165 + 5);
            if ((_DWORD)v332)
            {
              v333 = (_DWORD **)v165[1];
              v334 = 8 * v332;
              do
              {
                v335 = *v333;
                *v333 = 0;
                if (v335)
                {
                  if (v335[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v335 + 16))(v335);
                  else
                    --v335[2];
                }
                ++v333;
                v334 -= 8;
              }
              while (v334);
            }
            result = v165[1];
            if (result)
            {
              v165[1] = 0;
              *((_DWORD *)v165 + 4) = 0;
              result = WTF::fastFree((WTF *)result, v326);
            }
            v336 = v6 + 24 * v322;
            v338 = *(_DWORD *)(v336 + 16);
            v337 = (_DWORD *)(v336 + 16);
            *(_DWORD *)(v336 + 16) = 0;
            *((_DWORD *)v165 + 4) = v338;
            v340 = *(_DWORD *)(v336 + 20);
            v339 = (_DWORD *)(v336 + 20);
            v342 = (uint64_t *)(v339 - 3);
            v341 = *(_QWORD *)(v339 - 3);
            *(_QWORD *)(v339 - 3) = 0;
            v165[1] = v341;
            *v339 = 0;
            *((_DWORD *)v165 + 5) = v340;
            if (v322 == -1)
              goto LABEL_804;
            v165 = (uint64_t *)(v6 + 24 * v322--);
            v343 = (uint64_t *)(v6 + 24 * v322);
            if (!v327)
              goto LABEL_752;
            if (WTF::StringImpl::startsWith())
            {
              if (!*v343 || (WTF::StringImpl::startsWith() & 1) == 0)
                goto LABEL_787;
LABEL_734:
              v344 = *v343;
LABEL_735:
              if (!v344)
                goto LABEL_787;
              v345 = *(_DWORD *)(v344 + 16);
              v346 = *((_DWORD *)v327 + 1);
              v347 = *(_DWORD *)(v344 + 4);
              if (v347 >= v346)
                v348 = v346;
              else
                v348 = v347;
              if ((*((_BYTE *)v327 + 16) & 4) == 0)
              {
                if ((v345 & 4) != 0)
                {
                  if ((_DWORD)v348)
                  {
                    v363 = *(unsigned __int8 **)(v344 + 8);
                    v364 = (unsigned __int16 *)*((_QWORD *)v327 + 1);
                    while (1)
                    {
                      v365 = *v364;
                      v366 = *v363;
                      v353 = v365 > v366;
                      if (v365 != v366)
                        goto LABEL_783;
                      ++v364;
                      ++v363;
                      if (!--v348)
                        goto LABEL_777;
                    }
                  }
                }
                else if ((_DWORD)v348)
                {
                  v355 = *(unsigned __int16 **)(v344 + 8);
                  v356 = (unsigned __int16 *)*((_QWORD *)v327 + 1);
                  while (1)
                  {
                    v357 = *v356;
                    v358 = *v355;
                    v353 = v357 > v358;
                    if (v357 != v358)
                      goto LABEL_783;
                    ++v356;
                    ++v355;
                    if (!--v348)
                      goto LABEL_777;
                  }
                }
                goto LABEL_777;
              }
              if ((v345 & 4) != 0)
              {
                if (!(_DWORD)v348)
                  goto LABEL_777;
                v349 = *(unsigned __int8 **)(v344 + 8);
                v350 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
                while (1)
                {
                  v351 = *v350;
                  v352 = *v349;
                  v353 = v351 > v352;
                  if (v351 != v352)
                    break;
                  ++v350;
                  ++v349;
                  if (!--v348)
                    goto LABEL_777;
                }
LABEL_783:
                if (v353)
                  goto LABEL_787;
              }
              else if ((_DWORD)v348)
              {
                v359 = *(unsigned __int16 **)(v344 + 8);
                v360 = (unsigned __int8 *)*((_QWORD *)v327 + 1);
                while (1)
                {
                  v361 = *v360;
                  v362 = *v359;
                  if (v362 != v361)
                    break;
                  ++v360;
                  ++v359;
                  if (!--v348)
                    goto LABEL_777;
                }
                if (v362 < v361)
                {
LABEL_787:
                  v367 = (WTF::StringImpl *)*v165;
                  *v165 = (uint64_t)v327;
                  if (v367)
                  {
                    if (*(_DWORD *)v367 == 2)
                      WTF::StringImpl::destroy(v367, v326);
                    else
                      *(_DWORD *)v367 -= 2;
                  }
                  v368 = *v339;
                  if ((_DWORD)v368)
                  {
                    v369 = (_DWORD **)*v342;
                    v370 = 8 * v368;
                    do
                    {
                      v371 = *v369;
                      *v369 = 0;
                      if (v371)
                      {
                        if (v371[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v371 + 16))(v371);
                        else
                          --v371[2];
                      }
                      ++v369;
                      v370 -= 8;
                    }
                    while (v370);
                  }
                  result = *v342;
                  if (*v342)
                  {
                    *v342 = 0;
                    *v337 = 0;
                    result = WTF::fastFree((WTF *)result, v326);
                  }
                  *v342 = (uint64_t)v378;
                  *(_QWORD *)v337 = v328;
                  v325 = v383;
                  goto LABEL_801;
                }
              }
              else
              {
LABEL_777:
                if (v347 < v346)
                  v354 = 1;
                else
                  v354 = -1;
                if (v346 == v347)
                  goto LABEL_787;
LABEL_781:
                if ((v354 & 0x80000000) == 0)
                  goto LABEL_787;
              }
            }
            else if (WTF::StringImpl::startsWith())
            {
              if (!*v343)
                goto LABEL_787;
              if ((WTF::StringImpl::startsWith() & 1) == 0)
              {
                if (!*v343 || (WTF::StringImpl::startsWith() & 1) == 0)
                  goto LABEL_787;
                goto LABEL_734;
              }
            }
            else
            {
LABEL_752:
              if (!*v343)
              {
                v344 = 0;
                if (!v327)
                {
LABEL_755:
                  if (!v344)
                    goto LABEL_787;
                  if (*(_DWORD *)(v344 + 4))
                    v354 = -1;
                  else
                    v354 = 0;
                  goto LABEL_781;
                }
                goto LABEL_735;
              }
              if ((WTF::StringImpl::startsWith() & 1) == 0)
              {
                v344 = *v343;
                if (!v327)
                  goto LABEL_755;
                goto LABEL_735;
              }
            }
          }
        }
        if (!v4)
        {
          if ((uint64_t *)v6 == v5)
            return result;
          v212 = (v10 - 2) >> 1;
          v380 = v212;
          do
          {
            v213 = v212;
            if (v380 >= v212)
            {
              v214 = (2 * v212) | 1;
              v215 = v6 + 24 * v214;
              if (2 * v212 + 2 < (uint64_t)v10
                && WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)(v6 + 24 * v214), (uint64_t *)(v215 + 24), a3))
              {
                v215 += 24;
                v214 = 2 * v213 + 2;
              }
              v216 = v6 + 24 * v213;
              if ((WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)v215, (uint64_t *)v216, a3) & 1) == 0)
              {
                v217 = *(WTF::StringImpl **)v216;
                *(_QWORD *)v216 = 0;
                v384[0] = v217;
                v218 = v6 + 24 * v213;
                v219 = *(WTF::StringImpl **)(v218 + 8);
                *(_QWORD *)(v218 + 8) = 0;
                v384[1] = v219;
                LODWORD(v219) = *(_DWORD *)(v218 + 16);
                *(_DWORD *)(v218 + 16) = 0;
                LODWORD(v385) = (_DWORD)v219;
                LODWORD(v219) = *(_DWORD *)(v218 + 20);
                *(_DWORD *)(v218 + 20) = 0;
                HIDWORD(v385) = (_DWORD)v219;
                do
                {
                  v220 = v215;
                  v221 = *(WTF **)v215;
                  *(_QWORD *)v215 = 0;
                  v222 = *(WTF::StringImpl **)v216;
                  *(_QWORD *)v216 = v221;
                  if (v222)
                  {
                    if (*(_DWORD *)v222 == 2)
                      WTF::StringImpl::destroy(v222, a2);
                    else
                      *(_DWORD *)v222 -= 2;
                  }
                  v223 = *(unsigned int *)(v216 + 20);
                  if ((_DWORD)v223)
                  {
                    v224 = *(_DWORD ***)(v216 + 8);
                    v225 = 8 * v223;
                    do
                    {
                      v226 = *v224;
                      *v224 = 0;
                      if (v226)
                      {
                        if (v226[2] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v226 + 16))(v226);
                        else
                          --v226[2];
                      }
                      ++v224;
                      v225 -= 8;
                    }
                    while (v225);
                  }
                  v227 = *(WTF **)(v216 + 8);
                  if (v227)
                  {
                    *(_QWORD *)(v216 + 8) = 0;
                    *(_DWORD *)(v216 + 16) = 0;
                    WTF::fastFree(v227, a2);
                  }
                  v228 = *(_QWORD *)(v220 + 8);
                  *(_QWORD *)(v220 + 8) = 0;
                  *(_QWORD *)(v216 + 8) = v228;
                  LODWORD(v228) = *(_DWORD *)(v220 + 16);
                  *(_DWORD *)(v220 + 16) = 0;
                  *(_DWORD *)(v216 + 16) = v228;
                  LODWORD(v228) = *(_DWORD *)(v220 + 20);
                  *(_DWORD *)(v220 + 20) = 0;
                  *(_DWORD *)(v216 + 20) = v228;
                  if (v380 < v214)
                    break;
                  v229 = (2 * v214) | 1;
                  v215 = v6 + 24 * v229;
                  v230 = 2 * v214 + 2;
                  if (v230 < (uint64_t)v10
                    && WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)(v6 + 24 * v229), (uint64_t *)(v215 + 24), a3))
                  {
                    v215 += 24;
                    v229 = v230;
                  }
                  v216 = v220;
                  v214 = v229;
                }
                while (!WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)v215, (uint64_t *)v384, a3));
                v231 = v384[0];
                v384[0] = 0;
                v232 = *(WTF::StringImpl **)v220;
                *(_QWORD *)v220 = v231;
                if (v232)
                {
                  if (*(_DWORD *)v232 == 2)
                    WTF::StringImpl::destroy(v232, a2);
                  else
                    *(_DWORD *)v232 -= 2;
                }
                v233 = *(unsigned int *)(v220 + 20);
                if ((_DWORD)v233)
                {
                  v234 = *(_DWORD ***)(v220 + 8);
                  v235 = 8 * v233;
                  do
                  {
                    v236 = *v234;
                    *v234 = 0;
                    if (v236)
                    {
                      if (v236[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v236 + 16))(v236);
                      else
                        --v236[2];
                    }
                    ++v234;
                    v235 -= 8;
                  }
                  while (v235);
                }
                v237 = *(WTF **)(v220 + 8);
                if (v237)
                {
                  *(_QWORD *)(v220 + 8) = 0;
                  *(_DWORD *)(v220 + 16) = 0;
                  WTF::fastFree(v237, a2);
                }
                v238 = v384[1];
                v384[1] = 0;
                *(_QWORD *)(v220 + 8) = v238;
                *(_DWORD *)(v220 + 16) = v385;
                LODWORD(v238) = HIDWORD(v385);
                HIDWORD(v385) = 0;
                *(_DWORD *)(v220 + 20) = (_DWORD)v238;
                v239 = v384[1];
                if (HIDWORD(v385))
                {
                  v240 = 8 * HIDWORD(v385);
                  v241 = v384[1];
                  do
                  {
                    v242 = *(_DWORD **)v241;
                    *(_QWORD *)v241 = 0;
                    if (v242)
                    {
                      if (v242[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v242 + 16))(v242);
                      else
                        --v242[2];
                    }
                    v241 = (WTF::StringImpl *)((char *)v241 + 8);
                    v240 -= 8;
                  }
                  while (v240);
                }
                if (v239)
                  WTF::fastFree(v239, a2);
                if (v384[0])
                {
                  if (*(_DWORD *)v384[0] == 2)
                    WTF::StringImpl::destroy(v384[0], a2);
                  else
                    *(_DWORD *)v384[0] -= 2;
                }
              }
            }
            v212 = v213 - 1;
          }
          while (v213);
          v243 = v9 / 0x18uLL;
          while (1)
          {
            v244 = 0;
            v245 = v5;
            v372 = *(_QWORD *)v6;
            v381 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 + 8) = 0;
            v374 = *(_DWORD *)(v6 + 20);
            v377 = *(_DWORD *)(v6 + 16);
            v246 = v6;
            *(_QWORD *)(v6 + 16) = 0;
            do
            {
              v247 = v246 + 24 * v244 + 24;
              v248 = 2 * v244;
              v244 = (2 * v244) | 1;
              v249 = v248 + 2;
              if (v248 + 2 >= v243)
                goto LABEL_598;
              v250 = (uint64_t *)(v247 + 24);
              if (*(_QWORD *)v247)
              {
                if (WTF::StringImpl::startsWith())
                {
                  if (!*v250 || (WTF::StringImpl::startsWith() & 1) == 0)
                    goto LABEL_598;
                  goto LABEL_557;
                }
                if (*(_QWORD *)v247 && WTF::StringImpl::startsWith())
                {
                  if (!*v250)
                    goto LABEL_598;
                  if ((WTF::StringImpl::startsWith() & 1) != 0)
                    goto LABEL_597;
                  if (!*v250 || (WTF::StringImpl::startsWith() & 1) == 0)
                    goto LABEL_598;
                  goto LABEL_557;
                }
              }
              if (!*v250)
              {
                v251 = 0;
                goto LABEL_558;
              }
              if ((WTF::StringImpl::startsWith() & 1) != 0)
                goto LABEL_597;
LABEL_557:
              v251 = *v250;
LABEL_558:
              v252 = *(WTF::StringImpl **)v247;
              if (!*(_QWORD *)v247)
              {
                if (!v251)
                  goto LABEL_598;
                if (*(_DWORD *)(v251 + 4))
                  v262 = -1;
                else
                  v262 = 0;
LABEL_594:
                if ((v262 & 0x80000000) == 0)
                  goto LABEL_598;
                goto LABEL_597;
              }
              if (!v251)
                goto LABEL_598;
              v253 = *(_DWORD *)(v251 + 16);
              v254 = *((_DWORD *)v252 + 1);
              v255 = *(_DWORD *)(v251 + 4);
              if (v255 >= v254)
                v256 = v254;
              else
                v256 = v255;
              if ((*((_BYTE *)v252 + 16) & 4) == 0)
              {
                if ((v253 & 4) != 0)
                {
                  if ((_DWORD)v256)
                  {
                    v271 = *(unsigned __int8 **)(v251 + 8);
                    v272 = (unsigned __int16 *)*((_QWORD *)v252 + 1);
                    do
                    {
                      v273 = *v272;
                      v274 = *v271;
                      v261 = v273 > v274;
                      if (v273 != v274)
                        goto LABEL_596;
                      ++v272;
                      ++v271;
                    }
                    while (--v256);
                  }
                }
                else if ((_DWORD)v256)
                {
                  v263 = *(unsigned __int16 **)(v251 + 8);
                  v264 = (unsigned __int16 *)*((_QWORD *)v252 + 1);
                  do
                  {
                    v265 = *v264;
                    v266 = *v263;
                    v261 = v265 > v266;
                    if (v265 != v266)
                      goto LABEL_596;
                    ++v264;
                    ++v263;
                  }
                  while (--v256);
                }
LABEL_590:
                if (v255 < v254)
                  v262 = 1;
                else
                  v262 = -1;
                if (v254 != v255)
                  goto LABEL_594;
                goto LABEL_598;
              }
              if ((v253 & 4) != 0)
              {
                if ((_DWORD)v256)
                {
                  v257 = *(unsigned __int8 **)(v251 + 8);
                  v258 = (unsigned __int8 *)*((_QWORD *)v252 + 1);
                  while (1)
                  {
                    v259 = *v258;
                    v260 = *v257;
                    v261 = v259 > v260;
                    if (v259 != v260)
                      break;
                    ++v258;
                    ++v257;
                    if (!--v256)
                      goto LABEL_590;
                  }
LABEL_596:
                  if (v261)
                    goto LABEL_598;
LABEL_597:
                  v247 += 24;
                  v244 = v249;
                  goto LABEL_598;
                }
                goto LABEL_590;
              }
              if (!(_DWORD)v256)
                goto LABEL_590;
              v267 = *(unsigned __int16 **)(v251 + 8);
              v268 = (unsigned __int8 *)*((_QWORD *)v252 + 1);
              while (1)
              {
                v269 = *v268;
                v270 = *v267;
                if (v270 != v269)
                  break;
                ++v268;
                ++v267;
                if (!--v256)
                  goto LABEL_590;
              }
              if (v270 >= v269)
                goto LABEL_597;
LABEL_598:
              v275 = *(WTF::StringImpl **)v247;
              *(_QWORD *)v247 = 0;
              v276 = *(WTF::StringImpl **)v246;
              *(_QWORD *)v246 = v275;
              if (v276)
              {
                if (*(_DWORD *)v276 == 2)
                  WTF::StringImpl::destroy(v276, a2);
                else
                  *(_DWORD *)v276 -= 2;
              }
              v277 = *(unsigned int *)(v246 + 20);
              if ((_DWORD)v277)
              {
                v278 = *(_DWORD ***)(v246 + 8);
                v279 = 8 * v277;
                do
                {
                  v280 = *v278;
                  *v278 = 0;
                  if (v280)
                  {
                    if (v280[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v280 + 16))(v280);
                    else
                      --v280[2];
                  }
                  ++v278;
                  v279 -= 8;
                }
                while (v279);
              }
              v281 = *(WTF **)(v246 + 8);
              if (v281)
              {
                *(_QWORD *)(v246 + 8) = 0;
                *(_DWORD *)(v246 + 16) = 0;
                WTF::fastFree(v281, a2);
              }
              v282 = *(_QWORD *)(v247 + 8);
              *(_QWORD *)(v247 + 8) = 0;
              *(_QWORD *)(v246 + 8) = v282;
              LODWORD(v282) = *(_DWORD *)(v247 + 16);
              *(_DWORD *)(v247 + 16) = 0;
              *(_DWORD *)(v246 + 16) = v282;
              LODWORD(v282) = *(_DWORD *)(v247 + 20);
              *(_DWORD *)(v247 + 20) = 0;
              *(_DWORD *)(v246 + 20) = v282;
              v246 = v247;
            }
            while (v244 <= (uint64_t)((unint64_t)(v243 - 2) >> 1));
            v5 -= 3;
            if ((uint64_t *)v247 == v245 - 3)
            {
              v312 = *(WTF::StringImpl **)v247;
              *(_QWORD *)v247 = v372;
              if (v312)
              {
                if (*(_DWORD *)v312 == 2)
                  WTF::StringImpl::destroy(v312, a2);
                else
                  *(_DWORD *)v312 -= 2;
              }
              v313 = *(unsigned int *)(v247 + 20);
              if ((_DWORD)v313)
              {
                v314 = *(_DWORD ***)(v247 + 8);
                v315 = 8 * v313;
                do
                {
                  v316 = *v314;
                  *v314 = 0;
                  if (v316)
                  {
                    if (v316[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v316 + 16))(v316);
                    else
                      --v316[2];
                  }
                  ++v314;
                  v315 -= 8;
                }
                while (v315);
              }
              result = *(_QWORD *)(v247 + 8);
              if (result)
              {
                *(_QWORD *)(v247 + 8) = 0;
                *(_DWORD *)(v247 + 16) = 0;
                result = WTF::fastFree((WTF *)result, a2);
              }
              *(_QWORD *)(v247 + 8) = v381;
              *(_DWORD *)(v247 + 16) = v377;
              *(_DWORD *)(v247 + 20) = v374;
              goto LABEL_705;
            }
            v283 = *v5;
            *v5 = 0;
            v284 = *(WTF::StringImpl **)v247;
            *(_QWORD *)v247 = v283;
            if (v284)
            {
              if (*(_DWORD *)v284 == 2)
                WTF::StringImpl::destroy(v284, a2);
              else
                *(_DWORD *)v284 -= 2;
            }
            v285 = *(unsigned int *)(v247 + 20);
            if ((_DWORD)v285)
            {
              v286 = *(_DWORD ***)(v247 + 8);
              v287 = 8 * v285;
              do
              {
                v288 = *v286;
                *v286 = 0;
                if (v288)
                {
                  if (v288[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v288 + 16))(v288);
                  else
                    --v288[2];
                }
                ++v286;
                v287 -= 8;
              }
              while (v287);
            }
            v289 = *(WTF **)(v247 + 8);
            if (v289)
            {
              *(_QWORD *)(v247 + 8) = 0;
              *(_DWORD *)(v247 + 16) = 0;
              WTF::fastFree(v289, a2);
            }
            v290 = *(v245 - 2);
            *(v245 - 2) = 0;
            *(_QWORD *)(v247 + 8) = v290;
            LODWORD(v290) = *((_DWORD *)v245 - 2);
            *((_DWORD *)v245 - 2) = 0;
            *(_DWORD *)(v247 + 16) = v290;
            LODWORD(v290) = *((_DWORD *)v245 - 1);
            *((_DWORD *)v245 - 1) = 0;
            *(_DWORD *)(v247 + 20) = v290;
            v291 = (WTF::StringImpl *)*(v245 - 3);
            *(v245 - 3) = v372;
            if (v291)
            {
              if (*(_DWORD *)v291 == 2)
                WTF::StringImpl::destroy(v291, a2);
              else
                *(_DWORD *)v291 -= 2;
            }
            v292 = *((unsigned int *)v245 - 1);
            if ((_DWORD)v292)
            {
              v293 = (_DWORD **)*(v245 - 2);
              v294 = 8 * v292;
              do
              {
                v295 = *v293;
                *v293 = 0;
                if (v295)
                {
                  if (v295[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v295 + 16))(v295);
                  else
                    --v295[2];
                }
                ++v293;
                v294 -= 8;
              }
              while (v294);
            }
            result = *(v245 - 2);
            if (result)
            {
              *(v245 - 2) = 0;
              *((_DWORD *)v245 - 2) = 0;
              result = WTF::fastFree((WTF *)result, a2);
            }
            *(v245 - 2) = v381;
            *((_DWORD *)v245 - 2) = v377;
            *((_DWORD *)v245 - 1) = v374;
            v296 = v247 + 24 - v6;
            if (v296 >= 25)
            {
              v297 = (v296 / 0x18uLL - 2) >> 1;
              v298 = (WTF **)(v6 + 24 * v297);
              result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v298, (uint64_t *)v247, a3);
              if ((_DWORD)result)
              {
                v299 = *(_QWORD *)v247;
                v382 = *(WTF **)(v247 + 8);
                *(_QWORD *)v247 = 0;
                *(_QWORD *)(v247 + 8) = 0;
                v300 = *(WTF **)(v247 + 16);
                *(_QWORD *)(v247 + 16) = 0;
                while (1)
                {
                  while (1)
                  {
LABEL_646:
                    v301 = v298;
                    v302 = *v298;
                    *v298 = 0;
                    v303 = *(WTF::StringImpl **)v247;
                    *(_QWORD *)v247 = v302;
                    if (v303)
                    {
                      if (*(_DWORD *)v303 == 2)
                        WTF::StringImpl::destroy(v303, a2);
                      else
                        *(_DWORD *)v303 -= 2;
                    }
                    v304 = *(unsigned int *)(v247 + 20);
                    if ((_DWORD)v304)
                    {
                      v305 = *(_DWORD ***)(v247 + 8);
                      v306 = 8 * v304;
                      do
                      {
                        v307 = *v305;
                        *v305 = 0;
                        if (v307)
                        {
                          if (v307[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v307 + 16))(v307);
                          else
                            --v307[2];
                        }
                        ++v305;
                        v306 -= 8;
                      }
                      while (v306);
                    }
                    v308 = *(WTF **)(v247 + 8);
                    if (v308)
                    {
                      *(_QWORD *)(v247 + 8) = 0;
                      *(_DWORD *)(v247 + 16) = 0;
                      WTF::fastFree(v308, a2);
                    }
                    v309 = v301[1];
                    v301[1] = 0;
                    *(_QWORD *)(v247 + 8) = v309;
                    LODWORD(v309) = *((_DWORD *)v301 + 4);
                    *((_DWORD *)v301 + 4) = 0;
                    *(_DWORD *)(v247 + 16) = (_DWORD)v309;
                    LODWORD(v309) = *((_DWORD *)v301 + 5);
                    *((_DWORD *)v301 + 5) = 0;
                    *(_DWORD *)(v247 + 20) = (_DWORD)v309;
                    if (!v297)
                    {
LABEL_691:
                      v317 = *v301;
                      *v301 = (WTF *)v299;
                      if (v317)
                      {
                        if (*(_DWORD *)v317 == 2)
                          WTF::StringImpl::destroy(v317, a2);
                        else
                          *(_DWORD *)v317 -= 2;
                      }
                      v318 = *((unsigned int *)v301 + 5);
                      if ((_DWORD)v318)
                      {
                        v319 = v301[1];
                        v320 = 8 * v318;
                        do
                        {
                          v321 = *(_DWORD **)v319;
                          *(_QWORD *)v319 = 0;
                          if (v321)
                          {
                            if (v321[2] == 1)
                              (*(void (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v321 + 16))(v321, a2);
                            else
                              --v321[2];
                          }
                          v319 = (WTF *)((char *)v319 + 8);
                          v320 -= 8;
                        }
                        while (v320);
                      }
                      result = (uint64_t)v301[1];
                      if (result)
                      {
                        v301[1] = 0;
                        *((_DWORD *)v301 + 4) = 0;
                        result = WTF::fastFree((WTF *)result, a2);
                      }
                      v301[1] = v382;
                      v301[2] = v300;
                      goto LABEL_705;
                    }
                    v297 = (v297 - 1) >> 1;
                    v298 = (WTF **)(v6 + 24 * v297);
                    if (!*v298)
                      break;
                    if (WTF::StringImpl::startsWith())
                    {
                      if (!v299)
                        goto LABEL_691;
                      v310 = WTF::StringImpl::startsWith();
LABEL_664:
                      a2 = (WTF::StringImpl *)v299;
                      if ((v310 & 1) == 0)
                        goto LABEL_691;
                      goto LABEL_665;
                    }
                    if (!*v298 || !WTF::StringImpl::startsWith())
                      break;
                    if (!v299)
                      goto LABEL_691;
                    v247 = (uint64_t)v301;
                    if ((WTF::StringImpl::startsWith() & 1) == 0)
                    {
                      v310 = WTF::StringImpl::startsWith();
                      goto LABEL_664;
                    }
                  }
                  if (!v299)
                    break;
                  v311 = WTF::StringImpl::startsWith();
                  v247 = (uint64_t)v301;
                  a2 = (WTF::StringImpl *)v299;
                  if ((v311 & 1) == 0)
                    goto LABEL_665;
                }
                a2 = 0;
LABEL_665:
                v247 = (uint64_t)v301;
                if ((WTF::codePointCompare(*v298, a2, a3) & 0x80000000) == 0)
                  goto LABEL_691;
                goto LABEL_646;
              }
            }
LABEL_705:
            v33 = v243-- <= 2;
            if (v33)
              return result;
          }
        }
        v11 = (WTF **)(v6 + 24 * (v10 >> 1));
        if ((unint64_t)v9 < 0xC01)
        {
          result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)(v6 + 24 * (v10 >> 1)), (WTF **)v6, (const WTF::StringImpl *)v7);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)v6, (WTF **)(v6 + 24 * (v10 >> 1)), (const WTF::StringImpl *)v7);
          v12 = 3 * (v10 >> 1);
          v13 = (WTF **)(v6 + 24 * (v10 >> 1) - 24);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)(v6 + 24), v13, (const WTF::StringImpl *)(v5 - 6));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)(v6 + 48), (WTF **)(v6 + 24 + 8 * v12), (const WTF::StringImpl *)(v5 - 9));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t *)v13, v11, (const WTF::StringImpl *)(v6 + 24 + 8 * v12));
          result = (uint64_t)std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v6, (WTF::StringImpl *)v11);
        }
        v379 = (const WTF::StringImpl *)((char *)v4 - 1);
        if ((a4 & 1) == 0)
        {
          result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF **)(v6 - 24), (uint64_t *)v6, v14);
          if ((result & 1) == 0)
          {
            v95 = *(_OWORD *)v6;
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 + 8) = 0;
            v376 = v95;
            *(_OWORD *)v384 = v95;
            *(_QWORD *)&v95 = *(_QWORD *)(v6 + 16);
            *(_QWORD *)(v6 + 16) = 0;
            v385 = v95;
            result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v384, (uint64_t *)v7, v14);
            if ((result & 1) != 0)
            {
              v8 = (uint64_t *)v6;
              do
              {
                v8 += 3;
                if (v8 == v5)
                  goto LABEL_804;
                result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v384, v8, a3);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v96 = (uint64_t *)(v6 + 24);
              do
              {
                v8 = v96;
                if (v96 >= v5)
                  break;
                result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v384, v96, a3);
                v96 = v8 + 3;
              }
              while (!(_DWORD)result);
            }
            v97 = v5;
            if (v8 < v5)
            {
              v97 = v5;
              do
              {
                if (v97 == (uint64_t *)v6)
                  goto LABEL_804;
                v97 -= 3;
                result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v384, v97, a3);
              }
              while ((result & 1) != 0);
            }
            if (v8 >= v97)
            {
LABEL_328:
              v144 = (WTF::StringImpl **)(v8 - 3);
              if (v8 - 3 == (uint64_t *)v6)
              {
                v153 = (WTF::StringImpl *)v376;
                v4 = (const WTF::StringImpl *)((char *)v4 - 1);
              }
              else
              {
                v145 = *v144;
                *v144 = 0;
                v146 = *(WTF::StringImpl **)v6;
                *(_QWORD *)v6 = v145;
                v4 = (const WTF::StringImpl *)((char *)v4 - 1);
                if (v146)
                {
                  if (*(_DWORD *)v146 == 2)
                    WTF::StringImpl::destroy(v146, a2);
                  else
                    *(_DWORD *)v146 -= 2;
                }
                v147 = *(unsigned int *)(v6 + 20);
                if ((_DWORD)v147)
                {
                  v148 = *(_DWORD ***)(v6 + 8);
                  v149 = 8 * v147;
                  do
                  {
                    v150 = *v148;
                    *v148 = 0;
                    if (v150)
                    {
                      if (v150[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v150 + 16))(v150);
                      else
                        --v150[2];
                    }
                    ++v148;
                    v149 -= 8;
                  }
                  while (v149);
                }
                v151 = *(WTF **)(v6 + 8);
                if (v151)
                {
                  *(_QWORD *)(v6 + 8) = 0;
                  *(_DWORD *)(v6 + 16) = 0;
                  WTF::fastFree(v151, a2);
                }
                v152 = *(v8 - 2);
                *(v8 - 2) = 0;
                *(_QWORD *)(v6 + 8) = v152;
                LODWORD(v152) = *((_DWORD *)v8 - 2);
                *((_DWORD *)v8 - 2) = 0;
                *(_DWORD *)(v6 + 16) = v152;
                LODWORD(v152) = *((_DWORD *)v8 - 1);
                *((_DWORD *)v8 - 1) = 0;
                *(_DWORD *)(v6 + 20) = v152;
                v153 = v384[0];
              }
              v384[0] = 0;
              v154 = *v144;
              *v144 = v153;
              if (v154)
              {
                if (*(_DWORD *)v154 == 2)
                  WTF::StringImpl::destroy(v154, a2);
                else
                  *(_DWORD *)v154 -= 2;
              }
              v155 = *((unsigned int *)v8 - 1);
              if ((_DWORD)v155)
              {
                v156 = (_DWORD **)*(v8 - 2);
                v157 = 8 * v155;
                do
                {
                  v158 = *v156;
                  *v156 = 0;
                  if (v158)
                  {
                    if (v158[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v158 + 16))(v158);
                    else
                      --v158[2];
                  }
                  ++v156;
                  v157 -= 8;
                }
                while (v157);
              }
              v159 = (WTF *)*(v8 - 2);
              if (v159)
              {
                *(v8 - 2) = 0;
                *((_DWORD *)v8 - 2) = 0;
                WTF::fastFree(v159, a2);
              }
              v160 = v384[1];
              v384[1] = 0;
              *(v8 - 2) = (uint64_t)v160;
              *((_DWORD *)v8 - 2) = v385;
              LODWORD(v160) = HIDWORD(v385);
              HIDWORD(v385) = 0;
              *((_DWORD *)v8 - 1) = (_DWORD)v160;
              v161 = v384[1];
              if (HIDWORD(v385))
              {
                v162 = 8 * HIDWORD(v385);
                v163 = v384[1];
                do
                {
                  v164 = *(_DWORD **)v163;
                  *(_QWORD *)v163 = 0;
                  if (v164)
                  {
                    if (v164[2] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v164 + 16))(v164);
                    else
                      --v164[2];
                  }
                  v163 = (WTF::StringImpl *)((char *)v163 + 8);
                  v162 -= 8;
                }
                while (v162);
              }
              if (v161)
                WTF::fastFree(v161, a2);
              result = (uint64_t)v384[0];
              if (v384[0])
              {
                if (*(_DWORD *)v384[0] == 2)
                  result = WTF::StringImpl::destroy(v384[0], a2);
                else
                  *(_DWORD *)v384[0] -= 2;
              }
              goto LABEL_197;
            }
LABEL_214:
            result = (uint64_t)std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v8, (WTF::StringImpl *)v97);
            while (1)
            {
              while (1)
              {
                v8 += 3;
                if (v8 == v5)
                  goto LABEL_804;
                if (v376)
                  break;
LABEL_227:
                result = *v8;
                if (*v8)
                {
                  result = WTF::StringImpl::startsWith();
                  if ((result & 1) != 0)
                    goto LABEL_275;
                  v98 = *v8;
                  if (v376)
                    goto LABEL_230;
                }
                else
                {
                  v98 = 0;
                  if (v376)
                    goto LABEL_230;
                }
                if (v98)
                {
                  if (*(_DWORD *)(v98 + 4))
                    v108 = -1;
                  else
                    v108 = 0;
LABEL_265:
                  if (v108 < 0)
                    goto LABEL_275;
                }
              }
              if (WTF::StringImpl::startsWith())
              {
                result = *v8;
                if (*v8)
                {
                  result = WTF::StringImpl::startsWith();
                  if ((result & 1) != 0)
                  {
LABEL_226:
                    v98 = *v8;
LABEL_230:
                    if (v98)
                    {
                      v99 = *(_DWORD *)(v98 + 16);
                      v100 = *(_DWORD *)(v376 + 4);
                      v101 = *(_DWORD *)(v98 + 4);
                      if (v101 >= v100)
                        v102 = v100;
                      else
                        v102 = v101;
                      if ((*(_BYTE *)(v376 + 16) & 4) != 0)
                      {
                        if ((v99 & 4) != 0)
                        {
                          if ((_DWORD)v102)
                          {
                            v103 = *(unsigned __int8 **)(v98 + 8);
                            v104 = *(unsigned __int8 **)(v376 + 8);
                            while (1)
                            {
                              v105 = *v104;
                              v106 = *v103;
                              v107 = v105 > v106;
                              if (v105 != v106)
                                goto LABEL_267;
                              ++v104;
                              ++v103;
                              if (!--v102)
                                goto LABEL_261;
                            }
                          }
                          goto LABEL_261;
                        }
                        if ((_DWORD)v102)
                        {
                          v113 = *(unsigned __int16 **)(v98 + 8);
                          v114 = *(unsigned __int8 **)(v376 + 8);
                          while (1)
                          {
                            v115 = *v114;
                            v116 = *v113;
                            if (v116 != v115)
                              break;
                            ++v114;
                            ++v113;
                            if (!--v102)
                              goto LABEL_261;
                          }
                          if (v116 >= v115)
                          {
                            while (1)
                            {
LABEL_275:
                              if (v97 == (uint64_t *)v6)
                                goto LABEL_804;
                              v97 -= 3;
                              if (!v376)
                                goto LABEL_298;
                              if (WTF::StringImpl::startsWith())
                              {
                                if (!*v97)
                                  goto LABEL_327;
                                result = WTF::StringImpl::startsWith();
                                if ((result & 1) == 0)
                                  goto LABEL_327;
LABEL_286:
                                v121 = *v97;
LABEL_287:
                                if (!v121)
                                  goto LABEL_327;
                                v122 = *(_DWORD *)(v121 + 16);
                                v123 = *(_DWORD *)(v376 + 4);
                                v124 = *(_DWORD *)(v121 + 4);
                                if (v124 >= v123)
                                  v125 = v123;
                                else
                                  v125 = v124;
                                if ((*(_BYTE *)(v376 + 16) & 4) == 0)
                                {
                                  if ((v122 & 4) != 0)
                                  {
                                    if ((_DWORD)v125)
                                    {
                                      v140 = *(unsigned __int8 **)(v121 + 8);
                                      v141 = *(unsigned __int16 **)(v376 + 8);
                                      while (1)
                                      {
                                        v142 = *v141;
                                        v143 = *v140;
                                        v130 = v142 > v143;
                                        if (v142 != v143)
                                          goto LABEL_271;
                                        ++v141;
                                        ++v140;
                                        if (!--v125)
                                          goto LABEL_322;
                                      }
                                    }
                                  }
                                  else if ((_DWORD)v125)
                                  {
                                    v132 = *(unsigned __int16 **)(v121 + 8);
                                    v133 = *(unsigned __int16 **)(v376 + 8);
                                    while (1)
                                    {
                                      v134 = *v133;
                                      v135 = *v132;
                                      v130 = v134 > v135;
                                      if (v134 != v135)
                                        goto LABEL_271;
                                      ++v133;
                                      ++v132;
                                      if (!--v125)
                                        goto LABEL_322;
                                    }
                                  }
                                  goto LABEL_322;
                                }
                                if ((v122 & 4) != 0)
                                {
                                  if (!(_DWORD)v125)
                                    goto LABEL_322;
                                  v126 = *(unsigned __int8 **)(v121 + 8);
                                  v127 = *(unsigned __int8 **)(v376 + 8);
                                  while (1)
                                  {
                                    v128 = *v127;
                                    v129 = *v126;
                                    v130 = v128 > v129;
                                    if (v128 != v129)
                                      break;
                                    ++v127;
                                    ++v126;
                                    if (!--v125)
                                      goto LABEL_322;
                                  }
LABEL_271:
                                  if (v130)
                                    goto LABEL_327;
                                }
                                else if ((_DWORD)v125)
                                {
                                  v136 = *(unsigned __int16 **)(v121 + 8);
                                  v137 = *(unsigned __int8 **)(v376 + 8);
                                  while (1)
                                  {
                                    v138 = *v137;
                                    v139 = *v136;
                                    if (v139 != v138)
                                      break;
                                    ++v137;
                                    ++v136;
                                    if (!--v125)
                                      goto LABEL_322;
                                  }
                                  if (v139 < v138)
                                  {
LABEL_327:
                                    if (v8 >= v97)
                                      goto LABEL_328;
                                    goto LABEL_214;
                                  }
                                }
                                else
                                {
LABEL_322:
                                  if (v124 < v123)
                                    v131 = 1;
                                  else
                                    v131 = -1;
                                  if (v123 == v124)
                                    goto LABEL_327;
LABEL_326:
                                  if ((v131 & 0x80000000) == 0)
                                    goto LABEL_327;
                                }
                              }
                              else if (WTF::StringImpl::startsWith())
                              {
                                if (!*v97)
                                  goto LABEL_327;
                                result = WTF::StringImpl::startsWith();
                                if ((result & 1) == 0)
                                {
                                  if (!*v97)
                                    goto LABEL_327;
                                  result = WTF::StringImpl::startsWith();
                                  if ((result & 1) == 0)
                                    goto LABEL_327;
                                  goto LABEL_286;
                                }
                              }
                              else
                              {
LABEL_298:
                                result = *v97;
                                if (!*v97)
                                {
                                  v121 = 0;
                                  if (!v376)
                                  {
LABEL_301:
                                    if (!v121)
                                      goto LABEL_327;
                                    if (*(_DWORD *)(v121 + 4))
                                      v131 = -1;
                                    else
                                      v131 = 0;
                                    goto LABEL_326;
                                  }
                                  goto LABEL_287;
                                }
                                result = WTF::StringImpl::startsWith();
                                if ((result & 1) == 0)
                                {
                                  v121 = *v97;
                                  if (!v376)
                                    goto LABEL_301;
                                  goto LABEL_287;
                                }
                              }
                            }
                          }
                        }
                        else
                        {
LABEL_261:
                          if (v101 < v100)
                            v108 = 1;
                          else
                            v108 = -1;
                          if (v100 != v101)
                            goto LABEL_265;
                        }
                      }
                      else
                      {
                        if ((v99 & 4) != 0)
                        {
                          if (!(_DWORD)v102)
                            goto LABEL_261;
                          v117 = *(unsigned __int8 **)(v98 + 8);
                          v118 = *(unsigned __int16 **)(v376 + 8);
                          while (1)
                          {
                            v119 = *v118;
                            v120 = *v117;
                            v107 = v119 > v120;
                            if (v119 != v120)
                              break;
                            ++v118;
                            ++v117;
                            if (!--v102)
                              goto LABEL_261;
                          }
                        }
                        else
                        {
                          if (!(_DWORD)v102)
                            goto LABEL_261;
                          v109 = *(unsigned __int16 **)(v98 + 8);
                          v110 = *(unsigned __int16 **)(v376 + 8);
                          while (1)
                          {
                            v111 = *v110;
                            v112 = *v109;
                            v107 = v111 > v112;
                            if (v111 != v112)
                              break;
                            ++v110;
                            ++v109;
                            if (!--v102)
                              goto LABEL_261;
                          }
                        }
LABEL_267:
                        if (!v107)
                          goto LABEL_275;
                      }
                    }
                  }
                }
              }
              else
              {
                if (!WTF::StringImpl::startsWith())
                  goto LABEL_227;
                result = *v8;
                if (*v8)
                {
                  result = WTF::StringImpl::startsWith();
                  if ((result & 1) != 0)
                    goto LABEL_275;
                  result = *v8;
                  if (*v8)
                  {
                    result = WTF::StringImpl::startsWith();
                    if ((result & 1) != 0)
                      goto LABEL_226;
                  }
                }
              }
            }
          }
        }
        v15 = *(_OWORD *)v6;
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        *(_OWORD *)v384 = v15;
        v16 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        v385 = v16;
        if ((uint64_t *)(v6 + 24) == v5)
          goto LABEL_804;
        v17 = (WTF::StringImpl *)v15;
        v18 = 24;
        while (1)
        {
          if (!*(_QWORD *)(v6 + v18))
            goto LABEL_26;
          result = WTF::StringImpl::startsWith();
          if ((_DWORD)result)
          {
            if (!v17)
              break;
            result = WTF::StringImpl::startsWith();
LABEL_17:
            v19 = v17;
            if ((result & 1) == 0)
              break;
LABEL_18:
            result = WTF::codePointCompare(*(WTF **)(v6 + v18), v19, v14);
            if ((result & 0x80000000) == 0)
              break;
            goto LABEL_19;
          }
          if (!*(_QWORD *)(v6 + v18) || (result = WTF::StringImpl::startsWith(), !(_DWORD)result))
          {
LABEL_26:
            if (!v17)
            {
              v19 = 0;
              goto LABEL_18;
            }
            result = WTF::StringImpl::startsWith();
            v19 = v17;
            if ((result & 1) == 0)
              goto LABEL_18;
            goto LABEL_19;
          }
          if (!v17)
            break;
          result = WTF::StringImpl::startsWith();
          if ((result & 1) == 0)
          {
            result = WTF::StringImpl::startsWith();
            goto LABEL_17;
          }
LABEL_19:
          v18 += 24;
          if ((uint64_t *)(v6 + v18) == v5)
            goto LABEL_804;
        }
        v20 = v6 + v18;
        v21 = (WTF **)v5;
        if (v18 != 24)
        {
          while (v21 != (WTF **)v6)
          {
            v21 -= 3;
            result = WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v21, (uint64_t *)v384, v14);
            if ((_DWORD)result)
              goto LABEL_37;
          }
LABEL_804:
          __break(1u);
          return result;
        }
        v21 = (WTF **)v5;
        do
        {
          if (v20 >= (unint64_t)v21)
            break;
          v21 -= 3;
        }
        while ((WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)const::$_0::operator()<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v21, (uint64_t *)v384, v14) & 1) == 0);
LABEL_37:
        v375 = v6 + v18;
        v8 = (uint64_t *)(v6 + v18);
        if (v20 >= (unint64_t)v21)
          goto LABEL_152;
        v22 = (WTF::StringImpl *)v21;
        while (2)
        {
          result = (uint64_t)std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v8, v22);
          while (1)
          {
LABEL_40:
            v8 += 3;
            if (v8 == v5)
              goto LABEL_804;
            result = *v8;
            if (*v8)
            {
              result = WTF::StringImpl::startsWith();
              if ((_DWORD)result)
              {
                if (!v17)
                  goto LABEL_100;
                result = WTF::StringImpl::startsWith();
LABEL_45:
                v23 = v17;
                if ((result & 1) == 0)
                  goto LABEL_100;
                goto LABEL_46;
              }
              result = *v8;
              if (*v8)
              {
                result = WTF::StringImpl::startsWith();
                if ((_DWORD)result)
                {
                  if (!v17)
                    goto LABEL_100;
                  result = WTF::StringImpl::startsWith();
                  if ((result & 1) != 0)
                    continue;
                  result = WTF::StringImpl::startsWith();
                  goto LABEL_45;
                }
              }
            }
            if (v17)
            {
              result = WTF::StringImpl::startsWith();
              v23 = v17;
              if ((result & 1) != 0)
                continue;
            }
            else
            {
              v23 = 0;
            }
LABEL_46:
            v24 = *v8;
            if (!*v8)
            {
              if (!v23)
                goto LABEL_100;
              if (*((_DWORD *)v23 + 1))
                v34 = -1;
              else
                v34 = 0;
LABEL_90:
              if ((v34 & 0x80000000) == 0)
                goto LABEL_100;
              continue;
            }
            if (!v23)
              goto LABEL_100;
            v25 = *((_DWORD *)v23 + 4);
            v26 = *(_DWORD *)(v24 + 4);
            v27 = *((_DWORD *)v23 + 1);
            v28 = v27 >= v26 ? v26 : v27;
            if ((*(_BYTE *)(v24 + 16) & 4) == 0)
              break;
            if ((v25 & 4) != 0)
            {
              if (!(_DWORD)v28)
                goto LABEL_86;
              v29 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
              v30 = *(unsigned __int8 **)(v24 + 8);
              while (1)
              {
                v31 = *v30;
                v32 = *v29;
                v33 = v31 > v32;
                if (v31 != v32)
                  goto LABEL_92;
                ++v30;
                ++v29;
                if (!--v28)
                  goto LABEL_86;
              }
            }
            if (!(_DWORD)v28)
              goto LABEL_86;
            v39 = (unsigned __int16 *)*((_QWORD *)v23 + 1);
            v40 = *(unsigned __int8 **)(v24 + 8);
            while (1)
            {
              v41 = *v40;
              v42 = *v39;
              if (v42 != v41)
                break;
              ++v40;
              ++v39;
              if (!--v28)
                goto LABEL_86;
            }
            if (v42 < v41)
              goto LABEL_100;
          }
          if ((v25 & 4) == 0)
          {
            if (!(_DWORD)v28)
              goto LABEL_86;
            v35 = (unsigned __int16 *)*((_QWORD *)v23 + 1);
            v36 = *(unsigned __int16 **)(v24 + 8);
            while (1)
            {
              v37 = *v36;
              v38 = *v35;
              v33 = v37 > v38;
              if (v37 != v38)
                goto LABEL_92;
              ++v36;
              ++v35;
              if (!--v28)
                goto LABEL_86;
            }
          }
          if ((_DWORD)v28)
          {
            v43 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
            v44 = *(unsigned __int16 **)(v24 + 8);
            while (1)
            {
              v45 = *v44;
              v46 = *v43;
              v33 = v45 > v46;
              if (v45 != v46)
                break;
              ++v44;
              ++v43;
              if (!--v28)
                goto LABEL_86;
            }
LABEL_92:
            if (v33)
              goto LABEL_100;
            goto LABEL_40;
          }
LABEL_86:
          if (v27 < v26)
            v34 = 1;
          else
            v34 = -1;
          if (v26 != v27)
            goto LABEL_90;
LABEL_100:
          while (2)
          {
            while (2)
            {
              while (2)
              {
                while (2)
                {
                  while (2)
                  {
                    while (2)
                    {
                      while (2)
                      {
                        if (v22 == (WTF::StringImpl *)v6)
                          goto LABEL_804;
                        v47 = *((_QWORD *)v22 - 3);
                        v22 = (WTF::StringImpl *)((char *)v22 - 24);
                        result = v47;
                        if (!v47)
                          goto LABEL_112;
                        result = WTF::StringImpl::startsWith();
                        if (!(_DWORD)result)
                        {
                          result = *(_QWORD *)v22;
                          if (*(_QWORD *)v22)
                          {
                            result = WTF::StringImpl::startsWith();
                            if ((_DWORD)result)
                            {
                              if (!v17)
                                continue;
                              if ((WTF::StringImpl::startsWith() & 1) != 0)
                                goto LABEL_151;
                              result = WTF::StringImpl::startsWith();
                              goto LABEL_110;
                            }
                          }
LABEL_112:
                          if (v17)
                          {
                            result = WTF::StringImpl::startsWith();
                            v48 = v17;
                            if ((result & 1) != 0)
                              goto LABEL_151;
                          }
                          else
                          {
                            v48 = 0;
                          }
                          goto LABEL_114;
                        }
                        break;
                      }
                      if (!v17)
                        continue;
                      break;
                    }
                    result = WTF::StringImpl::startsWith();
LABEL_110:
                    v48 = v17;
                    if ((result & 1) == 0)
                      continue;
                    break;
                  }
LABEL_114:
                  v49 = *(_QWORD *)v22;
                  if (!*(_QWORD *)v22)
                  {
                    if (!v48)
                      continue;
                    if (*((_DWORD *)v48 + 1))
                      v59 = -1;
                    else
                      v59 = 0;
                    goto LABEL_150;
                  }
                  break;
                }
                if (!v48)
                  continue;
                break;
              }
              v50 = *((_DWORD *)v48 + 4);
              v51 = *(_DWORD *)(v49 + 4);
              v52 = *((_DWORD *)v48 + 1);
              if (v52 >= v51)
                v53 = v51;
              else
                v53 = v52;
              if ((*(_BYTE *)(v49 + 16) & 4) == 0)
              {
                if ((v50 & 4) != 0)
                {
                  if ((_DWORD)v53)
                  {
                    v68 = (unsigned __int8 *)*((_QWORD *)v48 + 1);
                    v69 = *(unsigned __int16 **)(v49 + 8);
                    while (1)
                    {
                      v70 = *v69;
                      v71 = *v68;
                      v58 = v70 > v71;
                      if (v70 != v71)
                        break;
                      ++v69;
                      ++v68;
                      if (!--v53)
                        goto LABEL_146;
                    }
LABEL_97:
                    if (!v58)
                      goto LABEL_151;
                    continue;
                  }
                }
                else if ((_DWORD)v53)
                {
                  v60 = (unsigned __int16 *)*((_QWORD *)v48 + 1);
                  v61 = *(unsigned __int16 **)(v49 + 8);
                  do
                  {
                    v62 = *v61;
                    v63 = *v60;
                    v58 = v62 > v63;
                    if (v62 != v63)
                      goto LABEL_97;
                    ++v61;
                    ++v60;
                  }
                  while (--v53);
                }
LABEL_146:
                if (v52 < v51)
                  v59 = 1;
                else
                  v59 = -1;
                if (v51 == v52)
                  continue;
LABEL_150:
                if (v59 < 0)
                  goto LABEL_151;
                continue;
              }
              break;
            }
            if ((v50 & 4) != 0)
            {
              if ((_DWORD)v53)
              {
                v54 = (unsigned __int8 *)*((_QWORD *)v48 + 1);
                v55 = *(unsigned __int8 **)(v49 + 8);
                while (1)
                {
                  v56 = *v55;
                  v57 = *v54;
                  v58 = v56 > v57;
                  if (v56 != v57)
                    goto LABEL_97;
                  ++v55;
                  ++v54;
                  if (!--v53)
                    goto LABEL_146;
                }
              }
              goto LABEL_146;
            }
            if (!(_DWORD)v53)
              goto LABEL_146;
            v64 = (unsigned __int16 *)*((_QWORD *)v48 + 1);
            v65 = *(unsigned __int8 **)(v49 + 8);
            while (1)
            {
              v66 = *v65;
              v67 = *v64;
              if (v67 != v66)
                break;
              ++v65;
              ++v64;
              if (!--v53)
                goto LABEL_146;
            }
            if (v67 < v66)
              continue;
            break;
          }
LABEL_151:
          if (v8 < (uint64_t *)v22)
            continue;
          break;
        }
LABEL_152:
        v72 = (WTF::StringImpl **)(v8 - 3);
        if (v8 - 3 != (uint64_t *)v6)
        {
          v73 = *v72;
          *v72 = 0;
          v74 = *(WTF::StringImpl **)v6;
          *(_QWORD *)v6 = v73;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, v19);
            else
              *(_DWORD *)v74 -= 2;
          }
          v75 = *(unsigned int *)(v6 + 20);
          if ((_DWORD)v75)
          {
            v76 = *(_DWORD ***)(v6 + 8);
            v77 = 8 * v75;
            do
            {
              v78 = *v76;
              *v76 = 0;
              if (v78)
              {
                if (v78[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 16))(v78);
                else
                  --v78[2];
              }
              ++v76;
              v77 -= 8;
            }
            while (v77);
          }
          v79 = *(WTF **)(v6 + 8);
          if (v79)
          {
            *(_QWORD *)(v6 + 8) = 0;
            *(_DWORD *)(v6 + 16) = 0;
            WTF::fastFree(v79, v19);
          }
          v80 = *(v8 - 2);
          *(v8 - 2) = 0;
          *(_QWORD *)(v6 + 8) = v80;
          LODWORD(v80) = *((_DWORD *)v8 - 2);
          *((_DWORD *)v8 - 2) = 0;
          *(_DWORD *)(v6 + 16) = v80;
          LODWORD(v80) = *((_DWORD *)v8 - 1);
          *((_DWORD *)v8 - 1) = 0;
          *(_DWORD *)(v6 + 20) = v80;
          v17 = v384[0];
        }
        v384[0] = 0;
        v81 = *v72;
        *v72 = v17;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v19);
          else
            *(_DWORD *)v81 -= 2;
        }
        v82 = *((unsigned int *)v8 - 1);
        if ((_DWORD)v82)
        {
          v83 = (_DWORD **)*(v8 - 2);
          v84 = 8 * v82;
          do
          {
            v85 = *v83;
            *v83 = 0;
            if (v85)
            {
              if (v85[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 16))(v85);
              else
                --v85[2];
            }
            ++v83;
            v84 -= 8;
          }
          while (v84);
        }
        v86 = v7;
        v87 = (WTF *)*(v8 - 2);
        if (v87)
        {
          *(v8 - 2) = 0;
          *((_DWORD *)v8 - 2) = 0;
          WTF::fastFree(v87, v19);
        }
        v88 = v384[1];
        v384[1] = 0;
        *(v8 - 2) = (uint64_t)v88;
        *((_DWORD *)v8 - 2) = v385;
        LODWORD(v88) = HIDWORD(v385);
        HIDWORD(v385) = 0;
        *((_DWORD *)v8 - 1) = (_DWORD)v88;
        v89 = v384[1];
        if (HIDWORD(v385))
        {
          v90 = 8 * HIDWORD(v385);
          v91 = v384[1];
          do
          {
            v92 = *(_DWORD **)v91;
            *(_QWORD *)v91 = 0;
            if (v92)
            {
              if (v92[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 16))(v92);
              else
                --v92[2];
            }
            v91 = (WTF::StringImpl *)((char *)v91 + 8);
            v90 -= 8;
          }
          while (v90);
        }
        if (v89)
          WTF::fastFree(v89, v19);
        v4 = v379;
        v7 = v86;
        if (v384[0])
        {
          if (*(_DWORD *)v384[0] == 2)
            WTF::StringImpl::destroy(v384[0], v19);
          else
            *(_DWORD *)v384[0] -= 2;
        }
        if (v375 < (unint64_t)v21)
          goto LABEL_196;
        v93 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>(v6, (uint64_t)(v8 - 3), v14);
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *>((uint64_t)v8, (uint64_t)v5, v94);
        if (!(_DWORD)result)
        {
          if (v93)
            continue;
LABEL_196:
          result = std::__introsort<std::_ClassicAlgPolicy,WebCore::ComputedStylePropertyMapReadOnly::entries(WebCore::ScriptExecutionContext *)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::RefPtr<WebCore::CSSStyleValue,WTF::RawPtrTraits<WebCore::CSSStyleValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleValue>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> *,false>(v6, v8 - 3, v379, a4 & 1);
LABEL_197:
          a4 = 0;
          continue;
        }
        v5 = v8 - 3;
        if (!v93)
          goto LABEL_2;
        return result;
    }
  }
}

