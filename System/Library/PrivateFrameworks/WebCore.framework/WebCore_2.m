uint64_t WebCore::HeaderFieldTokenizer::consumeToken@<X0>(WebCore::HeaderFieldTokenizer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v16;
  BOOL v18;

  result = *((_QWORD *)this + 1);
  if (!result)
    goto LABEL_19;
  v4 = *(_DWORD *)this;
  v5 = *(_DWORD *)(result + 4);
  if (*(_DWORD *)this >= v5)
    goto LABEL_19;
  if ((*(_BYTE *)(result + 16) & 4) != 0)
  {
    v6 = *(unsigned int *)this;
    do
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(result + 8) + v6);
      if ((v7 - 48) >= 0xA && (v7 | 0x20u) - 97 >= 0x1A)
      {
        v9 = (v7 - 33) > 0x3F || ((1 << (v7 - 33)) & 0xE00000000000367DLL) == 0;
        if (v9 && v7 != 126 && v7 != 124)
          break;
      }
      *(_DWORD *)this = ++v6;
    }
    while (v6 < v5);
  }
  else
  {
    v6 = *(unsigned int *)this;
    do
    {
      v16 = *(unsigned __int16 *)(*(_QWORD *)(result + 8) + 2 * v6);
      if ((v16 - 48) >= 0xA && (v16 | 0x20u) - 97 >= 0x1A)
      {
        v18 = (v16 - 33) > 0x3F || ((1 << (v16 - 33)) & 0xE00000000000367DLL) == 0;
        if (v18 && v16 != 126 && v16 != 124)
          break;
      }
      *(_DWORD *)this = ++v6;
    }
    while (v6 < v5);
  }
  if ((_DWORD)v6 == v4)
  {
LABEL_19:
    *a2 = 0;
    return result;
  }
  if (v4 || v5 > v6)
  {
    WTF::StringImpl::substring((WTF::StringImpl *)result);
    result = *((_QWORD *)this + 1);
    if (!result)
      return result;
    LODWORD(v6) = *(_DWORD *)this;
  }
  else
  {
    *(_DWORD *)result += 2;
    *a2 = result;
  }
  v10 = *(unsigned int *)(result + 4);
  if (v10 > v6)
  {
    v11 = v6;
    v12 = v10 - v6;
    do
    {
      if (v10 == v11)
        break;
      v13 = *(_QWORD *)(result + 8);
      v14 = (*(_BYTE *)(result + 16) & 4) != 0 ? *(unsigned __int8 *)(v13 + v11) : *(unsigned __int16 *)(v13 + 2 * v11);
      if (v14 != 32 && v14 != 9)
        break;
      *(_DWORD *)this = ++v11;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t WebCore::ApplicationCacheHost::maybeLoadResource(WebCore::ApplicationCacheHost *this, WebCore::ResourceLoader *a2, const WebCore::ResourceRequest *a3, const WTF::StringImpl **a4)
{
  const WTF::StringImpl *v8;
  uint64_t shouldLoadResourceFromApplicationCache;
  int v11;
  __n128 v12;
  uint64_t v13;
  WebCore::DocumentLoader *v14;
  WebCore::SubstituteResource *v15;
  WebCore::SubstituteResource *v16;

  if ((*((_BYTE *)a2 + 1092) & 4) != 0 || !WebCore::ApplicationCacheHost::isApplicationCacheBlockedForRequest(this, a2))
    return 0;
  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  v11 = WTF::equal(*(WTF **)a3, *a4, v8);
  shouldLoadResourceFromApplicationCache = 0;
  if (v11 && !*((_QWORD *)a2 + 128))
  {
    v16 = 0;
    shouldLoadResourceFromApplicationCache = WebCore::ApplicationCacheHost::shouldLoadResourceFromApplicationCache((uint64_t)this, a3, (_DWORD **)&v16);
    if ((_DWORD)shouldLoadResourceFromApplicationCache)
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
      if (v13)
        v14 = (WebCore::DocumentLoader *)(v13 - 56);
      else
        v14 = 0;
      if (v16)
        v12.n128_f64[0] = WebCore::DocumentLoader::scheduleSubstituteResourceLoad(v14, a2, v16);
      else
        WebCore::DocumentLoader::scheduleCannotShowURLError(v14, a2);
    }
    v15 = v16;
    v16 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 2) == 1)
        (*(void (**)(WebCore::SubstituteResource *, __n128))(*(_QWORD *)v15 + 8))(v15, v12);
      else
        --*((_DWORD *)v15 + 2);
    }
  }
  return shouldLoadResourceFromApplicationCache;
}

BOOL WebCore::SecurityOrigin::isSameOriginAs(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  _BOOL4 v9;
  _BOOL4 v11;
  _BOOL4 v12;
  char v13;
  _BOOL8 result;
  uint64_t v16[2];
  char v17;
  uint64_t v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21;

  if (this == a2)
    return 1;
  v20 = v2;
  v21 = v3;
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 == 1 || (v7 = *((_DWORD *)a2 + 8), v7 == 1))
  {
    WebCore::SecurityOriginData::opaqueOriginIdentifier(v18, (WebCore::SecurityOrigin *)((char *)this + 8));
    WebCore::SecurityOriginData::opaqueOriginIdentifier(v16, (const WebCore::SecurityOrigin *)((char *)a2 + 8));
    result = (v19 != 0) == (v17 != 0);
    if (v19 && v17)
      return v18[0] == v16[0] && v18[1] == v16[1];
  }
  else
  {
    v9 = v7 == (_DWORD)v6 && v7 != -1;
    if ((_DWORD)v6 == -1 || !v9)
    {
      v11 = v7 == -1;
      if ((_DWORD)v6 == -1)
        v12 = v11;
      else
        v12 = v9;
      if (!v12)
        return 0;
    }
    else
    {
      v18[0] = (uint64_t)v16;
      v13 = ((uint64_t (*)(uint64_t *, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v6])(v18, (char *)this + 8, (char *)a2 + 8);
      if ((v13 & 1) == 0)
        return 0;
    }
    return !*((_BYTE *)this + 63) || !(*((unsigned __int8 *)this + 59) | *((unsigned __int8 *)a2 + 59));
  }
  return result;
}

BOOL WebCore::SecurityOrigin::isSameSiteAs(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  int v2;
  uint64_t v3;
  WTF **v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WebCore::PublicSuffixStore *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  WTF **v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v2 = *((_DWORD *)this + 8);
  if ((v2 == 1) != (*((_DWORD *)a2 + 8) == 1))
    return 0;
  if (v2 != 1)
  {
    v7 = (WTF **)WebCore::SecurityOrigin::protocol(this);
    v8 = (const WTF::StringImpl **)WebCore::SecurityOrigin::protocol(a2);
    v10 = (WebCore::PublicSuffixStore *)WTF::equal(*v7, *v8, v9);
    if (!(_DWORD)v10)
      return 0;
    if (*((_DWORD *)this + 8) != 1)
    {
      v11 = (uint64_t *)WebCore::PublicSuffixStore::singleton(v10);
      v12 = *((_QWORD *)this + 5);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 4) | ((unint64_t)((*(_DWORD *)(v12 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      v15 = WebCore::PublicSuffixStore::topPrivatelyControlledDomain(v11, v13, v14, (uint64_t *)&v28);
      if (v28 && *((_DWORD *)v28 + 1))
      {
        v21 = (uint64_t *)WebCore::PublicSuffixStore::singleton((WebCore::PublicSuffixStore *)v15);
        v22 = *((_QWORD *)a2 + 5);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          v24 = *(unsigned int *)(v22 + 4) | ((unint64_t)((*(_DWORD *)(v22 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v23 = 0;
          v24 = 0x100000000;
        }
        WebCore::PublicSuffixStore::topPrivatelyControlledDomain(v21, v23, v24, (uint64_t *)&v27);
        v3 = WTF::equal(v28, v27, v25);
        v26 = v27;
        v27 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v19);
          else
            *(_DWORD *)v26 -= 2;
        }
      }
      else
      {
        v16 = (WTF **)WebCore::SecurityOrigin::host(this);
        v17 = (const WTF::StringImpl **)WebCore::SecurityOrigin::host(a2);
        v3 = WTF::equal(*v16, *v17, v18);
      }
      v20 = v28;
      v28 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      return v3;
    }
  }
  return WebCore::SecurityOrigin::isSameOriginAs(this, a2);
}

uint64_t WebCore::SecurityOrigin::protocol(WebCore::SecurityOrigin *this)
{
  uint64_t v1;
  WebCore::CachedResourceRequest *v3;
  WebCore::Document *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::CachedResourceRequest *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CachedResourceRequest::setDomainForCachePartition(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v1])(&v6, (char *)this + 8);
  }
}

WTF::StringImpl *WebCore::CachedResourceRequest::setDomainForCachePartition(WebCore::CachedResourceRequest *this, WebCore::Document *a2)
{
  WTF::StringImpl *v3;
  WebCore::SecurityOrigin *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  char **v17;
  char *v18;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 51);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v14 = v3;
  }
  else
  {
    if (*((_BYTE *)a2 + 464) == 1)
    {
      v4 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(char *))(*((_QWORD *)a2 + 24) + 256))((char *)a2 + 192);
      WebCore::SecurityOrigin::domainForCachePartition(v4, &v14);
      v5 = v14;
    }
    else
    {
      v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v5 += 2;
      v14 = v5;
    }
    if (!v5)
    {
      v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        v10 = *(_DWORD *)v9 + 2;
        *(_DWORD *)v9 = v10;
        goto LABEL_11;
      }
      goto LABEL_34;
    }
  }
  v6 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v6 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  if (v14)
  {
    v7 = *((_QWORD *)v14 + 1);
    v8 = *((unsigned int *)v14 + 1) | ((unint64_t)((*((_DWORD *)v14 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v7, v8, (uint64_t *)&v15);
  v9 = v15;
  if (v15)
    goto LABEL_10;
  v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *(_DWORD *)v9 += 2;
LABEL_10:
    v10 = *(_DWORD *)v9;
LABEL_11:
    v11 = 0;
    *(_DWORD *)v9 = v10 + 2;
    goto LABEL_12;
  }
LABEL_34:
  v11 = 1;
LABEL_12:
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v9;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if ((v11 & 1) == 0)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::domainForCachePartition@<X0>(WebCore::SecurityOrigin *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  WebCore::SecurityOriginData *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  _DWORD *v9;
  _QWORD *v10;
  WebCore::LegacySchemeRegistry *v11;
  const WTF::String *v12;
  WebCore::SecurityOriginData *v13;
  char v14;
  char *v15;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
  {
    v5 = (WebCore::SecurityOrigin *)((char *)this + 8);
    v15 = &v14;
    v6 = (_QWORD *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v3])(&v15, (char *)this + 8);
    if ((MEMORY[0x19AEA53F4](*v6, "http", 4) & 1) == 0)
    {
      v10 = (_QWORD *)WebCore::SecurityOriginData::protocol(v5);
      if (!MEMORY[0x19AEA53F4](*v10, "https", 5))
      {
        v11 = (WebCore::LegacySchemeRegistry *)WebCore::SecurityOriginData::protocol(v5);
        result = WebCore::LegacySchemeRegistry::shouldPartitionCacheForURLScheme(v11, v12);
        if (!(_DWORD)result)
        {
          v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
          if (!*MEMORY[0x1E0CBF738])
            goto LABEL_7;
          goto LABEL_6;
        }
        result = WebCore::SecurityOrigin::host(this);
LABEL_5:
        v9 = *(_DWORD **)result;
        if (!*(_QWORD *)result)
        {
LABEL_7:
          *a2 = v9;
          return result;
        }
LABEL_6:
        *v9 += 2;
        goto LABEL_7;
      }
    }
    v7 = *((unsigned int *)this + 8);
    if ((_DWORD)v7 != -1)
    {
      v15 = &v14;
      result = ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v7])(&v15, v5);
      goto LABEL_5;
    }
  }
  v13 = (WebCore::SecurityOriginData *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SecurityOriginData::protocol(v13);
}

uint64_t WebCore::SecurityOriginData::protocol(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  WebCore::Document *v3;
  const WTF::URL *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::Document *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::Document::isSecureContext(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v1])(&v6, this);
  }
}

uint64_t WebCore::Document::isSecureContext(WebCore::Document *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  WebCore::SecurityOrigin *v10;
  int isURLPotentiallyTrustworthy;
  int v12;
  WebCore::SecurityOrigin *v13;

  v2 = *((_QWORD *)this + 66);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 1;
  if ((*(_QWORD *)(*((_QWORD *)this + 85) + 696) & 2) == 0)
    return 1;
  v5 = *(_QWORD *)(v3 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 1686))
        return 1;
    }
  }
  for (i = *(_QWORD *)(v3 + 56); i; i = *(_QWORD *)(v8 + 56))
  {
    v8 = *(_QWORD *)(i + 8);
    if (!v8)
      break;
    if (!*(_BYTE *)(v8 + 144))
    {
      v9 = *(_QWORD *)(v8 + 296);
      *(_DWORD *)(v9 + 24) += 2;
      if ((*(_BYTE *)(v9 + 268) & 4) != 0)
      {
        isURLPotentiallyTrustworthy = WebCore::isURLPotentiallyTrustworthy((WebCore *)(v9 + 736), a2);
      }
      else
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), a2);
        isURLPotentiallyTrustworthy = WebCore::SecurityOrigin::isPotentiallyTrustworthy(v10);
      }
      v12 = isURLPotentiallyTrustworthy;
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
      if (!v12)
        return 0;
    }
  }
  if ((*((_BYTE *)this + 268) & 4) != 0)
    return WebCore::isURLPotentiallyTrustworthy((WebCore::Document *)((char *)this + 736), a2);
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), a2);
  return WebCore::SecurityOrigin::isPotentiallyTrustworthy(v13);
}

void WebCore::SecurityContext::securityOrigin(WebCore::SecurityContext *this, WTF::StringImpl *a2)
{
  uint64_t *v2;
  int v3;
  void *v4;
  uint64_t v6;
  uint64_t IdentifierInternal;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t *v11;
  void *v12;
  char v13;
  char **v14;
  char *v15;

  v2 = (uint64_t *)*((_QWORD *)this + 1);
  if (!v2)
  {
    if (!*((_BYTE *)this + 88))
      return;
    v6 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v6 = 1;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v8 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v8 != -1)
    {
      v15 = &v13;
      v14 = &v15;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) == 0)
    {
      __break(1u);
      return;
    }
    v9 = WebCore::Process::globalIdentifier;
    *(_QWORD *)(v6 + 8) = IdentifierInternal;
    *(_QWORD *)(v6 + 16) = v9;
    *(_DWORD *)(v6 + 32) = 1;
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *(_QWORD *)(v6 + 40) = v10;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 54) = 0;
    *(_WORD *)(v6 + 62) = 1;
    v2 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v2 = 1;
    v2[1] = v6;
    v11 = (uint64_t *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
      {
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v11 + 1, a2);
        WTF::fastFree((WTF *)v11, v12);
        v2 = (uint64_t *)*((_QWORD *)this + 1);
        if (!v2)
          return;
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
  }
  v3 = (*(_DWORD *)v2)++;
  if (v3)
  {
    *(_DWORD *)v2 = v3;
  }
  else
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v2 + 1, a2);
    WTF::fastFree((WTF *)v2, v4);
  }
}

BOOL WebCore::SecurityOrigin::isPotentiallyTrustworthy(WebCore::SecurityOrigin *this)
{
  unsigned __int8 *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22[2];

  if (!*((_BYTE *)this + 62))
  {
    v9 = *((unsigned int *)this + 8);
    if ((_DWORD)v9 == -1)
      goto LABEL_30;
    v2 = (char *)this + 8;
    v22[0] = (unsigned __int8 *)&v21;
    v10 = *(_QWORD *)((uint64_t (*)(unsigned __int8 **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(v22, (char *)this + 8);
    if (v10)
    {
      v1 = *(unsigned __int8 **)(v10 + 8);
      v3 = *(unsigned int *)(v10 + 4);
      v5 = (unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32;
    }
    else
    {
      v1 = 0;
      v3 = 0;
      v5 = 0x100000000;
    }
    v11 = *((unsigned int *)this + 8);
    if ((_DWORD)v11 == -1)
    {
LABEL_30:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_31:
      WebCore::secureSchemes(void)::secureSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinSecureSchemes);
      *(_BYTE *)(v5 + 3128) = 1;
LABEL_15:
      v16 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::secureSchemes(void)::secureSchemes, v22, v12, v13);
      v17 = v16;
      v18 = __ldxr(v6);
      if (v18 == 1)
      {
        if (!__stlxr(0, v6))
        {
          if ((v16 & 1) != 0)
            goto LABEL_22;
          goto LABEL_21;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
      if ((v17 & 1) != 0)
        goto LABEL_22;
      goto LABEL_21;
    }
    v22[0] = (unsigned __int8 *)&v21;
    v14 = *(_QWORD *)((uint64_t (*)(unsigned __int8 **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v11])(v22, (char *)this + 8);
    if (v14)
    {
      v2 = *(char **)(v14 + 8);
      v4 = *(unsigned int *)(v14 + 4) | ((unint64_t)((*(_DWORD *)(v14 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v2 = 0;
      v4 = 0x100000000;
    }
    v3 |= v5;
    v22[0] = v1;
    v22[1] = (unsigned __int8 *)v3;
    if (!v1)
    {
LABEL_21:
      if ((WebCore::SecurityOrigin::isLocalHostOrLoopbackIPAddress((uint64_t)v2, v4) & 1) == 0
        && (WebCore::LegacySchemeRegistry::shouldTreatURLSchemeAsLocal(v1, (unsigned __int8 *)v3, v19, v20) & 1) == 0)
      {
        result = WebCore::LegacySchemeRegistry::schemeIsHandledBySchemeHandler((uint64_t)v1, v3);
        goto LABEL_23;
      }
LABEL_22:
      result = 1;
LABEL_23:
      *(_WORD *)((char *)this + 61) = result | 0x100;
      return result;
    }
    v6 = WebCore::schemeRegistryLock;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
LABEL_14:
      v5 = (unint64_t)&dword_1ECE90000;
        goto LABEL_15;
      goto LABEL_31;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
    goto LABEL_14;
  }
  return *((_BYTE *)this + 61) != 0;
}

uint64_t WebCore::SecurityOrigin::isSameOriginDomain(WebCore::SecurityOrigin *this, const WebCore::SecurityOrigin *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  const WTF::StringImpl **v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF **v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v27;
  WTF::URL *v28;
  _QWORD v29[2];
  char v30;
  _QWORD v31[2];
  char v32;
  char v33;
  char *v34;

  result = 1;
  if (this != a2 && !*((_BYTE *)this + 56))
  {
    v5 = *((unsigned int *)this + 8);
    if ((_DWORD)v5 == 1 || *((_DWORD *)a2 + 8) == 1)
    {
      if ((_DWORD)v5 != -1)
      {
        v29[0] = &v34;
        ((void (*)(_QWORD *__return_ptr, _QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v5])(v31, v29, (char *)this + 8);
        v25 = *((unsigned int *)a2 + 8);
        if ((_DWORD)v25 != -1)
        {
          v34 = &v33;
          ((void (*)(_QWORD *__return_ptr, char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v25])(v29, &v34, (char *)a2 + 8);
          result = (v32 != 0) == (v30 != 0);
          if (!v32 || !v30)
            return result;
          return v31[0] == v29[0] && v31[1] == v29[1];
        }
      }
    }
    else if ((_DWORD)v5 != -1)
    {
      v31[0] = v29;
      v7 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v5])(v31, (char *)this + 8);
      v8 = *((unsigned int *)a2 + 8);
      if ((_DWORD)v8 != -1)
      {
        v9 = (WTF **)v7;
        v31[0] = v29;
        v10 = (const WTF::StringImpl **)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v8])(v31, (char *)a2 + 8);
        result = WTF::equal(*v9, *v10, v11);
        if (!(_DWORD)result)
          return result;
        if (*((unsigned __int8 *)this + 57) | *((unsigned __int8 *)a2 + 57))
        {
          result = 0;
          if (!*((_BYTE *)this + 57) || !*((_BYTE *)a2 + 57))
            return result;
          if ((WTF::equal(*((WTF **)this + 5), *((const WTF::StringImpl **)a2 + 5), v12) & 1) == 0)
            return 0;
          goto LABEL_22;
        }
        v13 = *((unsigned int *)this + 8);
        if ((_DWORD)v13 != -1)
        {
          v31[0] = v29;
          v14 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v13])(v31, (char *)this + 8);
          v15 = *((unsigned int *)a2 + 8);
          if ((_DWORD)v15 != -1)
          {
            v16 = (WTF **)v14;
            v31[0] = v29;
            v17 = (const WTF::StringImpl **)((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v15])(v31, (char *)a2 + 8);
            result = WTF::equal(*v16, *v17, v18);
            if (!(_DWORD)result)
              return result;
            v19 = *((unsigned int *)this + 8);
            if ((_DWORD)v19 != -1)
            {
              v31[0] = v29;
              v20 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v19])(v31, (char *)this + 8);
              v21 = *((unsigned int *)a2 + 8);
              if ((_DWORD)v21 != -1)
              {
                v22 = v20;
                v31[0] = v29;
                v23 = ((uint64_t (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v21])(v31, (char *)a2 + 8);
                v24 = v23 & 0xFF0000;
                if ((v22 & 0xFF0000) != 0 && v24)
                {
                  if ((unsigned __int16)v22 != (unsigned __int16)v23)
                    return 0;
                }
                else if (((v22 & 0xFF0000) != 0) != (v24 != 0))
                {
                  return 0;
                }
LABEL_22:
                if (!*((_BYTE *)this + 63))
                  return 1;
                return (*((unsigned __int8 *)this + 59) | *((unsigned __int8 *)a2 + 59)) == 0;
              }
            }
          }
        }
      }
    }
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SecurityOrigin::canDisplay(v27, v28);
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::canDisplay(uint64_t a1, WTF::URL *this, uint64_t (***a3)(_QWORD, WebCore::SecurityOrigin *))
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  char v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  _BOOL4 v31;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  int v51;
  char v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  const WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  char v59;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  char v72;
  int v73;
  BOOL v76;
  char v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t *v91;
  char v92;
  WTF::StringImpl *v93;
  uint64_t v94;

  if (*(_BYTE *)(a1 + 56))
    return 1;
  if (*((_DWORD *)this + 8) > 0x4000000u)
    return 0;
  v7 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_152;
  v8 = *(_DWORD *)(v7 + 4);
  if (v8 < 4)
    goto LABEL_152;
  v9 = *(_DWORD *)(v7 + 16);
  v10 = *(unsigned __int8 **)(v7 + 8);
  if ((v9 & 4) != 0)
  {
    if (v8 == 4)
      goto LABEL_152;
    v11 = *v10;
    if ((v11 & 0xFFFFFFDF) != 0x46)
      goto LABEL_152;
    v12 = v10[1];
    if ((v12 & 0xFFFFFFDF) != 0x45)
      goto LABEL_152;
    v13 = v10[2];
    if ((v13 & 0xFFFFFFDF) != 0x45)
      goto LABEL_152;
    if (v8 < 7)
      goto LABEL_152;
    v14 = v10[3];
    if ((v14 & 0xFFFFFFDF) != 0x44)
      goto LABEL_152;
    LOBYTE(v15) = v10[4];
    if (v8 == 7)
    {
      if ((v15 & 0xDF) != 0x1A || (v10[5] & 0xDF) != 0xF)
        goto LABEL_152;
      v16 = v10[6];
LABEL_18:
      if ((v16 & 0xFFFFFFDF) != 0xF)
        goto LABEL_152;
      return 1;
    }
    if ((v15 & 0xDF) == 0x1A && (v10[5] & 0xDF) == 0xF)
    {
      v17 = v10[6];
      goto LABEL_23;
    }
  }
  else
  {
    if (v8 == 4)
      goto LABEL_152;
    v36 = *(unsigned __int16 *)v10;
    if ((v36 & 0xFFFFFFDF) != 0x46)
      goto LABEL_152;
    v37 = *((unsigned __int16 *)v10 + 1);
    if ((v37 & 0xFFFFFFDF) != 0x45)
      goto LABEL_152;
    v15 = *((unsigned __int16 *)v10 + 2);
    if ((v15 & 0xFFFFFFDF) != 0x45 || v8 < 7 || (*((_WORD *)v10 + 3) & 0xFFDF) != 0x44)
      goto LABEL_152;
    if (v8 == 7)
    {
      if ((*((_WORD *)v10 + 4) & 0xFFDF) != 0x1A || (*((_WORD *)v10 + 5) & 0xFFDF) != 0xF)
        goto LABEL_152;
      v16 = *((unsigned __int16 *)v10 + 6);
      goto LABEL_18;
    }
    v12 = v36 >> 8;
    v13 = *((_WORD *)v10 + 1);
    v14 = v37 >> 8;
    v11 = *(_WORD *)v10;
    if ((*((_WORD *)v10 + 4) & 0xFFDF) == 0x1A && (*((_WORD *)v10 + 5) & 0xFFDF) == 0xF)
    {
      v17 = *((unsigned __int16 *)v10 + 6);
LABEL_23:
      if ((v17 & 0xFFFFFFDF) == 0xF)
        return 1;
    }
  }
  if (v8 < 0xA)
    goto LABEL_152;
  if ((v9 & 4) == 0)
  {
    v27 = *(unsigned __int16 *)v10;
    if (v8 == 10)
    {
      if ((v27 & 0xFFDF) == 0x46
        && (*((_WORD *)v10 + 1) & 0xFFDF) == 0x45
        && (*((_WORD *)v10 + 2) & 0xFFDF) == 0x45
        && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
        && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x1A
        && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x48
        && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x54
        && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x54
        && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x50)
      {
        v26 = *((unsigned __int16 *)v10 + 9);
        goto LABEL_48;
      }
      goto LABEL_152;
    }
    if ((v27 & 0xFFDF) == 0x46)
    {
      if ((*((_WORD *)v10 + 1) & 0xFFDF) == 0x45)
      {
        v15 = *((unsigned __int16 *)v10 + 2);
        if ((v15 & 0xFFFFFFDF) == 0x45
          && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
          && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x1A
          && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x48
          && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x54
          && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x54
          && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x50
          && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x1A)
        {
          return 1;
        }
      }
      v78 = *((unsigned __int16 *)v10 + 1);
      if (v8 == 11)
      {
        if ((v78 & 0xFFDF) != 0x45)
          goto LABEL_152;
        if ((*((_WORD *)v10 + 2) & 0xFFDF) != 0x45
          || (*((_WORD *)v10 + 3) & 0xFFDF) != 0x44
          || (*((_WORD *)v10 + 4) & 0xFFDF) != 0x1A
          || (*((_WORD *)v10 + 5) & 0xFFDF) != 0x48
          || (*((_WORD *)v10 + 6) & 0xFFDF) != 0x54
          || (*((_WORD *)v10 + 7) & 0xFFDF) != 0x54
          || (*((_WORD *)v10 + 8) & 0xFFDF) != 0x50
          || (*((_WORD *)v10 + 9) & 0xFFDF) != 0x53
          || (*((_WORD *)v10 + 10) & 0xFFDF) != 0x1A)
        {
          if ((*((_WORD *)v10 + 2) & 0xFFDF) == 0x45
            && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
            && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x53
            && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x1A
            && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x48
            && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x54
            && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x54
            && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x50)
          {
            v26 = *((unsigned __int16 *)v10 + 10);
            goto LABEL_48;
          }
          goto LABEL_152;
        }
        return 1;
      }
      v79 = v78 & 0xFFDF;
      v13 = *((_WORD *)v10 + 1);
      v14 = v78 >> 8;
      if (v79 == 69)
      {
        if ((*((_WORD *)v10 + 2) & 0xFFDF) == 0x45
          && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
          && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x1A
          && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x48
          && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x54
          && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x54
          && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x50
          && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x53
          && (*((_WORD *)v10 + 10) & 0xFFDF) == 0x1A)
        {
          return 1;
        }
        v15 = *((unsigned __int16 *)v10 + 2);
        if ((v15 & 0xFFFFFFDF) == 0x45
          && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
          && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x53
          && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x1A
          && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x48
          && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x54
          && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x54
          && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x50
          && (*((_WORD *)v10 + 10) & 0xFFDF) == 0x1A)
        {
          return 1;
        }
      }
    }
    else if (v8 == 11)
    {
      goto LABEL_152;
    }
    if (v8 == 12)
    {
      if ((v27 & 0xFFDF) == 0x46
        && (*((_WORD *)v10 + 1) & 0xFFDF) == 0x45
        && (*((_WORD *)v10 + 2) & 0xFFDF) == 0x45
        && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
        && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x53
        && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x1A
        && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x48
        && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x54
        && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x54
        && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x50
        && (*((_WORD *)v10 + 10) & 0xFFDF) == 0x53)
      {
        v26 = *((unsigned __int16 *)v10 + 11);
        goto LABEL_48;
      }
      goto LABEL_152;
    }
    v12 = v27 >> 8;
    if ((v27 & 0xFFDF) != 0x46)
      goto LABEL_151;
    v80 = *((unsigned __int16 *)v10 + 1);
    v81 = v80 & 0xFFFFFFDF;
    v13 = *((_WORD *)v10 + 1);
    v14 = v80 >> 8;
    if (v81 != 69)
      goto LABEL_151;
    v15 = *((unsigned __int16 *)v10 + 2);
    if ((v15 & 0xFFFFFFDF) != 0x45
      || (*((_WORD *)v10 + 3) & 0xFFDF) != 0x44
      || (*((_WORD *)v10 + 4) & 0xFFDF) != 0x53
      || (*((_WORD *)v10 + 5) & 0xFFDF) != 0x1A
      || (*((_WORD *)v10 + 6) & 0xFFDF) != 0x48
      || (*((_WORD *)v10 + 7) & 0xFFDF) != 0x54
      || (*((_WORD *)v10 + 8) & 0xFFDF) != 0x54
      || (*((_WORD *)v10 + 9) & 0xFFDF) != 0x50
      || (*((_WORD *)v10 + 10) & 0xFFDF) != 0x53)
    {
      goto LABEL_151;
    }
    v38 = *((unsigned __int16 *)v10 + 11);
LABEL_148:
    if ((v38 & 0xFFFFFFDF) == 0x1A)
      return 1;
    goto LABEL_151;
  }
  v18 = v12 & 0xFFFFFFDF;
  v19 = (v11 & 0xFFFFFFDF) == 0x46 && v18 == 69;
  v20 = v13 & 0xFFFFFFDF;
  v21 = v19 && v20 == 69;
  v22 = v14 & 0xFFFFFFDF;
  v25 = v21 && v22 == 68 && (v15 & 0xDF) == 26;
  if (v8 == 10)
  {
    if ((v25 & 1) != 0
      && (v10[5] & 0xDF) == 0x48
      && (v10[6] & 0xDF) == 0x54
      && (v10[7] & 0xDF) == 0x54
      && (v10[8] & 0xDF) == 0x50)
    {
      v26 = v10[9];
      goto LABEL_48;
    }
    goto LABEL_152;
  }
  if ((v25 & 1) != 0
    && (v10[5] & 0xDF) == 0x48
    && (v10[6] & 0xDF) == 0x54
    && (v10[7] & 0xDF) == 0x54
    && (v10[8] & 0xDF) == 0x50
    && (v10[9] & 0xDF) == 0x1A)
  {
    return 1;
  }
  LOBYTE(v27) = *v10;
  if (v8 == 11)
  {
    if ((*v10 & 0xDF) != 0x46 || v18 != 69)
      goto LABEL_152;
    v28 = v20 == 69 && v22 == 68;
    v29 = v28;
    if (!v28
      || (v15 & 0xDF) != 0x1A
      || (v10[5] & 0xDF) != 0x48
      || (v10[6] & 0xDF) != 0x54
      || (v10[7] & 0xDF) != 0x54
      || (v10[8] & 0xDF) != 0x50
      || (v10[9] & 0xDF) != 0x53
      || (v10[10] & 0xDF) != 0x1A)
    {
      if ((v15 & 0xDF) != 0x53)
        v29 = 0;
      if (v29 == 1
        && (v10[5] & 0xDF) == 0x1A
        && (v10[6] & 0xDF) == 0x48
        && (v10[7] & 0xDF) == 0x54
        && (v10[8] & 0xDF) == 0x54
        && (v10[9] & 0xDF) == 0x50)
      {
        v26 = v10[10];
        goto LABEL_48;
      }
      goto LABEL_152;
    }
    return 1;
  }
  if ((*v10 & 0xDF) == 0x46)
  {
    if (v18 == 69)
    {
      v30 = v20 == 69 && v22 == 68;
      v31 = v30;
      if (v30
        && (v15 & 0xDF) == 0x1A
        && (v10[5] & 0xDF) == 0x48
        && (v10[6] & 0xDF) == 0x54
        && (v10[7] & 0xDF) == 0x54
        && (v10[8] & 0xDF) == 0x50
        && (v10[9] & 0xDF) == 0x53
        && (v10[10] & 0xDF) == 0x1A)
      {
        return 1;
      }
      if ((v15 & 0xDF) != 0x53)
        v31 = 0;
      if (v31
        && (v10[5] & 0xDF) == 0x1A
        && (v10[6] & 0xDF) == 0x48
        && (v10[7] & 0xDF) == 0x54
        && (v10[8] & 0xDF) == 0x54
        && (v10[9] & 0xDF) == 0x50
        && (v10[10] & 0xDF) == 0x1A)
      {
        return 1;
      }
    }
    v35 = v18 == 69 && v20 == 69 && v22 == 68 && (v15 & 0xDF) == 83;
    if (v8 == 12)
    {
      if (v35
        && (v10[5] & 0xDF) == 0x1A
        && (v10[6] & 0xDF) == 0x48
        && (v10[7] & 0xDF) == 0x54
        && (v10[8] & 0xDF) == 0x54
        && (v10[9] & 0xDF) == 0x50
        && (v10[10] & 0xDF) == 0x53)
      {
        v26 = v10[11];
        goto LABEL_48;
      }
      goto LABEL_152;
    }
    if (!v35
      || (v10[5] & 0xDF) != 0x1A
      || (v10[6] & 0xDF) != 0x48
      || (v10[7] & 0xDF) != 0x54
      || (v10[8] & 0xDF) != 0x54
      || (v10[9] & 0xDF) != 0x50
      || (v10[10] & 0xDF) != 0x53)
    {
      goto LABEL_151;
    }
    v38 = v10[11];
    goto LABEL_148;
  }
  if (v8 == 12)
    goto LABEL_152;
LABEL_151:
  if (v8 < 0x10)
    goto LABEL_152;
  if ((v9 & 4) != 0)
  {
    if (v8 == 16)
    {
      if ((v27 & 0xDF) == 0x46
        && (v12 & 0xFFFFFFDF) == 0x45
        && (v13 & 0xFFFFFFDF) == 0x45
        && (v14 & 0xFFFFFFDF) == 0x44
        && (v15 & 0xDF) == 0x53
        && (v10[5] & 0xDF) == 0x45
        && (v10[6] & 0xDF) == 0x41
        && (v10[7] & 0xDF) == 0x52
        && (v10[8] & 0xDF) == 0x43
        && (v10[9] & 0xDF) == 0x48
        && (v10[10] & 0xDF) == 0x1A
        && (v10[11] & 0xDF) == 0x48
        && (v10[12] & 0xDF) == 0x54
        && (v10[13] & 0xDF) == 0x54
        && (v10[14] & 0xDF) == 0x50)
      {
        v26 = v10[15];
        goto LABEL_48;
      }
      goto LABEL_152;
    }
    if ((v27 & 0xDF) != 0x46)
      goto LABEL_152;
    v76 = (v12 & 0xFFFFFFDF) == 0x45 && (v13 & 0xFFFFFFDF) == 69 && (v14 & 0xFFFFFFDF) == 68 && (v15 & 0xDF) == 83;
    v77 = v76;
    if (!v76
      || (v10[5] & 0xDF) != 0x45
      || (v10[6] & 0xDF) != 0x41
      || (v10[7] & 0xDF) != 0x52
      || (v10[8] & 0xDF) != 0x43
      || (v10[9] & 0xDF) != 0x48
      || (v10[10] & 0xDF) != 0x1A
      || (v10[11] & 0xDF) != 0x48
      || (v10[12] & 0xDF) != 0x54
      || (v10[13] & 0xDF) != 0x54
      || (v10[14] & 0xDF) != 0x50
      || (v10[15] & 0xDF) != 0x1A)
    {
      if (v8 == 17)
      {
        if ((v77 & 1) == 0
          || (v10[5] & 0xDF) != 0x45
          || (v10[6] & 0xDF) != 0x41
          || (v10[7] & 0xDF) != 0x52
          || (v10[8] & 0xDF) != 0x43
          || (v10[9] & 0xDF) != 0x48
          || (v10[10] & 0xDF) != 0x1A
          || (v10[11] & 0xDF) != 0x48
          || (v10[12] & 0xDF) != 0x54
          || (v10[13] & 0xDF) != 0x54
          || (v10[14] & 0xDF) != 0x50
          || (v10[15] & 0xDF) != 0x53)
        {
          goto LABEL_152;
        }
      }
      else if ((v77 & 1) == 0
             || (v10[5] & 0xDF) != 0x45
             || (v10[6] & 0xDF) != 0x41
             || (v10[7] & 0xDF) != 0x52
             || (v10[8] & 0xDF) != 0x43
             || (v10[9] & 0xDF) != 0x48
             || (v10[10] & 0xDF) != 0x1A
             || (v10[11] & 0xDF) != 0x48
             || (v10[12] & 0xDF) != 0x54
             || (v10[13] & 0xDF) != 0x54
             || (v10[14] & 0xDF) != 0x50
             || (v10[15] & 0xDF) != 0x53)
      {
        goto LABEL_152;
      }
      v26 = v10[16];
      goto LABEL_48;
    }
    return 1;
  }
  v87 = *(_WORD *)v10 & 0xFFDF;
  if (v8 != 16)
  {
    if (v87 != 70)
      goto LABEL_152;
    if ((*((_WORD *)v10 + 1) & 0xFFDF) != 0x45
      || (*((_WORD *)v10 + 2) & 0xFFDF) != 0x45
      || (*((_WORD *)v10 + 3) & 0xFFDF) != 0x44
      || (*((_WORD *)v10 + 4) & 0xFFDF) != 0x53
      || (*((_WORD *)v10 + 5) & 0xFFDF) != 0x45
      || (*((_WORD *)v10 + 6) & 0xFFDF) != 0x41
      || (*((_WORD *)v10 + 7) & 0xFFDF) != 0x52
      || (*((_WORD *)v10 + 8) & 0xFFDF) != 0x43
      || (*((_WORD *)v10 + 9) & 0xFFDF) != 0x48
      || (*((_WORD *)v10 + 10) & 0xFFDF) != 0x1A
      || (*((_WORD *)v10 + 11) & 0xFFDF) != 0x48
      || (*((_WORD *)v10 + 12) & 0xFFDF) != 0x54
      || (*((_WORD *)v10 + 13) & 0xFFDF) != 0x54
      || (*((_WORD *)v10 + 14) & 0xFFDF) != 0x50
      || (*((_WORD *)v10 + 15) & 0xFFDF) != 0x1A)
    {
      v90 = *((_WORD *)v10 + 1) & 0xFFDF;
      if (v8 != 17)
        goto LABEL_444;
      if (v90 == 69
        && (*((_WORD *)v10 + 2) & 0xFFDF) == 0x45
        && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
        && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x53
        && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x45
        && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x41
        && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x52
        && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x43
        && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x48
        && (*((_WORD *)v10 + 10) & 0xFFDF) == 0x1A
        && (*((_WORD *)v10 + 11) & 0xFFDF) == 0x48
        && (*((_WORD *)v10 + 12) & 0xFFDF) == 0x54
        && (*((_WORD *)v10 + 13) & 0xFFDF) == 0x54
        && (*((_WORD *)v10 + 14) & 0xFFDF) == 0x50
        && (*((_WORD *)v10 + 15) & 0xFFDF) == 0x53)
      {
        goto LABEL_459;
      }
      goto LABEL_152;
    }
    return 1;
  }
  if (v87 == 70
    && (*((_WORD *)v10 + 1) & 0xFFDF) == 0x45
    && (*((_WORD *)v10 + 2) & 0xFFDF) == 0x45
    && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
    && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x53
    && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x45
    && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x41
    && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x52
    && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x43
    && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x48
    && (*((_WORD *)v10 + 10) & 0xFFDF) == 0x1A
    && (*((_WORD *)v10 + 11) & 0xFFDF) == 0x48
    && (*((_WORD *)v10 + 12) & 0xFFDF) == 0x54
    && (*((_WORD *)v10 + 13) & 0xFFDF) == 0x54
    && (*((_WORD *)v10 + 14) & 0xFFDF) == 0x50)
  {
    v26 = *((unsigned __int16 *)v10 + 15);
    goto LABEL_48;
  }
  while (1)
  {
LABEL_152:
    v41 = (WTF::StringImpl *)WTF::URL::protocol(this);
    v43 = v42;
    v93 = v41;
    v94 = v42;
    if (!v41)
    {
LABEL_174:
      if (!WebCore::localLoadPolicy)
        return 1;
      v54 = (WTF::StringImpl *)WTF::URL::protocolIs();
      if (!(_DWORD)v54)
        goto LABEL_180;
      WTF::URL::fileSystemPath(this);
      v59 = WTF::equal(v93, *(const WTF::StringImpl **)(a1 + 48), v57);
      v54 = v93;
      v93 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          v54 = (WTF::StringImpl *)WTF::StringImpl::destroy(v54, v58);
          if ((v59 & 1) != 0)
            return 1;
LABEL_180:
          v93 = v41;
          v94 = v43;
          if (!v41)
            return 1;
          if (__ldaxr(WebCore::schemeRegistryLock))
          {
            __clrex();
          }
          else if (!__stxr(1u, WebCore::schemeRegistryLock))
          {
            goto LABEL_200;
          }
          v54 = (WTF::StringImpl *)MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_200:
          {
            v91 = WebCore::builtinLocalURLSchemes(v54);
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(&WebCore::localURLSchemes(void)::localSchemes, (WTF::ASCIICaseInsensitiveHash **)v91);
          }
          v71 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::localURLSchemes(void)::localSchemes, (unsigned __int8 **)&v93, v55, v56);
          v72 = v71;
          v73 = __ldxr(WebCore::schemeRegistryLock);
          if (v73 == 1)
          {
            if (!__stlxr(0, WebCore::schemeRegistryLock))
            {
              if (!v71)
                return 1;
LABEL_208:
              if (!*(_BYTE *)(a1 + 58))
                return WebCore::SecurityPolicy::isAccessAllowed(a1, this, a3);
              return 1;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
          if ((v72 & 1) == 0)
            return 1;
          goto LABEL_208;
        }
        *(_DWORD *)v54 -= 2;
      }
      if ((v59 & 1) != 0)
        return 1;
      goto LABEL_180;
    }
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_157;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_157:
    {
      WebCore::canDisplayOnlyIfCanRequestSchemes(void)::canDisplayOnlyIfCanRequestSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinCanDisplayOnlyIfCanRequestSchemes);
    }
    v45 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::canDisplayOnlyIfCanRequestSchemes(void)::canDisplayOnlyIfCanRequestSchemes, (unsigned __int8 **)&v93, v39, v40);
    v48 = v45;
    v49 = __ldxr(WebCore::schemeRegistryLock);
    if (v49 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
      {
        if (v45)
          return WebCore::SecurityOrigin::canRequest(a1, this, (uint64_t (***)(_QWORD, uint64_t))a3);
        goto LABEL_162;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v48 & 1) != 0)
      return WebCore::SecurityOrigin::canRequest(a1, this, (uint64_t (***)(_QWORD, uint64_t))a3);
LABEL_162:
    v93 = v41;
    v94 = v43;
    if (__ldaxr(WebCore::schemeRegistryLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::schemeRegistryLock))
    {
      goto LABEL_169;
    }
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_169:
    {
      WebCore::displayIsolatedURLSchemes(void)::displayIsolatedSchemes = 0;
    }
    v51 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::displayIsolatedURLSchemes(void)::displayIsolatedSchemes, (unsigned __int8 **)&v93, v46, v47);
    v52 = v51;
    v53 = __ldxr(WebCore::schemeRegistryLock);
    if (v53 == 1)
    {
      if (!__stlxr(0, WebCore::schemeRegistryLock))
      {
        if (!v51)
          goto LABEL_174;
        goto LABEL_185;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v52 & 1) == 0)
      goto LABEL_174;
LABEL_185:
    v61 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v61 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_444:
    if (v90 == 69
      && (*((_WORD *)v10 + 2) & 0xFFDF) == 0x45
      && (*((_WORD *)v10 + 3) & 0xFFDF) == 0x44
      && (*((_WORD *)v10 + 4) & 0xFFDF) == 0x53
      && (*((_WORD *)v10 + 5) & 0xFFDF) == 0x45
      && (*((_WORD *)v10 + 6) & 0xFFDF) == 0x41
      && (*((_WORD *)v10 + 7) & 0xFFDF) == 0x52
      && (*((_WORD *)v10 + 8) & 0xFFDF) == 0x43
      && (*((_WORD *)v10 + 9) & 0xFFDF) == 0x48
      && (*((_WORD *)v10 + 10) & 0xFFDF) == 0x1A
      && (*((_WORD *)v10 + 11) & 0xFFDF) == 0x48
      && (*((_WORD *)v10 + 12) & 0xFFDF) == 0x54
      && (*((_WORD *)v10 + 13) & 0xFFDF) == 0x54
      && (*((_WORD *)v10 + 14) & 0xFFDF) == 0x50
      && (*((_WORD *)v10 + 15) & 0xFFDF) == 0x53)
    {
LABEL_459:
      v26 = *((unsigned __int16 *)v10 + 16);
LABEL_48:
      if ((v26 & 0xFFFFFFDF) == 0x1A)
        return 1;
    }
  }
  v93 = (WTF::StringImpl *)&v92;
  v62 = *(_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v61])(&v93, a1 + 8);
  if (v62)
  {
    v63 = *(unsigned __int8 **)(v62 + 8);
    v64 = *(unsigned int *)(v62 + 4) | ((unint64_t)((*(_DWORD *)(v62 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v63 = 0;
    v64 = 0x100000000;
  }
  if ((_DWORD)v64 != (_DWORD)v43)
    return WebCore::SecurityPolicy::isAccessAllowed(a1, this, a3);
  v65 = v43 & 0xFF00000000;
  v66 = v64;
  if ((v64 & 0x100000000) != 0)
  {
    if (v65)
    {
      if (!(_DWORD)v64)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v63) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                  + *(unsigned __int8 *)v41))
      {
        v67 = 1;
        do
        {
          v68 = v67;
          if (v66 == v67)
            break;
          v69 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v63[v67]);
          v70 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v41 + v67++));
        }
        while (v69 == v70);
LABEL_196:
        if (v68 >= v66)
          return 1;
      }
      return WebCore::SecurityPolicy::isAccessAllowed(a1, this, a3);
    }
    if ((_DWORD)v64)
    {
      if ((*(unsigned __int16 *)v41 | (32 * (*(unsigned __int16 *)v41 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v63))
      {
        v84 = 1;
        do
        {
          v68 = v84;
          if (v66 == v84)
            break;
          v85 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v63[v84]);
          v86 = *((unsigned __int16 *)v41 + v84) | (32 * (*((unsigned __int16 *)v41 + v84) - 65 < 0x1A));
          ++v84;
        }
        while (v86 == v85);
        goto LABEL_196;
      }
      return WebCore::SecurityPolicy::isAccessAllowed(a1, this, a3);
    }
  }
  else if (v65)
  {
    if ((_DWORD)v64)
    {
      if ((*(unsigned __int16 *)v63 | (32 * (*(unsigned __int16 *)v63 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v41))
      {
        v82 = 1;
        do
        {
          v68 = v82;
          if (v66 == v82)
            break;
          v83 = *(unsigned __int16 *)&v63[2 * v82] | (32 * (*(unsigned __int16 *)&v63[2 * v82] - 65 < 0x1A));
          ++v82;
        }
        while (v83 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v41 + v68)));
        goto LABEL_196;
      }
      return WebCore::SecurityPolicy::isAccessAllowed(a1, this, a3);
    }
  }
  else if ((_DWORD)v64)
  {
    if ((*(unsigned __int16 *)v63 | (32 * (*(unsigned __int16 *)v63 - 65 < 0x1A))) == (*(unsigned __int16 *)v41 | (32 * (*(unsigned __int16 *)v41 - 65 < 0x1A))))
    {
      v88 = 1;
      do
      {
        v68 = v88;
        if (v66 == v88)
          break;
        v89 = *(unsigned __int16 *)&v63[2 * v88] | (32 * (*(unsigned __int16 *)&v63[2 * v88] - 65 < 0x1A));
        ++v88;
      }
      while (v89 == (*((unsigned __int16 *)v41 + v68) | (32
                                                        * (*((unsigned __int16 *)v41 + v68) - 65 < 0x1A))));
      goto LABEL_196;
    }
    return WebCore::SecurityPolicy::isAccessAllowed(a1, this, a3);
  }
  return 1;
}

uint64_t WebCore::foundMixedContentInFrameTree(WebCore *this, const WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  WebCore::Node *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  WebCore::SecurityOrigin *v30;
  const WTF::URL *v31;
  WebCore::Node *v32;
  char v33;
  char *v34;

  if (!this)
    return 0;
  v4 = this;
  *((_DWORD *)this + 6) += 2;
  v32 = this;
  while (1)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Node *)((char *)v4 + 192), a2);
    v6 = *(unsigned int *)(v5 + 32);
    if ((_DWORD)v6 == -1)
    {
      v30 = (WebCore::SecurityOrigin *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::SecurityOrigin::isSecure(v30, v31);
    }
    v34 = &v33;
    v7 = (_QWORD *)((uint64_t (*)(char **, uint64_t))off_1E33F6980[v6])(&v34, v5 + 8);
    if ((MEMORY[0x19AEA53F4](*v7, "https", 5) & 1) != 0
      || (WebCore::SecurityContext::securityOrigin((WebCore::Node *)((char *)v4 + 192), a2), *(_DWORD *)(v8 + 32) == 1)
      && WTF::URL::protocolIs())
    {
      if ((WebCore::SecurityOrigin::isSecure(a2, a2) & 1) == 0)
        break;
    }
    v4 = v32;
    v9 = *((_QWORD *)v32 + 66);
    if (!v9 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
    {
      v24 = 0;
      v32 = 0;
      goto LABEL_28;
    }
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 128) + 8);
    if (v13 != v10)
    {
      v14 = *(_QWORD *)(v10 + 56);
      if (!v14 || (v15 = *(_QWORD *)(v14 + 8)) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19416FB4CLL);
      }
      v16 = (unsigned int *)(v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      if (*(_BYTE *)(v15 + 144))
      {
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v32);
      }
      else
      {
        v18 = *(WebCore::Node **)(v15 + 296);
        if (v18)
          *((_DWORD *)v18 + 6) += 2;
        v19 = v32;
        v32 = v18;
        if (v19)
        {
          if (*((_DWORD *)v19 + 6) == 2)
          {
            if ((*((_WORD *)v19 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v19);
          }
          else
          {
            *((_DWORD *)v19 + 6) -= 2;
          }
        }
      }
      do
      {
        v20 = __ldaxr(v16);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v16));
      if (!v21)
      {
        atomic_store(1u, v16);
        v28 = (char *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v28 = off_1E31FE290;
        *((_QWORD *)v28 + 1) = v16;
        v34 = v28;
        WTF::ensureOnMainThread();
        v29 = v34;
        v34 = 0;
        if (v29)
          (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
      }
    }
    do
    {
      v22 = __ldaxr(v11);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v11));
    if (!v23)
    {
      atomic_store(1u, v11);
      v26 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v26 = off_1E31FE290;
      *((_QWORD *)v26 + 1) = v11;
      v34 = v26;
      WTF::ensureOnMainThread();
      v27 = v34;
      v34 = 0;
      if (v27)
        (*(void (**)(char *))(*(_QWORD *)v27 + 8))(v27);
    }
    v24 = 0;
    v4 = v32;
    if (v13 == v10 || !v32)
      goto LABEL_27;
  }
  v24 = 1;
  v4 = v32;
LABEL_27:
  v32 = 0;
  if (!v4)
    return v24;
LABEL_28:
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return v24;
}

uint64_t WebCore::SecurityOrigin::isSecure(WebCore::SecurityOrigin *this, const WTF::URL *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  int v9;
  uint64_t result;
  const WTF::URL *v11;
  unsigned __int8 *v12[2];

  if ((*((_BYTE *)this + 8) & 1) == 0)
    return 1;
  v12[0] = (unsigned __int8 *)WTF::URL::protocol(this);
  v12[1] = v3;
  if (!v12[0])
    goto LABEL_16;
  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::schemeRegistryLock))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](WebCore::schemeRegistryLock);
LABEL_7:
  {
    WebCore::secureSchemes(void)::secureSchemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinSecureSchemes);
  }
  v7 = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::secureSchemes(void)::secureSchemes, v12, v4, v5);
  v8 = v7;
  v9 = __ldxr(WebCore::schemeRegistryLock);
  if (v9 != 1)
  {
    __clrex();
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
    if ((v8 & 1) != 0)
      return 1;
    goto LABEL_16;
  }
  if (__stlxr(0, WebCore::schemeRegistryLock))
    goto LABEL_15;
  if ((v7 & 1) != 0)
    return 1;
LABEL_16:
  result = WTF::URL::protocolIs();
  if ((_DWORD)result)
    return WebCore::BlobURL::isSecureBlobURL(this, v11);
  return result;
}

uint64_t WebCore::HeaderFieldTokenizer::consume(unsigned int *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v13;

  v2 = *((_QWORD *)a1 + 1);
  if (!v2)
    return 0;
  v3 = *a1;
  v4 = *(unsigned int *)(v2 + 4);
  if (v3 >= v4)
    return 0;
  v5 = *(_DWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 8);
  v7 = (v5 & 4) != 0 ? *(unsigned __int8 *)(v6 + v3) : *(unsigned __int16 *)(v6 + 2 * v3);
  if (v7 != a2)
    return 0;
  v8 = v3 + 1;
  *a1 = v3 + 1;
  if ((int)v3 + 1 < v4)
  {
    if ((v5 & 4) != 0)
    {
      do
      {
        if (v4 == v8)
          break;
        v9 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 8) + v8);
        if (v9 != 32 && v9 != 9)
          break;
        ++v8;
        *a1 = v3 + 2;
        LODWORD(v3) = v3 + 1;
      }
      while ((_DWORD)v4 - 1 != (_DWORD)v3);
    }
    else
    {
      while (v4 != v8)
      {
        v13 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 8) + 2 * v8);
        if (v13 != 32 && v13 != 9)
          break;
        ++v8;
        *a1 = v3 + 2;
        LODWORD(v3) = v3 + 1;
        v11 = 1;
        if ((_DWORD)v4 - 1 == (_DWORD)v3)
          return v11;
      }
    }
  }
  return 1;
}

void WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue::~KeyValue(WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::CachedResourceLoader::allowedByContentSecurityPolicy(uint64_t a1, int a2, WTF::URL *a3, _BYTE *a4, char a5, WTF::URL *a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;
  int v20;

  if ((a4[115] & 1) == 0)
    return 1;
  v6 = *(_QWORD *)(a1 + 72);
  if (!v6)
    return 1;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return 1;
  *(_DWORD *)(v7 + 24) += 2;
  v13 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v7 + 192));
  if (v13)
  {
    v14 = v13;
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
    if ((a4[116] & 0x80) != 0
      && !WebCore::ContentSecurityPolicy::allowObjectFromSource((uint64_t)v13, a3, a5, a6))
    {
      goto LABEL_29;
    }
    if (a2 != 1)
    {
      v20 = a2 - 2;
      v16 = 1;
      switch(v20)
      {
        case 0:
          if ((WebCore::ContentSecurityPolicy::allowStyleFromSource((uint64_t)v14, a3, a5, a6) & 1) == 0)
            goto LABEL_29;
          goto LABEL_10;
        case 1:
        case 10:
          if ((WebCore::ContentSecurityPolicy::allowScriptFromSource((uint64_t)v14, a3, a5, a6, (const WTF::String *)(a4 + 8)) & 1) == 0)goto LABEL_29;
          goto LABEL_10;
        case 2:
        case 3:
          if ((WebCore::ContentSecurityPolicy::allowFontFromSource((uint64_t)v14, a3, a5, a6) & 1) == 0)
            goto LABEL_29;
          goto LABEL_10;
        case 4:
        case 12:
          if ((WebCore::ContentSecurityPolicy::allowMediaFromSource((uint64_t)v14, a3, a5, a6) & 1) == 0)
            goto LABEL_29;
          goto LABEL_10;
        case 5:
        case 6:
        case 8:
        case 9:
          goto LABEL_11;
        case 7:
        case 14:
          goto LABEL_9;
        case 11:
          if ((WebCore::ContentSecurityPolicy::allowPrefetchFromSource((uint64_t)v14, a3, a5, a6) & 1) == 0)
            goto LABEL_29;
          goto LABEL_10;
        case 13:
          if (!WebCore::ContentSecurityPolicy::allowManifestFromSource((uint64_t)v14, a3, a5, a6))
            goto LABEL_29;
          goto LABEL_10;
        default:
          goto LABEL_10;
      }
      goto LABEL_11;
    }
LABEL_9:
    if ((WebCore::ContentSecurityPolicy::allowResourceFromSource((uint64_t)v14, a3, a5, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForImage, 0, a6) & 1) != 0)LABEL_10:v16 = 1;
    else
LABEL_29:
      v16 = 0;
LABEL_11:
    if (!atomic_load(v14))
    {
      __break(0xC471u);
      JUMPOUT(0x194170044);
    }
    do
      v18 = __ldaxr(v14);
    while (__stlxr(v18 - 1, v14));
    goto LABEL_13;
  }
  v16 = 1;
LABEL_13:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v16;
}

WTF::StringImpl *WebCore::HeaderFieldTokenizer::consumeQuotedString@<X0>(WebCore::HeaderFieldTokenizer *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t i;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  char v31;
  __int16 v32;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  v4 = *(_DWORD *)this;
  v5 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v5;
  for (i = *((_QWORD *)this + 1); i; i = *((_QWORD *)this + 1))
  {
    v8 = *(_DWORD *)(i + 4);
    if (v5 >= v8)
      break;
    v9 = *(_DWORD *)(i + 16);
    v10 = *(_QWORD *)(i + 8);
    if ((v9 & 4) != 0)
      v11 = *(unsigned __int8 *)(v10 + v5);
    else
      v11 = *(unsigned __int16 *)(v10 + 2 * v5);
    if (v11 == 34)
    {
      v18 = v28;
      if (v28
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v28),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v28),
            (v18 = v28) != 0))
      {
        *(_DWORD *)v18 += 2;
      }
      *a3 = v18;
      v19 = *(_DWORD *)this;
      v20 = (*(_DWORD *)this + 1);
      *(_DWORD *)this = v20;
      v21 = *((_QWORD *)this + 1);
      if (v21)
      {
        v22 = *(unsigned int *)(v21 + 4);
        if (v20 < v22)
        {
          do
          {
            if (v22 == v20)
              break;
            v23 = *(_QWORD *)(v21 + 8);
            v24 = (*(_BYTE *)(v21 + 16) & 4) != 0
                ? *(unsigned __int8 *)(v23 + v20)
                : *(unsigned __int16 *)(v23 + 2 * v20);
            if (v24 != 32 && v24 != 9)
              break;
            ++v20;
            *(_DWORD *)this = v19 + 2;
            ++v19;
          }
          while ((_DWORD)v22 - 1 != v19);
        }
      }
      goto LABEL_43;
    }
    if (v11 == 92)
    {
      v5 = v4 + 2;
      *(_DWORD *)this = v4 + 2;
      if (v4 + 2 >= v8)
        break;
    }
    if (v8 <= v5)
    {
      v13 = 0;
    }
    else
    {
      v12 = *(_QWORD *)(i + 8);
      if ((v9 & 4) != 0)
        v13 = *(unsigned __int8 *)(v12 + v5);
      else
        v13 = *(unsigned __int16 *)(v12 + 2 * v5);
    }
    v32 = v13;
    if (v29)
    {
      v14 = v30;
      if (v30 < *((_DWORD *)v29 + 1) && v28 == 0)
      {
        if ((*((_BYTE *)v29 + 16) & 4) == 0)
        {
          v16 = *((_QWORD *)v29 + 1);
          ++v30;
          *(_WORD *)(v16 + 2 * v14) = v13;
          goto LABEL_17;
        }
        if (v13 <= 0xFF)
        {
          v17 = *((_QWORD *)v29 + 1);
          ++v30;
          *(_BYTE *)(v17 + v14) = v13;
          goto LABEL_17;
        }
      }
    }
    WTF::StringBuilder::append();
LABEL_17:
    v4 = *(_DWORD *)this;
    v5 = *(_DWORD *)this + 1;
    *(_DWORD *)this = v5;
  }
  *a3 = 0;
LABEL_43:
  v26 = v29;
  v29 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SecurityOrigin::host(WebCore::SecurityOrigin *this)
{
  uint64_t v1;
  uint64_t v3;
  const WTF::String *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::HeaderFieldTokenizer::HeaderFieldTokenizer(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, char *))off_1E33F32F0[v1])(&v6, (char *)this + 8);
  }
}

uint64_t WebCore::HeaderFieldTokenizer::HeaderFieldTokenizer(uint64_t this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  uint64_t j;
  int v8;

  *(_DWORD *)this = 0;
  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v3 = *(unsigned int *)(v2 + 4);
    *(_DWORD *)v2 += 2;
    *(_QWORD *)(this + 8) = v2;
    if ((_DWORD)v3)
    {
      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
      {
        for (i = 0; i != v3; *(_DWORD *)this = i)
        {
          v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 8) + i);
          if (v5 != 32 && v5 != 9)
            break;
          ++i;
        }
      }
      else
      {
        for (j = 0; j != v3; *(_DWORD *)this = j)
        {
          v8 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 8) + 2 * j);
          if (v8 != 32 && v8 != 9)
            break;
          ++j;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(this + 8) = 0;
  }
  return this;
}

uint64_t WebCore::ContentSecurityPolicy::allowFontFromSource(uint64_t a1, WTF::URL *a2, unsigned __int8 a3, WTF::URL *a4)
{
  return WebCore::ContentSecurityPolicy::allowResourceFromSource(a1, a2, a3, (uint64_t)WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFont, 0, a4);
}

uint64_t WebCore::SecurityOriginData::opaqueOriginIdentifier(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::MixedContentChecker::frameAndAncestorsCanRunInsecureContent(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData22opaqueOriginIdentifierEvEUlRKNS9_5TupleEE_JZNKS9_22opaqueOriginIdentifierEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WebCore::MixedContentChecker::frameAndAncestorsCanRunInsecureContent(uint64_t a1, WebCore::Document *a2, const WebCore::LocalFrame *a3, int a4)
{
  WebCore *v5;
  const WTF::URL *v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(WebCore **)(a1 + 296);
  if (!v5
    || (WebCore::isUpgradeMixedContentEnabled(v5, a2) & 1) != 0
    || !WebCore::foundMixedContentInFrameTree(*(WebCore **)(a1 + 296), a3, v9))
  {
    return 1;
  }
  v12 = *(_QWORD *)(a1 + 296);
  if (v12)
    *(_DWORD *)(v12 + 24) += 2;
  v13 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v12 + 192));
  if (v13)
  {
    v14 = v13;
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
    v16 = WebCore::ContentSecurityPolicy::allowRunningOrDisplayingInsecureContent((WebCore::ContentSecurityPolicy *)v13, a3);
    if (!atomic_load(v14))
      goto LABEL_31;
    do
      v18 = __ldaxr(v14);
    while (__stlxr(v18 - 1, v14));
    if (v16)
      goto LABEL_14;
LABEL_26:
    v10 = 0;
    if (!v12)
      return v10;
    goto LABEL_27;
  }
  if ((WebCore::ContentSecurityPolicy::allowRunningOrDisplayingInsecureContent(0, a3) & 1) == 0)
    goto LABEL_26;
LABEL_14:
  v19 = !*(_BYTE *)(v12 + 277)
     && (*(_QWORD *)(*(_QWORD *)(a1 + 136) + 664) & 0x40000) != 0
     && (v21 = *(_QWORD *)(a1 + 296), !*(_BYTE *)(v21 + 275))
     && *(unsigned __int8 *)(v21 + 276) == 0;
  if (a4 == 1)
    WebCore::logConsoleWarning(a1, v19, (int8x16_t *)"run", 4, a3);
  if (v19)
  {
    *(_BYTE *)(v12 + 273) |= 2u;
    v20 = *(_QWORD *)(a1 + 280);
    ++*(_DWORD *)v20;
    (*(void (**)(_QWORD, WebCore::Document *))(**(_QWORD **)(v20 + 16) + 560))(*(_QWORD *)(v20 + 16), a2);
    if (*(_DWORD *)v20)
    {
      --*(_DWORD *)v20;
      v10 = 1;
      goto LABEL_27;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x1941705F0);
  }
  v10 = 0;
LABEL_27:
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  return v10;
}

uint64_t WebCore::SecurityOrigin::port(WebCore::SecurityOrigin *this)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 8);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CredentialBase::CredentialBase(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, char *))off_1E33F7670[v1])(&v5, (char *)this + 8);
  }
}

uint64_t WebCore::CredentialBase::CredentialBase(uint64_t this)
{
  _DWORD **v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = (_DWORD **)MEMORY[0x1E0CBF738];
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *(_QWORD *)this = v2;
  v3 = *v1;
  if (v3)
    *v3 += 2;
  *(_QWORD *)(this + 8) = v3;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

{
  _DWORD **v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = (_DWORD **)MEMORY[0x1E0CBF738];
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *(_QWORD *)this = v2;
  v3 = *v1;
  if (v3)
    *v3 += 2;
  *(_QWORD *)(this + 8) = v3;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t WebCore::RenderLayerBacking::updateClippingStackLayerGeometry(WebCore::RenderLayer **this, WebCore::LayerAncestorClippingStack *a2, const WebCore::RenderLayer *a3, WebCore::LayoutRect *a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  WebCore::RenderView *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  const WebCore::LayoutRect *v26;
  const WebCore::RenderLayerModelObject *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double v32;
  unsigned int v33;
  double v34;
  uint64_t v35;
  double v36;
  unsigned int v37;
  double v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::RenderLayerCompositor *v56;
  WebCore::RenderLayerCompositor *v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v63;
  uint64_t v64;
  int32x4_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x2_t v71;

  v7 = WebCore::RenderLayer::convertToLayerCoords(this[1], a3, 0, 1);
  v8 = *(_DWORD *)a4;
  v9 = *((unsigned int *)a4 + 1);
  v10 = *((_QWORD *)a4 + 1);
  v11 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[1] + 4) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  result = *((_QWORD *)v11 + 50);
  v63 = v7;
  if (!result)
  {
    v56 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v56, v11);
    v57 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v11 + 50);
    *((_QWORD *)v11 + 50) = result;
    if (v57)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v57);
      WTF::fastFree(v58, v59);
      result = *((_QWORD *)v11 + 50);
    }
    v7 = v63;
  }
  v13 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 24) + 8)
                                                                                           + 40)
                                                                               + 8)
                                                                   + 528)
                                                       + 8)
                                           + 24)
                               + 8)
                   + 364);
    v66 = *(_QWORD *)a2;
    v60 = 96 * v13;
    v61 = HIDWORD(v7);
    v67 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    while (1)
    {
      v17 = *(_DWORD *)(v66 + v14 + 8);
      v16 = *(_DWORD *)(v66 + v14 + 12);
      v18 = *(_QWORD *)(v66 + v14 + 16);
      v64 = *(_QWORD *)(v66 + v14 + 24);
      v65 = *(int32x4_t *)(v66 + v14 + 32);
      v19 = *(int32x2_t *)(v66 + v14 + 48);
      v20 = __OFADD__(v17, (_DWORD)v7);
      LODWORD(v21) = v17 + v7;
      v22 = (v17 >> 31) + 0x7FFFFFFF;
      if (v20)
        v21 = v22;
      else
        v21 = v21;
      v20 = __OFADD__(v16, (_DWORD)v61);
      v23 = v16 + v61;
      LODWORD(v24) = (v16 >> 31) + 0x7FFFFFFF;
      if (v20)
        v24 = v24;
      else
        v24 = v23;
      v25 = WebCore::computeOffsetFromAncestorGraphicsLayer((uint64_t)a3, v21 | (v24 << 32), v15);
      v26 = (const WebCore::LayoutRect *)*((_QWORD *)this[1] + 4);
      v68 = (float32x2_t)v25;
      v69.i64[0] = v18;
      WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)&v68, v26, v27);
      v32 = v31 * 64.0;
      if (v32 >= 2147483650.0)
      {
        v33 = 0x7FFFFFFF;
      }
      else if (v32 <= -2147483650.0)
      {
        v33 = 0x80000000;
      }
      else
      {
        v33 = (int)v32;
      }
      v34 = v28 * 64.0;
      if (v34 >= 2147483650.0)
      {
        v35 = 0x7FFFFFFFLL;
      }
      else if (v34 <= -2147483650.0)
      {
        v35 = 0x80000000;
      }
      else
      {
        v35 = (int)v34;
      }
      v36 = v29 * 64.0;
      if (v36 >= 2147483650.0)
      {
        v37 = 0x7FFFFFFF;
      }
      else if (v36 <= -2147483650.0)
      {
        v37 = 0x80000000;
      }
      else
      {
        v37 = (int)v36;
      }
      v38 = v30 * 64.0;
      if (v38 >= 2147483650.0)
      {
        v39 = 0x7FFFFFFFLL;
      }
      else if (v38 <= -2147483650.0)
      {
        v39 = 0x80000000;
      }
      else
      {
        v39 = (int)v38;
      }
      v40 = v33 - v8;
      if (__OFSUB__(v33, v8))
        v40 = (v33 >> 31) + 0x7FFFFFFF;
      v41 = v35 - v9;
      if (__OFSUB__((_DWORD)v35, (_DWORD)v9))
        v41 = (v35 >> 31) + 0x7FFFFFFF;
      v42 = *(_QWORD *)(v66 + v14 + 80);
      v68 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v41, v40)), *(float32x2_t *)v67.f32);
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v42 + 128))(v42, &v68);
      v43 = *(_QWORD *)(v66 + v14 + 80);
      v68 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v39, v37)), *(float32x2_t *)v67.f32);
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v43 + 160))(v43, &v68);
      v44 = *(_QWORD *)(v66 + v14 + 80);
      v45.i64[0] = v18;
      v45.i64[1] = v64;
      v68 = 0;
      v69 = vmulq_f32(vcvtq_f32_s32(v45), v67);
      v70 = vmulq_f32(vcvtq_f32_s32(v65), v67);
      v71 = vmul_f32(vcvt_f32_s32(v19), *(float32x2_t *)v67.f32);
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v44 + 376))(v44, &v68);
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v66 + v14 + 80) + 384))(*(_QWORD *)(v66 + v14 + 80), 1);
      if (*(_BYTE *)(v66 + v14 + 56))
        break;
      v8 = v33;
      v9 = v35;
      LODWORD(v7) = v63;
LABEL_30:
      v14 += 96;
      if (v60 == v14)
      {
        v10 = v37 | (unint64_t)(v39 << 32);
        goto LABEL_52;
      }
    }
    v46 = *(_QWORD *)(v66 + v14);
    if (v46 && (v47 = *(_QWORD *)(v46 + 8)) != 0)
    {
      v48 = *(_QWORD *)(v47 + 264);
      if (v48)
      {
        v54 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v48 + 416))(v48);
        v55 = *(_QWORD *)(v48 + 32);
        v49 = v55 + v54;
        v48 = ((v55 & 0xFFFFFFFF00000000) + v54) >> 32;
        goto LABEL_36;
      }
    }
    else
    {
      LODWORD(v48) = 0;
    }
    v49 = 0;
LABEL_36:
    v50 = *(_QWORD *)(v66 + v14 + 88);
    v68.f32[0] = (float)v49;
    v68.f32[1] = (float)(int)v48;
    result = (*(uint64_t (**)(uint64_t, float32x2_t *))(*(_QWORD *)v50 + 168))(v50, &v68);
    if (v49 <= 0x2000000)
      v51 = -64 * v49;
    else
      v51 = 0x80000000;
    if (v49 >= -33554431)
      v52 = v51;
    else
      v52 = 0x7FFFFFFF;
    if ((int)v48 <= 0x2000000)
      v53 = -64 * v48;
    else
      v53 = 0x80000000;
    if ((int)v48 < -33554431)
      v53 = 0x7FFFFFFF;
    v8 = v33 + v52;
    if (__OFADD__(v33, v52))
      v8 = (v33 >> 31) + 0x7FFFFFFF;
    LODWORD(v7) = v63;
    v9 = v35 + v53;
    if (__OFADD__((_DWORD)v35, v53))
      v9 = (v35 >> 31) + 0x7FFFFFFF;
    goto LABEL_30;
  }
LABEL_52:
  *(_QWORD *)a4 = v8 | (unint64_t)(v9 << 32);
  *((_QWORD *)a4 + 1) = v10;
  return result;
}

void WebCore::snapRectToDevicePixelsIfNeeded(WebCore *this, const WebCore::LayoutRect *a2, const WebCore::RenderLayerModelObject *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Page *v8;
  int v9;
  WTF *v10;
  void *v11;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 680) & 0x800000000000) != 0)
  {
    if (WebCore::RenderObject::isSVGLayerAwareRenderer(a2) && *((_BYTE *)a2 + 46) != 83)
    {
      WebCore::LayoutRect::operator WebCore::FloatRect((int *)this);
      return;
    }
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  }
  v5 = *(_QWORD *)(v4 + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(WebCore::Page **)(v7 + 8);
        if (v8)
        {
          v9 = (*(_DWORD *)v8)++;
          if (v9)
          {
            *(_DWORD *)v8 = v9;
          }
          else
          {
            WebCore::Page::~Page(v8);
            WTF::fastFree(v10, v11);
          }
        }
      }
    }
  }
}

uint64_t WebCore::RenderLayerBacking::computePrimaryGraphicsLayerRect(WebCore::RenderLayerBacking *this, const WebCore::RenderLayer *a2, const WebCore::LayoutRect *a3)
{
  WebCore::RenderLayer *v6;
  unint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  signed int v16;
  int v17;
  WebCore::RenderView *v18;
  uint64_t v19;
  float v20;
  float v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v29;
  void *v30;
  WebCore::RenderLayerCompositor *v31;
  WebCore::RenderLayerCompositor *v32;
  WTF *v33;
  void *v34;

  v6 = (WebCore::RenderLayer *)*((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 22);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 4) + 24) + 8) + 40) + 8)
                 + 528);
  v9 = 1.0;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        v12 = *(float **)(v11 + 8);
        if (v12)
        {
          v13 = (*(_DWORD *)v12)++;
          v9 = v12[91];
          if (v13)
          {
            *(_DWORD *)v12 = v13;
          }
          else
          {
            WebCore::Page::~Page((WebCore::Page *)v12);
            WTF::fastFree(v29, v30);
          }
        }
      }
    }
  }
  v14 = WebCore::RenderLayer::convertToLayerCoords(v6, a2, v7, 1);
  v15 = WebCore::computeOffsetFromAncestorGraphicsLayer((uint64_t)a2, v14, v9);
  if (__OFSUB__((_DWORD)v15, (_DWORD)a3))
    v16 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v16 = v15 - (_DWORD)a3;
  if (__OFSUB__(HIDWORD(v15), HIDWORD(a3)))
    v17 = (HIDWORD(v15) >> 31) + 0x7FFFFFFF;
  else
    v17 = HIDWORD(v15) - HIDWORD(a3);
  v18 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                            + 32)
                                                                                + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  v19 = *((_QWORD *)v18 + 50);
  if (!v19)
  {
    v31 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v19 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v31, v18);
    v32 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v18 + 50);
    *((_QWORD *)v18 + 50) = v19;
    if (v32)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v32);
      WTF::fastFree(v33, v34);
      v19 = *((_QWORD *)v18 + 50);
    }
  }
  v20 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 24) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 24)
                             + 8)
                 + 364);
  v21 = floorf((float)(v20 * (float)v17) * 0.015625) / v20;
  v22 = (float)(floorf((float)(v20 * (float)v16) * 0.015625) / v20) * 64.0;
  v23 = 0x7FFFFFFFLL;
  v24 = 0x80000000;
  if (v22 > -2147483650.0)
    v24 = (int)v22;
  if (v22 < 2147483650.0)
    v23 = v24;
  v25 = v21 * 64.0;
  v26 = 0x7FFFFFFF00000000;
  v27 = 0x8000000000000000;
  if (v25 > -2147483650.0)
    v27 = (unint64_t)(int)v25 << 32;
  if (v25 < 2147483650.0)
    v26 = v27;
  return v26 | v23;
}

uint64_t WebCore::ComputedOffsets::fromPrimaryGraphicsLayer(WebCore::ComputedOffsets *this)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;

  if (*((_BYTE *)this + 32))
    return *((_QWORD *)this + 3);
  if (*((_BYTE *)this + 8))
  {
    v3 = *(_QWORD *)this;
  }
  else
  {
    v2 = WebCore::RenderLayer::convertToLayerCoords(*((WebCore::RenderLayer **)this + 5), *((WebCore::RenderLayer **)this + 6), *((_QWORD *)this + 7), 1);
    v3 = WebCore::computeOffsetFromAncestorGraphicsLayer(*((_QWORD *)this + 6), v2, *((float *)this + 20));
    if (!*((_BYTE *)this + 8))
      *((_BYTE *)this + 8) = 1;
    *(_QWORD *)this = v3;
  }
  v4 = *((_DWORD *)this + 16);
  v5 = *((_DWORD *)this + 17);
  v6 = __OFSUB__((_DWORD)v3, v4);
  v7 = v3 - v4;
  if (v6)
    v7 = (v3 >> 31) + 0x7FFFFFFF;
  v6 = __OFSUB__(HIDWORD(v3), v5);
  v8 = HIDWORD(v3) - v5;
  v9 = (HIDWORD(v3) >> 31) + 0x7FFFFFFF;
  if (!v6)
    v9 = v8;
  v10 = *((_DWORD *)this + 18);
  v11 = *((_DWORD *)this + 19);
  v6 = __OFSUB__(v7, v10);
  v12 = v7 - v10;
  LODWORD(v13) = (v7 >> 31) + 0x7FFFFFFF;
  if (v6)
    v13 = v13;
  else
    v13 = v12;
  v6 = __OFSUB__(v9, v11);
  v14 = v9 - v11;
  LODWORD(v15) = (v9 >> 31) + 0x7FFFFFFF;
  if (v6)
    v15 = v15;
  else
    v15 = v14;
  result = v13 | (v15 << 32);
  if (!*((_BYTE *)this + 32))
    *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = result;
  return result;
}

unint64_t WebCore::RenderLayer::convertToLayerCoords(WebCore::RenderLayer *this, WebCore::RenderLayer *a2, unint64_t a3, int a4)
{
  WebCore::RenderLayer *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WebCore::WillChangeData *v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;
  char v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  WebCore::RenderBox **v31;
  WebCore::RenderMultiColumnFlow *v32;
  WebCore::RenderBox *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  WebCore::RenderBox *v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  double v52;
  float v53;
  int v54;
  int v55;
  double v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  float v66;
  float v67;
  double v68;
  double v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  double v80;
  float v81;
  int v82;
  int v83;
  double v84;
  int v85;
  unsigned int v86;
  int v87;
  int isAtomicInlineLevelBox;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;

  if (a2 == this)
  {
    v28 = HIDWORD(a3);
    return a3 | (unint64_t)(v28 << 32);
  }
  v91 = a3;
  if (!this)
    goto LABEL_47;
  v7 = this;
  do
  {
    v8 = *((_QWORD *)v7 + 4);
    v9 = (*(_DWORD *)(v8 + 96) >> 19) & 7;
    v10 = (uint64_t)v7;
    if (v9 == 2)
      goto LABEL_7;
    if (v9 != 6)
    {
      v10 = *((_QWORD *)v7 + 5);
      goto LABEL_36;
    }
    if (!a2
      || *(WebCore::RenderLayer **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40)
                                                          + 8)
                                              + 1944)
                                  + 144) == a2)
    {
      v92 = 0;
      v52 = WebCore::RenderObject::localToAbsolute(v8, &v92, 1u, 0) * 64.0;
      if (v52 > -2147483650.0)
        v54 = (int)v52;
      else
        v54 = 0x80000000;
      if (v52 < 2147483650.0)
        v55 = v54;
      else
        v55 = 0x7FFFFFFF;
      v56 = v53 * 64.0;
      if (v56 >= 2147483650.0)
      {
        v57 = 0x7FFFFFFF;
      }
      else if (v56 <= -2147483650.0)
      {
        v57 = 0x80000000;
      }
      else
      {
        v57 = (int)v56;
      }
      v24 = __OFADD__((_DWORD)v91, v55);
      v58 = v91 + v55;
      if (v24)
        v58 = (v91 >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__(HIDWORD(v91), v57);
      v59 = HIDWORD(v91) + v57;
      v60 = (HIDWORD(v91) >> 31) + 0x7FFFFFFF;
      if (!v24)
        v60 = v59;
      v91 = __PAIR64__(v60, v58);
      break;
    }
    v10 = *((_QWORD *)v7 + 5);
    if (!v10)
    {
      v63 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)v7, 0, 0);
      goto LABEL_131;
    }
    v62 = 0;
    do
    {
      v62 |= v10 == (_QWORD)a2;
      if (!WebCore::RenderLayer::establishesTopLayer(v7))
      {
        if (WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(v10 + 32)))
          break;
        goto LABEL_119;
      }
      if ((*(_BYTE *)(v10 + 24) & 1) != 0)
        break;
LABEL_119:
      v10 = *(_QWORD *)(v10 + 40);
    }
    while (v10);
    if ((WebCore::RenderLayer *)v10 != a2)
    {
      v63 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)v7, v10, 0);
      if ((v62 & 1) != 0)
      {
        v64 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)a2, v10, 0);
        v65 = HIDWORD(v64);
        v10 = (uint64_t)a2;
        goto LABEL_132;
      }
LABEL_131:
      LODWORD(v64) = 0;
      LODWORD(v65) = 0;
LABEL_132:
      v70 = v63 - v64;
      if (__OFSUB__((_DWORD)v63, (_DWORD)v64))
        v70 = (v63 >> 31) + 0x7FFFFFFF;
      v24 = __OFSUB__(HIDWORD(v63), (_DWORD)v65);
      v71 = HIDWORD(v63) - v65;
      if (v24)
        v71 = (HIDWORD(v63) >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__((_DWORD)v91, v70);
      v72 = v91 + v70;
      v73 = (v91 >> 31) + 0x7FFFFFFF;
      if (!v24)
        v73 = v72;
      LODWORD(v91) = v73;
      v24 = __OFADD__(HIDWORD(v91), v71);
      v42 = HIDWORD(v91) + v71;
      if (v24)
        v42 = (HIDWORD(v91) >> 31) + 0x7FFFFFFF;
LABEL_143:
      HIDWORD(v91) = v42;
      goto LABEL_144;
    }
    v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1944);
    v10 = (uint64_t)v7;
    if (*(WebCore::RenderLayer **)(v75 + 144) == a2)
    {
      v76 = *((_DWORD *)v7 + 39);
      v77 = *((_DWORD *)v7 + 40);
      v24 = __OFADD__((_DWORD)v91, v76);
      v78 = v91 + v76;
      if (v24)
        v78 = (v91 >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__(HIDWORD(v91), v77);
      v79 = HIDWORD(v91) + v77;
      if (v24)
        v79 = (HIDWORD(v91) >> 31) + 0x7FFFFFFF;
      v91 = __PAIR64__(v79, v78);
      v92 = 0;
      v80 = WebCore::RenderObject::localToAbsolute(v75, &v92, 1u, 0) * 64.0;
      if (v80 > -2147483650.0)
        v82 = (int)v80;
      else
        v82 = 0x80000000;
      if (v80 < 2147483650.0)
        v83 = v82;
      else
        v83 = 0x7FFFFFFF;
      v84 = v81 * 64.0;
      if (v84 >= 2147483650.0)
      {
        v85 = 0x7FFFFFFF;
      }
      else if (v84 <= -2147483650.0)
      {
        v85 = 0x80000000;
      }
      else
      {
        v85 = (int)v84;
      }
      v24 = __OFADD__((_DWORD)v91, v83);
      v86 = v91 + v83;
      if (v24)
        v86 = (v91 >> 31) + 0x7FFFFFFF;
      LODWORD(v91) = v86;
      v51 = HIDWORD(v91) + v85;
      if (__OFADD__(HIDWORD(v91), v85))
        v51 = (HIDWORD(v91) >> 31) + 0x7FFFFFFF;
LABEL_85:
      HIDWORD(v91) = v51;
      break;
    }
LABEL_7:
    while (2)
    {
      v10 = *(_QWORD *)(v10 + 40);
      if (!v10)
      {
LABEL_32:
        v30 = 0;
        goto LABEL_33;
      }
      v11 = *((_QWORD *)v7 + 4);
      if ((*(_BYTE *)(v11 + 45) & 1) == 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
        if (v12)
        {
          if ((*(_WORD *)(v12 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19417153CLL);
          }
          if ((*(_BYTE *)(v12 + 23) & 0x20) != 0)
            goto LABEL_112;
        }
      }
      if ((*(_QWORD *)(v11 + 96) & 0xF80000000000) == 0x480000000000)
      {
LABEL_112:
        if ((*(_BYTE *)(v10 + 24) & 1) != 0)
          goto LABEL_32;
        goto LABEL_30;
      }
      v13 = *(_QWORD *)(v10 + 32);
      if (v9 != 2)
      {
        if (WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v13))
          goto LABEL_32;
LABEL_30:
        if ((WebCore::RenderLayer *)v10 == a2)
        {
          v30 = 1;
          v10 = (uint64_t)a2;
          goto LABEL_33;
        }
        continue;
      }
      break;
    }
    v14 = *(unsigned __int8 *)(v13 + 46);
    if (v14 == 49
      || (*(_BYTE *)(v13 + 98) & 0x38) != 0
      || ((*(_BYTE *)(v13 + 45) & 0x40) != 0 || (v14 - 36) <= 4 && v14 != 38)
      && (*(_BYTE *)(v13 + 22) & 2) != 0)
    {
      goto LABEL_32;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v13 + 88) + 40);
    if (*(_DWORD *)(*(_QWORD *)(v15 + 72) + 20))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8))
        goto LABEL_32;
    }
    if ((*(_BYTE *)(v13 + 45) & 0x40) != 0)
    {
      v16 = *(WebCore::WillChangeData **)(v15 + 200);
      if (v16)
      {
        v74 = *(_QWORD *)(v10 + 32);
        if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8)) & 1) != 0)goto LABEL_180;
        v13 = v74;
        v14 = *(unsigned __int8 *)(v74 + 46);
      }
    }
    if (v14 == 67 || v14 == 90)
      goto LABEL_32;
    v17 = *(_QWORD *)(*(_QWORD *)(v13 + 88) + 40);
    v18 = *(_BYTE *)(v17 + 462);
    v19 = *(_BYTE *)(v17 + 642) & 3;
    v20 = v18 | 0x19;
    if (v19 == 1)
      v18 |= 0x15u;
    if (v19 == 2)
      v21 = v20;
    else
      v21 = v18;
    if ((v21 & 3) == 0
      || (*(_BYTE *)(v13 + 20) & 1) == 0
      && (v89 = v13, v87 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v13), v13 = v89, !v87)
      || (*(_QWORD *)(v13 + 96) & 0x1FLL) == 0x19)
    {
LABEL_29:
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 88) + 40) + 636) & 0xC0000) != 0)
      {
        if ((*(_BYTE *)(v13 + 20) & 1) != 0
          || (v90 = v13,
              isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v13),
              v13 = v90,
              isAtomicInlineLevelBox))
        {
          if ((*(_QWORD *)(v13 + 96) & 0x1FLL) != 0x19)
          {
            v61 = *(unsigned __int8 *)(v13 + 46);
            if ((v61 - 36) <= 4)
            {
              if (v61 == 36)
                goto LABEL_32;
            }
            else if (v61 != 63 && v61 != 35)
            {
              goto LABEL_32;
            }
          }
        }
      }
      goto LABEL_30;
    }
    if (*(unsigned __int8 *)(v13 + 46) - 36 <= 4)
    {
      if ((*(_BYTE *)(v13 + 52) & 7) == 1)
        goto LABEL_32;
      goto LABEL_29;
    }
LABEL_180:
    v30 = 0;
LABEL_33:
    if ((*(_BYTE *)(v8 + 23) & 0x10) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 648))(v8);
    if (v30)
    {
      v43 = WebCore::RenderLayer::enclosingAncestorForPosition(v10, v9);
      v44 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)v7, v43, 0);
      v45 = v44;
      v46 = HIDWORD(v44);
      v47 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)a2, v43, 0);
      v48 = v45 - v47;
      if (__OFSUB__(v45, (_DWORD)v47))
        v48 = (v45 >> 31) + 0x7FFFFFFF;
      v49 = v46 - HIDWORD(v47);
      if (__OFSUB__((_DWORD)v46, HIDWORD(v47)))
        v49 = (v46 >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__((_DWORD)v91, v48);
      v50 = v91 + v48;
      if (v24)
        v50 = (v91 >> 31) + 0x7FFFFFFF;
      v24 = __OFADD__(HIDWORD(v91), v49);
      v51 = HIDWORD(v91) + v49;
      if (v24)
        v51 = (HIDWORD(v91) >> 31) + 0x7FFFFFFF;
      LODWORD(v91) = v50;
      goto LABEL_85;
    }
LABEL_36:
    if (!v10)
      break;
    v22 = *((_DWORD *)v7 + 39);
    v23 = *((_DWORD *)v7 + 40);
    v24 = __OFADD__((_DWORD)v91, v22);
    v25 = v91 + v22;
    if (v24)
      v25 = (v91 >> 31) + 0x7FFFFFFF;
    v24 = __OFADD__(HIDWORD(v91), v23);
    v26 = HIDWORD(v91) + v23;
    if (v24)
      v26 = (HIDWORD(v91) >> 31) + 0x7FFFFFFF;
    v91 = __PAIR64__(v26, v25);
    if (a4 == 1
      && (v31 = (WebCore::RenderBox **)*((_QWORD *)v7 + 5)) != 0
      && v31 != (WebCore::RenderBox **)a2
      && (v32 = v31[4], *((_BYTE *)v32 + 46) == 25))
    {
      v33 = WebCore::RenderMultiColumnFlow::physicalTranslationFromFlowToFragment(v32, (WebCore::LayoutPoint *)&v91);
      if (v33)
      {
        v34 = WebCore::RenderBox::topLeftLocationOffset(v33);
        v35 = v34;
        v36 = HIDWORD(v34);
        if ((*((_BYTE *)v31[4] + 45) & 4) != 0)
          v37 = v31[4];
        else
          v37 = 0;
        v38 = WebCore::RenderBox::topLeftLocationOffset(v37);
        v39 = v35 - v38;
        if (__OFSUB__(v35, (_DWORD)v38))
          v39 = (v35 >> 31) + 0x7FFFFFFF;
        v40 = v36 - HIDWORD(v38);
        if (__OFSUB__((_DWORD)v36, HIDWORD(v38)))
          v40 = (v36 >> 31) + 0x7FFFFFFF;
        v24 = __OFADD__((_DWORD)v91, v39);
        v41 = v91 + v39;
        if (v24)
          v41 = (v91 >> 31) + 0x7FFFFFFF;
        LODWORD(v91) = v41;
        v24 = __OFADD__(HIDWORD(v91), v40);
        v42 = HIDWORD(v91) + v40;
        if (v24)
          v42 = (HIDWORD(v91) >> 31) + 0x7FFFFFFF;
        goto LABEL_143;
      }
LABEL_144:
      v7 = (WebCore::RenderLayer *)v10;
    }
    else
    {
      v7 = (WebCore::RenderLayer *)v10;
    }
  }
  while (v7 && v7 != a2);
LABEL_47:
  v27 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v27 + 46) == 83)
  {
    v66 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8));
    v68 = WebCore::roundPointToDevicePixels((WebCore *)&v91, (const WebCore::LayoutPoint *)1, v66) * 64.0;
    if (v68 >= 2147483650.0)
    {
      LODWORD(a3) = 0x7FFFFFFF;
    }
    else if (v68 > -2147483650.0)
    {
      LODWORD(a3) = (int)v68;
    }
    else
    {
      LODWORD(a3) = 0x80000000;
    }
    v69 = v67 * 64.0;
    if (v69 >= 2147483650.0)
    {
      v28 = 0x7FFFFFFFLL;
    }
    else if (v69 <= -2147483650.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v69;
    }
  }
  else
  {
    LODWORD(a3) = v91;
    v28 = HIDWORD(v91);
  }
  return a3 | (unint64_t)(v28 << 32);
}

unint64_t WebCore::RenderLayer::offsetFromAncestor(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WebCore::WillChangeData *v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  char v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  WebCore::RenderMultiColumnFlow *v31;
  WebCore::RenderBox *v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  WebCore::RenderBox *v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  int v52;
  void *v53;
  float v54;
  WTF *v55;
  double v56;
  WTF *v58;
  int v59;
  double v60;
  int v62;
  unsigned int v63;
  int v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  float v69;
  float v70;
  double v71;
  double v72;
  BOOL v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  double v85;
  float v86;
  double v87;
  double v88;
  BOOL v90;
  int v91;
  int v92;
  int v93;
  int isAtomicInlineLevelBox;
  double v95;
  WTF *v96;
  int v97;
  double v98;
  double v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _OWORD v104[4];
  char v105;
  WTF *v106;
  WTF *v107;
  uint64_t v108;
  char v109;
  __int16 v110;
  int v111;
  int v112;

  if (a2 == a1)
  {
    v26 = 0;
    v27 = 0;
    return v26 | (unint64_t)(v27 << 32);
  }
  v103 = 0;
  if (!a1)
    goto LABEL_47;
  v6 = a1;
  do
  {
    v7 = *(_QWORD *)(v6 + 32);
    v8 = (*(_DWORD *)(v7 + 96) >> 19) & 7;
    v9 = v6;
    if (v8 == 2)
      goto LABEL_7;
    if (v8 != 6)
    {
      v9 = *(_QWORD *)(v6 + 40);
      goto LABEL_36;
    }
    if (!a2
      || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1944)
                   + 144) == a2)
    {
      v105 = 0;
      v107 = 0;
      v108 = 0;
      v106 = 0;
      v109 = 0;
      memset(v104, 0, 41);
      v110 = 1;
      v111 = 0;
      v112 = 0;
      (*(void (**)(uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v7 + 576))(v7, 0, v104, 5, 0);
      WebCore::TransformState::flatten((WebCore::TransformState *)v104, 0);
      v54 = *((float *)v104 + 1);
      v55 = v107;
      v107 = 0;
      v56 = *(float *)v104 * 64.0;
      if (v56 >= 2147483650.0 || v56 <= -2147483650.0)
      {
        v95 = *(float *)v104;
        if (v55)
          WTF::fastFree(v55, v53);
        v96 = v106;
        v106 = 0;
        if (v96)
          WTF::fastFree(v96, v53);
        if (v95 * 64.0 > -2147483650.0)
          v97 = (int)(v95 * 64.0);
        else
          v97 = 0x80000000;
        if (v95 * 64.0 < 2147483650.0)
          v59 = v97;
        else
          v59 = 0x7FFFFFFF;
      }
      else
      {
        if (v55)
          WTF::fastFree(v55, v53);
        v58 = v106;
        v106 = 0;
        if (v58)
          WTF::fastFree(v58, v53);
        v59 = (int)v56;
      }
      v60 = v54 * 64.0;
      if (v60 < 2147483650.0 && v60 > -2147483650.0)
        goto LABEL_105;
      if (v60 >= 2147483650.0)
      {
        v62 = 0x7FFFFFFF;
        goto LABEL_106;
      }
      if (v60 <= -2147483650.0)
        v62 = 0x80000000;
      else
LABEL_105:
        v62 = (int)v60;
LABEL_106:
      v50 = __OFADD__((_DWORD)v103, v59);
      v63 = v103 + v59;
      if (v50)
        v63 = (v103 >> 31) + 0x7FFFFFFF;
      LODWORD(v103) = v63;
      v51 = HIDWORD(v103) + v62;
      if (__OFADD__(HIDWORD(v103), v62))
        v51 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
      goto LABEL_86;
    }
    v9 = *(_QWORD *)(v6 + 40);
    if (!v9)
    {
      v66 = WebCore::RenderLayer::offsetFromAncestor(v6, 0, 0);
      goto LABEL_137;
    }
    v65 = 0;
    do
    {
      v65 |= v9 == a2;
      if (!WebCore::RenderLayer::establishesTopLayer((WebCore::RenderLayer *)v6))
      {
        if (WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(v9 + 32)))
          break;
        goto LABEL_123;
      }
      if ((*(_BYTE *)(v9 + 24) & 1) != 0)
        break;
LABEL_123:
      v9 = *(_QWORD *)(v9 + 40);
    }
    while (v9);
    if (v9 != a2)
    {
      v66 = WebCore::RenderLayer::offsetFromAncestor(v6, v9, 0);
      if ((v65 & 1) != 0)
      {
        v67 = WebCore::RenderLayer::offsetFromAncestor(a2, v9, 0);
        v68 = HIDWORD(v67);
        v9 = a2;
        goto LABEL_138;
      }
LABEL_137:
      LODWORD(v67) = 0;
      LODWORD(v68) = 0;
LABEL_138:
      v75 = v66 - v67;
      if (__OFSUB__((_DWORD)v66, (_DWORD)v67))
        v75 = (v66 >> 31) + 0x7FFFFFFF;
      v50 = __OFSUB__(HIDWORD(v66), (_DWORD)v68);
      v76 = HIDWORD(v66) - v68;
      if (v50)
        v76 = (HIDWORD(v66) >> 31) + 0x7FFFFFFF;
      v50 = __OFADD__((_DWORD)v103, v75);
      v77 = v103 + v75;
      v78 = (v103 >> 31) + 0x7FFFFFFF;
      if (!v50)
        v78 = v77;
      LODWORD(v103) = v78;
      v50 = __OFADD__(HIDWORD(v103), v76);
      v41 = HIDWORD(v103) + v76;
      if (v50)
        v41 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
LABEL_149:
      HIDWORD(v103) = v41;
      goto LABEL_150;
    }
    v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1944);
    v9 = v6;
    if (*(_QWORD *)(v80 + 144) == a2)
    {
      v82 = *(_DWORD *)(v6 + 156);
      v81 = *(_DWORD *)(v6 + 160);
      v50 = __OFADD__((_DWORD)v103, v82);
      v83 = v103 + v82;
      if (v50)
        v83 = (v103 >> 31) + 0x7FFFFFFF;
      LODWORD(v103) = v83;
      v50 = __OFADD__(HIDWORD(v103), v81);
      v84 = HIDWORD(v103) + v81;
      if (v50)
        v84 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
      HIDWORD(v103) = v84;
      *(_QWORD *)&v104[0] = 0;
      v85 = WebCore::RenderObject::localToAbsolute(v80, (uint64_t *)v104, 1u, 0) * 64.0;
      v87 = v86;
      v88 = v87 * 64.0;
      v90 = v87 * 64.0 >= 2147483650.0 || v85 <= -2147483650.0 || v88 <= -2147483650.0;
      if (v90 || v85 >= 2147483650.0)
      {
        if (v85 > -2147483650.0)
          v91 = (int)v85;
        else
          v91 = 0x80000000;
        if (v85 >= 2147483650.0)
          v91 = 0x7FFFFFFF;
        v99 = v87 * 64.0;
        if (v99 > -2147483650.0)
          v100 = (int)v99;
        else
          v100 = 0x80000000;
        if (v99 < 2147483650.0)
          v92 = v100;
        else
          v92 = 0x7FFFFFFF;
      }
      else
      {
        v91 = (int)v85;
        v92 = (int)v88;
      }
      v50 = __OFADD__((_DWORD)v103, v91);
      v49 = v103 + v91;
      if (v50)
        v49 = (v103 >> 31) + 0x7FFFFFFF;
      v50 = __OFADD__(HIDWORD(v103), v92);
      v51 = HIDWORD(v103) + v92;
      v52 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
      goto LABEL_82;
    }
LABEL_7:
    while (2)
    {
      v9 = *(_QWORD *)(v9 + 40);
      if (!v9)
      {
LABEL_32:
        v29 = 0;
        goto LABEL_33;
      }
      v10 = *(_QWORD *)(v6 + 32);
      if ((*(_BYTE *)(v10 + 45) & 1) == 0)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
        if (v11)
        {
          if ((*(_WORD *)(v11 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194171DC8);
          }
          if ((*(_BYTE *)(v11 + 23) & 0x20) != 0)
            goto LABEL_117;
        }
      }
      if ((*(_QWORD *)(v10 + 96) & 0xF80000000000) == 0x480000000000)
      {
LABEL_117:
        if ((*(_BYTE *)(v9 + 24) & 1) != 0)
          goto LABEL_32;
        goto LABEL_30;
      }
      v12 = *(_QWORD *)(v9 + 32);
      if (v8 != 2)
      {
        if (WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v12))
          goto LABEL_32;
LABEL_30:
        if (v9 == a2)
        {
          v29 = 1;
          v9 = a2;
          goto LABEL_33;
        }
        continue;
      }
      break;
    }
    v13 = *(unsigned __int8 *)(v12 + 46);
    if (v13 == 49
      || (*(_BYTE *)(v12 + 98) & 0x38) != 0
      || ((*(_BYTE *)(v12 + 45) & 0x40) != 0 || (v13 - 36) <= 4 && v13 != 38)
      && (*(_BYTE *)(v12 + 22) & 2) != 0)
    {
      goto LABEL_32;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 88) + 40);
    if (*(_DWORD *)(*(_QWORD *)(v14 + 72) + 20))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8))
        goto LABEL_32;
    }
    if ((*(_BYTE *)(v12 + 45) & 0x40) != 0)
    {
      v15 = *(WebCore::WillChangeData **)(v14 + 200);
      if (v15)
      {
        v79 = *(_QWORD *)(v9 + 32);
        if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v15, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8)) & 1) != 0)goto LABEL_182;
        v12 = v79;
        v13 = *(unsigned __int8 *)(v79 + 46);
      }
    }
    if (v13 == 67 || v13 == 90)
      goto LABEL_32;
    v16 = *(_QWORD *)(*(_QWORD *)(v12 + 88) + 40);
    v17 = *(_BYTE *)(v16 + 462);
    v18 = *(_BYTE *)(v16 + 642) & 3;
    v19 = v17 | 0x19;
    if (v18 == 1)
      v17 |= 0x15u;
    if (v18 == 2)
      v20 = v19;
    else
      v20 = v17;
    if ((v20 & 3) == 0
      || (*(_BYTE *)(v12 + 20) & 1) == 0
      && (v101 = v12, v93 = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v12),
                      v12 = v101,
                      !v93)
      || (*(_QWORD *)(v12 + 96) & 0x1FLL) == 0x19)
    {
LABEL_29:
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 40) + 636) & 0xC0000) != 0)
      {
        if ((*(_BYTE *)(v12 + 20) & 1) != 0
          || (v102 = v12,
              isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v12),
              v12 = v102,
              isAtomicInlineLevelBox))
        {
          if ((*(_QWORD *)(v12 + 96) & 0x1FLL) != 0x19)
          {
            v64 = *(unsigned __int8 *)(v12 + 46);
            if ((v64 - 36) <= 4)
            {
              if (v64 == 36)
                goto LABEL_32;
            }
            else if (v64 != 63 && v64 != 35)
            {
              goto LABEL_32;
            }
          }
        }
      }
      goto LABEL_30;
    }
    if (*(unsigned __int8 *)(v12 + 46) - 36 <= 4)
    {
      if ((*(_BYTE *)(v12 + 52) & 7) == 1)
        goto LABEL_32;
      goto LABEL_29;
    }
LABEL_182:
    v29 = 0;
LABEL_33:
    if ((*(_BYTE *)(v7 + 23) & 0x10) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 648))(v7);
    if (v29)
    {
      v42 = WebCore::RenderLayer::enclosingAncestorForPosition(v9, v8);
      v43 = WebCore::RenderLayer::offsetFromAncestor(v6, v42, 0);
      v44 = v43;
      v45 = HIDWORD(v43);
      v46 = WebCore::RenderLayer::offsetFromAncestor(a2, v42, 0);
      v47 = v44 - v46;
      if (__OFSUB__(v44, (_DWORD)v46))
        v47 = (v44 >> 31) + 0x7FFFFFFF;
      v48 = v45 - HIDWORD(v46);
      if (__OFSUB__((_DWORD)v45, HIDWORD(v46)))
        v48 = (v45 >> 31) + 0x7FFFFFFF;
      v50 = __OFADD__((_DWORD)v103, v47);
      v49 = v103 + v47;
      if (v50)
        v49 = (v103 >> 31) + 0x7FFFFFFF;
      v50 = __OFADD__(HIDWORD(v103), v48);
      v51 = HIDWORD(v103) + v48;
      v52 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
LABEL_82:
      if (v50)
        v51 = v52;
      LODWORD(v103) = v49;
LABEL_86:
      HIDWORD(v103) = v51;
      break;
    }
LABEL_36:
    if (!v9)
      break;
    v21 = *(_DWORD *)(v6 + 156);
    v22 = *(_DWORD *)(v6 + 160);
    v50 = __OFADD__((_DWORD)v103, v21);
    v23 = v103 + v21;
    if (v50)
      v23 = (v103 >> 31) + 0x7FFFFFFF;
    v50 = __OFADD__(HIDWORD(v103), v22);
    v24 = HIDWORD(v103) + v22;
    if (v50)
      v24 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
    v103 = __PAIR64__(v24, v23);
    if (a3 == 1
      && (v30 = *(_QWORD *)(v6 + 40)) != 0
      && v30 != a2
      && (v31 = *(WebCore::RenderMultiColumnFlow **)(v30 + 32), *((_BYTE *)v31 + 46) == 25))
    {
      v32 = WebCore::RenderMultiColumnFlow::physicalTranslationFromFlowToFragment(v31, (WebCore::LayoutPoint *)&v103);
      if (v32)
      {
        v33 = WebCore::RenderBox::topLeftLocationOffset(v32);
        v34 = v33;
        v35 = HIDWORD(v33);
        if ((*(_BYTE *)(*(_QWORD *)(v30 + 32) + 45) & 4) != 0)
          v36 = *(WebCore::RenderBox **)(v30 + 32);
        else
          v36 = 0;
        v37 = WebCore::RenderBox::topLeftLocationOffset(v36);
        v38 = v34 - v37;
        if (__OFSUB__(v34, (_DWORD)v37))
          v38 = (v34 >> 31) + 0x7FFFFFFF;
        v39 = v35 - HIDWORD(v37);
        if (__OFSUB__((_DWORD)v35, HIDWORD(v37)))
          v39 = (v35 >> 31) + 0x7FFFFFFF;
        v50 = __OFADD__((_DWORD)v103, v38);
        v40 = v103 + v38;
        if (v50)
          v40 = (v103 >> 31) + 0x7FFFFFFF;
        LODWORD(v103) = v40;
        v50 = __OFADD__(HIDWORD(v103), v39);
        v41 = HIDWORD(v103) + v39;
        if (v50)
          v41 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
        goto LABEL_149;
      }
LABEL_150:
      v6 = v9;
    }
    else
    {
      v6 = v9;
    }
  }
  while (v6 && v6 != a2);
LABEL_47:
  v25 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v25 + 46) == 83)
  {
    v69 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8));
    v71 = WebCore::roundPointToDevicePixels((WebCore *)&v103, (const WebCore::LayoutPoint *)1, v69) * 64.0;
    v72 = v70 * 64.0;
    v74 = v72 >= 2147483650.0 || v71 <= -2147483650.0 || v72 <= -2147483650.0;
    if (v74 || v71 >= 2147483650.0)
    {
      if (v71 >= 2147483650.0)
      {
        v26 = 0x7FFFFFFF;
      }
      else if (v71 > -2147483650.0)
      {
        v26 = (int)v71;
      }
      else
      {
        v26 = 0x80000000;
      }
      v98 = v70 * 64.0;
      if (v98 >= 2147483650.0)
      {
        v27 = 0x7FFFFFFFLL;
      }
      else if (v98 <= -2147483650.0)
      {
        v27 = 0x80000000;
      }
      else
      {
        v27 = (int)v98;
      }
    }
    else
    {
      v26 = (int)v71;
      v27 = (int)v72;
    }
  }
  else
  {
    v26 = v103;
    v27 = HIDWORD(v103);
  }
  return v26 | (unint64_t)(v27 << 32);
}

uint64_t WebCore::computeOffsetFromAncestorGraphicsLayer(uint64_t a1, uint64_t a2, float a3)
{
  _DWORD *v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  BOOL v8;
  signed int v9;
  signed int v10;
  int v11;
  int v12;
  float v13;
  float v14;
  double v15;
  unsigned int v16;
  double v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  if (a1)
  {
    v3 = *(_DWORD **)(a1 + 256);
    v5 = v3[48];
    v4 = v3[49];
    v7 = v3 + 44;
    LODWORD(v3) = v3[44];
    v6 = v7[1];
    v8 = __OFSUB__((_DWORD)v3, v5);
    v9 = (_DWORD)v3 - v5;
    v10 = (v3 >> 31) + 0x7FFFFFFF;
    if (!v8)
      v10 = v9;
    v8 = __OFSUB__(v6, v4);
    v11 = v6 - v4;
    v12 = (v6 >> 31) + 0x7FFFFFFF;
    if (!v8)
      v12 = v11;
    v13 = floorf((float)((float)v10 * a3) * 0.015625) / a3;
    v14 = floorf((float)((float)v12 * a3) * 0.015625) / a3;
    v15 = v13 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    v17 = v14 * 64.0;
    if (v17 >= 2147483650.0)
    {
      v18 = 0x7FFFFFFF;
    }
    else if (v17 <= -2147483650.0)
    {
      v18 = 0x80000000;
    }
    else
    {
      v18 = (int)v17;
    }
    v8 = __OFADD__(v16, v5);
    v19 = v16 + v5;
    v20 = (v16 >> 31) + 0x7FFFFFFF;
    if (v8)
      v19 = v20;
    v8 = __OFADD__(v18, v4);
    v21 = v18 + v4;
    if (v8)
      v21 = (v18 >> 31) + 0x7FFFFFFF;
    if (v19 == 0x80000000)
      v22 = 0x7FFFFFFF;
    else
      v22 = -v19;
    if (v21 == 0x80000000)
      v23 = 0x7FFFFFFF;
    else
      v23 = -v21;
    v8 = __OFADD__(v22, (_DWORD)a2);
    v24 = v22 + a2;
    LODWORD(v25) = (v22 >> 31) + 0x7FFFFFFF;
    if (v8)
      v25 = v25;
    else
      v25 = v24;
    v8 = __OFADD__(v23, HIDWORD(a2));
    v26 = v23 + HIDWORD(a2);
    LODWORD(v27) = (v23 >> 31) + 0x7FFFFFFF;
    if (v8)
      v27 = v27;
    else
      v27 = v26;
    return v25 | (v27 << 32);
  }
  return a2;
}

_QWORD *WebCore::RenderLayerCompositor::rootLayerAttachmentChanged(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5[2];
  int v6;

  if (*((_DWORD *)this + 54))
  {
    v1 = this;
    v2 = (_QWORD *)this[1];
    v3 = v2[18];
    if (v3)
    {
      this = *(_QWORD **)(v3 + 256);
      if (this)
      {
        v5[0] = *(_QWORD **)(v3 + 256);
        v5[1] = 0;
        v6 = 0;
        this = (_QWORD *)WebCore::RenderLayerBacking::updateDrawsContent((uint64_t)this, v5);
        v2 = (_QWORD *)v1[1];
      }
    }
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[31] + 328) + 128) + 8) == *(_QWORD *)(v2[31] + 328))
    {
      v4 = WebCore::PageOverlayController::layerWithDocumentOverlays(*(WebCore::PageOverlayController **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[3] + 8) + 40) + 8) + 528) + 8) + 24) + 8) + 1232));
      ++*(_DWORD *)(v4 + 8);
      v5[0] = (_QWORD *)v4;
      (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)v1[28] + 64))(v1[28], v5);
      this = v5[0];
      v5[0] = 0;
      if (this)
      {
        if (*((_DWORD *)this + 2) == 1)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
        else
          --*((_DWORD *)this + 2);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerCompositor::updateCompositingLayers(unint64_t a1, unsigned int a2, uint64_t a3)
{
  WTF **v3;
  unint64_t v4;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  const WebCore::RenderLayer *v26;
  void *v27;
  WTF *v28;
  void *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  WebCore::Page *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  double v53;
  double v54;
  double v55;
  unsigned int v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 *v64;
  __int128 *v65;
  uint64_t *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v74;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  WebCore::Page *v90;
  uint64_t v91;
  WebCore::InspectorInstrumentation *v92;
  unsigned int v93;
  uint64_t v94;
  WebCore::RenderView *v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  WebCore::RenderView *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  WTF *v125;
  char v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  WebCore::RenderObject *v136;
  uint64_t v137;
  const WebCore::RenderObject *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t i;
  uint64_t v146;
  unsigned int *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  void *v157;
  WTF *v158;
  WebCore::RenderLayerCompositor *v159;
  WebCore::RenderLayerCompositor *v160;
  WTF *v161;
  void *v162;
  uint64_t v163;
  int v164;
  _DWORD *v165;
  uint64_t *v166;
  WTF *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  WTF *v180;
  uint64_t v181;
  _QWORD v182[129];
  int v183;
  const WebCore::RenderLayer *v184;
  char v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  char v189;
  _QWORD v190[2];
  _QWORD *v191[2];
  uint64_t *v192;
  __int128 *v193;
  _QWORD *v194;
  _DWORD *v195;
  __int128 v196;
  _QWORD v197[2];

  kdebug_trace();
  if (a2 <= 1)
  {
    WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags(a1);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v9 + 248);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 328) + 632) + 8) != *(_QWORD *)(v10 + 328))
    {
      v12 = *(_BYTE *)(a1 + 132)
         && (v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 112),
             !(~*(_DWORD *)(v11 + 664) & 0x40000000 | (unint64_t)(~*(_DWORD *)(v11 + 680) & 0x80)))
         && (*(_BYTE *)(a1 + 128) & 0x40) != 0
         && WebCore::LocalFrameView::isScrollable(v10);
      if (*(unsigned __int8 *)(a1 + 198) != v12)
      {
        *(_BYTE *)(a1 + 198) = v12;
        WebCore::RenderLayer::setDescendantsNeedCompositingRequirementsTraversal(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
      }
    }
  }
  if ((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 16));
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8);
  if (!*(_BYTE *)(v14 + 3414) || (*(_BYTE *)(v13 + 20) & 0xF8) != 0)
  {
    v22 = 0;
    goto LABEL_32;
  }
  if (!*(_BYTE *)(a1 + 195))
  {
    if (*(_BYTE *)(a1 + 198)
      || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 248) + 328) + 632) + 8) == *(_QWORD *)(*(_QWORD *)(v13 + 248) + 328)
      && (v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 528) + 8) + 24) + 8) + 1232),
          WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v117 + 32, v8), (v118 = *(_QWORD *)(v117 + 32)) != 0)&& *(_DWORD *)(v118 - 12))
    {
      WebCore::RenderLayerCompositor::enableCompositingMode((_QWORD *)a1, 1);
    }
  }
  v15 = *(_QWORD **)(a1 + 8);
  v16 = v15[18];
  if (a3)
    v17 = v16 == a3;
  else
    v17 = 1;
  if ((a2 & 0xFFFFFFFE) == 2)
  {
    v126 = !v17;
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[3] + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 664) & 0x20) == 0)
      v126 = 1;
    if ((v126 & 1) == 0)
    {
      v127 = v15[31];
      v128 = *(uint64_t **)(v127 + 1304);
      if (v128)
      {
        WTF::WeakHashSet<WebCore::RenderLayerModelObject,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t **)&v175, *(uint64_t **)(v127 + 1304));
        WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t **)&v186, v128);
        v129 = *((_QWORD *)&v175 + 1);
        v130 = *((_QWORD *)&v186 + 1);
        while (v129 != v130)
        {
          v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v129 + 8) + 144);
          if (v131)
            WebCore::RenderLayer::setNeedsCompositingGeometryUpdate(v131);
          WTF::WeakHashSet<WebCore::Page,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v175);
          v129 = *((_QWORD *)&v175 + 1);
        }
      }
    }
    WebCore::RenderLayer::setDescendantsNeedCompositingRequirementsTraversal(v16);
  }
  if (a2 == 1)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    *(_DWORD *)(v18 + 12) |= 0x100u;
    if ((*(_BYTE *)(v18 + 24) & 4) != 0)
    {
      v18 = *(_QWORD *)(v18 + 40);
      if (v18)
      {
LABEL_24:
        do
        {
          v19 = *(_DWORD *)(v18 + 12);
          if ((v19 & 2) != 0)
            break;
          *(_DWORD *)(v18 + 12) = v19 | 2;
          if ((*(_BYTE *)(v18 + 24) & 4) == 0)
          {
            while (1)
            {
              v18 = *(_QWORD *)(v18 + 40);
              if (!v18)
                goto LABEL_25;
              if ((*(_BYTE *)(v18 + 24) & 0x4A) != 0)
                goto LABEL_181;
            }
          }
          v18 = *(_QWORD *)(v18 + 40);
LABEL_181:
          ;
        }
        while (v18);
      }
    }
    else
    {
      while (1)
      {
        v18 = *(_QWORD *)(v18 + 40);
        if (!v18)
          break;
        if ((*(_BYTE *)(v18 + 24) & 0x4A) != 0)
          goto LABEL_24;
      }
    }
  }
LABEL_25:
  v20 = *(_DWORD *)(v16 + 12);
  if ((v20 & 1) != 0 || (v20 ? (v21 = *(_BYTE *)(a1 + 195) == 0) : (v21 = 1), !v21))
  {
    ++*(_DWORD *)(a1 + 212);
    v24 = *(_DWORD *)(v16 + 12);
    if ((v24 & 0x3D) != 0)
    {
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(const WebCore::RenderLayer **)(v25 + 144);
      v172 = 0;
      v171 = (unint64_t)v16;
      v173 = 256;
      LOBYTE(v25) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) + 40) + 8)
                                                                                           + 528)
                                                                               + 8)
                                                                   + 24)
                                                       + 8)
                                           + 112)
                               + 688) & 0x400000) != 0;
      v186 = 0u;
      v187 = 0u;
      v188 = 0;
      v189 = v25;
      v175 = 0u;
      v176 = 0u;
      v177 = -1;
      v178 = 0;
      v179 = 0;
      v180 = (WTF *)v182;
      v181 = 32;
      v182[128] = 0;
      v183 = 2;
      v184 = v26;
      v185 = 1;
      WebCore::LayerOverlapMap::pushCompositingContainer((WebCore::LayerOverlapMap *)&v175, v26);
      LOBYTE(v192) = 0;
      WebCore::RenderLayerCompositor::computeCompositingRequirements(a1, 0, (uint64_t)v26, (uint64_t)&v175, (uint64_t)&v171, (uint64_t **)&v186, (WebCore::RenderLayer *)&v192);
      if (HIDWORD(v181))
      {
        v124 = 32 * HIDWORD(v181);
        v3 = (WTF **)((char *)v180 + 16);
        do
        {
          v125 = *v3;
          *v3 = 0;
          if (v125)
            WTF::fastFree(v125, v27);
          v3 += 4;
          v124 -= 32;
        }
        while (v124);
      }
      v28 = v180;
      if (v182 != (_QWORD *)v180 && v180 != 0)
      {
        v180 = 0;
        LODWORD(v181) = 0;
        WTF::fastFree(v28, v27);
      }
      WTF::Vector<std::unique_ptr<WebCore::OverlapMapContainer>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v176, v27);
      WTF::Vector<std::unique_ptr<WebCore::OverlapMapContainer>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v175, v30);
      v32 = *((_QWORD *)&v187 + 1);
      if (*((_QWORD *)&v187 + 1))
      {
        v108 = *(unsigned int *)(*((_QWORD *)&v187 + 1) - 4);
        if ((_DWORD)v108)
        {
          v3 = (WTF **)*((_QWORD *)&v187 + 1);
          do
          {
            v109 = *v3;
            if (*v3 != (WTF *)-1)
            {
              *v3 = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 1)
                  WTF::fastFree(v109, v31);
                else
                  --*(_DWORD *)v109;
              }
            }
            ++v3;
            --v108;
          }
          while (v108);
        }
        WTF::fastFree((WTF *)(v32 - 16), v31);
      }
      if (HIDWORD(v186))
        WTF::VectorDestructor<true,WebCore::RenderLayerCompositor::BackingSharingState::Provider>::destruct((WTF *)v186, (WTF *)(v186 + 56 * HIDWORD(v186)));
      v33 = (WTF *)v186;
      if ((_QWORD)v186)
      {
        *(_QWORD *)&v186 = 0;
        DWORD2(v186) = 0;
        WTF::fastFree(v33, v31);
      }
      v24 = *(_DWORD *)(v16 + 12);
    }
    if ((v24 & 0xFC2) == 0)
    {
LABEL_139:
      v84 = *(_QWORD *)(a1 + 224);
      if (v84)
      {
        v85 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
        v86 = (float)*(int *)(v85 + 260);
        *(float *)&v175 = (float)*(int *)(v85 + 256);
        *((float *)&v175 + 1) = v86;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v84 + 160))(v84, &v175);
        v87 = *(_QWORD *)(a1 + 224);
        LODWORD(v175) = WebCore::LocalFrameView::positionForRootContentLayer(*(WebCore::LocalFrameView **)(*(_QWORD *)(a1 + 8) + 248));
        DWORD1(v175) = v88;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v87 + 128))(v87, &v175);
        v89 = *(_QWORD *)(a1 + 224);
        DWORD2(v175) = 0;
        *(_QWORD *)&v175 = 0;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v89 + 152))(v89, &v175);
      }
      WebCore::RenderLayerCompositor::updateScrollLayerClipping((_QWORD *)a1);
      v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                              + 24)
                                                                                  + 8)
                                                                      + 40)
                                                          + 8)
                                              + 528)
                                  + 8)
                      + 24);
      if (v91)
      {
        v92 = *(WebCore::InspectorInstrumentation **)(v91 + 8);
        v93 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
        if (v93 && v92)
        {
          v94 = WebCore::InspectorInstrumentation::instrumentingAgents(v92, v90);
          WebCore::InspectorInstrumentation::layerTreeDidChangeImpl(v94);
        }
      }
      else
      {
        atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
      }
      v95 = *(WebCore::RenderView **)(a1 + 8);
      if (*((_BYTE *)v95 + 441))
      {
        WebCore::RenderView::repaintRootContents(v95);
        *(_BYTE *)(*(_QWORD *)(a1 + 8) + 441) = 0;
      }
      goto LABEL_31;
    }
    v171 = 0uLL;
    LOBYTE(v172) = 1;
    v173 = 0;
    v174 = 0;
    v34 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)
                                                         + 40)
                                             + 8)
                                 + 528)
                     + 8);
    if (*(_QWORD **)(v34[16] + 8) == v34)
    {
LABEL_48:
      v35 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v34[3] + 8));
      v36 = v35;
      if (v35)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                                                                                                + 8)
                                                                                    + 40)
                                                                        + 8)
                                                            + 528)
                                                + 8)
                                    + 632)
                        + 8);
        v38 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v35 + 440))(v35, *(_QWORD *)(v37 + 32), *(_QWORD *)(v37 + 40));
      }
      else
      {
        v38 = 0;
      }
      v169 = 0uLL;
      v170 = 0;
      v167 = 0;
      v168 = 0;
      WebCore::RenderLayerCompositor::updateBackingAndHierarchy(a1, v16, (unint64_t)&v167, &v169, &v171, 0);
      v40 = *(_QWORD *)(a1 + 8);
      if (!v174
        || (v41 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) + 40) + 8) + 528)
                                                                                                + 8)
                                                                                    + 24)
                                                                        + 8)),
            v40 = *(_QWORD *)(a1 + 8),
            !v41)
        || (v42 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 40))(v41, *(_QWORD *)(v40 + 248)),
            v40 = *(_QWORD *)(a1 + 8),
            !v42)
        || (v43 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8)
                                                                                                + 40)
                                                                                    + 8)
                                                                        + 528)
                                                            + 8)
                                                + 24)
                                    + 8),
            (*(_QWORD *)(*((_QWORD *)v43 + 14) + 680) & 8) != 0))
      {
LABEL_126:
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 248) + 328) + 632) + 8) == *(_QWORD *)(*(_QWORD *)(v40 + 248) + 328))
        {
          if (*(_BYTE *)(a1 + 195))
          {
            v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 24) + 8) + 40)
                                                                                        + 8)
                                                                            + 528)
                                                                + 8)
                                                    + 24)
                                        + 8)
                            + 1232);
            v79 = *(unsigned int *)(v78 + 60);
            if ((_DWORD)v79)
            {
              v132 = *(_QWORD *)(v78 + 48);
              v133 = 8 * v79;
              while (!*(_BYTE *)(*(_QWORD *)v132 + 121))
              {
                v132 += 8;
                v133 -= 8;
                if (!v133)
                  goto LABEL_129;
              }
              v163 = WebCore::PageOverlayController::layerWithDocumentOverlays((WebCore::PageOverlayController *)v78);
              ++*(_DWORD *)(v163 + 8);
              *(_QWORD *)&v175 = v163;
              v164 = HIDWORD(v168);
              if (HIDWORD(v168) == (_DWORD)v168)
              {
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v167, (unint64_t)&v175);
                v165 = (_DWORD *)v175;
                *(_QWORD *)&v175 = 0;
                if (v165)
                {
                  if (v165[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v165 + 16))(v165);
                  else
                    --v165[2];
                }
              }
              else
              {
                *((_QWORD *)v167 + HIDWORD(v168)) = v163;
                HIDWORD(v168) = v164 + 1;
              }
            }
          }
        }
LABEL_129:
        if (HIDWORD(v168))
          goto LABEL_130;
        v119 = *(_DWORD *)(a1 + 200);
        v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)
                                                                                                 + 40)
                                                                                     + 8)
                                                                         + 528)
                                                             + 8)
                                                 + 24)
                                     + 8)
                         + 1232);
        WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(v120 + 32, v39);
        v121 = *(_QWORD *)(v120 + 32);
        if (v121)
          LODWORD(v121) = *(_DWORD *)(v121 - 12);
        if (v119 + (_DWORD)v121)
        {
LABEL_130:
          v80 = *(_QWORD *)(a1 + 224);
          if (v80)
            (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v80 + 56))(v80, &v167);
        }
        else
        {
          WebCore::RenderLayerCompositor::destroyRootLayer((_QWORD *)a1);
        }
        if (v36)
        {
          v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                                                                                                  + 8)
                                                                                      + 40)
                                                                          + 8)
                                                              + 528)
                                                  + 8)
                                      + 632)
                          + 8);
          if (v38 != (*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 440))(v36, *(_QWORD *)(v81 + 32), *(_QWORD *)(v81 + 40)))
          {
            v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 160);
            if (v110)
            {
              while (1)
              {
                do
                {
LABEL_186:
                  v111 = (_QWORD *)v110;
                  if (!*(_BYTE *)(v110 + 144))
                  {
                    v112 = *(_QWORD *)(v110 + 296);
                    if (v112)
                    {
                      v113 = *(WebCore::RenderView **)(v112 + 1944);
                      if (v113)
                      {
                        v114 = *((_QWORD *)v113 + 50);
                        if (!v114)
                        {
                          v159 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                          v114 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v159, v113);
                          v160 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v113 + 50);
                          *((_QWORD *)v113 + 50) = v114;
                          if (v160)
                          {
                            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v160);
                            WTF::fastFree(v161, v162);
                            v114 = *((_QWORD *)v113 + 50);
                          }
                        }
                        WebCore::RenderLayerCompositor::applyToCompositedLayerIncludingDescendants<WebCore::RenderLayerCompositor::invalidateEventRegionForAllLayers(void)::$_0>(*(_QWORD *)(*(_QWORD *)(v114 + 8) + 144));
                      }
                    }
                  }
                  v110 = v111[11];
                }
                while (v110);
                v115 = *(_QWORD *)(v111[6] + 8);
                if (!v115)
                  break;
                v110 = v111[9];
                if (!v110)
                {
                  while (1)
                  {
                    v116 = *(_QWORD *)(v115 + 56);
                    if (!v116)
                      goto LABEL_134;
                    v115 = *(_QWORD *)(v116 + 8);
                    if (!v115)
                      goto LABEL_134;
                    v110 = *(_QWORD *)(v115 + 72);
                    if (v110)
                      goto LABEL_186;
                  }
                }
              }
            }
          }
        }
LABEL_134:
        v82 = *(_QWORD *)(a1 + 320);
        if (v82)
        {
          if (*(_DWORD *)(v82 - 12))
          {
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(a1 + 320), (uint64_t **)&v175);
            v166 = (uint64_t *)(a1 + 320);
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)(a1 + 320), (uint64_t **)&v186);
            if (*((_QWORD *)&v175 + 1) != *((_QWORD *)&v186 + 1))
            {
              v143 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                       + 24)
                                                                           + 8));
              WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v166, (uint64_t **)&v175);
              WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v166, (uint64_t **)&v186);
              for (i = *((_QWORD *)&v175 + 1); *((_QWORD *)&v175 + 1) != *((_QWORD *)&v186 + 1); i = *((_QWORD *)&v175 + 1))
              {
                v146 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)i + 8) + 256);
                if (v146)
                {
                  v147 = *(unsigned int **)(v146 + 48);
                  if (v147)
                  {
                    v148 = v147[3];
                    if ((_DWORD)v148)
                    {
                      v149 = 96 * v148;
                      v150 = (_QWORD *)(*(_QWORD *)v147 + 72);
                      do
                      {
                        if (*((_BYTE *)v150 - 16))
                        {
                          v151 = *(_QWORD *)(*(_QWORD *)(*(v150 - 9) + 8) + 256);
                          if (v151)
                          {
                            v152 = *(_QWORD *)(v151 + 224);
                            if (v152)
                            {
                              v153 = *(v150 - 1);
                              v154 = *v150;
                              v155 = *(_QWORD *)(v151 + 232);
                              v156 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
                              LODWORD(v193) = 1;
                              v192 = v156;
                              *v156 = v152;
                              v156[1] = v155;
                              HIDWORD(v193) = 1;
                              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v143 + 344))(v143, v153, v154, &v192);
                              v158 = (WTF *)v192;
                              if (v192)
                              {
                                v192 = 0;
                                LODWORD(v193) = 0;
                                WTF::fastFree(v158, v157);
                              }
                            }
                          }
                        }
                        v150 += 12;
                        v149 -= 96;
                      }
                      while (v149);
                    }
                  }
                }
                WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v175);
              }
              WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)v166, v144);
            }
          }
        }
        v83 = v167;
        if (HIDWORD(v168))
        {
          v122 = 8 * HIDWORD(v168);
          do
          {
            v123 = *(_DWORD **)v83;
            *(_QWORD *)v83 = 0;
            if (v123)
            {
              if (v123[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v123 + 16))(v123);
              else
                --v123[2];
            }
            v83 = (WTF *)((char *)v83 + 8);
            v122 -= 8;
          }
          while (v122);
          v83 = v167;
        }
        if (v83)
        {
          v167 = 0;
          LODWORD(v168) = 0;
          WTF::fastFree(v83, v39);
        }
        goto LABEL_139;
      }
      v197[0] = WebCore::Page::scrollingCoordinator(v43);
      v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248) + 328) + 296);
      v45 = 0uLL;
      if (v44)
      {
        v46 = *(_QWORD *)(v44 + 1944);
        if (v46)
        {
          v47 = *(_QWORD *)(*(_QWORD *)(v46 + 144) + 256);
          if (v47)
            v45 = *(_OWORD *)(v47 + 224);
        }
      }
      v196 = v45;
      v48 = *(_QWORD *)(a1 + 312);
      if (v48)
        v49 = *(_DWORD *)(v48 - 12);
      else
        v49 = 0;
      v50 = (v49 - 1) | ((v49 - 1) >> 1) | (((v49 - 1) | ((v49 - 1) >> 1)) >> 2);
      v51 = v50 | (v50 >> 4) | ((v50 | (v50 >> 4)) >> 8);
      v52 = (v51 | HIWORD(v51)) + 1;
      if (v52 > 0x400)
      {
        if (v52 > 2 * (unint64_t)v49)
          goto LABEL_184;
      }
      else if (3 * v52 > 4 * (unint64_t)v49)
      {
LABEL_63:
        v53 = (double)v49;
        v54 = (double)v52;
        v55 = 0.604166667;
        goto LABEL_64;
      }
      LODWORD(v52) = 2 * v52;
      if (v52 <= 0x400)
        goto LABEL_63;
LABEL_184:
      v53 = (double)v49;
      v54 = (double)v52;
      v55 = 0.416666667;
LABEL_64:
      if (v54 * v55 <= v53)
        LODWORD(v52) = 2 * v52;
      if (v52 <= 8)
        v56 = 8;
      else
        v56 = v52;
      v57 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * v56 + 16));
      v195 = v57 + 4;
      v57[2] = v56 - 1;
      v57[3] = v56;
      *v57 = 0;
      *(v195 - 3) = 0;
      v58 = *(_QWORD *)(a1 + 312);
      if (v58)
      {
        v59 = *(unsigned int *)(v58 - 4);
        v60 = (__int128 *)(v58 + 24 * v59);
        if (*(_DWORD *)(v58 - 12))
        {
          v61 = *(__int128 **)(a1 + 312);
          if ((_DWORD)v59)
          {
            v62 = 24 * v59;
            v61 = *(__int128 **)(a1 + 312);
            while (*v61 == 0 || *((_QWORD *)v61 + 1) == -1)
            {
              v61 = (__int128 *)((char *)v61 + 24);
              v62 -= 24;
              if (!v62)
              {
                v61 = v60;
                break;
              }
            }
          }
LABEL_80:
          if (v58)
            v64 = (__int128 *)(v58 + 24 * *(unsigned int *)(v58 - 4));
          else
            v64 = 0;
          while (v61 != v64)
          {
            v186 = *v61;
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::add((uint64_t *)&v195, &v186, (uint64_t)&v175);
            v65 = (__int128 *)((char *)v61 + 24);
            v61 = v60;
            if (v65 != v60)
            {
              v61 = v65;
              while (*v61 == 0 || *((_QWORD *)v61 + 1) == -1)
              {
                v61 = (__int128 *)((char *)v61 + 24);
                if (v61 == v60)
                {
                  v61 = v60;
                  break;
                }
              }
            }
          }
          v192 = (uint64_t *)&v195;
          v193 = &v196;
          v194 = v197;
          v191[0] = v197;
          v191[1] = &v196;
          v67 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248) + 568);
          if (v67)
          {
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v67, (uint64_t **)&v175);
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v67, (uint64_t **)&v186);
            v134 = *((_QWORD *)&v175 + 1);
            if (*((_QWORD *)&v175 + 1) == *((_QWORD *)&v186 + 1))
            {
              v135 = 0;
            }
            else
            {
              v135 = 0;
              do
              {
                v136 = *(WebCore::RenderObject **)(*(_QWORD *)v134 + 8);
                v137 = WebCore::RenderObject::enclosingLayer(v136);
                if (v137)
                {
                  v139 = v137;
                  v140 = (_QWORD *)(*(WebCore::RenderObject **)(v137 + 32) == v136 ? v137 + 184 : v137 + 192);
                  if (*v140)
                  {
                    v141 = WebCore::RenderLayerCompositor::asyncScrollableContainerNodeID(v136, v138);
                    v190[0] = v141;
                    v190[1] = v142;
                    if (v141)
                    {
                      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v197[0] + 352))(v197[0], v141, v142, 16);
                      WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::remove((uint64_t *)&v195, v190);
                      v135 = 1;
                    }
                    else
                    {
                      v135 |= (*(_BYTE *)(v139 + 26) & 0x80) == 0;
                    }
                  }
                }
                WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v175);
                v134 = *((_QWORD *)&v175 + 1);
              }
              while (*((_QWORD *)&v175 + 1) != *((_QWORD *)&v186 + 1));
            }
            WebCore::RenderLayerCompositor::updateSynchronousScrollingNodes(void)::$_1::operator()(v191, v135 & 1);
            WebCore::RenderLayerCompositor::updateSynchronousScrollingNodes(void)::$_0::operator()(&v192);
LABEL_123:
            if (v195)
              WTF::fastFree((WTF *)(v195 - 4), v39);
            v40 = *(_QWORD *)(a1 + 8);
            goto LABEL_126;
          }
          v68 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v197[0] + 360))(v197[0], v196, *((_QWORD *)&v196 + 1));
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v197[0] + 352))(v197[0], v196, *((_QWORD *)&v196 + 1), v68 & 0xEF);
          if (v195)
          {
            v69 = *(v195 - 1);
            v70 = (uint64_t)&v195[4 * v69];
            if (*(v195 - 3))
            {
              v71 = (uint64_t)v195;
              if ((_DWORD)v69)
              {
                v72 = 16 * v69;
                v71 = (uint64_t)v195;
                while (*(_OWORD *)v71 == 0 || *(_QWORD *)(v71 + 8) == -1)
                {
                  v71 += 16;
                  v72 -= 16;
                  if (!v72)
                  {
                    v71 = v70;
                    goto LABEL_105;
                  }
                }
              }
              goto LABEL_105;
            }
            v71 = (uint64_t)&v195[4 * v69];
          }
          else
          {
            v71 = 0;
            v69 = 0;
          }
          v70 = (uint64_t)&v195[4 * v69];
LABEL_105:
          if (v195)
            v74 = &v195[4 * *(v195 - 1)];
          else
            v74 = 0;
          while ((_DWORD *)v71 != v74)
          {
            v39 = *(void **)v71;
            if (*(_QWORD *)v71 != (_QWORD)v196 || *(_QWORD *)(v71 + 8) != *((_QWORD *)&v196 + 1))
              (*(void (**)(_QWORD))(*(_QWORD *)v197[0] + 352))(v197[0]);
            v76 = v71 + 16;
            v71 = v70;
            if (v76 != v70)
            {
              v71 = v76;
              while (*(_OWORD *)v71 == 0 || *(_QWORD *)(v71 + 8) == -1)
              {
                v71 += 16;
                if (v71 == v70)
                {
                  v71 = v70;
                  break;
                }
              }
            }
          }
          goto LABEL_123;
        }
        v61 = (__int128 *)(v58 + 24 * v59);
      }
      else
      {
        v61 = 0;
        LODWORD(v59) = 0;
      }
      v60 = (__int128 *)(v58 + 24 * v59);
      goto LABEL_80;
    }
    v96 = v34[37];
    if (v96)
      v97 = v34[36] == 0;
    else
      v97 = 1;
    if (v97)
      goto LABEL_176;
    v98 = *(_QWORD *)(v96 + 528);
    if (!v98)
      goto LABEL_176;
    v99 = *(_QWORD *)(v98 + 8);
    if (!v99)
      goto LABEL_176;
    v100 = *(_QWORD *)(v99 + 120);
    if (!v100)
      goto LABEL_176;
    v101 = *(_QWORD *)(v100 + 8);
    if (!v101)
      goto LABEL_176;
    v102 = *(_QWORD *)(v101 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v102)
      goto LABEL_176;
    if ((*(_BYTE *)((*(_QWORD *)(v101 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941734A8);
    }
    v103 = (*(unsigned __int8 *)((*(_QWORD *)(v101 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)(v102 + 52) & 7) != 3)
      v103 = 0;
    if (v103 != 1)
    {
LABEL_176:
      LOBYTE(v106) = 0;
      v107 = 0;
LABEL_177:
      *(_QWORD *)&v171 = v106 | (v4 << 8);
      *((_QWORD *)&v171 + 1) = v3;
      LOBYTE(v172) = v107;
      goto LABEL_48;
    }
    v104 = *(_DWORD *)(v102 + 224);
    *(_DWORD *)(v102 + 224) = v104 + 1;
    if ((*(_BYTE *)(v102 + 21) & 0x80) != 0 && (v105 = *(_QWORD *)(*(_QWORD *)(v102 + 144) + 256)) != 0)
    {
      v106 = *(_QWORD *)(v105 + 240);
      if (v106)
      {
        v3 = *(WTF ***)(v105 + 248);
        v4 = v106 >> 8;
        v107 = 1;
        goto LABEL_165;
      }
    }
    else
    {
      LOBYTE(v106) = 0;
    }
    v107 = 0;
LABEL_165:
    if (v104)
    {
      *(_DWORD *)(v102 + 224) = v104;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
      v34 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 8)
                                                           + 40)
                                               + 8)
                                   + 528)
                       + 8);
    }
    goto LABEL_177;
  }
LABEL_31:
  v22 = 1;
LABEL_32:
  kdebug_trace();
  return v22;
}

uint64_t WebCore::GraphicsLayerCA::noteSublayersChanged(uint64_t result, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  v3 = (_QWORD *)result;
  if ((*(_WORD *)(result + 177) & 1) != 0)
  {
    do
    {
LABEL_9:
      result = (*(uint64_t (**)(_QWORD *))(*v3 + 848))(v3);
      if ((result & 1) == 0)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x1941737C8);
      }
      if (!v3[86])
        return result;
      v6 = v3[27];
      if (v6)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 848))(v3[27]) & 1) == 0)
          goto LABEL_19;
        result = WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v6, 0x200000, a2);
      }
      v3 = (_QWORD *)v3[25];
    }
    while (v3);
  }
  else
  {
    v4 = *(_QWORD *)(result + 616);
    *(_QWORD *)(result + 616) = v4 | 4;
    if (!*(_BYTE *)(result + 889))
    {
      for (i = *(_QWORD *)(result + 200); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
    }
    if (!a2 && !v4)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), result);
      goto LABEL_9;
    }
    if (result)
      goto LABEL_9;
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setSize(uint64_t this, const WebCore::FloatSize *a2, __n128 a3, __n128 a4)
{
  uint64_t v5;

  a3.n128_u32[0] = *(_DWORD *)a2;
  a4.n128_u32[0] = *((_DWORD *)a2 + 1);
  if (*(float *)a2 != *(float *)(this + 88) || a4.n128_f32[0] != *(float *)(this + 92))
  {
    v5 = this;
    *(_QWORD *)(this + 88) = *(_QWORD *)a2;
    if ((*(unsigned int (**)(uint64_t, __n128, __n128))(*(_QWORD *)this + 920))(this, a3, a4))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 320))(v5);
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v5, 8, 0);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setPosition(uint64_t this, const WebCore::FloatPoint *a2)
{
  if (*(float *)a2 != *(float *)(this + 56) || *((float *)a2 + 1) != *(float *)(this + 60))
  {
    if (*(_BYTE *)(this + 72))
      *(_BYTE *)(this + 72) = 0;
    *(_QWORD *)(this + 56) = *(_QWORD *)a2;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 8, 0);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setAnchorPoint(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  if (*(float *)a2 != *(float *)(result + 76)
    || *((float *)a2 + 1) != *(float *)(result + 80)
    || *((float *)a2 + 2) != *(float *)(result + 84))
  {
    v2 = *a2;
    *(_DWORD *)(result + 84) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(result + 76) = v2;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(result, 8, 0);
  }
  return result;
}

_QWORD *WebCore::RenderLayerCompositor::updateScrollLayerClipping(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  float v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v1 = this;
  v2 = this[29];
  if (v2 || (v2 = this[30]) != 0)
  {
    v3 = WebCore::ScrollView::sizeForVisibleContent(*(WebCore::ScrollView **)(this[1] + 248), 0);
    *(float *)&v19 = (float)(int)v3;
    *((float *)&v19 + 1) = (float)SHIDWORD(v3);
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 160))(v2, &v19);
    v4 = *(_QWORD **)(v1[1] + 248);
    v5 = (float)(int)((unint64_t)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v4[8] + 832))(v4 + 8, 0, 1) >> 32);
    v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 720))(v4);
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)(v6 + 128) + 8) == v6)
    {
      v15 = *(_QWORD *)(v6 + 24);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
          v9 = *(float *)(v16 + 372);
      }
    }
    do
    {
      v10 = __ldaxr(v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v7));
    if (!v11)
    {
      atomic_store(1u, v7);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E31FE290;
      v17[1] = v7;
      v19 = v17;
      WTF::ensureOnMainThread();
      v18 = v19;
      v19 = 0;
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
    v12 = 0.0;
    v13 = fmaxf(v5, 0.0);
    if (v13 >= v9)
      v14 = 0.0;
    else
      v14 = v9 - v13;
    if (v9 != 0.0)
      v12 = v14;
    LODWORD(v19) = 0;
    *((float *)&v19 + 1) = v12;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 128))(v2, &v19);
  }
  return this;
}

float WebCore::LocalFrameView::positionForRootContentLayer(WebCore::LocalFrameView *this)
{
  int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
  v2 = *((_DWORD *)this + 24);
  v3 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E31FE290;
    v13[1] = v4;
    v15 = v13;
    WTF::ensureOnMainThread();
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  v8 = (unsigned int *)((*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this) + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  do
  {
    v10 = __ldaxr(v8);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v8));
  if (!v11)
  {
    atomic_store(1u, v8);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E31FE290;
    v14[1] = v8;
    v16 = v14;
    WTF::ensureOnMainThread();
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return 0.0 - (float)v2;
}

BOOL WebCore::GraphicsLayerCA::shouldRepaintOnSizeChange(WebCore::GraphicsLayerCA *this)
{
  return (*(_WORD *)((_BYTE *)this + 177) & 0x20) != 0
      && (*(uint64_t (**)(WebCore::GraphicsLayerCA *))(*(_QWORD *)this + 832))(this) == 0;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::OverlapMapContainer>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  WTF *v11;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF **)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        v9 = *(WTF **)(v8 + 40);
        if (v9)
        {
          *(_QWORD *)(v8 + 40) = 0;
          *(_DWORD *)(v8 + 48) = 0;
          WTF::fastFree(v9, a2);
        }
        v10 = *(_DWORD *)(v8 + 36);
        if (v10)
          WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*(WTF **)(v8 + 24), (WTF *)(*(_QWORD *)(v8 + 24) + 72 * v10));
        v11 = *(WTF **)(v8 + 24);
        if (v11)
        {
          *(_QWORD *)(v8 + 24) = 0;
          *(_DWORD *)(v8 + 32) = 0;
          WTF::fastFree(v11, a2);
        }
        WTF::fastFree((WTF *)v8, a2);
      }
      v6 = (WTF *)((char *)v6 + 8);
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::GraphicsLayerCA::willModifyChildren(WebCore::GraphicsLayerCA *this)
{
  return WebCore::GraphicsLayerCA::noteSublayersChanged((uint64_t)this, 0);
}

unint64_t WebCore::ScrollView::sizeForVisibleContent(WebCore::ScrollView *this, BOOL a2)
{
  char *v3;
  int v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WebCore::Widget *v11;
  int v12;
  WebCore::Widget *v13;
  unint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  const CGRect *v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  const CGRect *v24;
  int v25;
  int v26;
  int v27;
  CGRect v28;

  if (*((_QWORD *)this + 5))
    return WebCore::ScrollView::platformVisibleContentSizeIncludingObscuredArea(this, a2);
  if (a2)
  {
    LODWORD(v5) = 0;
    v4 = 0;
  }
  else
  {
    v3 = (char *)this + 64;
    if (!(*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 400))((char *)this + 64)
      || (v11 = (WebCore::Widget *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 400))((char *)this + 64),
          ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v11 + 272))(v11) & 1) != 0))
    {
      v4 = 0;
    }
    else
    {
      WebCore::Widget::frameRect(v11);
      v4 = v12;
    }
    if (!(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 392))((char *)this + 64)
      || (v13 = (WebCore::Widget *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 392))((char *)this + 64),
          ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v13 + 272))(v13) & 1) != 0))
    {
      LODWORD(v5) = 0;
    }
    else
    {
      WebCore::Widget::frameRect(v13);
      v5 = HIDWORD(v14);
    }
    v6 = (void *)*((_QWORD *)this + 5);
    if (v6)
    {
      v27 = v5;
      if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
        v6 = (void *)objc_msgSend(v6, "superview");
      objc_msgSend(v6, "frame");
      v28.origin.x = v20;
      v28.origin.y = v21;
      v28.size.width = v22;
      v28.size.height = v23;
      WebCore::enclosingIntRect(&v28, v24);
      LODWORD(v5) = v27;
      goto LABEL_9;
    }
  }
  v7 = *((_QWORD *)this + 7);
LABEL_9:
  v8 = (void *)*((_QWORD *)this + 5);
  if (v8)
  {
    v25 = v7;
    v26 = v5;
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE342188))
      v8 = (void *)objc_msgSend(v8, "superview");
    objc_msgSend(v8, "frame");
    v28.origin.x = v15;
    v28.origin.y = v16;
    v28.size.width = v17;
    v28.size.height = v18;
    WebCore::enclosingIntRect(&v28, v19);
    HIDWORD(v9) = HIDWORD(v7);
    LODWORD(v7) = v25;
    LODWORD(v5) = v26;
  }
  else
  {
    v9 = *((_QWORD *)this + 7);
  }
  return ((_DWORD)v7 - v4) & ~(((int)v7 - v4) >> 31) | ((unint64_t)((HIDWORD(v9) - (_DWORD)v5) & ~((HIDWORD(v9) - (int)v5) >> 31)) << 32);
}

BOOL WebCore::LocalFrameView::isScrollable(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  __int16 v22;

  if (*(_BYTE *)(a1 + 475))
    return 0;
  v3 = a1 + 64;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 496))(a1 + 64);
  v5 = v4;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 528))(v3) + HIDWORD(v4);
  v7 = v6 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 536))(v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 832))(v3, 0, 1);
  result = 0;
  if (v7 > v9 || v5 > v8)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 120);
    if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
    {
LABEL_19:
      v22 = 0;
      WebCore::LocalFrameView::calculateScrollbarModesForLayout(a1, (char *)&v22 + 1, (char *)&v22, 0);
      return HIBYTE(v22) != 1 || v22 != 1;
    }
    v13 = *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v13)
      return 0;
    if ((*(_BYTE *)(v13 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194174118);
    }
    v14 = *(_DWORD *)(*(_QWORD *)(v13 + 104) + 236);
    if ((v14 & 0x4000000) != 0)
      return 0;
    if ((*(_BYTE *)(v13 + 120) & 0x30) != 0)
      return 0;
    v15 = *(_QWORD *)(v13 + 32);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 104) + 239) & 0x18) != 0)
          return 0;
      }
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
    if (*(_BYTE *)(v18 + 3441))
    {
      v20 = v14 & 0x1000000;
      if (*(_QWORD *)(v18 + 1272) != v17 || v20 != 0)
        return 0;
    }
    else if ((v14 & 0x1000000) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(v13 + 124) & 0x3C0) != 0)
      goto LABEL_19;
    return 0;
  }
  return result;
}

_QWORD *WebCore::RenderLayerCompositor::enableCompositingMode(_QWORD *this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (*((unsigned __int8 *)this + 195) != a2)
  {
    v2 = this;
    *((_BYTE *)this + 195) = a2;
    if (a2)
    {
      this = WebCore::RenderLayerCompositor::ensureRootLayer(this);
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2[1] + 24) + 8) + 40) + 8) + 528);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 120);
          if (v5)
          {
            this = *(_QWORD **)(v5 + 8);
            if (this)
              this = WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition((WebCore::HTMLFrameOwnerElement *)this);
          }
        }
      }
    }
    else
    {
      this = WebCore::RenderLayerCompositor::destroyRootLayer(this);
    }
    v6 = *(_QWORD *)(v2[1] + 144);
    *(_DWORD *)(v6 + 12) |= 8u;
    if ((*(_BYTE *)(v6 + 24) & 4) != 0)
    {
      v6 = *(_QWORD *)(v6 + 40);
      if (v6)
      {
LABEL_12:
        do
        {
          v7 = *(_DWORD *)(v6 + 12);
          if ((v7 & 1) != 0)
            break;
          *(_DWORD *)(v6 + 12) = v7 | 1;
          if ((*(_BYTE *)(v6 + 24) & 4) == 0)
          {
            while (1)
            {
              v6 = *(_QWORD *)(v6 + 40);
              if (!v6)
                return this;
              if ((*(_BYTE *)(v6 + 24) & 0x4A) != 0)
                goto LABEL_16;
            }
          }
          v6 = *(_QWORD *)(v6 + 40);
LABEL_16:
          ;
        }
        while (v6);
      }
    }
    else
    {
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 40);
        if (!v6)
          break;
        if ((*(_BYTE *)(v6 + 24) & 0x4A) != 0)
          goto LABEL_12;
      }
    }
  }
  return this;
}

void WebCore::ResourceResponse::disableLazyInitialization(WebCore::ResourceResponse *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
}

uint64_t WebCore::GraphicsLayerClient::layerContainsBitmapOnly()
{
  return 0;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)90,(WebCore::CSSValueID)91,(WebCore::CSSValueID)92,(WebCore::CSSValueID)93>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  int v4;
  int v5;
  int v6;
  __int128 *v8;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_3;
  v8 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_3;
  v9 = *((_DWORD *)v8 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v9;
  }
  if ((unsigned __int16)v9 - 90 > 3)
  {
LABEL_3:
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v6 = v15 & 0xFF00;
    v4 = v15;
    v5 = 0x10000;
  }
  return v5 | v4 | v6;
}

uint64_t WebCore::Element::isFormControlElement(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::RenderBlock::isSelfCollapsingBlock(WebCore::RenderBlock *this)
{
  int *v1;
  uint64_t result;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  const WebCore::Length *v18;
  const WebCore::Length *v19;
  const WebCore::Length *v20;
  int v21;
  uint64_t v22;
  WebCore::RenderObject *v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;

  v1 = (int *)((char *)this + 160);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v1 = (int *)((char *)this + 164);
  if (*v1 > 0)
    return 0;
  result = 0;
  v4 = *((unsigned __int8 *)this + 46);
  if (v4 != 35 && v4 != 63)
  {
    v5 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1048))(this);
    v6 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 960))(this);
    if (__OFADD__(v5, v6))
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v7 = v5 + v6;
    v8 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1056))(this);
    v9 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 968))(this);
    result = 0;
    v10 = __OFADD__(v8, v9);
    v11 = v8 + v9;
    if (v10)
      v11 = (v8 >> 31) + 0x7FFFFFFF;
    v10 = __OFADD__(v7, v11);
    v12 = v7 + v11;
    if (!v10 && !v12)
    {
      v13 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      v15 = v14 + 20;
      if (v13 >= 4)
        v15 = v14 + 36;
      v16 = *(unsigned __int8 *)(v15 + 4);
      if (v16 != 11)
      {
        if (v16 == 13)
          goto LABEL_24;
        if (*(_BYTE *)(v15 + 6))
        {
          if (*(float *)v15 <= 0.0)
            goto LABEL_24;
        }
        else if (*(int *)v15 <= 0)
        {
LABEL_24:
          v17 = v13 >= 4;
          v18 = (const WebCore::Length *)(v14 + 4);
          v19 = (const WebCore::Length *)(v14 + 12);
          if (v17)
            v20 = v19;
          else
            v20 = v18;
          WebCore::Length::Length((WebCore::Length *)&v30, v20);
          v21 = v31;
          if ((v31 & 0xF7) == 3)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) != 2)
            {
              v23 = WebCore::RenderObject::containingBlock(this);
              if (!v23)
                goto LABEL_29;
              v24 = 1;
              do
              {
                v25 = *((unsigned __int8 *)v23 + 46);
                if (v25 == 49)
                  break;
                v26 = *(_QWORD *)(*((_QWORD *)v23 + 11) + 8);
                v27 = v26 + 4;
                v28 = v26 + 12;
                if (((*((_DWORD *)v23 + 31) >> 13) & 6u) - 2 >= 4)
                  v27 = v28;
                if (*(_BYTE *)(v27 + 4) == 4 || v25 == 37)
                  v24 = 0;
                v23 = WebCore::RenderObject::containingBlock(v23);
              }
              while (v23);
              if ((v24 & 1) != 0)
                goto LABEL_29;
              v21 = v31;
            }
          }
          else if (!v31)
          {
            goto LABEL_29;
          }
          if (v21 != 4)
          {
            if ((v21 & 0xFFFFFFF7) != 3)
            {
              v22 = 0;
              goto LABEL_32;
            }
            if (v21 == 11)
              goto LABEL_51;
          }
          if (v32)
          {
            if (*(float *)&v30 != 0.0)
              goto LABEL_51;
          }
          else if (*(float *)&v30 != 0.0)
          {
            goto LABEL_51;
          }
LABEL_29:
          if ((WebCore::RenderElement::createsNewFormattingContext(this) & 1) == 0)
          {
            v22 = (*(unsigned int (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1832))(this) ^ 1;
LABEL_31:
            v21 = v31;
LABEL_32:
            if (v21 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
            }
            return v22;
          }
LABEL_51:
          v22 = 0;
          goto LABEL_31;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::RenderBlockFlow::getClearDelta(uint64_t *a1, _DWORD *a2, signed int a3)
{
  uint64_t result;
  const WebCore::RenderObject *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int *v11;
  int v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int *v19;
  int v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  unsigned int NextFloatLogicalBottomBelowForBlock;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 1672))(a1);
  if ((_DWORD)result)
  {
    v8 = WebCore::RenderStyle::usedClear((WebCore::RenderStyle *)a2, v7);
    switch((int)v8)
    {
      case 0:
        goto LABEL_9;
      case 1:
        goto LABEL_6;
      case 2:
        LOBYTE(v8) = 2;
        goto LABEL_6;
      case 3:
        LOBYTE(v8) = 3;
LABEL_6:
        v9 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom((uint64_t)a1, v8);
        break;
      default:
        v9 = 0;
        break;
    }
    v10 = __OFSUB__(v9, a3);
    result = (v9 - a3);
    if (v10)
    {
      return 0x7FFFFFFFLL;
    }
    else if ((int)result <= 0)
    {
LABEL_9:
      result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 1504))(a2, v8);
      if ((_DWORD)result)
      {
        NextFloatLogicalBottomBelowForBlock = a3;
        while (1)
        {
          if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
            v11 = a2 + 40;
          else
            v11 = a2 + 41;
          v12 = WebCore::RenderBlock::availableLogicalWidthForLine((uint64_t)a1, NextFloatLogicalBottomBelowForBlock, *v11);
          if (v12 == WebCore::RenderBlock::availableLogicalWidthForContent(a1, NextFloatLogicalBottomBelowForBlock))
          {
            if (__OFSUB__(NextFloatLogicalBottomBelowForBlock, a3))
              return (NextFloatLogicalBottomBelowForBlock >> 31) + 0x7FFFFFFF;
            else
              return NextFloatLogicalBottomBelowForBlock - a3;
          }
          if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
            v13 = a2 + 38;
          else
            v13 = a2 + 39;
          WebCore::RenderBlock::fragmentAtBlockOffset(a1, *v13);
          v14 = *((_QWORD *)a2 + 20);
          v24 = *((_DWORD *)a1 + 5);
          if (((a2[31] >> 13) & 6u) - 2 <= 3)
            v15 = HIDWORD(v14);
          else
            LODWORD(v15) = *((_QWORD *)a2 + 20);
          v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 1096))(a2);
          v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 1104))(a2);
          if (((a2[31] >> 13) & 6u) - 2 < 4)
          {
            v18 = a2[38];
            a2[38] = NextFloatLogicalBottomBelowForBlock;
          }
          else
          {
            v18 = a2[39];
            a2[39] = NextFloatLogicalBottomBelowForBlock;
          }
          (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 1304))(a2);
          if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
            v19 = a2 + 38;
          else
            v19 = a2 + 39;
          WebCore::RenderBlock::fragmentAtBlockOffset(a1, *v19);
          v20 = a2[41];
          if ((*((_BYTE *)a1 + 21) & 0x10) == 0)
            v20 = a2[40];
          if (((a2[31] >> 13) & 6u) - 2 < 4)
          {
            a2[38] = v18;
            a2[41] = v15;
          }
          else
          {
            a2[39] = v18;
            a2[40] = v15;
          }
          a2[45] = v16;
          a2[43] = v17;
          if (v12 >= v20)
            break;
          v21 = (_QWORD *)a1[27];
          if (v21)
            NextFloatLogicalBottomBelowForBlock = WebCore::FloatingObjects::findNextFloatLogicalBottomBelowForBlock(v21, NextFloatLogicalBottomBelowForBlock);
          result = 0;
          if ((int)NextFloatLogicalBottomBelowForBlock < a3)
            return result;
        }
        if ((v24 & 0x1000) != 0)
          v22 = HIDWORD(v14);
        else
          v22 = v14;
        if (v22 != v20)
        {
          v23 = a2[5];
          if ((v23 & 0x20) == 0)
            a2[5] = v23 | 0x20;
        }
        result = NextFloatLogicalBottomBelowForBlock - a3;
        if (__OFSUB__(NextFloatLogicalBottomBelowForBlock, a3))
          return (NextFloatLogicalBottomBelowForBlock >> 31) + 0x7FFFFFFF;
      }
    }
  }
  return result;
}

BOOL WebCore::RenderBlockFlow::containsFloats(WebCore::RenderBlockFlow *this)
{
  uint64_t *v1;
  uint64_t v3;

  v1 = (uint64_t *)*((_QWORD *)this + 27);
  return v1 && (v3 = *v1) != 0 && *(_DWORD *)(v3 - 12) != 0;
}

uint64_t WebCore::RenderBlockFlow::selfCollapsingMarginBeforeWithClear(WebCore::RenderBlockFlow *this, WebCore::RenderObject *a2)
{
  const WebCore::RenderObject *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  signed int *v10;
  int ClearDelta;
  char *v12;
  char *v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;

  if (!a2 || (*((_BYTE *)a2 + 52) & 7) != 1)
  {
    v7 = 0;
    LOBYTE(v6) = 0;
    v5 = 0;
    return v7 & 0xFFFFFF00 | (unint64_t)v6 | v5 & 0x100000000;
  }
  ++*((_DWORD *)a2 + 4);
  if (!(*(unsigned int (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 1240))(a2)
    || !WebCore::RenderStyle::usedClear(a2, v4)
    || !(*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1672))(this))
  {
    goto LABEL_4;
  }
  v10 = ((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4
      ? (signed int *)((char *)a2 + 164)
      : (signed int *)((char *)a2 + 160);
  ClearDelta = WebCore::RenderBlockFlow::getClearDelta((uint64_t *)this, a2, *v10);
  v12 = (char *)a2 + 152;
  if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
  {
    v13 = (char *)a2 + 160;
  }
  else
  {
    v12 = (char *)a2 + 156;
    v13 = (char *)a2 + 164;
  }
  v14 = *(_DWORD *)v12;
  v15 = *(_DWORD *)v13;
  v16 = __OFADD__(v14, v15);
  v17 = v14 + v15;
  v18 = (v14 >> 31) + 0x7FFFFFFF;
  if (!v16)
    v18 = v17;
  if (ClearDelta >= v18)
  {
    v6 = WebCore::RenderBlockFlow::marginValuesForChild(this, a2);
    v7 = v6 & 0xFFFFFF00;
    v5 = 0x100000000;
  }
  else
  {
LABEL_4:
    v5 = 0;
    LOBYTE(v6) = 0;
    v7 = 0;
  }
  v8 = *((_DWORD *)a2 + 4);
  if (v8)
  {
    *((_DWORD *)a2 + 4) = v8 - 1;
    return v7 & 0xFFFFFF00 | (unint64_t)v6 | v5 & 0x100000000;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::RenderBlockFlow::marginValuesForChild(WebCore::RenderBlockFlow *this, WebCore::RenderBox *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;

  v3 = *((_BYTE *)a2 + 52) & 7;
  v4 = *((_QWORD *)a2 + 4);
  if (v4
    && (v5 = *(_QWORD *)(v4 + 8)) != 0
    && (v6 = *(_DWORD *)(v5 + 124),
        v7 = *((_DWORD *)a2 + 31),
        (((unsigned __int16)v7 ^ (unsigned __int16)v6) & 0xE000) == 0))
  {
    if (v3 == 1)
    {
      v8 = (unsigned int *)*((_QWORD *)a2 + 28);
      if (v8)
      {
        v10 = *v8;
        v13 = v8[1];
      }
      else
      {
        v9 = 3;
        switch((unsigned __int16)v7 >> 13)
        {
          case 1:
            v30 = *((_DWORD *)a2 + 44);
            v10 = v30 & ~(v30 >> 31);
LABEL_62:
            if (v30 == 0x80000000)
              v13 = 0x7FFFFFFFLL;
            else
              v13 = -v30 & ~(-v30 >> 31);
            return v10 | (unint64_t)(v13 << 32);
          case 2:
          case 4:
            goto LABEL_8;
          case 3:
          case 5:
            v9 = 1;
            goto LABEL_8;
          default:
            v9 = 0;
LABEL_8:
            v10 = *((_DWORD *)a2 + v9 + 42) & ~(*((int *)a2 + v9 + 42) >> 31);
            v11 = 3;
            switch((unsigned __int16)v7 >> 13)
            {
              case 1:
                v30 = *((_DWORD *)a2 + 44);
                goto LABEL_62;
              case 2:
              case 4:
                break;
              case 3:
              case 5:
                v11 = 1;
                break;
              default:
                v11 = 0;
                break;
            }
            v12 = *((_DWORD *)a2 + v11 + 42);
            if (v12 == 0x80000000)
              v13 = 0x7FFFFFFFLL;
            else
              v13 = -v12 & ~(-v12 >> 31);
            break;
        }
      }
      return v10 | (unint64_t)(v13 << 32);
    }
    v15 = ((unsigned __int16)v7 >> 13) - 1;
    v16 = 3;
    switch(v15)
    {
      case 0:
        v17 = (char *)a2 + 168;
        v18 = *((_DWORD *)a2 + 44);
LABEL_66:
        v19 = 0;
        goto LABEL_18;
      case 1:
      case 3:
        goto LABEL_16;
      case 2:
      case 4:
        v16 = 1;
        goto LABEL_16;
      default:
        v16 = 0;
LABEL_16:
        v17 = (char *)a2 + 168;
        v18 = *((_DWORD *)a2 + v16 + 42);
        v19 = 3;
        switch(v15)
        {
          case 0:
            goto LABEL_66;
          case 1:
          case 3:
            v19 = 1;
            break;
          case 2:
          case 4:
            break;
          default:
            v19 = 2;
            break;
        }
LABEL_18:
        v20 = *(_DWORD *)&v17[4 * v19];
        break;
    }
  }
  else if (((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
  {
    v26 = (char *)this + 80;
    v18 = (*(uint64_t (**)(WebCore::RenderBox *, char *))(*(_QWORD *)a2 + 1112))(a2, (char *)this + 80);
    v20 = (*(uint64_t (**)(WebCore::RenderBox *, char *))(*(_QWORD *)a2 + 1120))(a2, v26);
  }
  else
  {
    if (v3 == 1)
    {
      v10 = WebCore::RenderBlockFlow::maxPositiveMarginAfter(a2);
      v13 = WebCore::RenderBlockFlow::maxNegativeMarginAfter(a2);
      return v10 | (unint64_t)(v13 << 32);
    }
    v27 = 3;
    switch((unsigned __int16)*((_DWORD *)a2 + 31) >> 13)
    {
      case 1:
        v28 = (char *)a2 + 168;
        v18 = *((_DWORD *)a2 + 42);
LABEL_72:
        v29 = 2;
        goto LABEL_51;
      case 2:
      case 4:
        v27 = 1;
        goto LABEL_49;
      case 3:
      case 5:
        goto LABEL_49;
      default:
        v27 = 2;
LABEL_49:
        v28 = (char *)a2 + 168;
        v18 = *((_DWORD *)a2 + v27 + 42);
        v29 = 3;
        switch((unsigned __int16)*((_DWORD *)a2 + 31) >> 13)
        {
          case 1:
            goto LABEL_72;
          case 2:
          case 4:
            break;
          case 3:
          case 5:
            v29 = 1;
            break;
          default:
            v29 = 0;
            break;
        }
LABEL_51:
        v20 = *(_DWORD *)&v28[4 * v29];
        break;
    }
  }
  if (v18 == 0x80000000)
    v21 = 0x7FFFFFFF;
  else
    v21 = -v18;
  if (v18 <= 0)
    v22 = 0;
  else
    v22 = v18;
  if (v18 > 0)
    v21 = 0;
  if (!v18)
  {
    v22 = 0;
    v21 = 0;
  }
  if (v18 == 0x80000000)
    v23 = 0x7FFFFFFF;
  else
    v23 = -v18;
  if (v18 <= 0)
  {
    v24 = 0;
  }
  else
  {
    v23 = 0;
    v24 = v18;
  }
  if (!v18)
  {
    v23 = 0;
    v24 = 0;
  }
  v25 = v20 == 0;
  if (v20)
    v13 = v21;
  else
    v13 = v23;
  if (v25)
    v10 = v24;
  else
    v10 = v22;
  return v10 | (unint64_t)(v13 << 32);
}

uint64_t WebCore::RenderBlock::markForPaginationRelayoutIfNeeded(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  WebCore::RenderBlock *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944)
                 + 248);
  v2 = *(unsigned int *)(v1 + 508);
  if (!(_DWORD)v2)
    return this;
  v3 = this;
  v4 = *(_DWORD *)(this + 20);
  if ((v4 & 0xF8) != 0)
    return this;
  this = *(_QWORD *)(*(_QWORD *)(v1 + 496) + 8 * v2 - 8);
  if (!this || (*(_BYTE *)this & 2) == 0)
    return this;
  v7 = (WebCore::RenderBlock *)v3;
  if ((*(_BYTE *)this & 4) != 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      *((_DWORD *)v7 + 5) = v4 | 0x20;
    return this;
  }
  if (*(_DWORD *)(this + 72))
  {
    v5 = (int *)(v3 + 156);
    if (((*((_DWORD *)v7 + 31) >> 13) & 6u) - 2 < 4)
      v5 = (int *)((char *)v7 + 152);
    v6 = WebCore::RenderLayoutState::pageLogicalOffset((_DWORD *)this, (uint64_t)v7, *v5);
    this = WebCore::RenderBlock::pageLogicalOffset(v7);
    if (v6 != (_DWORD)this)
    {
      v4 = *((_DWORD *)v7 + 5);
      goto LABEL_12;
    }
  }
  return this;
}

uint64_t *WebCore::RenderBlock::updateFragmentRangeForBoxChild(WebCore::RenderBlock *this, const WebCore::RenderBox *a2)
{
  uint64_t *result;
  void *v3;
  WebCore::RenderFragmentedFlow *v4;
  WebCore::RenderFragmentContainer *v7;
  WebCore::RenderFragmentContainer *v8;
  WebCore::RenderFragmentContainer *v9;
  WebCore::RenderFragmentContainer *v10;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return 0;
  result = (uint64_t *)(*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 648))(this);
  if (result)
  {
    v4 = (WebCore::RenderFragmentedFlow *)result;
    if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(result + 31, v3) & 1) != 0|| (*((_BYTE *)a2 + 52) & 7) == 1 && (*((_BYTE *)a2 + 53) & 2) != 0)
    {
      return 0;
    }
    result = (uint64_t *)WebCore::RenderFragmentedFlow::hasCachedFragmentRangeForBox(v4, this);
    if ((_DWORD)result)
    {
      v10 = 0;
      v9 = 0;
      WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v4, a2, &v10, &v9);
      WebCore::RenderBlock::computeFragmentRangeForBoxChild(this, a2);
      v7 = 0;
      v8 = 0;
      WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v4, a2, &v8, &v7);
      return (uint64_t *)(v8 != v10
                      || (*(unsigned int (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1568))(a2)
                      && v7 != v9);
    }
  }
  return result;
}

uint64_t WebCore::RenderBlock::estimateFragmentRangeForBoxChild(uint64_t this, const WebCore::RenderBox *a2)
{
  void *v3;
  WebCore::RenderFragmentedFlow *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::RenderBox *v10;
  _QWORD v11[3];

  if ((*(_BYTE *)(this + 23) & 0x10) != 0)
  {
    v10 = (WebCore::RenderBox *)this;
    this = (*(uint64_t (**)(void))(*(_QWORD *)this + 648))();
    if (this)
    {
      v4 = (WebCore::RenderFragmentedFlow *)this;
      this = WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(this + 248), v3);
      if ((this & 1) == 0 && ((*((_BYTE *)a2 + 52) & 7) != 1 || (*((_BYTE *)a2 + 53) & 2) == 0))
      {
        this = WebCore::RenderFragmentedFlow::hasCachedFragmentRangeForBox(v4, v10);
        if ((_DWORD)this)
        {
          if (WebCore::RenderBlock::childBoxIsUnsplittableForFragmentation(v10, a2))
          {
            return WebCore::RenderBlock::computeFragmentRangeForBoxChild(v10, a2);
          }
          else
          {
            if ((*((_BYTE *)v10 + 21) & 0x10) != 0)
              v5 = (char *)a2 + 152;
            else
              v5 = (char *)a2 + 156;
            (*(void (**)(_QWORD *__return_ptr, const WebCore::RenderBox *, uint64_t, _QWORD))(*(_QWORD *)a2 + 1312))(v11, a2, 0x3FFFFFFFLL, *(unsigned int *)v5);
            v6 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1288))(a2);
            v7 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, WebCore::RenderBox *, _QWORD, uint64_t))(*(_QWORD *)v4 + 2000))(v4, v10, v6, 1);
            if (__OFADD__(v6, v11[0]))
              v8 = (v6 >> 31) + 0x7FFFFFFF;
            else
              v8 = v6 + LODWORD(v11[0]);
            v9 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v4 + 2000))(v4, v10, v8, 1);
            return (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, const WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v4 + 2016))(v4, a2, v7, v9);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameViewLayoutContext::addLayoutDelta(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;

  v2 = *(unsigned int *)(result + 172);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 160) + 8 * v2 - 8);
    if (v3)
    {
      v4 = a2[1];
      v5 = *(_DWORD *)(v3 + 64);
      v6 = *(_DWORD *)(v3 + 68);
      v7 = __OFADD__(v5, *a2);
      v8 = v5 + *a2;
      v9 = (v5 >> 31) + 0x7FFFFFFF;
      if (v7)
        v8 = v9;
      v7 = __OFADD__(v6, v4);
      v10 = v6 + v4;
      if (v7)
        v10 = (v6 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(v3 + 64) = v8;
      *(_DWORD *)(v3 + 68) = v10;
    }
  }
  return result;
}

BOOL WebCore::RenderBox::hasRelativeLogicalHeight(WebCore::RenderBox *this)
{
  _BYTE *v1;
  _BYTE *v2;

  v1 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    if ((v1[8] & 0xF7) != 3 && (v1[24] & 0xF7) != 3)
    {
      v2 = v1 + 28;
      return (v2[4] & 0xF7) == 3;
    }
  }
  else if ((v1[16] & 0xF7) != 3 && (v1[40] & 0xF7) != 3)
  {
    v2 = v1 + 44;
    return (v2[4] & 0xF7) == 3;
  }
  return 1;
}

void WebCore::RenderBlockFlow::setMaxMarginBeforeValues(uint64_t a1, int a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  WebCore::RenderBlockFlowRareData *v13;
  void *v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;

  v6 = *(_DWORD **)(a1 + 224);
  if (v6)
  {
LABEL_18:
    *v6 = a2;
    v6[1] = a3;
    return;
  }
  v7 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if ((v7 - 1) > 4)
    v8 = 0;
  else
    v8 = qword_1969FC6C8[v7 - 1];
  if ((*(_DWORD *)(a1 + 168 + 4 * v8) & ~(*(int *)(a1 + 168 + 4 * v8) >> 31)) != a2
    || ((v9 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1, v9 > 4)
      ? (v10 = 0)
      : (v10 = qword_1969FC6C8[v9]),
        (v11 = *(_DWORD *)(a1 + 168 + 4 * v10), v11 != 0x80000000) ? (v12 = -v11 & ~(-v11 >> 31)) : (v12 = 0x7FFFFFFF),
        v12 != a3))
  {
    v13 = (WebCore::RenderBlockFlowRareData *)WTF::fastMalloc((WTF *)0x28);
    WebCore::RenderBlockFlowRareData::RenderBlockFlowRareData(v13, (const WebCore::RenderBlockFlow *)a1);
    v15 = *(WTF **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v6;
    if (v15)
    {
      v16 = (WTF *)*((_QWORD *)v15 + 3);
      *((_QWORD *)v15 + 3) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          v17 = v15;
          WTF::fastFree(v16, v14);
          v15 = v17;
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
      WTF::fastFree(v15, v14);
      v6 = *(_DWORD **)(a1 + 224);
    }
    goto LABEL_18;
  }
}

void WebCore::RenderBlockFlow::setMaxMarginAfterValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderBlockFlowRareData *v7;
  void *v8;
  WTF *v9;
  WTF *v10;

  v2 = *(_QWORD *)(a1 + 224);
  if (v2)
  {
LABEL_15:
    *(_QWORD *)(v2 + 8) = 0;
    return;
  }
  v3 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if ((v3 - 1) > 4)
    v4 = 2;
  else
    v4 = qword_1969FC6F0[v3 - 1];
  if (*(int *)(a1 + 168 + 4 * v4) > 0
    || ((v5 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1, v5 > 4)
      ? (v6 = 2)
      : (v6 = qword_1969FC6F0[v5]),
        (*(_DWORD *)(a1 + 168 + 4 * v6) & 0x80000000) != 0))
  {
    v7 = (WebCore::RenderBlockFlowRareData *)WTF::fastMalloc((WTF *)0x28);
    WebCore::RenderBlockFlowRareData::RenderBlockFlowRareData(v7, (const WebCore::RenderBlockFlow *)a1);
    v9 = *(WTF **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v2;
    if (v9)
    {
      v10 = (WTF *)*((_QWORD *)v9 + 3);
      *((_QWORD *)v9 + 3) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          WTF::fastFree(v10, v8);
        else
          --*(_DWORD *)v10;
      }
      WTF::fastFree(v9, v8);
      v2 = *(_QWORD *)(a1 + 224);
    }
    goto LABEL_15;
  }
}

BOOL WebCore::RenderBlockFlow::childrenPreventSelfCollapsing(WebCore::RenderBlockFlow *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::LegacyLineLayout *v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 22) & 4) != 0)
  {
    v1 = *((_DWORD *)this + 60);
    if (v1 == 1)
    {
      v2 = *((_QWORD *)this + 29);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 80);
        if (v3)
        {
          if (*(_DWORD *)(v3 + 60) >= 2u)
          {
            LODWORD(v4) = *(_DWORD *)(v3 + 44);
            return (_DWORD)v4 != 0;
          }
        }
      }
    }
    else if (v1 == 2)
    {
      v4 = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29);
      if (v4)
        LODWORD(v4) = WebCore::LegacyLineLayout::lineCount(v4);
      return (_DWORD)v4 != 0;
    }
    LODWORD(v4) = 0;
    return (_DWORD)v4 != 0;
  }
  v6 = *((unsigned int *)this + 16);
  if (!(v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  v7 = *(_QWORD *)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v7 || (*(_BYTE *)(v7 + 45) & 4) == 0)
    return 0;
  while (1)
  {
    v8 = *(_DWORD *)(v7 + 20);
    if ((v8 & 0x800) == 0
      && (v8 & 0x1800000) != 0x1000000
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 1240))(v7))
    {
      break;
    }
    v9 = *(unsigned int *)(v7 + 47);
    if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
      return 0;
    v7 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
    if (!v7)
      return 0;
    result = 0;
    if ((*(_BYTE *)(v7 + 45) & 4) == 0)
      return result;
  }
  return 1;
}

uint64_t WebCore::RenderTable::markForPaginationRelayoutIfNeeded(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  WebCore::RenderBlock *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944)
                 + 248);
  v2 = *(unsigned int *)(v1 + 508);
  if ((_DWORD)v2)
  {
    v3 = *(_DWORD **)(*(_QWORD *)(v1 + 496) + 8 * v2 - 8);
    if (v3)
    {
      if ((*(_BYTE *)v3 & 2) != 0)
      {
        if ((*(_BYTE *)v3 & 4) != 0)
          goto LABEL_10;
        if (v3[18])
        {
          v4 = (int *)(this + 152);
          if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 >= 4)
            v4 = (int *)(this + 156);
          v10 = (WebCore::RenderBlock *)this;
          v5 = WebCore::RenderLayoutState::pageLogicalOffset(v3, this, *v4);
          v6 = WebCore::RenderBlock::pageLogicalOffset(v10);
          this = (uint64_t)v10;
          if (v5 != v6)
          {
LABEL_10:
            v7 = *(_DWORD *)(this + 20);
            if ((v7 & 0x20) == 0)
              *(_DWORD *)(this + 20) = v7 | 0x20;
            v13 = this;
            this = WebCore::RenderChildIteratorAdapter<WebCore::RenderTableSection>::begin(&v13);
            v11 = this;
            for (i = v8; i; v8 = i)
            {
              v9 = *(_DWORD *)(v8 + 20);
              if ((v9 & 0xF8) == 0)
                *(_DWORD *)(v8 + 20) = v9 | 0x20;
              this = WebCore::RenderChildIterator<WebCore::RenderTableSection>::operator++((uint64_t)&v11);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderBlock::logicalLeftOffsetForContent(_DWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;

  v2 = *(_QWORD *)a1;
  if (((a1[31] >> 13) & 6u) - 2 < 4)
  {
    v3 = (*(uint64_t (**)(_DWORD *))(v2 + 1000))(a1);
    v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 928))(a1);
  }
  else
  {
    v3 = (*(uint64_t (**)(_DWORD *))(v2 + 1016))(a1);
    v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 944))(a1);
  }
  if (__OFADD__(v3, v4))
    return (v3 >> 31) + 0x7FFFFFFF;
  else
    return v3 + v4;
}

uint64_t WebCore::RenderBlock::startOffsetForContent(_BYTE *a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  if ((a1[23] & 0x10) != 0)
  {
    v7 = a1;
    v8 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))();
    if (!v8
      || (v10 = v8, (*(_BYTE *)(v8 + 328) & 1) != 0)
      || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v8 + 248), v9) & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 1288))(v7);
      if (__OFADD__(v11, a2))
        v12 = (v11 >> 31) + 0x7FFFFFFF;
      else
        v12 = v11 + a2;
      v2 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v10 + 2000))(v10, v7, v12, 1);
    }
    a1 = v7;
  }
  else
  {
    v2 = 0;
  }
  if ((a1[123] & 4) == 0)
    return WebCore::RenderBlock::logicalLeftOffsetForContent(a1);
  v3 = (unsigned int *)(a1 + 164);
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 >= 4)
    v3 = (unsigned int *)(a1 + 160);
  v4 = *v3;
  v5 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a1, v2);
  if (__OFSUB__(v4, v5))
    return (v4 >> 31) + 0x7FFFFFFF;
  else
    return v4 - v5;
}

uint64_t WebCore::RenderBlockFlow::addOverhangingFloats(WebCore::RenderBlockFlow *this, WebCore::RenderBlockFlow *a2, int a3)
{
  unsigned int v5;
  BOOL v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WebCore::RenderBox *v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  WebCore::FloatingObjects *v48;
  uint64_t v49;
  void *v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v60;
  uint64_t *v61;

  if (!(*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)a2 + 1672))(a2)
    || (WebCore::RenderElement::createsNewFormattingContext(a2) & 1) != 0)
  {
    return 0;
  }
  v5 = ((*((_DWORD *)a2 + 31) >> 13) & 6) - 2;
  v6 = v5 >= 4;
  v7 = (char *)a2 + 152;
  if (v5 >= 4)
    v8 = (char *)a2 + 156;
  else
    v8 = (char *)a2 + 152;
  if (!v6)
    v7 = (char *)a2 + 156;
  v9 = *((_QWORD *)this + 12);
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    if (((v9 >> 10) & 5 | 2) != 2)
    {
      v10 = (unsigned __int16)v9 >> 13;
      if (!v10)
        v10 = 2;
      goto LABEL_11;
    }
  }
  else if (((v9 >> 10) & 7) != 2)
  {
    v10 = (unsigned __int16)v9 >> 13;
LABEL_11:
    v11 = v10 == 2;
    goto LABEL_12;
  }
  v11 = 1;
LABEL_12:
  v12 = *(uint64_t **)(*((_QWORD *)a2 + 27) + 8);
  if (v12)
  {
    LODWORD(v13) = 0;
    v14 = *(_DWORD *)v8;
    v57 = *(_DWORD *)v7;
    v58 = v11;
    v15 = __OFSUB__(0x7FFFFFFF, *(_DWORD *)v8);
    while (1)
    {
      v16 = *v12;
      v17 = *((_DWORD *)this + 5);
      if ((v17 & 0x1000) != 0)
      {
        v18 = *(_DWORD *)(v16 + 8);
        v19 = *(_DWORD *)(v16 + 16);
      }
      else
      {
        v18 = *(_DWORD *)(v16 + 12);
        v19 = *(_DWORD *)(v16 + 20);
      }
      v20 = __OFADD__(v18, v19);
      v21 = v18 + v19;
      v22 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v20)
        v22 = v21;
      v23 = 0x7FFFFFFF - v14;
      if (v15)
        v23 = 0x7FFFFFFF;
      if (v23 < v22)
        v22 = v23;
      v20 = __OFADD__(v14, v22);
      v24 = v14 + v22;
      v25 = (v14 >> 31) + 0x7FFFFFFF;
      if (!v20)
        v25 = v24;
      if ((int)v13 <= v25)
        v13 = v25;
      else
        v13 = v13;
      v26 = 164;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        v26 = 160;
      v27 = *(_DWORD *)((char *)this + v26);
      v28 = *(_QWORD *)v16;
      if (v25 > v27)
      {
        if (v28)
          v38 = *(_QWORD *)(v28 + 8);
        else
          v38 = 0;
        v39 = (uint64_t *)*((_QWORD *)this + 27);
        if (!v39)
          goto LABEL_56;
        if ((WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(v39, v38) & 1) == 0)
        {
          v17 = *((_DWORD *)this + 5);
LABEL_56:
          v40 = v17 & 0x1000;
          if (v14 == 0x80000000)
            v41 = 0x7FFFFFFF;
          else
            v41 = -v14;
          if (v57 == 0x80000000)
            LODWORD(v42) = 0x7FFFFFFF;
          else
            LODWORD(v42) = -v57;
          v43 = v40 == 0;
          if (v40)
            v44 = v42;
          else
            v44 = v41;
          if (v43)
            v42 = v42;
          else
            v42 = v41;
          v45 = *(_BYTE *)(v16 + 36);
          if ((v45 & 0x20) != 0)
          {
            v47 = 0;
          }
          else
          {
            v51 = *(_BYTE *)(v16 + 36);
            v52 = v42;
            v55 = v44;
            v46 = WebCore::RenderBox::enclosingFloatPaintingLayer(*(WebCore::RenderBox **)(*(_QWORD *)v16 + 8));
            if (v46 == WebCore::RenderBox::enclosingFloatPaintingLayer(this))
            {
              v45 = v51 & 0xFB;
              *(_BYTE *)(v16 + 36) = v51 & 0xFB;
              v47 = 1;
              v42 = v52;
              v44 = v55;
            }
            else
            {
              v47 = 0;
              v42 = v52;
              v44 = v55;
              v45 = v51;
            }
          }
          v48 = (WebCore::FloatingObjects *)*((_QWORD *)this + 27);
          if (!v48)
          {
            v56 = v44;
            v49 = v42;
            v53 = v47;
            WebCore::RenderBlockFlow::createFloatingObjects((WebCore::FloatingObjects **)this);
            v47 = v53;
            v42 = v49;
            v44 = v56;
            v48 = (WebCore::FloatingObjects *)*((_QWORD *)this + 27);
            v45 = *(_BYTE *)(v16 + 36);
          }
          WebCore::FloatingObject::copyToNewContainer(v16, v42 | (v44 << 32), v47, 1, v58 | ((v45 & 0x20) >> 5), (uint64_t *)&v61);
          WebCore::FloatingObjects::add(v48, &v61);
          std::unique_ptr<WebCore::FloatingObject>::~unique_ptr[abi:sn180100]((WTF **)&v61, v50);
        }
      }
      else
      {
        if (v28)
          v29 = *(WebCore::RenderBox **)(v28 + 8);
        else
          v29 = 0;
        if (a3)
        {
          if ((*(_BYTE *)(v16 + 36) & 4) == 0)
          {
            v37 = *((_QWORD *)v29 + 18);
            if ((!v37 || (*(_BYTE *)(v37 + 25) & 8) == 0) && WebCore::RenderObject::isDescendantOf(v29, a2))
            {
              v54 = WebCore::RenderBox::enclosingFloatPaintingLayer(v29);
              if (v54 == WebCore::RenderBox::enclosingFloatPaintingLayer(a2))
                *(_BYTE *)(v16 + 36) |= 4u;
            }
          }
        }
        if ((*(_BYTE *)(v16 + 36) & 8) != 0)
        {
          v30 = *(_QWORD *)(v16 + 8);
          v31 = *(_DWORD *)(v16 + 28);
          v32 = *(_DWORD *)(v16 + 32);
          v20 = __OFADD__((_DWORD)v30, v31);
          LODWORD(v33) = v30 + v31;
          if (v20)
            v33 = (v30 >> 31) + 0x7FFFFFFF;
          else
            v33 = v33;
          v35 = HIDWORD(v30);
          v20 = __OFADD__((_DWORD)v35, v32);
          v34 = v35 + v32;
          LODWORD(v35) = (v35 >> 31) + 0x7FFFFFFF;
          if (v20)
            v35 = v35;
          else
            v35 = v34;
          v60 = v33 | (v35 << 32);
          WebCore::RenderBox::addOverflowFromChild(a2, v29, (const WebCore::LayoutSize *)&v60);
        }
      }
      v12 = (uint64_t *)v12[2];
      if (!v12)
        return v13;
    }
  }
  return 0;
}

int *WebCore::RoundedRectRadii::expand(int *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v5 = *result;
  if (*result >= 1)
  {
    v6 = result[1];
    if (v6 >= 1)
    {
      v7 = __OFADD__(v5, *a4);
      v8 = v5 + *a4;
      if (v7)
        v8 = 0x7FFFFFFF;
      *result = v8 & ~(v8 >> 31);
      v7 = __OFADD__(v6, *a2);
      v9 = v6 + *a2;
      if (v7)
        v9 = 0x7FFFFFFF;
      result[1] = v9 & ~(v9 >> 31);
    }
  }
  v10 = result[2];
  if (v10 >= 1)
  {
    v11 = result[3];
    if (v11 >= 1)
    {
      v7 = __OFADD__(v10, *a5);
      v12 = v10 + *a5;
      if (v7)
        v12 = 0x7FFFFFFF;
      result[2] = v12 & ~(v12 >> 31);
      v7 = __OFADD__(v11, *a2);
      v13 = v11 + *a2;
      if (v7)
        v13 = 0x7FFFFFFF;
      result[3] = v13 & ~(v13 >> 31);
    }
  }
  v14 = result[4];
  if (v14 >= 1)
  {
    v15 = result[5];
    if (v15 >= 1)
    {
      v7 = __OFADD__(v14, *a4);
      v16 = v14 + *a4;
      if (v7)
        v16 = 0x7FFFFFFF;
      result[4] = v16 & ~(v16 >> 31);
      v7 = __OFADD__(v15, *a3);
      v17 = v15 + *a3;
      if (v7)
        v17 = 0x7FFFFFFF;
      result[5] = v17 & ~(v17 >> 31);
    }
  }
  v18 = result[6];
  if (v18 >= 1)
  {
    v19 = result[7];
    if (v19 >= 1)
    {
      v7 = __OFADD__(v18, *a5);
      v20 = v18 + *a5;
      if (v7)
        v20 = 0x7FFFFFFF;
      result[6] = v20 & ~(v20 >> 31);
      v7 = __OFADD__(v19, *a3);
      v21 = v19 + *a3;
      if (v7)
        v21 = 0x7FFFFFFF;
      result[7] = v21 & ~(v21 >> 31);
    }
  }
  return result;
}

BOOL WebCore::Settings::showDebugBorders(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 247))
    return *((_BYTE *)this + 246) != 0;
  else
    return (*((_QWORD *)this + 87) >> 28) & 1;
}

uint64_t WebCore::ScrollView::setUnobscuredContentSize(uint64_t this, const WebCore::FloatSize *a2, __n128 a3, __n128 a4)
{
  if (!*(_BYTE *)(this + 196))
  {
    *(_QWORD *)(this + 172) = 0;
    *(_QWORD *)(this + 180) = 0;
    *(_QWORD *)(this + 188) = 0;
    *(_BYTE *)(this + 196) = 1;
LABEL_9:
    *(_QWORD *)(this + 172) = *(_QWORD *)a2;
    return (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)this + 656))(this, a3, a4);
  }
  a3.n128_u32[0] = *(_DWORD *)a2;
  a4.n128_u32[0] = *((_DWORD *)a2 + 1);
  if (*(float *)a2 != *(float *)(this + 172) || a4.n128_f32[0] != *(float *)(this + 176))
    goto LABEL_9;
  return this;
}

void **WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setNativeImageCreator(void **result)
{
  WebCore::MediaPlayerPrivateMediaStreamAVFObjC::m_nativeImageCreator = *result;
  return result;
}

uint64_t WebCore::ViewportConfiguration::setDisabledAdaptations(uint64_t a1, _BYTE *a2)
{
  *(_BYTE *)(a1 + 192) = *a2;
  return 0;
}

uint64_t WebCore::DisplayList::FillRoundedRect::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 264))(a2, a1, a1 + 48, *(unsigned __int8 *)(a1 + 56));
}

uint64_t WebCore::Font::renderingResourceIdentifier(WebCore::Font *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 248))
    return *((_QWORD *)this + 30);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    result = 142;
    __break(0xC471u);
  }
  else
  {
    result = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    if (!*((_BYTE *)this + 248))
      *((_BYTE *)this + 248) = 1;
    *((_QWORD *)this + 30) = result;
  }
  return result;
}

uint64_t WebCore::SQLiteTransaction::SQLiteTransaction(uint64_t result, unsigned int *a2, char a3)
{
  unsigned int v3;

  *(_QWORD *)result = a2;
  do
    v3 = __ldaxr(a2);
  while (__stlxr(v3 + 1, a2));
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 9) = a3;
  return result;
}

uint64_t WebCore::Page::didCompleteRenderingFrame(WebCore::Page *this)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v10 = *(_QWORD *)(*((_QWORD *)this + 20) + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
        WebCore::InspectorInstrumentation::didCompleteRenderingFrameImpl(*(_QWORD *)(*(_QWORD *)(v11 + 80) + 8));
    }
  }
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E3400D68;
  v14 = (uint64_t)v3;
  v4 = *((_QWORD *)this + 20);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WebCore::Page::forEachDocumentFromMainFrame(v4, &v14);
  do
  {
    v7 = __ldaxr(v5);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v5));
  if (!v8)
  {
    atomic_store(1u, v5);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = off_1E31FE290;
    v12[1] = v5;
    v15 = v12;
    WTF::ensureOnMainThread();
    v13 = v15;
    v15 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

unsigned int *WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, WTF *this)
{
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;

  if (result[2] > (unint64_t)this)
  {
    v3 = result;
    v4 = result[3];
    if (v4 > (unint64_t)this)
    {
      v5 = 40 * v4 - 40 * (_QWORD)this;
      v6 = (WTF::StringImpl **)(*(_QWORD *)result + 40 * (_QWORD)this + 24);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, this);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *(v6 - 1);
        *(v6 - 1) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, this);
          else
            *(_DWORD *)v8 -= 2;
        }
        result = (unsigned int *)*(v6 - 2);
        *(v6 - 2) = 0;
        if (result)
        {
          if (*result == 2)
            result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, this);
          else
            *result -= 2;
        }
        v6 += 5;
        v5 -= 40;
      }
      while (v5);
      v3[3] = this;
      LODWORD(v4) = (_DWORD)this;
    }
    v9 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if ((unint64_t)this >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      v10 = (WTF *)(40 * (_QWORD)this);
      result = (unsigned int *)WTF::fastMalloc(v10);
      v3[2] = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v9)
        result = (unsigned int *)WTF::VectorMover<false,WebCore::ContentSecurityPolicySource>::move(v9, (WTF::StringImpl *)((char *)v9 + 40 * v4), (uint64_t)result);
    }
    if (v9)
    {
      if (*(WTF::StringImpl **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v9, this);
    }
  }
  return result;
}

char *WTF::Vector<WebCore::ContentSecurityPolicySource,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x194176334);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 40 * *(unsigned int *)(a1 + 12));
      v18 = 40 * v16;
      v19 = WTF::fastMalloc((WTF *)(40 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ContentSecurityPolicySource>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x19417633CLL);
      }
      v10 = 40 * v9;
      v11 = WTF::fastMalloc((WTF *)(40 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ContentSecurityPolicySource>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ContentSecurityPolicySource>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      v6 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a3 + 8) = v6;
      v7 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      v8 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v8;
      LODWORD(v8) = *((_DWORD *)v5 + 8);
      *(_DWORD *)(a3 + 35) = *(_DWORD *)((char *)v5 + 35);
      *(_DWORD *)(a3 + 32) = v8;
      v9 = (WTF::StringImpl *)*((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost(WebCore::IOSurface *a1)
{
  int v1;
  int v3;
  unsigned int v4;
  unint64_t v5;

  v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >> 30
    || (v3 = WebCore::IOSurface::bytesPerRowAlignment(a1), v4 = *((_DWORD *)a1 + 1), (v4 & 0x80000000) != 0)
    || (v5 = v4 * (unint64_t)((v3 + 4 * v1 - 1) & -v3), (v5 & 0xFFFFFFFF00000000) != 0))
  {
    __break(0xC471u);
    JUMPOUT(0x194176488);
  }
  return v5;
}

unint64_t WebCore::IOSurface::bytesPerRowAlignment(WebCore::IOSurface *this)
{
  unint64_t result;
  NSObject *v2;
  uint8_t v3[16];

  result = atomic_load(&WebCore::surfaceBytesPerRowAlignment(void)::alignment);
  if (!result)
  {
    result = MEMORY[0x19AEA2BBC](*MEMORY[0x1E0CBBF08]);
    if (result <= 1)
    {
      v2 = qword_1ECE7C3D8;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C3D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v3 = 0;
        _os_log_error_impl(&dword_1940B8000, v2, OS_LOG_TYPE_ERROR, "Sandbox does not allow IOSurface IOKit access.", v3, 2u);
      }
      result = 64;
    }
    atomic_store(result, &WebCore::surfaceBytesPerRowAlignment(void)::alignment);
  }
  return result;
}

BOOL WebCore::NetworkStateNotifier::onLine(WebCore::NetworkStateNotifier *this)
{
  if (*((_BYTE *)this + 1))
    return *(_BYTE *)this != 0;
  WebCore::NetworkStateNotifier::updateState((uint64_t **)this);
  return !*((_BYTE *)this + 1) || *(_BYTE *)this != 0;
}

uint64_t WebCore::NetworkStateNotifier::updateState(uint64_t **this)
{
  unsigned int v2;
  uint64_t result;
  int v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::NetworkStateNotifier *v10;

  v2 = *(unsigned __int16 *)this;
  result = WebCore::NetworkStateNotifier::updateStateWithoutNotifying((WebCore::NetworkStateNotifier *)this);
  v4 = *((unsigned __int8 *)this + 1);
  if (v2 < 0x100 || v4 == 0)
  {
    if (v2 > 0xFF == (v4 != 0))
      return result;
  }
  else if (*(unsigned __int8 *)this == v2)
  {
    return result;
  }
  v6 = *((unsigned int *)this + 5);
  if ((_DWORD)v6)
  {
    v7 = this[1];
    v8 = 8 * v6;
    while (*((_BYTE *)this + 1))
    {
      v9 = *v7++;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, *(unsigned __int8 *)this);
      v8 -= 8;
      if (!v8)
        return result;
    }
    v10 = (WebCore::NetworkStateNotifier *)std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::NetworkStateNotifier::updateStateWithoutNotifying(v10);
  }
  return result;
}

uint64_t WebCore::NetworkStateNotifier::updateStateWithoutNotifying(WebCore::NetworkStateNotifier *this)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CFA9A8], "sharedNetworkObserver"), "isNetworkReachable");
  *(_WORD *)this = result | 0x100;
  return result;
}

void WebCore::NetworkStateNotifier::addListener(WebCore::NetworkStateNotifier *this, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_DWORD *)this + 5);
  if (!v4)
  {
    WebCore::NetworkStateNotifier::startObserving(this);
    v4 = *((_DWORD *)this + 5);
  }
  if (v4 == *((_DWORD *)this + 4))
  {
    WTF::Vector<WTF::Function<void ()(BOOL)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(BOOL)>>((unsigned int *)this + 2, (unint64_t)a2);
  }
  else
  {
    v5 = *((_QWORD *)this + 1);
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)(v5 + 8 * v4) = v6;
    *((_DWORD *)this + 5) = v4 + 1;
  }
}

void WebCore::NetworkStateNotifier::startObserving(WebCore::NetworkStateNotifier *this)
{
  WebNetworkStateObserver *v2;
  const void *v3;

  {
    if (byte_1ECE90A50)
      return;
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v2 = -[WebNetworkStateObserver initWithBlock:]([WebNetworkStateObserver alloc], "initWithBlock:", &__block_literal_global_45);
  v3 = (const void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v2;
  if (v3)
    CFRelease(v3);
}

void sub_1941767F4(_Unwind_Exception *a1)
{
  const void *v1;

  _Block_release(v1);
  _Unwind_Resume(a1);
}

__int128 *WebCore::DeprecatedGlobalSettings::shared(WebCore::DeprecatedGlobalSettings *this)
{
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  return &WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings;
}

void *WebCore::FloatingPointEnvironment::singleton(WebCore::FloatingPointEnvironment *this)
{
  {
    byte_1ECE911D0 = 0;
  }
  return &WebCore::FloatingPointEnvironment::singleton(void)::floatingPointEnvironment;
}

_QWORD *WebCore::parseCryptographicDigest@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (result[1])
  {
    v3 = result;
    result = (_QWORD *)WebCore::parseHashAlgorithmAdvancingPosition<unsigned char>(result);
    if ((unsigned __int16)result > 0xFFu)
    {
      v4 = v3[1];
      if (v4)
      {
        v5 = (_BYTE *)*v3;
        if (*(_BYTE *)*v3 == 45)
        {
          *v3 = v5 + 1;
          v3[1] = v4 - 1;
          if (v4 != 1)
          {
            v6 = (char)result;
            v7 = -2;
            v8 = 1;
            while (1)
            {
              v9 = v5[v8];
              if ((v9 - 48) >= 0xA && (v9 | 0x20u) - 97 >= 0x1A)
              {
                v11 = (v9 - 43);
                if (v11 > 0x34)
                  goto LABEL_19;
                if (((1 << (v9 - 43)) & 0x10000000000015) == 0)
                  break;
              }
              *v3 = &v5[v8 + 1];
              v3[1] = v4 + v7--;
              if (v4 == ++v8)
                goto LABEL_22;
            }
            if (v11 != 18)
            {
LABEL_19:
              v12 = v4 - v8;
              goto LABEL_20;
            }
            v12 = v4 + v7;
            v13 = v8 - v4;
            v14 = v8 + 1;
            v15 = &v5[v8];
            *v3 = v15 + 1;
            v3[1] = v12;
            if (v13 == -1)
              goto LABEL_22;
            v9 = v15[1];
            v8 = v14;
LABEL_20:
            if (v9 == 61)
            {
              *v3 = &v5[v8 + 1];
              v3[1] = v12 - 1;
            }
            else if (v8 == 1)
            {
              goto LABEL_26;
            }
LABEL_22:
            result = (_QWORD *)WTF::base64Decode();
            if (v18)
            {
              *(_BYTE *)a2 = v6;
              *(_QWORD *)(a2 + 8) = v16;
              *(_QWORD *)(a2 + 16) = v17;
              *(_BYTE *)(a2 + 24) = 1;
              return result;
            }
            result = (_QWORD *)WTF::base64Decode();
          }
        }
      }
    }
  }
LABEL_26:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  _WORD *v5;
  char v6;
  uint64_t v7;
  _WORD *v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (result[1])
  {
    v3 = result;
    result = (_QWORD *)WebCore::parseHashAlgorithmAdvancingPosition<char16_t>(result);
    if ((unsigned __int16)result > 0xFFu)
    {
      v4 = v3[1];
      if (v4)
      {
        v5 = (_WORD *)*v3;
        if (*(_WORD *)*v3 == 45)
        {
          *v3 = v5 + 1;
          v3[1] = v4 - 1;
          if (v4 != 1)
          {
            v6 = (char)result;
            v7 = 0;
            v8 = v5 + 2;
            v9 = v5 + 2;
            while (1)
            {
              v10 = *(v9 - 1);
              if ((v10 - 48) >= 0xA && (v10 | 0x20u) - 97 >= 0x1A)
              {
                v12 = (v10 - 43);
                if (v12 > 0x34)
                  goto LABEL_24;
                if (((1 << (v10 - 43)) & 0x10000000000015) == 0)
                  break;
              }
              *v3 = v8;
              v3[1] = v4 + v7-- - 2;
              ++v9;
              ++v8;
              if (v4 + v7 == 1)
                goto LABEL_21;
            }
            if (v12 != 18)
            {
LABEL_24:
              v16 = 1 - v7;
              v15 = v4 + v7 - 1;
              v14 = v16;
              goto LABEL_19;
            }
            v13 = v4 + v7;
            v14 = 2 - v7;
            v15 = v13 - 2;
            *v3 = v8;
            v3[1] = v13 - 2;
            if (v13 == 2)
              goto LABEL_21;
            v10 = *v9;
LABEL_19:
            if (v10 == 61)
            {
              *v3 = &v5[v14 + 1];
              v3[1] = v15 - 1;
            }
            else if (v14 == 1)
            {
              goto LABEL_26;
            }
LABEL_21:
            result = (_QWORD *)WTF::base64Decode();
            if (v19)
            {
              *(_BYTE *)a2 = v6;
              *(_QWORD *)(a2 + 8) = v17;
              *(_QWORD *)(a2 + 16) = v18;
              *(_BYTE *)(a2 + 24) = 1;
              return result;
            }
            result = (_QWORD *)WTF::base64Decode();
          }
        }
      }
    }
  }
LABEL_26:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t WebCore::parseHashAlgorithmAdvancingPosition<unsigned char>(_QWORD *a1)
{
  unint64_t v1;
  int v2;
  int v3;
  _BYTE *v4;
  unint64_t v5;

  v1 = a1[1];
  if (v1 >= 6)
  {
    v4 = (_BYTE *)*a1;
    v5 = v1 - 6;
    if ((*(_BYTE *)*a1 & 0xDF) == 0x53 && (v4[1] & 0xDF) == 0x48)
    {
      if ((v4[2] & 0xDF) == 0x41 && (v4[3] & 0xDF) == 0x12 && (v4[4] & 0xDF) == 0x15 && (v4[5] & 0xDF) == 0x16)
      {
        v2 = 1;
LABEL_20:
        *a1 = v4 + 6;
        a1[1] = v5;
        v3 = 1;
        return v2 | (v3 << 8);
      }
      if ((v4[2] & 0xDF) == 0x41 && (v4[3] & 0xDF) == 0x13 && (v4[4] & 0xDF) == 0x18 && (v4[5] & 0xDF) == 0x14)
      {
        v2 = 2;
        goto LABEL_20;
      }
      if ((v4[2] & 0xDF) == 0x41 && (v4[3] & 0xDF) == 0x15 && (v4[4] & 0xDF) == 0x11 && (v4[5] & 0xDF) == 0x12)
      {
        v2 = 4;
        goto LABEL_20;
      }
    }
  }
  v2 = 0;
  v3 = 0;
  return v2 | (v3 << 8);
}

uint64_t (*WebCore::AudioMediaStreamTrackRendererInternalUnit::setCreateFunction(uint64_t (*result)(WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *__hidden this, Client *)))(WebCore::LocalAudioMediaStreamTrackRendererInternalUnit *__hidden this, Client *)
{
  WebCore::createInternalUnit = result;
  return result;
}

void WTF::Persistence::Coder<WebCore::ResourceResponse>::decodeForPersistence(_BYTE *a1@<X8>)
{
  WTF::StringImpl *v2;
  const void *v3;
  __int16 v4;
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  __int16 v13;
  char v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  char v24;
  const void *v25;
  char v26;

  v5[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v5);
  v12 = 0;
  v13 = 0;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  v16 = v15;
  v17 = 0;
  v18 = 0;
  v19 = 0x8000000000000000;
  v20 = v15;
  v21 = 0x7FF8000000000000;
  v22 &= 0xF0u;
  v23 &= 0xC000u;
  v24 = v24 & 0xF8 | 2;
  v25 = 0;
  v26 = 0;
  v14 = v14 & 0xC0 | 5;
  v4 = 0;
  WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[256] = 0;
  v3 = v25;
  v25 = 0;
  if (v3)
    CFRelease(v3);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v5, v2);
}

uint64_t WTF::Persistence::Decoder::operator>><WTF::AtomString,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned __int8 v11;

  WTF::Persistence::Coder<WTF::AtomString>::decodeForPersistence();
  if (*(unsigned __int8 *)(a2 + 8) == v11)
  {
    if (!*(_BYTE *)(a2 + 8))
      return a1;
    v5 = v10;
    v10 = 0;
    v6 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else if (*(_BYTE *)(a2 + 8))
  {
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_BYTE *)(a2 + 8) = 0;
  }
  else
  {
    v9 = v10;
    v10 = 0;
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = 1;
  }
  if (v11 && v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v4);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::HTTPHeaderMap,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;

  WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::decodeForPersistence(&v20);
  v5 = v24;
  if (*(unsigned __int8 *)(a2 + 32) == v24)
  {
    if (!*(_BYTE *)(a2 + 32))
      return a1;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v17 = 16 * v6;
      v18 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8);
      do
      {
        v19 = *v18;
        *v18 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v4);
          else
            *(_DWORD *)v19 -= 2;
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    v7 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v7, v4);
    }
    *(_QWORD *)a2 = v20;
    v8 = v21;
    v20 = 0;
    v21 = 0;
    *(_QWORD *)(a2 + 8) = v8;
    v9 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v9)
      WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)(a2 + 16), (WTF::StringImpl *)(*(_QWORD *)(a2 + 16) + 16 * v9));
    v10 = *(WTF **)(a2 + 16);
    if (v10)
    {
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      WTF::fastFree(v10, v4);
    }
    *(_QWORD *)(a2 + 16) = v22;
    v11 = v23;
    v22 = 0;
    v23 = 0;
    *(_QWORD *)(a2 + 24) = v11;
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)a2, v4);
    *(_BYTE *)(a2 + 32) = 0;
  }
  else
  {
    v13 = v20;
    v20 = 0;
    *(_QWORD *)a2 = v13;
    v14 = v21;
    v21 = 0;
    *(_QWORD *)(a2 + 8) = v14;
    v15 = v22;
    v22 = 0;
    *(_QWORD *)(a2 + 16) = v15;
    v16 = v23;
    v23 = 0;
    *(_QWORD *)(a2 + 24) = v16;
    *(_BYTE *)(a2 + 32) = 1;
  }
  if (v5)
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v20, v4);
  return a1;
}

void WebCore::CachedResource::load(WebCore::CachedResource *this, WebCore::CachedResourceLoader *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  char v33;
  char v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  void (***v41)(_QWORD, unsigned int *, WebCore::CachedResource *, _BYTE *, char *, WTF::StringImpl **);
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  WTF::StringImpl *v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  void *v55;
  WTF::StringImpl *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int **v61;
  void *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  WebCore::HTTPHeaderValues *v66;
  unint64_t v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  void *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  void *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  NSObject *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  Inspector::IdentifiersFactory *v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  void *v104;
  WTF::StringImpl *v105;
  NSObject *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  WebCore::CachedResource::ResponseData *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int *v134;
  WTF::StringImpl *v135;
  _BYTE v136[40];
  WTF::StringImpl *v137;
  int v138;
  __int16 v139;
  uint64_t v140;
  char v141;
  char v142;
  WTF::StringImpl *v143;
  _BYTE buf[24];
  __int128 v145;
  char v146;
  _DWORD *v147;
  _DWORD *v148;
  _DWORD *v149;
  uint64_t v150;
  char v151;
  const void *v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 10);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 - 40);
      if (v5)
      {
        v6 = *(unsigned int **)(v5 + 8);
        if (v6)
        {
          v8 = v6 + 2;
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 16) + 8);
          if (v10)
            v11 = *(_BYTE *)(v10 + 144) == 0;
          else
            v11 = 0;
          if (!v11)
            goto LABEL_21;
          v12 = (unsigned int *)(v10 + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          v14 = *(_QWORD *)(v10 + 296);
          if (v14)
          {
            v15 = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v14 + 24) = v15 + 2;
            v16 = *(unsigned __int8 *)(v14 + 3362);
            if (v16 == 2)
            {
              v117 = qword_1ECE7C608;
              if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
              {
LABEL_202:
                WebCore::CachedResource::failBeforeStarting(this);
                if (*(_DWORD *)(v14 + 24) == 2)
                {
                  if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v14);
                }
                else
                {
                  *(_DWORD *)(v14 + 24) -= 2;
                }
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
                goto LABEL_88;
              }
              WebCore::Frame::pageID((WebCore::Frame *)v6);
              if (!v119)
                v118 = 0;
              v120 = *((_QWORD *)v6 + 4);
              *(_DWORD *)buf = 134218496;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v118;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&v145 = v120;
              v121 = "%p - [pageID=%llu, frameID=%llu] CachedResource::load: Already in back/forward cache";
LABEL_201:
              _os_log_impl(&dword_1940B8000, v117, OS_LOG_TYPE_DEFAULT, v121, buf, 0x20u);
              goto LABEL_202;
            }
            if (v16 == 1 && !*((_BYTE *)this + 22) && (*((_BYTE *)this + 556) & 0x1E) != 0xA)
            {
              v117 = qword_1ECE7C608;
              if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
                goto LABEL_202;
              WebCore::Frame::pageID((WebCore::Frame *)v6);
              if (!v123)
                v122 = 0;
              v124 = *((_QWORD *)v6 + 4);
              *(_DWORD *)buf = 134218496;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v122;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&v145 = v124;
              v121 = "%p - [pageID=%llu, frameID=%llu] CachedResource::load: About to enter back/forward cache";
              goto LABEL_201;
            }
            if (v15)
            {
              *(_DWORD *)(v14 + 24) = v15;
            }
            else if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
            }
          }
          do
          {
            v17 = __ldaxr(v12);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v12));
          if (!v18)
          {
            atomic_store(1u, v12);
            v86 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v86 = off_1E31FE290;
            v86[1] = v12;
            *(_QWORD *)buf = v86;
            WTF::ensureOnMainThread();
            v87 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v87)
              (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
          }
LABEL_21:
          v19 = *((_QWORD *)v6 + 35);
          ++*(_DWORD *)v19;
          if ((*((_BYTE *)this + 130) & 0x40) == 0 || *((_BYTE *)this + 22) || (*((_BYTE *)this + 556) & 0x1E) == 0xA)
          {
LABEL_27:
            *(_WORD *)((char *)this + 557) |= 0x400u;
            v21 = *((_QWORD *)this + 61);
            if (!v21)
              goto LABEL_42;
            v22 = *(_QWORD *)(v21 + 8);
            if (!v22)
              goto LABEL_42;
            v23 = *(_QWORD *)(v22 + 8);
            if (!v23)
            {
              v23 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v23 = 1;
              *(_QWORD *)(v23 + 8) = v22;
              v80 = *(unsigned int **)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v23;
              if (v80)
              {
                do
                {
                  v81 = __ldaxr(v80);
                  v82 = v81 - 1;
                }
                while (__stlxr(v82, v80));
                if (!v82)
                {
                  atomic_store(1u, v80);
                  WTF::fastFree((WTF *)v80, v79);
                }
                v23 = *(_QWORD *)(v22 + 8);
              }
            }
            do
              v24 = __ldaxr((unsigned int *)v23);
            while (__stlxr(v24 + 1, (unsigned int *)v23));
            v132 = (unsigned int *)v23;
            v25 = *(_QWORD *)(v23 + 8);
            v135 = (WTF::StringImpl *)&v132;
            ++*(_DWORD *)(v25 + 548);
            v26 = *(_QWORD *)(v25 + 488);
            if (v26 && *(_QWORD *)(v26 + 8))
            {
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v25 + 464), (uint64_t *)&v135, (uint64_t)buf);
              v25 = *((_QWORD *)v132 + 1);
            }
            v27 = *(uint64_t **)(v25 + 400);
            if (!v27)
            {
              v67 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
              if (v67 != -1)
              {
                *(_QWORD *)buf = &v143;
                v135 = (WTF::StringImpl *)buf;
                std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
              }
              v27 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
            }
            WebCore::ResourceResponseBase::httpHeaderField((uint64_t)v27, 50, &v143);
            v28 = *(uint64_t **)(*((_QWORD *)v132 + 1) + 400);
            if (!v28)
            {
              v68 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
              if (v68 != -1)
              {
                *(_QWORD *)buf = &v142;
                v135 = (WTF::StringImpl *)buf;
                std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
              }
              v28 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
            }
            WebCore::ResourceResponseBase::httpHeaderField((uint64_t)v28, 37, (WTF::StringImpl **)buf);
            if (!v143 || !*((_DWORD *)v143 + 1))
            {
              v30 = *(WTF::StringImpl **)buf;
              if (!*(_QWORD *)buf)
                goto LABEL_38;
              if (!*(_DWORD *)(*(_QWORD *)buf + 4))
              {
LABEL_99:
                *(_QWORD *)buf = 0;
                goto LABEL_100;
              }
            }
            v65 = *((_BYTE *)this + 556) & 0x1F;
            if ((*((_BYTE *)this + 344) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)this + 160));
              *((_BYTE *)this + 344) |= 1u;
            }
            v66 = (WebCore::HTTPHeaderValues *)WebCore::CachedResourceLoader::cachePolicy(*((_QWORD *)a2 + 10), v65, (WebCore::CachedResource *)((char *)this + 160));
            if ((_DWORD)v66 == 1)
            {
              v125 = WebCore::HTTPHeaderValues::maxAge0(v66);
              WebCore::ResourceRequestBase::setHTTPHeaderField((WebCore::CachedResource *)((char *)this + 160), (WTF::StringImpl *)0xF, (WTF::StringImpl **)v125);
            }
            if (v143 && *((_DWORD *)v143 + 1))
            {
              if ((*((_BYTE *)this + 344) & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)this + 160));
                *((_BYTE *)this + 344) |= 1u;
              }
              WebCore::HTTPHeaderMap::set((WebCore::CachedResource *)((char *)this + 256), (WTF::StringImpl *)0x2C, &v143);
              *((_BYTE *)this + 344) &= ~2u;
            }
            v30 = *(WTF::StringImpl **)buf;
            if (!*(_QWORD *)buf)
              goto LABEL_38;
            if (!*(_DWORD *)(*(_QWORD *)buf + 4))
              goto LABEL_99;
            WebCore::ResourceRequestBase::setHTTPHeaderField((WebCore::CachedResource *)((char *)this + 160), (WTF::StringImpl *)0x2D, (WTF::StringImpl **)buf);
            v30 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v30)
            {
LABEL_100:
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v29);
              else
                *(_DWORD *)v30 -= 2;
            }
LABEL_38:
            v31 = v143;
            v143 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v29);
              else
                *(_DWORD *)v31 -= 2;
            }
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v132, v29);
LABEL_42:
            if ((*((_BYTE *)this + 556) & 0x1F) == 0xD)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v135 = *(WTF::StringImpl **)buf;
              WebCore::ResourceRequestBase::setHTTPHeaderField((WebCore::CachedResource *)((char *)this + 160), (WTF::StringImpl *)0x3A, &v135);
              v91 = v135;
              v135 = 0;
              if (v91)
              {
                if (*(_DWORD *)v91 == 2)
                  WTF::StringImpl::destroy(v91, v90);
                else
                  *(_DWORD *)v91 -= 2;
              }
            }
            v32 = (*((unsigned __int8 *)this + 557) >> 2) & 7;
            v33 = *((_BYTE *)this + 344);
            if ((v33 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)this + 160));
              v33 = *((_BYTE *)this + 344) | 1;
              *((_BYTE *)this + 344) = v33;
            }
            if (*((unsigned __int8 *)this + 306) != v32)
            {
              *((_BYTE *)this + 306) = v32;
              *((_BYTE *)this + 344) = v33 & 0xFD;
            }
            if ((*((_BYTE *)this + 556) & 0x1F) != 0)
            {
              v34 = (*((_BYTE *)this + 556) & 0x1F) != 0x10
                 && (*(_DWORD *)((_BYTE *)this + 130) & 0x30000) == 0x10000
                 && (*((_BYTE *)this + 16) & 0xFB) == 3;
              WebCore::FrameLoader::updateRequestAndAddExtraFields(v19, *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8), (WebCore::CachedResource *)((char *)this + 160), 0, 0, 1, v34, 0, 0);
            }
            WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)buf, (WebCore::CachedResource *)((char *)this + 160));
            v35 = (_DWORD *)*((_QWORD *)this + 39);
            if (v35)
              *v35 += 2;
            v147 = v35;
            v36 = (_DWORD *)*((_QWORD *)this + 40);
            if (v36)
              *v36 += 2;
            v148 = v36;
            v37 = (_DWORD *)*((_QWORD *)this + 41);
            if (v37)
              ++*v37;
            v38 = *((_QWORD *)this + 42);
            v149 = v37;
            v150 = v38;
            v151 = *((_BYTE *)this + 344);
            v39 = (const void *)*((_QWORD *)this + 44);
            v152 = v39;
            if (v39)
              CFRetain(v39);
            if (*((_QWORD *)this + 63))
            {
              if ((v151 & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)buf);
                v151 |= 1u;
              }
              v69 = *(WTF::StringImpl **)buf;
              if (*(_QWORD *)buf)
                **(_DWORD **)buf += 2;
              v135 = v69;
              *(_OWORD *)v136 = *(_OWORD *)&buf[8];
              *(_OWORD *)&v136[16] = v145;
              WTF::URL::setFragmentIdentifier();
              if ((v151 & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)buf);
                v151 |= 1u;
              }
              v71 = v135;
              if (v135)
                *(_DWORD *)v135 += 2;
              v72 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = v71;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, v70);
                else
                  *(_DWORD *)v72 -= 2;
              }
              *(_OWORD *)&buf[8] = *(_OWORD *)v136;
              v145 = *(_OWORD *)&v136[16];
              v146 &= ~0x20u;
              v151 &= ~2u;
              v73 = (WTF::StringImpl *)*((_QWORD *)this + 63);
              *((_QWORD *)this + 63) = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                  WTF::StringImpl::destroy(v73, v70);
                else
                  *(_DWORD *)v73 -= 2;
              }
              v74 = v135;
              v135 = 0;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                  WTF::StringImpl::destroy(v74, v70);
                else
                  *(_DWORD *)v74 -= 2;
              }
            }
            if (*((_BYTE *)this + 22))
            {
              v92 = *((_BYTE *)this + 556);
              if ((v92 & 0x1F) != 0xB)
              {
                if ((WebCore::KeepaliveRequestTracker::tryRegisterRequest((uint64_t)a2 + 232, this) & 1) == 0)
                {
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v126 = v135;
                  if ((v151 & 1) == 0)
                  {
                    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)buf);
                    v151 |= 1u;
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v127 = v135;
                  if (v126)
                    *(_DWORD *)v126 += 2;
                  v135 = v126;
                  v128 = *(_QWORD *)buf;
                  if (*(_QWORD *)buf)
                    **(_DWORD **)buf += 2;
                  *(_QWORD *)v136 = v128;
                  *(_OWORD *)&v136[8] = *(_OWORD *)&buf[8];
                  *(_OWORD *)&v136[24] = v145;
                  if (v127)
                    *(_DWORD *)v127 += 2;
                  v137 = v127;
                  v138 = 0;
                  v139 = 2;
                  v140 = 0;
                  v141 = 1;
                  v129 = WebCore::CachedResource::mutableResponseData(this);
                  WebCore::ResourceError::operator=((uint64_t)v129 + 320, (uint64_t)&v135);
                  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v135, v130);
                  if (v127)
                  {
                    if (*(_DWORD *)v127 == 2)
                      WTF::StringImpl::destroy(v127, v131);
                    else
                      *(_DWORD *)v127 -= 2;
                  }
                  if (v126)
                  {
                    if (*(_DWORD *)v126 == 2)
                      WTF::StringImpl::destroy(v126, v131);
                    else
                      *(_DWORD *)v126 -= 2;
                  }
                  WebCore::CachedResource::failBeforeStarting(this);
                  goto LABEL_85;
                }
                if (!*((_BYTE *)this + 22))
                  goto LABEL_62;
                v92 = *((_BYTE *)this + 556);
              }
              if ((v92 & 0x1E) == 0xA)
              {
                v93 = WebCore::s_platformStrategies;
                v94 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
                if (!v94)
                {
                  v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
                  *(_QWORD *)(v93 + 8) = v94;
                }
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v94 + 96))(v94))
                {
                  WebCore::CachedResourceHandle<WebCore::CachedImage>::CachedResourceHandle((uint64_t *)&v132, (uint64_t)this);
                  v95 = (Inspector::IdentifiersFactory *)WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
                  v96 = 88;
                  if (!*(_BYTE *)(v19 + 80))
                    v96 = 96;
                  v97 = *(_DWORD **)(v19 + v96);
                  if (v97)
                  {
                    ++v97[6];
                    WebCore::InspectorInstrumentation::willSendRequestOfType((WTF::JSONImpl::Object *)v6, v95, (uint64_t)v97, (WebCore::ResourceRequest *)buf);
                    if (v97[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v97 + 24))(v97);
                    else
                      --v97[6];
                  }
                  else
                  {
                    WebCore::InspectorInstrumentation::willSendRequestOfType((WTF::JSONImpl::Object *)v6, v95, 0, (WebCore::ResourceRequest *)buf);
                  }
                  v98 = WebCore::s_platformStrategies;
                  v99 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
                  if (!v99)
                  {
                    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
                    *(_QWORD *)(v98 + 8) = v99;
                  }
                  v100 = *((_QWORD *)this + 47);
                  if ((*(_BYTE *)(v100 + 184) & 1) == 0)
                  {
                    WebCore::ResourceRequest::doUpdateResourceRequest(*((WebCore::ResourceRequest **)this + 47));
                    *(_BYTE *)(v100 + 184) |= 1u;
                  }
                  v101 = v100 + 96;
                  v102 = *((_BYTE *)this + 131) & 1;
                  v135 = this;
                  WebCore::CachedResourceHandle<WebCore::CachedResource>::CachedResourceHandle(v136, (uint64_t)v132);
                  do
                    v103 = __ldaxr(v8);
                  while (__stlxr(v103 + 1, v8));
                  *(_QWORD *)&v136[8] = v6;
                  *(_QWORD *)&v136[16] = v95;
                  WTF::Function<void ()(WebCore::ResourceError const&,WebCore::ResourceResponse const&)>::Function<WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_0,void>(&v143, &v135);
                  (*(void (**)(uint64_t, unsigned int *, _BYTE *, uint64_t, char *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v99 + 104))(v99, v6, buf, v101, (char *)this + 16, v102, &v143);
                  v105 = v143;
                  v143 = 0;
                  if (v105)
                    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v105 + 8))(v105);
                  WebCore::CachedResource::load(WebCore::CachedResourceLoader &)::$_0::~$_0((uint64_t)&v135, v104);
                  v61 = &v132;
                  goto LABEL_84;
                }
              }
            }
LABEL_62:
            v40 = WebCore::s_platformStrategies;
            v41 = *(void (****)(_QWORD, unsigned int *, WebCore::CachedResource *, _BYTE *, char *, WTF::StringImpl **))(WebCore::s_platformStrategies + 8);
            if (!v41)
            {
              v41 = (void (***)(_QWORD, unsigned int *, WebCore::CachedResource *, _BYTE *, char *, WTF::StringImpl **))(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
              *(_QWORD *)(v40 + 8) = v41;
            }
            v132 = (unsigned int *)this;
            v42 = *((_QWORD *)this + 1);
            if (v42)
              goto LABEL_241;
            v42 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v42 = 1;
            *(_QWORD *)(v42 + 8) = this;
            v76 = (unsigned int *)*((_QWORD *)this + 1);
            *((_QWORD *)this + 1) = v42;
            if (!v76)
              goto LABEL_241;
            do
            {
              v77 = __ldaxr(v76);
              v78 = v77 - 1;
            }
            while (__stlxr(v78, v76));
            if (!v78)
            {
              atomic_store(1u, v76);
              WTF::fastFree((WTF *)v76, v75);
            }
            v42 = *((_QWORD *)this + 1);
            if (v42)
            {
LABEL_241:
              do
                v43 = __ldaxr((unsigned int *)v42);
              while (__stlxr(v43 + 1, (unsigned int *)v42));
              v133 = v42;
              v44 = *(_QWORD *)(v42 + 8);
            }
            else
            {
              v44 = 0;
              v133 = 0;
            }
            v143 = (WTF::StringImpl *)&v133;
            ++*(_DWORD *)(v44 + 548);
            v45 = *(_QWORD *)(v44 + 488);
            if (v45 && *(_QWORD *)(v45 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v44 + 464), (uint64_t *)&v143, (uint64_t)&v135);
            do
              v46 = __ldaxr(v8);
            while (__stlxr(v46 + 1, v8));
            v134 = v6;
            v47 = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
            v48 = (WTF::StringImpl *)v47;
            *v47 = (uint64_t)off_1E33F8988;
            v47[1] = (uint64_t)v132;
            v49 = v47 + 2;
            v50 = v133;
            if (v133)
            {
              do
                v51 = __ldaxr((unsigned int *)v50);
              while (__stlxr(v51 + 1, (unsigned int *)v50));
              *v49 = v50;
              v52 = *(_QWORD *)(v50 + 8);
              if (v52)
              {
                v143 = (WTF::StringImpl *)(v47 + 2);
                ++*(_DWORD *)(v52 + 548);
                v53 = *(_QWORD *)(v52 + 488);
                if (v53)
                {
                  if (*(_QWORD *)(v53 + 8))
                    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v52 + 464), (uint64_t *)&v143, (uint64_t)&v135);
                }
              }
            }
            else
            {
              *v49 = 0;
            }
            v54 = v134;
            v134 = 0;
            *((_QWORD *)v48 + 3) = v54;
            v143 = v48;
            (**v41)(v41, v6, this, buf, (char *)this + 16, &v143);
            v56 = v143;
            v143 = 0;
            if (v56)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v56 + 8))(v56);
            v57 = v134;
            v134 = 0;
            if (v57)
            {
              v58 = v57 + 2;
              do
              {
                v59 = __ldaxr(v58);
                v60 = v59 - 1;
              }
              while (__stlxr(v60, v58));
              if (!v60)
              {
                atomic_store(1u, v58);
                v88 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v88 = off_1E31FE290;
                *((_QWORD *)v88 + 1) = v58;
                v135 = v88;
                WTF::ensureOnMainThread();
                v89 = v135;
                v135 = 0;
                if (v89)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v89 + 8))(v89);
              }
            }
            v61 = (unsigned int **)&v133;
LABEL_84:
            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v61, v55);
LABEL_85:
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v62);
LABEL_86:
            if (!*(_DWORD *)v19)
            {
              __break(0xC471u);
              JUMPOUT(0x194177EF0);
            }
            --*(_DWORD *)v19;
            do
            {
LABEL_88:
              v63 = __ldaxr(v8);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v8));
            if (!v64)
            {
              atomic_store(1u, v8);
              v84 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v84 = off_1E31FE290;
              v84[1] = v8;
              *(_QWORD *)buf = v84;
              WTF::ensureOnMainThread();
              v85 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v85)
                (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
            }
            return;
          }
          if (*(_BYTE *)(v19 + 80))
          {
            v20 = *(_QWORD *)(v19 + 88);
            if (v20)
            {
              if (!*(_BYTE *)(v20 + 3538))
                goto LABEL_27;
              v106 = qword_1ECE7C608;
              if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
              {
                WebCore::Frame::pageID((WebCore::Frame *)v6);
                if (!v115)
                  v114 = 0;
                v116 = *((_QWORD *)v6 + 4);
                *(_DWORD *)buf = 134218496;
                *(_QWORD *)&buf[4] = this;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v114;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&v145 = v116;
                v110 = "%p - [pageID=%llu, frameID=%llu] CachedResource::load: Failed security check -- active loader is stopping";
LABEL_195:
                _os_log_impl(&dword_1940B8000, v106, OS_LOG_TYPE_DEFAULT, v110, buf, 0x20u);
              }
            }
            else
            {
              v106 = qword_1ECE7C608;
              if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
              {
                WebCore::Frame::pageID((WebCore::Frame *)v6);
                if (!v112)
                  v111 = 0;
                v113 = *((_QWORD *)v6 + 4);
                *(_DWORD *)buf = 134218496;
                *(_QWORD *)&buf[4] = this;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v111;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&v145 = v113;
                v110 = "%p - [pageID=%llu, frameID=%llu] CachedResource::load: Failed security check -- not active document";
                goto LABEL_195;
              }
            }
          }
          else
          {
            v106 = qword_1ECE7C608;
            if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
            {
              WebCore::Frame::pageID((WebCore::Frame *)v6);
              if (!v108)
                v107 = 0;
              v109 = *((_QWORD *)v6 + 4);
              *(_DWORD *)buf = 134218496;
              *(_QWORD *)&buf[4] = this;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v107;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&v145 = v109;
              v110 = "%p - [pageID=%llu, frameID=%llu] CachedResource::load: Failed security check -- state is provisional";
              goto LABEL_195;
            }
          }
          WebCore::CachedResource::failBeforeStarting(this);
          goto LABEL_86;
        }
      }
    }
  }
  v83 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_1940B8000, v83, OS_LOG_TYPE_DEFAULT, "%p - CachedResource::load: No associated frame", buf, 0xCu);
  }
  WebCore::CachedResource::failBeforeStarting(this);
}

void WebCore::ResourceRequest::getRequestDataToSerialize(WebCore::ResourceRequest *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v4[2];

  if (*((_QWORD *)this + 21) || *((_QWORD *)this + 24))
  {
    WebCore::ResourceRequest::getResourceRequestPlatformData(this, (uint64_t)v4);
    v3 = v4[1];
    *(_QWORD *)a2 = v4[0];
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 152) = 1;
  }
  else
  {
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)a2, this);
    *(_DWORD *)(a2 + 152) = 0;
  }
}

WebCore::HTTPHeaderMap *WebCore::ResourceRequestBase::RequestData::RequestData(WebCore::ResourceRequestBase::RequestData *this, const WebCore::ResourceRequestBase::RequestData *a2)
{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  __int128 v7;
  _DWORD *v8;
  WebCore::HTTPHeaderMap *result;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 8) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 5) = v6;
  v7 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v7;
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  v8 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 11) = v8;
  result = WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96), (const WebCore::ResourceRequestBase::RequestData *)((char *)a2 + 96));
  v10 = *((unsigned int *)a2 + 35);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 35) = v10;
  if (!(_DWORD)v10)
    goto LABEL_8;
  if (!(v10 >> 29))
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v10));
    *((_DWORD *)this + 34) = v10;
    *((_QWORD *)this + 16) = v12;
    v13 = *((unsigned int *)a2 + 35);
    if ((_DWORD)v13)
    {
      v14 = (_DWORD **)*((_QWORD *)a2 + 16);
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        if (*v14)
          *v16 += 2;
        *v12++ = v16;
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
LABEL_8:
    v11 = *((_DWORD *)a2 + 36);
    *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
    *((_DWORD *)this + 36) = v11;
    return this;
  }
  __break(0xC471u);
  return result;
}

void sub_19417883C(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WebCore::HTTPHeaderMap *v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  WebCore::HTTPHeaderMap::~HTTPHeaderMap(v3, a2);
  v6 = v2[11];
  v2[11] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v2[5];
  v2[5] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *v2;
  *v2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(a1);
}

WebCore::HTTPHeaderMap *WebCore::HTTPHeaderMap::HTTPHeaderMap(WebCore::HTTPHeaderMap *this, const WebCore::HTTPHeaderMap *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
      goto LABEL_19;
    v5 = WTF::fastMalloc((WTF *)(16 * v4));
    *((_DWORD *)this + 2) = v4;
    *(_QWORD *)this = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)a2 + 16 * v6;
      do
      {
        *(_WORD *)v5 = *(_WORD *)v7;
        v9 = *(_DWORD **)(v7 + 8);
        if (v9)
          *v9 += 2;
        *(_QWORD *)(v5 + 8) = v9;
        v7 += 16;
        v5 += 16;
      }
      while (v7 != v8);
    }
  }
  v10 = *((unsigned int *)a2 + 7);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v10;
  if (!(_DWORD)v10)
    return this;
  if (v10 >> 28)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1941789D8);
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
  *((_DWORD *)this + 6) = v10;
  *((_QWORD *)this + 2) = v12;
  v13 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v13)
  {
    v14 = *((_QWORD *)a2 + 2);
    v15 = v14 + 16 * v13;
    do
    {
      v16 = *(_DWORD **)v14;
      if (*(_QWORD *)v14)
        *v16 += 2;
      *v12 = v16;
      v17 = *(_DWORD **)(v14 + 8);
      if (v17)
        *v17 += 2;
      v12[1] = v17;
      v14 += 16;
      v12 += 2;
    }
    while (v14 != v15);
  }
  return this;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
      goto LABEL_19;
    v5 = WTF::fastMalloc((WTF *)(16 * v4));
    *((_DWORD *)this + 2) = v4;
    *(_QWORD *)this = v5;
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)a2 + 16 * v6;
      do
      {
        *(_WORD *)v5 = *(_WORD *)v7;
        v9 = *(_DWORD **)(v7 + 8);
        if (v9)
          *v9 += 2;
        *(_QWORD *)(v5 + 8) = v9;
        v7 += 16;
        v5 += 16;
      }
      while (v7 != v8);
    }
  }
  v10 = *((unsigned int *)a2 + 7);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v10;
  if (!(_DWORD)v10)
    return this;
  if (v10 >> 28)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1942C48A8);
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
  *((_DWORD *)this + 6) = v10;
  *((_QWORD *)this + 2) = v12;
  v13 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v13)
  {
    v14 = *((_QWORD *)a2 + 2);
    v15 = v14 + 16 * v13;
    do
    {
      v16 = *(_DWORD **)v14;
      if (*(_QWORD *)v14)
        *v16 += 2;
      *v12 = v16;
      v17 = *(_DWORD **)(v14 + 8);
      if (v17)
        *v17 += 2;
      v12[1] = v17;
      v14 += 16;
      v12 += 2;
    }
    while (v14 != v15);
  }
  return this;
}

void sub_1941789E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;

  v4 = v2[3];
  if ((_DWORD)v4)
  {
    v6 = 16 * v4;
    v7 = (WTF::StringImpl **)(*(_QWORD *)v2 + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v5 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    v2[2] = 0;
    WTF::fastFree(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Document::fontLoadRequest(WebCore::Document *this@<X0>, _QWORD *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  void *v19;
  WebCore::DocumentFontLoader *v20;
  WTF *v21;
  void *v22;
  unsigned int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  WTF::StringImpl *v30;
  char v31;
  _DWORD *v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  WebCore *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD **v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  WebCore::Document *v43;
  WebCore::CachedResourceLoader *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  WTF::StringImpl *v51;
  void *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  WTF *v63;
  void *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  WTF::StringImpl *v82;
  __int128 v83;
  __int128 v84;
  unsigned int *v85;
  _BYTE v86[24];
  unsigned int **v87;
  unsigned int **v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[5];
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _QWORD v104[19];
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  _WORD v111[76];
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  __int16 v115;
  unsigned int *v116[2];
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  char v124;
  __int16 v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)this + 332);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x58);
    v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *(_QWORD *)v12 = v13;
    *(_QWORD *)(v12 + 8) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    v16 = *(unsigned int **)(StatusReg + 736);
    if (!v16)
      v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    *(_QWORD *)(v12 + 48) = v16;
    *(_QWORD *)(v12 + 8) = off_1E31F7378;
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v18 = off_1E33A3B88;
    v18[1] = WebCore::DocumentFontLoader::fontLoadingTimerFired;
    v18[2] = 0;
    v18[3] = v12;
    *(_WORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 56) = v18;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 72) = 0;
    v20 = (WebCore::DocumentFontLoader *)*((_QWORD *)this + 332);
    *((_QWORD *)this + 332) = v12;
    if (v20)
    {
      WebCore::DocumentFontLoader::~DocumentFontLoader(v20, v19);
      WTF::fastFree(v21, v22);
      v12 = *((_QWORD *)this + 332);
    }
  }
  WebCore::Document::completeURL(this, a2, (uint64_t)this + 848, 0, (WTF::URL *)&v82);
  {
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
  }
  LODWORD(v116[0]) = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
  *(_DWORD *)((char *)v116 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                         + 3);
  v23 = (unsigned int *)qword_1ECE90818;
  if (qword_1ECE90818)
    *(_DWORD *)qword_1ECE90818 += 2;
  v117 = xmmword_1ECE90820;
  v118 = *(_OWORD *)algn_1ECE90830;
  v116[1] = v23;
  v119 = qword_1ECE90840;
  v120 = 0;
  v24 = dword_1ECE90854;
  v121 = 0;
  v122 = dword_1ECE90854;
  if (dword_1ECE90854)
  {
    if (dword_1ECE90854 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v71 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
    v121 = v24;
    v120 = v71;
    if (dword_1ECE90854)
    {
      v72 = qword_1ECE90848;
      v73 = qword_1ECE90848 + 16 * dword_1ECE90854;
      do
      {
        v74 = *(_DWORD **)v72;
        if (*(_QWORD *)v72)
          *v74 += 2;
        *(_QWORD *)v71 = v74;
        *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
        v72 += 16;
        v71 += 16;
      }
      while (v72 != v73);
    }
  }
  v123 = dword_1ECE90858;
  v124 = byte_1ECE9085C;
  LOBYTE(v125) = 0;
  v128 = 0;
  if (byte_1ECE90878)
  {
    v125 = word_1ECE90860;
    v25 = qword_1ECE90868;
    if (qword_1ECE90868)
      *(_DWORD *)qword_1ECE90868 += 2;
    v126 = v25;
    v26 = qword_1ECE90870;
    if (qword_1ECE90870)
      *(_DWORD *)qword_1ECE90870 += 2;
    v127 = v26;
    v128 = 1;
  }
  v129 = xmmword_1ECE90880;
  v27 = qword_1ECE90890;
  if (qword_1ECE90890)
    *(_DWORD *)qword_1ECE90890 += 2;
  v130 = v27;
  if (a4)
    v28 = 0;
  else
    v28 = 256;
  if (a5)
    v29 = 0x400000;
  else
    v29 = 0;
  *(_DWORD *)((char *)&v129 + 2) = v29 | v28 | *(_DWORD *)((_BYTE *)&v129 + 2) & 0xFFBFF6FF;
  v30 = v82;
  if (v82)
    *(_DWORD *)v82 += 2;
  v88 = (unsigned int **)v30;
  v89 = v83;
  v90 = v84;
  v91[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v91);
  v92 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v93 = v104[0];
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0x10000;
  v31 = v98 & 0x80 | 4;
  v98 = v31;
  *(_QWORD *)&v99 = 0;
  v32 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v32 += 2;
    v31 = v98;
  }
  *((_QWORD *)&v99 + 1) = v32;
  v100 = 0;
  LOBYTE(v101) = 0;
  BYTE4(v101) = 0;
  v102 = v102 & 0xE0 | 5;
  v98 = v31 | 2;
  v103 = 0;
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v104, (uint64_t *)&v88);
  v33 = v99;
  v99 = 0u;
  v105 = v33;
  v106 = v100;
  v107 = v101;
  v108 = v102;
  v34 = v103;
  v100 = 0;
  v103 = 0;
  v109 = v34;
  v110 = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v111, (const WebCore::ResourceLoaderOptions *)v116);
  v111[72] = 0;
  v112 = 0;
  v113 = 0u;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v104, &v114);
  v115 = 0;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v88, v35);
  v38 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v38 || (v39 = *(_QWORD *)(v38 + 96)) == 0)
    v39 = WebCore::threadGlobalDataSlow(v36);
  v40 = *(_DWORD ***)(v39 + 32);
  if (!v40)
  {
    WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v39);
    v40 = *(_DWORD ***)(v39 + 32);
  }
  v41 = *v40;
  if (v41)
    *v41 += 2;
  v42 = (WTF::StringImpl *)v113;
  *(_QWORD *)&v113 = v41;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v37);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = *(WebCore::Document **)(*(_QWORD *)v12 + 8);
  v44 = (WebCore::CachedResourceLoader *)*((_QWORD *)v43 + 90);
  if (!v44)
    v44 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v43, v37);
  ++*(_DWORD *)v44;
  WebCore::CachedResourceLoader::requestFont(v44, (WebCore::ResourceRequest *)v104, a3, (uint64_t)&v88);
  if ((_DWORD)v92 || (v47 = (uint64_t)v88) == 0)
  {
    v46 = 0;
    v85 = 0;
  }
  else
  {
    do
      v48 = __ldaxr((unsigned int *)v47);
    while (__stlxr(v48 + 1, (unsigned int *)v47));
    v85 = (unsigned int *)v47;
    v46 = *(_QWORD *)(v47 + 8);
    if (v46)
    {
      v87 = &v85;
      ++*(_DWORD *)(v46 + 548);
      v49 = *(_QWORD *)(v46 + 488);
      if (v49)
      {
        if (*(_QWORD *)(v49 + 8))
        {
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v46 + 464), (uint64_t *)&v87, (uint64_t)v86);
          if (v85)
            v46 = *((_QWORD *)v85 + 1);
          else
            v46 = 0;
        }
      }
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v85, v45);
  if ((_DWORD)v92 != -1)
    (*(&off_1E33A34D0 + v92))((int)v86, (WebCore::CachedResourceHandleBase *)&v88);
  LODWORD(v92) = -1;
  if (*(_DWORD *)v44 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v44, v50);
    WTF::fastFree(v63, v64);
  }
  else
  {
    --*(_DWORD *)v44;
  }
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v104, (WTF::StringImpl *)v50);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v116, v51);
  if (!v46)
    goto LABEL_56;
  v75 = *(_QWORD *)(v46 + 8);
  if (v75)
    goto LABEL_113;
  v75 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v75 = 1;
  *(_QWORD *)(v75 + 8) = v46;
  v79 = *(unsigned int **)(v46 + 8);
  *(_QWORD *)(v46 + 8) = v75;
  if (!v79)
    goto LABEL_113;
  do
  {
    v80 = __ldaxr(v79);
    v81 = v80 - 1;
  }
  while (__stlxr(v81, v79));
  if (!v81)
  {
    atomic_store(1u, v79);
    WTF::fastFree((WTF *)v79, v52);
  }
  v75 = *(_QWORD *)(v46 + 8);
  if (v75)
  {
LABEL_113:
    do
      v76 = __ldaxr((unsigned int *)v75);
    while (__stlxr(v76 + 1, (unsigned int *)v75));
    v116[0] = (unsigned int *)v75;
    v77 = *(_QWORD *)(v75 + 8);
    if (v77)
    {
      v88 = v116;
      ++*(_DWORD *)(v77 + 548);
      v78 = *(_QWORD *)(v77 + 488);
      if (v78)
      {
        if (*(_QWORD *)(v78 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v77 + 464), (uint64_t *)&v88, (uint64_t)v104);
      }
    }
  }
  else
  {
LABEL_56:
    v116[0] = 0;
  }
  v53 = v82;
  v82 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v52);
    else
      *(_DWORD *)v53 -= 2;
  }
  if (v116[0] && (v54 = *((_QWORD *)v116[0] + 1)) != 0)
  {
    v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v55 = off_1E3397D80;
    v55[1] = &unk_1E3397DF0;
    v55[2] = 0;
    v56 = v55 + 3;
    v57 = *(_QWORD *)(v54 + 8);
    if (v57)
      goto LABEL_114;
    v57 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v57 = 1;
    *(_QWORD *)(v57 + 8) = v54;
    v68 = *(unsigned int **)(v54 + 8);
    *(_QWORD *)(v54 + 8) = v57;
    if (!v68)
      goto LABEL_114;
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, v52);
    }
    v57 = *(_QWORD *)(v54 + 8);
    if (v57)
    {
LABEL_114:
      do
        v58 = __ldaxr((unsigned int *)v57);
      while (__stlxr(v58 + 1, (unsigned int *)v57));
      *v56 = v57;
      v59 = *(_QWORD *)(v57 + 8);
      if (v59)
      {
        v88 = (unsigned int **)(v55 + 3);
        ++*(_DWORD *)(v59 + 548);
        v60 = *(_QWORD *)(v59 + 488);
        if (v60)
        {
          if (*(_QWORD *)(v60 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v59 + 464), (uint64_t *)&v88, (uint64_t)v104);
        }
      }
    }
    else
    {
      *v56 = 0;
    }
    v55[4] = 0;
    v61 = *((_QWORD *)this + 37);
    if (v61)
      goto LABEL_115;
    v61 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v61 = 1;
    *(_QWORD *)(v61 + 8) = (char *)this + 288;
    v65 = (unsigned int *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = v61;
    if (!v65)
      goto LABEL_115;
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v65);
      WTF::fastFree((WTF *)v65, v52);
    }
    v61 = *((_QWORD *)this + 37);
    if (v61)
    {
LABEL_115:
      do
        v62 = __ldaxr((unsigned int *)v61);
      while (__stlxr(v62 + 1, (unsigned int *)v61));
    }
    v55[5] = v61;
  }
  else
  {
    v55 = 0;
  }
  *a6 = v55;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v116, v52);
}

WTF::StringImpl *WebCore::Document::completeURL@<X0>(WebCore::Document *this@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, WTF::URL *a5@<X8>)
{
  uint64_t v7;
  const char *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  __int128 v13;
  WebCore::TextResourceDecoder *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;

  if (*a2)
  {
    v7 = a3;
    if (!*(_QWORD *)a3
      || !*(_DWORD *)(*(_QWORD *)a3 + 4)
      || (v17 = (const WTF::StringImpl **)WTF::aboutBlankURL(this), WTF::equal(*(WTF **)v7, *v17, v18)))
    {
      if (WebCore::Document::parentDocument(this))
      {
        v19 = *((_QWORD *)this + 66);
        if (v19)
        {
          v19 = *(_QWORD *)(v19 + 8);
          if (v19)
          {
            v19 = *(_QWORD *)(v19 + 56);
            if (v19)
            {
              v19 = *(_QWORD *)(v19 + 8);
              if (v19)
              {
                if (*(_BYTE *)(v19 + 144))
                  v19 = 0;
                else
                  v19 = *(_QWORD *)(v19 + 296);
              }
            }
          }
        }
        v7 = v19 + 848;
      }
    }
    v11 = *(WTF::StringImpl **)v7;
    if (*(_QWORD *)v7)
      *(_DWORD *)v11 += 2;
    v12 = 0;
    v20 = v11;
    v13 = *(_OWORD *)(v7 + 24);
    v21 = *(_OWORD *)(v7 + 8);
    v22 = v13;
    v14 = (WebCore::TextResourceDecoder *)*((_QWORD *)this + 218);
    if (v14 && (a4 & 1) == 0)
      v12 = WebCore::TextResourceDecoder::encodingForURLParsing(v14, v10);
    MEMORY[0x19AEA52F8](a5, &v20, a2, v12);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    return (WTF::StringImpl *)WTF::URL::invalidate(a5);
  }
  return result;
}

uint64_t *WebCore::TextResourceDecoder::encodingForURLParsing(WebCore::TextResourceDecoder *this, const char *a2)
{
  const char *v2;
  uint64_t *v3;
  const char *v4;
  BOOL v5;
  BOOL v6;
  const char *v9;
  __int16 v10;
  const char *v11[2];

  v3 = PAL::TextEncoding::encodingForFormSubmissionOrURLParsing((WebCore::TextResourceDecoder *)((char *)this + 8), a2);
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", v2);
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v9;
    v11[0] = (const char *)xmmword_1ECE86C80;
    v11[1] = v9;
    if (v9 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v11))
      {
        v10 = 165;
      }
      else
      {
        v10 = 92;
      }
    }
    else
    {
      v10 = 92;
    }
    word_1ECE86C90 = v10;
  }
  v4 = (const char *)v3[1];
  if (v4)
    v5 = (_QWORD)xmmword_1ECE86C80 == 0;
  else
    v5 = 1;
  if (v5)
    v6 = v4 == (const char *)xmmword_1ECE86C80;
  else
    v6 = strcmp(v4, (const char *)xmmword_1ECE86C80) == 0;
  if (v6)
    return 0;
  else
    return v3;
}

uint64_t *PAL::TextEncoding::encodingForFormSubmissionOrURLParsing(PAL::TextEncoding *this, const char *a2)
{
  uint64_t *v2;
  const char *v3;
  const char *v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  v2 = (uint64_t *)this;
  if (PAL::TextEncoding::isNonByteBasedEncoding(this, a2))
    goto LABEL_2;
  if (PAL::didExtendTextCodecMaps != 1)
    return v2;
  {
    v5 = (const char *)v2[1];
    v3 = (const char *)PAL::UTF7Encoding(void)::globalUTF7Encoding;
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    PAL::UTF7Encoding(void)::globalUTF7Encoding = (uint64_t)PAL::atomCanonicalTextEncodingName(&WebCore::SVGStopElement::SVGStopElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, (PAL *)"UTF-7", v3);
    PAL::shouldShowBackslashAsCurrencySymbolIn((const char *)PAL::UTF7Encoding(void)::globalUTF7Encoding, v8);
    v5 = (const char *)v2[1];
    v3 = (const char *)PAL::UTF7Encoding(void)::globalUTF7Encoding;
    if (!v5)
    {
LABEL_15:
      if (v5 != v3)
        return v2;
      goto LABEL_2;
    }
  }
  if (!v3)
    goto LABEL_15;
  if (strcmp(v5, v3))
    return v2;
LABEL_2:
  v2 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    return v2;
  PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
  *(_QWORD *)&xmmword_1ECE86C80 = ((uint64_t (*)(PAL *, const char *))PAL::atomCanonicalTextEncodingName)((PAL *)"UTF-8", v3);
  *((_QWORD *)&xmmword_1ECE86C80 + 1) = v6;
  if (PAL::shouldShowBackslashAsCurrencySymbolIn((const char *)xmmword_1ECE86C80, v6))
    v7 = 165;
  else
    v7 = 92;
  word_1ECE86C90 = v7;
  return &PAL::UTF8Encoding(void)::globalUTF8Encoding;
}

BOOL PAL::TextEncoding::isNonByteBasedEncoding(PAL::TextEncoding *this, const char *a2)
{
  const char *v3;
  const char *v4;
  BOOL v5;
  const char *v6;
  const char *v8;
  __int16 v9;
  BOOL v10;
  const char *v11;
  __int16 v12;

  {
    v3 = (const char *)*((_QWORD *)this + 1);
    v4 = (const char *)qword_1EE2E6E10;
    if (v3)
      v5 = qword_1EE2E6E10 == 0;
    else
      v5 = 1;
    if (!v5)
      goto LABEL_19;
  }
  else
  {
    PAL::UTF16LittleEndianEncoding(void)::globalUTF16LittleEndianEncoding = (uint64_t)&off_1E31F4A18;
    qword_1EE2E6E10 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-16LE", a2);
    unk_1EE2E6E18 = v8;
    if (PAL::shouldShowBackslashAsCurrencySymbolIn((const char *)qword_1EE2E6E10, v8))
      v9 = 165;
    else
      v9 = 92;
    word_1EE2E6E20 = v9;
    v3 = (const char *)*((_QWORD *)this + 1);
    v4 = (const char *)qword_1EE2E6E10;
    if (v3)
      v10 = qword_1EE2E6E10 == 0;
    else
      v10 = 1;
    if (!v10)
    {
LABEL_19:
      if (!strcmp(v3, v4))
        return 1;
      goto LABEL_8;
    }
  }
  if (v3 == v4)
    return 1;
LABEL_8:
  {
    v6 = (const char *)qword_1EE2E6DE8;
    if (v3)
      goto LABEL_10;
  }
  else
  {
    PAL::UTF16BigEndianEncoding(void)::globalUTF16BigEndianEncoding = (uint64_t)&off_1E31F4A18;
    qword_1EE2E6DE8 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-16BE", v4);
    unk_1EE2E6DF0 = v11;
    if (PAL::shouldShowBackslashAsCurrencySymbolIn((const char *)qword_1EE2E6DE8, v11))
      v12 = 165;
    else
      v12 = 92;
    word_1EE2E6DF8 = v12;
    v3 = (const char *)*((_QWORD *)this + 1);
    v6 = (const char *)qword_1EE2E6DE8;
    if (v3)
    {
LABEL_10:
      if (v6)
        return strcmp(v3, v6) == 0;
    }
  }
  return v3 == v6;
}

void WebCore::CachedResourceRequest::~CachedResourceRequest(WebCore::CachedResourceRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char v14;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(WTF::StringImpl **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *(WTF::StringImpl **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, uint64_t))off_1E334EBA8[v13])(&v14, v4 + 8);
      *(_DWORD *)(v4 + 32) = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::CachedResourceRequest *)((char *)this + 208), a2);
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  WebCore::ResourceRequest::~ResourceRequest(this, v9);
}

void WebCore::ResourceLoaderOptions::~ResourceLoaderOptions(WebCore::ResourceLoaderOptions *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl **v13;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (*((_BYTE *)this + 104))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = *((unsigned int *)this + 17);
  if ((_DWORD)v6)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    v10 = 16 * v6;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          v12 = v10;
          v13 = v9;
          WTF::StringImpl::destroy(v11, a2);
          v10 = v12;
          v9 = v13;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

WebCore::ResourceRequest *WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL@<X0>(WebCore::ResourceRequest *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char v5;
  int v6;
  __int128 *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;

  v3 = (uint64_t)this;
  v5 = *((_BYTE *)this + 184);
  if ((v5 & 1) == 0)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v5 = *(_BYTE *)(v3 + 184) | 1;
    *(_BYTE *)(v3 + 184) = v5;
  }
  v7 = (__int128 *)(v3 + 8);
  v6 = *(_DWORD *)(v3 + 8);
  if ((v6 & 1) != 0
    && (v8 = *(WTF::StringImpl **)v3) != 0
    && *((_DWORD *)v8 + 1) > *(_DWORD *)(v3 + 36)
    && (v6 & 2) != 0)
  {
    if ((v5 & 1) != 0
      || (WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v3),
          *(_BYTE *)(v3 + 184) |= 1u,
          (v8 = *(WTF::StringImpl **)v3) != 0))
    {
      *(_DWORD *)v8 += 2;
    }
    v14 = v8;
    v9 = *(_OWORD *)(v3 + 24);
    v15 = *v7;
    v16 = v9;
    WTF::URL::fragmentIdentifier((WTF::URL *)&v14);
    if ((v10 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    WTF::URL::removeFragmentIdentifier((WTF::URL *)&v14);
    if ((*(_BYTE *)(v3 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v3);
      *(_BYTE *)(v3 + 184) |= 1u;
    }
    this = v14;
    if (v14)
      *(_DWORD *)v14 += 2;
    v12 = *(WTF::StringImpl **)v3;
    *(_QWORD *)v3 = this;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v11);
        this = v14;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    v13 = v16;
    *v7 = v15;
    *(_OWORD *)(v3 + 24) = v13;
    *(_BYTE *)(v3 + 148) &= ~0x20u;
    *(_BYTE *)(v3 + 184) &= ~2u;
    v14 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WebCore::ResourceRequest *)WTF::StringImpl::destroy(this, v11);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::CachedResource::CachedResource(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  WTF::WallTime *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  __int16 v33;
  BOOL v34;
  _QWORD v35[2];

  *(_QWORD *)a1 = off_1E33F86E0;
  *(_QWORD *)(a1 + 8) = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions(a1 + 16, (const WebCore::ResourceLoaderOptions *)(a2 + 208));
  WebCore::ResourceRequestBase::RequestData::RequestData(a1 + 160, (uint64_t *)a2);
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 312) = v11;
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 320) = v12;
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 328) = v13;
  v14 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 336) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 352) = v15;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = a4;
  if (a5)
    ++*(_DWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 424) = a5;
  WTF::WallTime::now(v10);
  *(_QWORD *)(a1 + 432) = v16;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v17 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a1 + 504) = v17;
  v18 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a1 + 512) = v18;
  v19 = *(_QWORD *)(a2 + 360);
  if (v19)
  {
    v20 = (uint64_t *)(*(_QWORD *)(v19 + 96) + 24);
  }
  else
  {
    v32 = *(_QWORD *)(a2 + 368);
    if (v32 && *(_DWORD *)(v32 + 4))
    {
      v20 = (uint64_t *)(a2 + 368);
    }
    else
    {
      v20 = &qword_1EE337DC8;
      if ((byte_1EE337DA4 & 1) == 0)
      {
        v35[0] = "other";
        v35[1] = 6;
        v20 = WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EE337DC8, (uint64_t)v35);
        byte_1EE337DA4 = 1;
      }
    }
  }
  v21 = (_DWORD *)*v20;
  if (*v20)
    *v21 += 2;
  *(_QWORD *)(a1 + 520) = v21;
  *(_QWORD *)(a1 + 528) = 0x7FF0000000000000;
  *(_BYTE *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  v22 = a3 & 0x1F;
  *(_BYTE *)(a1 + 556) = *(_BYTE *)(a1 + 556) & 0x80 | a3 & 0x1F;
  v23 = (_WORD *)(a1 + 557);
  v24 = *(_WORD *)(a1 + 557) & 0xF81C | 0x20;
  *(_WORD *)(a1 + 557) = v24;
  v25 = v24 & 0xF7FF | (*(unsigned __int8 *)(a2 + 392) << 11);
  *(_WORD *)(a1 + 557) = v25;
  v26 = v25 & 0xCFFF | (*(unsigned __int8 *)(a2 + 392) << 12);
  *(_WORD *)(a1 + 557) = v26;
  v27 = v26 & 0x9FFF | (*(unsigned __int8 *)(a2 + 393) << 14);
  *(_WORD *)(a1 + 557) = v27;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  v28 = (*(_DWORD *)(a2 + 322) >> 25) & 3;
  if (*(_BYTE *)(a2 + 353))
  {
    v29 = *(unsigned __int8 *)(a2 + 352);
  }
  else if (v22 > 0x10)
  {
    v29 = 1;
  }
  else
  {
    v29 = byte_1969F2CD0[v22];
  }
  if (v28 == 1)
  {
    v34 = v29 != 0;
    LOBYTE(v29) = v29 - 1;
    if (!v34)
      LOBYTE(v29) = 0;
  }
  else if (!v28)
  {
    if (v29 == 4)
      LOBYTE(v29) = 4;
    else
      LOBYTE(v29) = v29 + 1;
  }
  *v23 = v27 & 0xD820 | (4 * (v29 & 7));
  v30 = *(_QWORD *)(a1 + 512);
  if ((*(_BYTE *)(a1 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 160));
    *(_BYTE *)(a1 + 344) |= 1u;
  }
  if (v30 && *(_BYTE *)(a1 + 17) != 1 && (!WTF::URL::protocolIs() || (*(_BYTE *)(a1 + 131) & 8) != 0))
  {
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    if ((WebCore::SecurityOrigin::canRequest(v30, (WebCore::ThreadableBlobRegistry *)(a1 + 160), (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 17) == 3)
        v33 = 1;
      else
        v33 = 2;
      *v23 = *v23 & 0xFFFC | v33;
    }
  }
  return a1;
}

uint64_t WebCore::ResourceLoaderOptions::ResourceLoaderOptions(uint64_t this, const WebCore::ResourceLoaderOptions *a2)
{
  int v2;
  _DWORD *v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  const WebCore::ResourceLoaderOptions *v17;

  v2 = *(_DWORD *)a2;
  *(_DWORD *)(this + 3) = *(_DWORD *)((char *)a2 + 3);
  *(_DWORD *)this = v2;
  v3 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v3)
    *v3 += 2;
  *(_QWORD *)(this + 8) = v3;
  v4 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(this + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(this + 32) = v4;
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  v5 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 68) = v5;
  if ((_DWORD)v5)
  {
    v16 = this;
    v17 = a2;
    if (v5 >> 28)
    {
      __break(0xC471u);
      return this;
    }
    v10 = v5;
    v11 = WTF::fastMalloc((WTF *)(16 * v5));
    this = v16;
    a2 = v17;
    *(_DWORD *)(v16 + 64) = v10;
    *(_QWORD *)(v16 + 56) = v11;
    v12 = *((unsigned int *)v17 + 17);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)v17 + 7);
      v14 = v13 + 16 * v12;
      do
      {
        v15 = *(_DWORD **)v13;
        if (*(_QWORD *)v13)
          *v15 += 2;
        *(_QWORD *)v11 = v15;
        *(_BYTE *)(v11 + 8) = *(_BYTE *)(v13 + 8);
        v13 += 16;
        v11 += 16;
      }
      while (v13 != v14);
    }
  }
  v6 = *((_BYTE *)a2 + 76);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *(_BYTE *)(this + 76) = v6;
  *(_BYTE *)(this + 80) = 0;
  *(_BYTE *)(this + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    *(_WORD *)(this + 80) = *((_WORD *)a2 + 40);
    v7 = (_DWORD *)*((_QWORD *)a2 + 11);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(this + 88) = v7;
    v8 = (_DWORD *)*((_QWORD *)a2 + 12);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(this + 96) = v8;
    *(_BYTE *)(this + 104) = 1;
  }
  *(_OWORD *)(this + 112) = *((_OWORD *)a2 + 7);
  v9 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(this + 128) = v9;
  return this;
}

double WebCore::ResourceRequestBase::RequestData::RequestData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 28) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_DWORD *)(a1 + 48) & 0xFFFFFFFE | a2[6] & 1;
  *(_DWORD *)(a1 + 48) = v8;
  v9 = v8 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 12) >> 1) & 1));
  *(_DWORD *)(a1 + 48) = v9;
  v10 = v9 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 12) >> 2) & 1));
  *(_DWORD *)(a1 + 48) = v10;
  v11 = v10 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 12) >> 3) & 7));
  *(_DWORD *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 48) = a2[6] & 0xFFFFFFC0 | v11 & 0x3F;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)((char *)a2 + 52);
  *(_QWORD *)(a1 + 68) = *(uint64_t *)((char *)a2 + 68);
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 12) &= ~1u;
  result = *((double *)a2 + 10);
  *(double *)(a1 + 80) = result;
  v13 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v13;
  v14 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = 0;
  *(_DWORD *)(a1 + 104) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = 0;
  *(_DWORD *)(a1 + 108) = v14;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v15 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = 0;
  *(_DWORD *)(a1 + 120) = v15;
  LODWORD(v15) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = 0;
  *(_DWORD *)(a1 + 124) = v15;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v16 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(a1 + 128) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = 0;
  *(_DWORD *)(a1 + 136) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = 0;
  *(_DWORD *)(a1 + 140) = v16;
  LODWORD(v16) = *((_DWORD *)a2 + 36);
  *(_BYTE *)(a1 + 148) = *((_BYTE *)a2 + 148);
  *(_DWORD *)(a1 + 144) = v16;
  return result;
}

void WebCore::ResourceLoader::~ResourceLoader(WebCore::ResourceLoader *this, WTF::StringImpl *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  void *v9;
  WebCore::LegacyPreviewLoader *v10;
  WTF *v11;
  void *v12;
  WebCore::ResourceResponseBase *v13;
  const void *v14;
  void *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;

  *(_QWORD *)this = &unk_1E33F6F20;
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoader *)((char *)this + 976), a2);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceLoader *)((char *)this + 768), v3);
  v5 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v23 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v5 + 8);
        v25 = v24 + 16 * v23;
        do
        {
          v26 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              v40 = v24;
              v41 = v25;
              v39 = v5;
              atomic_store(1u, v26);
              v37 = v26;
              v38 = v26[6];
              if ((_DWORD)v38 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_4[v38])(&v42, v26 + 2);
              v37[6] = -1;
              WTF::fastFree((WTF *)v37, v4);
              v5 = v39;
              v24 = v40;
              v25 = v41;
            }
          }
          v24 += 16;
        }
        while (v24 != v25);
      }
      v29 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v29 && v29 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v36 = v5;
        WTF::fastFree(v29, v4);
        v5 = v36;
      }
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceLoader *)((char *)this + 536), v4);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceLoader *)((char *)this + 336), v8);
  v10 = (WebCore::LegacyPreviewLoader *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v10)
  {
    WebCore::LegacyPreviewLoader::~LegacyPreviewLoader(v10, v9);
    WTF::fastFree(v11, v12);
  }
  v13 = (WebCore::ResourceLoader *)((char *)this + 48);
  v14 = (const void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v14)
  {
    CFRelease(v14);
    v13 = (WebCore::ResourceLoader *)((char *)this + 48);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v13, (WTF::StringImpl *)v9);
  v16 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    if (v16[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 24))(v16);
    else
      --v16[6];
  }
  v17 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v31 = off_1E31FE290;
      v31[1] = v18;
      v43 = v31;
      WTF::ensureOnMainThread();
      v32 = v43;
      v43 = 0;
      if (v32)
        (*(void (**)(_QWORD *))(*v32 + 8))(v32);
    }
  }
  v21 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 48))(v21);
    else
      --v21[2];
  }
  v22 = *((_QWORD *)this + 1);
  if (v22)
  {
    *(_QWORD *)(v22 + 8) = 0;
    v33 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v15);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::ResourceRequest::~ResourceRequest(WebCore::ResourceRequest *this, void *a2)
{
  const void *v3;
  WebCore::FormData *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WebCore::FormData *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::FormData::~FormData(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData(this, (WTF::StringImpl *)a2);
}

{
  const void *v3;
  WebCore::FormData *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WebCore::FormData *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
    WTF::RefCounted<WebCore::FormData>::deref(v4, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData(this, (WTF::StringImpl *)a2);
}

void WebCore::ResourceResponseBase::~ResourceResponseBase(WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  const void *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;

  if (*((_BYTE *)this + 128))
  {
    v3 = (const void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v3)
      CFRelease(v3);
  }
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v13 = *(_DWORD **)(v4 + 128);
      *(_QWORD *)(v4 + 128) = 0;
      if (v13)
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13, a2);
      v14 = *(WTF::StringImpl **)(v4 + 96);
      *(_QWORD *)(v4 + 96) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceResponseBase *)((char *)this + 80), a2);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v7);
    else
      *(_DWORD *)v12 -= 2;
  }
}

void WebCore::ResourceRequestBase::RequestData::~RequestData(WebCore::ResourceRequestBase::RequestData *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  v3 = *((unsigned int *)this + 35);
  if ((_DWORD)v3)
  {
    v9 = (WTF::StringImpl **)*((_QWORD *)this + 16);
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::ResourceRequestBase::RequestData *)((char *)this + 96), a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void WebCore::HTTPHeaderMap::~HTTPHeaderMap(WebCore::HTTPHeaderMap *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v10 = 16 * v3;
    v11 = (WTF::StringImpl **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(v11 - 1);
      *(v11 - 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v7 = 16 * v5;
    v8 = (WTF::StringImpl **)(*(_QWORD *)this + 8);
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v6 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v6, a2);
  }
}

void WebCore::CachedResourceLoader::requestFont(_QWORD *a1@<X0>, WebCore::ResourceRequest *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  CFTypeRef v8[10];
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a3)
    v6 = 5;
  else
    v6 = 4;
  WebCore::CachedResourceLoader::requestResource((WTF::StringImpl **)v8, a2, a1, (WTF::StringImpl *)v6, 0, 0);
  WebCore::castCachedResourceTo<WebCore::CachedFont,WebCore::CachedResource>(a4, v8);
  if (v9 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v9))((int)&v7, (WebCore::CachedResourceHandleBase *)v8);
}

void WebCore::castCachedResourceTo<WebCore::CachedFont,WebCore::CachedResource>(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  CFTypeRef v10;
  char v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  unsigned int *v24;
  int v25;
  __int16 v26;
  unsigned int **v27;

  v2 = a2;
  v4 = *((_DWORD *)a2 + 20);
  if (!v4)
  {
    if (!*a2)
      goto LABEL_14;
    v2 = (CFTypeRef *)*((_QWORD *)*a2 + 1);
    if (!v2)
      goto LABEL_14;
    goto LABEL_18;
  }
  if (v4 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    v12 = (unsigned int *)v2[1];
    if (v12)
      goto LABEL_38;
    v12 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v12 = 1;
    *((_QWORD *)v12 + 1) = v2;
    v19 = (unsigned int *)v2[1];
    v2[1] = v12;
    if (!v19)
      goto LABEL_38;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, a2);
    }
    v12 = (unsigned int *)v2[1];
    if (v12)
    {
LABEL_38:
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v24 = v12;
      v14 = *((_QWORD *)v12 + 1);
      if (!v14
        || (v27 = &v24, ++*(_DWORD *)(v14 + 548), (v15 = *(_QWORD *)(v14 + 488)) == 0)
        || !*(_QWORD *)(v15 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v14 + 464), (uint64_t *)&v27, (uint64_t)&v25), (v12 = v24) != 0))
      {
        do
          v16 = __ldaxr(v12);
        while (__stlxr(v16 + 1, v12));
        *(_QWORD *)a1 = v12;
        v17 = *((_QWORD *)v12 + 1);
        if (v17)
        {
          v27 = (unsigned int **)a1;
          ++*(_DWORD *)(v17 + 548);
          v18 = *(_QWORD *)(v17 + 488);
          if (v18)
          {
            if (*(_QWORD *)(v18 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v17 + 464), (uint64_t *)&v27, (uint64_t)&v25);
          }
        }
        goto LABEL_16;
      }
LABEL_15:
      *(_QWORD *)a1 = 0;
LABEL_16:
      *(_DWORD *)(a1 + 80) = 0;
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v24, a2);
      return;
    }
LABEL_14:
    v24 = 0;
    goto LABEL_15;
  }
  v5 = *a2;
  if (*a2)
    *v5 += 2;
  v6 = a2[1];
  if (v6)
    *v6 += 2;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 2);
  v9 = a2[6];
  if (v9)
    *v9 += 2;
  v25 = *((_DWORD *)a2 + 14);
  v26 = *((_WORD *)a2 + 30);
  v10 = a2[8];
  if (v10)
  {
    v22 = v8;
    v23 = v7;
    CFRetain(a2[8]);
    v8 = v22;
    v7 = v23;
  }
  v11 = *((_BYTE *)v2 + 72);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_DWORD *)(a1 + 56) = v25;
  *(_WORD *)(a1 + 60) = v26;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v11;
  *(_DWORD *)(a1 + 80) = 1;
}

void WebCore::ResourceRequest::getResourceRequestPlatformData(WebCore::ResourceRequest *this@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  NSURLRequest *v5;
  NSURLRequest *v6;
  uint64_t v7;
  NSURLRequest *v8;
  int16x8_t v9;
  NSURLRequest *v10;
  unsigned int v11;
  NSURLRequest *v12;
  void *v13;
  _BYTE v14[200];

  if (!*((_QWORD *)this + 21) && !*((_QWORD *)this + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19417AC88);
  }
  if ((*((_BYTE *)this + 184) & 2) == 0)
  {
    WebCore::ResourceRequest::doUpdatePlatformRequest(this);
    *((_BYTE *)this + 184) |= 2u;
  }
  v4 = (const void *)*((_QWORD *)this + 24);
  if (v4)
    CFRetain(*((CFTypeRef *)this + 24));
  v5 = (id)CFMakeCollectable(v4);
  v6 = v5;
  if (v5)
    CFRetain(v5);
  v7 = objc_opt_class();
  if (v7 == objc_opt_class() || v7 == objc_opt_class())
  {
    v8 = v6;
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v14, v6);
    WebCore::ResourceRequest::replacePlatformRequest((uint64_t)v14, 0);
    v12 = (NSURLRequest *)WebCore::ResourceRequest::nsURLRequest((WebCore::ResourceRequest *)v14, 0);
    v8 = v12;
    if (v12)
      CFRetain(v12);
    if (v6)
      CFRelease(v6);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v14, v13);
  }
  if (v8)
  {
    if (-[NSURLRequest HTTPBody](v8, "HTTPBody") || -[NSURLRequest HTTPBodyStream](v8, "HTTPBodyStream"))
    {
      v10 = (NSURLRequest *)-[NSURLRequest mutableCopy](v8, "mutableCopy");
      -[NSURLRequest setHTTPBody:](v10, "setHTTPBody:", 0);
      -[NSURLRequest setHTTPBodyStream:](v10, "setHTTPBodyStream:", 0);
      CFRelease(v8);
    }
    else
    {
      v10 = v8;
    }
    *(_QWORD *)a2 = v10;
    v11 = *((unsigned __int8 *)this + 148);
    *(_BYTE *)(a2 + 8) = (v11 & 4) != 0;
    *(_BYTE *)(a2 + 9) = 1;
    *(_BYTE *)(a2 + 10) = *((_BYTE *)this + 147);
    *(_BYTE *)(a2 + 11) = 1;
    v9.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(v11) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFAFFFBFFFCFFFDLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)(a2 + 12) = vmovn_s16(v9).u32[0];
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
}

void sub_19417ACE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebCore::ResourceRequestBase::setURL(WebCore::ResourceRequestBase *this, const WTF::URL *a2, int a3)
{
  _DWORD *v6;
  WTF::StringImpl *result;
  __int128 v8;
  char v9;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  result = *(WTF::StringImpl **)this;
  *(_QWORD *)this = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v8 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 8) = v8;
  if (a3)
    v9 = 32;
  else
    v9 = 0;
  *((_BYTE *)this + 148) = *((_BYTE *)this + 148) & 0xDF | v9;
  *((_BYTE *)this + 184) &= ~2u;
  return result;
}

BOOL PAL::shouldShowBackslashAsCurrencySymbolIn(const char *a1, const char *a2)
{
  _BOOL8 result;
  const char *v4[2];

  result = 0;
  v4[0] = a1;
  v4[1] = a2;
  if (a2 && PAL::nonBackslashEncodings)
    return *(_QWORD *)PAL::nonBackslashEncodings
        && WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v4) != 0;
  return result;
}

void InitWebCoreThreadSystemInterface()
{
  _QWORD *v0;

  if ((InitWebCoreThreadSystemInterface::didInit & 1) == 0)
  {
    *MEMORY[0x1E0CBE170] = WebThreadLock;
    *MEMORY[0x1E0CBE168] = WebThreadIsLockedOrDisabled;
    v0 = (_QWORD *)MEMORY[0x1E0CBE178];
    *MEMORY[0x1E0CBE160] = WebThreadIsEnabled;
    *v0 = WebThreadRun;
    InitWebCoreThreadSystemInterface::didInit = 1;
  }
}

BOOL WebCore::ResourceRequestBase::isNull(WebCore::ResourceRequestBase *this)
{
  char v2;

  v2 = *((_BYTE *)this + 184);
  if ((v2 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v2 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v2;
  }
  if ((v2 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return *(_QWORD *)this == 0;
}

CFTypeRef WebCore::ImageBuffer::backendParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  CFTypeRef result;

  v4 = 0;
  v5 = *(float *)(a1 + 8);
  v6 = ceilf(*(float *)a1 * v5);
  if (v6 > 0.0)
  {
    v7 = ceilf(*(float *)(a1 + 4) * v5);
    if (v7 > 0.0)
    {
      v8 = v6 > -2147500000.0 && v6 < 2147500000.0;
      if (v8 && (v7 > -2147500000.0 ? (v9 = v7 < 2147500000.0) : (v9 = 0), v9))
      {
        v10 = (int)v6;
        v11 = (unint64_t)(int)v7 << 32;
        if (v7 >= 2147500000.0)
          v11 = 0x7FFFFFFF00000000;
        if (v6 >= 2147500000.0)
          v10 = 0x7FFFFFFFLL;
        v4 = v11 | v10;
      }
      else
      {
        v4 = 0;
      }
    }
  }
  *(_QWORD *)a2 = v4;
  *(float *)(a2 + 8) = v5;
  result = *(CFTypeRef *)(a1 + 16);
  *(_QWORD *)(a2 + 16) = result;
  if (result)
    result = CFRetain(result);
  *(_WORD *)(a2 + 24) = *(_WORD *)(a1 + 24);
  return result;
}

uint64_t WebCore::CachedScriptSourceProvider::hash(WebCore::CachedScriptSourceProvider *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  v1 = *((_QWORD *)this + 17);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v3 = *((unsigned __int8 *)this + 12);
  v4 = *(_DWORD *)(v2 + 672);
  if (v4 == 2)
  {
    if (*(_BYTE *)(v2 + 668) == (v3 == 1))
      return *(unsigned int *)(v2 + 664);
LABEL_7:
    WebCore::CachedScript::script((WebCore::CachedResource *)v2, (void *)(v3 == 1));
    return *(unsigned int *)(v2 + 664);
  }
  if (!v4)
    goto LABEL_7;
  return *(unsigned int *)(v2 + 664);
}

const void *WebCore::PlatformImageNativeImageBackend::colorSpace@<X0>(CGImageRef *this@<X0>, _QWORD *a2@<X8>)
{
  const void *result;
  const void *v4;

  result = CGImageGetColorSpace(this[1]);
  v4 = result;
  if (result)
    result = CFRetain(result);
  *a2 = v4;
  return result;
}

WTF::StringImpl **WTF::AtomString::operator=(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v3 += 2;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

float WebCore::Layout::InlineFormattingUtils::inlineItemWidth(WebCore::Layout::InlineFormattingUtils *this, const WebCore::Layout::InlineItem *a2, float a3, int a4)
{
  __int16 v4;
  unsigned int v5;
  WebCore::Layout::Box *v6;
  char *v7;
  WebCore::FontCascadeFonts **v8;
  unsigned int v9;
  unsigned int v10;
  float result;
  WebCore::Layout::Box *v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  float v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  _WORD *LineStyle;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  WebCore::Layout::Box *v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  int v73;
  const WebCore::Layout::InlineItem *v74;
  _DWORD *v75;
  WebCore::Layout::Box *v76;

  v4 = *(_WORD *)((char *)a2 + 21);
  v5 = v4 & 0xF;
  if ((v4 & 0xF) != 0)
  {
    result = 0.0;
    if (v5 < 4)
      return result;
    v12 = *(WebCore::Layout::Box **)a2;
    v13 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (!*(_DWORD *)(v13 + 8))
    {
      v14 = (_QWORD *)((char *)v12 + 104);
LABEL_13:
      v15 = (_DWORD *)*v14;
      goto LABEL_14;
    }
    v15 = *(_DWORD **)(v13 + 40);
    if (v15)
    {
      v57 = *(v15 - 2);
      v58 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
      v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
      v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
      v61 = v57 & ((v60 >> 31) ^ v60);
      v62 = *(WebCore::Layout::Box **)&v15[4 * v61];
      if (v62 == v12)
      {
LABEL_60:
        v14 = &v15[4 * v61 + 2];
        goto LABEL_13;
      }
      v63 = 1;
      while (v62)
      {
        v61 = ((_DWORD)v61 + v63) & v57;
        v62 = *(WebCore::Layout::Box **)&v15[4 * v61];
        ++v63;
        if (v62 == v12)
          goto LABEL_60;
      }
      v15 = 0;
    }
LABEL_14:
    v16 = *((_WORD *)v12 + 6) & 0xF;
    v17 = v16 > 0xB;
    v18 = (1 << v16) & 0x884;
    if (v17 || v18 == 0)
    {
      switch(v5)
      {
        case 6u:
          v52 = v15[5];
          v53 = v15[9];
          v40 = __OFADD__(v52, v53);
          v54 = v52 + v53;
          v55 = (v52 >> 31) + 0x7FFFFFFF;
          if (!v40)
            v55 = v54;
          v56 = v15[13];
          v40 = __OFADD__(v55, v56);
          v41 = v55 + v56;
          v42 = (v55 >> 31) + 0x7FFFFFFF;
          goto LABEL_34;
        case 5u:
          v44 = v15[4];
          v45 = v15[8];
          v40 = __OFADD__(v44, v45);
          v46 = v44 + v45;
          v47 = (v44 >> 31) + 0x7FFFFFFF;
          if (!v40)
            v47 = v46;
          v48 = v15[12];
          v40 = __OFADD__(v47, v48);
          v49 = v47 + v48;
          v50 = (v47 >> 31) + 0x7FFFFFFF;
          if (!v40)
            v50 = v49;
          if (a4)
          {
            v75 = v15;
            v73 = v50;
            LineStyle = WebCore::Layout::InlineItem::firstLineStyle((WebCore::Layout::Box **)a2);
            v50 = v73;
            v15 = v75;
          }
          else
          {
            LineStyle = (_WORD *)((char *)v12 + 16);
          }
          if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)LineStyle + 1) + 8) + 68) & 8) != 0)
          {
            v64 = v15[9];
            v65 = v15[13];
            v40 = __OFADD__(v64, v65);
            v66 = v64 + v65;
            v67 = (v64 >> 31) + 0x7FFFFFFF;
            if (!v40)
              v67 = v66;
            v40 = __OFADD__(v50, v67);
            v68 = v50 + v67;
            if (v40)
              v50 = (v50 >> 31) + 0x7FFFFFFF;
            else
              v50 = v68;
          }
          v43 = (float)v50;
          return v43 * 0.015625;
        case 8u:
          return result;
      }
    }
    v20 = v15[2];
    v21 = v15[12];
    v22 = v15[13];
    v40 = __OFADD__(v21, v20);
    v23 = v21 + v20;
    v24 = (v21 >> 31) + 0x7FFFFFFF;
    if (v40)
      v23 = v24;
    v40 = __OFADD__(v23, v22);
    v25 = v23 + v22;
    v26 = (v23 >> 31) + 0x7FFFFFFF;
    if (!v40)
      v26 = v25;
    v27 = v15[8];
    v28 = v15[9];
    v40 = __OFADD__(v27, v26);
    v29 = v27 + v26;
    v30 = (v27 >> 31) + 0x7FFFFFFF;
    if (v40)
      v29 = v30;
    v31 = v15[17];
    v40 = __OFADD__(v29, v31);
    v32 = v29 + v31;
    v33 = (v29 >> 31) + 0x7FFFFFFF;
    if (!v40)
      v33 = v32;
    v40 = __OFADD__(v33, v28);
    v34 = v33 + v28;
    v35 = (v33 >> 31) + 0x7FFFFFFF;
    if (!v40)
      v35 = v34;
    v37 = v15[4];
    v36 = v15[5];
    v40 = __OFADD__(v37, v35);
    v38 = v37 + v35;
    v39 = (v37 >> 31) + 0x7FFFFFFF;
    if (v40)
      v38 = v39;
    v40 = __OFADD__(v38, v36);
    v41 = v38 + v36;
    v42 = (v38 >> 31) + 0x7FFFFFFF;
LABEL_34:
    if (!v40)
      v42 = v41;
    v43 = (float)v42;
    return v43 * 0.015625;
  }
  if ((v4 & 0x40) != 0)
    return *((float *)a2 + 2);
  v6 = *(WebCore::Layout::Box **)a2;
  if (!a4)
    goto LABEL_5;
  if ((*((_WORD *)v6 + 6) & 0x200) == 0)
    goto LABEL_5;
  v76 = *(WebCore::Layout::Box **)a2;
  v74 = a2;
  v72 = a3;
  v69 = WebCore::Layout::Box::rareData(v6);
  a3 = v72;
  a2 = v74;
  v70 = v69;
  v6 = v76;
  if (*(_QWORD *)(v70 + 24))
  {
    v71 = WebCore::Layout::Box::rareData(v76);
    a3 = v72;
    a2 = v74;
    v7 = *(char **)(v71 + 24);
  }
  else
  {
LABEL_5:
    v7 = (char *)v6 + 16;
  }
  v8 = (WebCore::FontCascadeFonts **)(*((_QWORD *)v7 + 4) + 32);
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x30) == 0x10 && (*(_DWORD *)(*(_QWORD *)a2 + 56) & 0x28000000) != 0x8000000)
  {
    v9 = *((_DWORD *)a2 + 4);
    v10 = v9 + 1;
  }
  else
  {
    v9 = *((_DWORD *)a2 + 4);
    v10 = *((_DWORD *)a2 + 3) + v9;
  }
  return WebCore::Layout::TextUtil::width((uint64_t *)a2, v8, v9, v10, 1, a3);
}

_WORD *WebCore::Layout::InlineItem::firstLineStyle(WebCore::Layout::Box **this)
{
  WebCore::Layout::Box *v1;
  uint64_t v3;
  WebCore::Layout::Box *v4;

  v1 = *this;
  if ((*((_WORD *)v1 + 6) & 0x200) != 0
    && (v4 = v1, v3 = WebCore::Layout::Box::rareData(v1), v1 = v4, *(_QWORD *)(v3 + 24)))
  {
    return *(_WORD **)(WebCore::Layout::Box::rareData(v4) + 24);
  }
  else
  {
    return (_WORD *)((char *)v1 + 16);
  }
}

uint64_t WebCore::SQLiteDatabase::useFastMalloc(void)::$_4::__invoke()
{
  return 0;
}

WebCore::Page **WebCore::Chrome::windowScreenDidChange(uint64_t a1, unsigned int a2, uint64_t a3)
{
  WebCore::Page *v3;
  WebCore::Page *v5;

  v3 = *(WebCore::Page **)(*(_QWORD *)(a1 + 8) + 8);
  ++*(_DWORD *)v3;
  v5 = v3;
  WebCore::Page::windowScreenDidChange((uint64_t)v3, a2, a3);
  return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v5);
}

uint64_t *WebCore::SystemBatteryStatusTestingOverrides::setConfigurationChangedCallback(uint64_t a1, uint64_t a2)
{
  return WTF::Function<void ()(BOOL)>::operator=<std::function<void ()(BOOL)>,void>((uint64_t *)(a1 + 8), a2);
}

uint64_t WebCore::RealtimeMediaSourceCenter::setDisplayCaptureFactory(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::setVideoCaptureFactory(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 64) = a2;
  return result;
}

uint64_t WebCore::RealtimeMediaSourceCenter::setAudioCaptureFactory(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t WebCore::ApplicationCacheStorage::setDefaultOriginQuota(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 48) = a2;
  return this;
}

uint64_t WebCore::NetworkStorageSession::setThirdPartyCookieBlockingMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 265) = a2;
  return result;
}

uint64_t *WebCore::VP9TestingOverrides::setConfigurationChangedCallback(uint64_t a1, uint64_t a2)
{
  return WTF::Function<void ()(BOOL)>::operator=<std::function<void ()(BOOL)>,void>((uint64_t *)(a1 + 40), a2);
}

__n128 WebCore::PathSegment::PathSegment(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t WebCore::passesTimingAllowOriginCheck(WebCore *this, const WebCore::ResourceResponse *a2, const WebCore::SecurityOrigin *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD **v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _QWORD *v20;
  char ***v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  unsigned int v57;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  char **v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  char ***v66;
  unint64_t v67;
  __int16 v68;
  char v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  v5 = 1;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  WebCore::SecurityOrigin::create(this, &v71);
  v6 = v71;
  if (WebCore::SecurityOrigin::isSameSchemeHostPort(v71, (uint64_t)a2))
    goto LABEL_110;
  v8 = 1;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  v9 = *((unsigned int *)this + 23);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (_DWORD **)(*((_QWORD *)this + 10) + 8);
    while (*((_WORD *)v11 - 4) != 81)
    {
      ++v10;
      v11 += 2;
      if (v9 == v10)
      {
        v12 = 0;
        goto LABEL_7;
      }
    }
    if (v10 >= v9)
      goto LABEL_134;
    v12 = (WTF::StringImpl *)*v11;
    if (*v11)
    {
      v13 = *((_DWORD *)v12 + 1);
      *(_DWORD *)v12 += 2;
      if (v13)
      {
        v18 = v12;
        goto LABEL_24;
      }
      v8 = 0;
    }
    else
    {
LABEL_7:
      v8 = 1;
    }
  }
  else
  {
    v12 = 0;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  v15 = *((unsigned int *)this + 23);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = (_QWORD *)(*((_QWORD *)this + 10) + 8);
    while (*((_WORD *)v17 - 4) != 81)
    {
      ++v16;
      v17 += 2;
      if (v15 == v16)
        goto LABEL_17;
    }
    if (v16 < v15)
    {
      v18 = (WTF::StringImpl *)*v17;
      if (*v17)
        *(_DWORD *)v18 += 2;
      goto LABEL_21;
    }
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x19417BB74);
  }
LABEL_17:
  v18 = 0;
LABEL_21:
  if ((v8 & 1) == 0)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v14);
    else
      *(_DWORD *)v12 -= 2;
  }
LABEL_24:
  v19 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v19 == 1)
    goto LABEL_131;
  if ((_DWORD)v19 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_134;
  }
  v66 = &v62;
  v20 = (_QWORD *)((uint64_t (*)(char ****, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v19])(&v66, (char *)a2 + 8);
  if (MEMORY[0x19AEA53F4](*v20, "file", 4) && *((_BYTE *)a2 + 59))
  {
LABEL_131:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (!v18)
      goto LABEL_132;
    goto LABEL_28;
  }
  WebCore::SecurityOriginData::toString((const WebCore::ResourceResponse *)((char *)a2 + 8), &v70);
  if (!v18)
  {
LABEL_132:
    v21 = 0;
    v22 = 0;
    v23 = 1;
    goto LABEL_29;
  }
LABEL_28:
  v21 = (char ***)*((_QWORD *)v18 + 1);
  v22 = *((_DWORD *)v18 + 1);
  v23 = ((unint64_t)*((unsigned int *)v18 + 4) >> 2) & 1;
LABEL_29:
  v66 = v21;
  v67 = v22 | (v23 << 32);
  v68 = 44;
  v69 = 0;
  v62 = (char **)&v66;
  v63 = 0;
  v65 = v22 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v62);
  v24 = v67;
  v25 = v63;
  if (v63 == (_DWORD)v67 && v65)
  {
LABEL_103:
    v5 = 0;
    goto LABEL_104;
  }
  while (1)
  {
    v26 = *((unsigned int *)v62 + 2);
    if (v26 <= v25)
    {
LABEL_68:
      v7 = 0x100000000;
      v30 = "";
      goto LABEL_79;
    }
    v27 = v64;
    if (v26 - v25 <= v64)
    {
      if (!v25)
      {
        v30 = *v62;
        v7 = (unint64_t)v62[1];
        goto LABEL_40;
      }
      v27 = v26 - v25;
    }
    v28 = v25;
    v7 = v27;
    v29 = v26 - v25;
    if (*((_BYTE *)v62 + 12))
    {
      if (v29 < v27)
        goto LABEL_101;
      v30 = &(*v62)[v28];
      v7 = v27 | 0x100000000;
    }
    else
    {
      if (v29 < v27)
        goto LABEL_101;
      v30 = &(*v62)[2 * v28];
    }
LABEL_40:
    v31 = v7;
    if ((v7 & 0xFF00000000) == 0)
      break;
    if ((_DWORD)v7)
    {
      v32 = 0;
      while (1)
      {
        v33 = v30[v32];
        v34 = v33 > 0x20;
        v35 = (1 << v33) & 0x100002600;
        if (v34 || v35 == 0)
          break;
        if (v7 == ++v32)
          goto LABEL_68;
      }
      if ((_DWORD)v7 != 1)
      {
        v37 = (v7 - 1);
        while (v37 < v7)
        {
          v38 = v30[v37];
          v34 = v38 > 0x20;
          v39 = (1 << v38) & 0x100002600;
          if (!v34 && v39 != 0)
          {
            if ((_DWORD)--v37)
              continue;
          }
          if (!(_DWORD)v32 && (_DWORD)v37 == (_DWORD)v7 - 1)
            goto LABEL_79;
          goto LABEL_59;
        }
        goto LABEL_101;
      }
      if ((_DWORD)v32)
      {
        LODWORD(v37) = 0;
LABEL_59:
        v41 = (v37 - v32 + 1);
        if ((unint64_t)v7 - v32 < v41)
          goto LABEL_101;
        v30 += v32;
        v7 = v41 | 0x100000000;
      }
    }
LABEL_79:
    if (v30 == "*" || v7 != 1)
    {
      if (v30 == "*" && v7 == 1)
        goto LABEL_102;
    }
    else
    {
      if ((v7 & 0xFF00000000) != 0)
        v51 = *v30;
      else
        v51 = *(unsigned __int16 *)v30;
      if (v51 == 42)
        goto LABEL_102;
    }
    v52 = (unint64_t)v70;
    if (v70)
    {
      v53 = (unsigned __int8 *)*((_QWORD *)v70 + 1);
      v52 = *((unsigned int *)v70 + 1);
      v54 = ((unint64_t)*((unsigned int *)v70 + 4) >> 2) & 1;
    }
    else
    {
      v53 = 0;
      v54 = 1;
    }
    if (WTF::operator==((unsigned __int8 *)v30, v7, v53, v52 | (v54 << 32)))
      goto LABEL_102;
    WTF::StringView::SplitResult::Iterator::operator++();
    v25 = v63;
    if (v63 == v24 && v65)
      goto LABEL_103;
  }
  if (!(_DWORD)v7)
    goto LABEL_79;
  v42 = 0;
  v43 = v30;
  while (1)
  {
    v44 = *(unsigned __int16 *)v43;
    v34 = v44 > 0x20;
    v45 = (1 << v44) & 0x100002600;
    if (v34 || v45 == 0)
      break;
    ++v42;
    v43 += 2;
    if (v7 == v42)
      goto LABEL_68;
  }
  if ((_DWORD)v7 == 1)
  {
    if ((_DWORD)v42)
    {
      LODWORD(v47) = 0;
LABEL_100:
      v7 = (v47 - v42 + 1);
      v30 = v43;
      if (v31 - v42 < v7)
        goto LABEL_101;
    }
    goto LABEL_79;
  }
  v47 = (v7 - 1);
  while (v47 < v7)
  {
    v48 = *(unsigned __int16 *)&v30[2 * v47];
    v34 = v48 > 0x20;
    v49 = (1 << v48) & 0x100002600;
    if (!v34 && v49 != 0)
    {
      if ((_DWORD)--v47)
        continue;
    }
    if ((_DWORD)v42 || (_DWORD)v47 != (_DWORD)v7 - 1)
      goto LABEL_100;
    goto LABEL_79;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  v5 = 1;
LABEL_104:
  v55 = v70;
  v70 = 0;
  if (!v55)
  {
LABEL_107:
    if (!v18)
      goto LABEL_110;
LABEL_108:
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v7);
      v6 = v71;
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
    goto LABEL_110;
  }
  if (*(_DWORD *)v55 != 2)
  {
    *(_DWORD *)v55 -= 2;
    goto LABEL_107;
  }
  WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v7);
  if (v18)
    goto LABEL_108;
LABEL_110:
  v71 = 0;
  if (v6)
  {
    do
    {
      v56 = __ldaxr((unsigned int *)v6);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, (unsigned int *)v6));
    if (!v57)
    {
      atomic_store(1u, (unsigned int *)v6);
      v59 = *(WTF::StringImpl **)(v6 + 48);
      *(_QWORD *)(v6 + 48) = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v59 -= 2;
      }
      v60 = *(WTF::StringImpl **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v60 -= 2;
      }
      v61 = *(unsigned int *)(v6 + 32);
      if ((_DWORD)v61 != -1)
        ((void (*)(char ****, uint64_t))off_1E341DD90[v61])(&v66, v6 + 8);
      *(_DWORD *)(v6 + 32) = -1;
      WTF::fastFree((WTF *)v6, (void *)v7);
    }
  }
  return v5;
}

WTF::StringImpl *WebCore::validateCrossOriginResourcePolicy@<X0>(uint64_t a1@<X0>, WebCore::SecurityOrigin *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t (***a6)(_QWORD, uint64_t)@<X5>, _BYTE *a7@<X8>)
{
  char v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;

  v13 = *(_BYTE *)(a4 + 138);
  if ((v13 & 1) != 0)
  {
    v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *(_DWORD *)v19 += 2;
    v23 = v19;
    v20 = 0;
    WTF::URL::invalidate((WTF::URL *)&v20);
  }
  else
  {
    WebCore::ResourceResponseBase::httpHeaderField(a4, 33, &v23);
    WebCore::ResourceResponse::platformLazyInit(a4, 1);
    v15 = *(WTF::StringImpl **)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)v15 += 2;
    v20 = v15;
    v21 = *(_OWORD *)(a4 + 8);
    v22 = *(_OWORD *)(a4 + 24);
  }
  WebCore::validateCrossOriginResourcePolicy(a1, a2, a3, v13 & 1, (WebCore::ThreadableBlobRegistry *)&v20, (uint64_t *)&v23, a5, a6, a7);
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::validateCrossOriginResourcePolicy@<X0>(uint64_t result@<X0>, WebCore::SecurityOrigin *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, WebCore::ThreadableBlobRegistry *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, uint64_t (***a8)(_QWORD, uint64_t)@<X7>, _BYTE *a9@<X8>)
{
  char v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[2];
  __int128 v37;
  __int128 v38;
  WTF::StringImpl *v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  char v43;

  if ((a7 & ~(_DWORD)result & 1) != 0)
    goto LABEL_4;
  if ((a4 & 1) != 0)
    goto LABEL_4;
  v14 = result;
  result = WebCore::SecurityOrigin::canRequest((uint64_t)a2, a5, a8);
  if ((result & 1) != 0)
    goto LABEL_4;
  v15 = *a6;
  if (*a6)
  {
    v16 = *(const char **)(v15 + 8);
    v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  result = WebCore::parseCrossOriginResourcePolicyHeader(v16, v17);
  if ((result & 0xFFFFFFFB) == 0 && (v14 & 1) != 0)
    goto LABEL_10;
  if ((_DWORD)result == 2)
    goto LABEL_10;
  if ((_DWORD)result != 3)
    goto LABEL_4;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_10;
  v25 = (WTF::StringImpl **)WebCore::SecurityOrigin::host(a2);
  WebCore::RegistrableDomain::uncheckedCreateFromHost(v25, v36);
  v26 = WTF::URL::host(a5);
  v29 = WebCore::RegistrableDomain::matches(v36, v26, v27);
  v30 = v36[0];
  v36[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (!v29
    || (v31 = (_QWORD *)WebCore::SecurityOrigin::protocol(a2),
        result = MEMORY[0x19AEA53F4](*v31, "http", 4),
        (_DWORD)result)
    && (v32 = (unsigned __int8 *)WTF::URL::protocol(a5), result = WTF::operator==(v32, v33, "https", 6),
                                                         (_DWORD)result))
  {
LABEL_10:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = v36[0];
    WTF::URL::stringCenterEllipsizedToLength(a5);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Cancelled load to ", 19, (uint64_t *)&v34, (int8x16_t *)" because it violates the resource's Cross-Origin-Resource-Policy response header.", 82, &v35);
    if (v18)
      *(_DWORD *)v18 += 2;
    v36[0] = v18;
    v19 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v19 += 2;
    v36[1] = v19;
    v20 = *(_OWORD *)(a3 + 24);
    v37 = *(_OWORD *)(a3 + 8);
    v38 = v20;
    v21 = v35;
    if (v35)
      *(_DWORD *)v35 += 2;
    v39 = v21;
    v40 = 0;
    v41 = 2;
    v42 = 0;
    v43 = 1;
    std::optional<WebCore::ResourceError>::optional[abi:sn180100]<WebCore::ResourceError,0>((uint64_t)a9, (uint64_t *)v36);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v36, v22);
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
    result = (uint64_t)v34;
    v34 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
      else
        *(_DWORD *)result -= 2;
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        return WTF::StringImpl::destroy(v18, v23);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  else
  {
LABEL_4:
    *a9 = 0;
    a9[80] = 0;
  }
  return result;
}

uint64_t WebCore::parseCrossOriginResourcePolicyHeader(const char *a1, unint64_t a2)
{
  const char *v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  const char *i;
  unsigned int v15;
  uint64_t v16;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v23;
  _BOOL4 v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v29;
  uint16x8_t v30;

  v2 = (const char *)a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v3 = 0;
      while (1)
      {
        v4 = a1[v3];
        v5 = v4 > 0x20;
        v6 = (1 << v4) & 0x100002600;
        if (v5 || v6 == 0)
          break;
        if (a2 == ++v3)
          return 0;
      }
      if ((_DWORD)a2 != 1)
      {
        v8 = (a2 - 1);
        while (v8 < a2)
        {
          v9 = a1[v8];
          v5 = v9 > 0x20;
          v10 = (1 << v9) & 0x100002600;
          if (!v5 && v10 != 0)
          {
            if ((_DWORD)--v8)
              continue;
          }
          if (!(_DWORD)v3 && (_DWORD)v8 == (_DWORD)a2 - 1)
            goto LABEL_40;
          goto LABEL_20;
        }
        goto LABEL_80;
      }
      if ((_DWORD)v3)
      {
        LODWORD(v8) = 0;
LABEL_20:
        v12 = (v8 - v3 + 1);
        v2 = (const char *)(a2 - v3);
        if ((unint64_t)v2 < v12)
          goto LABEL_80;
        a1 += v3;
        a2 = v12 | 0x100000000;
      }
    }
  }
  else if ((_DWORD)a2)
  {
    v13 = 0;
    for (i = a1; ; i += 2)
    {
      v15 = *(unsigned __int16 *)i;
      v5 = v15 > 0x20;
      v16 = (1 << v15) & 0x100002600;
      if (v5 || v16 == 0)
        break;
      if (a2 == ++v13)
        return 0;
    }
    if ((_DWORD)a2 != 1)
    {
      v18 = (a2 - 1);
      while (v18 < a2)
      {
        v19 = *(unsigned __int16 *)&a1[2 * v18];
        v5 = v19 > 0x20;
        v20 = (1 << v19) & 0x100002600;
        if (!v5 && v20 != 0)
        {
          if ((_DWORD)--v18)
            continue;
        }
        if ((_DWORD)v13 || (_DWORD)v18 != (_DWORD)a2 - 1)
          goto LABEL_79;
        goto LABEL_40;
      }
      goto LABEL_80;
    }
    if ((_DWORD)v13)
    {
      LODWORD(v18) = 0;
LABEL_79:
      a2 = (v18 - v13 + 1);
      v2 -= v13;
      a1 = i;
      if ((unint64_t)v2 < a2)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        if ((_DWORD)a2 != 12 || a1 != v2)
          return 4;
        return 1;
      }
    }
  }
LABEL_40:
  if (!(_DWORD)a2)
    return 0;
  if (a1 == "same-origin" || (_DWORD)a2 != 11)
  {
    if (a1 == "same-origin" && (_DWORD)a2 == 11)
      return 2;
    v23 = (_DWORD)a2 == 9;
    v24 = a1 == "same-site";
    if (a1 != "same-site" && (_DWORD)a2 == 9)
    {
      if ((a2 & 0xFF00000000) != 0)
      {
        if (*a1 != 115 || *(_DWORD *)(a1 + 1) != 761621857 || *(_DWORD *)(a1 + 5) != 1702127987)
          return 4;
      }
      else
      {
        if (*(_WORD *)a1 != 115)
          return 4;
        v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F9870);
        v27.i16[0] = vminvq_u16(v27);
        if (!v27.i32[0])
          return 4;
      }
      return 3;
    }
  }
  else
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      if (*a1 != 115 || *(_QWORD *)(a1 + 1) != 0x6769726F2D656D61 || *(_QWORD *)(a1 + 3) != 0x6E696769726F2D65)
        return 4;
      return 2;
    }
    if (*(_WORD *)a1 != 115)
      return 4;
    v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1968BF700);
    v25.i16[0] = vminvq_u16(v25);
    if (!v25.i32[0])
      return 4;
    v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 6), (int16x8_t)xmmword_1968BF710);
    v26.i16[0] = vminvq_u16(v26);
    v23 = v26.i8[0];
    if (v26.i32[0])
      return 2;
    v24 = a1 == "same-site";
  }
  if (v24 && v23)
    return 3;
  v2 = "cross-origin";
  if (a1 == "cross-origin" || (_DWORD)a2 != 12)
    goto LABEL_81;
  if ((a2 & 0xFF00000000) != 0)
  {
    if (*a1 == 99 && *(_QWORD *)(a1 + 1) == 0x69726F2D73736F72 && *(_QWORD *)(a1 + 4) == 0x6E696769726F2D73)
      return 1;
  }
  else if (*(_WORD *)a1 == 99)
  {
    v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 2), (int16x8_t)xmmword_1969F9880);
    v29.i16[0] = vminvq_u16(v29);
    if (v29.i32[0])
    {
      v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a1 + 8), (int16x8_t)xmmword_1968BF810);
      v30.i16[0] = vminvq_u16(v30);
      if (v30.i32[0])
        return 1;
    }
  }
  return 4;
}

BOOL WebCore::shouldBlockResponseDueToMIMEType(uint64_t a1, unsigned int a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  _BOOL8 v10;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  WebCore::ResourceResponseBase::httpHeaderField(a1, 26, &v16);
  WebCore::extractMIMETypeFromMediaType((WebCore *)&v16, &v17);
  v4 = v16;
  v16 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (a2 > 0x13 || ((1 << a2) & 0x8E804) == 0)
  {
    v10 = 0;
    v5 = v17;
    v17 = 0;
    if (!v5)
      return v10;
    goto LABEL_37;
  }
  v5 = v17;
  if (!v17)
    return 0;
  v6 = *((_DWORD *)v17 + 1);
  if (v6 < 6)
    goto LABEL_54;
  v7 = *((_QWORD *)v17 + 1);
  if ((*((_BYTE *)v17 + 16) & 4) != 0)
  {
    v8 = *(_BYTE *)v7 & 0xDF;
    if (v6 == 6)
    {
      if (v8 == 65
        && (*(_BYTE *)(v7 + 1) & 0xDF) == 0x55
        && (*(_BYTE *)(v7 + 2) & 0xDF) == 0x44
        && (*(_BYTE *)(v7 + 3) & 0xDF) == 0x49
        && (*(_BYTE *)(v7 + 4) & 0xDF) == 0x4F
        && (*(_BYTE *)(v7 + 5) & 0xDF) == 0xF
        || v8 == 73
        && (*(_BYTE *)(v7 + 1) & 0xDF) == 0x4D
        && (*(_BYTE *)(v7 + 2) & 0xDF) == 0x41
        && (*(_BYTE *)(v7 + 3) & 0xDF) == 0x47
        && (*(_BYTE *)(v7 + 4) & 0xDF) == 0x45
        && (*(_BYTE *)(v7 + 5) & 0xDF) == 0xF)
      {
        goto LABEL_36;
      }
      if (v8 != 86
        || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x49
        || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x44
        || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x45
        || (*(_BYTE *)(v7 + 4) & 0xDF) != 0x4F)
      {
        goto LABEL_54;
      }
      v9 = *(unsigned __int8 *)(v7 + 5);
      goto LABEL_28;
    }
    if (v8 == 65
      && (*(_BYTE *)(v7 + 1) & 0xDF) == 0x55
      && (*(_BYTE *)(v7 + 2) & 0xDF) == 0x44
      && (*(_BYTE *)(v7 + 3) & 0xDF) == 0x49
      && (*(_BYTE *)(v7 + 4) & 0xDF) == 0x4F
      && (*(_BYTE *)(v7 + 5) & 0xDF) == 0xF
      || v8 == 73
      && (*(_BYTE *)(v7 + 1) & 0xDF) == 0x4D
      && (*(_BYTE *)(v7 + 2) & 0xDF) == 0x41
      && (*(_BYTE *)(v7 + 3) & 0xDF) == 0x47
      && (*(_BYTE *)(v7 + 4) & 0xDF) == 0x45
      && (*(_BYTE *)(v7 + 5) & 0xDF) == 0xF)
    {
      goto LABEL_36;
    }
    if (v8 == 86
      && (*(_BYTE *)(v7 + 1) & 0xDF) == 0x49
      && (*(_BYTE *)(v7 + 2) & 0xDF) == 0x44
      && (*(_BYTE *)(v7 + 3) & 0xDF) == 0x45
      && (*(_BYTE *)(v7 + 4) & 0xDF) == 0x4F)
    {
      v12 = *(unsigned __int8 *)(v7 + 5);
      goto LABEL_52;
    }
  }
  else
  {
    v15 = *(_WORD *)v7 & 0xFFDF;
    if (v6 == 6)
    {
      if (v15 == 65
        && (*(_WORD *)(v7 + 2) & 0xFFDF) == 0x55
        && (*(_WORD *)(v7 + 4) & 0xFFDF) == 0x44
        && (*(_WORD *)(v7 + 6) & 0xFFDF) == 0x49
        && (*(_WORD *)(v7 + 8) & 0xFFDF) == 0x4F
        && (*(_WORD *)(v7 + 10) & 0xFFDF) == 0xF
        || (*(_WORD *)v7 & 0xFFDF) == 0x49
        && (*(_WORD *)(v7 + 2) & 0xFFDF) == 0x4D
        && (*(_WORD *)(v7 + 4) & 0xFFDF) == 0x41
        && (*(_WORD *)(v7 + 6) & 0xFFDF) == 0x47
        && (*(_WORD *)(v7 + 8) & 0xFFDF) == 0x45
        && (*(_WORD *)(v7 + 10) & 0xFFDF) == 0xF)
      {
        goto LABEL_36;
      }
      if ((*(_WORD *)v7 & 0xFFDF) != 0x56
        || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x49
        || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x44
        || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x45
        || (*(_WORD *)(v7 + 8) & 0xFFDF) != 0x4F)
      {
        goto LABEL_54;
      }
      v9 = *(unsigned __int16 *)(v7 + 10);
LABEL_28:
      if ((v9 & 0xFFFFFFDF) != 0xF)
        goto LABEL_54;
LABEL_36:
      v17 = 0;
      v10 = 1;
      goto LABEL_37;
    }
    if (v15 == 65
      && (*(_WORD *)(v7 + 2) & 0xFFDF) == 0x55
      && (*(_WORD *)(v7 + 4) & 0xFFDF) == 0x44
      && (*(_WORD *)(v7 + 6) & 0xFFDF) == 0x49
      && (*(_WORD *)(v7 + 8) & 0xFFDF) == 0x4F
      && (*(_WORD *)(v7 + 10) & 0xFFDF) == 0xF
      || (*(_WORD *)v7 & 0xFFDF) == 0x49
      && (*(_WORD *)(v7 + 2) & 0xFFDF) == 0x4D
      && (*(_WORD *)(v7 + 4) & 0xFFDF) == 0x41
      && (*(_WORD *)(v7 + 6) & 0xFFDF) == 0x47
      && (*(_WORD *)(v7 + 8) & 0xFFDF) == 0x45
      && (*(_WORD *)(v7 + 10) & 0xFFDF) == 0xF)
    {
      goto LABEL_36;
    }
    if ((*(_WORD *)v7 & 0xFFDF) == 0x56
      && (*(_WORD *)(v7 + 2) & 0xFFDF) == 0x49
      && (*(_WORD *)(v7 + 4) & 0xFFDF) == 0x44
      && (*(_WORD *)(v7 + 6) & 0xFFDF) == 0x45
      && (*(_WORD *)(v7 + 8) & 0xFFDF) == 0x4F)
    {
      v12 = *(unsigned __int16 *)(v7 + 10);
LABEL_52:
      if ((v12 & 0xFFFFFFDF) == 0xF)
        goto LABEL_36;
    }
  }
  if (v6 == 8)
  {
    v13 = *((_QWORD *)v17 + 1);
    if ((*((_BYTE *)v17 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v13 & 0xDF) != 0x54
        || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x58
        || (*(_BYTE *)(v13 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v13 + 4) & 0xDF) != 0xF
        || (*(_BYTE *)(v13 + 5) & 0xDF) != 0x43
        || (*(_BYTE *)(v13 + 6) & 0xDF) != 0x53)
      {
        goto LABEL_54;
      }
      v14 = *(unsigned __int8 *)(v13 + 7);
    }
    else
    {
      if ((*(_WORD *)v13 & 0xFFDF) != 0x54
        || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v13 + 8) & 0xFFDF) != 0xF
        || (*(_WORD *)(v13 + 10) & 0xFFDF) != 0x43
        || (*(_WORD *)(v13 + 12) & 0xFFDF) != 0x53)
      {
        goto LABEL_54;
      }
      v14 = *(unsigned __int16 *)(v13 + 14);
    }
    v10 = (v14 & 0xFFFFFFDF) == 86;
    goto LABEL_55;
  }
LABEL_54:
  v10 = 0;
LABEL_55:
  v17 = 0;
LABEL_37:
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy(v5, v3);
  else
    *(_DWORD *)v5 -= 2;
  return v10;
}

uint64_t WebCore::extractMIMETypeFromMediaType@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  int v11;

  result = *(_QWORD *)this;
  if (!result)
    goto LABEL_34;
  v4 = *(unsigned int *)(result + 4);
  if (!(_DWORD)v4)
    goto LABEL_33;
  v5 = 0;
  v6 = *(_QWORD *)(result + 8);
  while (1)
  {
    v7 = (*(_DWORD *)(result + 16) & 4) != 0 ? *(unsigned __int8 *)(v6 + v5) : *(unsigned __int16 *)(v6 + 2 * v5);
    if (v7 != 32 && v7 != 9)
      break;
    if (v4 == ++v5)
      goto LABEL_33;
  }
  if ((_DWORD)v4 == (_DWORD)v5)
    goto LABEL_33;
  if (v4 <= v5)
  {
    LODWORD(v9) = v5;
  }
  else
  {
    v9 = v5;
    do
    {
      if (v9 < v4)
      {
        v10 = *(_QWORD *)(result + 8);
        if ((*(_BYTE *)(result + 16) & 4) != 0)
          v11 = *(unsigned __int8 *)(v10 + v9);
        else
          v11 = *(unsigned __int16 *)(v10 + 2 * v9);
        if (v11 > 43)
        {
          if (v11 == 59 || v11 == 44)
            goto LABEL_31;
        }
        else if (v11 == 9 || v11 == 32)
        {
          goto LABEL_31;
        }
      }
      ++v9;
    }
    while (v4 != v9);
    LODWORD(v9) = *(_DWORD *)(result + 4);
  }
LABEL_31:
  if (!(_DWORD)v5 && v4 <= v9)
  {
LABEL_33:
    *(_DWORD *)result += 2;
LABEL_34:
    *a2 = result;
    return result;
  }
  return WTF::StringImpl::substring((WTF::StringImpl *)result);
}

BOOL WebCore::isScriptAllowedByNosniff(WebCore *this, const WebCore::ResourceResponse *a2)
{
  char v3;
  double v4;
  double v5;
  float v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int16 **v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD **v14;
  unsigned __int16 **v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  _BOOL4 v20;
  _BOOL8 isSupportedJavaScriptMIMEType;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v3 = 1;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  v7 = *((unsigned int *)this + 23);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (_QWORD *)(*((_QWORD *)this + 10) + 8);
    while (*((_WORD *)v9 - 4) != 89)
    {
      ++v8;
      v9 += 2;
      if (v7 == v8)
      {
        v10 = 0;
        goto LABEL_6;
      }
    }
    if (v8 >= v7)
      goto LABEL_43;
    v10 = (unsigned __int16 **)*v9;
    if (*v9)
    {
      v16 = *((_DWORD *)v10 + 1);
      *(_DWORD *)v10 += 2;
      if (v16)
        goto LABEL_18;
      v3 = 0;
    }
    else
    {
LABEL_6:
      v3 = 1;
    }
  }
  else
  {
    v10 = 0;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  v12 = *((unsigned int *)this + 23);
  if (!(_DWORD)v12)
  {
LABEL_12:
    v15 = 0;
    goto LABEL_13;
  }
  v13 = 0;
  v14 = (_DWORD **)(*((_QWORD *)this + 10) + 8);
  while (*((_WORD *)v14 - 4) != 89)
  {
    ++v13;
    v14 += 2;
    if (v12 == v13)
      goto LABEL_12;
  }
  if (v13 >= v12)
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x19417CC50);
  }
  v15 = (unsigned __int16 **)*v14;
  if (*v14)
    *(_DWORD *)v15 += 2;
LABEL_13:
  if ((v3 & 1) == 0)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, v11);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (v15)
  {
    v16 = *((_DWORD *)v15 + 1);
    v10 = v15;
LABEL_18:
    v17 = v10[1];
    v18 = v16 | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32);
    goto LABEL_19;
  }
  v10 = 0;
  v17 = 0;
  v18 = 0x100000000;
LABEL_19:
  v20 = WebCore::parseContentTypeOptionsHeader(v17, v18, v4, v5, v6);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v10, v19);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (!v20)
    return 1;
  WebCore::ResourceResponseBase::httpHeaderField((uint64_t)this, 26, &v27);
  WebCore::extractMIMETypeFromMediaType((WebCore *)&v27, &v28);
  v24 = v27;
  v27 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  isSupportedJavaScriptMIMEType = WebCore::MIMETypeRegistry::isSupportedJavaScriptMIMEType((WebCore::MIMETypeRegistry *)&v28, v23);
  v26 = v28;
  v28 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  return isSupportedJavaScriptMIMEType;
}

BOOL WebCore::parseContentTypeOptionsHeader(unsigned __int16 *a1, unint64_t a2, double a3, double a4, float a5)
{
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 *j;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v33;

  v6 = a1;
  v7 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      v8 = 16;
      if ((a2 & 0xFFFFFFF0) == 0)
        v8 = a2;
      v9 = v8;
      do
      {
        if (*(_BYTE *)a1 == 44)
          goto LABEL_10;
        a1 = (unsigned __int16 *)((char *)a1 + 1);
        --v9;
      }
      while (v9);
      if (a2 < 0x11uLL)
        goto LABEL_59;
      a1 = (unsigned __int16 *)memchr((char *)v6 + v8, 44, a2 - v8);
      if (!a1)
        goto LABEL_59;
LABEL_10:
      i = (_DWORD)a1 - (_DWORD)v6;
      goto LABEL_11;
    }
    return 0;
  }
  for (i = WTF::find<char16_t,(void *)0>((uint64_t)a1, a2, 0x2Cu, 0, a3, a4, a5); ; i = -1)
  {
LABEL_11:
    if (!(_DWORD)a2)
      return 0;
    v11 = i;
    if (v7)
      v11 = i | 0x100000000;
    if (a2 <= i)
      v11 = a2;
    v12 = v11;
    if ((v11 & 0xFF00000000) == 0)
    {
      if (!(_DWORD)v11)
        goto LABEL_18;
      v24 = 0;
      for (j = v6; ; ++j)
      {
        v26 = *j;
        v16 = v26 > 0x20;
        v27 = (1 << v26) & 0x100002600;
        if (v16 || v27 == 0)
          break;
        if (v11 == ++v24)
          return 0;
      }
      if ((_DWORD)v11 == 1)
      {
        if (!(_DWORD)v24)
          goto LABEL_18;
        LODWORD(v29) = 0;
LABEL_57:
        v11 = (v29 - v24 + 1);
        v6 = j;
        if (v12 - v24 >= v11)
          goto LABEL_18;
      }
      else
      {
        v29 = (v11 - 1);
        while (v29 < v11)
        {
          v30 = v6[v29];
          v16 = v30 > 0x20;
          v31 = (1 << v30) & 0x100002600;
          if (!v16 && v31 != 0)
          {
            if ((_DWORD)--v29)
              continue;
          }
          if (!(_DWORD)v24 && (_DWORD)v29 == (_DWORD)v11 - 1)
            goto LABEL_18;
          goto LABEL_57;
        }
      }
      goto LABEL_58;
    }
    if (!(_DWORD)v11)
      goto LABEL_18;
    v14 = 0;
    while (1)
    {
      v15 = *((unsigned __int8 *)v6 + v14);
      v16 = v15 > 0x20;
      v17 = (1 << v15) & 0x100002600;
      if (v16 || v17 == 0)
        break;
      if (v11 == ++v14)
        return 0;
    }
    if ((_DWORD)v11 != 1)
    {
      v19 = (v11 - 1);
      while (v19 < v11)
      {
        v20 = *((unsigned __int8 *)v6 + v19);
        v16 = v20 > 0x20;
        v21 = (1 << v20) & 0x100002600;
        if (!v16 && v21 != 0)
        {
          if ((_DWORD)--v19)
            continue;
        }
        if (!(_DWORD)v14 && (_DWORD)v19 == (_DWORD)v11 - 1)
          goto LABEL_18;
        goto LABEL_37;
      }
      goto LABEL_58;
    }
    if (!(_DWORD)v14)
      goto LABEL_18;
    LODWORD(v19) = 0;
LABEL_37:
    v23 = (v19 - v14 + 1);
    if (v12 - v14 >= v23)
      break;
LABEL_58:
    __break(1u);
LABEL_59:
    ;
  }
  v6 = (unsigned __int16 *)((char *)v6 + v14);
  v11 = v23 | 0x100000000;
LABEL_18:
  if ((_DWORD)v11 != 7)
    return 0;
  if ((v11 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)v6 & 0xDF) == 0x4E
      && (*((_BYTE *)v6 + 1) & 0xDF) == 0x4F
      && (v6[1] & 0xDF) == 0x53
      && (*((_BYTE *)v6 + 3) & 0xDF) == 0x4E
      && (v6[2] & 0xDF) == 0x49
      && (*((_BYTE *)v6 + 5) & 0xDF) == 0x46)
    {
      v33 = *((unsigned __int8 *)v6 + 6);
      return (v33 & 0xFFFFFFDF) == 70;
    }
  }
  else if ((*v6 & 0xFFDF) == 0x4E
         && (v6[1] & 0xFFDF) == 0x4F
         && (v6[2] & 0xFFDF) == 0x53
         && (v6[3] & 0xFFDF) == 0x4E
         && (v6[4] & 0xFFDF) == 0x49
         && (v6[5] & 0xFFDF) == 0x46)
  {
    v33 = v6[6];
    return (v33 & 0xFFFFFFDF) == 70;
  }
  return 0;
}

WTF *WebCore::SQLiteDatabase::prepareStatementSlow@<X0>(WTF *result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  int v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  unint64_t v26;
  int v27;
  NSObject *v28;
  char *v29;
  WTF *v30;
  char *pzTail;
  __int128 ppStmt;
  uint64_t v33;

  v4 = result;
  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)a3)
      goto LABEL_3;
    v18 = 0;
    while (1)
    {
      v19 = a2[v18];
      if ((v19 - 9) >= 5 && v19 != 32)
        break;
      if (a3 == ++v18)
      {
        a3 = 0x100000000;
        a2 = "";
        goto LABEL_3;
      }
    }
    if ((_DWORD)a3 != 1)
    {
      v20 = (a3 - 1);
      while (v20 < a3)
      {
        v21 = a2[v20];
        if ((v21 - 9) < 5 || v21 == 32)
        {
          if ((_DWORD)--v20)
            continue;
        }
        if (!(_DWORD)v18 && (_DWORD)v20 == (_DWORD)a3 - 1)
          goto LABEL_3;
        goto LABEL_45;
      }
LABEL_63:
      __break(1u);
      return (WTF *)WTF::fastFree(result, a2);
    }
    if ((_DWORD)v18)
    {
      LODWORD(v20) = 0;
LABEL_45:
      v22 = (v20 - v18 + 1);
      if ((unint64_t)a3 - v18 < v22)
        goto LABEL_63;
      a2 += v18;
      a3 = v22 | 0x100000000;
    }
  }
  else if ((_DWORD)a3)
  {
    v23 = 0;
    v24 = a2;
    while (1)
    {
      v25 = *(unsigned __int16 *)v24;
      if ((v25 - 9) >= 5 && v25 != 32)
        break;
      ++v23;
      v24 += 2;
      if (a3 == v23)
      {
        a3 = 0x100000000;
        a2 = "";
        goto LABEL_3;
      }
    }
    if ((_DWORD)a3 != 1)
    {
      v26 = (a3 - 1);
      while (v26 < a3)
      {
        v27 = *(unsigned __int16 *)&a2[2 * v26];
        if ((v27 - 9) < 5 || v27 == 32)
        {
          if ((_DWORD)--v26)
            continue;
        }
        if (!(_DWORD)v23 && (_DWORD)v26 == (_DWORD)a3 - 1)
          goto LABEL_3;
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    if ((_DWORD)v23)
    {
      LODWORD(v26) = 0;
LABEL_62:
      a3 = (v26 - v23 + 1);
      a2 = v24;
      if (v6 - v23 < a3)
        goto LABEL_63;
    }
  }
LABEL_3:
  *(_QWORD *)&ppStmt = a2;
  *((_QWORD *)&ppStmt + 1) = a3;
  WTF::StringView::utf8();
  if (v30)
  {
    v7 = (uint64_t)v30 + 16;
    v8 = *((_DWORD *)v30 + 2) + 1;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = (unsigned __int8 *)v4 + 32;
  if (__ldaxr((unsigned __int8 *)v4 + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C]((char *)v4 + 32);
LABEL_8:
  pzTail = 0;
  *(_QWORD *)&ppStmt = 0;
  v11 = sqlite3_prepare_v2(*((sqlite3 **)v4 + 1), (const char *)v7, v8, (sqlite3_stmt **)&ppStmt, (const char **)&pzTail);
  LODWORD(v7) = v11;
  if (pzTail && *pzTail)
  {
    LODWORD(v7) = 1;
    goto LABEL_69;
  }
  if (v11)
  {
LABEL_69:
    sqlite3_finalize((sqlite3_stmt *)ppStmt);
    v7 = v7;
    v12 = 1;
    goto LABEL_14;
  }
  v12 = (_QWORD)ppStmt == 0;
  if ((_QWORD)ppStmt)
    v7 = ppStmt;
  else
    v7 = 1;
LABEL_14:
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v9))
LABEL_18:
    WTF::Lock::unlockSlow((WTF *)((char *)v4 + 32));
  if (v12)
  {
    v28 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      if (v30)
        v29 = (char *)v30 + 16;
      else
        v29 = 0;
      LODWORD(ppStmt) = 136446210;
      *(_QWORD *)((char *)&ppStmt + 4) = v29;
      _os_log_error_impl(&dword_1940B8000, v28, OS_LOG_TYPE_ERROR, "SQLiteDatabase::prepareStatement: Failed to prepare statement %{public}s", (uint8_t *)&ppStmt, 0xCu);
    }
    *(_DWORD *)a4 = v7;
    *(_DWORD *)(a4 + 16) = 1;
  }
  else
  {
    do
      v14 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v14 + 1, (unsigned int *)v4));
    *(_QWORD *)a4 = v4;
    do
      v15 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v15 + 1, (unsigned int *)v4));
    *(_QWORD *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 16) = 0;
    sqlite3_finalize(0);
    if (!atomic_load((unsigned int *)v4))
    {
      __break(0xC471u);
      JUMPOUT(0x19417D2C8);
    }
    do
      v17 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v17 - 1, (unsigned int *)v4));
  }
  result = v30;
  if (v30)
  {
    if (*(_DWORD *)v30 != 1)
    {
      --*(_DWORD *)v30;
      return result;
    }
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WTF::isASCIIWhitespaceWithoutFF<char16_t>(unsigned int a1)
{
  return (a1 < 0x21) & (0x100002600uLL >> a1);
}

uint64_t WTF::isASCIIWhitespace<char16_t>(unsigned int a1)
{
  return (a1 < 0x21) & (0x100003600uLL >> a1);
}

uint64_t WebCore::LoadableScript::notifyClientFinished(WebCore::LoadableScript *this, void *a2)
{
  uint64_t **v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  ++*((_DWORD *)this + 2);
  v3 = (uint64_t **)((char *)this + 56);
  result = WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences((uint64_t)this + 56, a2);
  v5 = *((_QWORD *)this + 7);
  if (!v5)
    goto LABEL_11;
  v6 = *(unsigned int *)(v5 - 12);
  if (!(_DWORD)v6)
    goto LABEL_11;
  if (v6 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
  v9 = *v3;
  if (*v3 && *((_DWORD *)v9 - 3))
  {
    v10 = *((unsigned int *)v9 - 1);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = *v3;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        v12 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_10;
      }
    }
    else
    {
      v12 = *v3;
    }
    v13 = &v9[2 * v10];
    if (v12 != v13)
    {
      v14 = *v12;
LABEL_18:
      if (*(_QWORD *)(v14 + 8))
      {
        v15 = 0;
        v16 = 1;
LABEL_20:
        v17 = *(_QWORD *)(v14 + 8);
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
          goto LABEL_57;
        v18 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v18 = 1;
        *(_QWORD *)(v18 + 8) = v17;
        v19 = *(unsigned int **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v18;
        if (!v19)
          goto LABEL_57;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v7);
        }
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
LABEL_57:
          do
            v22 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v22 + 1, (unsigned int *)v18));
        }
        *((_QWORD *)v8 + v15) = v18;
        while (1)
        {
          v12 += 2;
          if (v12 == v13)
            break;
          v14 = *v12;
          if ((unint64_t)(*v12 + 1) > 1)
          {
LABEL_30:
            if (v12 == v13)
              break;
            if (*(_QWORD *)(v14 + 8))
            {
              ++*((_DWORD *)this + 16);
              ++v16;
              ++v15;
              goto LABEL_20;
            }
            while (1)
            {
              v12 += 2;
              if (v12 == v13)
                goto LABEL_40;
              v14 = *v12;
              if ((unint64_t)(*v12 + 1) > 1)
                goto LABEL_30;
            }
          }
        }
LABEL_40:
        ++*((_DWORD *)this + 16);
        if (v15 != -1)
        {
          v23 = 8 * v16;
          v24 = v8;
          do
          {
            if (*(_QWORD *)v24)
            {
              v25 = *(_QWORD *)(*(_QWORD *)v24 + 8);
              if (v25)
                (*(void (**)(uint64_t, WebCore::LoadableScript *))(*(_QWORD *)v25 + 16))(v25, this);
            }
            v24 = (WTF *)((char *)v24 + 8);
            v23 -= 8;
          }
          while (v23);
          v26 = (unsigned int **)v8;
          do
          {
            v27 = *v26;
            *v26 = 0;
            if (v27)
            {
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                atomic_store(1u, v27);
                WTF::fastFree((WTF *)v27, v7);
              }
            }
            ++v26;
          }
          while (v26 != (unsigned int **)((char *)v8 + 8 * v15 + 8));
          goto LABEL_10;
        }
        goto LABEL_53;
      }
      while (1)
      {
        v12 += 2;
        if (v12 == v13)
          break;
        v14 = *v12;
        if ((unint64_t)(*v12 + 1) > 1)
        {
          if (v12 != v13)
            goto LABEL_18;
          break;
        }
      }
    }
LABEL_10:
    result = WTF::fastFree(v8, v7);
    if (!this)
      return result;
    goto LABEL_11;
  }
LABEL_53:
  result = WTF::fastFree(v8, v7);
LABEL_11:
  if (*((_DWORD *)this + 2) == 1)
    return (*(uint64_t (**)(WebCore::LoadableScript *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 2);
  return result;
}

BOOL WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int **v7;
  _BOOL8 v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = (unsigned int **)(v3 + 16 * v6);
      if ((unint64_t)*v7 + 1 >= 2 && !*((_QWORD *)*v7 + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v7, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    v3 = *(_QWORD *)a1;
    v9 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v16 = *(_DWORD *)(v15 - 12);
      else
        v16 = 0;
      *(_DWORD *)(v15 - 12) = v16 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v10 = *(_DWORD *)(v3 - 4);
      if (v10 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v10)
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v12 = 0;
          goto LABEL_20;
        }
LABEL_16:
        v12 = *(_DWORD *)(v3 - 12);
        v13 = 0x7FFFFFFF;
        if (v12 >= 0x7FFFFFFF)
          goto LABEL_21;
        goto LABEL_20;
      }
LABEL_15:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v9 = 0;
  }
  v12 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_20:
  v13 = v12;
LABEL_21:
  *(_DWORD *)(a1 + 12) = 2 * v13;
  return v9;
}

uint64_t WebCore::PendingScript::notifyFinished(WebCore::PendingScript *this, WebCore::LoadableScript *a2)
{
  int v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = v3 + 1;
  result = *((_QWORD *)this + 6);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, WebCore::PendingScript *))(*(_QWORD *)result + 48))(result, this);
    v3 = *((_DWORD *)this + 4) - 1;
  }
  if (v3)
  {
    *((_DWORD *)this + 4) = v3;
  }
  else
  {
    WebCore::PendingScript::~PendingScript(this, a2);
    return WTF::fastFree(v5, v6);
  }
  return result;
}

WTF::MonotonicTime *WebCore::ScriptRunner::notifyFinished(WebCore::ScriptRunner *this, WTF::MonotonicTime **a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  WebCore::PendingScript *v13;
  WebCore::PendingScript *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  WebCore::PendingScript **v22;
  WTF::MonotonicTime *result;
  double v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;

  if ((*(_WORD *)((_BYTE *)a2[3] + 21) & 0x200) == 0)
  {
    v4 = (uint64_t *)((char *)this + 56);
    v5 = *((_QWORD *)this + 7);
    if (!v5)
      goto LABEL_9;
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; v10 = (v12 + i++) & v6)
    {
      v12 = v10;
      v13 = *(WebCore::PendingScript **)(v5 + 8 * v10);
      if (v13 != (WebCore::PendingScript *)-1)
      {
        if (!v13)
          goto LABEL_9;
        if (v13 == (WebCore::PendingScript *)a2)
          break;
      }
    }
    if (*(_DWORD *)(v5 - 4) != (_DWORD)v12)
    {
      v25 = 0;
      v26 = (_QWORD *)(v5 + 8 * v12);
      *v26 = 0;
      if (!*v4
        || (v25 = *v4 + 8 * *(unsigned int *)(*v4 - 4), v14 = (WebCore::PendingScript *)a2, (_QWORD *)v25 != v26))
      {
        v14 = (WebCore::PendingScript *)a2;
        if ((_QWORD *)v25 != v26)
        {
          *v26 = -1;
          ++*(_DWORD *)(*v4 - 16);
          v27 = *v4;
          v28 = *v4 ? *(_DWORD *)(v27 - 12) - 1 : -1;
          *(_DWORD *)(v27 - 12) = v28;
          v29 = *v4;
          v14 = (WebCore::PendingScript *)a2;
          if (*v4)
          {
            v30 = 6 * *(_DWORD *)(v29 - 12);
            v31 = *(_DWORD *)(v29 - 4);
            v32 = v30 < v31 && v31 >= 9;
            v14 = (WebCore::PendingScript *)a2;
            if (v32)
            {
              WTF::HashTable<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>,WTF::HashTraits<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>>>::rehash(v4, v31 >> 1);
              v14 = (WebCore::PendingScript *)a2;
            }
          }
        }
      }
    }
    else
    {
LABEL_9:
      v14 = 0;
    }
    v15 = *((unsigned int *)this + 13);
    if ((_DWORD)v15 == *((_DWORD *)this + 12))
    {
      v16 = v15 + (v15 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v15 + 1)
        v18 = v15 + 1;
      else
        v18 = v17;
      if (v18 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x19417DA04);
      }
      v19 = (void *)*((_QWORD *)this + 5);
      v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
      *((_DWORD *)this + 12) = v18;
      *((_QWORD *)this + 5) = v20;
      memcpy(v20, v19, 8 * v15);
      if (v19)
      {
        if (*((void **)this + 5) == v19)
        {
          *((_QWORD *)this + 5) = 0;
          *((_DWORD *)this + 12) = 0;
        }
        WTF::fastFree((WTF *)v19, v21);
      }
      v15 = *((unsigned int *)this + 13);
      v22 = (WebCore::PendingScript **)(*((_QWORD *)this + 5) + 8 * v15);
    }
    else
    {
      v22 = (WebCore::PendingScript **)(*((_QWORD *)this + 5) + 8 * v15);
    }
    *v22 = v14;
    *((_DWORD *)this + 13) = v15 + 1;
  }
  result = a2[6];
  if (result)
    result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 40))(result);
  a2[6] = 0;
  if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3280))
  {
    *((_QWORD *)this + 11) = 0;
    WTF::MonotonicTime::now(result);
    return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 64, v24 + 0.0);
  }
  return result;
}

uint64_t WTF::makeAtomString<WTF::String>@<X0>(WTF::StringImpl **a1@<X0>, WTF::AtomString *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;

  v3 = *a1;
  if (*a1)
  {
    *(_DWORD *)v3 += 2;
    result = (uint64_t)WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>>(v3, a2);
    if (*(_DWORD *)v3 == 2)
      result = WTF::StringImpl::destroy(v3, v5);
    else
      *(_DWORD *)v3 -= 2;
  }
  else
  {
    result = WTF::AtomStringImpl::add();
  }
  if (!*(_QWORD *)a2)
    __break(0xC471u);
  return result;
}

uint64_t WTF::makeAtomString<WTF::AtomString>@<X0>(WTF::StringImpl **a1@<X0>, WTF::StringImpl *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  WTF::StringImpl *v5;

  v3 = *a1;
  if (*a1)
  {
    *(_DWORD *)v3 += 2;
    result = (uint64_t)WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>>(a2, v3);
    if (*(_DWORD *)v3 == 2)
      result = WTF::StringImpl::destroy(v3, v5);
    else
      *(_DWORD *)v3 -= 2;
  }
  else
  {
    result = (uint64_t)WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>>(a2, 0);
  }
  if (!*(_QWORD *)a2)
    __break(0xC471u);
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::AtomString,void>>(_BYTE *result, uint64_t a2)
{
  _BYTE *v3;
  size_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unsigned __int128 v7;
  char v8;

  if (a2)
  {
    v3 = *(_BYTE **)(a2 + 8);
    v4 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *result = *v3;
        else
          return memcpy(result, v3, v4);
      }
    }
    else
    {
      v5 = &result[v4];
      if (v4 >= 0x10)
      {
        v6 = &result[v4 & 0xFFFFFFF0];
        do
        {
          v7 = (unsigned __int128)vld2q_s8(v3);
          v3 += 32;
          *(_OWORD *)result = v7;
          result += 16;
        }
        while (result != v6);
        result = v6;
      }
      while (result != v5)
      {
        v8 = *v3;
        v3 += 2;
        *result++ = v8;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSDOMRectReadOnlyOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v24;
  uint64_t v25;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v7 = *(_QWORD *)(a3 + 32);
    v5 = (uint64_t *)(a3 + 32);
    v6 = v7;
    if (v7)
    {
      v8 = *(_DWORD *)(v6 - 8);
      v9 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      v13 = *(_QWORD *)(v6 + 16 * v12);
      if (v13 != result)
      {
        v24 = 1;
        while (v13)
        {
          v12 = ((_DWORD)v12 + v24) & v8;
          v13 = *(_QWORD *)(v6 + 16 * v12);
          ++v24;
          if (v13 == result)
            goto LABEL_11;
        }
        v12 = *(unsigned int *)(v6 - 4);
      }
LABEL_11:
      if (v12 != *(_DWORD *)(v6 - 4))
      {
        v14 = (_QWORD *)(v6 + 16 * v12);
        *v14 = -1;
        v17 = v14[1];
        v16 = v14 + 1;
        v15 = v17;
        if (v17)
        {
          *(_QWORD *)(v15 + 8) = 3;
          *v16 = 0;
        }
        ++*(_DWORD *)(*v5 - 16);
        v18 = *v5;
        if (*v5)
          v19 = *(_DWORD *)(v18 - 12) - 1;
        else
          v19 = -1;
        *(_DWORD *)(v18 - 12) = v19;
        v20 = *v5;
        if (*v5)
        {
          v21 = 6 * *(_DWORD *)(v20 - 12);
          v22 = *(_DWORD *)(v20 - 4);
          if (v21 < v22 && v22 >= 9)
          {
            v25 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v5, v22 >> 1, 0);
            result = v25;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 8) - 1;
  }
  else if (*(_QWORD *)result)
  {
    *(_QWORD *)(*(_QWORD *)result + 8) = 3;
    *(_QWORD *)result = 0;
  }
  if (v4)
  {
    *(_DWORD *)(result + 8) = v4;
  }
  else
  {
    if (*(_QWORD *)result)
    {
      *(_QWORD *)(*(_QWORD *)result + 8) = 3;
      *(_QWORD *)result = 0;
    }
    return bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::setShouldEnableVP9Decoder(uint64_t this)
{
  WebCore::PlatformMediaSessionManager::m_vp9DecoderEnabled = this;
  return this;
}

uint64_t WebCore::PlatformMediaSessionManager::setShouldEnableVP8Decoder(uint64_t this)
{
  WebCore::PlatformMediaSessionManager::m_vp8DecoderEnabled = this;
  return this;
}

_QWORD *WebCore::combineSegmentsData(_QWORD *result, uint64_t a2, WTF *this)
{
  _QWORD *v4;
  unsigned int v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  char *v26;

  v4 = result;
  *result = 0;
  result[1] = 0;
  if (this)
  {
    v5 = this;
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x19417DF3CLL);
    }
    result = (_QWORD *)WTF::fastMalloc(this);
    v6 = result;
    v7 = v5;
    *((_DWORD *)v4 + 2) = v5;
    *v4 = result;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 16 * v8;
    for (i = *(_QWORD *)a2 + 8; ; i += 16)
    {
      v12 = *(_QWORD *)i;
      v13 = *(unsigned int *)(*(_QWORD *)i + 24);
      if ((_DWORD)v13 == -1)
        break;
      v26 = &v25;
      v14 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v26, v12 + 8);
      v15 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v15 == -1)
        break;
      v16 = (const void *)v14;
      v26 = &v25;
      result = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v26, v12 + 8);
      if (result)
      {
        v17 = (size_t)result;
        v18 = (char *)result + v9;
        if ((unint64_t)result + v9 > v7)
        {
          v19 = v7 + (v7 >> 2);
          if (v19 >= 0x10)
            v20 = v19 + 1;
          else
            v20 = 16;
          if (v20 <= (unint64_t)v18)
            v21 = (unint64_t)result + v9;
          else
            v21 = v20;
          if (HIDWORD(v21))
            goto LABEL_30;
          v22 = (void *)WTF::fastMalloc((WTF *)v21);
          v7 = v21;
          *((_DWORD *)v4 + 2) = v21;
          v23 = v22;
          *v4 = v22;
          memcpy(v22, v6, v9);
          if (v6)
          {
            if (v23 == v6)
            {
              v7 = 0;
              *v4 = 0;
              *((_DWORD *)v4 + 2) = 0;
            }
            WTF::fastFree((WTF *)v6, v24);
          }
        }
        if ((unint64_t)v18 < v9)
          goto LABEL_30;
        v6 = (void *)*v4;
        result = memcpy((void *)(*v4 + v9), v16, v17);
        v9 = v18;
        *((_DWORD *)v4 + 3) = (_DWORD)v18;
      }
      v10 -= 16;
      if (!v10)
        return result;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x19417DF34);
  }
  return result;
}

void **WebCore::VideoEncoder::setCreatorCallback(void **result)
{
  WebCore::VideoEncoder::s_customCreator = *result;
  return result;
}

void **WebCore::VideoDecoder::setCreatorCallback(void **result)
{
  WebCore::VideoDecoder::s_customCreator = *result;
  return result;
}

uint64_t *WebCore::setApplicationBundleIdentifier(WTF::StringImpl **this, const WTF::String *a2)
{
  if ((byte_1ECE81782 & 1) == 0)
  {
    qword_1ECE81798 = 0;
    byte_1ECE81782 = 1;
  }
  return WTF::String::operator=(&qword_1ECE81798, this);
}

__n128 WebCore::ScrollingStateTree::ScrollingStateTree(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  return result;
}

{
  uint64_t v2;
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  return result;
}

uint64_t WebCore::NetworkStorageSession::permitProcessToUseCookieAPI(WebCore::NetworkStorageSession *this)
{
  WebCore::NetworkStorageSession::m_processMayUseCookieAPI = (char)this;
  if ((_DWORD)this)
    return WTF::addProcessPrivilege();
  else
    return WTF::removeProcessPrivilege();
}

bmalloc::api *WebCore::JSDOMRectReadOnly::destroy(WebCore::JSDOMRectReadOnly *this, JSC::JSCell *a2)
{
  bmalloc::api *result;

  result = (bmalloc::api *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      if (*(_QWORD *)result)
      {
        *(_QWORD *)(*(_QWORD *)result + 8) = 3;
        *(_QWORD *)result = 0;
      }
      return (bmalloc::api *)bmalloc::api::isoDeallocate(result, a2);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::scrollingNodeID(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1 && (v2 = *(_QWORD *)(v1 + 1944)) != 0 && (v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256)) != 0)
    return *(_QWORD *)(v3 + 224);
  else
    return 0;
}

uint64_t WebCore::CSSPropertyParser::consumeShorthandGreedily(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int **v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  v6 = *a2;
  do
  {
    v7 = *((unsigned int *)a2 + 2);
    if (!(_DWORD)v7)
    {
LABEL_14:
      v12 = 0;
      goto LABEL_15;
    }
    v8 = 0;
    while (*((_QWORD *)&v15 + v8))
    {
LABEL_7:
      if (++v8 >= v7)
        goto LABEL_14;
    }
    WebCore::CSSPropertyParsing::parseStyleProperty(&v14, a1, *(unsigned __int16 *)(v6 + 2 * v8), *((unsigned __int16 *)a2 + 6), a1[2]);
    v9 = v14;
    *((_QWORD *)&v15 + v8) = v14;
    if (!v9)
    {
      v7 = *((unsigned int *)a2 + 2);
      goto LABEL_7;
    }
  }
  while (*a1 != a1[1]);
  if (*((_DWORD *)a2 + 2))
  {
    v10 = 0;
    v11 = (int **)&v15;
    v12 = 1;
    do
      WebCore::CSSPropertyParser::addProperty((uint64_t)a1, *(unsigned __int16 *)(v6 + 2 * v10++), *((unsigned __int16 *)a2 + 6), v11++, a3, 0);
    while (v10 < *((unsigned int *)a2 + 2));
  }
  else
  {
    v12 = 1;
  }
LABEL_15:
  if (*((_QWORD *)&v17 + 1))
  {
    if (**((_DWORD **)&v17 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v17 + 1), (WTF::StringImpl *)a2);
    else
      **((_DWORD **)&v17 + 1) -= 2;
  }
  if ((_QWORD)v17)
  {
    if (*(_DWORD *)v17 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (*((_QWORD *)&v16 + 1))
  {
    if (**((_DWORD **)&v16 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v16 + 1), (WTF::StringImpl *)a2);
    else
      **((_DWORD **)&v16 + 1) -= 2;
  }
  if ((_QWORD)v16)
  {
    if (*(_DWORD *)v16 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_QWORD *)&v15 + 1))
  {
    if (**((_DWORD **)&v15 + 1) == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(*((uint64_t *)&v15 + 1), (WTF::StringImpl *)a2);
    else
      **((_DWORD **)&v15 + 1) -= 2;
  }
  if ((_QWORD)v15)
  {
    if (*(_DWORD *)v15 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v12;
}

void WebCore::CSSPropertyParserHelpers::consumeBorderWidth(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int v5;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  int *v14;
  int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  unsigned __int16 *v19;

  v5 = (int)a2;
  v8 = *this;
  if (*this >= this[1])
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_3;
  v15 = *((_DWORD *)v8 + 4);
  if (v15 < 0)
  {
    v15 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v15;
  }
  if ((unsigned __int16)v15 - 493 >= 2 && (unsigned __int16)v15 != 97)
  {
LABEL_3:
    v9 = 0x100000100;
    v10 = *(unsigned __int8 *)(a3 + 48);
    if (v5)
      v11 = v5 == 485;
    else
      v11 = 1;
    v12 = 256;
    if (!v11)
      v12 = 0x100000100;
    if (v10 == 1)
      v9 = v12;
    v18 = 0;
    v19 = 0;
    WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve((uint64_t)this, &v19, (uint64_t)&v18, v9 | v10, &v17);
    if (v18)
      WTF::fastFree((WTF *)(v18 - 16), v13);
    if (v19)
      WTF::fastFree((WTF *)(v19 - 8), v13);
    v14 = v17;
  }
  else
  {
    v16 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw(this, a2);
    if ((v16 & 0xFF0000) != 0)
    {
      if ((unsigned __int16)v16 >= 0x48Eu)
      {
        __break(0xC471u);
        JUMPOUT(0x19417E400);
      }
      v14 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v16 + 3088];
      *v14 += 2;
    }
    else
    {
      v14 = 0;
    }
  }
  *a4 = v14;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeTextEmphasisStyle@<X0>(unsigned int **this@<X0>, int **a2@<X8>)
{
  unsigned int *v5;
  WebCore::CSSParserTokenRange *v6;
  _DWORD *result;
  WTF::StringImpl *v8;
  int *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int *v14;
  _DWORD *v15;
  int *v16;

  v5 = *this;
  if (v5 >= this[1])
  {
    v5 = (unsigned int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if (WebCore::CSSParserToken::id(v5) == 6)
    return (_DWORD *)WebCore::CSSPropertyParserHelpers::consumeIdent((__int128 **)this, v6, a2);
  result = (_DWORD *)WebCore::CSSPropertyParserHelpers::consumeString((uint64_t)this, &v16);
  if (v16)
  {
    *a2 = v16;
    return result;
  }
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)691,(WebCore::CSSValueID)692>((uint64_t)&v16, (uint64_t)this);
  WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)693,(WebCore::CSSValueID)273,(WebCore::CSSValueID)694,(WebCore::CSSValueID)695,(WebCore::CSSValueID)696>((uint64_t)&v15, (uint64_t)this);
  v9 = v16;
  if (!v16)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)691,(WebCore::CSSValueID)692>((uint64_t)&v14, (uint64_t)this);
    v9 = v14;
    v16 = v14;
    if (!v14)
    {
      v13 = (uint64_t *)&v15;
      goto LABEL_21;
    }
  }
  v10 = v15;
  if (!v15)
  {
    v13 = (uint64_t *)&v16;
LABEL_21:
    v11 = *v13;
    if (*v13)
      *(_DWORD *)v11 += 2;
    goto LABEL_12;
  }
  v15 = 0;
  v16 = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)v11 = 2;
  v12 = (*(unsigned __int8 *)(v11 + 6) << 16) & 0xFC0000;
  *(_DWORD *)(v11 + 8) = 2;
  *(_WORD *)(v11 + 4) = -10240;
  *(_BYTE *)(v11 + 6) = BYTE2(v12) | 1;
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = v10;
LABEL_12:
  *a2 = (int *)v11;
  if (v15)
  {
    if (*v15 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, v8);
    else
      *v15 -= 2;
  }
  result = v16;
  if (v16)
  {
    if (*v16 == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v8);
    else
      *v16 -= 2;
  }
  return result;
}

uint64_t WebCore::FontSelectionAlgorithm::indexOfBestCapabilities(WebCore::FontSelectionAlgorithm *this)
{
  WTF *v2;
  WTF *v3;
  char *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  char *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  WTF *v33;
  int v34;
  _BYTE v35[256];

  v2 = (WTF *)*(unsigned int *)(*((_QWORD *)this + 3) + 12);
  v33 = (WTF *)v35;
  v34 = (int)v2;
  if (v2 >= 0x101)
  {
    v3 = (WTF *)WTF::fastMalloc(v2);
    v33 = v3;
  }
  else
  {
    v3 = (WTF *)v35;
  }
  bzero(v3, v2);
  v4 = (char *)v33;
  v5 = WebCore::FontSelectionAlgorithm::bestValue((uint64_t)this, (uint64_t)v33, (unint64_t)WebCore::FontSelectionAlgorithm::stretchDistance, 0);
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 12 * v7;
    do
    {
      if (*v4)
      {
        v12 = 1;
      }
      else
      {
        v10 = *(_QWORD *)v6 + v8;
        v11 = *(__int16 *)(v10 + 4) <= v5 && *(__int16 *)(v10 + 6) >= v5;
        v12 = !v11;
      }
      *v4++ = v12;
      v8 += 12;
    }
    while (v9 != v8);
  }
  v13 = (char *)v33;
  v14 = WebCore::FontSelectionAlgorithm::bestValue((uint64_t)this, (uint64_t)v33, (unint64_t)WebCore::FontSelectionAlgorithm::styleDistance, 0);
  v15 = *((_QWORD *)this + 3);
  v16 = *(unsigned int *)(v15 + 12);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 12 * v16;
    do
    {
      if (*v13)
      {
        v21 = 1;
      }
      else
      {
        v19 = *(_QWORD *)v15 + v17;
        v20 = *(__int16 *)(v19 + 8) <= v14 && *(__int16 *)(v19 + 10) >= v14;
        v21 = !v20;
      }
      *v13++ = v21;
      v17 += 12;
    }
    while (v18 != v17);
  }
  v22 = (char *)v33;
  v23 = WebCore::FontSelectionAlgorithm::bestValue((uint64_t)this, (uint64_t)v33, (unint64_t)WebCore::FontSelectionAlgorithm::weightDistance, 0);
  v25 = *((_QWORD *)this + 3);
  v26 = *(unsigned int *)(v25 + 12);
  if ((_DWORD)v26)
  {
    v27 = 0;
    v28 = 12 * v26;
    do
    {
      if (*v22)
      {
        v30 = 1;
      }
      else
      {
        v29 = *(__int16 *)(*(_QWORD *)v25 + v27) <= v23 && *(__int16 *)(*(_QWORD *)v25 + v27 + 2) >= v23;
        v30 = !v29;
      }
      *v22++ = v30;
      v27 += 12;
    }
    while (v28 != v27);
  }
  if (v34)
  {
    v31 = 0;
    while (*((_BYTE *)v33 + v31))
    {
      if (v34 == ++v31)
        goto LABEL_37;
    }
  }
  else
  {
LABEL_37:
    v31 = -1;
  }
  if (v35 != (_BYTE *)v33 && v33)
    WTF::fastFree(v33, v24);
  return v31;
}

uint64_t WebCore::FontSelectionAlgorithm::bestValue(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(unsigned int *)(*(_QWORD *)(result + 24) + 12);
  if ((_DWORD)v5)
  {
    v6 = a3;
    v8 = result;
    v9 = (_QWORD *)(result + (a4 >> 1));
    if ((a4 & 1) != 0)
    {
      v17 = 0;
      v18 = 0;
      v12 = 0;
      v13 = 0;
      v19 = a3;
      v20 = 12 * v5;
      do
      {
        if (!*(_BYTE *)(a2 + v18))
        {
          v21 = *(_QWORD *)(v8 + 24);
          if (v18 >= *(unsigned int *)(v21 + 12))
            goto LABEL_26;
          v22 = *(_QWORD *)v21 + v17;
          v6 = v6 & 0xFFFFFFFF00000000 | *(unsigned int *)(v22 + 8);
          result = (*(uint64_t (**)(_QWORD *, _QWORD, unint64_t))(*v9 + v19))(v9, *(_QWORD *)v22, v6);
          if (v12)
          {
            if ((__int16)result < (__int16)v13)
              v13 = result;
            v12 = 1;
          }
          else
          {
            v12 = 1;
            v13 = result;
          }
        }
        ++v18;
        v17 += 12;
      }
      while (v20 != v17);
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 12 * v5;
      do
      {
        if (!*(_BYTE *)(a2 + v11))
        {
          v15 = *(_QWORD *)(v8 + 24);
          if (v11 >= *(unsigned int *)(v15 + 12))
            goto LABEL_26;
          v16 = *(_QWORD *)v15 + v10;
          v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v16 + 8);
          result = ((uint64_t (*)(_QWORD *, _QWORD, unint64_t))v6)(v9, *(_QWORD *)v16, v4);
          if (v12)
          {
            if ((__int16)result < (__int16)v13)
              v13 = result;
            v12 = 1;
          }
          else
          {
            v12 = 1;
            v13 = result;
          }
        }
        ++v11;
        v10 += 12;
      }
      while (v14 != v10);
    }
    if (v12)
      return HIWORD(v13);
  }
  result = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_26:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::FontSelectionAlgorithm::stretchDistance(__int16 *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  BOOL v6;
  int v7;

  v2 = (uint64_t)(a2 << 16) >> 48;
  LODWORD(v3) = a1[1];
  if ((int)v3 < SWORD2(a2))
  {
    if ((int)v3 > 400)
      goto LABEL_12;
    goto LABEL_6;
  }
  if ((int)v3 > SHIWORD(a2))
  {
    if ((int)v3 > 400)
    {
      v7 = a1[7];
      if ((int)v3 > v7)
        LOWORD(v7) = a1[1];
      v4 = v7 - HIWORD(a2);
      goto LABEL_8;
    }
LABEL_6:
    if ((int)v3 > SHIWORD(a2))
    {
      v4 = v3 - HIWORD(a2);
LABEL_8:
      v2 = HIWORD(a2);
      return v4 | ((unsigned __int16)v2 << 16);
    }
    v6 = a1[6] < (int)v3;
    v3 = 2;
    if (v6)
      v3 = 12;
    LOWORD(v3) = *(__int16 *)((char *)a1 + v3);
LABEL_12:
    v4 = WORD2(a2) - v3;
    return v4 | ((unsigned __int16)v2 << 16);
  }
  v4 = 0;
  LOWORD(v2) = v3;
  return v4 | ((unsigned __int16)v2 << 16);
}

uint64_t WebCore::FontSelectionAlgorithm::styleDistance(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v4;
  int v5;

  LOWORD(v3) = a3;
  if (*(_BYTE *)(a1 + 6))
  {
    v4 = *(__int16 *)(a1 + 4);
    LOWORD(v5) = a3 - v4;
    if ((__int16)a3 > v4)
    {
      if (v4 > 55)
        return (unsigned __int16)v5 | ((unsigned __int16)v3 << 16);
    }
    else
    {
      if (v4 <= (int)a3 >> 16)
      {
        LOWORD(v5) = 0;
        LOWORD(v3) = *(_WORD *)(a1 + 4);
        return (unsigned __int16)v5 | ((unsigned __int16)v3 << 16);
      }
      if (v4 > 55)
        goto LABEL_8;
    }
    if ((v4 & 0x80000000) == 0)
    {
      if ((a3 & 0x80000000) != 0 || *(unsigned __int16 *)(a1 + 4) <= WORD1(a3))
      {
        LOWORD(v5) = a3;
        if ((__int16)a3 > v4)
          return (unsigned __int16)v5 | ((unsigned __int16)v3 << 16);
        goto LABEL_8;
      }
      goto LABEL_26;
    }
    if (v4 < 0xFFFFFFC9)
    {
      if (v4 > (int)a3 >> 16)
      {
LABEL_26:
        LOWORD(v5) = v4 - WORD1(a3);
        goto LABEL_11;
      }
    }
    else
    {
      if ((__int16)a3 <= 0)
      {
        LOWORD(v5) = a3 - v4;
        if ((__int16)a3 > v4)
          return (unsigned __int16)v5 | ((unsigned __int16)v3 << 16);
      }
      if (v4 > (int)a3 >> 16)
      {
        v5 = -(int)(a3 >> 16);
LABEL_11:
        v3 = a3 >> 16;
        return (unsigned __int16)v5 | ((unsigned __int16)v3 << 16);
      }
    }
    v5 = *(__int16 *)(a1 + 16);
    if (v5 >= v4)
      LOWORD(v5) = *(_WORD *)(a1 + 4);
    LOWORD(v5) = a3 - v5;
  }
  else
  {
    LOWORD(v5) = a3;
    if ((__int16)a3 <= 0)
    {
      v4 = 0;
      LOWORD(v5) = 0;
      LOWORD(v3) = 0;
      if ((a3 & 0x80000000) != 0)
      {
LABEL_8:
        v5 = *(__int16 *)(a1 + 18);
        if (v4 > v5)
          LOWORD(v5) = v4;
        LOWORD(v5) = v5 - WORD1(a3);
        goto LABEL_11;
      }
    }
  }
  return (unsigned __int16)v5 | ((unsigned __int16)v3 << 16);
}

uint64_t WebCore::FontSelectionAlgorithm::weightDistance(__int16 *a1, int a2)
{
  int v2;
  int v3;
  unsigned __int16 v6;
  int v8;
  int v9;

  LOWORD(v2) = a2;
  v3 = *a1;
  if (v3 <= a2 >> 16 && (__int16)a2 <= v3)
  {
    v6 = 0;
    LOWORD(v2) = v3;
    return v6 | ((unsigned __int16)v2 << 16);
  }
  if (v3 < 1600)
  {
    if (v3 > a2 >> 16)
    {
      v6 = v3 - HIWORD(a2);
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  if (v3 > 0x7D0)
  {
    v6 = a2 - v3;
    if ((__int16)a2 > v3)
      return v6 | ((unsigned __int16)v2 << 16);
    v9 = a1[5];
    if (v3 > v9)
      LOWORD(v9) = v3;
    v6 = v9 - HIWORD(a2);
    goto LABEL_11;
  }
  if ((__int16)a2 > 2000 || (v6 = a2 - v3, (__int16)a2 <= v3))
  {
    if (v3 > a2 >> 16)
    {
      v6 = 2000 - HIWORD(a2);
LABEL_11:
      v2 = a2 >> 16;
      return v6 | ((unsigned __int16)v2 << 16);
    }
LABEL_14:
    v8 = a1[4];
    if (v8 >= v3)
      LOWORD(v8) = v3;
    v6 = a2 - v8;
  }
  return v6 | ((unsigned __int16)v2 << 16);
}

WebCore::RenderLayerCompositor *WebCore::LocalFrameView::setCustomFixedPositionLayoutRect(WebCore::RenderLayerCompositor *this, const WebCore::IntRect *a2)
{
  BOOL v2;
  BOOL v3;

  if (!*((_BYTE *)this + 1176)
    || (*((_DWORD *)this + 295) == *(_DWORD *)a2 ? (v2 = *((_DWORD *)this + 296) == *((_DWORD *)a2 + 1)) : (v2 = 0),
        !v2
     || (*((_DWORD *)this + 297) == *((_DWORD *)a2 + 2)
       ? (v3 = *((_DWORD *)this + 298) == *((_DWORD *)a2 + 3))
       : (v3 = 0),
         !v3)))
  {
    *((_BYTE *)this + 1176) = 1;
    *(_OWORD *)((char *)this + 1180) = *(_OWORD *)a2;
    return WebCore::LocalFrameView::updateContentsSize(this);
  }
  return this;
}

#error "19417EC10: too big function (funcsize=0)"

__int128 *WebCore::CSSPropertyParserHelpers::consumeIdent<BOOL (&)(WebCore::CSSValueID,WebCore::CSSParserContext const&),WebCore::CSSParserContext const&>(int **a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  __int128 *v8;
  int v9;
  __int128 *result;
  int *v11;
  int v12;

  v8 = *(__int128 **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
  {
    LOWORD(v9) = 0;
  }
  else
  {
    v9 = *((_DWORD *)v8 + 4);
    if (v9 < 0)
    {
      v12 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
      LOWORD(v9) = v12;
      *((_DWORD *)v8 + 4) = v12;
    }
  }
  result = (__int128 *)a3((unsigned __int16)v9, a4);
  if ((_DWORD)result)
  {
    result = *(__int128 **)a2;
    if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    {
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        result = *(__int128 **)a2;
      }
    }
    else
    {
      result = (__int128 *)((char *)result + 24);
      *(_QWORD *)a2 = result;
    }
    while (1)
    {
      if ((unint64_t)result >= *(_QWORD *)(a2 + 8))
      {
        result = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          result = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      if ((*(_DWORD *)result & 0x3F) != 0x10)
        break;
      result = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = result;
    }
    if ((unsigned __int16)v9 >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x19419724CLL);
    }
    v11 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)v9 + 3088];
    *v11 += 2;
  }
  else
  {
    v11 = 0;
  }
  *a1 = v11;
  return result;
}

BOOL WebCore::isKeywordValidForTextAlign(int a1, uint64_t a2)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 257) >= 0xA && (a1 - 500) >= 2)
    return a1 == 267 && *(_BYTE *)(a2 + 48) == 4;
  return result;
}

double WebCore::isKeywordValidForAppearance(int a1)
{
  int v1;
  double result;

  if (a1 != 6 && a1 != 394 && (a1 - 577) <= 0x12)
  {
    v1 = 1 << (a1 - 65);
    if ((v1 & 0x67FDF) == 0
      && (v1 & 0x18000) != 0
    {
      result = 0.0;
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
  }
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeTransform@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, int **a3@<X8>)
{
  __int128 *v7;
  WTF::StringImpl *v8;
  int v9;
  int *v10;
  WTF *v11;
  unsigned int v12;
  WTF *v13;
  WTF *result;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  _BYTE v28[32];
  int *v29;
  int *v30;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[32];

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) == 0)
  {
    v23 = *((_DWORD *)v7 + 4);
    if (v23 < 0)
    {
      v23 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
      *((_DWORD *)v7 + 4) = v23;
    }
    if ((unsigned __int16)v23 == 6)
      return (WTF *)WebCore::CSSPropertyParserHelpers::consumeIdent(this, a2, a3);
  }
  v31 = (WTF *)v33;
  v32 = 4;
  do
  {
    WebCore::CSSPropertyParserHelpers::consumeTransformFunction((int **)this, a2, &v30);
    if (!v30)
    {
      *a3 = 0;
      goto LABEL_19;
    }
    v29 = v30;
    v9 = HIDWORD(v32);
    if (HIDWORD(v32) == (_DWORD)v32)
    {
      WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v31, (unint64_t)&v29);
    }
    else
    {
      v29 = 0;
      *((_QWORD *)v31 + HIDWORD(v32)) = v30;
      HIDWORD(v32) = v9 + 1;
    }
    v10 = v29;
    v29 = 0;
    if (v10)
    {
      if (*v10 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v8);
      else
        *v10 -= 2;
    }
  }
  while (*this != this[1]);
  v25 = (WTF *)v28;
  v26 = 4;
  v11 = v31;
  if (v31 == (WTF *)v33)
  {
    v12 = HIDWORD(v32);
    memcpy(v28, v33, 8 * HIDWORD(v32));
  }
  else
  {
    v31 = (WTF *)v33;
    v25 = v11;
    v24 = v32;
    v12 = HIDWORD(v32);
    LODWORD(v32) = 4;
    v26 = v24;
  }
  HIDWORD(v32) = 0;
  v27 = v12;
  WebCore::CSSTransformListValue::create((uint64_t)&v25, &v30);
  *a3 = v30;
  v30 = 0;
  if (v27)
  {
    v20 = v25;
    v21 = 8 * v27;
    do
    {
      v22 = *(_DWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*v22 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v8);
        else
          *v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  v13 = v25;
  if (v28 != (_BYTE *)v25 && v25 != 0)
  {
    v25 = 0;
    v26 = 0;
    WTF::fastFree(v13, v8);
  }
LABEL_19:
  if (HIDWORD(v32))
  {
    v17 = v31;
    v18 = 8 * HIDWORD(v32);
    do
    {
      v19 = *(_DWORD **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v8);
        else
          *v19 -= 2;
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  result = v31;
  if (v33 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (WTF *)WTF::fastFree(result, v8);
  }
  return result;
}

uint64_t WebCore::isKeywordValidForWordBreak(int a1, uint64_t a2)
{
  uint64_t result;

  result = 1;
  if ((a1 - 566) >= 3 && a1 != 90)
  {
    if (a1 == 565)
      return *(unsigned __int16 *)(a2 + 51) >> 15;
    else
      return 0;
  }
  return result;
}

double WebCore::Color::lightness(WebCore::Color *this)
{
  unint64_t v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  char v11;
  __int128 v12;
  _QWORD v13[2];

  v1 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v12 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 4);
    v13[0] = &v11;
    v13[1] = &v12;
    v3 = _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_19BoundedGammaEncodedIfNS_15SRGBADescriptorEEEEET_vEUlRKS7_E_EEDcRKNS_15ColorComponentsIS7_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESB_SG_SI_(HIBYTE(v1), (uint64_t)v13);
  }
  else
  {
    v2 = bswap32(v1);
    v3 = (float)v2 / 255.0;
    v4 = (float)BYTE1(v2) / 255.0;
    v5 = (float)BYTE2(v2) / 255.0;
  }
  v6 = v3;
  v7 = v4;
  v8 = v5;
  if (v7 < v3)
    v3 = v7;
  if (v7 >= v6)
    v9 = v7;
  else
    v9 = v6;
  if (v8 >= v3)
  {
    if (v8 >= v9)
      return (float)(v3 + v8) * 0.5;
  }
  else
  {
    v3 = v8;
  }
  v8 = v9;
  return (float)(v3 + v8) * 0.5;
}

WTF *WebCore::CSSPropertyParserHelpersWorkerSafe::consumeFontFaceSrc@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  char v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  __int128 *v21;
  __int128 *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WebCore::CSSParserTokenRange *v35;
  unsigned int v36;
  __int128 *v37;
  char v38;
  unsigned int v39;
  __int128 *v40;
  unsigned int v41;
  __int128 *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  __int128 *v45;
  WTF *v46;
  __int128 v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  _DWORD *v56;
  __int128 *v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  uint64_t *v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  int v65;
  unsigned int v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  _DWORD *v70;
  WTF *v71;
  WTF *v73;
  uint64_t v74;
  _DWORD *v75;
  WTF *result;
  int v78;
  WTF *v79;
  int v80;
  unsigned int v81;
  _BYTE v82[32];
  __int128 *v83;
  __int128 *v84;
  WTF *v85;
  uint64_t v86;
  _BYTE v87[32];
  WTF::StringImpl *v88;
  WTF::StringImpl *v89[2];
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  WTF::StringImpl *v98;

  v85 = (WTF *)v87;
  v86 = 4;
  v5 = *this;
  v6 = this[1];
  if (*this == v6)
    goto LABEL_193;
  do
  {
    if (v5 == v6)
    {
LABEL_33:
      v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v9 & 1) != 0)
        goto LABEL_34;
LABEL_49:
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      goto LABEL_34;
    }
    v10 = this[1];
    v11 = v5;
    while (1)
    {
      if (v11 < v6 || (v9 & 1) != 0)
      {
        v12 = v11 >= v6 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v11;
        v13 = *(_DWORD *)v12;
      }
      else
      {
        v13 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v13;
        v9 = 1;
      }
      v11 = *this;
      if ((v13 & 0x3F) == 0x15)
        break;
      v14 = 0;
      v15 = v9;
      do
      {
        if (v11 == v10)
        {
          if ((v15 & 1) != 0)
          {
            v11 = v10;
          }
          else
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v11 = *this;
            v9 = 1;
          }
          v15 = 1;
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v16 = v11;
          v11 = (__int128 *)((char *)v11 + 24);
          *this = v11;
        }
        v17 = *(_DWORD *)v16 >> 6;
        if (v17 == 2)
          v18 = -1;
        else
          v18 = 0;
        if (v17 == 1)
          v19 = 1;
        else
          v19 = v18;
        v14 += v19;
        if (v14)
          v20 = v11 >= v10;
        else
          v20 = 1;
      }
      while (!v20);
      v6 = v10;
      if (v11 == v10)
        goto LABEL_33;
    }
    if (v11 >= this[1])
      v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    else
      v21 = *this;
    if ((v9 & 1) == 0)
      goto LABEL_49;
LABEL_34:
    v22 = this[1];
    if (v5 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
      v5 = this[1];
    if (v21 != &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
      v22 = v21;
    v83 = v5;
    v84 = v22;
    if (v22 <= v5)
      v23 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    else
      v23 = (int *)v5;
    if ((*v23 & 0x3F) == 4 || WebCore::CSSParserToken::functionId(v23) == 817)
    {
      v24 = WebCore::CSSPropertyParserHelpers::consumeURLRaw(&v83, a2);
      if ((v25 & 0xFF00000000) != 0)
      {
        WTF::String::String();
      }
      else
      {
        v26 = 0;
        v27 = (unsigned __int16 *)v24;
        if ((v24 & 7) != 0 && (_DWORD)v25)
        {
          v26 = 0;
          v28 = 2 * v25 - 2;
          v29 = v24 + 2;
          v27 = (unsigned __int16 *)v24;
          do
          {
            v30 = *v27++;
            v26 |= v30;
            if ((v29 & 7) == 0)
              break;
            v31 = v28;
            v28 -= 2;
            v29 += 2;
          }
          while (v31);
        }
        v32 = v24 + 2 * v25;
        while ((unint64_t)v27 < (v32 & 0xFFFFFFFFFFFFFFF8))
        {
          v33 = *(_QWORD *)v27;
          v27 += 4;
          v26 |= v33;
        }
        while (v27 != (unsigned __int16 *)v32)
        {
          v34 = *v27++;
          v26 |= v34;
        }
        if ((v26 & 0xFF80FF80FF80FF80) != 0)
          WTF::String::String();
        else
          WTF::String::make8Bit();
      }
      WebCore::CSSParserContext::completeURL(a2, (unsigned int **)&v98, &v95);
      if (!*((_QWORD *)&v95 + 1))
      {
        v44 = 0;
        *((_QWORD *)&v95 + 1) = 0;
LABEL_110:
        v53 = (WTF::StringImpl *)v95;
        *(_QWORD *)&v95 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, a2);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = v98;
        v98 = 0;
        if (!v54)
          goto LABEL_116;
        if (*(_DWORD *)v54 == 2)
          goto LABEL_165;
        *(_DWORD *)v54 -= 2;
        goto LABEL_116;
      }
      v93 = 0;
      v94 = 0;
      v42 = v83;
      if (v83 >= v84)
      {
        v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v42 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if (WebCore::CSSParserToken::functionId((int *)v42) == 788)
      {
        WebCore::CSSPropertyParserHelpers::consumeFontFormat(&v83, 0, v89);
        v43 = v89[0];
        if (!v89[0])
          goto LABEL_91;
      }
      else
      {
        v43 = 0;
      }
      v45 = v83;
      if (v83 >= v84)
      {
        v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if (WebCore::CSSParserToken::functionId((int *)v45) != 796)
        goto LABEL_90;
      WebCore::CSSPropertyParserHelpers::consumeFontTech(&v83, 0, (uint64_t)v89);
      v46 = v93;
      if (v93)
      {
        v93 = 0;
        LODWORD(v94) = 0;
        WTF::fastFree(v46, a2);
      }
      v93 = v89[0];
      v94 = v89[1];
      if (HIDWORD(v89[1]))
      {
LABEL_90:
        if (v83 == v84)
        {
          v47 = v95;
          v95 = 0uLL;
          *(_OWORD *)v89 = v47;
          v90 = v96;
          v91 = v97;
          LODWORD(v96) = v96 & 0xFFFFFFFE;
          v88 = v43;
          WebCore::CSSFontFaceSrcResourceValue::create((uint64_t *)v89, (uint64_t *)&v88, (uint64_t *)&v93, (*(_WORD *)((_BYTE *)a2 + 51) & 4) != 0, &v92);
          v44 = v92;
          v92 = 0;
          v48 = v88;
          v88 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, a2);
            else
              *(_DWORD *)v48 -= 2;
          }
          v49 = v89[1];
          v89[1] = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, a2);
            else
              *(_DWORD *)v49 -= 2;
          }
          v50 = v89[0];
          v89[0] = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, a2);
            else
              *(_DWORD *)v50 -= 2;
          }
          v43 = 0;
          goto LABEL_102;
        }
      }
LABEL_91:
      v44 = 0;
LABEL_102:
      v51 = v93;
      if (v93)
      {
        v93 = 0;
        LODWORD(v94) = 0;
        WTF::fastFree(v51, a2);
      }
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, a2);
        else
          *(_DWORD *)v43 -= 2;
      }
      v52 = (WTF::StringImpl *)*((_QWORD *)&v95 + 1);
      *((_QWORD *)&v95 + 1) = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, a2);
        else
          *(_DWORD *)v52 -= 2;
      }
      goto LABEL_110;
    }
    if (WebCore::CSSParserToken::functionId(v23) != 475)
      goto LABEL_123;
    v35 = (WebCore::CSSParserTokenRange *)WebCore::CSSPropertyParserHelpers::consumeFunction(&v83, a2);
    *(_QWORD *)&v95 = v35;
    *((_QWORD *)&v95 + 1) = a2;
    if (a2 <= v35)
    {
      LOBYTE(v36) = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v36 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v36;
      }
    }
    else
    {
      v36 = *(_DWORD *)v35;
    }
    if ((v36 & 0x3F) == 0x1C)
    {
      if (v35 == a2)
      {
        v39 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v38 = 1;
        {
          v39 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v39;
        }
        v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      else
      {
        v37 = (__int128 *)v35;
        v35 = (WebCore::CSSParserTokenRange *)((char *)v35 + 24);
        *(_QWORD *)&v95 = v35;
        v39 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      while (1)
      {
        if (v35 < a2 || (v38 & 1) != 0)
        {
          v40 = v35 >= a2 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : (__int128 *)v35;
          v41 = *(_DWORD *)v40;
        }
        else
        {
          v41 = v39 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v41;
          v38 = 1;
          v39 = v41;
        }
        if ((v41 & 0x3F) != 0x10)
          break;
        v35 = (WebCore::CSSParserTokenRange *)((char *)v35 + 24);
        *(_QWORD *)&v95 = v35;
      }
      if (v35 != a2 || v83 != v84)
      {
LABEL_145:
        v44 = 0;
        goto LABEL_116;
      }
      if ((*((_BYTE *)v37 + 2) & 0x40) != 0)
        WTF::AtomStringImpl::add();
      else
        WTF::AtomStringImpl::add();
      v63 = v89[0];
      v44 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v44 = 2;
      v64 = (*(_BYTE *)(v44 + 6) >> 2 << 18) | 0x10000;
      *(_WORD *)(v44 + 4) = 0;
      *(_BYTE *)(v44 + 6) = BYTE2(v64);
      *(_QWORD *)(v44 + 8) = v63;
      *(_QWORD *)(v44 + 16) = 0;
    }
    else
    {
      if ((v36 & 0x3F) != 0)
        goto LABEL_145;
      WebCore::CSSPropertyParserHelpers::concatenateFamilyName((__int128 **)&v95, a2, (WTF::AtomString *)v89);
      v59 = v89[0];
      if (!v89[0])
        goto LABEL_145;
      if ((_QWORD)v95 == *((_QWORD *)&v95 + 1) && v83 == v84)
      {
        v89[0] = 0;
        v44 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_DWORD *)v44 = 2;
        v65 = (*(_BYTE *)(v44 + 6) >> 2 << 18) | 0x10000;
        *(_WORD *)(v44 + 4) = 0;
        *(_BYTE *)(v44 + 6) = BYTE2(v65);
        *(_QWORD *)(v44 + 8) = v59;
        *(_QWORD *)(v44 + 16) = 0;
        v59 = v89[0];
        v89[0] = 0;
        if (!v59)
          goto LABEL_116;
      }
      else
      {
        v44 = 0;
        v89[0] = 0;
      }
      if (*(_DWORD *)v59 == 2)
      {
        v54 = v59;
LABEL_165:
        WTF::StringImpl::destroy(v54, a2);
        goto LABEL_116;
      }
      *(_DWORD *)v59 -= 2;
    }
LABEL_116:
    if (v44)
    {
      *(_QWORD *)&v95 = v44;
      LODWORD(v55) = HIDWORD(v86);
      if (HIDWORD(v86) == (_DWORD)v86)
      {
        v60 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v85, HIDWORD(v86) + 1, (unint64_t)&v95);
        v55 = HIDWORD(v86);
        v61 = v85;
        v62 = *v60;
        *v60 = 0;
        *((_QWORD *)v61 + v55) = v62;
      }
      else
      {
        *(_QWORD *)&v95 = 0;
        *((_QWORD *)v85 + HIDWORD(v86)) = v44;
      }
      HIDWORD(v86) = v55 + 1;
      v56 = (_DWORD *)v95;
      *(_QWORD *)&v95 = 0;
      if (v56)
      {
        if (*v56 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, a2);
        else
          *v56 -= 2;
      }
    }
LABEL_123:
    v5 = *this;
    v6 = this[1];
    if (*this == v6)
      break;
    do
    {
      v5 = (__int128 *)((char *)v5 + 24);
      *this = v5;
      if (v5 < v6 || (v9 & 1) != 0)
      {
        if (v5 >= v6)
          v57 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v57 = v5;
        v58 = *(_DWORD *)v57;
      }
      else
      {
        v58 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v58;
        v9 = 1;
        v5 = *this;
      }
    }
    while ((v58 & 0x3F) == 0x10);
  }
  while (v5 != v6);
  v66 = HIDWORD(v86);
  if (!HIDWORD(v86))
  {
LABEL_193:
    *a3 = 0;
    goto LABEL_194;
  }
  v79 = (WTF *)v82;
  v80 = 4;
  v67 = v85;
  if (v85 == (WTF *)v87)
  {
    memcpy(v82, v87, 8 * HIDWORD(v86));
  }
  else
  {
    v85 = (WTF *)v87;
    v79 = v67;
    v78 = v86;
    LODWORD(v86) = 4;
    v80 = v78;
  }
  HIDWORD(v86) = 0;
  v81 = v66;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v79, (uint64_t *)&v95);
  *a3 = v95;
  if (v81)
  {
    v68 = v79;
    v69 = 8 * v81;
    do
    {
      v70 = *(_DWORD **)v68;
      *(_QWORD *)v68 = 0;
      if (v70)
      {
        if (*v70 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v70, a2);
        else
          *v70 -= 2;
      }
      v68 = (WTF *)((char *)v68 + 8);
      v69 -= 8;
    }
    while (v69);
  }
  v71 = v79;
  if (v82 != (_BYTE *)v79 && v79 != 0)
  {
    v79 = 0;
    v80 = 0;
    WTF::fastFree(v71, a2);
  }
  if (HIDWORD(v86))
  {
    v73 = v85;
    v74 = 8 * HIDWORD(v86);
    do
    {
      v75 = *(_DWORD **)v73;
      *(_QWORD *)v73 = 0;
      if (v75)
      {
        if (*v75 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v75, a2);
        else
          *v75 -= 2;
      }
      v73 = (WTF *)((char *)v73 + 8);
      v74 -= 8;
    }
    while (v74);
  }
LABEL_194:
  result = v85;
  if (v87 != (_BYTE *)v85 && v85 != 0)
  {
    v85 = 0;
    LODWORD(v86) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeTransformFunction(int **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v7;
  unsigned int v8;
  WebCore::CSSParserTokenRange *v9;
  unsigned int v10;
  __int128 *v11;
  void *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  WTF *v17;
  unsigned int v18;
  WTF *v19;
  WTF *v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 *v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  __int128 *v28;
  int v29;
  int v30;
  _DWORD *v31;
  int *v32;
  int v33;
  int *v34;
  __int128 *v35;
  __int128 *v36;
  char v37;
  unsigned int v38;
  __int128 *v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  uint64_t v45;
  _DWORD *v46;
  int *v47;
  int v48;
  int v49;
  int *v50;
  int v51;
  WTF *v52;
  int v53;
  unsigned int v54;
  _BYTE v55[32];
  int *v56;
  WTF *v57;
  uint64_t v58;
  _BYTE v59[32];
  __int128 *v60;
  __int128 *v61;
  _DWORD *v62;
  int *v63;

  v7 = *this;
  if (v7 >= this[1])
  {
    v7 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  v8 = WebCore::CSSParserToken::functionId(v7);
  if (!v8
    || (v10 = v8,
        v60 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)this, v9),
        v61 = v11,
        v11 == v60))
  {
LABEL_107:
    *a3 = 0;
  }
  else
  {
    v57 = (WTF *)v59;
    v58 = 4;
    switch(v10)
    {
      case 0x348u:
      case 0x349u:
        if (v10 == 841)
          v48 = 16;
        else
          v48 = 6;
        if ((WebCore::CSSPropertyParserHelpers::consumeNumbers(&v60, (uint64_t)&v57, v48) & 1) == 0)
          goto LABEL_75;
        goto LABEL_20;
      case 0x34Au:
        if ((WebCore::CSSPropertyParserHelpers::consumePerspectiveFunctionArgument((WebCore::CSSPropertyParsing *)&v60, a2, (uint64_t)&v57) & 1) == 0)goto LABEL_75;
        goto LABEL_20;
      case 0x34Bu:
      case 0x34Cu:
      case 0x34Du:
      case 0x34Eu:
      case 0x355u:
      case 0x356u:
      case 0x357u:
        v14 = *((unsigned __int8 *)a2 + 48);
        v62 = 0;
        v63 = 0;
        WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::AngleRaw>::consumeAndResolve((uint64_t)&v60, (unsigned __int16 **)&v63, (uint64_t)&v62, v14 | 0x100000000, &v56);
        if (v62)
          WTF::fastFree((WTF *)(v62 - 4), v12);
        if (v63)
          WTF::fastFree((WTF *)(v63 - 4), v12);
        v13 = v56;
        if (!v56)
          goto LABEL_75;
        if (v10 != 853
          || !WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v60, (WebCore::CSSParserTokenRange *)v12))
        {
          goto LABEL_15;
        }
        v63 = v13;
        v49 = HIDWORD(v58);
        if (HIDWORD(v58) == (_DWORD)v58)
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v57, (unint64_t)&v63);
        }
        else
        {
          v63 = 0;
          *((_QWORD *)v57 + HIDWORD(v58)) = v13;
          HIDWORD(v58) = v49 + 1;
        }
        v50 = v63;
        v63 = 0;
        if (v50)
        {
          if (*v50 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v50, (WTF::StringImpl *)v12);
          else
            *v50 -= 2;
        }
LABEL_123:
        WebCore::CSSPropertyParserHelpers::consumeAngle((uint64_t)&v60, *((unsigned __int8 *)a2 + 48), 1, 0, &v63);
        v13 = v63;
        goto LABEL_74;
      case 0x34Fu:
        if (WebCore::CSSPropertyParserHelpers::consumeNumbers(&v60, (uint64_t)&v57, 3)
          && WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v60, (WebCore::CSSParserTokenRange *)v12))
        {
          goto LABEL_123;
        }
        goto LABEL_75;
      case 0x350u:
      case 0x351u:
      case 0x352u:
      case 0x353u:
        WebCore::CSSPropertyParserHelpers::consumePercentDividedBy100OrNumber((uint64_t)&v60, 0, &v63);
        v34 = v63;
        if (!v63)
          goto LABEL_75;
        if (v10 != 848)
          goto LABEL_113;
        v35 = v60;
        v36 = v60;
        if (v60 >= v61)
        {
          v36 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        if ((*(_DWORD *)v36 & 0x3F) == 0x15)
        {
          if (v60 == v61)
          {
            v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v37 = 1;
            {
              v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
            }
          }
          else
          {
            v35 = (__int128 *)((char *)v60 + 24);
            v60 = (__int128 *)((char *)v60 + 24);
            v38 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          }
          while (1)
          {
            if (v35 < v61 || (v37 & 1) != 0)
            {
              v39 = v35 >= v61 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v35;
              v40 = *(_DWORD *)v39;
            }
            else
            {
              v38 = v38 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v38;
              v37 = 1;
              LOBYTE(v40) = v38;
            }
            if ((v40 & 0x3F) != 0x10)
              break;
            v35 = (__int128 *)((char *)v35 + 24);
            v60 = v35;
          }
          v41 = HIDWORD(v58);
          v42 = v57;
          *v63 += 2;
          *((_QWORD *)v42 + v41) = v34;
          HIDWORD(v58) = v41 + 1;
          WebCore::CSSPropertyParserHelpers::consumePercentDividedBy100OrNumber((uint64_t)&v60, 0, &v63);
          v13 = v63;
          v63 = 0;
          if (*v34 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, (WTF::StringImpl *)v12);
            v47 = v63;
            v63 = 0;
            if (v47)
            {
              if (*v47 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, (WTF::StringImpl *)v12);
              else
                *v47 -= 2;
            }
          }
          else
          {
            *v34 -= 2;
          }
LABEL_74:
          if (!v13)
          {
LABEL_75:
            *a3 = 0;
            goto LABEL_76;
          }
        }
        else
        {
LABEL_113:
          v13 = v63;
        }
LABEL_15:
        v63 = v13;
        v15 = HIDWORD(v58);
        if (HIDWORD(v58) == (_DWORD)v58)
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)&v57, (unint64_t)&v63);
        }
        else
        {
          v63 = 0;
          *((_QWORD *)v57 + HIDWORD(v58)) = v13;
          HIDWORD(v58) = v15 + 1;
        }
        v16 = v63;
        v63 = 0;
        if (v16)
        {
          if (*v16 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, (WTF::StringImpl *)v12);
          else
            *v16 -= 2;
        }
LABEL_20:
        if (v60 != v61)
          goto LABEL_75;
        v52 = (WTF *)v55;
        v53 = 4;
        v17 = v57;
        if (v57 == (WTF *)v59)
        {
          v18 = HIDWORD(v58);
          memcpy(v55, v59, 8 * HIDWORD(v58));
        }
        else
        {
          v57 = (WTF *)v59;
          v52 = v17;
          v51 = v58;
          v18 = HIDWORD(v58);
          LODWORD(v58) = 4;
          v53 = v51;
        }
        HIDWORD(v58) = 0;
        v54 = v18;
        WebCore::CSSFunctionValue::create(v10, (uint64_t)&v52, &v63);
        *a3 = v63;
        v63 = 0;
        if (v54)
        {
          v21 = v52;
          v22 = 8 * v54;
          do
          {
            v23 = *(_DWORD **)v21;
            *(_QWORD *)v21 = 0;
            if (v23)
            {
              if (*v23 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, (WTF::StringImpl *)v12);
              else
                *v23 -= 2;
            }
            v21 = (WTF *)((char *)v21 + 8);
            v22 -= 8;
          }
          while (v22);
        }
        v19 = v52;
        if (v55 != (_BYTE *)v52 && v52 != 0)
        {
          v52 = 0;
          v53 = 0;
          WTF::fastFree(v19, v12);
        }
LABEL_76:
        v43 = v57;
        if (HIDWORD(v58))
        {
          v45 = 8 * HIDWORD(v58);
          do
          {
            v46 = *(_DWORD **)v43;
            *(_QWORD *)v43 = 0;
            if (v46)
            {
              if (*v46 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, (WTF::StringImpl *)v12);
              else
                *v46 -= 2;
            }
            v43 = (WTF *)((char *)v43 + 8);
            v45 -= 8;
          }
          while (v45);
          v43 = v57;
        }
        if (v59 != (_BYTE *)v43 && v43 != 0)
        {
          v57 = 0;
          LODWORD(v58) = 0;
          WTF::fastFree(v43, v12);
        }
        break;
      case 0x354u:
        if (!WebCore::CSSPropertyParserHelpers::consumeNumbersOrPercents(&v60, (uint64_t)&v57))
          goto LABEL_75;
        goto LABEL_20;
      case 0x358u:
      case 0x359u:
      case 0x35Au:
        WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)&v60, *((unsigned __int8 *)a2 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v63);
        v13 = v63;
        if (!v63)
          goto LABEL_75;
        if (v10 != 856)
          goto LABEL_7;
        v24 = v60;
        v25 = v60;
        if (v60 >= v61)
        {
          v25 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        if ((*(_DWORD *)v25 & 0x3F) != 0x15)
          goto LABEL_7;
        if (v60 == v61)
        {
          v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v26 = 1;
          {
            v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
          }
        }
        else
        {
          v24 = (__int128 *)((char *)v60 + 24);
          v60 = (__int128 *)((char *)v60 + 24);
          v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        while (1)
        {
          if (v24 < v61 || (v26 & 1) != 0)
          {
            v28 = v24 >= v61 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v24;
            v29 = *(_DWORD *)v28;
          }
          else
          {
            v27 = v27 & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
            v26 = 1;
            LOBYTE(v29) = v27;
          }
          if ((v29 & 0x3F) != 0x10)
            break;
          v24 = (__int128 *)((char *)v24 + 24);
          v60 = v24;
        }
        v63 = 0;
        v30 = HIDWORD(v58);
        v62 = 0;
        *((_QWORD *)v57 + HIDWORD(v58)) = v13;
        HIDWORD(v58) = v30 + 1;
        v31 = v62;
        v62 = 0;
        if (v31)
        {
          if (*v31 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, (WTF::StringImpl *)v12);
          else
            *v31 -= 2;
        }
        WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)&v60, *((unsigned __int8 *)a2 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v62);
        v13 = v62;
        v32 = v63;
        v62 = 0;
        v63 = v13;
        if (!v32)
          goto LABEL_54;
        v33 = *v32 - 2;
        if (*v32 != 2)
          goto LABEL_52;
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, (WTF::StringImpl *)v12);
        v32 = v62;
        v62 = 0;
        if (v32)
        {
          v33 = *v32 - 2;
          if (*v32 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, (WTF::StringImpl *)v12);
          else
LABEL_52:
            *v32 = v33;
        }
        v13 = v63;
LABEL_54:
        if (!v13)
          goto LABEL_75;
        if ((v13[1] & 0x7F) != 0x49 && *((double *)v13 + 1) == 0.0)
        {
          v63 = 0;
          if (*v13 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, (WTF::StringImpl *)v12);
LABEL_103:
            v13 = v63;
          }
          else
          {
            *v13 -= 2;
            v13 = 0;
          }
        }
LABEL_7:
        if (!v13)
          goto LABEL_20;
        goto LABEL_15;
      case 0x35Bu:
        WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)&v60, *((unsigned __int8 *)a2 + 48), 0, 1, &v63);
        goto LABEL_103;
      case 0x35Cu:
        if (!WebCore::CSSPropertyParserHelpers::consumeTranslate3d(&v60, *((unsigned __int8 *)a2 + 48), (uint64_t)&v57))
          goto LABEL_75;
        goto LABEL_20;
      default:
        goto LABEL_107;
    }
  }
}

uint64_t WebCore::CSSPropertyParser::consumeBackgroundShorthand(WebCore::CSSParserTokenRange **this, uint64_t a2, const WebCore::CSSParserContext *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unsigned int v10;
  __int128 *v11;
  __int128 *v12;
  int *v13;
  __int128 *v14;
  WebCore::CSSParserTokenRange *v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int **v31;
  int *v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;
  __int128 *v41;
  int *v42;
  int *v43;
  int *v44;
  __int128 *v45;
  int *v46;
  int *v47;
  int v48;
  int *v49;
  int *v50;
  int *v51;
  int *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t (*v57)();
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  WebCore::CSSParserTokenRange *v65;
  __int128 *v66;
  char v67;
  unsigned int v68;
  int *v69;
  int *v70;
  _QWORD *v71;
  WTF::StringImpl *v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;
  int v77;
  int *v78;
  int *v79;
  int v80;
  unsigned __int16 v81;
  uint64_t v82;
  _BOOL4 v83;
  char v84;
  int *v85;
  int v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE v89[32];
  int *v90[2];
  char v91;
  __int128 v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  _QWORD v96[2];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  uint64_t v106;
  uint64_t v107;

  v86 = (int)a3;
  v3 = a2;
  v107 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(a2 + 8);
  if (*(_WORD *)(a2 + 12) == 509)
  {
    WebCore::maskBorderShorthand((WebCore *)this);
    v5 = (v5 - a2);
  }
  v96[0] = v97;
  v96[1] = 4;
  v97[4] = v98;
  v97[5] = 4;
  v98[4] = v99;
  v98[5] = 4;
  v99[4] = v100;
  v99[5] = 4;
  v100[4] = v101;
  v100[5] = 4;
  v101[4] = v102;
  v101[5] = 4;
  v102[4] = v103;
  v102[5] = 4;
  v103[4] = v104;
  v103[5] = 4;
  v104[4] = v105;
  v104[5] = 4;
  v105[4] = &v106;
  v6 = &v107;
  v105[5] = 4;
  if ((_DWORD)v5)
  {
    v7 = v5;
    v82 = v5 - 1;
LABEL_5:
    v8 = 0;
    v83 = 0;
    v84 = 0;
    v9 = 0;
    v95 = 0;
    v94 = 0;
    while (1)
    {
      if (*((_BYTE *)&v94 + v8))
        goto LABEL_18;
      v10 = *(unsigned __int16 *)(*(_QWORD *)v3 + 2 * v8);
      if (v10 > 0xA9)
      {
        if (v10 != 335)
        {
          if (v10 == 336)
            goto LABEL_18;
          if (v10 == 170)
          {
            v76 = v9;
            v77 = WebCore::CSSPropertyParserHelpers::consumeSlashIncludingWhitespace((__int128 **)this, (WebCore::CSSParserTokenRange *)a2);
            if ((v77 & v83) != 1)
            {
              v9 = v76;
              if ((v77 & 1) != 0)
                goto LABEL_155;
              goto LABEL_18;
            }
            WebCore::CSSPropertyParserHelpers::consumeSingleMaskSize((WebCore::CSSPropertyParserHelpers *)this, this[2], v90);
LABEL_201:
            v16 = v90[0];
            if (!v90[0])
            {
              v9 = v76;
LABEL_155:
              if (v9)
              {
                if (*v9 != 2)
                {
                  v5 = 0;
                  *v9 -= 2;
                  goto LABEL_71;
                }
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, (WTF::StringImpl *)a2);
              }
              goto LABEL_159;
            }
            v52 = 0;
            v9 = v76;
LABEL_125:
            *((_BYTE *)&v94 + v8) = 1;
            v53 = &v96[6 * v8];
            v90[0] = v16;
            v54 = *((unsigned int *)v53 + 3);
            if ((_DWORD)v54 == *((_DWORD *)v53 + 2))
            {
              v74 = v9;
              v75 = v52;
              WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)v53, (unint64_t)v90);
              v52 = v75;
              v9 = v74;
            }
            else
            {
              v55 = *v53;
              v90[0] = 0;
              *(_QWORD *)(v55 + 8 * v54) = v16;
              *((_DWORD *)v53 + 3) = v54 + 1;
            }
            v56 = v90[0];
            v90[0] = 0;
            if (v56)
            {
              if (*v56 == 2)
              {
                v85 = v9;
                v69 = v52;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, (WTF::StringImpl *)a2);
                v52 = v69;
                v9 = v85;
              }
              else
              {
                *v56 -= 2;
              }
            }
            v57 = WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>::unspecifiedBoolTypeInstance;
            if (!v52)
              v57 = 0;
            v83 = v57 != 0;
            v84 = 1;
            if (v52)
            {
              *((_BYTE *)&v94 + v8 + 1) = 1;
              v58 = &v96[6 * v8 + 6];
              v90[0] = v52;
              v59 = *((unsigned int *)v58 + 3);
              if ((_DWORD)v59 == *((_DWORD *)v58 + 2))
              {
                v79 = v9;
                WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)v58, (unint64_t)v90);
                v9 = v79;
              }
              else
              {
                v60 = *v58;
                v90[0] = 0;
                *(_QWORD *)(v60 + 8 * v59) = v52;
                *((_DWORD *)v58 + 3) = v59 + 1;
              }
              v61 = v90[0];
              v90[0] = 0;
              if (v61)
              {
                if (*v61 == 2)
                {
                  v78 = v9;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, (WTF::StringImpl *)a2);
                  v9 = v78;
                }
                else
                {
                  *v61 -= 2;
                }
              }
              v84 = 1;
            }
            goto LABEL_18;
          }
          goto LABEL_24;
        }
      }
      else if (v10 != 63)
      {
        if (v10 == 64)
          goto LABEL_18;
        if (v10 == 66)
        {
          v12 = (__int128 *)*this;
          v11 = (__int128 *)this[1];
          if (*this >= (WebCore::CSSParserTokenRange *)v11)
          {
            v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            {
              *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
              *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            }
          }
          if ((*(_DWORD *)v12 & 0x3F) == 6 && *((_WORD *)v12 + 8) == 47)
          {
            v65 = *this;
            if (*this == (WebCore::CSSParserTokenRange *)v11)
            {
              v67 = 1;
              {
                v66 = v11;
              }
              else
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                v66 = (__int128 *)*this;
              }
            }
            else
            {
              v66 = (__int128 *)((char *)v65 + 24);
              *this = (WebCore::CSSParserTokenRange *)((char *)v65 + 24);
            }
            while (1)
            {
              if (v66 < v11 || (v67 & 1) != 0)
              {
                if (v66 >= v11)
                  v66 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                v68 = *(_DWORD *)v66;
              }
              else
              {
                v68 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v68;
                v67 = 1;
              }
              if ((v68 & 0x3F) != 0x10)
                break;
              v66 = (__int128 *)((char *)*this + 24);
              *this = (WebCore::CSSParserTokenRange *)v66;
            }
            if (!v83)
              goto LABEL_155;
            v76 = v9;
            WebCore::CSSPropertyParserHelpers::consumeSingleBackgroundSize((WebCore::CSSPropertyParserHelpers *)this, this[2], v90);
            goto LABEL_201;
          }
          goto LABEL_18;
        }
LABEL_24:
        a2 = (uint64_t)this[2];
        if (*(unsigned __int16 *)(*(_QWORD *)v3 + 2 * v8) <= 0xA8u)
        {
          switch(*(_WORD *)(*(_QWORD *)v3 + 2 * v8))
          {
            case ';':
              v45 = (__int128 *)*this;
              if (*this >= this[1])
              {
                v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                {
                  *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                  *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                }
              }
              if ((*(_DWORD *)v45 & 0x3F) != 0)
              {
                v42 = 0;
                goto LABEL_32;
              }
              v48 = *((_DWORD *)v45 + 4);
              if (v48 < 0)
              {
                v50 = v9;
                v48 = WebCore::cssValueKeywordID(*((_QWORD *)v45 + 1), *((unsigned int *)v45 + 1) | ((unint64_t)((*(_DWORD *)v45 >> 22) & 1) << 32));
                v9 = v50;
                *((_DWORD *)v45 + 4) = v48;
              }
              v42 = 0;
              if ((unsigned __int16)v48 - 458 <= 0x1F && ((1 << (v48 + 54)) & 0x80020001) != 0)
                goto LABEL_117;
              goto LABEL_32;
            case '<':
              v44 = v9;
              WebCore::CSSPropertyParsing::consumeSingleBackgroundBlendMode((uint64_t)this, (int **)&v92);
              goto LABEL_28;
            case '=':
              v93 = 1792;
              v46 = v9;
              WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)this, a2, &v93, v90);
              v9 = v46;
              v16 = v90[0];
              goto LABEL_30;
            case '>':
              v44 = v9;
              WebCore::CSSPropertyParsing::consumeSingleBackgroundImage((__int128 **)this, (WebCore::CSSParserTokenRange *)a2, (WTF::StringImpl *)&v92);
              goto LABEL_28;
            case '?':
            case '@':
              goto LABEL_18;
            case 'A':
              v44 = v9;
              WebCore::CSSPropertyParserHelpers::consumeRepeatStyle((__int128 **)this, (uint64_t *)&v92);
              goto LABEL_28;
            default:
              v43 = v9;
              if (v10 == 167)
              {
                WebCore::CSSPropertyParsing::consumeSingleMaskImage((__int128 **)this, (WebCore::CSSParserTokenRange *)a2, (WTF::StringImpl *)&v92);
              }
              else
              {
                if (v10 != 168)
                  goto LABEL_18;
                WebCore::CSSPropertyParsing::consumeSingleMaskOrigin((uint64_t)this, (int **)&v92);
              }
              break;
          }
          goto LABEL_93;
        }
        if (*(unsigned __int16 *)(*(_QWORD *)v3 + 2 * v8) <= 0x160u)
        {
          v43 = v9;
          if (v10 == 352)
          {
            WebCore::CSSPropertyParsing::consumeSingleBackgroundClip((uint64_t)this, (int **)&v92);
          }
          else
          {
            if (v10 != 169)
              goto LABEL_18;
            WebCore::CSSPropertyParsing::consumeSingleMaskRepeat((uint64_t *)&v92, (WebCore::CSSPropertyParsing *)this, (WebCore::CSSParserTokenRange *)a2, a3);
          }
LABEL_93:
          v9 = v43;
LABEL_29:
          v16 = (int *)v92;
LABEL_30:
          if (v16)
          {
            v52 = 0;
LABEL_119:
            if (v10 == 353 || v10 == 168)
            {
              *v16 += 2;
              if (v9)
              {
                if (*v9 == 2)
                {
                  v70 = v52;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, (WTF::StringImpl *)a2);
                  v52 = v70;
                }
                else
                {
                  *v9 -= 2;
                }
              }
              v9 = v16;
            }
            goto LABEL_125;
          }
          goto LABEL_18;
        }
        if (*(unsigned __int16 *)(*(_QWORD *)v3 + 2 * v8) > 0x198u)
        {
          if (*(unsigned __int16 *)(*(_QWORD *)v3 + 2 * v8) <= 0x1C3u)
          {
            v43 = v9;
            if (v10 == 409)
            {
              WebCore::CSSPropertyParsing::consumeSingleMaskComposite((uint64_t)this, (int **)&v92);
            }
            else
            {
              if (v10 != 410)
                goto LABEL_18;
              WebCore::CSSPropertyParsing::consumeSingleMaskMode((uint64_t)this, (int **)&v92);
            }
            goto LABEL_93;
          }
          switch(*(_WORD *)(*(_QWORD *)v3 + 2 * v8))
          {
            case 0x1C4:
            case 0x1C7:
              v44 = v9;
              WebCore::CSSPropertyParsing::consumeSingleWebkitBackgroundClip((uint64_t)this, (int **)&v92);
              break;
            case 0x1C5:
              v44 = v9;
              WebCore::CSSPropertyParsing::consumeSingleMaskOrigin((uint64_t)this, (int **)&v92);
              break;
            case 0x1C6:
              goto LABEL_18;
            case 0x1C8:
              v44 = v9;
              WebCore::CSSPropertyParsing::consumeSingleWebkitMaskComposite((uint64_t)this, (int **)&v92);
              break;
            case 0x1C9:
              v44 = v9;
              WebCore::CSSPropertyParsing::consumeSingleWebkitMaskSourceType((uint64_t)this, (int **)&v92);
              break;
            default:
              if (v10 != 541)
                goto LABEL_18;
              v44 = v9;
              WebCore::CSSPropertyParserHelpers::consumeBackgroundSize<(WebCore::CSSPropertyID)541>((__int128 **)this, (WebCore::CSSParserTokenRange *)*(unsigned __int8 *)(a2 + 48), &v92);
              break;
          }
        }
        else
        {
          if (v10 == 353)
          {
            v41 = (__int128 *)*this;
            if (*this >= this[1])
            {
              v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              }
            }
            if ((*(_DWORD *)v41 & 0x3F) != 0)
            {
              v42 = 0;
            }
            else
            {
              v48 = *((_DWORD *)v41 + 4);
              if (v48 < 0)
              {
                v49 = v9;
                v48 = WebCore::cssValueKeywordID(*((_QWORD *)v41 + 1), *((unsigned int *)v41 + 1) | ((unint64_t)((*(_DWORD *)v41 >> 22) & 1) << 32));
                v9 = v49;
                *((_DWORD *)v41 + 4) = v48;
              }
              v42 = 0;
              if ((unsigned __int16)v48 - 598 <= 4 && ((1 << (v48 - 86)) & 0x15) != 0)
              {
LABEL_117:
                v81 = v48;
                v51 = v9;
                WebCore::CSSParserTokenRange::consumeIncludingWhitespace((__int128 **)this);
                v9 = v51;
                v42 = &WebCore::staticCSSValuePool[4 * v81 + 3088];
                *v42 += 2;
              }
            }
LABEL_32:
            *(_QWORD *)&v92 = v42;
            goto LABEL_29;
          }
          if (v10 != 408)
            goto LABEL_18;
          v44 = v9;
          WebCore::CSSPropertyParsing::consumeSingleMaskClip((uint64_t)this, (int **)&v92);
        }
LABEL_28:
        v9 = v44;
        goto LABEL_29;
      }
      v13 = v9;
      v92 = *(_OWORD *)this;
      WebCore::CSSPropertyParserHelpers::consumePositionCoordinates((uint64_t *)&v92, *((unsigned __int8 *)this[2] + 48), 1, 1, 0, (uint64_t)v90);
      if (!v91)
        goto LABEL_17;
      v16 = v90[0];
      v52 = v90[1];
      *(_OWORD *)this = v92;
      if (v16)
      {
        v9 = v13;
        goto LABEL_119;
      }
      if (!v52)
        goto LABEL_17;
      if (*v52 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, (WTF::StringImpl *)a2);
LABEL_17:
        v9 = v13;
        goto LABEL_18;
      }
      v9 = v13;
      *v52 -= 2;
LABEL_18:
      if (++v8 == v7)
      {
        if ((v84 & 1) == 0)
          goto LABEL_155;
        v14 = (__int128 *)*this;
        v15 = this[1];
        if (*this == v15)
          goto LABEL_33;
        if (*this >= v15)
        {
          v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
        }
        v8 = 0;
        v84 = 0;
        if ((*(_DWORD *)v14 & 0x3F) == 0x15)
        {
LABEL_33:
          v17 = 0;
          while (1)
          {
            v18 = &v96[6 * v17];
            v19 = v17;
            while (1)
            {
              v20 = *(unsigned __int16 *)(*(_QWORD *)v3 + 2 * v19);
              if (v20 > 0x197)
                break;
              if (v20 == 352)
                goto LABEL_43;
              if (v20 == 61 && *this != this[1])
              {
                if (*((_BYTE *)&v94 + v19))
                  goto LABEL_155;
                goto LABEL_52;
              }
LABEL_48:
              if (!*((_BYTE *)&v94 + v19))
              {
                WebCore::staticCSSValuePool[0] += 2;
                v90[0] = WebCore::staticCSSValuePool;
                v22 = *((unsigned int *)v18 + 3);
                if ((_DWORD)v22 == *((_DWORD *)v18 + 2))
                {
                  v73 = v9;
                  WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)v18, (uint64_t *)v90);
                  v9 = v73;
                }
                else
                {
                  v23 = *v18;
                  v90[0] = 0;
                  *(_QWORD *)(v23 + 8 * v22) = WebCore::staticCSSValuePool;
                  *((_DWORD *)v18 + 3) = v22 + 1;
                }
                v24 = v90[0];
                v90[0] = 0;
                if (v24)
                {
                  if (*v24 == 2)
                  {
                    v47 = v9;
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, (WTF::StringImpl *)a2);
                    v9 = v47;
                  }
                  else
                  {
                    *v24 -= 2;
                  }
                }
              }
LABEL_52:
              ++v19;
              v18 += 6;
              if (v7 == v19)
              {
                if (v9)
                {
                  if (*v9 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, (WTF::StringImpl *)a2);
                  else
                    *v9 -= 2;
                }
                goto LABEL_59;
              }
            }
            if (v20 != 408 && v20 != 455)
              goto LABEL_48;
LABEL_43:
            if (*((_BYTE *)&v94 + v19))
              v21 = 1;
            else
              v21 = v9 == 0;
            if (v21)
              goto LABEL_48;
            v90[0] = v9;
            v62 = *((unsigned int *)v18 + 3);
            if ((_DWORD)v62 == *((_DWORD *)v18 + 2))
            {
              WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>>((uint64_t)v18, (unint64_t)v90);
            }
            else
            {
              v63 = *v18;
              v90[0] = 0;
              *(_QWORD *)(v63 + 8 * v62) = v9;
              *((_DWORD *)v18 + 3) = v62 + 1;
            }
            v64 = v90[0];
            v90[0] = 0;
            if (v64)
            {
              if (*v64 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, (WTF::StringImpl *)a2);
              else
                *v64 -= 2;
            }
            v9 = 0;
            v17 = v19 + 1;
            if (v82 == v19)
            {
LABEL_59:
              if (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)this, (WebCore::CSSParserTokenRange *)a2))
              {
                goto LABEL_5;
              }
              if (*this == this[1])
              {
                v25 = 0;
                v26 = 2 * v7;
                v27 = v97;
                do
                {
                  v28 = *(unsigned __int16 *)(*(_QWORD *)v3 + v25);
                  v29 = *((unsigned int *)v27 - 1);
                  v30 = *(unsigned __int16 *)(v3 + 12);
                  if ((_DWORD)v29 == 1)
                  {
                    v31 = (int **)*(v27 - 2);
                    v32 = *v31;
                    *v31 = 0;
                    v90[0] = v32;
                    WebCore::CSSPropertyParser::addProperty((uint64_t)this, v28, v30, v90, v86, 0);
                    if (v90[0])
                    {
                      if (*v90[0] == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v90[0], (WTF::StringImpl *)a2);
                      else
                        *v90[0] -= 2;
                    }
                  }
                  else
                  {
                    v87 = v89;
                    v88 = 4;
                    v71 = (_QWORD *)*(v27 - 2);
                    if (v27 == v71)
                    {
                      memcpy(v89, v71, 8 * v29);
                    }
                    else
                    {
                      *(v27 - 2) = v27;
                      v87 = v71;
                      v80 = *((_DWORD *)v27 - 2);
                      *((_DWORD *)v27 - 2) = 4;
                      LODWORD(v88) = v80;
                    }
                    *((_DWORD *)v27 - 1) = 0;
                    HIDWORD(v88) = v29;
                    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v87, (uint64_t *)&v92);
                    v90[0] = (int *)v92;
                    WebCore::CSSPropertyParser::addProperty((uint64_t)this, v28, v30, v90, v86, 0);
                    if (v90[0])
                    {
                      if (*v90[0] == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v90[0], v72);
                      else
                        *v90[0] -= 2;
                    }
                    WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v87, v72);
                  }
                  v25 += 2;
                  v27 += 6;
                }
                while (v26 != v25);
                v5 = 1;
                goto LABEL_71;
              }
LABEL_159:
              v5 = 0;
              goto LABEL_71;
            }
          }
        }
      }
    }
  }
  do
  {
LABEL_71:
    v33 = v6 - 6;
    v34 = *((unsigned int *)v6 - 9);
    if ((_DWORD)v34)
    {
      v37 = (_DWORD **)*v33;
      v38 = 8 * v34;
      do
      {
        v39 = *v37;
        *v37 = 0;
        if (v39)
        {
          if (*v39 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, (WTF::StringImpl *)a2);
          else
            *v39 -= 2;
        }
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    v35 = (WTF *)*(v6 - 6);
    if (v6 - 4 != (uint64_t *)v35 && v35 != 0)
    {
      *(v6 - 6) = 0;
      *((_DWORD *)v6 - 10) = 0;
      WTF::fastFree(v35, (void *)a2);
    }
    v6 -= 6;
  }
  while (v33 != v96);
  return v5;
}

__int128 **WebCore::CSSPropertyParserHelpers::consumeImage@<X0>(WTF::StringImpl *__return_ptr a1@<X8>, __int128 **this@<X0>, uint64_t a3@<X1>, char a4@<W2>)
{
  __int128 **v5;
  char v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  char v19;
  unsigned int v20;
  __int128 *v21;
  unint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  __int128 v25;
  unsigned int v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  unsigned __int16 v30;
  _QWORD v31[2];
  unsigned int *v32[2];
  WTF::StringImpl *v33;
  _OWORD v34[3];
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v5 = this;
  v7 = a4;
  v35 = a4;
  v9 = *this;
  v8 = (unint64_t)this[1];
  if ((unint64_t)*this >= v8)
  {
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v9 & 0x3F) == 0x1C && (a4 & 2) != 0)
  {
    v21 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
    v22 = *((unsigned int *)v21 + 1) | ((unint64_t)((*(_DWORD *)v21 >> 22) & 1) << 32);
    *(_QWORD *)&v39 = *((_QWORD *)v21 + 1);
    *((_QWORD *)&v39 + 1) = v22;
    WTF::StringView::toAtomString((WTF::StringView *)&v39, v32);
    WebCore::CSSParserContext::completeURL((WebCore::CSSParserContext *)a3, v32, v34);
    v23 = (*(unsigned __int16 *)(a3 + 51) >> 2) & 1;
    v33 = 0;
    WebCore::CSSImageValue::create((uint64_t *)v34, v23, (uint64_t *)&v33, &v37);
    *(_QWORD *)a1 = v37;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v24);
      else
        *(_DWORD *)v33 -= 2;
    }
    WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)v34, v24);
    this = (__int128 **)v32[0];
    v32[0] = 0;
    if (!this)
      return this;
    goto LABEL_28;
  }
  v10 = *this;
  if ((unint64_t)*this >= v8)
  {
    v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v10 & 0x3F) != 1)
  {
LABEL_23:
    if ((v7 & 1) != 0)
    {
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeURLRaw(v5, (WebCore::CSSParserTokenRange *)a3);
      if (this)
      {
        if ((v15 & 0xFF00000000) != 0)
          WTF::AtomStringImpl::add();
        else
          WTF::AtomStringImpl::add();
        WebCore::CSSParserContext::completeURL((WebCore::CSSParserContext *)a3, (unsigned int **)&v39, &v25);
        v16 = *(_BYTE *)(a3 + 51);
        v17 = WTF::fastCompactMalloc((WTF *)0x78);
        *(_DWORD *)v17 = 2;
        v19 = *(_BYTE *)(v17 + 6);
        *(_WORD *)(v17 + 4) = 2048;
        *(_BYTE *)(v17 + 6) = v19 & 0xFC;
        *(_OWORD *)(v17 + 8) = v25;
        v20 = v26;
        *(_DWORD *)(v17 + 24) = v26;
        *(_OWORD *)(v17 + 28) = v27;
        *(_QWORD *)(v17 + 44) = v28;
        *(_DWORD *)(v17 + 52) = v29;
        v26 = v20 & 0xFFFFFFFE;
        *(_BYTE *)(v17 + 56) = 0;
        *(_BYTE *)(v17 + 64) = 0;
        *(_QWORD *)(v17 + 72) = 0;
        *(_BYTE *)(v17 + 80) = (v16 & 4) != 0;
        *(_QWORD *)(v17 + 88) = 0;
        *(_BYTE *)(v17 + 96) = 0;
        *(_QWORD *)(v17 + 104) = 0;
        *(_BYTE *)(v17 + 112) = 0;
        *(_QWORD *)a1 = v17;
        v25 = 0uLL;
        this = (__int128 **)v39;
        *(_QWORD *)&v39 = 0;
        if (!this)
          return this;
LABEL_28:
        v14 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
          return (__int128 **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v18);
        goto LABEL_13;
      }
    }
LABEL_8:
    *(_QWORD *)a1 = 0;
    return this;
  }
  v32[0] = (unsigned int *)&v35;
  v32[1] = (unsigned int *)this;
  v31[0] = &v35;
  v31[1] = this;
  v30 = 0;
  v11 = *this;
  if ((unint64_t)*v5 >= v8)
  {
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  this = (__int128 **)WebCore::CSSParserToken::functionId((int *)v11);
  v30 = (unsigned __int16)this;
  if ((_DWORD)this == 760)
  {
    if ((v35 & 8) != 0)
    {
      v39 = *(_OWORD *)v5;
      v37 = WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)&v39, (WebCore::CSSParserTokenRange *)a3);
      v38 = v12;
      WebCore::CSSPropertyParserHelpers::consumeLinearGradient(&v36, (WebCore::CSSPropertyParserHelpers *)&v37, a3, 0);
      this = (__int128 **)v36;
      if (v36)
      {
        if (v37 == v38)
        {
          *(_OWORD *)v5 = v39;
          *(_QWORD *)a1 = this;
          return this;
        }
        *(_QWORD *)a1 = 0;
        v14 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this == 2)
          return (__int128 **)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v13);
LABEL_13:
        *(_DWORD *)this = v14;
        return this;
      }
    }
    goto LABEL_8;
  }
  switch((int)this)
  {
    case 758:
    case 767:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_13>(a1, (WebCore::CSSParserTokenRange *)v32, a3, &v30);
      break;
    case 759:
    case 773:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_1::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_19>(a1, (WebCore::CSSParserTokenRange *)v31);
      break;
    case 761:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_2>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 762:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_11>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 763:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_6>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 764:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_3>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 765:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_12>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 766:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_15>((unint64_t)a1, (WebCore::CSSParserTokenRange *)v32);
      break;
    case 768:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_8>((unint64_t)a1, (WebCore::CSSParserTokenRange *)v32, (const WebCore::CSSParserContext *)a3);
      break;
    case 769:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_4>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 770:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_9>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 771:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_5>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 772:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_10>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    case 774:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_16>((unint64_t)a1, (WebCore::CSSParserTokenRange *)v32);
      break;
    case 775:
    case 776:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_17>((uint64_t)a1, (WebCore::CSSParserTokenRange *)v32, (unsigned __int8 *)a3);
      break;
    case 777:
      this = (__int128 **)WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_0::operator()<WebCore::CSSPropertyParserHelpers::consumeImage(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WTF::OptionSet<WebCore::CSSPropertyParserHelpers::AllowedImageType>)::$_18>(a1, (WebCore::CSSParserTokenRange *)v32, a3);
      break;
    default:
      v7 = v35;
      goto LABEL_23;
  }
  return this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeURLRaw(__int128 **this, WebCore::CSSParserTokenRange *a2)
{
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  char v15;
  __int128 *v16;
  int v17;
  __int128 *v18;
  __int128 *v19;
  char v20;
  __int128 *v21;
  int v22;
  int v23;
  int v24;
  __int128 *v25;
  __int128 *v26;
  unsigned int v27;
  __int128 *v28;
  unsigned int v29;
  __int128 *v30;
  unsigned int v31;

  v3 = *this;
  v4 = this[1];
  if (v3 >= v4)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v3 & 0x3F) == 4)
  {
    v5 = *this;
    if (*this == v4)
    {
      v7 = 1;
      {
        v6 = v4;
      }
      else
      {
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        v6 = *this;
      }
    }
    else
    {
      v6 = (__int128 *)((char *)v5 + 24);
      *this = (__int128 *)((char *)v5 + 24);
    }
    while (1)
    {
      if (v6 < v4 || (v7 & 1) != 0)
      {
        if (v6 >= v4)
          v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v8 = *(_DWORD *)v6;
      }
      else
      {
        v8 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v8;
        v7 = 1;
      }
      if ((v8 & 0x3F) != 0x10)
        break;
      v6 = (__int128 *)((char *)*this + 24);
      *this = v6;
    }
    return *((_QWORD *)v3 + 1);
  }
  if (WebCore::CSSParserToken::functionId((int *)v3) != 817)
    return 0;
  v12 = *this;
  v11 = this[1];
  v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  if (*this >= v11)
    v15 = 1;
  else
  if (*this >= v11)
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  else
    v16 = *this;
  {
    v14 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
    v13 = 1;
    v15 = 1;
    v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  v17 = 0;
  v18 = (__int128 *)((char *)v16 + 24);
  v19 = v12;
  v20 = v15;
  while (1)
  {
    if (v19 == v11)
    {
      v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v20 & 1) != 0)
      {
        v21 = v11;
      }
      else
      {
        v14 = v14 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
        v15 = 1;
        v21 = v12;
      }
      v20 = 1;
    }
    else
    {
      v12 = (__int128 *)((char *)v19 + 24);
      v21 = (__int128 *)((char *)v19 + 24);
    }
    v22 = *(_DWORD *)v19 >> 6;
    v23 = v22 == 2 ? -1 : 0;
    v24 = v22 == 1 ? 1 : v23;
    v17 += v24;
    if (!v17)
      break;
    v19 = v21;
    if (v21 >= v11)
      goto LABEL_40;
  }
  v21 = (__int128 *)((char *)v21 - 24);
LABEL_40:
  if ((v15 & 1) == 0)
  {
    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    v13 = 1;
  }
  if (v18 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v3 = v11;
  else
    v3 = v18;
  if (v21 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
    v25 = v11;
  else
    v25 = v21;
  if (v3 == v25)
  {
    v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    if ((v13 & 1) == 0)
    {
      v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v27;
    }
    v13 = 1;
    v26 = v3;
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v26 = (__int128 *)((char *)v3 + 24);
    v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  do
  {
    if (v26 < v25 || (v13 & 1) != 0)
    {
      if (v26 >= v25)
        v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v28 = v26;
      v29 = *(_DWORD *)v28;
    }
    else
    {
      v29 = v27 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
      v13 = 1;
      v27 = v29;
    }
    v26 = (__int128 *)((char *)v26 + 24);
  }
  while ((v29 & 0x3F) == 0x10);
  if ((__int128 *)((char *)v26 - 24) != v25)
    return 0;
  v9 = 0;
  if ((*(_DWORD *)v3 & 0x3F) != 0x1D)
  {
    *this = v12;
    this[1] = v11;
    while (1)
    {
      if (v12 < v11 || (v13 & 1) != 0)
      {
        v30 = v12 >= v11 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v12;
        v31 = *(_DWORD *)v30;
      }
      else
      {
        v31 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v31;
        v13 = 1;
      }
      if ((v31 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)((char *)*this + 24);
      *this = v12;
    }
    return *((_QWORD *)v3 + 1);
  }
  return v9;
}

int *WebCore::CSSParserToken::functionId(int *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t __n;
  unsigned __int8 v60;
  _BYTE v61[6];
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  if ((*this & 0x3F) != 1)
  {
    LOWORD(this) = 0;
    return (int *)(unsigned __int16)this;
  }
  v2 = (uint64_t)this;
  LODWORD(this) = this[4];
  if ((this & 0x80000000) != 0)
  {
    v3 = *(unsigned int *)(v2 + 4);
    if ((v3 - 55) < 0xFFFFFFCA)
      goto LABEL_82;
    v4 = *(_QWORD *)(v2 + 8);
    if ((v1 & 0x400000) == 0)
    {
      v33 = 0;
      while (1)
      {
        if (v3 == v33)
          goto LABEL_83;
        v34 = *(unsigned __int16 *)(v4 + 2 * v33);
        if ((v34 - 1) > 0x7E)
          goto LABEL_82;
        v61[v33++ - 1] = v34 | (32 * ((v34 - 65) < 0x1A));
        if (v3 == v33)
        {
          if (v60 == 45)
            goto LABEL_84;
          goto LABEL_80;
        }
      }
    }
    v5 = 0;
    v6 = MEMORY[0x1E0CBF868];
    while (v3 != v5)
    {
      if (*(char *)(v4 + v5) < 1)
        goto LABEL_82;
      v61[v5 - 1] = *(_BYTE *)(v6 + *(unsigned __int8 *)(v4 + v5));
      if (v3 == ++v5)
      {
        v7 = v60;
        if (v60 != 45)
          goto LABEL_10;
        __n = v60;
        if (v3 < 7
          || (*(_DWORD *)v61 == *(_DWORD *)"apple-"
            ? (v39 = *(unsigned __int16 *)&v61[4] == *(unsigned __int16 *)"e-")
            : (v39 = 0),
              !v39))
        {
LABEL_107:
          v7 = v60;
          goto LABEL_11;
        }
        v40 = v3 - 7;
        if (v3 - 7 < 6)
        {
          if (v40 < 3)
            goto LABEL_121;
        }
        else if ((_DWORD)v62 == *(_DWORD *)"system" && WORD2(v62) == *(unsigned __int16 *)"em")
        {
          goto LABEL_107;
        }
        v42 = (unsigned __int16)v62 == *(unsigned __int16 *)"pay" && BYTE2(v62) == str_29_15[2];
        if (v42 || v40 >= 8 && v62 == *(_QWORD *)"wireless")
          goto LABEL_107;
LABEL_121:
        memmove(&v62, &v61[5], v3 - 6);
        qmemcpy(v61, "webkit", sizeof(v61));
        ++v3;
        v7 = __n;
LABEL_10:
        if (v3 >= 0x38)
          goto LABEL_83;
LABEL_11:
        if ((v3 - 1) <= 0x35)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          v8 = 0;
          v9 = 0;
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = 0;
          switch((int)v3)
          {
            case 1:
              goto LABEL_17;
            case 2:
              goto LABEL_16;
            case 3:
              goto LABEL_15;
            case 4:
              goto LABEL_14;
            case 5:
              goto LABEL_13;
            case 6:
              goto LABEL_74;
            case 7:
              goto LABEL_73;
            case 8:
              goto LABEL_72;
            case 9:
              goto LABEL_71;
            case 10:
              goto LABEL_70;
            case 11:
              goto LABEL_69;
            case 12:
              goto LABEL_68;
            case 13:
              goto LABEL_67;
            case 14:
              goto LABEL_66;
            case 15:
              goto LABEL_65;
            case 16:
              goto LABEL_64;
            case 17:
              goto LABEL_63;
            case 18:
              goto LABEL_62;
            case 19:
              goto LABEL_61;
            case 20:
              goto LABEL_60;
            case 21:
              goto LABEL_59;
            case 22:
              goto LABEL_58;
            case 23:
              goto LABEL_57;
            case 24:
              goto LABEL_56;
            case 25:
              goto LABEL_55;
            case 26:
              goto LABEL_54;
            case 27:
              goto LABEL_53;
            case 28:
              goto LABEL_52;
            case 29:
              goto LABEL_51;
            case 30:
              goto LABEL_50;
            case 31:
              goto LABEL_49;
            case 32:
              goto LABEL_48;
            case 33:
              goto LABEL_47;
            case 34:
              goto LABEL_46;
            case 35:
              goto LABEL_45;
            case 36:
              goto LABEL_44;
            case 37:
              goto LABEL_43;
            case 38:
              goto LABEL_42;
            case 39:
              goto LABEL_41;
            case 40:
              goto LABEL_40;
            case 41:
              goto LABEL_39;
            case 42:
              goto LABEL_38;
            case 43:
              goto LABEL_37;
            case 44:
              goto LABEL_36;
            case 45:
              goto LABEL_35;
            case 46:
              goto LABEL_34;
            case 47:
              goto LABEL_33;
            case 48:
              goto LABEL_32;
            case 49:
              goto LABEL_31;
            case 50:
              goto LABEL_30;
            case 51:
              goto LABEL_29;
            case 52:
              goto LABEL_28;
            case 53:
              goto LABEL_27;
            default:
              LODWORD(v43) = WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v101];
LABEL_27:
              HIDWORD(v43) = v43 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v100];
LABEL_28:
              LODWORD(v44) = HIDWORD(v43)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v99];
LABEL_29:
              HIDWORD(v44) = v44 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v98];
LABEL_30:
              LODWORD(v45) = HIDWORD(v44)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v97];
LABEL_31:
              HIDWORD(v45) = v45 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v96];
LABEL_32:
              LODWORD(v46) = HIDWORD(v45)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v95];
LABEL_33:
              HIDWORD(v46) = v46 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v94];
LABEL_34:
              LODWORD(v47) = HIDWORD(v46)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v93];
LABEL_35:
              HIDWORD(v47) = v47 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v92];
LABEL_36:
              LODWORD(v48) = HIDWORD(v47)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v91];
LABEL_37:
              HIDWORD(v48) = v48 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v90];
LABEL_38:
              LODWORD(v49) = HIDWORD(v48)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v89];
LABEL_39:
              HIDWORD(v49) = v49 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v88];
LABEL_40:
              LODWORD(v50) = HIDWORD(v49)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v87];
LABEL_41:
              HIDWORD(v50) = v50 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v86];
LABEL_42:
              LODWORD(v51) = HIDWORD(v50)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v85];
LABEL_43:
              HIDWORD(v51) = v51 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v84];
LABEL_44:
              LODWORD(v52) = HIDWORD(v51)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v83];
LABEL_45:
              HIDWORD(v52) = v52 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v82];
LABEL_46:
              LODWORD(v53) = HIDWORD(v52)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v81];
LABEL_47:
              HIDWORD(v53) = v53 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v80];
LABEL_48:
              LODWORD(v54) = HIDWORD(v53)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v79];
LABEL_49:
              HIDWORD(v54) = v54 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v78];
LABEL_50:
              LODWORD(v55) = HIDWORD(v54)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v77];
LABEL_51:
              HIDWORD(v55) = v55 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v76];
LABEL_52:
              LODWORD(v56) = HIDWORD(v55)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v75];
LABEL_53:
              HIDWORD(v56) = v56 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v74];
LABEL_54:
              LODWORD(v57) = HIDWORD(v56)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v73];
LABEL_55:
              HIDWORD(v57) = v57 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v72];
LABEL_56:
              LODWORD(v58) = HIDWORD(v57)
                           + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v71];
LABEL_57:
              HIDWORD(v58) = v58 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v70];
LABEL_58:
              v8 = HIDWORD(v58) + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v69];
LABEL_59:
              v9 = v8 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v68];
LABEL_60:
              v10 = v9 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v67];
LABEL_61:
              v11 = v10 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v66];
LABEL_62:
              v12 = v11 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v65];
LABEL_63:
              v13 = v12 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v64];
LABEL_64:
              v14 = v13 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v63];
LABEL_65:
              v15 = v14 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[HIBYTE(v62)];
LABEL_66:
              v16 = v15 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE6(v62)];
LABEL_67:
              v17 = v16 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE5(v62) + 1];
LABEL_68:
              v18 = v17 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE4(v62)];
LABEL_69:
              v19 = v18 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE3(v62) + 1];
LABEL_70:
              v20 = v19 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE2(v62)];
LABEL_71:
              v21 = v20 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE1(v62)];
LABEL_72:
              v22 = v21
                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v62];
LABEL_73:
              v23 = v22 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[5]];
LABEL_74:
              v24 = v23 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[4]];
LABEL_13:
              v25 = v24 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[3]];
LABEL_14:
              v26 = v25 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[2] + 5];
LABEL_15:
              v27 = v26 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[1]];
LABEL_16:
              v28 = v27 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v61[0]];
LABEL_17:
              v29 = v28 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v7 + 1];
              if (v29 > 0x66C4)
                goto LABEL_82;
              v30 = WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::lookup[v29];
              if (v30 < 0)
                goto LABEL_82;
              v31 = (unsigned __int16)v30;
              v32 = (&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * (unsigned __int16)v30];
              if ((_DWORD)v7 != *v32 || strncmp(v61, v32 + 1, (v3 - 1)) || v32[v3])
                goto LABEL_82;
              LODWORD(this) = LOWORD((&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * v31 + 1]);
              break;
          }
          goto LABEL_23;
        }
LABEL_82:
        LODWORD(this) = 0;
LABEL_23:
        *(_DWORD *)(v2 + 16) = (_DWORD)this;
        return (int *)(unsigned __int16)this;
      }
    }
    while (1)
    {
LABEL_83:
      __break(1u);
LABEL_84:
      if (v3 < 7
        || (*(_DWORD *)v61 == *(_DWORD *)"apple-"
          ? (v35 = *(unsigned __int16 *)&v61[4] == *(unsigned __int16 *)"e-")
          : (v35 = 0),
            !v35))
      {
LABEL_81:
        LODWORD(this) = WebCore::findCSSValueKeyword((const char *)&v60, v3);
        goto LABEL_23;
      }
      v36 = v3 - 7;
      if (v3 - 7 >= 6)
        break;
      if (v36 >= 3)
        goto LABEL_95;
LABEL_101:
      memmove(&v62, &v61[5], v3 - 6);
      qmemcpy(v61, "webkit", sizeof(v61));
      ++v3;
LABEL_80:
      if (v3 < 0x38)
        goto LABEL_81;
    }
    if ((_DWORD)v62 == *(_DWORD *)"system" && WORD2(v62) == *(unsigned __int16 *)"em")
      goto LABEL_81;
LABEL_95:
    v38 = (unsigned __int16)v62 == *(unsigned __int16 *)"pay" && BYTE2(v62) == str_29_15[2];
    if (v38 || v36 >= 8 && v62 == *(_QWORD *)"wireless")
      goto LABEL_81;
    goto LABEL_101;
  }
  return (int *)(unsigned __int16)this;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeRepeatStyle@<X0>(__int128 **this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t result;
  __int128 *v9;
  int v10;
  __int128 *v11;
  uint64_t *v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  int v16;
  __int16 v17;

  if ((WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)232>((uint64_t)this) & 0xFF0000) != 0)
  {
    v12 = a2;
    v13 = 231;
    v14 = 234;
  }
  else
  {
    v7 = *this;
    v6 = this[1];
    if (*this >= v6)
    {
      v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_BYTE *)v7 & 0x3F) != 0)
      goto LABEL_4;
    v9 = *this;
    if (*this >= v6)
    {
      v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v9 & 0x3F) != 0)
      goto LABEL_4;
    v10 = *((_DWORD *)v9 + 4);
    if (v10 < 0)
    {
      v10 = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
      *((_DWORD *)v9 + 4) = v10;
    }
    if ((unsigned __int16)v10 != 233)
    {
LABEL_4:
      result = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)231,(WebCore::CSSValueID)234,(WebCore::CSSValueID)596,(WebCore::CSSValueID)572>((uint64_t)this);
      if ((result & 0xFF0000) == 0)
      {
        *a2 = 0;
        return result;
      }
      v15 = result;
      v16 = WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)231,(WebCore::CSSValueID)234,(WebCore::CSSValueID)596,(WebCore::CSSValueID)572>((uint64_t)this);
      if ((v16 & 0xFF0000) != 0)
        v17 = v16;
      else
        v17 = v15;
      v14 = v17;
      v13 = v15;
      v12 = a2;
    }
    else
    {
      v11 = WebCore::CSSParserTokenRange::consumeIncludingWhitespace(this);
      WebCore::CSSParserToken::id((unsigned int *)v11);
      v12 = a2;
      v13 = 234;
      v14 = 231;
    }
  }
  return WebCore::CSSBackgroundRepeatValue::create(v13, v14, v12);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)231,(WebCore::CSSValueID)234,(WebCore::CSSValueID)596,(WebCore::CSSValueID)572>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
    return v6 | v5 | v7;
  }
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  v5 = 0;
  if ((unsigned __int16)v9 > 0x23Bu)
  {
    if ((unsigned __int16)v9 != 596)
    {
      v6 = 0;
      v7 = 0;
      if ((unsigned __int16)v9 != 572)
        return v6 | v5 | v7;
    }
  }
  else if ((unsigned __int16)v9 != 231)
  {
    v6 = 0;
    v7 = 0;
    if ((unsigned __int16)v9 != 234)
      return v6 | v5 | v7;
  }
  v11 = *(__int128 **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v10)
  {
    v13 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v12 = *(__int128 **)a1;
    v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v12 = (__int128 *)((char *)v11 + 24);
    *(_QWORD *)a1 = (char *)v11 + 24;
  }
  while (1)
  {
    if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
    {
      if ((unint64_t)v12 >= v10)
        v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v14 = *(_DWORD *)v12;
    }
    else
    {
      v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
      v13 = 1;
    }
    if ((v14 & 0x3F) != 0x10)
      break;
    v12 = (__int128 *)(*(_QWORD *)a1 + 24);
    *(_QWORD *)a1 = v12;
  }
  if ((*(_DWORD *)v11 & 0x3F) != 0)
  {
    LOWORD(v15) = 0;
  }
  else
  {
    v15 = *((_DWORD *)v11 + 4);
    if (v15 < 0)
    {
      v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
      *((_DWORD *)v11 + 4) = v15;
    }
  }
  v7 = v15 & 0xFF00;
  v5 = v15;
  v6 = 0x10000;
  return v6 | v5 | v7;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdentRaw<(WebCore::CSSValueID)232>(uint64_t a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  char v13;
  unsigned int v14;
  int v15;

  v3 = *(__int128 **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 >= v2)
  {
    v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v3 & 0x3F) != 0)
    goto LABEL_5;
  v4 = *(__int128 **)a1;
  if (*(_QWORD *)a1 >= v2)
  {
    v4 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v4 & 0x3F) != 0)
    goto LABEL_5;
  v9 = *((_DWORD *)v4 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v4 + 1), *((unsigned int *)v4 + 1) | ((unint64_t)((*(_DWORD *)v4 >> 22) & 1) << 32));
    *((_DWORD *)v4 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 232)
  {
LABEL_5:
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v11 = *(__int128 **)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v10)
    {
      v13 = 1;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
      v12 = *(__int128 **)a1;
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)((char *)v11 + 24);
      *(_QWORD *)a1 = (char *)v11 + 24;
    }
    while (1)
    {
      if ((unint64_t)v12 < v10 || (v13 & 1) != 0)
      {
        if ((unint64_t)v12 >= v10)
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v14 = *(_DWORD *)v12;
      }
      else
      {
        v14 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v14;
        v13 = 1;
      }
      if ((v14 & 0x3F) != 0x10)
        break;
      v12 = (__int128 *)(*(_QWORD *)a1 + 24);
      *(_QWORD *)a1 = v12;
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
      LOWORD(v15) = 0;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0)
      {
        v15 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
        *((_DWORD *)v11 + 4) = v15;
      }
    }
    v7 = v15 & 0xFF00;
    v5 = v15;
    v6 = 0x10000;
  }
  return v6 | v5 | v7;
}

uint64_t WebCore::CSSPropertyParsing::consumeSingleBackgroundClip@<X0>(uint64_t this@<X0>, int **a2@<X8>)
{
  __int128 **v3;
  __int128 *v5;
  int *v6;
  int v7;
  BOOL v8;

  v3 = (__int128 **)this;
  v5 = *(__int128 **)this;
  if (*(_QWORD *)this >= *(_QWORD *)(this + 8))
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v5 & 0x3F) != 0)
    goto LABEL_3;
  this = *((unsigned int *)v5 + 4);
  if ((this & 0x80000000) != 0)
  {
    this = WebCore::cssValueKeywordID(*((_QWORD *)v5 + 1), *((unsigned int *)v5 + 1) | ((unint64_t)((*(_DWORD *)v5 >> 22) & 1) << 32));
    *((_DWORD *)v5 + 4) = this;
  }
  v7 = (unsigned __int16)this;
  v8 = (unsigned __int16)this - 598 > 5 || ((1 << (this - 86)) & 0x35) == 0;
  if (v8 && (unsigned __int16)this != 403)
  {
LABEL_3:
    v6 = 0;
  }
  else
  {
    this = (uint64_t)WebCore::CSSParserTokenRange::consumeIncludingWhitespace(v3);
    v6 = &WebCore::staticCSSValuePool[4 * v7 + 3088];
    *v6 += 2;
  }
  *a2 = v6;
  return this;
}

__int128 **WebCore::CSSPropertyParsing::consumeSingleBackgroundImage@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, WTF::StringImpl *a3@<X8>)
{
  __int128 *v7;
  __int128 **result;
  int v9;

  v7 = *this;
  if (*this >= this[1])
  {
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  if ((*(_DWORD *)v7 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumeImage(a3, this, (uint64_t)a2, 13);
  v9 = *((_DWORD *)v7 + 4);
  if (v9 < 0)
  {
    v9 = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((*(_DWORD *)v7 >> 22) & 1) << 32));
    *((_DWORD *)v7 + 4) = v9;
  }
  if ((unsigned __int16)v9 != 6)
    return WebCore::CSSPropertyParserHelpers::consumeImage(a3, this, (uint64_t)a2, 13);
  result = (__int128 **)*this;
  if (*this == this[1])
  {
    {
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      result = (__int128 **)*this;
    }
  }
  else
  {
    result += 3;
    *this = (__int128 *)result;
  }
  while (1)
  {
    if (result >= (__int128 **)this[1])
    {
      result = (__int128 **)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        result = (__int128 **)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)result & 0x3F) != 0x10)
      break;
    result = (__int128 **)*this + 3;
    *this = (__int128 *)result;
  }
  dword_1ECE8BC48 += 2;
  *(_QWORD *)a3 = &WebCore::staticCSSValuePool[3112];
  return result;
}

WTF::StringImpl *WebCore::CSSParserContext::completeURL@<X0>(WebCore::CSSParserContext *this@<X0>, unsigned int **a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned int *v5;
  uint64_t v6;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[2];
  __int128 v15;
  __int128 v16;
  unsigned int *v17;

  v5 = *a2;
  if (!*a2)
  {
    v14[0] = 0;
    v14[1] = 0;
    WTF::URL::invalidate((WTF::URL *)&v14[1]);
    goto LABEL_10;
  }
  v6 = v5[1];
  v14[1] = (WTF::StringImpl *)(v6 | ((unint64_t)((v5[4] >> 2) & 1) << 32));
  if (!(_DWORD)v6)
    goto LABEL_5;
  v8 = WTF::StringView::startsWith();
  v5 = *a2;
  if (v8)
  {
    if (!v5)
    {
LABEL_6:
      v14[0] = (WTF::StringImpl *)v5;
      v17 = v5;
      MEMORY[0x19AEA52D4](&v14[1], &v17, 0);
      v10 = (WTF::StringImpl *)v17;
      v17 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      goto LABEL_10;
    }
LABEL_5:
    *v5 += 4;
    goto LABEL_6;
  }
  if (v5)
    *v5 += 2;
  v14[0] = (WTF::StringImpl *)v5;
  MEMORY[0x19AEA52F8](&v14[1], this, a2, 0);
LABEL_10:
  if (*((_BYTE *)this + 48) != 5 || WTF::URL::protocolIs())
  {
    v11 = v15;
    *a3 = *(_OWORD *)v14;
    a3[1] = v11;
    a3[2] = v16;
    LODWORD(v15) = v11 & 0xFFFFFFFE;
    v14[0] = 0;
    v14[1] = 0;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    WTF::URL::invalidate((WTF::URL *)((char *)a3 + 8));
    v13 = v14[1];
    v14[1] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  result = v14[0];
  if (v14[0])
  {
    if (*(_DWORD *)v14[0] == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v14[0], v9);
    else
      *(_DWORD *)v14[0] -= 2;
  }
  return result;
}

void WebCore::CSSPropertyParserHelpers::consumeLength(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned __int16 *v8;

  v7 = 0;
  v8 = 0;
  v5 = 0x100000000;
  if (!a4)
    v5 = 0;
  WebCore::CSSPropertyParserHelpers::MetaResolver<WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WebCore::CSSPropertyParserHelpers::CSSPrimitiveValueResolverBase,WebCore::LengthRaw>::consumeAndResolve(a1, &v8, (uint64_t)&v7, v5 | ((unint64_t)a3 << 8) | a2, a5);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), v6);
  if (v8)
    WTF::fastFree((WTF *)(v8 - 8), v6);
}

double WebCore::CSSFontFaceSrcResourceValue::create@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  double result;
  uint64_t v19;
  uint64_t v20;

  v10 = WTF::fastCompactMalloc((WTF *)0x70);
  *(_DWORD *)v10 = 2;
  v11 = (*(unsigned __int8 *)(v10 + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(v10 + 4) = 2048;
  *(_BYTE *)(v10 + 6) = BYTE2(v11);
  v12 = *a1;
  *a1 = 0;
  *(_QWORD *)(v10 + 8) = v12;
  v13 = a1[1];
  a1[1] = 0;
  *(_QWORD *)(v10 + 16) = v13;
  v14 = *(_DWORD *)(v10 + 24) & 0xFFFFFFFE | a1[2] & 1;
  *(_DWORD *)(v10 + 24) = v14;
  v15 = v14 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a1 + 4) >> 1) & 1));
  *(_DWORD *)(v10 + 24) = v15;
  v16 = v15 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a1 + 4) >> 2) & 1));
  *(_DWORD *)(v10 + 24) = v16;
  v17 = v16 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a1 + 4) >> 3) & 7));
  *(_DWORD *)(v10 + 24) = v17;
  *(_DWORD *)(v10 + 24) = a1[2] & 0xFFFFFFC0 | v17 & 0x3F;
  *(_OWORD *)(v10 + 28) = *(_OWORD *)((char *)a1 + 20);
  result = *(double *)((char *)a1 + 36);
  *(double *)(v10 + 44) = result;
  *(_DWORD *)(v10 + 52) = *((_DWORD *)a1 + 11);
  *((_DWORD *)a1 + 4) &= ~1u;
  v19 = *a2;
  *a2 = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 56) = v19;
  v20 = *a3;
  *a3 = 0;
  *(_QWORD *)(v10 + 64) = v20;
  LODWORD(v20) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(v10 + 72) = v20;
  LODWORD(v20) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(v10 + 76) = v20;
  *(_BYTE *)(v10 + 80) = a4;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 96) = 0;
  *(_BYTE *)(v10 + 104) = 0;
  *a5 = v10;
  return result;
}

unint64_t WebCore::CSSPropertyParserHelpers::consumeFontFormat@<X0>(__int128 **this@<X0>, WebCore::CSSParserTokenRange *a2@<X1>, _QWORD *a3@<X8>)
{
  char v3;
  unint64_t result;
  unint64_t v6;
  __int128 *v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  _DWORD *v12;
  unsigned int v13;

  v3 = (char)a2;
  result = WebCore::CSSPropertyParserHelpers::consumeFunction(this, a2);
  if (result == v6)
  {
    v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    v8 = 1;
    {
      v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v9;
    }
    v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v7 = (__int128 *)result;
    result += 24;
    v9 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  do
  {
    if (result < v6 || (v8 & 1) != 0)
    {
      if (result >= v6)
        v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v11 = (__int128 *)result;
      v10 = *(_DWORD *)v11;
    }
    else
    {
      v10 = v9 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v10;
      v8 = 1;
      v9 = v10;
    }
    result += 24;
  }
  while ((v10 & 0x3F) == 0x10);
  if (result - 24 != v6)
    goto LABEL_15;
  v13 = *(_DWORD *)v7;
  if ((*(_DWORD *)v7 & 0x3F) == 0)
  {
    result = *((unsigned int *)v7 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v7 + 1), *((unsigned int *)v7 + 1) | ((unint64_t)((v13 >> 22) & 1) << 32));
      *((_DWORD *)v7 + 4) = result;
      v13 = *(_DWORD *)v7;
    }
    if ((unsigned __int16)result - 789 <= 6)
      goto LABEL_24;
  }
  if ((v13 & 0x3F) != 0x1C || (v3 & 1) != 0)
  {
LABEL_15:
    v12 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v12 += 2;
    *a3 = v12;
  }
  else
  {
LABEL_24:
    if ((v13 & 0x400000) != 0)
      return WTF::String::String();
    else
      return WTF::String::String();
  }
  return result;
}

uint64_t WebCore::RenderBlockFlow::marginBeforeEstimateForChild(uint64_t this, WebCore::RenderBox *a2, WebCore::LayoutUnit *a3, WebCore::LayoutUnit *a4)
{
  const WebCore::RenderBlock *v7;
  int v8;
  int v9;
  int v10;
  WebCore::RenderBlockFlow *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  _WORD v46[6];

  v7 = (const WebCore::RenderBlock *)this;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 3384) != 2)
    goto LABEL_2;
  v35 = *((_QWORD *)a2 + 4);
  if (!v35
    || (v36 = *(_QWORD *)(v35 + 8)) == 0
    || (v37 = *((_DWORD *)a2 + 31), ((v37 ^ *(_DWORD *)(v36 + 124)) & 0xE000) != 0))
  {
    if (((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*(_BYTE *)(this + 21) & 0x10) == 0))
      goto LABEL_2;
    if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
    {
      if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x100) == 0)
        goto LABEL_2;
      goto LABEL_55;
    }
    v39 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
    v40 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
    if (v40 <= 4)
    {
      v41 = qword_1969FC6F0;
LABEL_67:
      v42 = v41[v40];
      goto LABEL_68;
    }
    v42 = 2;
LABEL_68:
    if (!*(_BYTE *)(v39 + 8 * v42 + 45))
      goto LABEL_2;
    goto LABEL_55;
  }
  if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
  {
    v39 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
    v40 = ((unsigned __int16)v37 >> 13) - 1;
    if (v40 <= 4)
    {
      v41 = qword_1969FC6C8;
      goto LABEL_67;
    }
    v42 = 0;
    goto LABEL_68;
  }
  if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x80) == 0)
    goto LABEL_2;
LABEL_55:
  if (*(_BYTE *)(this + 46) == 37)
    return this;
  this = WebCore::RenderObject::isBody((WebCore::RenderObject *)this);
  if ((this & 1) != 0)
    return this;
LABEL_2:
  this = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)a2 + 1112))(a2, (uint64_t)v7 + 80);
  v8 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 <= (int)this)
    v8 = this;
  *(_DWORD *)a3 = v8;
  if ((_DWORD)this == 0x80000000)
    v9 = 0x7FFFFFFF;
  else
    v9 = -(int)this;
  if (*(_DWORD *)a4 > v9)
    v9 = *(_DWORD *)a4;
  *(_DWORD *)a4 = v9;
  v10 = *((_BYTE *)a2 + 52) & 7;
  if (v10 == 1)
    v11 = a2;
  else
    v11 = 0;
  if (v10 == 1)
  {
    v12 = *((_DWORD *)a2 + 4) + 1;
    *((_DWORD *)a2 + 4) = v12;
    if ((*((_BYTE *)a2 + 22) & 4) != 0)
      goto LABEL_28;
    v13 = *((_QWORD *)a2 + 4);
    if (!v13)
      goto LABEL_28;
    v14 = *(_QWORD *)(v13 + 8);
    if (!v14 || ((*((_DWORD *)a2 + 31) ^ *(_DWORD *)(v14 + 124)) & 0xE000) != 0)
      goto LABEL_28;
    v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1048))(a2);
    v16 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 960))(a2);
    if (__OFADD__(v15, v16))
      v17 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v17 = v15 + v16;
    v18 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1056))(a2);
    v19 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 968))(a2);
    if (__OFADD__(v18, v19))
      v20 = (v18 >> 31) + 0x7FFFFFFF;
    else
      v20 = v18 + v19;
    this = WebCore::RenderBlockFlow::MarginInfo::MarginInfo((uint64_t)v46, (uint64_t)a2, v17, v20);
    if ((v46[0] & 2) == 0
      || (v21 = *((unsigned int *)a2 + 16), !(v21 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)))
      || (v22 = *(_QWORD *)((v21 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8)) == 0
      || (*(_BYTE *)(v22 + 45) & 4) == 0)
    {
LABEL_27:
      v12 = *((_DWORD *)a2 + 4);
LABEL_28:
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19419B65CLL);
      }
      *((_DWORD *)a2 + 4) = v12 - 1;
      return this;
    }
    while (1)
    {
      v23 = *(_DWORD *)(v22 + 20);
      if ((v23 & 0x800) == 0 && (v23 & 0x1800000) != 0x1000000)
        break;
      v24 = *(unsigned int *)(v22 + 47);
      if (v24 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32))
      {
        v22 = *(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)) + 8);
        if (v22)
        {
          if ((*(_BYTE *)(v22 + 45) & 4) != 0)
            continue;
        }
      }
      goto LABEL_27;
    }
    if ((v23 & 0xF8) != 0)
    {
      WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v22, v7);
      if ((*(_BYTE *)(v22 + 45) & 0x40) != 0)
      {
        v25 = *(_DWORD *)(v22 + 16);
        *(_DWORD *)(v22 + 16) = v25 + 1;
        v26 = *(_QWORD *)(v22 + 88);
        v27 = *(_QWORD *)(v26 + 24);
        v28 = ((unsigned __int16)*(_DWORD *)(v22 + 124) >> 13) - 1;
        v44 = 3;
        switch((unsigned __int16)*(_DWORD *)(v22 + 124) >> 13)
        {
          case 1:
            v45 = *(unsigned __int8 *)(v27 + 61);
            v30 = (_WORD *)(v22 + 69);
            v31 = *(_WORD *)(v22 + 69) & 0xFF7F | (v45 << 7);
            *(_WORD *)(v22 + 69) = v31;
            v32 = *(_QWORD *)(v26 + 24);
LABEL_84:
            v43 = 0;
            goto LABEL_43;
          case 2:
          case 4:
            goto LABEL_41;
          case 3:
          case 5:
            v44 = 1;
            goto LABEL_41;
          default:
            v44 = 0;
LABEL_41:
            v29 = v27 + 8 * v44;
            v30 = (_WORD *)(v22 + 69);
            v31 = *(_WORD *)(v22 + 69) & 0xFF7F | (*(unsigned __int8 *)(v29 + 45) << 7);
            *(_WORD *)(v22 + 69) = v31;
            v32 = *(_QWORD *)(v26 + 24);
            v43 = 3;
            switch(v28)
            {
              case 0:
                goto LABEL_84;
              case 1:
              case 3:
                v43 = 1;
                break;
              case 2:
              case 4:
                break;
              default:
                v43 = 2;
                break;
            }
LABEL_43:
            *v30 = v31 & 0xFEFF | (*(unsigned __int8 *)(v32 + 8 * v43 + 45) << 8);
            if (v25 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x19419B6CCLL);
            }
            *(_DWORD *)(v22 + 16) = v25;
            break;
        }
      }
    }
    v33 = v22;
    if ((*(_BYTE *)(v22 + 45) & 2) != 0)
      v33 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8);
    v34 = *(_WORD *)(v33 + 98) & 7;
    if (!v34)
    {
LABEL_48:
      this = WebCore::RenderBlockFlow::marginBeforeEstimateForChild(v11, (WebCore::RenderBox *)v22, a3, a4);
      goto LABEL_27;
    }
    if (v34 <= 5)
    {
      v38 = 1 << v34;
      if ((v38 & 0x26) != 0)
        goto LABEL_61;
      if ((v38 & 0x18) != 0)
      {
        WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v22);
LABEL_61:
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 1112))(v22, (uint64_t)v11 + 80);
        if (!(_DWORD)this)
          goto LABEL_27;
        goto LABEL_48;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19419B798);
  }
  return this;
}

uint64_t WebCore::RenderBox::marginBefore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 80;
  if (a2)
    v2 = a2;
  v3 = ((unsigned __int16)*(_DWORD *)(v2 + 44) >> 13) - 1;
  if (v3 > 4)
    return *(unsigned int *)(a1 + 168);
  else
    return *(unsigned int *)(a1 + 4 * qword_1969F1F90[v3] + 168);
}

uint64_t WebCore::FloatingPointEnvironment::enableDenormalSupport(WebCore::FloatingPointEnvironment *this)
{
  uint64_t result;

  result = WTF::isUIThread(this);
  if ((result & 1) == 0)
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

__n128 WebCore::FloatRect::unite(float32x2_t *this, float32x2_t *a2)
{
  __n128 result;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;

  result.n128_u64[0] = (unint64_t)a2[1];
  if (result.n128_f32[0] > 0.0 && result.n128_f32[1] > 0.0)
  {
    v3.i32[0] = this[1].i32[0];
    if (v3.f32[0] <= 0.0 || this[1].f32[1] <= 0.0)
    {
      result = *(__n128 *)a2->f32;
      *(_OWORD *)this->f32 = *(_OWORD *)a2->f32;
    }
    else
    {
      v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*this, *a2), (int8x8_t)*a2, (int8x8_t)*this);
      v3.i32[1] = this[1].i32[1];
      v5 = vadd_f32(v3, *this);
      v6 = vadd_f32((float32x2_t)result.n128_u64[0], *a2);
      result.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, v5), (int8x8_t)v6, (int8x8_t)v5), v4);
      *this = v4;
      this[1] = (float32x2_t)result.n128_u64[0];
    }
  }
  return result;
}

uint64_t WebCore::JSHTMLBodyElement::forEachWindowEventHandlerContentAttribute(WebCore *a1)
{
  char **v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t result;

  v2 = (char **)&WebCore::JSHTMLBodyElement::forEachWindowEventHandlerContentAttribute(WTF::Function<void ()(WTF::AtomString const&,WTF::AtomString const&)> const&)::table;
  v3 = WebCore::eventNames(a1);
  do
  {
    v4 = *v2;
    v5 = v2[1];
    v2 += 2;
    result = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, *(_QWORD *)v4 + 24, &v5[v3]);
  }
  while (v2 != &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLButtonElement>::s_info);
  return result;
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebCore::HTMLBodyElement::eventNameForWindowEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator() const(void)::{lambda(WTF::AtomString const&,WTF::AtomString const&)#1},void,WTF::AtomString const&,WTF::AtomString const&>::call(WTF::StringImpl **result, WTF::StringImpl *a2, WTF::StringImpl ***a3)
{
  WTF::StringImpl **v3;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl ***v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;

  v3 = *(WTF::StringImpl ***)a2;
  if (*(_QWORD *)(WebCore::HTMLNames::onrejectionhandledAttr + 24) != *(_QWORD *)a2
    && *(WTF::StringImpl ***)(WebCore::HTMLNames::onunhandledrejectionAttr + 24) != v3)
  {
    v5 = (uint64_t *)result[1];
    if (v3)
      *(_DWORD *)v3 += 2;
    v6 = *v5;
    if (*v5
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(v5, 0), (v6 = *v5) != 0))
    {
      v7 = *(_DWORD *)(v6 - 8);
    }
    else
    {
      v7 = 0;
    }
    v8 = 0;
    v9 = *((_DWORD *)v3 + 4) >> 8;
    for (i = 1; ; ++i)
    {
      v11 = v9 & v7;
      v12 = (WTF::StringImpl ***)(v6 + 16 * v11);
      result = *v12;
      if (!*v12)
        break;
      if (result != (WTF::StringImpl **)-1)
      {
        v12 = v8;
        if (result == v3)
        {
          if (v3)
          {
            if (*(_DWORD *)v3 == 2)
              return (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
            else
              *(_DWORD *)v3 -= 2;
          }
          return result;
        }
      }
      v9 = i + v11;
      v8 = v12;
    }
    if (v8)
    {
      *v8 = 0;
      v8[1] = 0;
      --*(_DWORD *)(*v5 - 16);
      *v8 = v3;
    }
    else
    {
      *v12 = v3;
      v8 = (WTF::StringImpl ***)(v6 + 16 * v11);
    }
    v13 = *a3;
    if (*a3)
      *(_DWORD *)v13 += 2;
    result = v8[1];
    v8[1] = v13;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v14 = *v5;
    if (*v5)
      v15 = *(_DWORD *)(v14 - 12) + 1;
    else
      v15 = 1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *v5;
    if (*v5)
      v17 = *(_DWORD *)(v16 - 12);
    else
      v17 = 0;
    v18 = (*(_DWORD *)(v16 - 16) + v17);
    v19 = *(unsigned int *)(v16 - 4);
    if (v19 > 0x400)
    {
      if (v19 > 2 * v18)
        return result;
    }
    else if (3 * v19 > 4 * v18)
    {
      return result;
    }
    return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(v5, (WTF::StringImpl **)v8);
  }
  return result;
}

uint64_t WebCore::JSHTMLElement::forEachEventHandlerContentAttribute(WebCore *a1)
{
  char **v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t result;

  v2 = (char **)&WebCore::JSHTMLElement::forEachEventHandlerContentAttribute(WTF::Function<void ()(WTF::AtomString const&,WTF::AtomString const&)> const&)::table;
  v3 = WebCore::eventNames(a1);
  do
  {
    v4 = *v2;
    v5 = v2[1];
    v2 += 2;
    result = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, *(_QWORD *)v4 + 24, &v5[v3]);
  }
  while (v2 != &WebCore::JSDOMConstructorNotConstructable<WebCore::JSHTMLEmbedElement>::s_info);
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add<WTF::AtomString const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(WTF::StringImpl **)a2;
  v13 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl **)(v8 + 16 * v15);
    result = *v16;
    if (!*v16)
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = *(WTF::StringImpl **)a2;
        v16 = v11;
      }
      if (v12)
        *(_DWORD *)v12 += 2;
      *v16 = v12;
      v18 = *a3;
      if (*a3)
        *(_DWORD *)v18 += 2;
      result = v16[1];
      v16[1] = v18;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v19 = *a1;
      if (*a1)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *a1;
      if (*a1)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_23;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_23:
        v25 = v21 + 16 * v24;
        v26 = 1;
        goto LABEL_24;
      }
      result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, v16);
      v16 = (WTF::StringImpl **)result;
      v21 = *a1;
      if (*a1)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_23;
    }
    if (result != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v8 + 16 * v15);
LABEL_7:
    v13 = i + v15;
  }
  if (result != v12)
    goto LABEL_7;
  if ((v9 & 1) != 0)
    v27 = 0;
  else
    v27 = *(unsigned int *)(v8 - 4);
  v26 = 0;
  v25 = v8 + 16 * v27;
LABEL_24:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (!*v13)
      {
        v27 = v13[1];
        v13[1] = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::destroy(v27, v10);
            v14 = *v13;
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
        goto LABEL_23;
      }
      if (v14 != (WTF::StringImpl *)-1)
        break;
LABEL_23:
      if (++v11 == v7)
        goto LABEL_40;
    }
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 8);
    else
      v16 = 0;
    v17 = 0;
    v18 = *((_DWORD *)v14 + 4) >> 8;
    do
    {
      v19 = v18 & v16;
      v18 = ++v17 + v19;
    }
    while (*(_QWORD *)(v15 + 16 * v19));
    v20 = (WTF::StringImpl **)(v15 + 16 * v19);
    v21 = v20[1];
    v20[1] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::destroy(v21, v10);
        v28 = *v20;
        *v20 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v10);
          else
            *(_DWORD *)v28 -= 2;
        }
        goto LABEL_15;
      }
      *(_DWORD *)v21 -= 2;
    }
    *v20 = 0;
LABEL_15:
    v22 = *v13;
    *v13 = 0;
    *v20 = v22;
    v23 = v6 + 16 * v11;
    v24 = *(WTF::StringImpl **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    v20[1] = v24;
    v25 = *(WTF::StringImpl **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v10);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = *v13;
    *v13 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v10);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (v13 == a3)
      v12 = v20;
    goto LABEL_23;
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_40:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::AtomString>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

uint64_t WebCore::ScrollingStateNode::attachAfterDeserialization(uint64_t result, WebCore::ScrollingStateTree *a2)
{
  _DWORD *v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  WebCore::ScrollingStateNode **v9;
  uint64_t v10;
  WebCore::ScrollingStateNode *v11;

  ++*(_DWORD *)a2;
  v3 = *(_DWORD **)(result + 48);
  *(_QWORD *)(result + 48) = a2;
  if (v3)
  {
    if (!*v3)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    --*v3;
  }
  v4 = *(unsigned __int8 *)(result + 16);
  v5 = v4 > 5;
  v6 = (1 << v4) & 0x2B;
  if (!v5 && v6 != 0)
    ++*((_DWORD *)a2 + 16);
  v8 = *(unsigned int *)(result + 84);
  if ((_DWORD)v8)
  {
    v9 = *(WebCore::ScrollingStateNode ***)(result + 72);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      result = WebCore::ScrollingStateNode::attachAfterDeserialization(v11, a2);
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

BOOL WebCore::ApplicationCacheHost::maybeLoadFallbackForResponse(WebCore::ApplicationCacheHost *this, WebCore::ResourceLoader *a2, const WebCore::ResourceResponse *a3)
{
  _BOOL8 result;

  result = 0;
  if (!a2 || (*((_BYTE *)a2 + 1092) & 4) == 0)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
    if ((*((__int16 *)a3 + 68) - 400) < 0x64
      || (WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1),
          (*((__int16 *)a3 + 68) - 500) <= 0x63))
    {
      if ((WebCore::ApplicationCacheHost::scheduleLoadFallbackResourceFromApplicationCache(this, a2, 0) & 1) != 0)
        return 1;
    }
  }
  return result;
}

uint64_t WebCore::WidthIterator::advance(uint64_t this, unsigned int a2, WebCore::GlyphBuffer *a3)
{
  CGFloat v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  float v7;
  float v8;
  uint64_t v10;
  unint64_t v11;
  WebCore::ScrollbarsController *v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  int v21;
  __int16 v22;
  int v23;
  _BOOL4 v24;
  void *v25;
  const WebCore::FontCascadeDescription *v26;
  unsigned int v27;
  WebCore::FontCascadeFonts *v28;
  void *v29;
  WebCore::Font *v30;
  WebCore::Font *v31;
  WTF **v32;
  int8_t v33;
  uint64_t v34;
  WTF::BitVector *v35;
  BOOL v36;
  CGFloat y;
  unsigned int v38;
  WTF **v39;
  WTF **v40;
  float v41;
  float v42;
  float v43;
  float v44;
  void *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  const WebCore::FontCascadeDescription *v51;
  unsigned int v52;
  WebCore::FontCascadeFonts *v53;
  void *v54;
  uint64_t v55;
  WTF::BitVector *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  WebCore::Font *v61;
  WebCore::Font *v62;
  WTF **v63;
  int v64;
  char v65;
  CGFloat v66;
  int v67;
  int height_low;
  uint64_t v69;
  CGFloat width;
  WTF **v71;
  unsigned int v72;
  WebCore::Font *v73;
  WebCore::Font *v74;
  WebCore::Font *v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  int v88;
  char *v89;
  float v90;
  uint64_t v91;
  float v92;
  int v93;
  float *v94;
  WebCore::Font *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  WTF *v104;
  WTF *v105;
  void *v106;
  WTF *v107;
  void *v108;
  WTF *v109;
  void *v110;
  WTF *v111;
  void *v112;
  WebCore::Font *v113;
  _BYTE *v114;
  WTF **v115;
  int v116;
  uint64_t v117;
  float *v118;
  float32x2_t v119;
  float32x2_t v120;
  int8x8_t v121;
  WebCore::Font *v122;
  WTF **v123;
  void *v124;
  WTF *v125;
  CGFloat v126;
  WTF::StringImpl *v127;
  unsigned int *v128;
  int v129;
  uint64_t v130;
  float v131;
  uint64_t v132;
  float v133;
  WebCore::FontCascade *v134;
  int v135;
  float v136;
  int v137;
  float v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  UChar32 v146;
  uint64_t v147;
  float v148;
  uint64_t v149;
  float v150;
  float v151;
  int v152;
  uint64_t v153;
  WTF *v154;
  void *v155;
  WebCore::Font *v156;
  int v157;
  unsigned int v158;
  __int16 v159;
  int v160;
  _BOOL4 v161;
  unint64_t v162;
  WebCore::FontCascade *v163;
  const WebCore::FontCascadeDescription *v164;
  int v165;
  uint64_t v166;
  WebCore::FontCascadeFonts *v167;
  void *v168;
  WebCore::Font *v169;
  WebCore::Font *v170;
  WTF **v171;
  int8_t v172;
  uint64_t v173;
  WTF::BitVector *v174;
  BOOL v175;
  CGFloat height;
  unsigned int v177;
  WTF **v178;
  WTF **v179;
  float v180;
  float v181;
  float v182;
  unsigned __int16 *v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  WebCore::FontCascade *v192;
  int v193;
  uint64_t v194;
  const WebCore::FontCascadeDescription *v195;
  WebCore::FontCascadeFonts *v196;
  void *v197;
  uint64_t v198;
  WTF::BitVector *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  WebCore::Font *v204;
  WebCore::Font *v205;
  WTF **v206;
  int v207;
  char v208;
  CGFloat v209;
  int v210;
  int v211;
  WebCore::Font *v212;
  WTF **v213;
  unsigned int v214;
  WebCore::Font *v215;
  WebCore::Font *v216;
  WebCore::Font *v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t *v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  _QWORD *v229;
  int v230;
  char *v231;
  float v232;
  float v233;
  int v234;
  float *v235;
  WebCore::Font *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _DWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  WTF *v245;
  int64_t v246;
  _BYTE *v247;
  WTF **v248;
  int v249;
  uint64_t v250;
  float *v251;
  float32x2_t v252;
  float32x2_t v253;
  int8x8_t v254;
  WTF *v255;
  void *v256;
  WTF *v257;
  void *v258;
  WTF *v259;
  void *v260;
  WTF *v261;
  void *v262;
  WebCore::Font *v263;
  WTF **v264;
  void *v265;
  WTF *v266;
  WebCore::Font *v267;
  uint64_t v268;
  WTF::StringImpl **v269;
  uint64_t v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  WebCore::Font *v275;
  _BYTE *v276;
  uint64_t v277;
  uint64_t v278;
  WebCore::Font *v279;
  size_t v280;
  void *v281;
  unint64_t v282;
  WebCore::ScrollbarsController *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  float v291;
  char *v292;
  uint64_t v293;
  WebCore::ScrollbarsController *v295;
  unsigned int *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  WebCore::ScrollbarsController *v301;
  WebCore::FontCascade *v302;
  WebCore::Length *v303;
  int v304;
  float v305;
  WebCore::Length *v306;
  int v307;
  float v308;
  float v309;
  uint64_t v310;
  uint64_t v311;
  float v312;
  float v313;
  float v314;
  float v315;
  uint64_t v316;
  uint64_t v317;
  float v318;
  float v319;
  int v320;
  double *v322;
  double v323;
  float v324;
  float v325;
  uint64_t v326;
  WebCore::FontCascade *v327;
  WebCore::Length *v328;
  int v329;
  float v330;
  WTF *v331;
  void *v332;
  WTF *v333;
  void *v334;
  WTF *v335;
  void *v336;
  WTF *v337;
  void *v338;
  WTF *v339;
  void *v340;
  WTF *v341;
  void *v342;
  WTF *v343;
  void *v344;
  uint64_t v345;
  WTF::StringImpl **v346;
  uint64_t v347;
  WTF::StringImpl *v348;
  CGFloat v349;
  WebCore::Font **v350;
  WTF **v351;
  WTF *v352;
  void *v353;
  WTF *v354;
  void *v355;
  WTF *v356;
  void *v357;
  WTF *v358;
  void *v359;
  WTF *v360;
  void *v361;
  WTF *v362;
  void *v363;
  CGFloat v364;
  WebCore::Font **p_size;
  WTF **v366;
  WTF *v367;
  void *v368;
  uint64_t v369;
  CTFontOrientation v370;
  float x;
  uint64_t v372;
  uint64_t v373;
  CTFontOrientation v374;
  float v375;
  uint64_t v376;
  WTF *v377;
  void *v378;
  unsigned int v379;
  unsigned int v380;
  WTF *v381;
  void *v382;
  _OWORD *v383;
  WTF *v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  unint64_t v391;
  unsigned int v392;
  WebCore::FontCascade *v394;
  WebCore::Length *v395;
  int v396;
  float v397;
  int v398;
  _OWORD *v399;
  WTF *v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  unsigned int v408;
  int v413;
  WebCore::Font *v414;
  float v415;
  float v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  float v420;
  int v421;
  _DWORD *v422;
  int v423;
  _DWORD *v424;
  WebCore::Font *v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  float v432;
  char v433;
  float v434;
  char v435;
  char v436;
  int v437;
  _BOOL4 v438;
  _BOOL4 v439;
  int CanBeActive;
  int v441;
  int v442;
  WebCore::Font *v443;
  float v444;
  char v445;
  float v446;
  char v447;
  char v448;
  float v449;
  CTFontOrientation v450;
  WTF *v451;
  int v452;
  uint64_t v453;
  float v454;
  float v455;
  float v456;
  float *v457;
  _OWORD *v458;
  void *v459;
  float v460;
  float v461;
  float v462;
  WTF *v463;
  uint64_t PageSlowCase;
  float *v465;
  _OWORD *v466;
  void *v467;
  float v468;
  float v469;
  float *v470;
  float v471;
  uint64_t v472;
  float v473;
  WebCore::Font *v474;
  WebCore::Font *v475;
  float v476;
  float v477;
  float *v478;
  char *v479;
  char *v480;
  unsigned int *v481;
  char *v482;
  unsigned int *v483;
  WebCore::Font **v484;
  float v485;
  float v486;
  unsigned int v487;
  _QWORD *v488;
  unsigned __int16 *v489;
  WTF **v490;
  int hasBinaryProperty;
  int v492;
  uint64_t v493;
  BOOL v494;
  char *v495;
  WebCore::ScrollbarsController *v496;
  char *v497;
  WebCore::ScrollbarsController *v498;
  WebCore::Font *v499;
  unsigned int v500;
  unsigned int v501;
  unint64_t v502;
  uint64_t v503;
  unsigned __int16 v504;
  WTF *v505;
  char v506[8];
  WTF *v507;
  CGSize v508;
  _BYTE v509[11];
  unsigned __int8 v510;
  BOOL v511;
  BOOL v512;
  WebCore::Font *v513;
  WebCore::Font *v514;
  WebCore::Font *v515;
  WebCore::Font *v516;
  int v517[2];
  int v518;
  WebCore::Font *v519;
  float v520;
  _BYTE *v521;
  uint64_t v522;
  _BYTE v523[1024];
  unsigned int v524;
  unsigned int v525;
  float v526[40];
  unsigned int v527;
  WTF *v528;
  int v529;
  __int16 v530;
  CGGlyph glyphs[4];
  uint64_t v532;
  uint64_t v533;
  __int16 v534;
  CGRect advances;
  CGRect BoundingRectsForGlyphs;

  v10 = this;
  *(_BYTE *)(this + 85) = 0;
  v11 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (v11)
    LODWORD(v12) = *(_DWORD *)(v11 + 4);
  else
    LODWORD(v12) = 0;
  if (v12 < a2)
    v12 = (WebCore::ScrollbarsController *)v12;
  else
    v12 = (WebCore::ScrollbarsController *)a2;
  v13 = *(unsigned int *)(this + 48);
  v498 = v12;
  if (v13 >= v12)
    return this;
  v496 = (WebCore::ScrollbarsController *)*(unsigned int *)(this + 48);
  v497 = (char *)a3 + 43072;
  v495 = (char *)a3 + 26680;
  v14 = *(_DWORD *)(this + 48);
  v15 = *((unsigned int *)a3 + 3);
  v16 = *(float *)(this + 56);
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v17 = *(_QWORD *)(v11 + 8);
      v11 = *(unsigned int *)(v11 + 4);
      goto LABEL_10;
    }
    LODWORD(v483) = *(_DWORD *)(v11 + 4);
    v152 = (_DWORD)v483 - v13;
    if (v483 < v13)
      goto LABEL_588;
    v489 = (unsigned __int16 *)(*(_QWORD *)(v11 + 8) + 2 * v13);
    v153 = *(_QWORD *)this;
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v526, (const WebCore::FontDescription *)(*(_QWORD *)this + 16));
    v154 = *(WTF **)(v153 + 184);
    ++*(_DWORD *)v154;
    v528 = v154;
    v529 = *(_DWORD *)(v153 + 192);
    v530 = *(_WORD *)(v153 + 196);
    v156 = (WebCore::Font *)WebCore::FontCascade::primaryFont(*(WebCore::FontCascade **)v10, v155);
    v157 = *(_DWORD *)v156;
    v513 = v156;
    v514 = v156;
    v515 = v156;
    v516 = v156;
    *(_QWORD *)v517 = a3;
    v518 = *((_DWORD *)a3 + 3);
    *(_DWORD *)v156 = v157 + 6;
    v519 = v156;
    v520 = 0.0;
    v521 = v523;
    v522 = 64;
    v524 = v14;
    v158 = v14;
    v525 = v14;
    v508.width = 0.0;
    v508.height = 0.0;
    memset(v509, 0, sizeof(v509));
    v159 = v527;
    v160 = (v527 >> 26) & 7;
    v510 = (v527 >> 26) & 7;
    v511 = (v527 & 0x8000) == 0;
    v161 = v160 == 2 || v160 == 4;
    v512 = v161;
    v162 = *v489;
    if ((v162 & 0xFC00) == 0xD800 && v152 != 1)
    {
      v413 = v489[1];
      if ((v413 & 0xFC00) == 0xDC00)
        v162 = (v413 + ((_DWORD)v162 << 10) - 56613888);
    }
    v163 = *(WebCore::FontCascade **)v10;
    v164 = (const WebCore::FontCascadeDescription *)(*(_QWORD *)v10 + 16);
    v165 = (*(unsigned __int16 *)(*(_QWORD *)v10 + 180) >> 12) & 3;
    v490 = (WTF **)v156;
    switch(v165)
    {
      case 0:
        goto LABEL_211;
      case 2:
        v166 = 2;
        break;
      case 3:
LABEL_211:
        if (v162 >= 0x100)
          v166 = 2 * (u_hasBinaryProperty(v162, UCHAR_EMOJI_PRESENTATION) != 0);
        else
          v166 = 0;
        break;
      default:
        v166 = 1;
        break;
    }
    v167 = (WebCore::FontCascadeFonts *)*((_QWORD *)v163 + 27);
    if (v167)
    {
      ++*(_DWORD *)v167;
      WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v167, (void *)v162, v164, 1, v166, (uint64_t)v506);
      if (*(_DWORD *)v167 == 1)
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v167, v168);
        WTF::fastFree(v354, v355);
      }
      else
      {
        --*(_DWORD *)v167;
      }
    }
    else
    {
      WebCore::FontCascadeFonts::glyphDataForCharacter(0, (void *)v162, v164, 1, v166, (uint64_t)v506);
    }
    v169 = (WebCore::Font *)v490;
    if (v507)
    {
      v169 = (WebCore::Font *)*((_QWORD *)v507 + 1);
      if (!v169)
        v169 = (WebCore::Font *)v490;
    }
    v170 = v513;
    ++*(_DWORD *)v169;
    v171 = (WTF **)v514;
    v513 = v169;
    v514 = v170;
    if (v171)
    {
      if (*(_DWORD *)v171 == 1)
      {
        WebCore::Font::~Font(v171);
        WTF::fastFree(v356, v357);
      }
      else
      {
        --*(_DWORD *)v171;
      }
    }
    v172 = u_charType(v162);
    v175 = 1;
    if (((1 << v172) & 0x1C0) == 0)
      v175 = MEMORY[0x19AEA861C](v162) == (_DWORD)v162;
    if ((v159 & 0x8000) == 0 || !v160 || (unint64_t)v513 + 1 < 2)
      goto LABEL_226;
    if (v161)
    {
      if ((v162 - 9) < 5 || (_DWORD)v162 == 32)
        goto LABEL_226;
    }
    else if (v175)
    {
      goto LABEL_226;
    }
    if (!WebCore::Font::variantCapsSupportedForSynthesis((uint64_t)v513, v160, v173, v174))
    {
      WebCore::SmallCapsState::setSmallCapsData((WTF ***)&v508, (WTF **)v513, (const WebCore::FontDescription *)v526);
      height = v508.height;
      if (!v509[8] && *(_QWORD *)&v508.height)
      {
        v177 = v158;
        goto LABEL_228;
      }
      if (*(_QWORD *)&v508.height)
      {
        height = *(double *)v509;
LABEL_227:
        v177 = v158;
        if (height == 0.0)
        {
LABEL_229:
          v178 = (WTF **)v515;
          *(double *)&v515 = height;
          if (v178)
          {
            if (*(_DWORD *)v178 == 1)
            {
              WebCore::Font::~Font(v178);
              WTF::fastFree(v358, v359);
              height = *(double *)&v515;
            }
            else
            {
              --*(_DWORD *)v178;
            }
          }
          if (height != 0.0)
            ++**(_DWORD **)&height;
          v481 = &v524;
          v482 = (char *)&v521;
          v179 = (WTF **)v516;
          v516 = *(WebCore::Font **)&height;
          if (v179)
          {
            if (*(_DWORD *)v179 == 1)
            {
              WebCore::Font::~Font(v179);
              WTF::fastFree(v360, v361);
            }
            else
            {
              --*(_DWORD *)v179;
            }
          }
          v480 = (char *)a3 + 8208;
          v479 = (char *)a3 + 10272;
          v488 = (_QWORD *)((char *)a3 + 26672);
          v41 = 0.0;
          v7 = -1.0;
          v180 = 0.0;
          v485 = 0.0;
          v181 = 0.0;
          v484 = (WebCore::Font **)v509;
          v182 = 0.0;
          goto LABEL_238;
        }
LABEL_228:
        ++**(_DWORD **)&height;
        goto LABEL_229;
      }
    }
LABEL_226:
    height = *(double *)&v513;
    goto LABEL_227;
  }
  v17 = 0;
LABEL_10:
  if (v11 < v13)
  {
LABEL_588:
    __break(1u);
LABEL_589:
    __break(0xC471u);
    JUMPOUT(0x19419E1ECLL);
  }
  v490 = (WTF **)(v17 + v13);
  v18 = *(_QWORD *)this;
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v526, (const WebCore::FontDescription *)(*(_QWORD *)this + 16));
  v19 = *(WTF **)(v18 + 184);
  ++*(_DWORD *)v19;
  v528 = v19;
  v529 = *(_DWORD *)(v18 + 192);
  v530 = *(_WORD *)(v18 + 196);
  v499 = (WebCore::Font *)WebCore::FontCascade::primaryFont(*(WebCore::FontCascade **)v10, v20);
  v21 = *(_DWORD *)v499;
  v513 = v499;
  v514 = v499;
  v515 = v499;
  v516 = v499;
  *(_QWORD *)v517 = a3;
  v518 = *((_DWORD *)a3 + 3);
  *(_DWORD *)v499 = v21 + 6;
  v519 = v499;
  v520 = 0.0;
  v521 = v523;
  v522 = 64;
  v524 = v14;
  v525 = v14;
  advances.origin.x = 0.0;
  advances.origin.y = 0.0;
  *(_DWORD *)((char *)&advances.size.width + 7) = 0;
  advances.size.width = 0.0;
  v22 = v527;
  v23 = (v527 >> 26) & 7;
  BYTE3(advances.size.height) = (v527 >> 26) & 7;
  BYTE4(advances.size.height) = (v527 & 0x8000) == 0;
  v24 = v23 == 2 || v23 == 4;
  BYTE5(advances.size.height) = v24;
  v25 = (void *)*(unsigned __int8 *)v490;
  v26 = (const WebCore::FontCascadeDescription *)(*(_QWORD *)v10 + 16);
  v27 = 0x20100u >> ((*(unsigned __int16 *)(*(_QWORD *)v10 + 180) >> 9) & 0x18);
  v28 = *(WebCore::FontCascadeFonts **)(*(_QWORD *)v10 + 216);
  if (v28)
  {
    ++*(_DWORD *)v28;
    WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v28, v25, v26, 1, v27, (uint64_t)v506);
    if (*(_DWORD *)v28 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v28, v29);
      WTF::fastFree(v335, v336);
    }
    else
    {
      --*(_DWORD *)v28;
    }
  }
  else
  {
    WebCore::FontCascadeFonts::glyphDataForCharacter(0, (void *)*(unsigned __int8 *)v490, v26, 1, (0x20100u >> ((*(unsigned __int16 *)(*(_QWORD *)v10 + 180) >> 9) & 0x18)), (uint64_t)v506);
  }
  v30 = v499;
  if (v507)
  {
    v30 = (WebCore::Font *)*((_QWORD *)v507 + 1);
    if (!v30)
      v30 = v499;
  }
  v31 = v513;
  ++*(_DWORD *)v30;
  v32 = (WTF **)v514;
  v513 = v30;
  v514 = v31;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      WebCore::Font::~Font(v32);
      WTF::fastFree(v337, v338);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  v33 = u_charType((UChar32)v25);
  v36 = 1;
  if (((1 << v33) & 0x1C0) == 0)
    v36 = MEMORY[0x19AEA861C](v25) == (_DWORD)v25;
  if ((v22 & 0x8000) == 0 || !v23 || (unint64_t)v513 + 1 < 2)
    goto LABEL_26;
  if (v24)
  {
    if (((_DWORD)v25 - 9) >= 5 && (_DWORD)v25 != 32)
      goto LABEL_834;
LABEL_26:
    y = *(double *)&v513;
    goto LABEL_27;
  }
  if (v36)
    goto LABEL_26;
LABEL_834:
  if (WebCore::Font::variantCapsSupportedForSynthesis((uint64_t)v513, v23, v34, v35))
    goto LABEL_26;
  WebCore::SmallCapsState::setSmallCapsData((WTF ***)&advances, (WTF **)v513, (const WebCore::FontDescription *)v526);
  y = advances.origin.y;
  if (!LOBYTE(advances.size.height) && *(_QWORD *)&advances.origin.y)
  {
    v38 = v14;
    goto LABEL_28;
  }
  if (!*(_QWORD *)&advances.origin.y)
    goto LABEL_26;
  y = advances.size.width;
LABEL_27:
  v38 = v14;
  if (y != 0.0)
LABEL_28:
    ++**(_DWORD **)&y;
  v39 = (WTF **)v515;
  *(double *)&v515 = y;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
    {
      WebCore::Font::~Font(v39);
      WTF::fastFree(v339, v340);
      y = *(double *)&v515;
    }
    else
    {
      --*(_DWORD *)v39;
    }
  }
  if (y != 0.0)
    ++**(_DWORD **)&y;
  v483 = &v524;
  v484 = (WebCore::Font **)&v521;
  v40 = (WTF **)v516;
  v516 = *(WebCore::Font **)&y;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
    {
      WebCore::Font::~Font(v40);
      WTF::fastFree(v341, v342);
    }
    else
    {
      --*(_DWORD *)v40;
    }
  }
  v482 = (char *)a3 + 8208;
  v481 = (unsigned int *)((char *)a3 + 10272);
  v489 = (unsigned __int16 *)((char *)a3 + 26672);
  v41 = -1.0;
  v42 = 0.0;
  v486 = 0.0;
  v43 = 0.0;
  v44 = 0.0;
  do
  {
    v45 = (void *)*((unsigned __int8 *)v490 + v38 - v496);
    v46 = (_DWORD)v45 - 9;
    *(_BYTE *)(v10 + 85) |= (_DWORD)v45 == 9;
    v524 = v38;
    v47 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
    if (v47 && v38 + 1 == *(_DWORD *)(v47 + 4))
    {
      *(_DWORD *)(v10 + 24) = v38;
      *(_BYTE *)(v10 + 28) = 1;
    }
    hasBinaryProperty = u_hasBinaryProperty((UChar32)v45, UCHAR_DEFAULT_IGNORABLE_CODE_POINT);
    v48 = 1;
    if (((1 << u_charType((UChar32)v45)) & 0x1C0) != 0 || (v49 = MEMORY[0x19AEA861C](v45), v49 == (_DWORD)v45))
    {
      v50 = 0;
      LODWORD(v488) = 0;
    }
    else
    {
      v48 = 0;
      LODWORD(v488) = v49 & 0xFFFFFF00;
      v50 = v49;
    }
    v51 = (const WebCore::FontCascadeDescription *)(*(_QWORD *)v10 + 16);
    v52 = 0x20100u >> ((*(unsigned __int16 *)(*(_QWORD *)v10 + 180) >> 9) & 0x18);
    v53 = *(WebCore::FontCascadeFonts **)(*(_QWORD *)v10 + 216);
    if (v53)
    {
      ++*(_DWORD *)v53;
      WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v53, v45, v51, 1, v52, (uint64_t)&v504);
      if (*(_DWORD *)v53 == 1)
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v53, v54);
        WTF::fastFree(v107, v108);
      }
      else
      {
        --*(_DWORD *)v53;
      }
    }
    else
    {
      WebCore::FontCascadeFonts::glyphDataForCharacter(0, v45, v51, 1, (0x20100u >> ((*(unsigned __int16 *)(*(_QWORD *)v10 + 180) >> 9) & 0x18)), (uint64_t)&v504);
    }
    v61 = v499;
    if (v505)
    {
      v61 = (WebCore::Font *)*((_QWORD *)v505 + 1);
      if (!v61)
        v61 = v499;
    }
    v62 = v513;
    ++*(_DWORD *)v61;
    v63 = (WTF **)v514;
    v513 = v61;
    v514 = v62;
    if (v63)
    {
      if (*(_DWORD *)v63 == 1)
      {
        WebCore::Font::~Font(v63);
        WTF::fastFree(v109, v110);
      }
      else
      {
        --*(_DWORD *)v63;
      }
    }
    v500 = v38;
    v64 = BYTE3(advances.size.height);
    v65 = BYTE5(advances.size.height);
    if (!BYTE4(advances.size.height) && BYTE3(advances.size.height))
    {
      if ((unint64_t)v513 + 1 < 2)
      {
LABEL_679:
        v67 = 0;
LABEL_680:
        BYTE2(advances.size.height) = v67;
        v66 = advances.origin.y;
        v435 = v67;
        goto LABEL_681;
      }
      if (BYTE5(advances.size.height))
      {
        if (v46 < 0x18 && ((0x80001Fu >> v46) & 1) != 0)
          goto LABEL_679;
      }
      else if ((v48 & 1) != 0)
      {
        goto LABEL_679;
      }
      v67 = !WebCore::Font::variantCapsSupportedForSynthesis((uint64_t)v513, BYTE3(advances.size.height), v55, v56);
      goto LABEL_680;
    }
    BYTE2(advances.size.height) = 0;
    v66 = advances.origin.y;
    v67 = 0;
    if (!BYTE3(advances.size.height))
    {
      height_low = BYTE1(advances.size.height);
      v69 = (uint64_t)v45;
      goto LABEL_57;
    }
    v435 = 0;
LABEL_681:
    if (v66 == 0.0 && (v435 & 1) == 0)
    {
      width = *(double *)&v514;
      v69 = (uint64_t)v45;
      goto LABEL_120;
    }
    height_low = LOBYTE(advances.size.height);
    if (v48)
      v445 = v65;
    else
      v445 = 1;
    if (v48)
      v69 = v45;
    else
      v69 = v488 | v50;
    BYTE1(advances.size.height) = LOBYTE(advances.size.height);
    LOBYTE(advances.size.height) = v445;
LABEL_57:
    if (v66 == 0.0 || height_low)
    {
      if (v66 != 0.0)
      {
        width = advances.size.width;
        goto LABEL_61;
      }
      width = *(double *)&v514;
LABEL_120:
      v66 = 0.0;
LABEL_61:
      if (width == 0.0)
        goto LABEL_63;
      goto LABEL_62;
    }
    width = v66;
LABEL_62:
    ++**(_DWORD **)&width;
LABEL_63:
    v71 = (WTF **)v515;
    *(double *)&v515 = width;
    if (v71)
    {
      if (*(_DWORD *)v71 == 1)
      {
        WebCore::Font::~Font(v71);
        WTF::fastFree(v111, v112);
      }
      else
      {
        --*(_DWORD *)v71;
      }
    }
    if (v513 != v514 || LOBYTE(advances.size.height) != BYTE1(advances.size.height))
    {
      WebCore::WidthIterator::commitCurrentFontRange((WTF *)v10, (uint64_t)&v513, v55, (uint64_t)v56, v57, v58, v59, v60);
      if (v64)
      {
        if (v513 != v514)
        {
          WebCore::SmallCapsState::clear((WebCore::SmallCapsState *)&advances);
          v67 = BYTE2(advances.size.height);
        }
        if (v67)
          WebCore::SmallCapsState::setSmallCapsData((WTF ***)&advances, (WTF **)v513, (const WebCore::FontDescription *)v526);
      }
      v66 = advances.origin.y;
      if (!LOBYTE(advances.size.height))
      {
        v364 = advances.origin.y;
        if (*(_QWORD *)&advances.origin.y)
          goto LABEL_502;
      }
      p_size = &v513;
      if (*(_QWORD *)&advances.origin.y)
        p_size = (WebCore::Font **)&advances.size;
      v364 = *(double *)p_size;
      if (v364 != 0.0)
LABEL_502:
        ++**(_DWORD **)&v364;
      v366 = (WTF **)v516;
      v516 = *(WebCore::Font **)&v364;
      if (v366)
      {
        if (*(_DWORD *)v366 == 1)
        {
          WebCore::Font::~Font(v366);
          WTF::fastFree(v381, v382);
        }
        else
        {
          --*(_DWORD *)v366;
        }
      }
      v525 = v524;
      v64 = BYTE3(advances.size.height);
    }
    if (v64 && v66 == 0.0 && BYTE2(advances.size.height))
    {
      WebCore::SmallCapsState::setSmallCapsData((WTF ***)&advances, (WTF **)v513, (const WebCore::FontDescription *)v526);
      v423 = v518;
      v91 = (uint64_t)v497;
      v38 = v500;
      if (v498 > v525)
        v38 = v525;
      v424 = *(_DWORD **)v517;
      *(_DWORD *)(*(_QWORD *)v517 + 12) = v518;
      v424[2055] = v423;
      v424[2571] = v423;
      v424[6671] = v423;
      v424[10771] = v423;
      goto LABEL_111;
    }
    if (*(_BYTE *)(v10 + 84))
      v69 = MEMORY[0x19AEA8598](v69);
    v72 = v504;
    v73 = v505;
    if (v505)
      v73 = (WebCore::Font *)*((_QWORD *)v505 + 1);
    v74 = v516;
    if (v516 != v73 || (_DWORD)v69 != (_DWORD)v45)
    {
      ++*(_DWORD *)v516;
      *(_QWORD *)&v508.width = v74;
      v72 = WebCore::Font::glyphForCharacter((uint64_t)v74, (void *)v69);
      WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::~Ref((WTF ***)&v508);
    }
    if (!v72 && hasBinaryProperty)
    {
      WebCore::WidthIterator::commitCurrentFontRange((WTF *)v10, (uint64_t)&v513, v55, (uint64_t)v56, v57, v58, v59, v60);
      WebCore::addToGlyphBuffer(*(_QWORD **)v517, v499, v524, v69);
      v38 = v500 + 1;
      v524 = v500 + 1;
      WebCore::AdvanceInternalState::updateFont((WebCore::AdvanceInternalState *)&v513, v499);
      v91 = (uint64_t)v497;
      goto LABEL_111;
    }
    v75 = v516;
    ++*(_DWORD *)v516;
    v76 = v72 >> 4;
    if (*((unsigned __int16 *)v75 + 167) == v72)
    {
      if (!v72)
      {
        v78 = 0;
        v77 = (uint64_t)v75 + 128;
LABEL_121:
        v89 = (char *)v75 + 132;
        if (!*((_BYTE *)v75 + 128))
        {
          __asm { FMOV            V0.4S, #-1.0 }
          *(_OWORD *)((char *)v75 + 132) = _Q0;
          *(_OWORD *)((char *)v75 + 148) = _Q0;
          *(_OWORD *)((char *)v75 + 164) = _Q0;
          *(_OWORD *)((char *)v75 + 180) = _Q0;
          *((_BYTE *)v75 + 128) = 1;
        }
        goto LABEL_85;
      }
      v7 = 0.0;
      if ((*((_BYTE *)v75 + 256) & 2) == 0)
        goto LABEL_87;
    }
    v77 = (uint64_t)v75 + 128;
    v78 = v72 >> 4;
    if (v72 < 0x10)
      goto LABEL_121;
    v80 = (uint64_t *)((char *)v75 + 200);
    v79 = *((_QWORD *)v75 + 25);
    if (v79
      || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)v75 + 25, 8u, 0), v77 = (uint64_t)v75 + 128, (v79 = *v80) != 0))
    {
      v81 = *(_DWORD *)(v79 - 8);
    }
    else
    {
      v81 = 0;
    }
    v82 = 9 * ((~(v76 << 15) + v76) ^ ((~(v76 << 15) + v76) >> 10));
    v83 = (v82 ^ (v82 >> 6)) + ~((v82 ^ (v82 >> 6)) << 11);
    v84 = v81 & (v83 ^ HIWORD(v83));
    v85 = v79 + 16 * v84;
    v86 = *(_DWORD *)v85;
    if (*(_DWORD *)v85)
    {
      v87 = 0;
      v88 = 1;
      while (v86 != v76)
      {
        if (v86 == -1)
          v87 = (_QWORD *)v85;
        v84 = (v84 + v88) & v81;
        v85 = v79 + 16 * v84;
        v86 = *(_DWORD *)v85;
        ++v88;
        if (!*(_DWORD *)v85)
        {
          v493 = v77;
          if (v87)
          {
            *v87 = 0;
            v87[1] = 0;
            --*(_DWORD *)(*v80 - 16);
            v85 = (uint64_t)v87;
          }
          goto LABEL_572;
        }
      }
      goto LABEL_84;
    }
    v493 = v77;
LABEL_572:
    *(_DWORD *)v85 = v76;
    v399 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
    __asm { FMOV            V0.4S, #-1.0 }
    *v399 = _Q0;
    v399[1] = _Q0;
    v399[2] = _Q0;
    v399[3] = _Q0;
    v401 = *(WTF **)(v85 + 8);
    *(_QWORD *)(v85 + 8) = v399;
    if (v401)
      WTF::fastFree(v401, v54);
    v402 = *v80;
    if (*v80)
      v403 = *(_DWORD *)(v402 - 12) + 1;
    else
      v403 = 1;
    v77 = v493;
    *(_DWORD *)(v402 - 12) = v403;
    v404 = *v80;
    if (*v80)
      v405 = *(_DWORD *)(v404 - 12);
    else
      v405 = 0;
    v406 = (*(_DWORD *)(v404 - 16) + v405);
    v407 = *(unsigned int *)(v404 - 4);
    if (v407 > 0x400)
    {
      if (v407 > 2 * v406)
        goto LABEL_84;
LABEL_602:
      v408 = (_DWORD)v407 << (6 * *(_DWORD *)(v404 - 12) >= (2 * v407));
LABEL_582:
      v85 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)v75 + 25, v408, (int *)v85);
      v77 = v493;
      goto LABEL_84;
    }
    if (3 * v407 <= 4 * v406)
    {
      if ((_DWORD)v407)
        goto LABEL_602;
      v408 = 8;
      goto LABEL_582;
    }
LABEL_84:
    v89 = *(char **)(v85 + 8);
LABEL_85:
    v90 = *(float *)&v89[4 * (v72 & 0xF)];
    if (v90 == -1.0)
    {
      glyphs[0] = v72;
      v508 = (CGSize)*MEMORY[0x1E0C9D820];
      if (*((float *)v75 + 24) != 0.0)
      {
        v373 = v77;
        v374 = kCTFontOrientationHorizontal;
        if (*((_BYTE *)v75 + 100))
        {
          if ((*((_BYTE *)v75 + 344) & 4) != 0)
            v374 = kCTFontOrientationHorizontal;
          else
            v374 = kCTFontOrientationVertical;
        }
        CTFontGetAdvancesForGlyphs(*((CTFontRef *)v75 + 11), v374, glyphs, &v508, 1);
        v77 = v373;
      }
      v375 = v508.width;
      WebCore::GlyphMetricsMap<float>::locatePage(v77, v78);
      *(float *)(v376 + 4 * (v72 & 0xF)) = v375;
      v7 = v375 + 0.0;
    }
    else
    {
      v7 = v90 + 0.0;
    }
LABEL_87:
    if (*(_DWORD *)v75 == 1)
    {
      WebCore::Font::~Font((WTF **)v75);
      WTF::fastFree(v105, v106);
    }
    else
    {
      --*(_DWORD *)v75;
    }
    v520 = v7 + v520;
    v91 = (uint64_t)v497;
    if (v69 <= 0x20 && ((1 << v69) & 0x100000600) != 0 || (_DWORD)v69 == 160)
    {
      LOBYTE(glyphs[0]) = (_DWORD)v69 == 32;
      v92 = v7;
      if ((_DWORD)v69 != 9)
        v92 = *((float *)v516 + 84) + 0.0;
      *(float *)&v508.width = v92;
      if (HIDWORD(v522) == (_DWORD)v522)
      {
        WTF::Vector<WebCore::OriginalAdvancesForCharacterTreatedAsSpace,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned int &,BOOL,float>((uint64_t)&v521, &v524, (char *)glyphs, (int *)&v508);
      }
      else
      {
        v93 = HIDWORD(v522) + 1;
        v94 = (float *)&v521[16 * HIDWORD(v522)];
        *(_QWORD *)v94 = v524;
        *((_BYTE *)v94 + 8) = (_DWORD)v69 == 32;
        v94[3] = v92;
        HIDWORD(v522) = v93;
      }
    }
    if (!*(_BYTE *)(v10 + 87))
      goto LABEL_96;
    v113 = v516;
    ++*(_DWORD *)v516;
    if (*((unsigned __int16 *)v113 + 167) == v72)
    {
      v44 = 0.0;
      v43 = 0.0;
      v486 = 0.0;
      v42 = 0.0;
      if (v72)
        goto LABEL_138;
      v115 = (WTF **)((char *)v113 + 208);
      v114 = (_BYTE *)*((_QWORD *)v113 + 26);
      if (!v114)
      {
LABEL_842:
        v42 = WebCore::Font::platformBoundsForGlyph(v113, v72);
        v486 = v460;
        v43 = v461;
        v44 = v462;
        v463 = (WTF *)*((_QWORD *)v113 + 26);
        if (!v463)
        {
          v466 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
          *v466 = 0u;
          v466[1] = 0u;
          v466[2] = 0u;
          v466[3] = 0u;
          v466[4] = 0u;
          v466[5] = 0u;
          v466[6] = 0u;
          v466[7] = 0u;
          v466[8] = 0u;
          v466[9] = 0u;
          v466[10] = 0u;
          v466[11] = 0u;
          v466[12] = 0u;
          v466[13] = 0u;
          v466[14] = 0u;
          v466[15] = 0u;
          v466[16] = 0u;
          *(_QWORD *)&v508.width = v466;
          std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::operator=[abi:sn180100](v115, (WTF **)&v508);
          std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::~unique_ptr[abi:sn180100]((WTF **)&v508, v467);
          v463 = *v115;
        }
        if (v72 < 0x10)
        {
          if (*(_BYTE *)v463)
            PageSlowCase = (uint64_t)v463 + 4;
          else
            PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v463, 0);
          v91 = (uint64_t)v497;
        }
        else
        {
          PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v463, v72 >> 4);
        }
        v465 = (float *)(PageSlowCase + 16 * (v72 & 0xF));
        *v465 = v42;
        v465[1] = v486;
        v465[2] = v43;
        v465[3] = v44;
        goto LABEL_138;
      }
    }
    else
    {
      v115 = (WTF **)((char *)v113 + 208);
      v114 = (_BYTE *)*((_QWORD *)v113 + 26);
      if (!v114)
        goto LABEL_842;
      if (v72 >= 0x10)
      {
        v116 = v72 >> 4;
        goto LABEL_135;
      }
    }
    if (*v114)
    {
      v117 = (uint64_t)(v114 + 4);
      goto LABEL_136;
    }
    v116 = 0;
LABEL_135:
    v117 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v114, v116);
LABEL_136:
    v118 = (float *)(v117 + 16 * (v72 & 0xF));
    v43 = v118[2];
    if (v43 == -1.0)
      goto LABEL_842;
    v42 = *v118;
    v486 = v118[1];
    v44 = v118[3];
LABEL_138:
    if (*(_DWORD *)v113 == 1)
    {
      WebCore::Font::~Font((WTF **)v113);
      WTF::fastFree(v367, v368);
    }
    else
    {
      --*(_DWORD *)v113;
    }
    if (!v524)
      *(float *)(v10 + 76) = fmaxf(-v42, 0.0);
LABEL_96:
    if (*(_BYTE *)(v10 + 90) && !WebCore::FontCascade::canReceiveTextEmphasis(v69))
      LOWORD(v72) = -1;
    v95 = v516;
    v96 = v524;
    v508.width = v7;
    v508.height = 0.0;
    v534 = v72;
    v533 = v524;
    *(_QWORD *)glyphs = v516;
    v97 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v97 == *((_DWORD *)a3 + 2))
    {
      WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)a3, (unint64_t)glyphs);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v97) = v516;
      *((_DWORD *)a3 + 3) = v97 + 1;
    }
    v98 = *((unsigned int *)a3 + 2055);
    if ((_DWORD)v98 == *((_DWORD *)a3 + 2054))
    {
      WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)v482, (unint64_t)&v534);
    }
    else
    {
      *(_WORD *)(*((_QWORD *)a3 + 1026) + 2 * v98) = v72;
      *((_DWORD *)a3 + 2055) = v98 + 1;
    }
    v99 = *((unsigned int *)a3 + 2571);
    v100 = v495;
    if ((_DWORD)v99 == *((_DWORD *)a3 + 2570))
    {
      WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)v481, (unint64_t)&v508);
      v100 = v495;
    }
    else
    {
      *(CGSize *)(*((_QWORD *)a3 + 1284) + 16 * v99) = v508;
      ++*((_DWORD *)a3 + 2571);
    }
    *(_QWORD *)glyphs = 0;
    v532 = 0;
    v101 = v100[1];
    if ((_DWORD)v101 == *v100)
    {
      WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)v489, (unint64_t)glyphs);
    }
    else
    {
      v102 = (_QWORD *)(*(_QWORD *)v489 + 16 * v101);
      *v102 = 0;
      v102[1] = 0;
      ++v100[1];
    }
    v103 = *(unsigned int *)(v91 + 12);
    if ((_DWORD)v103 == *(_DWORD *)(v91 + 8))
    {
      WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>(v91, (unint64_t)&v533);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v91 + 8 * v103) = v96;
      *(_DWORD *)(v91 + 12) = v103 + 1;
    }
    if (v69 >= 0x10000)
      WebCore::GlyphBuffer::add(a3, 0, v95, 0.0, v96 + 1);
    v38 = v500 + 1;
    v524 = v500 + 1;
    *(float *)(v10 + 56) = v7 + *(float *)(v10 + 56);
    if (*(_BYTE *)(v10 + 87))
    {
      v119.i32[0] = *(_QWORD *)(v10 + 68);
      v119.f32[1] = v486;
      v120.i32[1] = HIDWORD(*(_QWORD *)(v10 + 68));
      v120.f32[0] = v44 + v486;
      v121 = (int8x8_t)vcgt_f32(v120, v119);
      v119.f32[0] = v44 + v486;
      *(int8x8_t *)(v10 + 68) = vbsl_s8(v121, (int8x8_t)v119, *(int8x8_t *)(v10 + 68));
      *(float *)(v10 + 80) = fmaxf((float)(v43 + v42) - v7, 0.0);
    }
LABEL_111:
    v104 = v505;
    v505 = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 1)
        WTF::fastFree(v104, v54);
      else
        --*(_DWORD *)v104;
    }
  }
  while (v38 < v498);
  v122 = v516;
  if (v516)
    ++*(_DWORD *)v516;
  v123 = (WTF **)v515;
  v515 = v122;
  if (v123)
  {
    if (*(_DWORD *)v123 == 1)
    {
      WebCore::Font::~Font(v123);
      WTF::fastFree(v343, v344);
    }
    else
    {
      --*(_DWORD *)v123;
    }
  }
  WebCore::WidthIterator::commitCurrentFontRange((WTF *)v10, (uint64_t)&v513, v55, (uint64_t)v56, v57, v58, v59, v60);
  v125 = v507;
  v507 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 1)
      WTF::fastFree(v125, v124);
    else
      --*(_DWORD *)v125;
  }
  v126 = advances.size.width;
  advances.size.width = 0.0;
  if (v126 != 0.0)
    WTF::RefCounted<WebCore::Font>::deref(*(WebCore::Font **)&v126);
  if (*(_QWORD *)&advances.origin.y)
    WTF::RefCounted<WebCore::Font>::deref(*(WebCore::Font **)&advances.origin.y);
  if (*(_QWORD *)&advances.origin.x)
    WTF::RefCounted<WebCore::Font>::deref(*(WebCore::Font **)&advances.origin.x);
  WebCore::AdvanceInternalState::~AdvanceInternalState((WebCore::AdvanceInternalState *)&v513, v124);
  if (*(_DWORD *)v499 == 1)
  {
    WebCore::Font::~Font((WTF **)v499);
    WTF::fastFree(v333, v334);
  }
  else
  {
    --*(_DWORD *)v499;
  }
  v128 = (unsigned int *)v528;
  v528 = 0;
  if (v128)
  {
    v129 = *v128 - 1;
    if (*v128 != 1)
      goto LABEL_161;
    v345 = v128[1];
    if ((_DWORD)v345)
    {
      v346 = (WTF::StringImpl **)(v128 + 2);
      v347 = 8 * v345;
      do
      {
        v348 = *v346;
        *v346 = 0;
        if (v348)
        {
          if (*(_DWORD *)v348 == 2)
            WTF::StringImpl::destroy(v348, v127);
          else
            *(_DWORD *)v348 -= 2;
        }
        ++v346;
        v347 -= 8;
      }
      while (v347);
    }
LABEL_475:
    WTF::fastFree((WTF *)v128, v127);
    v91 = (uint64_t)v497;
  }
LABEL_162:
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v526, v127);
  v130 = 16 * v15;
  if (v15 < *((unsigned int *)a3 + 3))
  {
    if (*((unsigned int *)a3 + 2571) <= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x19419F218);
    }
    v131 = *(float *)(v10 + 52);
    v132 = *((_QWORD *)a3 + 1284);
    v133 = *(double *)(v132 + 16 * v15);
    *(double *)(v132 + 16 * v15) = (float)(v131 + v133);
    *(float *)(v10 + 56) = v131 + *(float *)(v10 + 56);
    *(_DWORD *)(v10 + 52) = 0;
  }
  v134 = *(WebCore::FontCascade **)v10;
  this = *(_QWORD *)v10 + 200;
  v135 = *(unsigned __int8 *)(*(_QWORD *)v10 + 204);
  if (v135 != 4)
  {
    if (v135 == 3)
    {
      if (*((_BYTE *)v134 + 206))
        v449 = *(float *)this;
      else
        v449 = (float)*(int *)this;
      v136 = (float)(v449 / 100.0) * *((float *)v134 + 43);
      goto LABEL_808;
    }
    if (v135 == 11)
    {
      this = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)this, *((float *)v134 + 43));
LABEL_808:
      v91 = (uint64_t)v497;
      goto LABEL_168;
    }
    v91 = (uint64_t)v497;
LABEL_170:
    this = (uint64_t)v134 + 208;
    v137 = *((unsigned __int8 *)v134 + 212);
    if (v137 == 4)
    {
      if (*((_BYTE *)v134 + 214))
        v138 = *(float *)this;
      else
        v138 = (float)*(int *)this;
    }
    else if (v137 == 3)
    {
      if (*((_BYTE *)v134 + 214))
        v446 = *(float *)this;
      else
        v446 = (float)*(int *)this;
      v138 = (float)(v446 / 100.0) * *((float *)v134 + 43);
      v91 = (uint64_t)v497;
    }
    else
    {
      v91 = (uint64_t)v497;
      if (v137 != 11)
      {
LABEL_174:
        if (*(float *)(v10 + 60) != 0.0)
          goto LABEL_380;
        v139 = *(_QWORD *)(v10 + 8);
        goto LABEL_176;
      }
      this = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)this, *((float *)v134 + 43));
    }
    if (v138 != 0.0)
      goto LABEL_380;
    goto LABEL_174;
  }
  if (*((_BYTE *)v134 + 206))
    v136 = *(float *)this;
  else
    v136 = (float)*(int *)this;
LABEL_168:
  if (v136 == 0.0)
  {
    v134 = *(WebCore::FontCascade **)v10;
    goto LABEL_170;
  }
LABEL_380:
  v139 = *(_QWORD *)(v10 + 8);
  if ((*(_BYTE *)(v139 + 37) & 0x10) != 0)
  {
LABEL_176:
    if (!*(_BYTE *)(v10 + 85) && *(float *)(v139 + 28) == 1.0)
      goto LABEL_178;
  }
  v272 = *(_QWORD *)(v139 + 8);
  if (!v272 || (v273 = *(unsigned int *)(v272 + 4), !(_DWORD)v273))
  {
    v275 = 0;
    v273 = 0;
LABEL_609:
    v502 = 0;
    v281 = 0;
    goto LABEL_390;
  }
  if (v273 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x19419F390);
  }
  v274 = WTF::fastMalloc((WTF *)(12 * v273));
  v275 = (WebCore::Font *)v274;
  v276 = (_BYTE *)v274;
  do
  {
    *v276 = 0;
    v276[8] = 0;
    v276 += 12;
  }
  while (v276 != (_BYTE *)(v274 + 12 * v273));
  v277 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  if (!v277)
    goto LABEL_609;
  v278 = *(unsigned int *)(v277 + 4);
  if (!(_DWORD)v278)
    goto LABEL_609;
  if (v278 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x19419F398);
  }
  v279 = (WebCore::Font *)v274;
  v502 = *(unsigned int *)(v277 + 4);
  v280 = 4 * v278;
  v281 = (void *)WTF::fastMalloc((WTF *)(4 * v278));
  bzero(v281, v280);
  v275 = v279;
LABEL_390:
  v282 = *((unsigned int *)a3 + 3);
  v283 = v496;
  if (v282 <= v15)
  {
    v287 = v502;
  }
  else
  {
    v284 = 16 * v15;
    v285 = v15;
    v286 = v15 | (v15 << 32);
    v287 = v502;
    do
    {
      v288 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
      if (v288)
        v289 = *(unsigned int *)(v288 + 4);
      else
        v289 = 0;
      if (v285 >= *((unsigned int *)v497 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19419F350);
      }
      v290 = *(_QWORD *)(*(_QWORD *)v497 + 8 * v285);
      if (v290 < v289)
      {
        if (v285 >= *((unsigned int *)a3 + 2571))
        {
          __break(0xC471u);
          JUMPOUT(0x19419F358);
        }
        if (v502 <= v290)
        {
          __break(0xC471u);
          JUMPOUT(0x19419F360);
        }
        v291 = *(double *)(*((_QWORD *)a3 + 1284) + v284);
        *((float *)v281 + v290) = *((float *)v281 + v290) + v291;
        if (v273 <= v290)
        {
          __break(0xC471u);
          JUMPOUT(0x19419F368);
        }
        v292 = (char *)v275 + 12 * v290;
        if (v292[8])
        {
          *((_DWORD *)v292 + 1) = v285;
        }
        else
        {
          *(_QWORD *)v292 = v286;
          v292[8] = 1;
          v282 = *((unsigned int *)a3 + 3);
        }
      }
      ++v285;
      v286 += 0x100000001;
      v284 += 16;
    }
    while (v285 < v282);
  }
  v293 = *(_QWORD *)(v10 + 8);
  if (*(float *)(v293 + 28) != 1.0 && v282 > v15)
  {
    v425 = v275;
    v426 = 16 * v15;
    v427 = v15;
    do
    {
      v428 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
      if (v428)
        v429 = *(unsigned int *)(v428 + 4);
      else
        v429 = 0;
      if (v427 >= *((unsigned int *)v497 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x19419F3C4);
      }
      v430 = *(_QWORD *)(*(_QWORD *)v497 + 8 * v427);
      if (v430 >= v429 || WebCore::TextRun::operator[](v428, v430) != 9)
      {
        if (v427 >= *((unsigned int *)a3 + 2571))
        {
          __break(0xC471u);
          JUMPOUT(0x19419F3CCLL);
        }
        v431 = *((_QWORD *)a3 + 1284);
        v432 = *(double *)(v431 + v426);
        *(double *)(v431 + v426) = (float)((float)((float)(*(float *)(*(_QWORD *)(v10 + 8) + 28) * v432) - v432) + v432);
      }
      ++v427;
      v426 += 16;
    }
    while (v427 < *((unsigned int *)a3 + 3));
    v293 = *(_QWORD *)(v10 + 8);
    v283 = v496;
    v275 = v425;
    v287 = v502;
  }
  *(float *)&v3 = v16 + *(float *)(v293 + 24);
  if (v273 <= (unint64_t)v283)
    v295 = v283;
  else
    v295 = (WebCore::ScrollbarsController *)v273;
  LODWORD(v4) = 0;
  while (2)
  {
    if (v283 == v295)
    {
      __break(0xC471u);
      JUMPOUT(0x19419F340);
    }
    v296 = (unsigned int *)((char *)v275 + 12 * (_QWORD)v283);
    if (!*((_BYTE *)v296 + 8))
      goto LABEL_437;
    v297 = *(_QWORD *)(v10 + 8);
    v298 = *(_QWORD *)(v297 + 8);
    if (!v298 || *(_DWORD *)(v298 + 4) <= v283)
      goto LABEL_589;
    v299 = *(_QWORD *)(v298 + 8);
    if ((*(_BYTE *)(v298 + 16) & 4) != 0)
      v214 = *(unsigned __int8 *)(v299 + v283);
    else
      v214 = *(unsigned __int16 *)(v299 + 2 * v283);
    v300 = *v296;
    v246 = v296[1];
    LODWORD(v5) = 0;
    v301 = v283;
    if (v214 == 9 && (*(_BYTE *)(v297 + 37) & 1) != 0)
    {
      v496 = v295;
      v499 = v275;
      if (*((_DWORD *)a3 + 3) <= v246)
      {
        __break(0xC471u);
        JUMPOUT(0x19419F378);
      }
      v415 = WebCore::FontCascade::tabWidth(*(_QWORD *)v10, *(_QWORD *)(*(_QWORD *)a3 + 8 * v246), v297 + 16, 1, *(float *)&v3);
      if (*((_DWORD *)a3 + 2571) <= v246)
      {
        __break(0xC471u);
        JUMPOUT(0x19419F380);
      }
      v416 = *(double *)(*((_QWORD *)a3 + 1284) + 16 * v246);
      *(float *)&v5 = (float)(v415 - v416) + 0.0;
      v275 = v499;
      v287 = v502;
      v295 = v496;
    }
    v302 = *(WebCore::FontCascade **)v10;
    v303 = (WebCore::Length *)(*(_QWORD *)v10 + 200);
    v304 = *(unsigned __int8 *)(*(_QWORD *)v10 + 204);
    if (v304 != 4)
    {
      v496 = v295;
      v499 = v275;
      if (v304 == 3)
      {
        if (*((_BYTE *)v302 + 206))
          v469 = *(float *)v303;
        else
          v469 = (float)*(int *)v303;
        v305 = (float)(v469 / 100.0) * *((float *)v302 + 43);
        goto LABEL_867;
      }
      if (v304 == 11)
      {
        WebCore::Length::nonNanCalculatedValue(v303, *((float *)v302 + 43));
LABEL_867:
        v275 = v499;
        v287 = v502;
        v295 = v496;
        goto LABEL_420;
      }
      v287 = v502;
LABEL_422:
      v306 = (WebCore::FontCascade *)((char *)v302 + 208);
      v307 = *((unsigned __int8 *)v302 + 212);
      if (v307 == 4)
      {
        if (*((_BYTE *)v302 + 214))
          v308 = *(float *)v306;
        else
          v308 = (float)*(int *)v306;
      }
      else
      {
        v496 = v295;
        v499 = v275;
        if (v307 == 3)
        {
          if (*((_BYTE *)v302 + 214))
            v468 = *(float *)v306;
          else
            v468 = (float)*(int *)v306;
          v308 = (float)(v468 / 100.0) * *((float *)v302 + 43);
          v287 = v502;
        }
        else
        {
          v287 = v502;
          if (v307 != 11)
            goto LABEL_426;
          WebCore::Length::nonNanCalculatedValue(v306, *((float *)v302 + 43));
          v295 = v496;
          v275 = v499;
          v287 = v502;
        }
      }
      if (v308 != 0.0)
        goto LABEL_442;
LABEL_426:
      LODWORD(v6) = 0;
      if (*(float *)(v10 + 60) != 0.0)
        goto LABEL_442;
LABEL_427:
      v309 = 0.0;
      v283 = v301;
      goto LABEL_428;
    }
    if (*((_BYTE *)v302 + 206))
      v305 = *(float *)v303;
    else
      v305 = (float)*(int *)v303;
LABEL_420:
    if (v305 == 0.0)
    {
      v302 = *(WebCore::FontCascade **)v10;
      goto LABEL_422;
    }
LABEL_442:
    LODWORD(v6) = 0;
    if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + 37) & 0x10) != 0)
      goto LABEL_427;
    v320 = 1;
    _ZF = v214 > 0x20 || ((1 << v214) & 0x100000600) == 0;
    if (_ZF)
    {
      v283 = v301;
      if (v214 != 160)
        v320 = 0;
    }
    else
    {
      v283 = v301;
    }
    if (v246 >= v300)
    {
      v379 = *((_DWORD *)a3 + 2571);
      _CF = v379 >= v300;
      v380 = v379 - v300;
      if (!_CF)
        v380 = 0;
      if (v380 <= (int)v246 - (int)v300)
      {
        __break(0xC471u);
        JUMPOUT(0x19419F370);
      }
      v326 = v246 - v300 + 1;
      v322 = (double *)(*((_QWORD *)a3 + 1284) + 16 * v300);
      v325 = 0.0;
      do
      {
        v323 = *v322;
        v322 += 2;
        v324 = v323;
        v325 = v325 + v324;
        --v326;
      }
      while (v326);
      if (v325 != 0.0)
      {
        v327 = *(WebCore::FontCascade **)v10;
        v328 = (WebCore::Length *)(*(_QWORD *)v10 + 200);
        v329 = *(unsigned __int8 *)(*(_QWORD *)v10 + 204);
        if (v329 == 4)
        {
          if (*((_BYTE *)v327 + 206))
            v330 = *(float *)v328;
          else
            v330 = (float)*(int *)v328;
        }
        else
        {
          LODWORD(v499) = v320;
          v246 = (int64_t)v295;
          v474 = v275;
          if (v329 == 3)
          {
            if (*((_BYTE *)v327 + 206))
              v476 = *(float *)v328;
            else
              v476 = (float)*(int *)v328;
            v330 = (float)(v476 / 100.0) * *((float *)v327 + 43);
            v287 = v502;
          }
          else
          {
            v330 = 0.0;
            v287 = v502;
            if (v329 == 11)
            {
              WebCore::Length::nonNanCalculatedValue(v328, *((float *)v327 + 43));
              v320 = (int)v499;
              v295 = (WebCore::ScrollbarsController *)v246;
              v287 = v502;
              v275 = v474;
            }
          }
        }
        *(float *)&v5 = *(float *)&v5 + v330;
      }
      v283 = v301;
    }
    if (v320 && (v214 != 9 || (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 37) & 1) == 0) && (v283 || v214 == 160))
    {
      v394 = *(WebCore::FontCascade **)v10;
      v395 = (WebCore::Length *)(*(_QWORD *)v10 + 208);
      v396 = *(unsigned __int8 *)(*(_QWORD *)v10 + 212);
      if (v396 != 4)
      {
        LODWORD(v499) = v320;
        v246 = (int64_t)v295;
        v475 = v275;
        if (v396 == 3)
        {
          if (*((_BYTE *)v394 + 214))
            v477 = *(float *)v395;
          else
            v477 = (float)*(int *)v395;
          v397 = (float)(v477 / 100.0) * *((float *)v394 + 43);
        }
        else
        {
          if (v396 != 11)
          {
            v283 = v301;
            v287 = v502;
            goto LABEL_450;
          }
          WebCore::Length::nonNanCalculatedValue(v395, *((float *)v394 + 43));
        }
        v275 = v475;
        v287 = v502;
        v295 = (WebCore::ScrollbarsController *)v246;
        v320 = (int)v499;
        goto LABEL_563;
      }
      if (*((_BYTE *)v394 + 214))
        v397 = *(float *)v395;
      else
        v397 = (float)*(int *)v395;
LABEL_563:
      if (v397 == 0.0)
      {
        v283 = v301;
      }
      else
      {
        v443 = v275;
        v246 = (int64_t)v295;
        LODWORD(v499) = v320;
        v444 = WebCore::FontCascade::wordSpacing(*(WebCore::FontCascade **)v10);
        v320 = (int)v499;
        v295 = (WebCore::ScrollbarsController *)v246;
        v287 = v502;
        v275 = v443;
        v283 = v301;
        *(float *)&v5 = *(float *)&v5 + v444;
      }
    }
LABEL_450:
    if (*(float *)(v10 + 60) <= 0.0)
    {
      v309 = 0.0;
      goto LABEL_428;
    }
    v437 = v320;
    v496 = v295;
    v499 = v275;
    if (*(_BYTE *)(v10 + 28))
      v438 = v301 == (WebCore::ScrollbarsController *)*(unsigned int *)(v10 + 24);
    else
      v438 = 0;
    if (*(_BYTE *)(v10 + 84))
      v439 = v301 == 0;
    else
      v439 = v438;
    if (!*(_BYTE *)(v10 + 84))
      v438 = v301 == 0;
    LODWORD(v495) = v438 && (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 36) & 3) == 2;
    v246 = v439 && (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 36) & 0xC) == 8;
    LODWORD(v490) = v438 && (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 36) & 3) == 0;
    v494 = v439 && (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 36) & 0xC) == 0;
    CanBeActive = WebCore::ScrollbarsController::scrollbarsCanBeActive(v283);
    if (CanBeActive)
      CanBeActive = WebCore::FontCascade::isCJKIdeographOrSymbol(v214);
    if ((v437 | CanBeActive | v495 | v246) == 1)
    {
      if (v437)
      {
        if (*(_BYTE *)(v10 + 84))
        {
          v441 = 1;
          v442 = 1;
          if (!*(_BYTE *)(v10 + 86))
            goto LABEL_787;
LABEL_786:
          CanBeActive = 0;
          v442 = v441;
          goto LABEL_787;
        }
        if (*(_BYTE *)(v10 + 86))
          v442 = 0;
        else
          v442 = CanBeActive;
        CanBeActive = 1;
      }
      else
      {
        if (*(_BYTE *)(v10 + 86))
          v442 = 0;
        else
          v442 = CanBeActive;
        if (*(_BYTE *)(v10 + 84))
        {
          v441 = CanBeActive;
          if (*(_BYTE *)(v10 + 86))
            goto LABEL_786;
        }
      }
LABEL_787:
      _ZF = v442 == 0;
      v447 = (char)v490;
      if (_ZF)
        v447 = 1;
      if ((v495 & 1) != 0 || (v309 = 0.0, (v447 & 1) == 0))
        v309 = *(float *)(v10 + 64) + 0.0;
      v448 = v494;
      if (!CanBeActive)
        v448 = 1;
      if ((v246 & 1) != 0 || (LODWORD(v6) = 0, (v448 & 1) == 0))
        *(float *)&v6 = *(float *)(v10 + 64) + 0.0;
    }
    else
    {
      v309 = 0.0;
    }
    v283 = v301;
    v275 = v499;
    v287 = v502;
    v295 = v496;
LABEL_428:
    if (!*((_BYTE *)v296 + 8))
    {
      v451 = (WTF *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_824:
      v452 = 0;
LABEL_819:
      v453 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v451, v452);
LABEL_820:
      v180 = v3;
      v454 = v4;
      v455 = v5;
      v182 = v6;
      v456 = -(float)(v454 + v182);
      v457 = (float *)(v453 + 16 * (v214 & 0xF));
      *v457 = v180;
      v457[1] = v456;
      v485 = v456;
      v181 = *(float *)&v502 + v455;
      v457[2] = *(float *)&v502 + v455;
      v457[3] = v182;
LABEL_335:
      if (*(_DWORD *)v246 == 1)
      {
        WebCore::Font::~Font((WTF **)v246);
        WTF::fastFree(v331, v332);
      }
      else
      {
        --*(_DWORD *)v246;
      }
      if (!v524)
        *(float *)(v10 + 76) = fmaxf(-v180, v41);
LABEL_302:
      if (*(_BYTE *)(v10 + 90) && !WebCore::FontCascade::canReceiveTextEmphasis(v130))
        LOWORD(v214) = -1;
      v91 = (uint64_t)v497;
      v236 = v516;
      v237 = v524;
      advances.origin.x = v8;
      advances.origin.y = 0.0;
      v534 = v214;
      v533 = v524;
      *(_QWORD *)glyphs = v516;
      v238 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v238 == *((_DWORD *)a3 + 2))
      {
        WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)a3, (unint64_t)glyphs);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v238) = v516;
        *((_DWORD *)a3 + 3) = v238 + 1;
      }
      v239 = *((unsigned int *)a3 + 2055);
      if ((_DWORD)v239 == *((_DWORD *)a3 + 2054))
      {
        WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)v480, (unint64_t)&v534);
      }
      else
      {
        *(_WORD *)(*((_QWORD *)a3 + 1026) + 2 * v239) = v214;
        *((_DWORD *)a3 + 2055) = v239 + 1;
      }
      v240 = *((unsigned int *)a3 + 2571);
      v241 = v495;
      if ((_DWORD)v240 == *((_DWORD *)a3 + 2570))
      {
        WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)v479, (unint64_t)&advances);
        v241 = v495;
      }
      else
      {
        *(CGPoint *)(*((_QWORD *)a3 + 1284) + 16 * v240) = advances.origin;
        ++*((_DWORD *)a3 + 2571);
      }
      *(_QWORD *)glyphs = 0;
      v532 = 0;
      v242 = v241[1];
      if ((_DWORD)v242 == *v241)
      {
        WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)v488, (unint64_t)glyphs);
      }
      else
      {
        v243 = (_QWORD *)(*v488 + 16 * v242);
        *v243 = 0;
        v243[1] = 0;
        ++v241[1];
      }
      v244 = *((unsigned int *)v497 + 3);
      if ((_DWORD)v244 == *((_DWORD *)v497 + 2))
      {
        WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)v497, (unint64_t)&v533);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v497 + 8 * v244) = v237;
        *((_DWORD *)v497 + 3) = v244 + 1;
      }
      if (v130 >= 0x10000)
        WebCore::GlyphBuffer::add(a3, 0, v236, 0.0, v237 + 1);
      v177 = v499;
      v524 = v499;
      *(float *)(v10 + 56) = v8 + *(float *)(v10 + 56);
      if (*(_BYTE *)(v10 + 87))
      {
        v252.i32[0] = *(_QWORD *)(v10 + 68);
        v252.f32[1] = v485;
        v253.i32[1] = HIDWORD(*(_QWORD *)(v10 + 68));
        v253.f32[0] = v182 + v485;
        v254 = (int8x8_t)vcgt_f32(v253, v252);
        v252.f32[0] = v182 + v485;
        *(int8x8_t *)(v10 + 68) = vbsl_s8(v254, (int8x8_t)v252, *(int8x8_t *)(v10 + 68));
        *(float *)(v10 + 80) = fmaxf((float)(v181 + v180) - v8, v41);
      }
      while (1)
      {
        v245 = v505;
        v505 = 0;
        if (v245)
        {
          if (*(_DWORD *)v245 == 1)
            WTF::fastFree(v245, v197);
          else
            --*(_DWORD *)v245;
        }
        if (v177 >= v498)
        {
          v263 = v516;
          if (v516)
            ++*(_DWORD *)v516;
          v264 = (WTF **)v515;
          v515 = v263;
          if (v264)
          {
            if (*(_DWORD *)v264 == 1)
            {
              WebCore::Font::~Font(v264);
              WTF::fastFree(v362, v363);
            }
            else
            {
              --*(_DWORD *)v264;
            }
          }
          WebCore::WidthIterator::commitCurrentFontRange((WTF *)v10, (uint64_t)&v513, v198, (uint64_t)v199, v200, v201, v202, v203);
          v266 = v507;
          v507 = 0;
          if (v266)
          {
            if (*(_DWORD *)v266 == 1)
              WTF::fastFree(v266, v265);
            else
              --*(_DWORD *)v266;
          }
          v267 = *(WebCore::Font **)v509;
          *(_QWORD *)v509 = 0;
          if (v267)
            WTF::RefCounted<WebCore::Font>::deref(v267);
          if (*(_QWORD *)&v508.height)
            WTF::RefCounted<WebCore::Font>::deref(*(WebCore::Font **)&v508.height);
          if (*(_QWORD *)&v508.width)
            WTF::RefCounted<WebCore::Font>::deref(*(WebCore::Font **)&v508.width);
          WebCore::AdvanceInternalState::~AdvanceInternalState((WebCore::AdvanceInternalState *)&v513, v265);
          if (*(_DWORD *)v490 == 1)
          {
            WebCore::Font::~Font(v490);
            WTF::fastFree(v352, v353);
          }
          else
          {
            --*(_DWORD *)v490;
          }
          v128 = (unsigned int *)v528;
          v528 = 0;
          if (v128)
          {
            v129 = *v128 - 1;
            if (*v128 == 1)
            {
              v268 = v128[1];
              if ((_DWORD)v268)
              {
                v269 = (WTF::StringImpl **)(v128 + 2);
                v270 = 8 * v268;
                do
                {
                  v271 = *v269;
                  *v269 = 0;
                  if (v271)
                  {
                    if (*(_DWORD *)v271 == 2)
                      WTF::StringImpl::destroy(v271, v127);
                    else
                      *(_DWORD *)v271 -= 2;
                  }
                  ++v269;
                  v270 -= 8;
                }
                while (v270);
              }
              goto LABEL_475;
            }
LABEL_161:
            *v128 = v129;
          }
          goto LABEL_162;
        }
LABEL_238:
        v183 = &v489[v177 - v496];
        v184 = *v183;
        if ((v184 & 0xFC00) == 0xD800 && (_DWORD)v483 - v177 != 1 && (v398 = v183[1], (v398 & 0xFC00) == 0xDC00))
        {
          v184 = (v398 + ((_DWORD)v184 << 10) - 56613888);
          v185 = 2;
        }
        else
        {
          v185 = 1;
        }
        v186 = v184 - 9;
        *(_BYTE *)(v10 + 85) |= (_DWORD)v184 == 9;
        v524 = v177;
        v187 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
        if (v187)
          LODWORD(v187) = *(_DWORD *)(v187 + 4);
        v188 = v185 + v177;
        if (v185 + v177 == (_DWORD)v187)
        {
          *(_DWORD *)(v10 + 24) = v177;
          *(_BYTE *)(v10 + 28) = 1;
        }
        v492 = u_hasBinaryProperty(v184, UCHAR_DEFAULT_IGNORABLE_CODE_POINT);
        v189 = 1;
        LODWORD(v499) = v188;
        if (((1 << u_charType(v184)) & 0x1C0) != 0 || (v190 = MEMORY[0x19AEA861C](v184), v190 == (_DWORD)v184))
        {
          v191 = 0;
          v487 = 0;
        }
        else
        {
          v189 = 0;
          v487 = v190 & 0xFFFFFF00;
          v191 = v190;
        }
        v192 = *(WebCore::FontCascade **)v10;
        v193 = (*(unsigned __int16 *)(*(_QWORD *)v10 + 180) >> 12) & 3;
        v501 = v177;
        if (!v193)
          break;
        if (v193 == 2)
        {
          v194 = 2;
        }
        else
        {
          if (v193 == 3)
            break;
          v194 = 1;
        }
LABEL_250:
        v195 = (WebCore::FontCascade *)((char *)v192 + 16);
        v196 = (WebCore::FontCascadeFonts *)*((_QWORD *)v192 + 27);
        if (v196)
        {
          ++*(_DWORD *)v196;
          WebCore::FontCascadeFonts::glyphDataForCharacter((unint64_t)v196, (void *)v184, v195, 1, v194, (uint64_t)&v504);
          if (*(_DWORD *)v196 == 1)
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts(v196, v197);
            WTF::fastFree(v257, v258);
          }
          else
          {
            --*(_DWORD *)v196;
          }
        }
        else
        {
          WebCore::FontCascadeFonts::glyphDataForCharacter(0, (void *)v184, v195, 1, v194, (uint64_t)&v504);
        }
        v204 = (WebCore::Font *)v490;
        if (v505)
        {
          v204 = (WebCore::Font *)*((_QWORD *)v505 + 1);
          if (!v204)
            v204 = (WebCore::Font *)v490;
        }
        v205 = v513;
        ++*(_DWORD *)v204;
        v206 = (WTF **)v514;
        v513 = v204;
        v514 = v205;
        if (v206)
        {
          if (*(_DWORD *)v206 == 1)
          {
            WebCore::Font::~Font(v206);
            WTF::fastFree(v259, v260);
          }
          else
          {
            --*(_DWORD *)v206;
          }
        }
        v207 = v510;
        v208 = v512;
        if (!v511 && v510)
        {
          if ((unint64_t)v513 + 1 < 2)
            goto LABEL_671;
          if (v512)
          {
            if (v186 >= 0x18 || ((0x80001Fu >> v186) & 1) == 0)
            {
LABEL_774:
              v210 = !WebCore::Font::variantCapsSupportedForSynthesis((uint64_t)v513, v510, v198, v199);
              goto LABEL_672;
            }
          }
          else if ((v189 & 1) == 0)
          {
            goto LABEL_774;
          }
LABEL_671:
          v210 = 0;
LABEL_672:
          v509[10] = v210;
          v209 = v508.height;
          v433 = v210;
          goto LABEL_673;
        }
        v509[10] = 0;
        v209 = v508.height;
        v210 = 0;
        if (!v510)
        {
          v211 = v509[9];
          v130 = v184;
          goto LABEL_263;
        }
        v433 = 0;
LABEL_673:
        if (v209 == 0.0 && (v433 & 1) == 0)
        {
          v212 = v514;
          v130 = v184;
          goto LABEL_326;
        }
        v211 = v509[8];
        if (v189)
          v436 = v208;
        else
          v436 = 1;
        if (v189)
          v130 = v184;
        else
          v130 = v487 | v191;
        v509[9] = v509[8];
        v509[8] = v436;
LABEL_263:
        if (v209 != 0.0 && !v211)
        {
          v212 = *(WebCore::Font **)&v209;
LABEL_268:
          ++*(_DWORD *)v212;
          goto LABEL_269;
        }
        if (v209 != 0.0)
        {
          v212 = *(WebCore::Font **)v509;
          goto LABEL_267;
        }
        v212 = v514;
LABEL_326:
        v209 = 0.0;
LABEL_267:
        if (v212)
          goto LABEL_268;
LABEL_269:
        v213 = (WTF **)v515;
        v515 = v212;
        if (v213)
        {
          if (*(_DWORD *)v213 == 1)
          {
            WebCore::Font::~Font(v213);
            WTF::fastFree(v261, v262);
          }
          else
          {
            --*(_DWORD *)v213;
          }
        }
        if (v513 != v514 || v509[8] != v509[9])
        {
          WebCore::WidthIterator::commitCurrentFontRange((WTF *)v10, (uint64_t)&v513, v198, (uint64_t)v199, v200, v201, v202, v203);
          if (v207)
          {
            if (v513 != v514)
            {
              WebCore::SmallCapsState::clear((WebCore::SmallCapsState *)&v508);
              v210 = v509[10];
            }
            if (v210)
              WebCore::SmallCapsState::setSmallCapsData((WTF ***)&v508, (WTF **)v513, (const WebCore::FontDescription *)v526);
          }
          v209 = v508.height;
          if (!v509[8])
          {
            v349 = v508.height;
            if (*(_QWORD *)&v508.height)
              goto LABEL_482;
          }
          v350 = &v513;
          if (*(_QWORD *)&v508.height)
            v350 = v484;
          v349 = *(double *)v350;
          if (v349 != 0.0)
LABEL_482:
            ++**(_DWORD **)&v349;
          v351 = (WTF **)v516;
          v516 = *(WebCore::Font **)&v349;
          if (v351)
          {
            if (*(_DWORD *)v351 == 1)
            {
              WebCore::Font::~Font(v351);
              WTF::fastFree(v377, v378);
            }
            else
            {
              --*(_DWORD *)v351;
            }
          }
          v525 = v524;
          v207 = v510;
        }
        if (v207 && v209 == 0.0 && v509[10])
        {
          WebCore::SmallCapsState::setSmallCapsData((WTF ***)&v508, (WTF **)v513, (const WebCore::FontDescription *)v526);
          v421 = v518;
          v91 = (uint64_t)v497;
          v177 = v501;
          if (v498 > v525)
            v177 = v525;
          v422 = *(_DWORD **)v517;
          *(_DWORD *)(*(_QWORD *)v517 + 12) = v518;
          v422[2055] = v421;
          v422[2571] = v421;
          v422[6671] = v421;
          v422[10771] = v421;
        }
        else
        {
          if (*(_BYTE *)(v10 + 84))
            v130 = MEMORY[0x19AEA8598](v130);
          v214 = v504;
          v215 = v505;
          if (v505)
            v215 = (WebCore::Font *)*((_QWORD *)v505 + 1);
          v216 = v516;
          if (v516 != v215 || (_DWORD)v184 != (_DWORD)v130)
          {
            ++*(_DWORD *)v516;
            *(_QWORD *)&advances.origin.x = v216;
            v214 = WebCore::Font::glyphForCharacter((uint64_t)v216, (void *)v130);
            WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::~Ref((WTF ***)&advances);
          }
          if (v214 || !v492)
          {
            v217 = v516;
            ++*(_DWORD *)v516;
            v218 = v214 >> 4;
            if (*((unsigned __int16 *)v217 + 167) != v214)
              goto LABEL_284;
            if (v214)
            {
              v8 = 0.0;
              if ((*((_BYTE *)v217 + 256) & 2) == 0)
                goto LABEL_293;
LABEL_284:
              v219 = (uint64_t)v217 + 128;
              v220 = v214 >> 4;
              if (v214 >= 0x10)
              {
                v222 = (uint64_t *)((char *)v217 + 200);
                v221 = *((_QWORD *)v217 + 25);
                if (v221
                  || (WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)v217 + 25, 8u, 0), v219 = (uint64_t)v217 + 128, (v221 = *v222) != 0))
                {
                  v223 = *(_DWORD *)(v221 - 8);
                }
                else
                {
                  v223 = 0;
                }
                v224 = 9 * ((~(v218 << 15) + v218) ^ ((~(v218 << 15) + v218) >> 10));
                v225 = (v224 ^ (v224 >> 6)) + ~((v224 ^ (v224 >> 6)) << 11);
                v226 = v223 & (v225 ^ HIWORD(v225));
                v227 = v221 + 16 * v226;
                v228 = *(_DWORD *)v227;
                if (*(_DWORD *)v227)
                {
                  v229 = 0;
                  v230 = 1;
                  while (v228 != v218)
                  {
                    if (v228 == -1)
                      v229 = (_QWORD *)v227;
                    v226 = (v226 + v230) & v223;
                    v227 = v221 + 16 * v226;
                    v228 = *(_DWORD *)v227;
                    ++v230;
                    if (!*(_DWORD *)v227)
                    {
                      v503 = v219;
                      if (v229)
                      {
                        *v229 = 0;
                        v229[1] = 0;
                        --*(_DWORD *)(*v222 - 16);
                        v227 = (uint64_t)v229;
                      }
                      goto LABEL_546;
                    }
                  }
LABEL_290:
                  v231 = *(char **)(v227 + 8);
LABEL_291:
                  v232 = *(float *)&v231[4 * (v214 & 0xF)];
                  if (v232 == v7)
                  {
                    glyphs[0] = v214;
                    advances.origin = (CGPoint)*MEMORY[0x1E0C9D820];
                    if (*((float *)v217 + 24) != 0.0)
                    {
                      v369 = v219;
                      v370 = kCTFontOrientationHorizontal;
                      if (*((_BYTE *)v217 + 100))
                      {
                        if ((*((_BYTE *)v217 + 344) & 4) != 0)
                          v370 = kCTFontOrientationHorizontal;
                        else
                          v370 = kCTFontOrientationVertical;
                      }
                      CTFontGetAdvancesForGlyphs(*((CTFontRef *)v217 + 11), v370, glyphs, (CGSize *)&advances, 1);
                      v219 = v369;
                    }
                    x = advances.origin.x;
                    WebCore::GlyphMetricsMap<float>::locatePage(v219, v220);
                    *(float *)(v372 + 4 * (v214 & 0xF)) = x;
                    v8 = x + v41;
                  }
                  else
                  {
                    v8 = v232 + v41;
                  }
LABEL_293:
                  if (*(_DWORD *)v217 == 1)
                  {
                    WebCore::Font::~Font((WTF **)v217);
                    WTF::fastFree(v255, v256);
                  }
                  else
                  {
                    --*(_DWORD *)v217;
                  }
                  v520 = v8 + v520;
                  if (v130 <= 0x20 && ((1 << v130) & 0x100000600) != 0 || (_DWORD)v130 == 160)
                  {
                    LOBYTE(glyphs[0]) = (_DWORD)v130 == 32;
                    v233 = v8;
                    if ((_DWORD)v130 != 9)
                      v233 = *((float *)v516 + 84) + v41;
                    *(float *)&advances.origin.x = v233;
                    if (HIDWORD(v522) == (_DWORD)v522)
                    {
                      WTF::Vector<WebCore::OriginalAdvancesForCharacterTreatedAsSpace,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned int &,BOOL,float>((uint64_t)v482, v481, (char *)glyphs, (int *)&advances);
                    }
                    else
                    {
                      v234 = HIDWORD(v522) + 1;
                      v235 = (float *)&v521[16 * HIDWORD(v522)];
                      *(_QWORD *)v235 = v524;
                      *((_BYTE *)v235 + 8) = (_DWORD)v130 == 32;
                      v235[3] = v233;
                      HIDWORD(v522) = v234;
                    }
                  }
                  if (!*(_BYTE *)(v10 + 87))
                    goto LABEL_302;
                  v246 = (int64_t)v516;
                  ++*(_DWORD *)v516;
                  if (*(unsigned __int16 *)(v246 + 334) == v214)
                  {
                    v182 = 0.0;
                    v181 = 0.0;
                    v485 = 0.0;
                    v180 = 0.0;
                    if (v214)
                      goto LABEL_335;
                    v248 = (WTF **)(v246 + 208);
                    v247 = *(_BYTE **)(v246 + 208);
                    if (v247)
                      goto LABEL_350;
                  }
                  else
                  {
                    v248 = (WTF **)(v246 + 208);
                    v247 = *(_BYTE **)(v246 + 208);
                    if (v247)
                    {
                      if (v214 >= 0x10)
                      {
                        v249 = v214 >> 4;
                        goto LABEL_332;
                      }
LABEL_350:
                      if (*v247)
                      {
                        v250 = (uint64_t)(v247 + 4);
                      }
                      else
                      {
                        v249 = 0;
LABEL_332:
                        v250 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v247, v249);
                      }
                      v251 = (float *)(v250 + 16 * (v214 & 0xF));
                      v181 = v251[2];
                      if (v181 != v7)
                      {
                        v180 = *v251;
                        v485 = v251[1];
                        v182 = v251[3];
                        goto LABEL_335;
                      }
                    }
                  }
                  glyphs[0] = v214;
                  memset(&advances, 0, sizeof(advances));
                  if (*(_BYTE *)(v246 + 100))
                    v450 = kCTFontOrientationVertical;
                  else
                    v450 = kCTFontOrientationHorizontal;
                  BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*(_QWORD *)(v246 + 88), v450, glyphs, &advances, 1);
                  v3 = BoundingRectsForGlyphs.origin.x;
                  v4 = BoundingRectsForGlyphs.origin.y;
                  v5 = BoundingRectsForGlyphs.size.width;
                  v6 = BoundingRectsForGlyphs.size.height;
                  LODWORD(v502) = *(_DWORD *)(v246 + 340);
                  v451 = *(WTF **)(v246 + 208);
                  if (!v451)
                  {
                    v458 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
                    *v458 = 0u;
                    v458[1] = 0u;
                    v458[2] = 0u;
                    v458[3] = 0u;
                    v458[4] = 0u;
                    v458[5] = 0u;
                    v458[6] = 0u;
                    v458[7] = 0u;
                    v458[8] = 0u;
                    v458[9] = 0u;
                    v458[10] = 0u;
                    v458[11] = 0u;
                    v458[12] = 0u;
                    v458[13] = 0u;
                    v458[14] = 0u;
                    v458[15] = 0u;
                    v458[16] = 0u;
                    *(_QWORD *)&advances.origin.x = v458;
                    std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::operator=[abi:sn180100](v248, (WTF **)&advances);
                    std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::~unique_ptr[abi:sn180100]((WTF **)&advances, v459);
                    v451 = *v248;
                  }
                  if (v214 >= 0x10)
                  {
                    v452 = v214 >> 4;
                    goto LABEL_819;
                  }
                  if (*(_BYTE *)v451)
                  {
                    v453 = (uint64_t)v451 + 4;
                    goto LABEL_820;
                  }
                  goto LABEL_824;
                }
                v503 = v219;
LABEL_546:
                *(_DWORD *)v227 = v218;
                v383 = (_OWORD *)WTF::fastMalloc((WTF *)0x40);
                __asm { FMOV            V0.4S, #-1.0 }
                *v383 = _Q0;
                v383[1] = _Q0;
                v383[2] = _Q0;
                v383[3] = _Q0;
                v385 = *(WTF **)(v227 + 8);
                *(_QWORD *)(v227 + 8) = v383;
                if (v385)
                  WTF::fastFree(v385, v197);
                v386 = *v222;
                if (*v222)
                  v387 = *(_DWORD *)(v386 - 12) + 1;
                else
                  v387 = 1;
                v219 = v503;
                *(_DWORD *)(v386 - 12) = v387;
                v388 = *v222;
                if (*v222)
                  v389 = *(_DWORD *)(v388 - 12);
                else
                  v389 = 0;
                v390 = (*(_DWORD *)(v388 - 16) + v389);
                v391 = *(unsigned int *)(v388 - 4);
                if (v391 > 0x400)
                {
                  if (v391 > 2 * v390)
                    goto LABEL_290;
                }
                else
                {
                  if (3 * v391 > 4 * v390)
                    goto LABEL_290;
                  if (!(_DWORD)v391)
                  {
                    v392 = 8;
LABEL_556:
                    v227 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<float>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash((uint64_t *)v217 + 25, v392, (int *)v227);
                    v219 = v503;
                    goto LABEL_290;
                  }
                }
                v392 = (_DWORD)v391 << (6 * *(_DWORD *)(v388 - 12) >= (2 * v391));
                goto LABEL_556;
              }
            }
            else
            {
              v220 = 0;
              v219 = (uint64_t)v217 + 128;
            }
            v231 = (char *)v217 + 132;
            if (!*((_BYTE *)v217 + 128))
            {
              __asm { FMOV            V0.4S, #-1.0 }
              *(_OWORD *)((char *)v217 + 132) = _Q0;
              *(_OWORD *)((char *)v217 + 148) = _Q0;
              *(_OWORD *)((char *)v217 + 164) = _Q0;
              *(_OWORD *)((char *)v217 + 180) = _Q0;
              *((_BYTE *)v217 + 128) = 1;
            }
            goto LABEL_291;
          }
          WebCore::WidthIterator::commitCurrentFontRange((WTF *)v10, (uint64_t)&v513, v198, (uint64_t)v199, v200, v201, v202, v203);
          WebCore::addToGlyphBuffer(*(_QWORD **)v517, (WebCore::Font *)v490, v524, v130);
          v177 = v499;
          v524 = v499;
          WebCore::AdvanceInternalState::updateFont((WebCore::AdvanceInternalState *)&v513, (const WebCore::Font *)v490);
          v91 = (uint64_t)v497;
        }
      }
      if (v184 >= 0x100)
        v194 = 2 * (u_hasBinaryProperty(v184, UCHAR_EMOJI_PRESENTATION) != 0);
      else
        v194 = 0;
      goto LABEL_250;
    }
    v310 = *(_QWORD *)v296;
    v311 = HIDWORD(*(_QWORD *)v296);
    v312 = *(float *)(v10 + 60) - (float)(*(float *)&v6 + v309);
    v313 = v309 + 0.0;
    v314 = *(float *)&v6 + *(float *)&v5;
    v315 = (float)(*(float *)&v6 + *(float *)&v5) + (float)((float)(v309 + 0.0) + *(float *)(v10 + 56));
    *(float *)(v10 + 56) = v315;
    *(float *)(v10 + 60) = v312;
    if ((float)(v309 + 0.0) == 0.0)
      goto LABEL_430;
    if (*(_BYTE *)(v10 + 84))
    {
      v417 = v311 + 1;
      if ((v311 + 1) < *((_DWORD *)a3 + 3))
      {
        if (*((_DWORD *)a3 + 2571) <= v417)
        {
          __break(0xC471u);
          JUMPOUT(0x19419F388);
        }
        goto LABEL_621;
      }
      *(float *)(v10 + 52) = v313;
      *(float *)(v10 + 56) = v315 - v313;
    }
    else if ((_DWORD)v310)
    {
      v417 = v310 - 1;
      if (*((_DWORD *)a3 + 2571) <= v417)
      {
        __break(0xC471u);
        JUMPOUT(0x19419E720);
      }
LABEL_621:
      v418 = *((_QWORD *)a3 + 1284);
      v419 = 16 * v417;
      v420 = *(double *)(v418 + v419);
      *(double *)(v418 + v419) = (float)(v313 + v420);
    }
    else
    {
      v434 = *((double *)v497 + 1026);
      *((double *)v497 + 1026) = (float)(v313 + v434);
    }
    v283 = v301;
    v287 = v502;
LABEL_430:
    if (v314 != 0.0)
    {
      if (*((_DWORD *)a3 + 2571) <= v311)
      {
        __break(0xC471u);
        JUMPOUT(0x19419F330);
      }
      v316 = *((_QWORD *)a3 + 1284);
      v317 = 16 * v311;
      v318 = *(double *)(v316 + v317);
      *(double *)(v316 + v317) = (float)(v314 + v318);
    }
    v319 = *(float *)&v6;
    if (*(_BYTE *)(v10 + 84))
      v319 = v309;
    *(_BYTE *)(v10 + 86) = v319 != 0.0;
    if (v287 <= (unint64_t)v283)
    {
      __break(0xC471u);
      JUMPOUT(0x19419F338);
    }
    *(float *)&v3 = *(float *)&v3
                  + (float)(*(float *)&v6
                          + (float)(v309 + (float)(*(float *)&v5 + (float)(*((float *)v281 + (_QWORD)v283) + 0.0))));
LABEL_437:
    v283 = (WebCore::ScrollbarsController *)((char *)v283 + 1);
    if (v283 != v498)
      continue;
    break;
  }
  if (v281)
  {
    v414 = v275;
    WTF::fastFree((WTF *)v281, v275);
    v275 = v414;
  }
  this = WTF::fastFree(v275, v275);
  v91 = (uint64_t)v497;
LABEL_178:
  v140 = *(double *)(v91 + 8216);
  v526[0] = v140;
  v513 = a3;
  v514 = (WebCore::Font *)v10;
  *(double *)&v515 = COERCE_DOUBLE(v526);
  if (*((unsigned int *)a3 + 3) > v15)
  {
    while (2)
    {
      v141 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
      if (v141)
        v142 = *(unsigned int *)(v141 + 4);
      else
        v142 = 0;
      if (v15 >= *(unsigned int *)(v91 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x19419F16CLL);
      }
      v143 = *(_QWORD *)(*(_QWORD *)v91 + 8 * v15);
      if (v143 >= v142)
        goto LABEL_195;
      if (!v141 || *(_DWORD *)(v141 + 4) <= v143)
      {
        __break(0xC471u);
        JUMPOUT(0x19419DC3CLL);
      }
      v144 = *(_QWORD *)(v141 + 8);
      v145 = *(_QWORD *)(*(_QWORD *)v91 + 8 * v15);
      if ((*(_BYTE *)(v141 + 16) & 4) != 0)
        v146 = *(unsigned __int8 *)(v144 + v145);
      else
        v146 = *(unsigned __int16 *)(v144 + 2 * v145);
      if (v146 <= 12)
      {
        if (v146 != 10)
        {
          if (v146 == 9)
          {
            if (v15 >= *((unsigned int *)a3 + 2055))
            {
              __break(0xC471u);
              JUMPOUT(0x19419F258);
            }
            *(_WORD *)(*((_QWORD *)a3 + 1026) + 2 * v15) = -1;
            v150 = 0.0;
            *(float *)(v10 + 56) = *(float *)(v10 + 56) + 0.0;
            v149 = *((_QWORD *)a3 + 1284);
            v148 = *(double *)(v149 + v130);
            goto LABEL_194;
          }
          if (v146)
            goto LABEL_524;
LABEL_874:
          if (v15 >= *((unsigned int *)a3 + 2571))
          {
            __break(0xC471u);
            JUMPOUT(0x19419F260);
          }
          v472 = *((_QWORD *)a3 + 1284) + v130;
          v473 = *(double *)v472;
          *(float *)(v10 + 56) = *(float *)(v10 + 56) - v473;
          if (v15 >= *((unsigned int *)a3 + 2055))
          {
            __break(0xC471u);
            JUMPOUT(0x19419F268);
          }
          *(_WORD *)(*((_QWORD *)a3 + 1026) + 2 * v15) = -1;
          *(_QWORD *)v472 = 0;
          *(_QWORD *)(v472 + 8) = 0;
          goto LABEL_877;
        }
      }
      else
      {
        if (v146 == 160)
        {
          if (v15 >= *((unsigned int *)a3 + 2055))
          {
            __break(0xC471u);
            JUMPOUT(0x19419F18CLL);
          }
          if (*(__int16 *)(*((_QWORD *)a3 + 1026) + 2 * v15) != -1)
            goto LABEL_191;
LABEL_203:
          v148 = 0.0;
LABEL_193:
          *(float *)(v10 + 56) = v148 + *(float *)(v10 + 56);
          v149 = *((_QWORD *)a3 + 1284);
          v150 = *(double *)(v149 + v130);
LABEL_194:
          *(double *)(v149 + v130) = (float)(v148 + v150);
LABEL_195:
          if (v15 >= *((unsigned int *)a3 + 2571))
          {
            __break(0xC471u);
            JUMPOUT(0x19419F174);
          }
          v151 = *(double *)(*((_QWORD *)a3 + 1284) + v130 + 8);
          v526[0] = v526[0] + v151;
          ++v15;
          v130 += 16;
          if (v15 >= *((unsigned int *)a3 + 3))
            return this;
          continue;
        }
        if (v146 != 13)
        {
LABEL_524:
          if (u_charType(v146) != 15)
          {
            this = u_hasBinaryProperty(v146, UCHAR_DEFAULT_IGNORABLE_CODE_POINT);
            if ((_DWORD)this)
              goto LABEL_874;
            if (v146 == 65532)
            {
              this = WebCore::CocoaApplication::isIBooks((WebCore::CocoaApplication *)this);
              if ((_DWORD)this)
                goto LABEL_874;
            }
          }
          this = u_charType(v146);
          if ((_DWORD)this != 15)
          {
            if (v15 >= *((unsigned int *)a3 + 2055))
            {
              __break(0xC471u);
              JUMPOUT(0x19419F248);
            }
            if (*(__int16 *)(*((_QWORD *)a3 + 1026) + 2 * v15) == -1)
              goto LABEL_203;
            if (v15 >= *((unsigned int *)a3 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x19419DE74);
            }
LABEL_191:
            v147 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v15);
LABEL_192:
            v148 = *(float *)(v147 + 340);
            goto LABEL_193;
          }
          *(_WORD *)(*((_QWORD *)a3 + 1026) + 2 * v15) = 0;
          if (v15 >= *((unsigned int *)a3 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x19419F250);
          }
          v470 = *(float **)(*(_QWORD *)a3 + 8 * v15);
          v471 = WebCore::GlyphMetricsMap<float>::metricsForGlyph((uint64_t)(v470 + 32), 0);
          if (v471 == -1.0)
          {
            v471 = WebCore::Font::platformWidthForGlyph((WebCore::Font *)v470, 0);
            WebCore::GlyphMetricsMap<float>::locatePage((uint64_t)(v470 + 32), 0);
            *v478 = v471;
          }
          this = (uint64_t)WebCore::WidthIterator::applyCSSVisibilityRules(WebCore::GlyphBuffer &,unsigned int)::$_4::operator()<unsigned int,float>(&v513, v15, v471 + v470[85]);
LABEL_877:
          v91 = (uint64_t)v497;
          goto LABEL_195;
        }
      }
      break;
    }
    v147 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v15);
    if (*(_WORD *)(v147 + 332))
      *(_WORD *)(*((_QWORD *)a3 + 1026) + 2 * v15) = *(_WORD *)(v147 + 332);
    if (v15 >= *((unsigned int *)a3 + 2055))
    {
      __break(0xC471u);
      JUMPOUT(0x19419F194);
    }
    if (*(__int16 *)(*((_QWORD *)a3 + 1026) + 2 * v15) == -1)
      goto LABEL_203;
    goto LABEL_192;
  }
  return this;
}

WTF *WebCore::FontCascadeFonts::glyphDataForCharacter@<X0>(unint64_t a1@<X0>, void *a2@<X1>, const WebCore::FontCascadeDescription *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int16 v77;
  WebCore::FontCascadeFonts *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  WTF **v82;
  WTF *v83;
  int v84;
  uint64_t v85;
  _OWORD *v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  WTF *v96;
  WTF *v97;
  WTF *v98;
  WTF *v99;
  WTF *v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  WTF *result;
  uint64_t v108;
  WTF *v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  int *v119;
  int *v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int *v129;
  uint64_t v130;
  WTF **v131;
  WTF *v132;
  WTF *v133;
  WTF *v134;
  WTF *v135;
  WTF *v136;
  WTF *v137;
  WTF *v138;
  WTF *v139;
  WTF *v140;
  WTF *v141;
  WTF *v142;
  WTF *v143;
  WTF *v144;
  WTF *v145;
  WTF *v146;
  WTF *v147;
  WTF *v148;
  WTF *v149;
  WTF *v150;
  uint64_t v151;
  WTF **v152;
  WTF *v153;
  WTF *v154;
  WTF *v155;
  WTF *v156;
  WTF *v157;
  WTF *v158;
  WTF *v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  WTF *v163;
  WTF *v164;
  WTF *v165;
  WTF *v166;
  WTF *v167;
  WTF *v168;
  WTF *v169;
  WTF *v170;
  WTF *v171;
  WTF *v172;
  uint64_t v173;
  WebCore::MixedFontGlyphPage *v174;
  WTF *v175;
  void *v176;
  WTF *v177;
  WTF *v178;
  WTF *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  unsigned int v183;
  WTF *v184;
  int v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  _QWORD *v192;
  WTF *v193;
  int v194;
  int v195;
  WTF *v196;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  WebCore::FontCache *v201;
  WTF::StringImpl *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  WTF *v206;
  WTF *v207;
  uint64_t v208;
  _DWORD *v209;
  WTF *v210;
  WTF *v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  unint64_t v217;
  _WORD *v218;
  UniChar *v219;
  int v220;
  UniChar v221;
  UniChar v222;
  UniChar v223;
  UniChar v224;
  UniChar v225;
  UniChar v226;
  UniChar v227;
  UniChar v228;
  UniChar v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _DWORD **v233;
  _DWORD *v234;
  uint64_t v235;
  _DWORD **v236;
  _DWORD *v237;
  WTF *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF *v243;
  uint64_t v244;
  char *v245;
  WTF *v246;
  unint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  WTF *v254;
  WTF *v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  WTF *v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  WTF *v267;
  WTF *v268;
  WTF *v269;
  WebCore::Font *v270;
  _QWORD *v271;
  void *v272;
  WTF *v273;
  _QWORD *v274;
  WTF *v275;
  void *v276;
  WTF *v277;
  WTF *v278;
  WTF *v279;
  WTF *v280;
  int *v281;
  unsigned int v282;
  uint64_t v283;
  unint64_t v284;
  unsigned int v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v289;
  unsigned int v290;
  WTF **v291;
  WTF::StringImpl *v292;
  WTF *v293;
  WTF *v294;
  _QWORD v295[2];
  uint64_t v296;

  LODWORD(v9) = (_DWORD)a2;
  v11 = a6;
  if (a4 != 1)
    return WebCore::FontCascadeFonts::glyphDataForVariant(a6, (WebCore::FontCascadeFonts *)a1, (uint64_t)a2, (uint64_t)a3, a4, a5, 0);
  if (a5 >= 3)
  {
    __break(1u);
    goto LABEL_508;
  }
  v12 = (void *)(a2 >> 4);
  v13 = a1 + 72;
  v14 = *(_QWORD *)(a1 + 72 + 8 * a5);
  v285 = a5;
  v15 = a5;
  if (v14)
    goto LABEL_5;
  v16 = WTF::fastMalloc((WTF *)0xD0);
  *(_DWORD *)(v16 + 16) = -1;
  v16 += 16;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_DWORD *)(v16 + 24) = -1;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 48) = -1;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_DWORD *)(v16 + 72) = -1;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_DWORD *)(v16 + 96) = -1;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 112) = 0;
  *(_DWORD *)(v16 + 120) = -1;
  *(_QWORD *)(v16 + 128) = 0;
  *(_QWORD *)(v16 + 136) = 0;
  *(_DWORD *)(v16 + 144) = -1;
  *(_QWORD *)(v16 + 152) = 0;
  *(_QWORD *)(v16 + 160) = 0;
  *(_DWORD *)(v16 + 168) = -1;
  *(_QWORD *)(v16 + 176) = 0;
  *(_QWORD *)(v16 + 184) = 0;
  *(_QWORD *)(v13 + 8 * v15) = v16;
  *(_DWORD *)(v16 - 4) = 8;
  *(_DWORD *)(*(_QWORD *)(v13 + 8 * v15) - 8) = 7;
  *(_DWORD *)(*(_QWORD *)(v13 + 8 * v15) - 16) = 0;
  *(_DWORD *)(*(_QWORD *)(v13 + 8 * v15) - 12) = 0;
  v14 = *(_QWORD *)(v13 + 8 * v15);
  if (v14)
LABEL_5:
    v17 = *(_DWORD *)(v14 - 8);
  else
    v17 = 0;
  v18 = 9 * (((_DWORD)v12 + ~((_DWORD)v12 << 15)) ^ (((_DWORD)v12 + ~((_DWORD)v12 << 15)) >> 10));
  v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
  v20 = v19 ^ HIWORD(v19);
  v21 = v17 & v20;
  v22 = (int *)(v14 + 24 * (v17 & v20));
  v23 = *v22;
  v290 = v9;
  v289 = v11;
  v287 = a1;
  if (*v22 != -1)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v23 == (_DWORD)v12)
        goto LABEL_90;
      if (v23 == -2)
        v24 = v22;
      v21 = (v21 + v25) & v17;
      v22 = (int *)(v14 + 24 * v21);
      v23 = *v22;
      ++v25;
    }
    while (*v22 != -1);
    if (v24)
    {
      *v24 = -1;
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      --*(_DWORD *)(*(_QWORD *)(v13 + 8 * v15) - 16);
      v22 = v24;
    }
  }
  *v22 = (int)v12;
  v26 = (_DWORD *)(a1 + 8);
  v27 = *(unsigned int *)(a1 + 20);
  v284 = a1 + 72;
  v286 = v15;
  if ((_DWORD)v27)
  {
    v28 = *(_QWORD **)v26;
  }
  else
  {
    v295[0] = 0;
    v295[1] = 0;
    v296 = 0;
    v293 = (WTF *)v295;
    v294 = (WTF *)1;
    if (*(_DWORD *)(a1 + 16))
    {
      v180 = *(_QWORD *)v26;
      v181 = *(_QWORD **)v26;
      v182 = (_QWORD *)(*(_QWORD *)v26 + 16);
      *v181 = v181 + 2;
      v181[1] = 1;
      v183 = HIDWORD(v294);
      v184 = v293;
      if (HIDWORD(v294))
      {
        v254 = (WTF *)((char *)v293 + 16 * HIDWORD(v294));
        v255 = v293;
        do
        {
          *v182 = *(_QWORD *)v255;
          v256 = *((_QWORD *)v255 + 1);
          ++*(_DWORD *)(v256 + 8);
          v182[1] = v256;
          v255 = (WTF *)((char *)v255 + 16);
          v182 += 2;
        }
        while (v255 != v254);
      }
      v185 = 0;
      *(_BYTE *)(v180 + 32) = 0;
    }
    else
    {
      v247 = WTF::Vector<WebCore::FontRanges,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, v27 + 1, (unint64_t)&v293);
      v248 = *(_DWORD *)(a1 + 20);
      v249 = *(_QWORD *)(a1 + 8);
      v250 = v249 + 40 * v248;
      v251 = *(unsigned int *)(v247 + 12);
      v252 = (_QWORD *)(v250 + 16);
      *(_QWORD *)v250 = v250 + 16;
      *(_DWORD *)(v250 + 8) = 1;
      *(_DWORD *)(v250 + 12) = v251;
      if (v251 >= 2)
      {
        if (v251 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1941A11C4);
        }
        v252 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v251));
        *(_DWORD *)(v250 + 8) = v251;
        *(_QWORD *)v250 = v252;
      }
      v253 = *(unsigned int *)(v247 + 12);
      if ((_DWORD)v253)
      {
        v263 = *(_QWORD **)v247;
        v264 = *(_QWORD *)v247 + 16 * v253;
        do
        {
          *v252 = *v263;
          v265 = v263[1];
          ++*(_DWORD *)(v265 + 8);
          v252[1] = v265;
          v263 += 2;
          v252 += 2;
        }
        while (v263 != (_QWORD *)v264);
      }
      *(_BYTE *)(v249 + 40 * v248 + 32) = *(_BYTE *)(v247 + 32);
      v185 = *(_DWORD *)(a1 + 20);
      v183 = HIDWORD(v294);
      v184 = v293;
    }
    *(_DWORD *)(a1 + 20) = v185 + 1;
    if (v183)
    {
      v232 = 16 * v183;
      v233 = (_DWORD **)((char *)v184 + 8);
      do
      {
        v234 = *v233;
        *v233 = 0;
        if (v234)
        {
          if (v234[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v234 + 8))(v234);
          else
            --v234[2];
        }
        v233 += 2;
        v232 -= 16;
      }
      while (v232);
      v184 = v293;
    }
    if (v295 != (_QWORD *)v184 && v184 != 0)
    {
      v293 = 0;
      LODWORD(v294) = 0;
      WTF::fastFree(v184, a2);
    }
    v187 = *(unsigned int *)(a1 + 20);
    if (!(_DWORD)v187)
    {
      __break(0xC471u);
      JUMPOUT(0x1941A111CLL);
    }
    v188 = v187 - 1;
    v189 = *(_QWORD *)(a1 + 8);
    WebCore::realizeNextFallback((WebCore *)&v293, a3, (unsigned int *)(a1 + 64), *(WebCore::FontSelector **)(a1 + 112));
    v28 = (_QWORD *)(v189 + 40 * v188);
    v190 = *((unsigned int *)v28 + 3);
    if ((_DWORD)v190)
    {
      WTF::VectorTypeOperations<WebCore::FontRanges::Range>::destruct((_DWORD *)*v28, (_DWORD *)(*v28 + 16 * v190));
      v28 = (_QWORD *)(v189 + 40 * v188);
    }
    v192 = v28 + 2;
    v191 = (WTF *)*v28;
    if ((_QWORD *)*v28 != v28 + 2)
    {
      v271 = v28;
      if (v191)
      {
        *v28 = 0;
        *((_DWORD *)v28 + 2) = 0;
        WTF::fastFree(v191, a2);
      }
      v28 = v271;
      *v271 = v192;
    }
    v193 = v293;
    if (v293 == (WTF *)v295)
    {
      if (HIDWORD(v294))
      {
        v207 = (WTF *)((char *)v293 + 16 * HIDWORD(v294));
        do
        {
          *v192 = *(_QWORD *)v193;
          v208 = *((_QWORD *)v193 + 1);
          *((_QWORD *)v193 + 1) = 0;
          v192[1] = v208;
          v209 = (_DWORD *)*((_QWORD *)v193 + 1);
          *((_QWORD *)v193 + 1) = 0;
          if (v209)
          {
            if (v209[2] == 1)
            {
              v257 = v28;
              (*(void (**)(_DWORD *))(*(_QWORD *)v209 + 8))(v209);
              v28 = v257;
            }
            else
            {
              --v209[2];
            }
          }
          v193 = (WTF *)((char *)v193 + 16);
          v192 += 2;
        }
        while (v193 != v207);
      }
      v194 = (int)v294;
    }
    else
    {
      v293 = (WTF *)v295;
      *v28 = v193;
      v194 = (int)v294;
      LODWORD(v294) = 1;
    }
    *((_DWORD *)v28 + 2) = v194;
    v195 = HIDWORD(v294);
    HIDWORD(v294) = 0;
    *((_DWORD *)v28 + 3) = v195;
    *(_BYTE *)(v189 + 40 * v188 + 32) = v296;
    v196 = v293;
    LODWORD(v9) = v290;
    if (HIDWORD(v294))
    {
      v235 = 16 * HIDWORD(v294);
      v236 = (_DWORD **)((char *)v293 + 8);
      do
      {
        v237 = *v236;
        *v236 = 0;
        if (v237)
        {
          if (v237[2] == 1)
          {
            v258 = v28;
            (*(void (**)(_DWORD *))(*(_QWORD *)v237 + 8))(v237);
            v28 = v258;
          }
          else
          {
            --v237[2];
          }
        }
        v236 += 2;
        v235 -= 16;
      }
      while (v235);
      v196 = v293;
    }
    if (v295 != (_QWORD *)v196 && v196 != 0)
    {
      v293 = 0;
      LODWORD(v294) = 0;
      v274 = v28;
      v196 = (WTF *)WTF::fastFree(v196, a2);
      v28 = v274;
    }
    if (!*((_DWORD *)v28 + 3))
    {
      v198 = (uint64_t)v28;
      v199 = *(_QWORD *)(v287 + 112);
      if (!v199)
        goto LABEL_336;
      if (HIDWORD(qword_1EE2F9BE8) <= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1941A11BCLL);
      }
      WTF::AtomStringImpl::add();
      (*(void (**)(WTF **__return_ptr, uint64_t, const WebCore::FontCascadeDescription *, WTF::StringImpl **))(*(_QWORD *)v199 + 16))(&v293, v199, a3, &v292);
      WebCore::FontRanges::operator=(v198, &v293);
      WebCore::FontRanges::~FontRanges(&v293, v200);
      v196 = v292;
      v292 = 0;
      if (v196)
      {
        if (*(_DWORD *)v196 == 2)
          v196 = (WTF *)WTF::StringImpl::destroy(v196, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v196 -= 2;
      }
      if (!*(_DWORD *)(v198 + 12))
      {
LABEL_336:
        v201 = (WebCore::FontCache *)WebCore::FontCache::forCurrentThread(v196);
        WebCore::FontCache::lastResortFallbackFont(v201, a3, &v291);
        v202 = (WTF::StringImpl *)v291;
        v291 = 0;
        v292 = v202;
        WebCore::FontRanges::FontRanges((uint64_t)&v293, (uint64_t *)&v292);
        WebCore::FontRanges::operator=(v198, &v293);
        WebCore::FontRanges::~FontRanges(&v293, v203);
        if (v292)
          WTF::RefCounted<WebCore::Font>::deref(v292);
        WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::~Ref(&v291);
      }
      LODWORD(v9) = v290;
      v28 = (_QWORD *)v198;
    }
  }
  if (!*((_DWORD *)v28 + 3))
  {
LABEL_539:
    v50 = 0;
    v11 = v289;
    v41 = v284;
    goto LABEL_31;
  }
  v29 = v20;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = v9 & 0xFFFFFFF0;
  v34 = v9 | 0xF;
  v35 = 1;
  v282 = v9 & 0xFFFFFFF0;
  while (1)
  {
    if (*(_DWORD *)(*v28 + v30) > v33)
      goto LABEL_539;
    v36 = *v28 + v30;
    if (v34 > *(_DWORD *)(v36 + 4))
      goto LABEL_539;
    v37 = v31;
    v38 = v28;
    v39 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v36 + 8) + 16))(*(_QWORD *)(v36 + 8), v35 & 1);
    if (v39)
      break;
LABEL_538:
    v31 = v37 + 1;
    v28 = v38;
    v30 += 16;
    v33 = v282;
    if (v37 + 1 >= (unint64_t)*((unsigned int *)v38 + 3))
      goto LABEL_539;
  }
  v40 = v39;
  if ((*(_BYTE *)(v39 + 256) & 2) != 0)
  {
    v35 = 0;
    if (!v32)
    {
      if ((*(_BYTE *)(v39 + 256) & 4) != 0)
        v32 = 2;
      else
        v32 = 1;
    }
    goto LABEL_538;
  }
  v41 = v284;
  if (*(_BYTE *)(v39 + 100))
  {
    v50 = 0;
    v11 = v289;
    goto LABEL_31;
  }
  v11 = v289;
  if (v32 != 2 || (*(_BYTE *)(v39 + 256) & 4) != 0)
  {
    v43 = (uint64_t *)(v39 + 120);
    v42 = *(_QWORD *)(v39 + 120);
    if (v42
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(v39 + 120), 8u, 0), (v42 = *v43) != 0))
    {
      v44 = *(_DWORD *)(v42 - 8);
    }
    else
    {
      v44 = 0;
    }
    v45 = v44 & v29;
    v46 = v42 + 16 * (v44 & v29);
    v47 = *(_DWORD *)v46;
    if (*(_DWORD *)v46 != -1)
    {
      v48 = 0;
      v49 = 1;
      while (v47 != (_DWORD)v12)
      {
        if (v47 == -2)
          v48 = v46;
        v45 = (v45 + v49) & v44;
        v46 = v42 + 16 * v45;
        v47 = *(_DWORD *)v46;
        ++v49;
        if (*(_DWORD *)v46 == -1)
        {
          if (!v48)
            goto LABEL_374;
          *(_DWORD *)v48 = -1;
          *(_QWORD *)(v48 + 8) = 0;
          --*(_DWORD *)(*v43 - 16);
          *(_DWORD *)v48 = (_DWORD)v12;
          *(_QWORD *)(v48 + 8) = 0;
          v46 = v48;
          goto LABEL_377;
        }
      }
LABEL_29:
      v50 = *(_DWORD **)(v46 + 8);
      if (!v50)
        goto LABEL_31;
      goto LABEL_30;
    }
LABEL_374:
    v211 = *(WTF **)(v46 + 8);
    *(_DWORD *)v46 = (_DWORD)v12;
    *(_QWORD *)(v46 + 8) = 0;
    if (v211)
    {
      if (*(_DWORD *)v211 == 1)
      {
        --WebCore::GlyphPage::s_count;
        v267 = (WTF *)*((_QWORD *)v211 + 1);
        *((_QWORD *)v211 + 1) = 0;
        if (v267)
        {
          if (*(_DWORD *)v267 == 1)
            WTF::fastFree(v267, a2);
          else
            --*(_DWORD *)v267;
        }
        WTF::fastFree(v211, a2);
      }
      else
      {
        --*(_DWORD *)v211;
      }
    }
LABEL_377:
    v212 = *v43;
    if (*v43)
      v213 = *(_DWORD *)(v212 - 12) + 1;
    else
      v213 = 1;
    *(_DWORD *)(v212 - 12) = v213;
    v214 = *v43;
    if (*v43)
      v215 = *(_DWORD *)(v214 - 12);
    else
      v215 = 0;
    v216 = (*(_DWORD *)(v214 - 16) + v215);
    v217 = *(unsigned int *)(v214 - 4);
    if (v217 > 0x400)
    {
      if (v217 > 2 * v216)
        goto LABEL_383;
    }
    else
    {
      if (3 * v217 > 4 * v216)
      {
LABEL_383:
        if (v282 >= 0x600 && v290 + 16 <= 0x6FF && (*(_BYTE *)(v40 + 344) & 0x40) != 0)
        {
          v259 = 0;
LABEL_502:
          v262 = *(WTF **)(v46 + 8);
          *(_QWORD *)(v46 + 8) = v259;
          if (v262)
          {
            if (*(_DWORD *)v262 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v268 = (WTF *)*((_QWORD *)v262 + 1);
              *((_QWORD *)v262 + 1) = 0;
              if (v268)
              {
                if (*(_DWORD *)v268 == 1)
                  WTF::fastFree(v268, a2);
                else
                  --*(_DWORD *)v268;
              }
              WTF::fastFree(v262, a2);
            }
            else
            {
              --*(_DWORD *)v262;
            }
          }
          goto LABEL_29;
        }
        v218 = (_WORD *)WTF::fastMalloc((WTF *)0x44);
        v219 = v218;
        if (v282 >= 0x10000)
        {
          v220 = (v290 >> 10) - 10304;
          *v218 = (v290 >> 10) - 10304;
          v218[1] = v282 & 0x3F0 | 0xDC00;
          v218[2] = (v290 >> 10) - 10304;
          v218[3] = v282 & 0x3F0 | 0xDC01;
          v218[4] = (v290 >> 10) - 10304;
          v218[5] = v282 & 0x3F0 | 0xDC02;
          v221 = v282 & 0x3F0 | 0xDC03;
          v218[15] = v282 & 0x3F0 | 0xDC07;
          v218[16] = (v290 >> 10) - 10304;
          v218[17] = v282 & 0x3F0 | 0xDC08;
          v223 = v282 & 0x3F0 | 0xDC04;
          v218[18] = (v290 >> 10) - 10304;
          v218[19] = v282 & 0x3F0 | 0xDC09;
          v225 = v282 & 0x3F0 | 0xDC05;
          v218[20] = (v290 >> 10) - 10304;
          v218[21] = v282 & 0x3F0 | 0xDC0A;
          v227 = v282 & 0x3F0 | 0xDC06;
          v218[22] = (v290 >> 10) - 10304;
          v218[23] = v282 & 0x3F0 | 0xDC0B;
          v218[24] = (v290 >> 10) - 10304;
          v218[25] = v282 & 0x3F0 | 0xDC0C;
          v218[26] = (v290 >> 10) - 10304;
          v218[27] = v282 & 0x3F0 | 0xDC0D;
          v229 = v282 & 0x3F0 | 0xDC0F;
          v230 = 32;
          v218[28] = (v290 >> 10) - 10304;
          v231 = 31;
          v222 = v220;
          v218[29] = v282 & 0x3F0 | 0xDC0E;
          v224 = v220;
          v226 = v220;
          v228 = v220;
          v219[30] = (v290 >> 10) - 10304;
        }
        else
        {
          *v218 = v282;
          LOWORD(v220) = v282 | 6;
          v221 = v282 | 7;
          v222 = v282 | 8;
          v223 = v282 | 9;
          v224 = v282 | 0xA;
          *(int8x8_t *)(v218 + 1) = vorr_s8((int8x8_t)vdup_n_s16(v282), (int8x8_t)0x4000300020001);
          v225 = v282 | 0xB;
          v226 = v282 | 0xC;
          v218[5] = v282 | 5;
          v227 = v282 | 0xD;
          v228 = v282 | 0xE;
          v229 = v282 | 0xF;
          v230 = 16;
          v231 = 15;
        }
        v219[6] = v220;
        v219[7] = v221;
        v219[8] = v222;
        v219[9] = v223;
        v219[10] = v224;
        v219[11] = v225;
        v219[12] = v226;
        v219[13] = v227;
        v219[14] = v228;
        v219[v231] = v229;
        v259 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v259 = 1;
        v260 = *(_QWORD *)(v40 + 8);
        if (!v260)
        {
          v260 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v260 = 1;
          *(_QWORD *)(v260 + 8) = v40;
          v273 = *(WTF **)(v40 + 8);
          *(_QWORD *)(v40 + 8) = v260;
          if (v273)
          {
            if (*(_DWORD *)v273 == 1)
            {
              WTF::fastFree(v273, v272);
              v260 = *(_QWORD *)(v40 + 8);
              if (!v260)
              {
                v11 = v289;
                v41 = v284;
                goto LABEL_500;
              }
            }
            else
            {
              --*(_DWORD *)v273;
            }
          }
          v11 = v289;
          v41 = v284;
        }
        ++*(_DWORD *)v260;
LABEL_500:
        *(_QWORD *)(v259 + 8) = v260;
        *(_OWORD *)(v259 + 16) = 0u;
        *(_OWORD *)(v259 + 32) = 0u;
        *(_DWORD *)(v259 + 48) = 0;
        ++WebCore::GlyphPage::s_count;
        if ((WebCore::GlyphPage::fill(v259, v219, v230) & 1) == 0)
        {
          if (*(_DWORD *)v259 == 1)
          {
            --WebCore::GlyphPage::s_count;
            v269 = *(WTF **)(v259 + 8);
            *(_QWORD *)(v259 + 8) = 0;
            if (v269)
            {
              if (*(_DWORD *)v269 == 1)
                WTF::fastFree(v269, v261);
              else
                --*(_DWORD *)v269;
            }
            WTF::fastFree((WTF *)v259, v261);
            v259 = 0;
            v11 = v289;
            v41 = v284;
          }
          else
          {
            --*(_DWORD *)v259;
            v259 = 0;
          }
        }
        WTF::fastFree((WTF *)v219, v261);
        goto LABEL_502;
      }
      if (!(_DWORD)v217)
      {
        v266 = 8;
        goto LABEL_533;
      }
    }
    v266 = (_DWORD)v217 << (6 * *(_DWORD *)(v214 - 12) >= (2 * v217));
LABEL_533:
    v46 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<WebCore::GlyphPage,WTF::RawPtrTraits<WebCore::GlyphPage>,WTF::DefaultRefDerefTraits<WebCore::GlyphPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)(v40 + 120), v266, (int *)v46);
    v11 = v289;
    v41 = v284;
    goto LABEL_383;
  }
  v270 = (WebCore::Font *)WebCore::Font::invisibleFont((WebCore::Font *)v39);
  v50 = (_DWORD *)WebCore::Font::glyphPage(v270, v12);
  if (v50)
LABEL_30:
    ++*v50;
LABEL_31:
  v51 = v286;
  v52 = (WTF *)*((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = v50;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
    {
      --WebCore::GlyphPage::s_count;
      v206 = (WTF *)*((_QWORD *)v52 + 1);
      *((_QWORD *)v52 + 1) = 0;
      if (v206)
      {
        if (*(_DWORD *)v206 == 1)
          WTF::fastFree(v206, a2);
        else
          --*(_DWORD *)v206;
      }
      WTF::fastFree(v52, a2);
    }
    else
    {
      --*(_DWORD *)v52;
    }
  }
  v53 = (WTF *)*((_QWORD *)v22 + 2);
  *((_QWORD *)v22 + 2) = 0;
  if (v53)
  {
    v54 = (WTF *)*((_QWORD *)v53 + 19);
    *((_QWORD *)v53 + 19) = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 1)
        WTF::fastFree(v54, a2);
      else
        --*(_DWORD *)v54;
    }
    v55 = (WTF *)*((_QWORD *)v53 + 18);
    *((_QWORD *)v53 + 18) = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 1)
        WTF::fastFree(v55, a2);
      else
        --*(_DWORD *)v55;
    }
    v56 = (WTF *)*((_QWORD *)v53 + 17);
    *((_QWORD *)v53 + 17) = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 1)
        WTF::fastFree(v56, a2);
      else
        --*(_DWORD *)v56;
    }
    v57 = (WTF *)*((_QWORD *)v53 + 16);
    *((_QWORD *)v53 + 16) = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 1)
        WTF::fastFree(v57, a2);
      else
        --*(_DWORD *)v57;
    }
    v58 = (WTF *)*((_QWORD *)v53 + 15);
    *((_QWORD *)v53 + 15) = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1)
        WTF::fastFree(v58, a2);
      else
        --*(_DWORD *)v58;
    }
    v59 = (WTF *)*((_QWORD *)v53 + 14);
    *((_QWORD *)v53 + 14) = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
        WTF::fastFree(v59, a2);
      else
        --*(_DWORD *)v59;
    }
    v60 = (WTF *)*((_QWORD *)v53 + 13);
    *((_QWORD *)v53 + 13) = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 1)
        WTF::fastFree(v60, a2);
      else
        --*(_DWORD *)v60;
    }
    v61 = (WTF *)*((_QWORD *)v53 + 12);
    *((_QWORD *)v53 + 12) = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
        WTF::fastFree(v61, a2);
      else
        --*(_DWORD *)v61;
    }
    v62 = (WTF *)*((_QWORD *)v53 + 11);
    *((_QWORD *)v53 + 11) = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 1)
        WTF::fastFree(v62, a2);
      else
        --*(_DWORD *)v62;
    }
    v63 = (WTF *)*((_QWORD *)v53 + 10);
    *((_QWORD *)v53 + 10) = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 1)
        WTF::fastFree(v63, a2);
      else
        --*(_DWORD *)v63;
    }
    v64 = (WTF *)*((_QWORD *)v53 + 9);
    *((_QWORD *)v53 + 9) = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 1)
        WTF::fastFree(v64, a2);
      else
        --*(_DWORD *)v64;
    }
    v65 = (WTF *)*((_QWORD *)v53 + 8);
    *((_QWORD *)v53 + 8) = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 1)
        WTF::fastFree(v65, a2);
      else
        --*(_DWORD *)v65;
    }
    v66 = (WTF *)*((_QWORD *)v53 + 7);
    *((_QWORD *)v53 + 7) = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 1)
        WTF::fastFree(v66, a2);
      else
        --*(_DWORD *)v66;
    }
    v67 = (WTF *)*((_QWORD *)v53 + 6);
    *((_QWORD *)v53 + 6) = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 1)
        WTF::fastFree(v67, a2);
      else
        --*(_DWORD *)v67;
    }
    v68 = (WTF *)*((_QWORD *)v53 + 5);
    *((_QWORD *)v53 + 5) = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
        WTF::fastFree(v68, a2);
      else
        --*(_DWORD *)v68;
    }
    v69 = (WTF *)*((_QWORD *)v53 + 4);
    *((_QWORD *)v53 + 4) = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 1)
        WTF::fastFree(v69, a2);
      else
        --*(_DWORD *)v69;
    }
    WTF::fastFree(v53, a2);
  }
  v70 = *(_QWORD *)(v41 + 8 * v286);
  if (v70)
    v71 = *(_DWORD *)(v70 - 12) + 1;
  else
    v71 = 1;
  *(_DWORD *)(v70 - 12) = v71;
  v72 = *(_QWORD *)(v41 + 8 * v286);
  if (v72)
    v73 = *(_DWORD *)(v72 - 12);
  else
    v73 = 0;
  v74 = (*(_DWORD *)(v72 - 16) + v73);
  v75 = *(unsigned int *)(v72 - 4);
  if (v75 > 0x400)
  {
    if (v75 <= 2 * v74)
      goto LABEL_341;
  }
  else
  {
    if (3 * v75 > 4 * v74)
      goto LABEL_90;
    if (!(_DWORD)v75)
    {
      v280 = (WTF *)(v72 - 16);
      v112 = *(_DWORD *)(v72 - 12);
      v113 = 8;
      goto LABEL_170;
    }
LABEL_341:
    v280 = (WTF *)(v72 - 16);
    v112 = *(_DWORD *)(v72 - 12);
    v113 = (_DWORD)v75 << (6 * v112 >= (2 * v75));
LABEL_170:
    v114 = WTF::fastMalloc((WTF *)(24 * v113 + 16));
    if (v113)
    {
      v116 = v113;
      v117 = (_QWORD *)(v114 + 24);
      do
      {
        *((_DWORD *)v117 - 2) = -1;
        *v117 = 0;
        v117[1] = 0;
        v117 += 3;
        --v116;
      }
      while (v116);
    }
    *(_QWORD *)(v41 + 8 * v286) = v114 + 16;
    *(_DWORD *)(v114 + 12) = v113;
    *(_DWORD *)(*(_QWORD *)(v41 + 8 * v286) - 8) = v113 - 1;
    *(_DWORD *)(*(_QWORD *)(v41 + 8 * v286) - 16) = 0;
    *(_DWORD *)(*(_QWORD *)(v41 + 8 * v286) - 12) = v112;
    if ((_DWORD)v75)
    {
      v118 = 0;
      v119 = 0;
      v283 = v72;
      do
      {
        v120 = (int *)(v72 + 24 * v118);
        v121 = *v120;
        if (*v120 == -1)
        {
          v173 = v72 + 24 * v118;
          v174 = *(WebCore::MixedFontGlyphPage **)(v173 + 16);
          *(_QWORD *)(v173 + 16) = 0;
          if (v174)
          {
            WebCore::MixedFontGlyphPage::~MixedFontGlyphPage(v174, v115);
            WTF::fastFree(v175, v176);
          }
          v177 = *(WTF **)(v173 + 8);
          *(_QWORD *)(v173 + 8) = 0;
          if (v177)
          {
            if (*(_DWORD *)v177 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v238 = (WTF *)*((_QWORD *)v177 + 1);
              *((_QWORD *)v177 + 1) = 0;
              if (v238)
              {
                if (*(_DWORD *)v238 == 1)
                  WTF::fastFree(v238, v115);
                else
                  --*(_DWORD *)v238;
              }
              WTF::fastFree(v177, v115);
            }
            else
            {
              --*(_DWORD *)v177;
            }
          }
        }
        else if (v121 != -2)
        {
          v122 = *(_QWORD *)(v41 + 8 * v51);
          if (v122)
            v123 = *(_DWORD *)(v122 - 8);
          else
            v123 = 0;
          v124 = 0;
          v125 = 9 * ((v121 + ~(v121 << 15)) ^ ((v121 + ~(v121 << 15)) >> 10));
          v126 = (v125 ^ (v125 >> 6)) + ~((v125 ^ (v125 >> 6)) << 11);
          v127 = v126 ^ HIWORD(v126);
          do
          {
            v128 = v127 & v123;
            v129 = (int *)(v122 + 24 * (v127 & v123));
            v127 = ++v124 + (v127 & v123);
          }
          while (*v129 != -1);
          v130 = v122 + 24 * v128;
          v133 = *(WTF **)(v130 + 16);
          v131 = (WTF **)(v130 + 16);
          v132 = v133;
          *v131 = 0;
          if (v133)
          {
            v134 = (WTF *)*((_QWORD *)v132 + 19);
            *((_QWORD *)v132 + 19) = 0;
            if (v134)
            {
              if (*(_DWORD *)v134 == 1)
                WTF::fastFree(v134, v115);
              else
                --*(_DWORD *)v134;
            }
            v135 = (WTF *)*((_QWORD *)v132 + 18);
            *((_QWORD *)v132 + 18) = 0;
            if (v135)
            {
              if (*(_DWORD *)v135 == 1)
                WTF::fastFree(v135, v115);
              else
                --*(_DWORD *)v135;
            }
            v136 = (WTF *)*((_QWORD *)v132 + 17);
            *((_QWORD *)v132 + 17) = 0;
            if (v136)
            {
              if (*(_DWORD *)v136 == 1)
                WTF::fastFree(v136, v115);
              else
                --*(_DWORD *)v136;
            }
            v137 = (WTF *)*((_QWORD *)v132 + 16);
            *((_QWORD *)v132 + 16) = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 1)
                WTF::fastFree(v137, v115);
              else
                --*(_DWORD *)v137;
            }
            v138 = (WTF *)*((_QWORD *)v132 + 15);
            *((_QWORD *)v132 + 15) = 0;
            if (v138)
            {
              if (*(_DWORD *)v138 == 1)
                WTF::fastFree(v138, v115);
              else
                --*(_DWORD *)v138;
            }
            v139 = (WTF *)*((_QWORD *)v132 + 14);
            *((_QWORD *)v132 + 14) = 0;
            if (v139)
            {
              if (*(_DWORD *)v139 == 1)
                WTF::fastFree(v139, v115);
              else
                --*(_DWORD *)v139;
            }
            v140 = (WTF *)*((_QWORD *)v132 + 13);
            *((_QWORD *)v132 + 13) = 0;
            if (v140)
            {
              if (*(_DWORD *)v140 == 1)
                WTF::fastFree(v140, v115);
              else
                --*(_DWORD *)v140;
            }
            v141 = (WTF *)*((_QWORD *)v132 + 12);
            *((_QWORD *)v132 + 12) = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 1)
                WTF::fastFree(v141, v115);
              else
                --*(_DWORD *)v141;
            }
            v142 = (WTF *)*((_QWORD *)v132 + 11);
            *((_QWORD *)v132 + 11) = 0;
            if (v142)
            {
              if (*(_DWORD *)v142 == 1)
                WTF::fastFree(v142, v115);
              else
                --*(_DWORD *)v142;
            }
            v143 = (WTF *)*((_QWORD *)v132 + 10);
            *((_QWORD *)v132 + 10) = 0;
            if (v143)
            {
              if (*(_DWORD *)v143 == 1)
                WTF::fastFree(v143, v115);
              else
                --*(_DWORD *)v143;
            }
            v144 = (WTF *)*((_QWORD *)v132 + 9);
            *((_QWORD *)v132 + 9) = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 1)
                WTF::fastFree(v144, v115);
              else
                --*(_DWORD *)v144;
            }
            v145 = (WTF *)*((_QWORD *)v132 + 8);
            *((_QWORD *)v132 + 8) = 0;
            if (v145)
            {
              if (*(_DWORD *)v145 == 1)
                WTF::fastFree(v145, v115);
              else
                --*(_DWORD *)v145;
            }
            v146 = (WTF *)*((_QWORD *)v132 + 7);
            *((_QWORD *)v132 + 7) = 0;
            if (v146)
            {
              if (*(_DWORD *)v146 == 1)
                WTF::fastFree(v146, v115);
              else
                --*(_DWORD *)v146;
            }
            v147 = (WTF *)*((_QWORD *)v132 + 6);
            *((_QWORD *)v132 + 6) = 0;
            if (v147)
            {
              if (*(_DWORD *)v147 == 1)
                WTF::fastFree(v147, v115);
              else
                --*(_DWORD *)v147;
            }
            v148 = (WTF *)*((_QWORD *)v132 + 5);
            *((_QWORD *)v132 + 5) = 0;
            if (v148)
            {
              if (*(_DWORD *)v148 == 1)
                WTF::fastFree(v148, v115);
              else
                --*(_DWORD *)v148;
            }
            v149 = (WTF *)*((_QWORD *)v132 + 4);
            *((_QWORD *)v132 + 4) = 0;
            if (v149)
            {
              if (*(_DWORD *)v149 == 1)
                WTF::fastFree(v149, v115);
              else
                --*(_DWORD *)v149;
            }
            WTF::fastFree(v132, v115);
          }
          v150 = *(v131 - 1);
          *(v131 - 1) = 0;
          if (v150)
          {
            if (*(_DWORD *)v150 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v178 = (WTF *)*((_QWORD *)v150 + 1);
              *((_QWORD *)v150 + 1) = 0;
              if (v178)
              {
                if (*(_DWORD *)v178 == 1)
                  WTF::fastFree(v178, v115);
                else
                  --*(_DWORD *)v178;
              }
              WTF::fastFree(v150, v115);
            }
            else
            {
              --*(_DWORD *)v150;
            }
          }
          v281 = (int *)(v72 + 24 * v118);
          *v129 = *v120;
          v151 = v283 + 24 * v118;
          v153 = *(WTF **)(v151 + 8);
          v152 = (WTF **)(v151 + 8);
          *v152 = 0;
          *(v131 - 1) = v153;
          v154 = v152[1];
          v152[1] = 0;
          *v131 = v154;
          v155 = v152[1];
          v152[1] = 0;
          v41 = v284;
          if (v155)
          {
            v156 = (WTF *)*((_QWORD *)v155 + 19);
            *((_QWORD *)v155 + 19) = 0;
            if (v156)
            {
              if (*(_DWORD *)v156 == 1)
                WTF::fastFree(v156, v115);
              else
                --*(_DWORD *)v156;
            }
            v157 = (WTF *)*((_QWORD *)v155 + 18);
            *((_QWORD *)v155 + 18) = 0;
            if (v157)
            {
              if (*(_DWORD *)v157 == 1)
                WTF::fastFree(v157, v115);
              else
                --*(_DWORD *)v157;
            }
            v158 = (WTF *)*((_QWORD *)v155 + 17);
            *((_QWORD *)v155 + 17) = 0;
            if (v158)
            {
              if (*(_DWORD *)v158 == 1)
                WTF::fastFree(v158, v115);
              else
                --*(_DWORD *)v158;
            }
            v159 = (WTF *)*((_QWORD *)v155 + 16);
            *((_QWORD *)v155 + 16) = 0;
            if (v159)
            {
              if (*(_DWORD *)v159 == 1)
                WTF::fastFree(v159, v115);
              else
                --*(_DWORD *)v159;
            }
            v160 = (WTF *)*((_QWORD *)v155 + 15);
            *((_QWORD *)v155 + 15) = 0;
            if (v160)
            {
              if (*(_DWORD *)v160 == 1)
                WTF::fastFree(v160, v115);
              else
                --*(_DWORD *)v160;
            }
            v161 = (WTF *)*((_QWORD *)v155 + 14);
            *((_QWORD *)v155 + 14) = 0;
            if (v161)
            {
              if (*(_DWORD *)v161 == 1)
                WTF::fastFree(v161, v115);
              else
                --*(_DWORD *)v161;
            }
            v162 = (WTF *)*((_QWORD *)v155 + 13);
            *((_QWORD *)v155 + 13) = 0;
            if (v162)
            {
              if (*(_DWORD *)v162 == 1)
                WTF::fastFree(v162, v115);
              else
                --*(_DWORD *)v162;
            }
            v163 = (WTF *)*((_QWORD *)v155 + 12);
            *((_QWORD *)v155 + 12) = 0;
            if (v163)
            {
              if (*(_DWORD *)v163 == 1)
                WTF::fastFree(v163, v115);
              else
                --*(_DWORD *)v163;
            }
            v164 = (WTF *)*((_QWORD *)v155 + 11);
            *((_QWORD *)v155 + 11) = 0;
            if (v164)
            {
              if (*(_DWORD *)v164 == 1)
                WTF::fastFree(v164, v115);
              else
                --*(_DWORD *)v164;
            }
            v165 = (WTF *)*((_QWORD *)v155 + 10);
            *((_QWORD *)v155 + 10) = 0;
            if (v165)
            {
              if (*(_DWORD *)v165 == 1)
                WTF::fastFree(v165, v115);
              else
                --*(_DWORD *)v165;
            }
            v166 = (WTF *)*((_QWORD *)v155 + 9);
            *((_QWORD *)v155 + 9) = 0;
            if (v166)
            {
              if (*(_DWORD *)v166 == 1)
                WTF::fastFree(v166, v115);
              else
                --*(_DWORD *)v166;
            }
            v167 = (WTF *)*((_QWORD *)v155 + 8);
            *((_QWORD *)v155 + 8) = 0;
            if (v167)
            {
              if (*(_DWORD *)v167 == 1)
                WTF::fastFree(v167, v115);
              else
                --*(_DWORD *)v167;
            }
            v168 = (WTF *)*((_QWORD *)v155 + 7);
            *((_QWORD *)v155 + 7) = 0;
            if (v168)
            {
              if (*(_DWORD *)v168 == 1)
                WTF::fastFree(v168, v115);
              else
                --*(_DWORD *)v168;
            }
            v169 = (WTF *)*((_QWORD *)v155 + 6);
            *((_QWORD *)v155 + 6) = 0;
            if (v169)
            {
              if (*(_DWORD *)v169 == 1)
                WTF::fastFree(v169, v115);
              else
                --*(_DWORD *)v169;
            }
            v170 = (WTF *)*((_QWORD *)v155 + 5);
            *((_QWORD *)v155 + 5) = 0;
            if (v170)
            {
              if (*(_DWORD *)v170 == 1)
                WTF::fastFree(v170, v115);
              else
                --*(_DWORD *)v170;
            }
            v171 = (WTF *)*((_QWORD *)v155 + 4);
            *((_QWORD *)v155 + 4) = 0;
            if (v171)
            {
              if (*(_DWORD *)v171 == 1)
                WTF::fastFree(v171, v115);
              else
                --*(_DWORD *)v171;
            }
            WTF::fastFree(v155, v115);
          }
          v172 = *v152;
          *v152 = 0;
          v72 = v283;
          if (v172)
          {
            if (*(_DWORD *)v172 == 1)
            {
              --WebCore::GlyphPage::s_count;
              v179 = (WTF *)*((_QWORD *)v172 + 1);
              *((_QWORD *)v172 + 1) = 0;
              if (v179)
              {
                if (*(_DWORD *)v179 == 1)
                  WTF::fastFree(v179, v115);
                else
                  --*(_DWORD *)v179;
              }
              WTF::fastFree(v172, v115);
            }
            else
            {
              --*(_DWORD *)v172;
            }
          }
          if (v281 == v22)
            v119 = v129;
          v11 = v289;
        }
        ++v118;
        v51 = v286;
      }
      while (v118 != v75);
LABEL_306:
      WTF::fastFree(v280, v115);
      v22 = v119;
    }
    else
    {
      v119 = 0;
      v22 = 0;
      if (v72)
        goto LABEL_306;
    }
  }
LABEL_90:
  v76 = *((_QWORD *)v22 + 1);
  if (!v76)
  {
    v204 = *((_QWORD *)v22 + 2);
    v9 = v290;
    v78 = (WebCore::FontCascadeFonts *)v287;
    if (v204)
    {
      v205 = *(_QWORD *)(v204 + 8 * (v290 & 0xF) + 32);
      if (v205)
      {
        v81 = *(_QWORD *)(v205 + 8);
        *(_WORD *)v11 = *(_WORD *)(v204 + 2 * (v290 & 0xF));
        *(_BYTE *)(v11 + 2) = 0;
        if (v81)
          goto LABEL_345;
      }
    }
LABEL_94:
    *(_QWORD *)(v11 + 8) = 0;
    v82 = (WTF **)(v11 + 8);
LABEL_95:
    WebCore::FontCascadeFonts::glyphDataForVariant((uint64_t)&v293, v78, v9, (uint64_t)a3, 1, v285, 0);
    *(_WORD *)v11 = (_WORD)v293;
    *(_BYTE *)(v11 + 2) = BYTE2(v293);
    v8 = v294;
    v294 = 0;
    v83 = *(WTF **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v8;
    if (!v83)
      goto LABEL_99;
    v84 = *(_DWORD *)v83 - 1;
    if (*(_DWORD *)v83 == 1)
    {
      WTF::fastFree(v83, a2);
      v83 = v294;
      v294 = 0;
      if (!v83)
        goto LABEL_98;
      v84 = *(_DWORD *)v83 - 1;
      if (*(_DWORD *)v83 == 1)
      {
        WTF::fastFree(v83, a2);
        goto LABEL_98;
      }
    }
    *(_DWORD *)v83 = v84;
LABEL_98:
    v8 = *v82;
LABEL_99:
    v6 = *(_WORD *)v11;
    if (v8)
      ++*(_DWORD *)v8;
    if (*((_QWORD *)v22 + 2))
    {
LABEL_156:
      v7 = *((_QWORD *)v22 + 2);
      if (v8)
      {
        ++*(_DWORD *)v8;
        v105 = v9 & 0xF;
        *(_WORD *)(v7 + 2 * v105) = v6;
        v106 = *((_QWORD *)v8 + 1);
        if (v106)
        {
          result = *(WTF **)(v106 + 8);
          if (!result)
          {
            result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)result = 1;
            *((_QWORD *)result + 1) = v106;
            v275 = *(WTF **)(v106 + 8);
            *(_QWORD *)(v106 + 8) = result;
            if (v275)
            {
              if (*(_DWORD *)v275 == 1)
              {
                WTF::fastFree(v275, a2);
                result = *(WTF **)(v106 + 8);
                if (!result)
                  goto LABEL_159;
              }
              else
              {
                --*(_DWORD *)v275;
              }
            }
          }
          ++*(_DWORD *)result;
        }
        else
        {
          result = 0;
        }
LABEL_159:
        v108 = v7 + 8 * v105;
        v109 = *(WTF **)(v108 + 32);
        *(_QWORD *)(v108 + 32) = result;
        if (v109)
        {
          if (*(_DWORD *)v109 == 1)
            result = (WTF *)WTF::fastFree(v109, a2);
          else
            --*(_DWORD *)v109;
        }
        if (v8)
        {
          v110 = *(_DWORD *)v8 - 1;
          if (*(_DWORD *)v8 == 1)
          {
            result = (WTF *)WTF::fastFree(v8, a2);
            v110 = *(_DWORD *)v8;
          }
          else
          {
            *(_DWORD *)v8 = v110;
          }
          v111 = v110 - 1;
          if (v111)
            *(_DWORD *)v8 = v111;
          else
            return (WTF *)WTF::fastFree(v8, a2);
        }
        return result;
      }
LABEL_508:
      result = 0;
      v105 = v9 & 0xF;
      *(_WORD *)(v7 + 2 * v105) = v6;
      goto LABEL_159;
    }
    v85 = *((_QWORD *)v22 + 1);
    v86 = (_OWORD *)WTF::fastMalloc((WTF *)0xA0);
    *v86 = 0u;
    v86[1] = 0u;
    v86[2] = 0u;
    v86[3] = 0u;
    v86[4] = 0u;
    v86[5] = 0u;
    v86[6] = 0u;
    v86[7] = 0u;
    v86[8] = 0u;
    v86[9] = 0u;
    if (!v85)
    {
LABEL_103:
      v87 = (WTF *)*((_QWORD *)v22 + 2);
      *((_QWORD *)v22 + 2) = v86;
      if (v87)
      {
        v88 = (WTF *)*((_QWORD *)v87 + 19);
        *((_QWORD *)v87 + 19) = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 1)
            WTF::fastFree(v88, a2);
          else
            --*(_DWORD *)v88;
        }
        v89 = (WTF *)*((_QWORD *)v87 + 18);
        *((_QWORD *)v87 + 18) = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 1)
            WTF::fastFree(v89, a2);
          else
            --*(_DWORD *)v89;
        }
        v90 = (WTF *)*((_QWORD *)v87 + 17);
        *((_QWORD *)v87 + 17) = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 1)
            WTF::fastFree(v90, a2);
          else
            --*(_DWORD *)v90;
        }
        v91 = (WTF *)*((_QWORD *)v87 + 16);
        *((_QWORD *)v87 + 16) = 0;
        if (v91)
        {
          if (*(_DWORD *)v91 == 1)
            WTF::fastFree(v91, a2);
          else
            --*(_DWORD *)v91;
        }
        v92 = (WTF *)*((_QWORD *)v87 + 15);
        *((_QWORD *)v87 + 15) = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 1)
            WTF::fastFree(v92, a2);
          else
            --*(_DWORD *)v92;
        }
        v93 = (WTF *)*((_QWORD *)v87 + 14);
        *((_QWORD *)v87 + 14) = 0;
        if (v93)
        {
          if (*(_DWORD *)v93 == 1)
            WTF::fastFree(v93, a2);
          else
            --*(_DWORD *)v93;
        }
        v94 = (WTF *)*((_QWORD *)v87 + 13);
        *((_QWORD *)v87 + 13) = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 1)
            WTF::fastFree(v94, a2);
          else
            --*(_DWORD *)v94;
        }
        v95 = (WTF *)*((_QWORD *)v87 + 12);
        *((_QWORD *)v87 + 12) = 0;
        if (v95)
        {
          if (*(_DWORD *)v95 == 1)
            WTF::fastFree(v95, a2);
          else
            --*(_DWORD *)v95;
        }
        v96 = (WTF *)*((_QWORD *)v87 + 11);
        *((_QWORD *)v87 + 11) = 0;
        if (v96)
        {
          if (*(_DWORD *)v96 == 1)
            WTF::fastFree(v96, a2);
          else
            --*(_DWORD *)v96;
        }
        v97 = (WTF *)*((_QWORD *)v87 + 10);
        *((_QWORD *)v87 + 10) = 0;
        if (v97)
        {
          if (*(_DWORD *)v97 == 1)
            WTF::fastFree(v97, a2);
          else
            --*(_DWORD *)v97;
        }
        v98 = (WTF *)*((_QWORD *)v87 + 9);
        *((_QWORD *)v87 + 9) = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 1)
            WTF::fastFree(v98, a2);
          else
            --*(_DWORD *)v98;
        }
        v99 = (WTF *)*((_QWORD *)v87 + 8);
        *((_QWORD *)v87 + 8) = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 1)
            WTF::fastFree(v99, a2);
          else
            --*(_DWORD *)v99;
        }
        v100 = (WTF *)*((_QWORD *)v87 + 7);
        *((_QWORD *)v87 + 7) = 0;
        if (v100)
        {
          if (*(_DWORD *)v100 == 1)
            WTF::fastFree(v100, a2);
          else
            --*(_DWORD *)v100;
        }
        v101 = (WTF *)*((_QWORD *)v87 + 6);
        *((_QWORD *)v87 + 6) = 0;
        if (v101)
        {
          if (*(_DWORD *)v101 == 1)
            WTF::fastFree(v101, a2);
          else
            --*(_DWORD *)v101;
        }
        v102 = (WTF *)*((_QWORD *)v87 + 5);
        *((_QWORD *)v87 + 5) = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 1)
            WTF::fastFree(v102, a2);
          else
            --*(_DWORD *)v102;
        }
        v103 = (WTF *)*((_QWORD *)v87 + 4);
        *((_QWORD *)v87 + 4) = 0;
        if (v103)
        {
          if (*(_DWORD *)v103 == 1)
            WTF::fastFree(v103, a2);
          else
            --*(_DWORD *)v103;
        }
        WTF::fastFree(v87, a2);
      }
      v104 = (WTF *)*((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 1)
        {
          --WebCore::GlyphPage::s_count;
          v210 = (WTF *)*((_QWORD *)v104 + 1);
          *((_QWORD *)v104 + 1) = 0;
          if (v210)
          {
            if (*(_DWORD *)v210 == 1)
              WTF::fastFree(v210, a2);
            else
              --*(_DWORD *)v210;
          }
          WTF::fastFree(v104, a2);
        }
        else
        {
          --*(_DWORD *)v104;
        }
      }
      goto LABEL_156;
    }
    v239 = 0;
    while (1)
    {
      LOWORD(v240) = *(_WORD *)(v85 + 16 + 2 * v239);
      if (!(_WORD)v240)
        break;
      v241 = *(_QWORD *)(v85 + 8);
      if (!v241)
        break;
      v242 = *(_QWORD *)(v241 + 8);
      if (!v242)
        break;
      v243 = *(WTF **)(v242 + 8);
      if (!v243)
      {
        v243 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v243 = 1;
        *((_QWORD *)v243 + 1) = v242;
        v278 = *(WTF **)(v242 + 8);
        *(_QWORD *)(v242 + 8) = v243;
        if (v278)
        {
          if (*(_DWORD *)v278 == 1)
          {
            WTF::fastFree(v278, a2);
            v243 = *(WTF **)(v242 + 8);
            if (!v243)
              break;
          }
          else
          {
            --*(_DWORD *)v278;
          }
        }
      }
      ++*(_DWORD *)v243;
      *((_WORD *)v86 + v239) = v240;
      v240 = *((_QWORD *)v243 + 1);
      if (v240)
      {
        v244 = *(_QWORD *)(v240 + 8);
        if (!v244)
        {
          v244 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v244 = 1;
          *(_QWORD *)(v244 + 8) = v240;
          v279 = *(WTF **)(v240 + 8);
          *(_QWORD *)(v240 + 8) = v244;
          if (v279)
          {
            if (*(_DWORD *)v279 == 1)
            {
              WTF::fastFree(v279, a2);
              v244 = *(_QWORD *)(v240 + 8);
              if (!v244)
              {
                LOBYTE(v240) = 0;
                goto LABEL_473;
              }
            }
            else
            {
              --*(_DWORD *)v279;
            }
          }
        }
        LOBYTE(v240) = 0;
        ++*(_DWORD *)v244;
      }
      else
      {
        v244 = 0;
      }
LABEL_473:
      v245 = (char *)v86 + 8 * v239;
      v246 = (WTF *)*((_QWORD *)v245 + 4);
      *((_QWORD *)v245 + 4) = v244;
      if (v246)
      {
        if (*(_DWORD *)v246 == 1)
          WTF::fastFree(v246, a2);
        else
          --*(_DWORD *)v246;
      }
      if ((v240 & 1) == 0)
      {
        if (*(_DWORD *)v243 == 1)
          WTF::fastFree(v243, a2);
        else
          --*(_DWORD *)v243;
      }
      ++v239;
      LOBYTE(v9) = v290;
      if (v239 == 16)
        goto LABEL_103;
    }
    v243 = 0;
    v244 = 0;
    *((_WORD *)v86 + v239) = v240;
    LOBYTE(v240) = 1;
    goto LABEL_473;
  }
  v9 = v290;
  v77 = *(_WORD *)(v76 + 2 * (v290 & 0xF) + 16);
  v78 = (WebCore::FontCascadeFonts *)v287;
  if (!v77)
    goto LABEL_94;
  v79 = *(_QWORD *)(v76 + 8);
  if (!v79)
    goto LABEL_94;
  v80 = (*(_DWORD *)(v76 + 48) >> (v290 & 0xF)) & 1;
  v81 = *(_QWORD *)(v79 + 8);
  *(_WORD *)v11 = v77;
  *(_BYTE *)(v11 + 2) = v80;
  if (!v81)
    goto LABEL_94;
LABEL_345:
  result = *(WTF **)(v81 + 8);
  if (!result)
  {
    result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 1) = v81;
    v277 = *(WTF **)(v81 + 8);
    *(_QWORD *)(v81 + 8) = result;
    if (v277)
    {
      if (*(_DWORD *)v277 == 1)
      {
        WTF::fastFree(v277, v276);
        result = *(WTF **)(v81 + 8);
        v9 = v290;
        v11 = v289;
        v78 = (WebCore::FontCascadeFonts *)v287;
        if (!result)
          goto LABEL_94;
        goto LABEL_346;
      }
      --*(_DWORD *)v277;
    }
    v11 = v289;
  }
LABEL_346:
  ++*(_DWORD *)result;
  *(_QWORD *)(v11 + 8) = result;
  v82 = (WTF **)(v11 + 8);
  if (!*((_QWORD *)result + 1))
  {
    v9 = v290;
    v11 = v289;
    v78 = (WebCore::FontCascadeFonts *)v287;
    goto LABEL_95;
  }
  return result;
}

WebCore::FontDescription *WebCore::FontDescription::FontDescription(WebCore::FontDescription *this, const WebCore::FontDescription *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  __int128 v9;
  void *v11;
  void *v12;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
      goto LABEL_14;
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v4));
    *((_DWORD *)this + 2) = v4;
    *(_QWORD *)this = v11;
    memcpy(v11, *(const void **)a2, 8 * *((unsigned int *)a2 + 3));
  }
  v5 = *((unsigned int *)a2 + 7);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = v5;
  if (!(_DWORD)v5)
    goto LABEL_3;
  if (v5 >> 29)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1941A1330);
  }
  v12 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
  *((_DWORD *)this + 6) = v5;
  *((_QWORD *)this + 2) = v12;
  memcpy(v12, *((const void **)a2 + 2), 8 * *((unsigned int *)a2 + 7));
LABEL_3:
  WebCore::FontVariantAlternatesValues::FontVariantAlternatesValues((WebCore::FontDescription *)((char *)this + 32), (const WebCore::FontDescription *)((char *)a2 + 32));
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  v6 = (_DWORD *)*((_QWORD *)a2 + 14);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 14) = v6;
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  v7 = (_DWORD *)*((_QWORD *)a2 + 16);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 16) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 17);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 17) = v8;
  v9 = *((_OWORD *)a2 + 9);
  *(_QWORD *)((char *)this + 159) = *(_QWORD *)((char *)a2 + 159);
  *((_OWORD *)this + 9) = v9;
  return this;
}

WebCore::FontVariantAlternatesValues *WebCore::FontVariantAlternatesValues::FontVariantAlternatesValues(WebCore::FontVariantAlternatesValues *this, const WebCore::FontVariantAlternatesValues *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _QWORD *v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *((unsigned int *)a2 + 5);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 5) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
      goto LABEL_26;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *((_DWORD *)this + 4) = v5;
    *((_QWORD *)this + 1) = v11;
    v12 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v12)
    {
      v13 = (_DWORD **)*((_QWORD *)a2 + 1);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        if (*v13)
          *v15 += 2;
        *v11++ = v15;
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  v6 = *((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = v6;
  if (!(_DWORD)v6)
    goto LABEL_5;
  if (v6 >> 29)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1941A1494);
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v6));
  *((_DWORD *)this + 8) = v6;
  *((_QWORD *)this + 3) = v16;
  v17 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v17)
  {
    v18 = (_DWORD **)*((_QWORD *)a2 + 3);
    v19 = 8 * v17;
    do
    {
      v20 = *v18;
      if (*v18)
        *v20 += 2;
      *v16++ = v20;
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
LABEL_5:
  v7 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 5) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 6);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 6) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 7);
  if (v9)
    *v9 += 2;
  *((_QWORD *)this + 7) = v9;
  *((_WORD *)this + 32) = *((_WORD *)a2 + 32);
  return this;
}

uint64_t WebCore::FontCascade::primaryFont(WebCore::FontCascade *this, void *a2)
{
  WebCore::FontCascadeFonts *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  int v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;

  v3 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 27);
  if (v3)
    ++*(_DWORD *)v3;
  v4 = *((_QWORD *)v3 + 13);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
LABEL_5:
    v5 = (WTF *)*((_QWORD *)v3 + 13);
    goto LABEL_6;
  }
  v10 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v3, (WebCore::FontCascade *)((char *)this + 16), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v10, 1, (uint64_t)&v30);
  if (!v31 || (v11 = *((_QWORD *)v31 + 1)) == 0)
  {
    v12 = 0;
    goto LABEL_15;
  }
  v28 = *((_QWORD *)v31 + 1);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
    goto LABEL_57;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v28;
  v26 = *(WTF **)(v28 + 8);
  *(_QWORD *)(v28 + 8) = v12;
  if (!v26)
    goto LABEL_57;
  if (*(_DWORD *)v26 != 1)
  {
    --*(_DWORD *)v26;
LABEL_57:
    ++*(_DWORD *)v12;
    goto LABEL_15;
  }
  WTF::fastFree(v26, a2);
  v12 = *(_QWORD *)(v28 + 8);
  if (v12)
    goto LABEL_57;
LABEL_15:
  v13 = (WTF *)*((_QWORD *)v3 + 13);
  *((_QWORD *)v3 + 13) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, a2);
    else
      --*(_DWORD *)v13;
  }
  v14 = v31;
  v31 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, a2);
    else
      --*(_DWORD *)v14;
  }
  v15 = *((_QWORD *)v3 + 13);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 256) & 2) != 0)
      {
        v17 = 1;
        while (1)
        {
          v18 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v3, (WebCore::FontCascade *)((char *)this + 16), v17);
          if (!*(_DWORD *)(v18 + 12))
            break;
          WebCore::FontRanges::glyphDataForCharacter(0x20u, v18, 0, (uint64_t)&v30);
          if (v31)
            v19 = *((_QWORD *)v31 + 1);
          else
            v19 = 0;
          WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v29, v19);
          v20 = v31;
          v31 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
              WTF::fastFree(v20, a2);
            else
              --*(_DWORD *)v20;
          }
          v5 = v29;
          if (v29)
          {
            v21 = *((_QWORD *)v29 + 1);
            if (!v21 || (*(_BYTE *)(v21 + 256) & 2) != 0)
            {
              v24 = 0;
              v29 = 0;
            }
            else
            {
              v29 = 0;
              v22 = (WTF *)*((_QWORD *)v3 + 13);
              *((_QWORD *)v3 + 13) = v5;
              if (!v22)
                goto LABEL_7;
              v23 = *(_DWORD *)v22 - 1;
              if (*(_DWORD *)v22 != 1)
                goto LABEL_51;
              WTF::fastFree(v22, a2);
              v5 = v29;
              v29 = 0;
              if (!v5)
                goto LABEL_5;
              v24 = 2;
            }
            if (*(_DWORD *)v5 == 1)
              WTF::fastFree(v5, a2);
            else
              --*(_DWORD *)v5;
          }
          else
          {
            v24 = 0;
          }
          ++v17;
          if (v24)
            goto LABEL_5;
        }
      }
      goto LABEL_5;
    }
  }
  if (!v10[3])
  {
    __break(0xC471u);
    JUMPOUT(0x1941A17F0);
  }
  v5 = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v10 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v10 + 8), 1);
  if (v5)
  {
    v25 = v5;
    v5 = (WTF *)*((_QWORD *)v5 + 1);
    if (!v5)
    {
      v5 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v5 = 1;
      *((_QWORD *)v5 + 1) = v25;
      v27 = (WTF *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = v5;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
        {
          WTF::fastFree(v27, a2);
          v5 = (WTF *)*((_QWORD *)v25 + 1);
          if (!v5)
            goto LABEL_49;
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
    }
    ++*(_DWORD *)v5;
  }
LABEL_49:
  v22 = (WTF *)*((_QWORD *)v3 + 13);
  *((_QWORD *)v3 + 13) = v5;
  if (v22)
  {
    v23 = *(_DWORD *)v22 - 1;
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, a2);
    else
LABEL_51:
      *(_DWORD *)v22 = v23;
    goto LABEL_5;
  }
LABEL_6:
  if (v5)
LABEL_7:
    v6 = *((_QWORD *)v5 + 1);
  else
    v6 = 0;
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v3, a2);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v30 = *((_QWORD *)this + 17);
  return v6;
}

void sub_1941A183C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF *a12)
{
  WebCore::FontCascadeFonts *v12;

  if (a12)
  {
    if (*(_DWORD *)a12 == 1)
      WTF::fastFree(a12, a2);
    else
      --*(_DWORD *)a12;
  }
  WTF::RefCounted<WebCore::FontCascadeFonts>::deref(v12, a2);
  _Unwind_Resume(a1);
}

BOOL WebCore::WidthIterator::characterCanUseSimplifiedTextMeasuring(UChar32 a1, char a2)
{
  uint64_t v2;

  if (a1 == 160)
    return 0;
  if (a1 > 172)
  {
    if (a1 <= 9617)
    {
      if ((a1 - 8288) <= 0xF && ((1 << (a1 - 96)) & 0xFFCF) != 0
        || (a1 - 8203) <= 0x23 && ((1 << (a1 - 11)) & 0xF8000001FLL) != 0
        || a1 == 173)
      {
        return 0;
      }
    }
    else if (a1 == 9618 || a1 == 65279 || a1 == 65532)
    {
      return 0;
    }
  }
  else
  {
    v2 = 1;
    switch(a1)
    {
      case 10:
        return v2;
      case 9:
        if ((a2 & 1) != 0)
          return u_charType(a1) != 15;
        return 0;
      case 13:
        return v2;
    }
  }
  if (a1 <= 0x3040)
    return u_charType(a1) != 15;
  return 0;
}

_QWORD *WebCore::addToGlyphBuffer(_QWORD *result, WebCore::Font *a2, uint64_t a3, unsigned int a4)
{
  const WebCore::Font *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  const WebCore::Font *v23;
  const WebCore::Font *v24;
  const WebCore::Font *v25;
  const WebCore::Font *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v37[2];
  uint64_t v38;
  __int16 v39;
  __int128 v40;

  v4 = a2;
  v40 = 0uLL;
  v39 = -1;
  v38 = a3;
  v37[0] = a2;
  v5 = *((unsigned int *)result + 3);
  if ((_DWORD)v5 == *((_DWORD *)result + 2))
  {
    v27 = a3;
    v32 = result;
    v17 = a4;
    WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>((uint64_t)result, (unint64_t)v37);
    a4 = v17;
    a3 = v27;
    result = v32;
    v4 = a2;
  }
  else
  {
    *(_QWORD *)(*result + 8 * v5) = a2;
    *((_DWORD *)result + 3) = v5 + 1;
  }
  v6 = result + 3335;
  v7 = *((unsigned int *)result + 2055);
  if ((_DWORD)v7 == *((_DWORD *)result + 2054))
  {
    v28 = a3;
    v33 = result;
    v23 = v4;
    v18 = a4;
    v13 = result + 3335;
    WTF::Vector<unsigned short,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned short &>((uint64_t)(result + 1026), (unint64_t)&v39);
    v6 = v13;
    a4 = v18;
    a3 = v28;
    result = v33;
    v4 = v23;
  }
  else
  {
    *(_WORD *)(result[1026] + 2 * v7) = -1;
    *((_DWORD *)result + 2055) = v7 + 1;
  }
  v8 = (uint64_t)(result + 5384);
  v9 = *((unsigned int *)result + 2571);
  if ((_DWORD)v9 == *((_DWORD *)result + 2570))
  {
    v29 = a3;
    v34 = result;
    v24 = v4;
    v19 = a4;
    v14 = v6;
    v15 = result + 5384;
    WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)(result + 1284), (unint64_t)&v40);
    v6 = v14;
    v8 = (uint64_t)v15;
    a4 = v19;
    a3 = v29;
    result = v34;
    v4 = v24;
  }
  else
  {
    *(_OWORD *)(result[1284] + 16 * v9) = v40;
    ++*((_DWORD *)result + 2571);
  }
  v37[0] = 0;
  v37[1] = 0;
  v10 = v6[1];
  if ((_DWORD)v10 == *v6)
  {
    v30 = a3;
    v35 = result;
    v25 = v4;
    v20 = a4;
    v16 = v8;
    WTF::Vector<CGSize,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize&>((uint64_t)(result + 3334), (unint64_t)v37);
    v8 = v16;
    a4 = v20;
    a3 = v30;
    result = v35;
    v4 = v25;
  }
  else
  {
    v11 = (_QWORD *)(result[3334] + 16 * v10);
    *v11 = 0;
    v11[1] = 0;
    ++v6[1];
  }
  v12 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(v8 + 8))
  {
    v31 = a3;
    v36 = result;
    v26 = v4;
    v21 = a4;
    WTF::Vector<WebCore::Font const*,1024ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Font const*>(v8, (unint64_t)&v38);
    a4 = v21;
    a3 = v31;
    result = v36;
    v4 = v26;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v12) = a3;
    *(_DWORD *)(v8 + 12) = v12 + 1;
  }
  if (a4 >= 0x10000)
    return WebCore::GlyphBuffer::add((WebCore::GlyphBuffer *)result, 0, v4, 0.0, a3 + 1);
  return result;
}

float WebCore::FontCascade::letterSpacing(WebCore::FontCascade *this)
{
  char *v1;
  int v2;
  float result;
  float v4;

  v1 = (char *)this + 200;
  v2 = *((unsigned __int8 *)this + 204);
  if (v2 == 4)
  {
    if (*((_BYTE *)this + 206))
      return *(float *)v1;
    else
      return (float)*(int *)v1;
  }
  else if (v2 == 3)
  {
    if (*((_BYTE *)this + 206))
      v4 = *(float *)v1;
    else
      v4 = (float)*(int *)v1;
    return (float)(v4 / 100.0) * *((float *)this + 43);
  }
  else
  {
    result = 0.0;
    if (v2 == 11)
      WebCore::Length::nonNanCalculatedValue((WebCore::FontCascade *)((char *)this + 200), *((float *)this + 43));
  }
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *i;
  WebCore::MixedFontGlyphPage *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  WTF *v17;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  result = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v10 = (_QWORD *)(result + 24);
  do
  {
    *((_DWORD *)v10 - 2) = -1;
    *v10 = 0;
    v10[1] = 0;
    v10 += 3;
    --v7;
  }
  while (v7);
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = v5;
    for (i = (_QWORD *)v4; ; i += 3)
    {
      if (*(_DWORD *)i == -1)
        goto LABEL_10;
      if (*(_DWORD *)i != -2)
        break;
LABEL_15:
      if (!--v11)
        return WTF::fastFree((WTF *)(v4 - 16), v9);
    }
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::FontCascadeFonts::GlyphPageCacheEntry,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::FontCascadeFonts::GlyphPageCacheEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::reinsert(*a1, i);
LABEL_10:
    v13 = (WebCore::MixedFontGlyphPage *)i[2];
    i[2] = 0;
    if (v13)
    {
      WebCore::MixedFontGlyphPage::~MixedFontGlyphPage(v13, v9);
      WTF::fastFree(v14, v15);
    }
    v16 = (WTF *)i[1];
    i[1] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
      {
        --WebCore::GlyphPage::s_count;
        v17 = (WTF *)*((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            WTF::fastFree(v17, v9);
          else
            --*(_DWORD *)v17;
        }
        WTF::fastFree(v16, v9);
      }
      else
      {
        --*(_DWORD *)v16;
      }
    }
    goto LABEL_15;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v9);
  return result;
}

uint64_t WebCore::screenSupportsExtendedColor(WebCore *this, WebCore::Widget *a2)
{
  WebCore *v2;
  _DWORD *v3;

  {
    v2 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
  }
  else
  {
    v2 = 0;
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  v3 = WebCore::screenData(v2);
  if (v3)
    return *((unsigned __int8 *)v3 + 48);
  else
    return MGGetBoolAnswer();
}

void WebCore::JSMessageChannelOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::MessageChannel *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::MessageChannel *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::MessageChannel **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::MessageChannel **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::MessageChannel **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::MessageChannel::~MessageChannel(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::setSystemHasAC(uint64_t this)
{
  WebCore::hasAC = this | 0x100;
  return this;
}

uint64_t WebCore::JSWindowProxy::put(uint64_t *a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  v4 = a3;
  v5 = 0;
  WebCore::checkCrossTabWindowProxyUsage(a1, a2, (uint64_t)&v4);
  return JSC::JSGlobalProxy::put();
}

uint64_t WebCore::JSWindowProxy::getOwnPropertySlot(uint64_t *a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;

  v4 = a3;
  v5 = 0;
  WebCore::checkCrossTabWindowProxyUsage(a1, a2, (uint64_t)&v4);
  return JSC::JSGlobalProxy::getOwnPropertySlot();
}

uint64_t *WebCore::checkCrossTabWindowProxyUsage(uint64_t *result, WebCore::JSDOMGlobalObject *this, uint64_t a3)
{
  WebCore::JSDOMGlobalObject *v4;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  char **v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  if (result && this)
  {
    v4 = (WebCore::JSDOMGlobalObject *)result[2];
    if (v4 && v4 != this)
    {
      v7 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
      v8 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
      v9 = (char **)(16 * v7);
      if ((_DWORD)v7)
        v10 = v9 == &WebCore::JSDOMGlobalObject::s_info;
      else
        v10 = 1;
      if (!v10)
      {
        do
        {
          v9 = (char **)v9[2];
          v8 = v9 != 0;
        }
        while (v9 != &WebCore::JSDOMGlobalObject::s_info && v9 != 0);
      }
      if (v8 && (v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this)) != 0 && !*(_BYTE *)(v11 + 274))
      {
        v22 = *(_DWORD *)(v11 - 168);
        *(_DWORD *)(v11 - 168) = v22 + 2;
        v23 = *(_QWORD *)(v11 + 336);
        if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
        {
          v25 = (unsigned int *)(v24 + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 + 1, v25));
          v27 = *(_QWORD *)(*(_QWORD *)(v24 + 128) + 8);
          v28 = (unsigned int *)(v27 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
          v55 = v24;
          v56 = v27;
          v57 = 1;
          v22 = *(_DWORD *)(v11 - 168) - 2;
        }
        else
        {
          LOBYTE(v55) = 0;
          v57 = 0;
        }
        if (v22)
        {
          *(_DWORD *)(v11 - 168) = v22;
        }
        else if ((*(_WORD *)(v11 - 162) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)(v11 - 192), v12);
        }
      }
      else
      {
        LOBYTE(v55) = 0;
        v57 = 0;
      }
      v13 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
      v14 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
      v15 = (char **)(16 * v13);
      if ((_DWORD)v13)
        v16 = v15 == &WebCore::JSDOMGlobalObject::s_info;
      else
        v16 = 1;
      if (!v16)
      {
        do
        {
          v15 = (char **)v15[2];
          v14 = v15 != 0;
        }
        while (v15 != &WebCore::JSDOMGlobalObject::s_info && v15 != 0);
      }
      if (v14 && (v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v4)) != 0 && !*(_BYTE *)(v17 + 274))
      {
        v30 = *(_DWORD *)(v17 - 168);
        *(_DWORD *)(v17 - 168) = v30 + 2;
        v31 = *(_QWORD *)(v17 + 336);
        if (v31 && (v32 = *(_QWORD *)(v31 + 8)) != 0)
        {
          v33 = (unsigned int *)(v32 + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 + 1, v33));
          v35 = *(_QWORD *)(*(_QWORD *)(v32 + 128) + 8);
          v36 = (unsigned int *)(v35 + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 + 1, v36));
          v52 = v32;
          v53 = v35;
          v19 = 1;
          v54 = 1;
          v30 = *(_DWORD *)(v17 - 168) - 2;
        }
        else
        {
          v19 = 0;
          LOBYTE(v52) = 0;
          v54 = 0;
        }
        if (v30)
        {
          *(_DWORD *)(v17 - 168) = v30;
        }
        else if ((*(_WORD *)(v17 - 162) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)(v17 - 192), v18);
        }
      }
      else
      {
        v19 = 0;
        LOBYTE(v52) = 0;
        v54 = 0;
      }
      if (!v57 || !v19 || v56 == v53)
        goto LABEL_30;
      if (*(_DWORD *)(a3 + 8))
      {
        v38 = 1;
      }
      else
      {
        v49 = *(_QWORD *)(*((_QWORD *)this + 7) + 41456);
        if (*(_QWORD *)(v49 + 19432) == *(_QWORD *)a3)
        {
          v38 = 2;
        }
        else if (*(_QWORD *)(v49 + 20984) == *(_QWORD *)a3)
        {
          v38 = 4;
        }
        else
        {
          v38 = 1;
        }
      }
      v39 = v52;
      v40 = *(_QWORD *)(v52 + 160);
      if (v40)
      {
        v46 = *(_QWORD *)(v40 + 8);
        if (v46)
        {
          if (*(_QWORD *)(*(_QWORD *)(v46 + 128) + 8) == v56)
          {
            v47 = (unsigned int *)(v52 + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
            v51 = v52;
            if (*(_BYTE *)(v52 + 144))
            {
              WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v51);
            }
            else
            {
              v51 = 0;
              WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v51);
              WebCore::LocalFrame::didAccessWindowProxyPropertyViaOpener(v39, (WTF::StringImpl *)v38);
              WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v39 + 8));
            }
          }
        }
      }
      if (v54 && v57)
      {
        v41 = v56;
        v42 = *(_QWORD *)(v56 + 160);
        if (!v42)
          goto LABEL_30;
        v43 = *(_QWORD *)(v42 + 8);
        if (!v43 || *(_QWORD *)(*(_QWORD *)(v43 + 128) + 8) != v53)
          goto LABEL_30;
        v44 = (unsigned int *)(v56 + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 + 1, v44));
        v50 = v41;
        if (!*(_BYTE *)(v41 + 144))
        {
          v50 = 0;
          WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v50);
          WebCore::LocalFrame::didAccessWindowProxyPropertyViaOpener(v41, (WTF::StringImpl *)v38);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v41 + 8));
LABEL_30:
          std::__optional_destruct_base<WebCore::FrameInfo,false>::~__optional_destruct_base[abi:sn180100](&v52);
          return std::__optional_destruct_base<WebCore::FrameInfo,false>::~__optional_destruct_base[abi:sn180100](&v55);
        }
      }
      else
      {
        __break(1u);
      }
      WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref(&v50);
      goto LABEL_30;
    }
  }
  return result;
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::isScrollSnapInProgress(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (*((_BYTE *)this + 254))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  if (v2)
  {
    v3 = *(WebCore::Page **)(v2 + 8);
    if (v3)
    {
      v4 = WebCore::Page::scrollingCoordinator(v3);
      if (v4)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
        if (v5 && (v6 = *(_QWORD *)(v5 + 1944)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256)) != 0)
        {
          v8 = *(_QWORD *)(v7 + 224);
          v9 = *(_QWORD *)(v7 + 232);
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 416))(v4, v8, v9) & 1) != 0)
          return 1;
      }
    }
  }
  v10 = *((_QWORD *)this + 2);
  return v10
      && *(_QWORD *)(v10 + 104)
      && (*(_BYTE *)(v10 + 117)
       || (v12 = *(_QWORD *)(v10 + 96)) != 0
       && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) != 0);
}

WebCore::Page *WebCore::RenderLayerBacking::updateEventRegion(WebCore::RenderLayerBacking *this)
{
  WebCore::Page *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  BOOL v20;

  result = (WebCore::Page *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                              + 24)
                                                                                  + 8));
  if (result && *((_BYTE *)this + 291))
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 24) + 8) + 40) + 8);
    if (*(_BYTE *)(*(_QWORD *)(v4 + 1944) + 442))
      goto LABEL_39;
    if (*(_BYTE *)(v4 + 3443))
      goto LABEL_39;
    if (*(_BYTE *)(v4 + 3444))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 528) + 8) + 24) + 8);
      if (*(_BYTE *)(v5 + 1100) || (*(_BYTE *)(*(_QWORD *)(v5 + 112) + 612) & 8) != 0)
        goto LABEL_39;
    }
    if ((v6 = *(uint64_t **)(v4 + 2304)) != 0 && (v18 = *v6) != 0 && *(_DWORD *)(v18 - 12)
      || (*(_BYTE *)(v3 + 24) & 1) == 0
      && (result = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 528) + 8) + 24) + 8),
          (*(_QWORD *)(*((_QWORD *)result + 14) + 664) & 0xC0000000) != 0)
      && (v7 = WebCore::Page::scrollingCoordinator(result),
          v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40) + 8) + 1944) + 24)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8)
                                                             + 528)
                                                 + 8)
                                     + 632)
                         + 8),
          result = (WebCore::Page *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 440))(v7, *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40)), (_DWORD)result))
    {
LABEL_39:
      if (*((_BYTE *)this + 297))
      {
        kdebug_trace();
        v9 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 239) & 4) != 0)
          goto LABEL_36;
        if ((*(_BYTE *)(v9 + 120) & 0x30) != 0)
          goto LABEL_36;
        v10 = *(_QWORD *)(v9 + 32);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            if ((*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 0x18) != 0)
              goto LABEL_36;
          }
        }
        v12 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8);
        v13 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
        if (*(_BYTE *)(v13 + 3441))
        {
          if (*(_QWORD *)(v13 + 1272) != v12)
            goto LABEL_36;
        }
        v14 = *(_BYTE *)(v9 + 45) & 2;
        if ((*(_BYTE *)(v9 + 45) & 2) != 0)
          v9 = 0;
        if (v10 && v14)
          v9 = *(_QWORD *)(v10 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 239) & 1) != 0)
LABEL_36:
          v15 = 0;
        else
          v15 = (*(_WORD *)(v9 + 124) & 0x3C0) != 0;
        v20 = v15;
        v19[0] = this;
        v19[1] = &v20;
        WebCore::RenderLayerBacking::updateEventRegion(void)::$_1::operator()((uint64_t)v19, *((_QWORD *)this + 9));
        WebCore::RenderLayerBacking::updateEventRegion(void)::$_0::operator()((WTF *)&v20, (uint64_t)this, *((_QWORD **)this + 20));
        WebCore::RenderLayerBacking::updateEventRegion(void)::$_0::operator()((WTF *)&v20, (uint64_t)this, *((_QWORD **)this + 16));
        WebCore::RenderLayerBacking::updateEventRegion(void)::$_0::operator()((WTF *)&v20, (uint64_t)this, *((_QWORD **)this + 17));
        WebCore::RenderLayerBacking::updateEventRegion(void)::$_0::operator()((WTF *)&v20, (uint64_t)this, *((_QWORD **)this + 18));
        v16 = *((_QWORD *)this + 21);
        if (v16)
          WebCore::RenderLayerBacking::updateEventRegion(void)::$_1::operator()((uint64_t)v19, v16);
        v17 = *((_QWORD *)this + 10);
        if (v17)
          WebCore::RenderLayerBacking::updateEventRegion(void)::$_1::operator()((uint64_t)v19, v17);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                             + 24)
                                                                 + 8)
                                                     + 40)
                                         + 8)
                             + 1944)
                 + 442) = 0;
        *((_BYTE *)this + 297) = 0;
        return (WebCore::Page *)kdebug_trace();
      }
    }
  }
  return result;
}

_QWORD *WebCore::Document::invalidateRenderingDependentRegions(WebCore::Document *this)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  WTF *v20;
  void *v21;
  uint64_t v22;

  result = (_QWORD *)WebCore::Document::setTouchEventRegionsNeedUpdate((uint64_t)this);
  v3 = *((_QWORD *)this + 66);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(WebCore::Page **)(v5 + 8);
        if (v6)
        {
          ++*(_DWORD *)v6;
          v7 = *(_DWORD **)(v4 + 288);
          if (!v7)
          {
LABEL_34:
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::Page::~Page(v6);
              return (_QWORD *)WTF::fastFree(v20, v21);
            }
            else
            {
              --*(_DWORD *)v6;
            }
            return result;
          }
          ++v7[2];
          result = (_QWORD *)WebCore::Page::scrollingCoordinator(v6);
          if (!result)
            goto LABEL_32;
          v8 = result;
          v9 = result[1];
          if (__ldaxr((unsigned __int8 *)v9))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v9))
          {
            goto LABEL_11;
          }
          MEMORY[0x19AEA534C](v9);
LABEL_11:
          ++*(_QWORD *)(v9 + 8);
          v11 = __ldxr((unsigned __int8 *)v9);
          if (v11 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v9))
            {
LABEL_16:
              result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _DWORD *))(*v8 + 88))(v8, v7);
              v13 = v8[1];
              if (__ldaxr((unsigned __int8 *)v13))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v13))
              {
                goto LABEL_20;
              }
              result = (_QWORD *)MEMORY[0x19AEA534C](v13);
LABEL_20:
              v15 = *(_QWORD *)(v13 + 8);
              v16 = v15 - 1;
              *(_QWORD *)(v13 + 8) = v15 - 1;
              if (v15 == 1)
              {
                v22 = *(_QWORD *)(v13 + 16);
                v17 = *(_QWORD *)(v13 + 24);
                *(_QWORD *)(v13 + 24) = 0;
                v18 = v22 != 0;
              }
              else
              {
                v17 = 0;
                v18 = 1;
              }
              v19 = __ldxr((unsigned __int8 *)v13);
              if (v19 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v13))
                {
                  if (!v16)
                    goto LABEL_28;
                  goto LABEL_32;
                }
              }
              else
              {
                __clrex();
              }
              result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
              if (!v16)
              {
LABEL_28:
                if (v17)
                  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
                if (!v18)
                  result = (_QWORD *)WTF::fastFree((WTF *)v13, v12);
              }
LABEL_32:
              if (v7[2] == 1)
                result = (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
              else
                --v7[2];
              goto LABEL_34;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v9);
          goto LABEL_16;
        }
      }
    }
  }
  return result;
}

WTF *WebCore::RenderLayerCompositor::detachScrollCoordinatedLayer(WTF *result, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v3 = *(_QWORD **)(a2 + 256);
  if (v3)
  {
    v6 = (uint64_t)result;
    result = (WTF *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                                  + 8)
                                                                                      + 24)
                                                                          + 8));
    if (result)
    {
      v7 = (uint64_t)result;
      if ((a3 & 2) != 0)
      {
        v31 = *(_QWORD *)(a2 + 256);
        v32 = *(_QWORD *)(v31 + 224);
        if (v32)
          result = WebCore::RenderLayerCompositor::detachScrollCoordinatedLayerWithRole(WebCore::RenderLayer &,WebCore::ScrollingCoordinator &,WebCore::ScrollCoordinationRole)::$_0::operator()((uint64_t)result, v6, v32, *(_QWORD *)(v31 + 232));
      }
      if ((a3 & 4) != 0)
      {
        v22 = *(unsigned int **)(*(_QWORD *)(a2 + 256) + 48);
        if (v22)
        {
          v23 = v22[3];
          if ((_DWORD)v23)
          {
            v24 = 96 * v23;
            v25 = (unint64_t *)(*(_QWORD *)v22 + 72);
            do
            {
              v26 = *(v25 - 1);
              if (v26)
                result = WebCore::RenderLayerCompositor::detachScrollCoordinatedLayerWithRole(WebCore::RenderLayer &,WebCore::ScrollingCoordinator &,WebCore::ScrollCoordinationRole)::$_0::operator()(v7, v6, v26, *v25);
              v25 += 12;
              v24 -= 96;
            }
            while (v24);
          }
        }
      }
      if ((a3 & 8) != 0)
      {
        v29 = *(_QWORD *)(a2 + 256);
        v30 = *(_QWORD *)(v29 + 240);
        if (v30)
          result = WebCore::RenderLayerCompositor::detachScrollCoordinatedLayerWithRole(WebCore::RenderLayer &,WebCore::ScrollingCoordinator &,WebCore::ScrollCoordinationRole)::$_0::operator()(v7, v6, v30, *(_QWORD *)(v29 + 248));
      }
      if ((a3 & 0x10) != 0)
      {
        v18 = *(_QWORD *)(a2 + 256);
        v19 = *(_QWORD *)(v18 + 256);
        if (v19)
          result = WebCore::RenderLayerCompositor::detachScrollCoordinatedLayerWithRole(WebCore::RenderLayer &,WebCore::ScrollingCoordinator &,WebCore::ScrollCoordinationRole)::$_0::operator()(v7, v6, v19, *(_QWORD *)(v18 + 264));
      }
      if ((a3 & 1) != 0)
      {
        v27 = *(_QWORD *)(a2 + 256);
        v28 = *(_QWORD *)(v27 + 208);
        if (v28)
          result = WebCore::RenderLayerCompositor::detachScrollCoordinatedLayerWithRole(WebCore::RenderLayer &,WebCore::ScrollingCoordinator &,WebCore::ScrollCoordinationRole)::$_0::operator()(v7, v6, v28, *(_QWORD *)(v27 + 216));
      }
      if ((a3 & 0x20) != 0)
      {
        v20 = *(_QWORD *)(a2 + 256);
        v21 = *(_QWORD *)(v20 + 272);
        if (v21)
          result = WebCore::RenderLayerCompositor::detachScrollCoordinatedLayerWithRole(WebCore::RenderLayer &,WebCore::ScrollingCoordinator &,WebCore::ScrollCoordinationRole)::$_0::operator()(v7, v6, v21, *(_QWORD *)(v20 + 280));
      }
      v8 = v3 + 28;
      if (v3[28] || v3[6] || v3[30] || v3[32] || v3[26] || v3[34])
      {
        result = (WTF *)WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3[1] + 32) + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                          + 24)
                                                                              + 8));
        if (result)
        {
          v9 = result;
          if ((a3 & 2) != 0 && *v8)
          {
            result = (WTF *)(*(uint64_t (**)(WTF *, _QWORD, _QWORD))(*(_QWORD *)result + 256))(result, *v8, v3[29]);
            *v8 = 0;
            v3[29] = 0;
          }
          if ((a3 & 4) != 0)
          {
            v14 = (unsigned int *)v3[6];
            if (v14)
            {
              v15 = v14[3];
              if ((_DWORD)v15)
              {
                v16 = 96 * v15;
                v17 = (_QWORD *)(*(_QWORD *)v14 + 64);
                do
                {
                  if (*v17)
                  {
                    result = (WTF *)(*(uint64_t (**)(WTF *, _QWORD, _QWORD))(*(_QWORD *)v9 + 256))(v9, *v17, v17[1]);
                    *v17 = 0;
                    v17[1] = 0;
                  }
                  v17 += 12;
                  v16 -= 96;
                }
                while (v16);
              }
            }
          }
          if ((a3 & 8) != 0)
          {
            v10 = v3[30];
            if (v10)
            {
              result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t, _QWORD))(*(_QWORD *)v9 + 256))(v9, v10, v3[31]);
              v3[30] = 0;
              v3[31] = 0;
            }
          }
          if ((a3 & 0x10) != 0)
          {
            v11 = v3[32];
            if (v11)
            {
              result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t, _QWORD))(*(_QWORD *)v9 + 256))(v9, v11, v3[33]);
              v3[32] = 0;
              v3[33] = 0;
            }
          }
          if ((a3 & 1) != 0)
          {
            v12 = v3[26];
            if (v12)
            {
              result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t, _QWORD))(*(_QWORD *)v9 + 256))(v9, v12, v3[27]);
              v3[26] = 0;
              v3[27] = 0;
            }
          }
          if ((a3 & 0x20) != 0)
          {
            v13 = v3[34];
            if (v13)
            {
              result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t, _QWORD))(*(_QWORD *)v9 + 256))(v9, v13, v3[35]);
              v3[34] = 0;
              v3[35] = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Page::scrollingCoordinator(WebCore::Page *this)
{
  uint64_t v1;
  void *v4;
  WebCore::ScrollingCoordinator *v5;
  uint64_t v6;
  void *v7;
  WebCore::ScrollingCoordinator *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  WebCore::ScrollingCoordinator *v14;
  WebCore::ScrollingCoordinator *v15;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
  {
    if ((*(_QWORD *)(*((_QWORD *)this + 14) + 688) & 0x2000000000000000) != 0)
    {
      v13 = (uint64_t *)((char *)this + 104);
      (*(void (**)(WebCore::ScrollingCoordinator **__return_ptr, _QWORD, WebCore::Page *))(**(_QWORD **)(*((_QWORD *)this + 6) + 16) + 1072))(&v15, *(_QWORD *)(*((_QWORD *)this + 6) + 16), this);
      v5 = v15;
      v14 = this;
      v15 = 0;
      v6 = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v5;
      if (v6)
      {
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v4);
        v8 = v15;
        v15 = 0;
        if (v8)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v8 + 1, v7);
        v5 = (WebCore::ScrollingCoordinator *)*v13;
      }
      if (!v5)
      {
        WebCore::ScrollingCoordinator::create(this, &v15);
        WTF::RefPtr<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::operator=<WebCore::ScrollingCoordinator>(v13, (uint64_t *)&v15);
        WTF::Ref<WebCore::ScrollingCoordinator,WTF::RawPtrTraits<WebCore::ScrollingCoordinator>,WTF::DefaultRefDerefTraits<WebCore::ScrollingCoordinator>>::~Ref((uint64_t *)&v15, v12);
      }
      v9 = WebCore::Page::scrollingCoordinator(this);
      v10 = (unsigned __int8 **)v9;
      if (v9)
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v9 + 8));
      (*((void (**)(unsigned __int8 **, _QWORD, _QWORD))*v10 + 58))(v10, *((unsigned int *)v14 + 78), *(_QWORD *)((char *)v14 + 316));
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v10 + 1, v11);
      return *((_QWORD *)v14 + 13);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t WebCore::AsyncScrollingCoordinator::frameViewEventTrackingRegionsChanged(WebCore::AsyncScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  WebCore::Page *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;

  *((_BYTE *)this + 72) = 1;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 41) + 632) + 8);
  result = WebCore::AsyncScrollingCoordinator::ensureScrollingStateTreeForRootFrameID((uint64_t)this, *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
  v7 = *(_QWORD *)(result + 56);
  if (!v7)
    return result;
  v10 = *(unsigned __int8 **)(v7 + 8);
  v8 = (unsigned __int8 **)(v7 + 8);
  v9 = v10;
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v9);
    goto LABEL_5;
  }
  if (__stxr(1u, v9))
    goto LABEL_4;
LABEL_5:
  ++*((_QWORD *)v9 + 1);
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v9))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v8, v6);
  result = (*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 568))(this);
  v13 = *((_QWORD *)a2 + 41);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = *(_QWORD *)(v13 + 24);
  if (v16)
  {
    v17 = *(WebCore::Page **)(v16 + 8);
    if (v17)
    {
      result = WebCore::DebugPageOverlays::sharedDebugOverlays;
      if (WebCore::DebugPageOverlays::sharedDebugOverlays)
      {
        result = WebCore::DebugPageOverlays::hasOverlaysForPage((WebCore::DebugPageOverlays *)WebCore::DebugPageOverlays::sharedDebugOverlays, v17);
        if ((_DWORD)result)
        {
          WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v13, 0);
          WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v13, 1u);
          WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v13, 2u);
          result = (uint64_t)WebCore::DebugPageOverlays::regionChanged((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, v13, 3u);
        }
      }
    }
  }
  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (!v19)
  {
    atomic_store(1u, v14);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E31FE290;
    v20[1] = v14;
    v21 = (uint64_t)v20;
    WTF::ensureOnMainThread();
    result = v21;
    if (v21)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  return result;
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v3;

  v1 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 **)MEMORY[0x19AEA534C](v1);
    goto LABEL_4;
  }
  if (__stxr(1u, v1))
    goto LABEL_3;
LABEL_4:
  ++*((_QWORD *)v1 + 1);
  v3 = __ldxr(v1);
  if (v3 != 1)
  {
    __clrex();
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, v1))
    return (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return result;
}

uint64_t WebCore::Document::setTouchEventRegionsNeedUpdate(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(this + 624);
  if (v1 && *(_DWORD *)(v1 - 12) || (v2 = *(_QWORD *)(this + 632)) != 0 && *(_DWORD *)(v2 - 12))
  {
    if (*(_BYTE *)(this + 3362) || *(_BYTE *)(this + 3405))
    {
      while (1)
      {
        v15 = *(_QWORD *)(this + 528);
        if (!v15)
          break;
        v16 = *(_QWORD *)(v15 + 8);
        if (!v16)
          break;
        v17 = *(_QWORD *)(v16 + 120);
        if (!v17)
          break;
        v18 = *(_QWORD *)(v17 + 8);
        if (!v18)
          break;
        this = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8);
      }
    }
    else
    {
      v3 = *(_QWORD *)(this + 528);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
          if (v5 && *(_BYTE *)(v5 + 144) == 0)
          {
            v7 = *(_QWORD *)(v5 + 296);
            if (v7)
              this = v7;
          }
        }
      }
    }
    if (!*(_BYTE *)(this + 672))
    {
      *(_BYTE *)(this + 672) = 1;
      v8 = *(_QWORD *)(this + 528);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 24);
          if (v10)
          {
            v11 = *(_QWORD *)(v9 + 288);
            v12 = *(_QWORD *)(v10 + 8);
            if (v12)
              v13 = v11 == 0;
            else
              v13 = 1;
            if (!v13)
            {
              v14 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(v10 + 8));
              if (v14)
                return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 88))(v14, v11);
              else
                return WebCore::Page::scheduleRenderingUpdate(v12, 0x2000);
            }
          }
        }
      }
    }
  }
  return this;
}

BOOL WebCore::RenderLayerCompositor::isViewportConstrainedFixedOrStickyLayer(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *((_QWORD *)a2 + 4);
  v3 = *(_DWORD *)(v2 + 20) & 0x1800000;
  if (v3 == 0x1000000)
  {
    if ((*(_BYTE *)(v2 + 45) & 2) != 0)
      v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
    if ((*(_QWORD *)(v2 + 96) & 0x380000) == 0x300000 && (*((_BYTE *)a2 + 26) & 0x80) != 0)
    {
      v6 = *((_QWORD *)a2 + 5);
      if (v6)
      {
        v7 = 74;
        while (1)
        {
          v8 = *(_QWORD *)(v6 + 264);
          if (v8 && *(_BYTE *)(v8 + 79))
          {
            v10 = 0;
            v7 = 1;
            goto LABEL_24;
          }
          if ((*(_BYTE *)(v6 + 24) & 0x4A) != 0)
          {
            if (*(_QWORD *)(v6 + 256))
            {
              v9 = *(_QWORD *)(v6 + 32);
              if ((*(_DWORD *)(v9 + 20) & 0x1800000) == 0x1000000)
              {
                if ((*(_BYTE *)(v9 + 45) & 2) != 0)
                  v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
                if ((*(_QWORD *)(v9 + 96) & 0x380000) == 0x300000)
                  break;
              }
            }
          }
          v6 = *(_QWORD *)(v6 + 40);
          if (!v6)
          {
            v10 = 1;
            goto LABEL_24;
          }
        }
        v10 = 0;
        v7 = 0;
LABEL_24:
        v4 = v10 | v7;
      }
      else
      {
        v4 = 1;
      }
      return v4 & 1;
    }
LABEL_3:
    v4 = 0;
    return v4 & 1;
  }
  if (v3 != 25165824)
    goto LABEL_3;
  return WebCore::RenderLayerCompositor::isAsyncScrollableStickyLayer(this, *((const WebCore::RenderLayer **)a2 + 5), 0);
}

uint64_t WebCore::TimerBase::start(double *a1, double a2, double a3)
{
  double v5;

  a1[3] = a3;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  return WebCore::TimerBase::setNextFireTime((uint64_t)a1, a2 + v5);
}

unsigned __int8 **WebCore::AsyncScrollingCoordinator::frameViewVisualViewportChanged(WebCore::AsyncScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  unsigned __int8 **result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  result = (unsigned __int8 **)(*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 40))(this);
  if ((_DWORD)result)
  {
    result = (unsigned __int8 **)WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v12, this, (uint64_t)a2 + 64);
    v6 = v12;
    if (v12)
    {
      if (*(unsigned __int8 *)(v12 + 16) <= 1u)
      {
        WebCore::LocalFrameView::layoutViewportRect(a2);
        v8 = v7;
        WebCore::LocalFrameView::visualViewportRect(a2);
        v10 = (int)v5 < (int)v8 || SHIDWORD(v5) < SHIDWORD(v8);
        if (*(unsigned __int8 *)(v6 + 870) != v10)
        {
          *(_BYTE *)(v6 + 870) = v10;
          v11 = *(_QWORD *)(v6 + 40);
          if ((v11 & 0x200000000) == 0)
          {
            *(_QWORD *)(v6 + 40) = v11 | 0x200000000;
            WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v6 + 48), 1);
          }
        }
      }
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v6 + 8), v5);
    }
  }
  return result;
}

BOOL WebCore::RenderView::usesCompositing(WebCore::RenderView *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 50);
  return v1 && *(_BYTE *)(v1 + 195) != 0;
}

uint64_t WebCore::RenderLayerCompositor::useCoordinatedScrollingForLayer(WebCore::RenderLayerCompositor *this, const WebCore::RenderLayer *a2)
{
  uint64_t result;
  uint64_t v5;

  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v5 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8));
    if (v5)
    {
      if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(*((_QWORD *)this + 1) + 248)) & 1) != 0)return 1;
    }
  }
  result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderLayer *))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

BOOL WebCore::ScrollingCoordinator::coordinatesScrollingForOverflowLayer(WebCore::ScrollingCoordinator *this, const WebCore::RenderLayer *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 33);
  return v2 && *(_BYTE *)(v2 + 79) != 0;
}

_QWORD *WTF::Vector<WebCore::FlexItem *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FlexItem *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WebCore::SQLiteStatement::bindText(uint64_t a1, int a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  sqlite3_stmt *v15;
  const char *v17;
  int v18;
  void *v19;
  uint64_t v20;
  WTF *v21;

  if ((a4 & 0xFF00000000) == 0)
    goto LABEL_15;
  v6 = 0;
  v7 = (unsigned __int8 *)&a3[a4];
  v8 = (unsigned __int8 *)a3;
  if ((a3 & 7) != 0 && (_DWORD)a4)
  {
    v6 = 0;
    v9 = a4 - 1;
    v10 = (_BYTE)a3 + 1;
    v8 = (unsigned __int8 *)a3;
    do
    {
      v11 = *v8++;
      v6 |= v11;
      if ((v10 & 7) == 0)
        break;
      v12 = v9--;
      ++v10;
    }
    while (v12);
  }
  while ((unint64_t)v8 < ((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8))
  {
    v13 = *(_QWORD *)v8;
    v8 += 8;
    v6 |= v13;
  }
  while (v8 != v7)
  {
    v14 = *v8++;
    v6 |= v14;
  }
  if ((v6 & 0x8080808080808080) != 0)
  {
LABEL_15:
    WTF::StringView::utf8();
    if (v21)
      v17 = (char *)v21 + 16;
    else
      v17 = 0;
    if (v21)
      v18 = *((_DWORD *)v21 + 2);
    else
      v18 = 0;
    v20 = sqlite3_bind_text(*(sqlite3_stmt **)(a1 + 8), a2, v17, v18, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, v19);
      else
        --*(_DWORD *)v21;
    }
    return v20;
  }
  else
  {
    v15 = *(sqlite3_stmt **)(a1 + 8);
    if (!(_DWORD)a4)
      a3 = (char *)&str_144;
    return sqlite3_bind_text(v15, a2, a3, a4, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t WebCore::HTMLScriptElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  result = (uint64_t)WebCore::HTMLElement::childrenChanged(a1, a2);
  if ((*(_WORD *)(a1 + 133) & 1) == 0)
  {
    v5 = *a2;
    if (!*a2 || ((v6 = v5 > 8, v7 = (1 << v5) & 0x184, !v6) ? (v8 = v7 == 0) : (v8 = 1), !v8))
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 22) & 8) != 0)
      {
        v9 = 0;
        result = WebCore::ScriptElement::prepareScript(a1 + 112, (const WebCore::ContainerNode *)&v9);
      }
    }
  }
  if (a2[32] == 1)
    *(_WORD *)(a1 + 133) |= 0x400u;
  return result;
}

unsigned int *WebCore::HTMLConstructionSite::insertTextNode(WebCore::HTMLConstructionSite *this, const WTF::String *a2)
{
  unsigned __int16 *v3;
  WebCore::Node *v4;
  __int16 v5;
  BOOL v6;
  WebCore::Node *v7;
  uint64_t BreakIndexSlow;
  uint64_t v9;
  _UNKNOWN **v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  WebCore::Node *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;
  const WebCore::Style::RuleSet *v19;
  WebCore::TreeScope *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  WebCore::Node *v24;
  int v25;
  WebCore::Node *v26;
  int v27;
  WebCore::Node *v28;
  unsigned int *result;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  WebCore::Node *v40;
  WebCore::Node *v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  WebCore::Node *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  uint64_t v51;
  WebCore::Node *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  char v55;
  WebCore::Node *v56;
  uint64_t v57;

  LODWORD(v51) = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v3 = (unsigned __int16 *)*((_QWORD *)this + 7);
  v4 = (WebCore::Node *)*((_QWORD *)v3 + 1);
  if (v4)
    *((_DWORD *)v4 + 6) += 2;
  v52 = v4;
  if (*((_BYTE *)this + 170))
  {
    v43 = *v3 - 116;
    v44 = v43 > 9;
    v45 = (1 << v43) & 0x2A3;
    if (!v44 && v45 != 0)
    {
      WebCore::HTMLConstructionSite::findFosterSite((uint64_t)this, &v51);
      v4 = v52;
    }
  }
  v5 = *((_WORD *)v4 + 14);
  if ((v5 & 8) == 0
    || (*(unsigned __int16 *)(*((_QWORD *)v4 + 12) + 10) - 255 <= 0xD
      ? (v6 = ((1 << (*(_WORD *)(*((_QWORD *)v4 + 12) + 10) + 1)) & 0x2003) == 0)
      : (v6 = 1),
        v6))
  {
    v42 = 0x10000;
  }
  else
  {
    v42 = -1;
  }
  v50 = 0;
  if (v53)
  {
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v50, *((_QWORD *)v53 + 6) & 0xFFFFFFFFFFFFLL);
    v7 = v50;
  }
  else
  {
    if ((v5 & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)v4 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24)
      && (v4 = (WebCore::Node *)*((_QWORD *)v4 + 14)) == 0)
    {
      v7 = 0;
    }
    else
    {
      v7 = (WebCore::Node *)*((_QWORD *)v4 + 11);
      if (v7)
        *((_DWORD *)v7 + 6) += 2;
    }
    v50 = v7;
  }
  if (!v7 || (*((_WORD *)v7 + 14) & 2) == 0 || (v30 = *((_QWORD *)v7 + 10)) != 0 && *(_DWORD *)(v30 + 4) >= v42)
  {
    BreakIndexSlow = 0;
    goto LABEL_20;
  }
  v31 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v32 = *(_DWORD *)(v31 + 4);
  else
    v32 = 0;
  if (v30)
    LODWORD(v30) = *(_DWORD *)(v30 + 4);
  v33 = v42 - v30;
  if (v33 >= v32)
    BreakIndexSlow = v32;
  else
    BreakIndexSlow = v33;
  if (v31)
  {
    if (*(_DWORD *)(v31 + 4) != (_DWORD)BreakIndexSlow && (*(_BYTE *)(v31 + 16) & 4) == 0)
      BreakIndexSlow = WebCore::findBreakIndexSlow(v31, 0, BreakIndexSlow);
    if ((_DWORD)BreakIndexSlow)
    {
      v34 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v35 = *(unsigned int *)(v34 + 4);
        if ((_DWORD)v35)
        {
          v36 = *(char **)(v34 + 8);
          v37 = (*(_DWORD *)(v34 + 16) >> 2) & 1;
          if (v35 <= BreakIndexSlow)
            v38 = v35 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v37 & 1) << 32);
          else
            v38 = (v37 << 32) | BreakIndexSlow;
          goto LABEL_83;
        }
      }
LABEL_117:
      v38 = 0x100000000;
      v36 = "";
LABEL_83:
      WebCore::CharacterData::parserAppendData((uint64_t)v7, v36, v38);
    }
  }
  else if ((_DWORD)BreakIndexSlow)
  {
    goto LABEL_117;
  }
LABEL_20:
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v10 = &bmalloc::api::IsoHeapBase<WebCore::Text>::provideHeap(void)::heap;
    do
    {
      v11 = *(_DWORD *)(v9 + 4);
      if (BreakIndexSlow >= v11)
        break;
      v12 = BreakIndexSlow + v42;
      if (v11 >= BreakIndexSlow + v42)
        v13 = v12;
      else
        v13 = v11;
      if (v11 > v12 && (*(_BYTE *)(v9 + 16) & 4) == 0)
      {
        LODWORD(v13) = WebCore::findBreakIndexSlow(v9, (const WTF::String *)BreakIndexSlow, v13);
        v9 = *(_QWORD *)a2;
      }
      if ((_DWORD)v13 == (_DWORD)BreakIndexSlow)
      {
        if (v9)
        {
          LODWORD(v13) = *(_DWORD *)(v9 + 4);
LABEL_29:
          v14 = v13 - BreakIndexSlow;
          if ((_DWORD)BreakIndexSlow || *(_DWORD *)(v9 + 4) > v14)
          {
            WTF::StringImpl::substring((WTF::StringImpl *)v9);
            v9 = v57;
          }
          else
          {
            *(_DWORD *)v9 += 2;
          }
        }
      }
      else if (v9)
      {
        goto LABEL_29;
      }
      v15 = v52;
      v16 = *(_QWORD *)(*((_QWORD *)v52 + 5) + 8);
      v17 = v10;
      v18 = bmalloc::api::isoAllocate();
      v21 = v18;
      *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v18 + 24) = 0x300300000002;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = v16 + 96;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      ++*(_DWORD *)(v16 + 3324);
      v22 = (_DWORD *)v9;
      if (v9 || (v22 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
      {
        *v22 += 2;
        *(_QWORD *)(v18 + 80) = v22;
        *(_QWORD *)v18 = off_1E33A8078;
        v23 = v22[1];
      }
      else
      {
        v23 = 0;
        *(_QWORD *)(v18 + 80) = 0;
        *(_QWORD *)v18 = off_1E33A8078;
      }
      v24 = v54;
      v54 = (WebCore::Node *)v21;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, a2);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
      if ((_DWORD)v51)
      {
        switch((_DWORD)v51)
        {
          case 1:
            WebCore::executeInsertAlreadyParsedChildTask(&v51, (uint64_t)a2, (uint64_t)v19, v20);
            break;
          case 2:
            WebCore::executeReparentTask((unsigned int *)&v51, (uint64_t)a2, v19, v20);
            break;
          case 3:
            WebCore::executeTakeAllChildrenAndReparentTask((uint64_t)&v51, (uint64_t)a2, v19, v20);
            break;
        }
        goto LABEL_50;
      }
      v25 = *((_DWORD *)v15 + 6);
      *((_DWORD *)v15 + 6) = v25 + 2;
      if ((*((_WORD *)v15 + 14) & 0x10) != 0
        && *(_QWORD *)(*((_QWORD *)v15 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
      {
        v39 = *((_QWORD *)v15 + 15);
        if (!v39 || (v40 = *(WebCore::Node **)(v39 + 8)) == 0)
          v40 = (WebCore::Node *)WebCore::HTMLTemplateElement::content(v15);
        *((_DWORD *)v40 + 6) += 2;
        v52 = v40;
        if (*((_DWORD *)v15 + 6) == 2)
        {
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          {
            v47 = v40;
            WebCore::Node::removedLastRef(v15, a2);
            v40 = v47;
          }
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
        }
        v41 = v53;
        v53 = 0;
        if (v41)
        {
          if (*((_DWORD *)v41 + 6) == 2)
          {
            if ((*((_WORD *)v41 + 15) & 0x400) == 0)
            {
              v49 = v40;
              WebCore::Node::removedLastRef(v41, a2);
              v40 = v49;
            }
          }
          else
          {
            *((_DWORD *)v41 + 6) -= 2;
          }
        }
        if (*((_DWORD *)v15 + 6) == 2)
        {
          v48 = v40;
          if ((*((_WORD *)v15 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v15, a2);
          v15 = v48;
        }
        else
        {
          *((_DWORD *)v15 + 6) -= 2;
          v15 = v40;
        }
      }
      else if (v25)
      {
        *((_DWORD *)v15 + 6) = v25;
      }
      else if ((*((_WORD *)v15 + 15) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(v15, a2);
      }
      v26 = v53;
      if (v53)
      {
        *(_DWORD *)(v21 + 24) += 2;
        v56 = v26;
        v57 = v21;
        *((_DWORD *)v26 + 6) += 2;
        WebCore::ContainerNode::parserInsertBefore((unsigned int *)v15, v21, v26, v20);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v56);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v57);
      }
      else
      {
        *(_DWORD *)(v21 + 24) += 2;
        WebCore::ContainerNode::parserAppendChild((uint64_t)v15, (WebCore::Node *)v21, 0, v20);
        v27 = *(_DWORD *)(v21 + 24) - 2;
        if (*(_DWORD *)(v21 + 24) != 2)
          goto LABEL_45;
        if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v21, a2);
      }
      v27 = *(_DWORD *)(v21 + 24);
LABEL_45:
      *(_DWORD *)(v21 + 24) = v27 + 2;
      if ((*(_WORD *)(v21 + 28) & 8) != 0)
      {
        *(_WORD *)(v21 + 30) |= 2u;
        if (v55)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 760))(v21);
          v27 = *(_DWORD *)(v21 + 24) - 2;
        }
      }
      if (v27)
      {
        *(_DWORD *)(v21 + 24) = v27;
      }
      else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v21, a2);
      }
LABEL_50:
      v10 = v17;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      BreakIndexSlow = (v23 + BreakIndexSlow);
      v9 = *(_QWORD *)a2;
    }
    while (*(_QWORD *)a2);
  }
  v28 = v50;
  v50 = 0;
  if (v28)
  {
    if (*((_DWORD *)v28 + 6) == 2)
    {
      if ((*((_WORD *)v28 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v28, a2);
    }
    else
    {
      *((_DWORD *)v28 + 6) -= 2;
    }
  }
  if (v54)
  {
    if (*((_DWORD *)v54 + 6) == 2)
    {
      if ((*((_WORD *)v54 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v54, a2);
    }
    else
    {
      *((_DWORD *)v54 + 6) -= 2;
    }
  }
  if (v53)
  {
    if (*((_DWORD *)v53 + 6) == 2)
    {
      if ((*((_WORD *)v53 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v53, a2);
    }
    else
    {
      *((_DWORD *)v53 + 6) -= 2;
    }
  }
  result = (unsigned int *)v52;
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v52, a2);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  return result;
}

uint64_t *WebCore::insert(_QWORD *a1, void *a2, uint64_t a3, WebCore::TreeScope *a4)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  WebCore::Node *v8;
  uint64_t v9;
  uint64_t *result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;
  uint64_t v19;

  v5 = a1[1];
  if (!v5)
    goto LABEL_6;
  v6 = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v5 + 24) = v6 + 2;
  if ((*(_WORD *)(v5 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    v12 = *(_QWORD *)(v5 + 120);
    if (v12 && (v17 = *(_QWORD *)(v12 + 8)) != 0)
    {
      *(_DWORD *)(v17 + 24) += 2;
      a1[1] = v17;
      v14 = v5;
    }
    else
    {
      v13 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)v5);
      v14 = a1[1];
      *(_DWORD *)(v13 + 24) += 2;
      a1[1] = v13;
      if (!v14)
        goto LABEL_16;
    }
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
LABEL_16:
    v15 = a1[2];
    a1[2] = 0;
    if (v15)
    {
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    v6 = *(_DWORD *)(v5 + 24) - 2;
    if (*(_DWORD *)(v5 + 24) != 2)
      goto LABEL_5;
    goto LABEL_20;
  }
  if (v6)
  {
LABEL_5:
    *(_DWORD *)(v5 + 24) = v6;
    goto LABEL_6;
  }
LABEL_20:
  if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
LABEL_6:
  v7 = (unsigned int *)a1[1];
  v8 = (WebCore::Node *)a1[2];
  if (v8)
  {
    v16 = a1[3];
    *(_DWORD *)(v16 + 24) += 2;
    v18 = v8;
    v19 = v16;
    *((_DWORD *)v8 + 6) += 2;
    WebCore::ContainerNode::parserInsertBefore(v7, v16, v8, a4);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v18);
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v19);
  }
  else
  {
    v9 = a1[3];
    *(_DWORD *)(v9 + 24) += 2;
    result = (uint64_t *)WebCore::ContainerNode::parserAppendChild((uint64_t)v7, (WebCore::Node *)v9, 0, a4);
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ContainerNode::parserAppendChild(uint64_t this, WebCore::Node *a2, const WebCore::Style::RuleSet *a3, WTF::String *a4)
{
  WebCore::Node *v4;
  WebCore::ContainerNode *v5;
  __n128 v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  WebCore::Node *v10;
  char v11;
  WTF *v12;
  __int16 v13;
  WebCore::Style::Invalidator *v14;
  int v15;
  _BOOL4 v16;
  _QWORD *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int v21;
  unsigned int v22;
  const WebCore::Style::RuleSet *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v27;
  char v28;
  WebCore::Node *v29;
  uint64_t v30;
  WebCore::Node *v31;
  char v32;
  __int16 v33;
  WebCore::Node *v34;
  int v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t v38;
  WebCore::Text *v39;
  WebCore::TreeScope *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v45;
  WebCore::TreeScope *v46;
  WebCore::Node *v47;
  _BOOL4 v48;
  _BOOL4 v49;
  void *v50;
  const WebCore::Style::RuleSet *v51;
  _BOOL4 v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  int v63;
  WTF *v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  WebCore::TreeScope *v70;
  WebCore::Node *v71;
  int v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  void *v78;
  const WebCore::Style::RuleSet *v79;
  int v80;
  uint64_t result;
  void *v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int16 v95;
  __int16 v96;
  void *v97;
  WebCore::ChildListMutationAccumulator *v98;
  WebCore::ChildListMutationAccumulator *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  Inspector::InspectorDebuggerAgent **v126;
  WebCore::ContainerNode *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WebCore::FrameTree *v147;
  uint64_t v148;
  const WebCore::Frame *v149;
  WTF *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  uint64_t v164;
  uint64_t v165;
  _DWORD *v166;
  uint64_t v167;
  WebCore::ContainerNode *v168;
  uint64_t *v169;
  WebCore::Node *v170;
  _QWORD *v171;
  WebCore::Event *v172;
  WTF::StringImpl *v173;
  const WebCore::Node *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  WebCore::ContainerNode *v178;
  _QWORD *v179;
  uint64_t v180;
  WebCore::Event *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  WebCore::Node *v188;
  WebCore::Event *v189;
  WTF::StringImpl *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  _BOOL4 v194;
  _QWORD *v195;
  BOOL v196;
  uint64_t v197;
  WTF *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  WTF *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  WTF *v210;
  WebCore::Style::Invalidator *v211[2];
  char v212;
  BOOL v213;
  BOOL v214;
  WTF *v215;
  uint64_t v216;
  _BYTE v217[88];
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  WebCore::Node *v221;
  __int128 *v222;
  int v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  _DWORD *v227[2];

  v4 = a2;
  v5 = (WebCore::ContainerNode *)this;
  v6.n128_u64[1] = 0;
  v218 = 0u;
  v219 = 0u;
  v7 = *(_QWORD *)(this + 88);
  v8 = *((_WORD *)a2 + 14);
  if ((v8 & 2) != 0)
    v9 = 2;
  else
    v9 = 7;
  if ((v8 & 8) != 0)
    v9 = 0;
  LOBYTE(v218) = v9;
  if ((v8 & 8) != 0)
    v10 = a2;
  else
    v10 = 0;
  v220 = 0;
  for (*((_QWORD *)&v218 + 1) = v10; v7; v7 = *(_QWORD *)(v7 + 48) & 0xFFFFFFFFFFFFLL)
  {
    if ((*(_WORD *)(v7 + 28) & 8) != 0)
      break;
  }
  *(_QWORD *)&v219 = v7;
  if ((v8 & 8) != 0)
    v11 = 2;
  else
    v11 = 1;
  BYTE1(v220) = v11;
  v12 = (WTF *)v217;
  v215 = (WTF *)v217;
  v6.n128_u64[0] = 11;
  v216 = 11;
  ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  ++WebCore::ScriptDisallowedScope::s_count;
  v13 = *(_WORD *)(this + 28);
  if ((v13 & 8) != 0)
    v14 = (WebCore::Style::Invalidator *)this;
  else
    v14 = 0;
  v211[0] = v14;
  v211[1] = (WebCore::Style::Invalidator *)&v218;
  if ((v13 & 8) != 0)
  {
    this = WebCore::Element::needsStyleInvalidation((WebCore::Element *)this);
    v212 = this;
    if ((_DWORD)this)
    {
      v191 = (uint64_t *)*((_QWORD *)v211[0] + 5);
      v192 = *v191;
      if (*v191 && (*(_WORD *)(v192 + 28) & 0x80) != 0)
        v193 = v192 + 216;
      else
        v193 = v191[1] + 1328;
      v16 = *(unsigned __int8 *)(*(_QWORD *)v193 + 236) != 0;
      v15 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v212 = 0;
  }
  v213 = v16;
  v214 = *((_QWORD *)v5 + 10) == 0;
  if (v15 && v16)
    WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v211, (uint64_t)a2, a3);
  if ((*((_WORD *)v5 + 14) & 0x80) != 0 || (*((_BYTE *)v5 + 22) & 0x10) != 0)
  {
    v17 = (_QWORD *)*((_QWORD *)v5 + 5);
    v113 = *v17;
    if ((*(_WORD *)(*v17 + 28) & 0x80) == 0)
      v113 = 0;
    v114 = *(_QWORD *)(v113 + 224);
    if (v114)
    {
      ++*(_DWORD *)(v114 + 12);
      *(_BYTE *)(v114 + 9) = 0;
    }
  }
  else
  {
    v17 = (_QWORD *)*((_QWORD *)v5 + 5);
  }
  v18 = v17[1];
  if (v18 != *(_QWORD *)(*((_QWORD *)v4 + 5) + 8))
  {
    v19 = &dword_1ECE90000;
    v20 = &webThreadDelegateMessageScopeCount;
    {
      v21 = qword_1EE2F5808;
    }
    else
    {
      v21 = 0;
      WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
      unk_1EE2F5800 = 0;
      qword_1EE2F5808 = 0;
    }
    LODWORD(qword_1EE2F5808) = v21 + 1;
    v22 = *((unsigned __int16 *)v4 + 14);
    if (v22 >> 12 == 2)
    {
      v144 = *((_QWORD *)v4 + 10);
      if (v144)
      {
        v24 = *(_QWORD *)(v144 + 8);
        if (v24)
        {
          *(_DWORD *)(v24 + 24) += 2;
          this = WebCore::Element::removeAttributeNode(v24, v4, (uint64_t)a3, a4, (uint64_t)&v224, v6);
          if ((_DWORD)v225)
          {
            if ((_DWORD)v225 != 1)
            {
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_465;
            }
            LOBYTE(v221) = v224;
            v222 = (__int128 *)*((_QWORD *)&v224 + 1);
            v223 = 1;
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                this = WebCore::Node::removedLastRef((WebCore::Node *)v24);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
            goto LABEL_131;
          }
          this = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4AttrENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_((uint64_t)&v221, (uint64_t *)&v224);
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)v24);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
        }
      }
      goto LABEL_128;
    }
    if (v22 >> 12 == 9)
    {
      LOBYTE(v221) = 6;
      v222 = 0;
      v223 = 1;
LABEL_131:
      if ((v19[346] & 1) != 0)
      {
        v63 = v20[514] - 1;
        v20[514] = v63;
        if (!v63)
        {
          v64 = (WTF *)WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue;
          v65 = dword_1EE2F5804;
          WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
          unk_1EE2F5800 = 0;
          if ((_DWORD)v65)
          {
            v163 = v12;
            v164 = 0;
            v165 = 16 * v65;
            v166 = (_DWORD *)((char *)v64 + 16 * v65);
            do
            {
              this = WebCore::ScopedEventQueue::dispatchEvent(this, (WTF *)((char *)v64 + v164));
              v164 += 16;
            }
            while (v165 != v164);
            WTF::VectorDestructor<true,WebCore::ScopedEventQueue::ScopedEvent>::destruct(v64, v166);
            v12 = v163;
          }
          if (v64)
            WTF::fastFree(v64, a2);
        }
      }
      else
      {
        unk_1EE2F5800 = 0;
        qword_1EE2F5808 = 0;
        WebCore::ScopedEventQueue::singleton(void)::scopedEventQueue = 0;
        *((_BYTE *)v19 + 1384) = 1;
        LODWORD(qword_1EE2F5808) = -1;
      }
      if (v223 != -1)
        ((void (*)(__int128 *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore4NodeENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v223])(&v224, &v221);
      v223 = -1;
      goto LABEL_139;
    }
    if ((v22 & 0x80) != 0
      || (this = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v4 + 192))(v4), (_DWORD)this)
      && (v145 = *(_QWORD *)(v18 + 528)) != 0
      && (v146 = *(_QWORD *)(v145 + 8)) != 0
      && ((v147 = (WebCore::FrameTree *)(v146 + 48), (v148 = *((_QWORD *)v4 + 14)) != 0)
        ? (v149 = *(const WebCore::Frame **)(v148 + 8))
        : (v149 = 0),
          this = WebCore::FrameTree::isDescendantOf(v147, v149),
          (_DWORD)this))
    {
      LOBYTE(v221) = 1;
      v222 = 0;
      v223 = 1;
      goto LABEL_131;
    }
    v210 = (WTF *)v217;
    v24 = *((_QWORD *)v4 + 4);
    if (!v24)
    {
LABEL_126:
      if ((*((_BYTE *)v4 + 22) & 8) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941A4BDCLL);
      }
      v12 = v210;
      v19 = &dword_1ECE90000;
      v20 = &webThreadDelegateMessageScopeCount;
      if (*((_QWORD *)v4 + 4))
      {
        __break(0xC471u);
        JUMPOUT(0x1941A4BFCLL);
      }
LABEL_128:
      a2 = (WebCore::Node *)*((_QWORD *)v4 + 5);
      if (a2 != (WebCore::Node *)(v18 + 96))
        this = WebCore::Node::moveTreeToNewScope(v4, a2, (WebCore::TreeScope *)(v18 + 96), a4);
      *((_DWORD *)v4 + 6) += 2;
      v221 = v4;
      v223 = 0;
      goto LABEL_131;
    }
    *(_DWORD *)(v24 + 24) += 4;
    *((_DWORD *)v4 + 6) += 4;
    ++WebCore::ScriptDisallowedScope::s_count;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8) + 3364) & 1) != 0)
    {
      WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)v24, (uint64_t *)&v224);
      v99 = (WebCore::ChildListMutationAccumulator *)v224;
      if ((_QWORD)v224)
      {
        if (*(_QWORD *)(v224 + 80))
          WebCore::ChildListMutationAccumulator::willRemoveChild((WebCore::ChildListMutationAccumulator *)v224, v4);
        if (*(_DWORD *)v99 == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v99, a2);
          WTF::fastFree(v150, v151);
        }
        else
        {
          --*(_DWORD *)v99;
        }
      }
    }
    --WebCore::ScriptDisallowedScope::s_count;
    v25 = *((_QWORD *)v4 + 5);
    if (*(_BYTE *)(*(_QWORD *)(v25 + 8) + 3364))
    {
      v19 = (int *)*((_QWORD *)v4 + 4);
      if (v19)
      {
        while (1)
        {
          if ((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v100 = *(_QWORD *)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 8);
            if (v100)
            {
              v101 = *(unsigned int *)(v100 + 12);
              if (!(_DWORD)v101)
                break;
              v184 = *(uint64_t **)v100;
              v185 = 8 * v101;
              do
              {
                v186 = *v184++;
                WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(v186, v4);
                v185 -= 8;
              }
              while (v185);
              if ((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) != 0)
              {
                v100 = *(_QWORD *)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 8);
                if (v100)
                  break;
              }
            }
          }
LABEL_250:
          v19 = (int *)*((_QWORD *)v19 + 4);
          if (!v19)
          {
            v25 = *((_QWORD *)v4 + 5);
            goto LABEL_36;
          }
        }
        v104 = *(_QWORD *)(v100 + 16);
        v102 = (uint64_t *)(v100 + 16);
        v103 = v104;
        if (v104)
        {
          v106 = *(unsigned int *)(v103 - 4);
          v107 = v103 + 8 * v106;
          if (*(_DWORD *)(v103 - 12))
          {
            v105 = v103;
            if ((_DWORD)v106)
            {
              v112 = 8 * v106;
              v105 = v103;
              while ((unint64_t)(*(_QWORD *)v105 + 1) <= 1)
              {
                v105 += 8;
                v112 -= 8;
                if (!v112)
                {
                  v105 = v107;
                  goto LABEL_256;
                }
              }
            }
            goto LABEL_256;
          }
LABEL_465:
          v105 = v107;
        }
        else
        {
          v105 = 0;
          v106 = 0;
        }
        v107 = v103 + 8 * v106;
LABEL_256:
        *(_QWORD *)&v224 = v102;
        *((_QWORD *)&v224 + 1) = v105;
        *(_QWORD *)&v225 = v107;
        if (v103)
        {
          v109 = *(unsigned int *)(v103 - 4);
          v108 = v103 + 8 * v109;
        }
        else
        {
          v108 = 0;
          v109 = 0;
        }
        *((_QWORD *)&v225 + 1) = v108;
        v226 = v103 + 8 * v109;
        if (v105 != v108)
        {
          v162 = v105;
          while (!*(_QWORD *)(*(_QWORD *)v162 + 8))
          {
            v204 = v162 + 8;
            *((_QWORD *)&v224 + 1) = v162 + 8;
            v162 = v107;
            if (v204 != v107)
            {
              v162 = v204;
              while ((unint64_t)(*(_QWORD *)v162 + 1) <= 1)
              {
                v162 += 8;
                *((_QWORD *)&v224 + 1) = v162;
                if (v162 == v107)
                {
                  v162 = v107;
                  break;
                }
              }
            }
            v105 = v108;
            if (v162 == v108)
              goto LABEL_259;
          }
          v105 = v162;
        }
LABEL_259:
        v110 = *v102;
        if (v110)
          v111 = v110 + 8 * *(unsigned int *)(v110 - 4);
        else
          v111 = 0;
        while (v105 != v111)
        {
          WebCore::MutationObserverRegistration::observedSubtreeNodeWillDetach(*(_QWORD *)(*(_QWORD *)v105 + 8), v4);
          WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v224);
          v105 = *((_QWORD *)&v224 + 1);
        }
        goto LABEL_250;
      }
    }
LABEL_36:
    this = *(_QWORD *)(v25 + 8);
    *(_DWORD *)(this + 24) += 2;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v122 = *(_QWORD *)(this + 528);
      if (v122)
      {
        v123 = *(_QWORD *)(v122 + 8);
        if (v123)
        {
          v124 = *(_QWORD *)(v123 + 24);
          if (v124)
          {
            v125 = *(_QWORD *)(v124 + 8);
            if (v125)
              goto LABEL_290;
          }
        }
      }
      v152 = *(_QWORD *)(this + 2632);
      if (v152)
      {
        v153 = *(_QWORD *)(v152 + 8);
        if (v153)
        {
          v154 = *(_QWORD *)(v153 + 528);
          if (v154)
          {
            v155 = *(_QWORD *)(v154 + 8);
            if (v155)
            {
              v156 = *(_QWORD *)(v155 + 24);
              if (v156)
              {
                v125 = *(_QWORD *)(v156 + 8);
                if (v125)
                {
LABEL_290:
                  v126 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v125 + 80) + 8) + 152);
                  if (v126)
                  {
                    v127 = (WebCore::ContainerNode *)this;
                    WebCore::PageDOMDebuggerAgent::willRemoveDOMNode(v126, v4);
                    this = (uint64_t)v127;
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((*((_BYTE *)v4 + 22) & 0x10) != 0 || *(_BYTE *)(this + 3268))
      goto LABEL_43;
    if (*((_QWORD *)v4 + 4) && (*(_WORD *)(this + 3292) & 4) != 0)
    {
      v178 = (WebCore::ContainerNode *)this;
      v179 = (_QWORD *)(WebCore::eventNames((WebCore *)this) + 40);
      v180 = *((_QWORD *)v4 + 4);
      if (v180)
        *(_DWORD *)(v180 + 24) += 2;
      *(_QWORD *)&v224 = 0;
      v221 = 0;
      v181 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
      WebCore::MutationEvent::MutationEvent((uint64_t)v181, v179, 1, 0, v180, (_DWORD **)&v224, (_DWORD **)&v221);
      WebCore::Node::dispatchScopedEvent(v4, v181);
      if (*((_DWORD *)v181 + 4) == 1)
        (*(void (**)(WebCore::Event *))(*(_QWORD *)v181 + 8))(v181);
      else
        --*((_DWORD *)v181 + 4);
      v182 = v221;
      v221 = 0;
      if (v182)
      {
        if (*(_DWORD *)v182 == 2)
          WTF::StringImpl::destroy(v182, a2);
        else
          *(_DWORD *)v182 -= 2;
      }
      v183 = (WTF::StringImpl *)v224;
      *(_QWORD *)&v224 = 0;
      if (v183)
      {
        if (*(_DWORD *)v183 == 2)
          WTF::StringImpl::destroy(v183, a2);
        else
          *(_DWORD *)v183 -= 2;
      }
      this = (uint64_t)v178;
      if (v180)
      {
        if (*(_DWORD *)(v180 + 24) != 2)
        {
          *(_DWORD *)(v180 + 24) -= 2;
LABEL_407:
          this = (uint64_t)v178;
          goto LABEL_41;
        }
        this = (uint64_t)v178;
        if ((*(_WORD *)(v180 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v180);
          goto LABEL_407;
        }
      }
    }
LABEL_41:
    if ((*((_BYTE *)v4 + 22) & 8) != 0 && (*(_WORD *)(this + 3292) & 8) != 0)
    {
      v168 = (WebCore::ContainerNode *)this;
      *((_DWORD *)v4 + 6) += 2;
      v221 = 0;
      *(_QWORD *)&v224 = v4;
      v169 = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v221);
      v170 = v4;
      do
      {
        v171 = (_QWORD *)(WebCore::eventNames((WebCore *)v169) + 48);
        v221 = 0;
        v227[0] = 0;
        v172 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v172, v171, 0, 0, 0, (_DWORD **)&v221, v227);
        WebCore::Node::dispatchScopedEvent(v170, v172);
        if (*((_DWORD *)v172 + 4) == 1)
          (*(void (**)(WebCore::Event *))(*(_QWORD *)v172 + 8))(v172);
        else
          --*((_DWORD *)v172 + 4);
        v175 = (WTF::StringImpl *)v227[0];
        v227[0] = 0;
        if (v175)
        {
          if (*(_DWORD *)v175 == 2)
            WTF::StringImpl::destroy(v175, v173);
          else
            *(_DWORD *)v175 -= 2;
        }
        v176 = v221;
        v221 = 0;
        if (v176)
        {
          if (*(_DWORD *)v176 == 2)
            WTF::StringImpl::destroy(v176, v173);
          else
            *(_DWORD *)v176 -= 2;
        }
        v177 = WebCore::NodeTraversal::next((WebCore::NodeTraversal *)v224, v4, v174);
        v169 = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v224, v177);
        v170 = (WebCore::Node *)v224;
      }
      while ((_QWORD)v224);
      this = (uint64_t)v168;
      if (!v168)
      {
LABEL_45:
        if (*((_QWORD *)v4 + 4) == v24)
        {
          v27 = *((_WORD *)v4 + 14);
          if ((v27 & 4) == 0 || (*((_WORD *)v4 + 39) & 0x3FF) == 0)
            goto LABEL_48;
          this = WebCore::disconnectSubframes(v4, 0);
          if (*((_QWORD *)v4 + 4) == v24)
          {
            v27 = *((_WORD *)v4 + 14);
LABEL_48:
            v224 = 0u;
            v225 = 0u;
            if ((v27 & 2) != 0)
              v28 = 3;
            else
              v28 = 6;
            if ((v27 & 8) != 0)
              v28 = 1;
            LOBYTE(v224) = v28;
            if ((v27 & 8) != 0)
              v29 = v4;
            else
              v29 = 0;
            v226 = 0;
            *((_QWORD *)&v224 + 1) = v29;
            v30 = (uint64_t)v4;
            do
              v30 = *(_QWORD *)(v30 + 48) & 0xFFFFFFFFFFFFLL;
            while (v30 && (*(_WORD *)(v30 + 28) & 8) == 0);
            *(_QWORD *)&v225 = v30;
            v31 = v4;
            do
              v31 = (WebCore::Node *)*((_QWORD *)v31 + 7);
            while (v31 && (*((_WORD *)v31 + 14) & 8) == 0);
            *((_QWORD *)&v225 + 1) = v31;
            LOBYTE(v226) = 1;
            if ((v27 & 8) != 0)
              v32 = 2;
            else
              v32 = 1;
            BYTE1(v226) = v32;
            ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
            ++WebCore::ScriptDisallowedScope::s_count;
            v33 = *(_WORD *)(v24 + 28);
            if ((v33 & 8) != 0)
              v34 = (WebCore::Node *)v24;
            else
              v34 = 0;
            v221 = v34;
            v222 = &v224;
            if ((v33 & 8) != 0)
            {
              v194 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v24);
              LOBYTE(v223) = v194;
              if (v194)
              {
                v195 = (_QWORD *)*((_QWORD *)v221 + 5);
                if (*v195)
                  v196 = (*(_WORD *)(*v195 + 28) & 0x80) == 0;
                else
                  v196 = 1;
                if (v196)
                  v202 = v195[1] + 1328;
                else
                  v202 = *v195 + 216;
                v36 = *(unsigned __int8 *)(*(_QWORD *)v202 + 236) != 0;
                v35 = 1;
              }
              else
              {
                v35 = 0;
                v36 = 0;
              }
            }
            else
            {
              v35 = 0;
              v36 = 0;
              LOBYTE(v223) = 0;
            }
            BYTE1(v223) = v36;
            BYTE2(v223) = *(_QWORD *)(v24 + 80) == 0;
            if (v35 && v36)
              WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(&v221, (uint64_t)a2, v23);
            if ((*(_WORD *)(v24 + 28) & 0x80) != 0 || (*(_BYTE *)(v24 + 22) & 0x10) != 0)
            {
              v37 = *(_QWORD **)(v24 + 40);
              v115 = *v37;
              if ((*(_WORD *)(*v37 + 28) & 0x80) == 0)
                v115 = 0;
              v116 = *(_QWORD *)(v115 + 224);
              if (v116)
              {
                ++*(_DWORD *)(v116 + 12);
                *(_BYTE *)(v116 + 9) = 0;
              }
            }
            else
            {
              v37 = *(_QWORD **)(v24 + 40);
            }
            v38 = v37[1];
            *(_DWORD *)(v38 + 24) += 2;
            WebCore::Document::nodeWillBeRemoved((WebCore::Document *)v38, v4);
            if (*(_DWORD *)(v38 + 24) == 2)
            {
              if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v38);
            }
            else
            {
              *(_DWORD *)(v38 + 24) -= 2;
            }
            v41 = *((_QWORD *)v4 + 6) & 0xFFFFFFFFFFFFLL;
            if (v41)
              *(_DWORD *)((*((_QWORD *)v4 + 6) & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
            v42 = *((_QWORD *)v4 + 7);
            if (v42)
              *(_DWORD *)(v42 + 24) += 2;
            v43 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
            *(_DWORD *)(v43 + 24) += 2;
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v128 = *(_QWORD *)(v43 + 528);
              if (v128)
              {
                v129 = *(_QWORD *)(v128 + 8);
                if (v129)
                {
                  v130 = *(_QWORD *)(v129 + 24);
                  if (v130)
                  {
                    v131 = *(_QWORD *)(v130 + 8);
                    if (v131)
                      goto LABEL_296;
                  }
                }
              }
              v157 = *(_QWORD *)(v43 + 2632);
              if (v157)
              {
                v158 = *(_QWORD *)(v157 + 8);
                if (v158)
                {
                  v159 = *(_QWORD *)(v158 + 528);
                  if (v159)
                  {
                    v160 = *(_QWORD *)(v159 + 8);
                    if (v160)
                    {
                      v161 = *(_QWORD *)(v160 + 24);
                      if (v161)
                      {
                        v131 = *(_QWORD *)(v161 + 8);
                        if (v131)
                        {
LABEL_296:
                          v132 = *(_QWORD *)(*(_QWORD *)(v131 + 80) + 8);
                          v133 = *(uint64_t **)(v132 + 152);
                          if (v133)
                          {
                            v227[0] = v4;
                            v207 = v132;
                            WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v133 + 21, (WTF::StringImpl *)v227);
                            WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v133 + 22, (WTF::StringImpl *)v227);
                            WTF::HashMap<WebCore::Node *,WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>>,WTF::HashTableTraits>::removeIf<WebCore::PageDOMDebuggerAgent::didRemoveDOMNode(WebCore::Node&)::$_0 &>(v133 + 23, (WTF::StringImpl *)v227);
                            v132 = v207;
                          }
                          v134 = *(uint64_t **)(v132 + 40);
                          if (v134)
                            WebCore::InspectorDOMAgent::didRemoveDOMNode(v134, v4);
                        }
                      }
                    }
                  }
                }
              }
            }
            if (*(_DWORD *)(v43 + 24) == 2)
            {
              if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v43);
            }
            else
            {
              *(_DWORD *)(v43 + 24) -= 2;
            }
            ++WebCore::ScriptDisallowedScope::s_count;
            v45 = *((_WORD *)v4 + 14);
            if ((*((_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((v45 & 8) == 0)
              {
                if ((v45 & 2) != 0)
                  WebCore::RenderTreeUpdater::tearDownRenderer(v4, v39);
                goto LABEL_88;
              }
            }
            else if ((v45 & 8) == 0
                   || (*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) == 0
                   || (v94 = *(_QWORD *)((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
                   || (*(_QWORD *)(v94 + 16) & 0x1FLL) != 0x12)
            {
LABEL_88:
              if ((*(_BYTE *)(v24 + 23) & 0x10) != 0)
              {
                v135 = (*(_WORD *)(v24 + 28) & 8) != 0 && (*(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL) != 0
                     ? *(_QWORD *)((*(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
                     : 0;
                v136 = *(_QWORD *)(v135 + 224);
                if (v136)
                  (*(void (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v136 + 96))(v136, v4);
              }
              if (v42)
              {
                *(_QWORD *)(v42 + 48) = v41 | ((unint64_t)*(unsigned __int16 *)(v42 + 54) << 48);
                *((_QWORD *)v4 + 7) = 0;
              }
              else
              {
                *(_QWORD *)(v24 + 88) = v41;
              }
              if (v41)
              {
                *(_QWORD *)(v41 + 56) = v42;
                *((_QWORD *)v4 + 6) = (unint64_t)*((unsigned __int16 *)v4 + 27) << 48;
              }
              else
              {
                *(_QWORD *)(v24 + 80) = v42;
              }
              *((_QWORD *)v4 + 4) = 0;
              *((_DWORD *)v4 + 6) &= ~1u;
              v46 = (WebCore::TreeScope *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8) + 96);
              v47 = (WebCore::Node *)*((_QWORD *)v4 + 5);
              if (v47 != v46)
                WebCore::Node::moveTreeToNewScope(v4, v47, v46, v40);
              --WebCore::ScriptDisallowedScope::s_count;
              v48 = (*(_BYTE *)(v24 + 22) & 0x18) == 0;
              if ((*((_BYTE *)v4 + 22) & 8) != 0)
                v49 = WebCore::notifyNodeRemovedFromDocument(v24, v48, (uint64_t)v4);
              else
                v49 = WebCore::notifyNodeRemovedFromTree(v24, v48, (uint64_t)v4);
              v52 = v49;
              if (v42)
              {
                if (*(_DWORD *)(v42 + 24) == 2)
                {
                  if ((*(_WORD *)(v42 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v42);
                }
                else
                {
                  *(_DWORD *)(v42 + 24) -= 2;
                }
              }
              if (v41)
              {
                if (*(_DWORD *)(v41 + 24) == 2)
                {
                  if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v41);
                }
                else
                {
                  *(_DWORD *)(v41 + 24) -= 2;
                }
              }
              if ((_BYTE)v223)
              {
                if (BYTE1(v223))
                  WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(&v221, (uint64_t)v50, v51);
                WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)&v221);
              }
              --WebCore::ScriptDisallowedScope::s_count;
              v53 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
                && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
              {
                WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v221, v50);
                v53 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              }
              WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v53 - 1;
              if (v52)
              {
                v93 = *((_QWORD *)v4 + 1);
                if ((!v93 || (*(_BYTE *)(v93 + 8) & 3) != 0 || !*(_QWORD *)v93)
                  && (*((_WORD *)v4 + 14) & 4) != 0
                  && *((_QWORD *)v4 + 10))
                {
                  WebCore::willCreatePossiblyOrphanedTreeByRemovalSlowCase(v4, (WebCore::Node *)v50);
                }
              }
              this = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 376))(v24, &v224);
              v54 = 1;
LABEL_109:
              if (*((_DWORD *)v4 + 6) == 2)
              {
                if ((*((_WORD *)v4 + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef(v4);
              }
              else
              {
                *((_DWORD *)v4 + 6) -= 2;
              }
              if (v54)
              {
                v55 = *(uint64_t **)(v24 + 40);
                v56 = v55[1];
                v57 = *(_DWORD *)(v56 + 24);
                *(_DWORD *)(v56 + 24) = v57 + 2;
                v58 = *(_QWORD *)(v56 + 1808);
                if (v58)
                {
                  v87 = *v55;
                  if (!v87
                    || (*(_WORD *)(v87 + 28) & 0x80) == 0
                    || (v88 = *(_QWORD *)(v87 + 200)) == 0
                    || (v89 = *(_QWORD *)(v88 + 8)) == 0
                    || (*(_WORD *)(v89 + 28) & 0x20) == 0
                    || *(_QWORD *)(*(_QWORD *)(v89 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
                  {
                    v90 = *(WTF **)(v58 + 56);
                    v91 = *(unsigned int *)(v58 + 68);
                    ++*(_DWORD *)v58;
                    *(_QWORD *)(v58 + 56) = 0;
                    *(_QWORD *)(v58 + 64) = 0;
                    if ((_DWORD)v91)
                    {
                      v206 = 8 * v91;
                      v208 = 8 * v91;
                      v205 = v90;
                      do
                      {
                        v167 = *(_QWORD *)v205;
                        v205 = (WTF *)((char *)v205 + 8);
                        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v167 + 1240))(v167, &WebCore::SVGNames::hrefAttr);
                        v208 -= 8;
                      }
                      while (v208);
                      v209 = (uint64_t *)v90;
                      do
                      {
                        this = *v209;
                        *v209 = 0;
                        if (this)
                        {
                          if (*(_DWORD *)(this + 24) == 2)
                          {
                            if ((*(_WORD *)(this + 30) & 0x400) == 0)
                              this = WebCore::Node::removedLastRef((WebCore::Node *)this);
                          }
                          else
                          {
                            *(_DWORD *)(this + 24) -= 2;
                          }
                        }
                        v86 = v206 == 8;
                        v206 -= 8;
                        ++v209;
                      }
                      while (!v86);
                    }
                    if (v90)
                      this = WTF::fastFree(v90, a2);
                    if (!*(_DWORD *)v58)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1941A4DECLL);
                    }
                    --*(_DWORD *)v58;
                    v57 = *(_DWORD *)(v56 + 24) - 2;
                  }
                }
                if (v57)
                {
                  *(_DWORD *)(v56 + 24) = v57;
                }
                else if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
                {
                  this = WebCore::Node::removedLastRef((WebCore::Node *)v56);
                }
                if ((*(_BYTE *)(v24 + 22) & 0x10) == 0)
                {
                  v59 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
                  if (!*(_BYTE *)(v59 + 3268) && (*(_WORD *)(v59 + 3292) & 1) != 0)
                  {
                    this = WebCore::eventNames((WebCore *)this);
                    v187 = (_QWORD *)(this + 56);
                    if (*(_QWORD *)(v24 + 32)
                      || (v197 = *(_QWORD *)(v24 + 16), (v197 & 0x1000000000000) != 0)
                      && (this = WebCore::EventListenerMap::find((v197 & 0xFFFFFFFFFFFFLL) + 16, v187)) != 0)
                    {
                      *(_QWORD *)&v224 = 0;
                      v221 = 0;
                      v188 = (WebCore::Node *)WebCore::MutationEvent::operator new(112);
                      WebCore::MutationEvent::MutationEvent((uint64_t)v188, v187, 1, 0, 0, (_DWORD **)&v224, (_DWORD **)&v221);
                      WebCore::EventDispatcher::dispatchScopedEvent((WebCore::EventDispatcher *)v24, v188, v189);
                      if (*((_DWORD *)v188 + 4) == 1)
                        (*(void (**)(WebCore::Node *))(*(_QWORD *)v188 + 8))(v188);
                      else
                        --*((_DWORD *)v188 + 4);
                      v190 = v221;
                      v221 = 0;
                      if (v190)
                      {
                        if (*(_DWORD *)v190 == 2)
                          WTF::StringImpl::destroy(v190, a2);
                        else
                          *(_DWORD *)v190 -= 2;
                      }
                      this = v224;
                      *(_QWORD *)&v224 = 0;
                      if (this)
                      {
                        if (*(_DWORD *)this == 2)
                          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                        else
                          *(_DWORD *)this -= 2;
                      }
                    }
                  }
                }
                v60 = 0;
              }
              else
              {
                v60 = 5;
              }
              if (*((_DWORD *)v4 + 6) == 2)
              {
                if ((*((_WORD *)v4 + 15) & 0x400) == 0)
                  this = WebCore::Node::removedLastRef(v4);
              }
              else
              {
                *((_DWORD *)v4 + 6) -= 2;
              }
              v61 = *(_DWORD *)(v24 + 24) - 2;
              if (*(_DWORD *)(v24 + 24) == 2)
              {
                if ((*(_WORD *)(v24 + 30) & 0x400) != 0)
                  goto LABEL_220;
                this = WebCore::Node::removedLastRef((WebCore::Node *)v24);
                v61 = *(_DWORD *)(v24 + 24);
              }
              else
              {
                *(_DWORD *)(v24 + 24) = v61;
              }
              v62 = v61 - 2;
              if (v62)
              {
                *(_DWORD *)(v24 + 24) = v62;
                goto LABEL_125;
              }
LABEL_220:
              v95 = *(_WORD *)(v24 + 30);
              if ((v95 & 0x400) == 0)
              {
                v96 = *(_WORD *)(v24 + 28);
                if ((v96 & 0xF000) == 0x9000)
                {
                  this = WebCore::Document::removedLastRef((WebCore::Document *)v24);
                }
                else
                {
                  if ((v96 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 160) + 16))(*(_QWORD *)(v24 + 160));
                    v95 = *(_WORD *)(v24 + 30);
                  }
                  *(_WORD *)(v24 + 30) = v95 | 0x400;
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
                }
              }
LABEL_125:
              if (!v54)
              {
                LOBYTE(v221) = v60;
                v222 = 0;
                v223 = 1;
                v12 = v210;
                v19 = &dword_1ECE90000;
                v20 = &webThreadDelegateMessageScopeCount;
                goto LABEL_131;
              }
              goto LABEL_126;
            }
            WebCore::RenderTreeUpdater::tearDownRenderers(v4, 0);
            goto LABEL_88;
          }
        }
        v54 = 0;
        goto LABEL_109;
      }
    }
LABEL_43:
    if (*(_DWORD *)(this + 24) == 2)
    {
      if ((*(_WORD *)(this + 30) & 0x400) == 0)
        this = WebCore::Node::removedLastRef((WebCore::Node *)this);
    }
    else
    {
      *(_DWORD *)(this + 24) -= 2;
    }
    goto LABEL_45;
  }
LABEL_139:
  v66 = WebCore::ScriptDisallowedScope::s_count++;
  *((_QWORD *)v4 + 4) = v5;
  v67 = (uint64_t *)((char *)v4 + 32);
  *((_DWORD *)v4 + 6) |= 1u;
  v68 = *((_QWORD *)v5 + 11);
  if (v68)
  {
    v69 = *(_DWORD *)(v68 + 24);
    *(_DWORD *)(v68 + 24) = v69 + 2;
    *((_QWORD *)v4 + 6) = v68 | ((unint64_t)*((unsigned __int16 *)v4 + 27) << 48);
    *(_QWORD *)(v68 + 56) = v4;
    if (v69)
    {
      *(_DWORD *)(v68 + 24) = v69;
    }
    else if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v68);
      v66 = WebCore::ScriptDisallowedScope::s_count - 1;
    }
  }
  else
  {
    *((_QWORD *)v5 + 10) = v4;
  }
  *((_QWORD *)v5 + 11) = v4;
  WebCore::ScriptDisallowedScope::s_count = v66;
  v70 = (WebCore::TreeScope *)*((_QWORD *)v5 + 5);
  v71 = (WebCore::Node *)*((_QWORD *)v4 + 5);
  if (v71 != v70)
    WebCore::Node::moveTreeToNewScope(v4, v71, v70, a4);
  v72 = *((_WORD *)v4 + 39) & 0x3FF;
  if ((*((_WORD *)v4 + 39) & 0x3FF) != 0)
  {
    v198 = v12;
    if ((*((_WORD *)v4 + 14) & 0x80) != 0)
    {
      v203 = *((_QWORD *)v4 + 25);
      if (!v203)
        goto LABEL_145;
      v67 = (uint64_t *)(v203 + 8);
    }
    v199 = *v67;
    if (v199)
    {
      do
      {
        WebCore::Node::incrementConnectedSubframeCount(v199, v72);
        if ((*(_WORD *)(v199 + 28) & 0x80) != 0)
        {
          v201 = *(_QWORD *)(v199 + 200);
          v12 = v198;
          if (!v201)
            break;
          v200 = (uint64_t *)(v201 + 8);
        }
        else
        {
          v200 = (uint64_t *)(v199 + 32);
        }
        v199 = *v200;
        v12 = v198;
      }
      while (*v200);
    }
  }
LABEL_145:
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v5 + 5) + 8) + 3364) & 1) != 0)
  {
    WebCore::ChildListMutationAccumulator::getOrCreate(v5, (uint64_t *)&v224);
    v98 = (WebCore::ChildListMutationAccumulator *)v224;
    if ((_QWORD)v224)
    {
      if (*(_QWORD *)(v224 + 80))
        WebCore::ChildListMutationAccumulator::childAdded((WebCore::ChildListMutationAccumulator *)v224, v4);
      if (*(_DWORD *)v98 == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v98, v97);
        WTF::fastFree(v142, v143);
      }
      else
      {
        --*(_DWORD *)v98;
      }
    }
  }
  v73 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v117 = *(_QWORD *)(v73 + 528);
    if (v117)
    {
      v118 = *(_QWORD *)(v117 + 8);
      if (v118)
      {
        v119 = *(_QWORD *)(v118 + 24);
        if (v119)
        {
          v120 = *(_QWORD *)(v119 + 8);
          if (v120)
            goto LABEL_284;
        }
      }
    }
    v137 = *(_QWORD *)(v73 + 2632);
    if (v137)
    {
      v138 = *(_QWORD *)(v137 + 8);
      if (v138)
      {
        v139 = *(_QWORD *)(v138 + 528);
        if (v139)
        {
          v140 = *(_QWORD *)(v139 + 8);
          if (v140)
          {
            v141 = *(_QWORD *)(v140 + 24);
            if (v141)
            {
              v120 = *(_QWORD *)(v141 + 8);
              if (v120)
              {
LABEL_284:
                v121 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v120 + 80) + 8) + 40);
                if (v121)
                  WebCore::InspectorDOMAgent::didInsertDOMNode(v121, v4);
              }
            }
          }
        }
      }
    }
  }
  v75 = *(_QWORD *)(*((_QWORD *)v4 + 5) + 8);
  *(_DWORD *)(v75 + 24) += 2;
  *((_DWORD *)v4 + 6) += 2;
  v76 = *((_QWORD *)v5 + 2);
  v77 = (v76 & 0x18000000000000) == 0;
  if ((v76 & 0x8000000000000) != 0)
    WebCore::notifyNodeInsertedIntoDocument((uint64_t)v5, (uint64_t)v4, v77, (uint64_t)&v215);
  else
    WebCore::notifyNodeInsertedIntoTree((uint64_t)v5, (uint64_t)v4, v77);
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  if (*(_DWORD *)(v75 + 24) == 2)
  {
    if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v75);
  }
  else
  {
    *(_DWORD *)(v75 + 24) -= 2;
  }
  if (v212)
  {
    if (v213)
      WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v211, (uint64_t)v78, v79);
    WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v211);
  }
  --WebCore::ScriptDisallowedScope::s_count;
  v80 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
    && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v224, v78);
    v80 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  }
  WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v80 - 1;
  result = (*(uint64_t (**)(WebCore::ContainerNode *, __int128 *))(*(_QWORD *)v5 + 376))(v5, &v218);
  v83 = v215;
  if (HIDWORD(v216))
  {
    v84 = 8 * HIDWORD(v216);
    do
    {
      v85 = *(_QWORD *)v83;
      v83 = (WTF *)((char *)v83 + 8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 280))(v85);
      v84 -= 8;
    }
    while (v84);
    v83 = v215;
    if (HIDWORD(v216))
    {
      v92 = 8 * HIDWORD(v216);
      do
      {
        result = *(_QWORD *)v83;
        *(_QWORD *)v83 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)result);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        v83 = (WTF *)((char *)v83 + 8);
        v92 -= 8;
      }
      while (v92);
      v83 = v215;
    }
  }
  v86 = v12 == v83 || v83 == 0;
  if (!v86)
  {
    v215 = 0;
    LODWORD(v216) = 0;
    return WTF::fastFree(v83, v82);
  }
  return result;
}

unsigned int *WebCore::HTMLElement::childrenChanged(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int *result;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;

  result = (unsigned int *)WebCore::ContainerNode::childrenChanged(a1, a2);
  if ((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v6 = *(_QWORD *)((*(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v6)
    goto LABEL_2;
  v7 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v7 + 2;
  v8 = *a2;
  if ((v8 - 2) < 3)
  {
    result = *(unsigned int **)(v6 + 224);
    if (!result)
      goto LABEL_10;
    v9 = 14;
    goto LABEL_22;
  }
  if (v8 == 8 || v8 == 5)
  {
    result = *(unsigned int **)(v6 + 224);
    if (result)
    {
      v9 = 13;
LABEL_22:
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v9))();
      v7 = *(_DWORD *)(v6 + 24) - 2;
    }
  }
LABEL_10:
  if (v7)
  {
    *(_DWORD *)(v6 + 24) = v7;
  }
  else
  {
    v10 = *(_WORD *)(v6 + 30);
    if ((v10 & 0x400) == 0)
    {
      v11 = *(_WORD *)(v6 + 28);
      if ((v11 & 0xF000) == 0x9000)
      {
        result = WebCore::Document::removedLastRef((WebCore::Document *)v6, v5);
      }
      else
      {
        if ((v11 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
          v10 = *(_WORD *)(v6 + 30);
        }
        *(_WORD *)(v6 + 30) = v10 | 0x400;
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
LABEL_2:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3446))
    return WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged((unsigned int *)a1, *((_QWORD *)a2 + 2), *a2);
  return result;
}

uint64_t WebCore::Node::insertedIntoAncestor(unsigned int *Ref, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = Ref;
  v4 = *((_QWORD *)Ref + 2);
  if ((a2 & 1) != 0)
  {
    v4 |= 0x8000000000000uLL;
    *((_QWORD *)Ref + 2) = v4;
  }
  if ((*(_BYTE *)(a3 + 22) & 0x10) != 0)
  {
    v14 = v4 | 0x10000000000000;
    *((_QWORD *)Ref + 2) = v14;
    if ((v14 & 0x8000000000000) == 0)
      return 0;
  }
  else if ((v4 & 0x8000000000000) == 0)
  {
    return 0;
  }
  v5 = *(_QWORD *)(*((_QWORD *)Ref + 5) + 8);
  if (*(_QWORD *)(v5 + 1944) && !*(_BYTE *)(v5 + 3405) && !*(_BYTE *)(v5 + 3392))
  {
    v6 = *((_WORD *)Ref + 15);
    v7 = *((_QWORD *)Ref + 8);
    if ((v7 & 0x4000000000000) == 0)
      *((_QWORD *)Ref + 8) = v7 & 0xFFF8FFFFFFFFFFFFLL | 0x4000000000000;
    *((_WORD *)Ref + 15) = v6 | 0x30;
    Ref[6] += 2;
    v8 = *((unsigned __int16 *)Ref + 14);
    if ((v8 & 0x80) != 0)
    {
      v16 = *((_QWORD *)Ref + 25);
      if (!v16)
        goto LABEL_44;
    }
    else if ((~v8 & 0x408) == 0
           && (Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)Ref + 368))(Ref),
               (_DWORD)Ref))
    {
      v16 = *((_QWORD *)v3 + 14);
      if (!v16)
        goto LABEL_44;
    }
    else
    {
      a2 = (unsigned int *)*((_QWORD *)v3 + 4);
      if (!a2)
        goto LABEL_44;
      v9 = *((_WORD *)a2 + 14);
      if ((v9 & 0x80) == 0)
      {
        if ((v9 & 8) == 0)
          goto LABEL_44;
        if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_17;
        v13 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (!v13)
          goto LABEL_17;
        Ref = *(unsigned int **)(v13 + 224);
        if (!Ref)
          goto LABEL_44;
        Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)Ref + 16))(Ref, v3);
        a2 = Ref;
LABEL_38:
        if (!a2)
        {
LABEL_44:
          if (v3[6] == 2)
          {
            v26 = *((_WORD *)v3 + 15);
            if ((v26 & 0x400) == 0)
            {
              v27 = *((_WORD *)v3 + 14);
              if ((v27 & 0xF000) == 0x9000)
              {
                Ref = WebCore::Document::removedLastRef((WebCore::Document *)v3, a2);
              }
              else
              {
                if ((v27 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)v3 + 20) + 16))(*((_QWORD *)v3 + 20));
                  v26 = *((_WORD *)v3 + 15);
                }
                *((_WORD *)v3 + 15) = v26 | 0x400;
                Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 72))(v3);
              }
            }
          }
          else
          {
            v3[6] -= 2;
          }
LABEL_46:
          v18 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
          v19 = *(_QWORD *)(v18 + 1272);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 64);
            if ((v20 & 0x8000000000000) != 0 || (v20 & 0x7000000000000) != 0 || (*(_WORD *)(v19 + 30) & 0x20) != 0)
            {
              *(_DWORD *)(v18 + 24) += 2;
              *(_QWORD *)(v18 + 64) |= 0x8000000000000uLL;
              if (((*(_QWORD *)(v18 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                 || *(double *)((*(_QWORD *)(v18 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
                && !*(_BYTE *)(v18 + 3362))
              {
                *(_QWORD *)(v18 + 1528) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
                WebCore::TimerBase::setNextFireTime(v18 + 1504, v21 + 0.0);
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  v28 = *(_QWORD *)(v18 + 528);
                  if (v28)
                  {
                    v29 = *(_QWORD *)(v28 + 8);
                    if (v29)
                    {
                      v30 = *(_QWORD *)(v29 + 24);
                      if (v30)
                      {
                        v31 = *(_QWORD *)(v30 + 8);
                        if (v31)
                          goto LABEL_71;
                      }
                    }
                  }
                  v33 = *(_QWORD *)(v18 + 2632);
                  if (v33)
                  {
                    v34 = *(_QWORD *)(v33 + 8);
                    if (v34)
                    {
                      v35 = *(_QWORD *)(v34 + 528);
                      if (v35)
                      {
                        v36 = *(_QWORD *)(v35 + 8);
                        if (v36)
                        {
                          v37 = *(_QWORD *)(v36 + 24);
                          if (v37)
                          {
                            v31 = *(_QWORD *)(v37 + 8);
                            if (v31)
                            {
LABEL_71:
                              v32 = *(WTF::StringImpl **)(*(_QWORD *)(v31 + 80) + 8);
                              if (v32)
                                WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v32, (WebCore::Document *)v18);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (*(_DWORD *)(v18 + 24) == 2)
              {
                v24 = *(_WORD *)(v18 + 30);
                if ((v24 & 0x400) == 0)
                {
                  v25 = *(_WORD *)(v18 + 28);
                  if ((v25 & 0xF000) == 0x9000)
                  {
                    WebCore::Document::removedLastRef((WebCore::Document *)v18, a2);
                  }
                  else
                  {
                    if ((v25 & 0x20) != 0)
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 160) + 16))(*(_QWORD *)(v18 + 160));
                      v24 = *(_WORD *)(v18 + 30);
                    }
                    *(_WORD *)(v18 + 30) = v24 | 0x400;
                    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 72))(v18);
                  }
                }
              }
              else
              {
                *(_DWORD *)(v18 + 24) -= 2;
              }
            }
          }
          return 0;
        }
LABEL_17:
        *((_QWORD *)a2 + 8) |= 0x10000000000000uLL;
        do
        {
          if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v12 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
            if (v12)
              *(_QWORD *)(v12 + 64) |= 0x8000000000000uLL;
          }
          v10 = *((_QWORD *)a2 + 8);
          if ((v10 & 0x8000000000000) != 0)
            break;
          *((_QWORD *)a2 + 8) = v10 | 0x8000000000000;
          Ref = (unsigned int *)*((_QWORD *)a2 + 4);
          if (!Ref)
            break;
          v11 = *((_WORD *)Ref + 14);
          if ((v11 & 0x80) != 0)
          {
            v17 = *((_QWORD *)Ref + 25);
            if (!v17)
              break;
            Ref = *(unsigned int **)(v17 + 8);
          }
          else
          {
            if ((v11 & 8) == 0)
              break;
            if ((*((_QWORD *)Ref + 9) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v15 = *(_QWORD *)((*((_QWORD *)Ref + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
              if (v15)
              {
                Ref = *(unsigned int **)(v15 + 224);
                if (!Ref)
                  break;
                Ref = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)Ref + 16))(Ref);
              }
            }
          }
          a2 = Ref;
        }
        while (Ref);
        if (!v3)
          goto LABEL_46;
        goto LABEL_44;
      }
      v16 = *((_QWORD *)a2 + 25);
      if (!v16)
        goto LABEL_44;
    }
    a2 = *(unsigned int **)(v16 + 8);
    goto LABEL_38;
  }
  return 0;
}

uint64_t WebCore::notifyNodeInsertedIntoTree(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v12;

  *(_DWORD *)(a2 + 24) += 2;
  v5 = (unint64_t)(a3 == 0) << 8;
  v6 = a2;
  do
  {
    v7 = v6;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v6 + 272))(v6, v5, a1);
    if ((*(_WORD *)(v6 + 28) & 8) == 0)
      goto LABEL_4;
    if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_4;
    v12 = *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (!v12)
      goto LABEL_4;
    *(_DWORD *)(v12 + 24) += 2;
    result = WebCore::notifyNodeInsertedIntoTree(a1, v12, 1);
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v12);
LABEL_4:
      if ((*(_WORD *)(v7 + 28) & 4) != 0)
        goto LABEL_5;
      goto LABEL_6;
    }
    *(_DWORD *)(v12 + 24) -= 2;
    if ((*(_WORD *)(v7 + 28) & 4) != 0)
    {
LABEL_5:
      v6 = *(_QWORD *)(v7 + 80);
      if (v6)
        goto LABEL_10;
    }
LABEL_6:
    if (v7 == a2)
      goto LABEL_7;
    v6 = *(_QWORD *)(v7 + 56);
    if (!v6)
    {
      v10 = v7;
      while (1)
      {
        v10 = *(_QWORD *)(v10 + 32);
        if (!v10 || v10 == a2)
          break;
        v6 = *(_QWORD *)(v10 + 56);
        if (v6)
          goto LABEL_10;
      }
LABEL_7:
      v6 = 0;
      v9 = *(_DWORD *)(v7 + 24) - 2;
      if (*(_DWORD *)(v7 + 24) != 2)
        goto LABEL_11;
      goto LABEL_25;
    }
LABEL_10:
    *(_DWORD *)(v6 + 24) += 2;
    v9 = *(_DWORD *)(v7 + 24) - 2;
    if (*(_DWORD *)(v7 + 24) != 2)
    {
LABEL_11:
      *(_DWORD *)(v7 + 24) = v9;
      continue;
    }
LABEL_25:
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  while (v6);
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  WTF *v13;
  void *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v11 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](result + 20);
LABEL_17:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v13, v14);
  }
  v15 = __ldxr(v11);
  if (v15 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v21 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v21);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            v20 = v7;
            atomic_store(1u, (unsigned int *)v8);
            v16 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v16)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v16));
            v17 = *(WTF **)(v8 + 16);
            if (v17)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v17, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
            v7 = v20;
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::AllDescendantsCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  WTF *v13;
  void *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v11 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](result + 20);
LABEL_19:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v13, v14);
  }
  v15 = __ldxr(v11);
  if (v15 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v16 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v16)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v16));
            v17 = *(WTF **)(v8 + 16);
            if (v17)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v17, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  WTF *v13;
  void *v14;
  int v15;
  uint64_t v16;
  WTF *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v11 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](result + 20);
LABEL_17:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v13, v14);
  }
  v15 = __ldxr(v11);
  if (v15 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v21 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v21);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            v20 = v7;
            atomic_store(1u, (unsigned int *)v8);
            v16 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v16)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v16));
            v17 = *(WTF **)(v8 + 16);
            if (v17)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v17, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
            v7 = v20;
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLStyleElement::childrenChanged(_BYTE *a1, unsigned __int8 *a2)
{
  WTF::StringBuilder *v3;
  WTF::StringImpl *result;

  WebCore::HTMLElement::childrenChanged((uint64_t)a1, a2);
  result = (WTF::StringImpl *)(a1 + 112);
  if (!a1[112] && (a1[22] & 8) != 0)
    return WebCore::InlineStyleSheetOwner::createSheetFromTextContents(result, (WebCore::Element *)a1, v3);
  return result;
}

WTF::MonotonicTime *WebCore::HTMLLinkElement::finishParsingChildren(WTF::MonotonicTime *this)
{
  *((_BYTE *)this + 291) &= ~2u;
  return WebCore::Element::finishParsingChildren(this);
}

uint64_t WebCore::CachedHTMLCollection<WebCore::GenericCachedHTMLCollection<(WebCore::CollectionTraversalType)0>,(WebCore::CollectionTraversalType)0>::invalidateCacheForDocument(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v12;
  unsigned __int8 *v13;
  WTF *v15;
  void *v16;
  int v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = result;
  if (!*(_QWORD *)(result + 32))
    goto LABEL_2;
  --*((_DWORD *)a2 + 444);
  v13 = (unsigned __int8 *)(result + 20);
  if (__ldaxr((unsigned __int8 *)(result + 20)))
  {
    __clrex();
LABEL_23:
    MEMORY[0x19AEA534C](result + 20);
    goto LABEL_24;
  }
  if (__stxr(1u, v13))
    goto LABEL_23;
LABEL_24:
  result = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = 0;
  if (result)
  {
    WebCore::CollectionNamedElementCache::~CollectionNamedElementCache((WebCore::CollectionNamedElementCache *)result, (WTF::StringImpl *)a2);
    result = WTF::fastFree(v15, v16);
  }
  v17 = __ldxr(v13);
  if (v17 == 1)
  {
    if (!__stlxr(0, v13))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 20));
LABEL_2:
  if (*(_QWORD *)(v3 + 48) || (*(_BYTE *)(v3 + 80) & 3) != 0)
  {
    v4 = (_DWORD *)a2 + (((unint64_t)*(unsigned __int16 *)(v3 + 21) >> 5) & 0xF);
    --v4[442];
    if ((*(_WORD *)(v3 + 21) & 0x200) != 0)
    {
      v18 = a2 + 220;
      v20 = v3;
      v19 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>(v18, &v20);
      result = WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v18, v19);
    }
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 80) &= 0xFCu;
    v5 = *(unsigned int *)(v3 + 76);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v3 + 64);
      v7 = &v6[v5];
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr((unsigned int *)v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, (unsigned int *)v8));
          if (!v10)
          {
            atomic_store(1u, (unsigned int *)v8);
            v11 = *(unsigned int *)(v8 + 28);
            if ((_DWORD)v11)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v11));
            v12 = *(WTF **)(v8 + 16);
            if (v12)
            {
              *(_QWORD *)(v8 + 16) = 0;
              *(_DWORD *)(v8 + 24) = 0;
              WTF::fastFree(v12, a2);
            }
            result = WTF::fastFree((WTF *)v8, a2);
          }
        }
        ++v6;
      }
      while (v6 != v7);
    }
    *(_DWORD *)(v3 + 76) = 0;
  }
  return result;
}

void WebCore::ResourceRequestBase::setDefaultTimeoutInterval(WebCore::ResourceRequestBase *this, double a2)
{
  WebCore::ResourceRequestBase::s_defaultTimeoutInterval = *(_QWORD *)&a2;
}

uint64_t WebCore::JSCSSStyleDeclaration::destroy(WebCore::JSCSSStyleDeclaration *this, JSCell *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void WebCore::LocalFrameView::setVisualUpdatesAllowedByClient(WebCore::LocalFrameView *this, int a2)
{
  if (*((unsigned __int8 *)this + 1382) != a2)
  {
    *((_BYTE *)this + 1382) = a2;
    WebCore::Document::setVisualUpdatesAllowedByClient(*(WebCore::Document **)(*((_QWORD *)this + 41) + 296), a2);
  }
}

uint64_t WebCore::TileController::setWantsDeepColorBackingStore(uint64_t this, void *a2)
{
  if (*(unsigned __int8 *)(this + 308) != (_DWORD)a2)
  {
    *(_BYTE *)(this + 308) = (_BYTE)a2;
    return WebCore::TileGrid::updateTileLayerProperties(*(_QWORD *)(this + 48), a2);
  }
  return this;
}

uint64_t WebCore::CSSTokenizer::dollarSign@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;

  result = WebCore::CSSTokenizer::consumeIfNext(a1, 61);
  v4 = *(unsigned __int8 *)(a2 + 3) << 24;
  if ((_DWORD)result)
  {
    v5 = v4 | 0xD;
  }
  else
  {
    v5 = v4 | 6;
    *(_WORD *)(a2 + 16) = 36;
  }
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t WebCore::CSSTokenizer::asterisk@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  int v5;

  result = WebCore::CSSTokenizer::consumeIfNext(a1, 61);
  v4 = *(unsigned __int8 *)(a2 + 3) << 24;
  if ((_DWORD)result)
  {
    v5 = v4 | 0xE;
  }
  else
  {
    v5 = v4 | 6;
    *(_WORD *)(a2 + 16) = 42;
  }
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t WebCore::CSSTokenizer::solidus@<X0>(WebCore::CSSTokenizer *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = WebCore::CSSTokenizer::consumeIfNext(a1, 42);
  if (!(_DWORD)result)
  {
    *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 6u;
    *(_QWORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 16) = a2;
    return result;
  }
  result = WebCore::CSSTokenizer::consume(a1);
  while (1)
  {
    while ((unsigned __int16)result == 42)
    {
      result = WebCore::CSSTokenizer::consume(a1);
      if ((_DWORD)result == 47)
      {
LABEL_13:
        *(_QWORD *)a3 = (*(unsigned __int8 *)(a3 + 3) << 24) | 0x1Fu;
        *(_QWORD *)(a3 + 8) = 0;
        return result;
      }
    }
    if (!(_WORD)result)
      goto LABEL_13;
    v7 = *((_QWORD *)a1 + 106);
    if (v7 >= *((_QWORD *)a1 + 107))
    {
      result = 0;
      goto LABEL_9;
    }
    v8 = *((_QWORD *)a1 + 108);
    if (*(_DWORD *)(v8 + 4) <= v7)
      break;
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *((_QWORD *)a1 + 106);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
      result = *(unsigned __int8 *)(v9 + v10);
    else
      result = *(unsigned __int16 *)(v9 + 2 * v10);
LABEL_9:
    *((_QWORD *)a1 + 106) = v7 + 1;
  }
  result = 1161;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSTokenizer::consumeIfNext(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v2 = a1[106];
  if (v2 >= a1[107])
  {
    v6 = 0;
  }
  else
  {
    v3 = a1[108];
    if (*(_DWORD *)(v3 + 4) <= v2)
    {
      result = 1161;
      __break(0xC471u);
      return result;
    }
    v4 = *(_QWORD *)(v3 + 8);
    v5 = a1[106];
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      v6 = *(unsigned __int8 *)(v4 + v5);
    else
      v6 = *(unsigned __int16 *)(v4 + 2 * v5);
  }
  if (v6 == a2)
    a1[106] = v2 + 1;
  return v6 == a2;
}

uint64_t WebCore::DisplayList::Recorder::fillPath(WebCore::DisplayList::Recorder *this, const WebCore::Path *a2)
{
  WebCore::DisplayList::Recorder *v2;
  const WebCore::Path *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t (*v51)(WebCore::DisplayList::Recorder *, const WebCore::Path *);
  const WebCore::Path *v52;
  uint64_t v53;
  WebCore::DisplayList::Recorder *v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  void *v83;
  _BOOL4 v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  void *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  _BOOL4 v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  _OWORD v111[2];
  char v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  __int128 v122;
  char v123;
  _OWORD v124[3];
  uint64_t v125;
  unsigned __int8 v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 183);
  if (!(_DWORD)v6)
  {
    __break(0xC471u);
    goto LABEL_190;
  }
  v3 = a2;
  v2 = this;
  v7 = *((_QWORD *)this + 90);
  v4 = v7 + 760 * v6 - 760;
  v8 = (unsigned int *)(v7 + 760 * v6 - 584);
  v6 = *v8;
  if (!(_DWORD)v6)
    goto LABEL_65;
  if ((v6 & 0xFFFFFFF2) == 0 && ((v6 & 4) == 0 || !*(_DWORD *)(v4 + 168) && (*(_BYTE *)(v4 + 94) & 8) == 0))
  {
    if ((v6 & 1) == 0)
      goto LABEL_8;
    if (!*(_DWORD *)(v4 + 80) && (*(_BYTE *)(v4 + 6) & 8) == 0)
    {
      v6 = *((_QWORD *)this + 1);
      if ((v6 & 0x8000000000000) != 0)
        goto LABEL_190;
      (*(void (**)(WebCore::DisplayList::Recorder *, _QWORD))(*(_QWORD *)this + 784))(this, *((_QWORD *)this + 1));
      v6 = *v8;
LABEL_8:
      if ((v6 & 0xC) == 0)
        goto LABEL_15;
      if ((v6 & 4) != 0)
      {
        v9 = *((_QWORD *)v2 + 12);
        if ((v6 & 8) == 0)
        {
          if ((v9 & 0x8000000000000) != 0)
            goto LABEL_190;
          v10 = 0;
          v14 = 0;
          v11 = 0x100000000;
          v12 = *((_QWORD *)v2 + 12);
          v13 = v9 & 0xFFFFFF00;
          goto LABEL_14;
        }
        if ((v9 & 0x8000000000000) != 0)
          goto LABEL_190;
        v10 = *((_DWORD *)v2 + 47);
        v11 = 0x100000000;
        v12 = *((_QWORD *)v2 + 12);
        v13 = v9 & 0xFFFFFF00;
      }
      else
      {
        v12 = 0;
        v11 = 0;
        v13 = 0;
        v10 = *((_DWORD *)v2 + 47);
      }
      v14 = 0x100000000;
LABEL_14:
      *(_QWORD *)&v124[0] = v12 | (unint64_t)v11 | v13 & 0xFFFFFF00;
      *((_QWORD *)&v124[0] + 1) = v14 | v10;
      (*(void (**)(WebCore::DisplayList::Recorder *, _OWORD *))(*(_QWORD *)v2 + 792))(v2, v124);
      goto LABEL_15;
    }
  }
  if ((v6 & 1) != 0)
  {
    v67 = *((_DWORD *)this + 22);
    if (v67 == 1)
    {
      if (!*((_DWORD *)this + 8))
      {
        v71 = *((_QWORD *)this + 3);
        if (v71)
        {
          if (*(_BYTE *)(v71 + 40))
            (*(void (**)(WebCore::DisplayList::Recorder *, uint64_t))(*(_QWORD *)this + 1360))(this, v71);
        }
      }
    }
    else if (v67 == 2)
    {
      v68 = *((_QWORD *)this + 3);
      if (v68)
        (*(void (**)(WebCore::DisplayList::Recorder *, uint64_t))(*(_QWORD *)this + 1336))(this, v68 + 8);
    }
  }
  if ((*(_BYTE *)v8 & 4) != 0)
  {
    v72 = *((_DWORD *)v2 + 44);
    if (v72 == 1)
    {
      if (!*((_DWORD *)v2 + 30))
      {
        v74 = *((_QWORD *)v2 + 14);
        if (v74)
        {
          if (*(_BYTE *)(v74 + 40))
            (*(void (**)(WebCore::DisplayList::Recorder *, uint64_t))(*(_QWORD *)v2 + 1360))(v2, v74);
        }
      }
    }
    else if (v72 == 2)
    {
      v73 = *((_QWORD *)v2 + 14);
      if (v73)
        (*(void (**)(WebCore::DisplayList::Recorder *, uint64_t))(*(_QWORD *)v2 + 1336))(v2, v73 + 8);
    }
  }
  (*(void (**)(WebCore::DisplayList::Recorder *, uint64_t))(*(_QWORD *)v2 + 800))(v2, v4);
LABEL_15:
  *v8 = 0;
  v15 = *((_DWORD *)v2 + 183);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1941A6F78);
  }
  v16 = *((_QWORD *)v2 + 90) + 760 * v15;
  v5 = v16 - 352;
  v17 = (void *)(v16 - 336);
  if (!*(_BYTE *)(v16 - 8))
  {
    v33 = *(_QWORD *)v4;
    *(_QWORD *)v5 = *(_QWORD *)v4;
    if ((v33 & 0x8000000000000) != 0)
    {
      v75 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 + 1, v75));
    }
    *(_BYTE *)(v5 + 16) = 0;
    *(_DWORD *)(v5 + 80) = -1;
    v34 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v34 != -1)
    {
      ((void (*)(_OWORD *, void *, uint64_t))off_1E3413D38[v34])(v124, v17, v4 + 16);
      *(_DWORD *)(v5 + 80) = v34;
    }
    v35 = *(_QWORD *)(v4 + 88);
    *(_QWORD *)(v5 + 88) = v35;
    if ((v35 & 0x8000000000000) != 0)
    {
      v77 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 + 1, v77));
    }
    *(_BYTE *)(v5 + 104) = 0;
    *(_DWORD *)(v5 + 168) = -1;
    v36 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v36 != -1)
    {
      ((void (*)(_OWORD *))off_1E3413D38[v36])(v124);
      *(_DWORD *)(v5 + 168) = v36;
    }
    v37 = *(_QWORD *)v8;
    v38 = v8[2];
    *(_BYTE *)(v5 + 192) = 0;
    *(_DWORD *)(v5 + 184) = v38;
    *(_QWORD *)(v5 + 176) = v37;
    *(_BYTE *)(v5 + 224) = 0;
    if (*(_BYTE *)(v4 + 224))
    {
      v39 = *(_QWORD *)(v4 + 192);
      *(_DWORD *)(v5 + 200) = *(_DWORD *)(v4 + 200);
      *(_QWORD *)(v5 + 192) = v39;
      v40 = *(_QWORD *)(v4 + 208);
      *(_QWORD *)(v5 + 208) = v40;
      if ((v40 & 0x8000000000000) != 0)
      {
        v79 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 + 1, v79));
      }
      *(_QWORD *)(v5 + 216) = *(_QWORD *)(v4 + 216);
      *(_BYTE *)(v5 + 224) = 1;
    }
    *(_BYTE *)(v5 + 232) = 0;
    a2 = (const WebCore::Path *)(v5 + 232);
    *(_BYTE *)(v5 + 320) = 0;
    if (*(_BYTE *)(v4 + 320))
    {
      *(_DWORD *)(v5 + 312) = -1;
      v41 = *(unsigned int *)(v4 + 312);
      if ((_DWORD)v41 != -1)
      {
        ((void (*)(_OWORD *))off_1E3413D50[v41])(v124);
        *(_DWORD *)(v5 + 312) = v41;
      }
      *(_BYTE *)(v5 + 320) = 1;
    }
    v42 = *(_QWORD *)(v4 + 328);
    *(_QWORD *)(v5 + 333) = *(_QWORD *)(v4 + 333);
    *(_QWORD *)(v5 + 328) = v42;
    *(_BYTE *)(v5 + 344) = 1;
    goto LABEL_65;
  }
  v18 = *(_QWORD *)v5;
  v19 = *(_QWORD *)v4;
  if ((*(_QWORD *)v5 & 0x8000000000000) != 0)
  {
    if ((v19 & 0x8000000000000) != 0)
    {
      v83 = v17;
      v124[0] = *(_OWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 4);
      v111[0] = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
      v84 = WebCore::operator==<float,4ul>((float *)v124, (float *)v111);
      v18 = *(_QWORD *)v5;
      if (v84 && HIBYTE(v18) == HIBYTE(*(_QWORD *)v4))
      {
        v17 = v83;
        if (BYTE6(v18) == BYTE6(*(_QWORD *)v4))
          goto LABEL_23;
      }
      else
      {
        v17 = v83;
      }
    }
  }
  else if (v18 == v19 && (v19 & 0x8000000000000) == 0)
  {
    goto LABEL_23;
  }
  if ((v18 & 0x8000000000000) != 0)
  {
    v99 = v17;
    v100 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v101 = __ldaxr(v100);
      v102 = v101 - 1;
    }
    while (__stlxr(v102, v100));
    if (!v102)
    {
      atomic_store(1u, v100);
      WTF::fastFree((WTF *)v100, v17);
      v17 = v99;
    }
  }
  v96 = *(_QWORD *)v4;
  *(_QWORD *)v5 = *(_QWORD *)v4;
  if ((v96 & 0x8000000000000) != 0)
  {
    v97 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFLL);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 + 1, v97));
  }
LABEL_23:
  v21 = *(unsigned int *)(v5 + 80);
  v22 = *(unsigned int *)(v4 + 80);
  if ((_DWORD)v21 == -1)
  {
    if ((_DWORD)v22 != -1)
      goto LABEL_25;
  }
  else
  {
    if ((_DWORD)v22 != -1)
    {
LABEL_25:
      *(_QWORD *)&v124[0] = v17;
      ((void (*)(_OWORD *))off_1E3413D80[v22])(v124);
      goto LABEL_26;
    }
    ((void (*)(_OWORD *, void *))off_1E3413D08[v21])(v124, v17);
    *(_DWORD *)(v5 + 80) = -1;
  }
LABEL_26:
  v23 = *(_QWORD *)(v5 + 88);
  v24 = *(_QWORD *)(v4 + 88);
  if ((v23 & 0x8000000000000) != 0)
  {
    if ((v24 & 0x8000000000000) != 0)
    {
      v124[0] = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
      v111[0] = *(_OWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
      v85 = WebCore::operator==<float,4ul>((float *)v124, (float *)v111);
      v23 = *(_QWORD *)(v5 + 88);
      if (v85)
      {
        v86 = *(_QWORD *)(v4 + 88);
        if (HIBYTE(v23) == HIBYTE(v86) && BYTE6(v23) == BYTE6(v86))
          goto LABEL_29;
      }
    }
  }
  else if (v23 == v24 && (v24 & 0x8000000000000) == 0)
  {
    goto LABEL_29;
  }
  if ((v23 & 0x8000000000000) != 0)
  {
    v90 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
    {
      atomic_store(1u, v90);
      WTF::fastFree((WTF *)v90, v17);
    }
  }
  v87 = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(v5 + 88) = v87;
  if ((v87 & 0x8000000000000) != 0)
  {
    v88 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 + 1, v88));
  }
LABEL_29:
  a2 = (const WebCore::Path *)(v5 + 104);
  v25 = *(unsigned int *)(v5 + 168);
  v26 = *(unsigned int *)(v4 + 168);
  if ((_DWORD)v25 == -1)
  {
    if ((_DWORD)v26 == -1)
      goto LABEL_32;
  }
  else if ((_DWORD)v26 == -1)
  {
    ((void (*)(_OWORD *, const WebCore::Path *))off_1E3413D08[v25])(v124, a2);
    *(_DWORD *)(v5 + 168) = -1;
    goto LABEL_32;
  }
  *(_QWORD *)&v124[0] = v5 + 104;
  ((void (*)(_OWORD *))off_1E3413D80[v26])(v124);
LABEL_32:
  v27 = *(_QWORD *)v8;
  *(_DWORD *)(v5 + 184) = v8[2];
  *(_QWORD *)(v5 + 176) = v27;
  v28 = (_QWORD *)(v5 + 192);
  v29 = (uint64_t *)(v4 + 192);
  if (*(unsigned __int8 *)(v5 + 224) == *(unsigned __int8 *)(v4 + 224))
  {
    if (!*(_BYTE *)(v5 + 224))
      goto LABEL_55;
    v30 = *v29;
    *(_DWORD *)(v5 + 200) = *(_DWORD *)(v4 + 200);
    *v28 = v30;
    v31 = *(_QWORD *)(v5 + 208);
    v32 = *(_QWORD *)(v4 + 208);
    if ((v31 & 0x8000000000000) != 0)
    {
      if ((v32 & 0x8000000000000) != 0)
      {
        v124[0] = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4);
        v111[0] = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4);
        v103 = WebCore::operator==<float,4ul>((float *)v124, (float *)v111);
        v31 = *(_QWORD *)(v5 + 208);
        if (v103)
        {
          v104 = *(_QWORD *)(v4 + 208);
          if (HIBYTE(v31) == HIBYTE(v104) && BYTE6(v31) == BYTE6(v104))
            goto LABEL_37;
        }
      }
    }
    else if (v31 == v32 && (v32 & 0x8000000000000) == 0)
    {
LABEL_37:
      *(_QWORD *)(v5 + 216) = *(_QWORD *)(v4 + 216);
      goto LABEL_55;
    }
    if ((v31 & 0x8000000000000) != 0)
    {
      v108 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        atomic_store(1u, v108);
        WTF::fastFree((WTF *)v108, a2);
      }
    }
    v105 = *(_QWORD *)(v4 + 208);
    *(_QWORD *)(v5 + 208) = v105;
    if ((v105 & 0x8000000000000) != 0)
    {
      v106 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFLL);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 + 1, v106));
    }
    goto LABEL_37;
  }
  if (*(_BYTE *)(v5 + 224))
  {
    v6 = *(_QWORD *)(v5 + 208);
    if ((v6 & 0x8000000000000) != 0)
      goto LABEL_191;
    goto LABEL_54;
  }
  v63 = *v29;
  *(_DWORD *)(v5 + 200) = *(_DWORD *)(v4 + 200);
  *v28 = v63;
  v64 = *(_QWORD *)(v4 + 208);
  *(_QWORD *)(v5 + 208) = v64;
  if ((v64 & 0x8000000000000) != 0)
  {
    v81 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 + 1, v81));
  }
  *(_QWORD *)(v5 + 216) = *(_QWORD *)(v4 + 216);
  for (*(_BYTE *)(v5 + 224) = 1; ; *(_BYTE *)(v5 + 224) = 0)
  {
LABEL_55:
    a2 = (const WebCore::Path *)(v5 + 232);
    v43 = v4 + 232;
    if (*(unsigned __int8 *)(v5 + 320) != *(unsigned __int8 *)(v4 + 320))
    {
      if (*(_BYTE *)(v5 + 320))
      {
        v46 = *(unsigned int *)(v5 + 312);
        if ((_DWORD)v46 != -1)
          ((void (*)(_OWORD *, const WebCore::Path *, uint64_t))off_1E3413CF0[v46])(v124, a2, v43);
        *(_DWORD *)(v5 + 312) = -1;
        *(_BYTE *)(v5 + 320) = 0;
      }
      else
      {
        *(_BYTE *)(v5 + 232) = 0;
        *(_DWORD *)(v5 + 312) = -1;
        v65 = *(unsigned int *)(v4 + 312);
        if ((_DWORD)v65 != -1)
        {
          ((void (*)(_OWORD *, const WebCore::Path *, uint64_t))off_1E3413D50[v65])(v124, a2, v43);
          *(_DWORD *)(v5 + 312) = v65;
        }
        *(_BYTE *)(v5 + 320) = 1;
      }
      goto LABEL_64;
    }
    if (*(_BYTE *)(v5 + 320))
    {
      v44 = *(unsigned int *)(v5 + 312);
      v45 = *(unsigned int *)(v4 + 312);
      if ((_DWORD)v44 == -1)
      {
        if ((_DWORD)v45 == -1)
          goto LABEL_64;
      }
      else if ((_DWORD)v45 == -1)
      {
        ((void (*)(_OWORD *, const WebCore::Path *, uint64_t))off_1E3413CF0[v44])(v124, a2, v43);
        *(_DWORD *)(v5 + 312) = -1;
        goto LABEL_64;
      }
      *(_QWORD *)&v124[0] = v5 + 232;
      ((void (*)(_OWORD *))*(&off_1E3413D98 + v45))(v124);
    }
LABEL_64:
    v47 = *(_QWORD *)(v4 + 328);
    *(_QWORD *)(v5 + 333) = *(_QWORD *)(v4 + 333);
    *(_QWORD *)(v5 + 328) = v47;
LABEL_65:
    v48 = *((_DWORD *)v3 + 16);
    if (v48 == 2)
    {
      v53 = *((_QWORD *)v3 + 1);
      if (!v53 || ((*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v53 + 152))(v124), !v126))
      {
LABEL_75:
        v51 = *(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::Path *))(*(_QWORD *)v2 + 1160);
        v54 = v2;
        v52 = v3;
        return v51(v54, v52);
      }
    }
    else
    {
      if (v48 != 1)
        goto LABEL_75;
      v49 = *(_OWORD *)((char *)v3 + 24);
      v124[0] = *(_OWORD *)((char *)v3 + 8);
      v124[1] = v49;
      v124[2] = *(_OWORD *)((char *)v3 + 40);
      v125 = *((_QWORD *)v3 + 7);
      v126 = 1;
    }
    v50 = *((_DWORD *)v3 + 16);
    if (v50 != 2)
    {
      if (v50 == 1 && *((_DWORD *)v3 + 15) == 11)
      {
        v122 = *(_OWORD *)((char *)v3 + 8);
        v123 = 1;
LABEL_72:
        v51 = *(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::Path *))(*(_QWORD *)v2 + 1112);
        v52 = (const WebCore::Path *)&v122;
        goto LABEL_90;
      }
LABEL_84:
      LOBYTE(v122) = 0;
      v123 = 0;
      goto LABEL_85;
    }
    v56 = *((_QWORD *)v3 + 1);
    if (!v56)
      goto LABEL_84;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v56 + 160))(&v122);
    if (v123)
      goto LABEL_72;
LABEL_85:
    v57 = *((_DWORD *)v3 + 16);
    if (v57 != 2)
    {
      if (v57 == 1 && *((_DWORD *)v3 + 15) == 5)
      {
        v119 = *(_OWORD *)((char *)v3 + 8);
        v120 = *((_QWORD *)v3 + 3);
        v121 = 1;
LABEL_89:
        v51 = *(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::Path *))(*(_QWORD *)v2 + 1120);
        v52 = (const WebCore::Path *)&v119;
        goto LABEL_90;
      }
LABEL_102:
      LOBYTE(v119) = 0;
      v121 = 0;
      goto LABEL_103;
    }
    v58 = *((_QWORD *)v3 + 1);
    if (!v58)
      goto LABEL_102;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v58 + 168))(&v119);
    if (v121)
      goto LABEL_89;
LABEL_103:
    v59 = *((_DWORD *)v3 + 16);
    if (v59 != 2)
    {
      if (v59 == 1 && *((_DWORD *)v3 + 15) == 6)
      {
        v116 = *(_OWORD *)((char *)v3 + 8);
        v117 = *((_QWORD *)v3 + 3);
        v118 = 1;
LABEL_125:
        v51 = *(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::Path *))(*(_QWORD *)v2 + 1128);
        v52 = (const WebCore::Path *)&v116;
        goto LABEL_90;
      }
LABEL_106:
      LOBYTE(v116) = 0;
      v118 = 0;
      goto LABEL_107;
    }
    v66 = *((_QWORD *)v3 + 1);
    if (!v66)
      goto LABEL_106;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v66 + 176))(&v116);
    if (v118)
      goto LABEL_125;
LABEL_107:
    v60 = *((_DWORD *)v3 + 16);
    if (v60 != 2)
      break;
    v69 = *((_QWORD *)v3 + 1);
    if (!v69)
      goto LABEL_110;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v69 + 184))(&v113);
    if (v115)
      goto LABEL_144;
LABEL_111:
    v61 = *((_DWORD *)v3 + 16);
    if (v61 != 2)
    {
      if (v61 == 1 && *((_DWORD *)v3 + 15) == 13)
      {
        v62 = *(_OWORD *)((char *)v3 + 24);
        v111[0] = *(_OWORD *)((char *)v3 + 8);
        v111[1] = v62;
        v112 = 1;
LABEL_115:
        v51 = *(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::Path *))(*(_QWORD *)v2 + 1144);
        v52 = (const WebCore::Path *)v111;
        goto LABEL_90;
      }
LABEL_138:
      LOBYTE(v111[0]) = 0;
      v112 = 0;
      goto LABEL_139;
    }
    v70 = *((_QWORD *)v3 + 1);
    if (!v70)
      goto LABEL_138;
    (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v70 + 192))(v111);
    if (v112)
      goto LABEL_115;
LABEL_139:
    v6 = v126;
    if (v126)
    {
      v51 = *(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::Path *))(*(_QWORD *)v2 + 1152);
      v52 = (const WebCore::Path *)v124;
      goto LABEL_90;
    }
LABEL_190:
    __break(1u);
LABEL_191:
    v93 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v94 = __ldaxr(v93);
      v95 = v94 - 1;
    }
    while (__stlxr(v95, v93));
    if (!v95)
    {
      atomic_store(1u, v93);
      WTF::fastFree((WTF *)v93, a2);
    }
LABEL_54:
    ;
  }
  if (v60 != 1 || *((_DWORD *)v3 + 15) != 12)
  {
LABEL_110:
    LOBYTE(v113) = 0;
    v115 = 0;
    goto LABEL_111;
  }
  v113 = *(_OWORD *)((char *)v3 + 8);
  v114 = *((_QWORD *)v3 + 3);
  v115 = 1;
LABEL_144:
  v51 = *(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::Path *))(*(_QWORD *)v2 + 1136);
  v52 = (const WebCore::Path *)&v113;
LABEL_90:
  v54 = v2;
  return v51(v54, v52);
}

__n128 WebCore::PathStream::singleSegment@<Q0>(WebCore::PathStream *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;

  if (*((_DWORD *)this + 7) == 1)
  {
    v2 = *((_QWORD *)this + 2);
    v3 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 16) = v3;
    result = *(__n128 *)(v2 + 32);
    *(__n128 *)(a2 + 32) = result;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(v2 + 48);
    *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 56) = 0;
  }
  return result;
}

unsigned int *WebCore::applyBoxShadowForBackground(WebCore *this, WebCore::GraphicsContext *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  void *v10;
  unsigned int *result;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 88;
  do
  {
    v5 = *(_QWORD *)v4;
    v6 = *(unsigned __int8 *)(*(_QWORD *)v4 + 48);
    v4 = *(_QWORD *)v4 + 56;
  }
  while (v6);
  if (*(_BYTE *)(v5 + 6))
    v7 = *(float *)v5;
  else
    v7 = (float)*(int *)v5;
  if (*(_BYTE *)(v5 + 14))
    v8 = *(float *)(v5 + 8);
  else
    v8 = (float)*(int *)(v5 + 8);
  v20 = __PAIR64__(LODWORD(v8), LODWORD(v7));
  if (*(_BYTE *)(v5 + 30))
    v9 = *(float *)(v5 + 24);
  else
    v9 = (float)*(int *)(v5 + 24);
  v21 = v9;
  WebCore::RenderStyle::colorWithColorFilter(a2, (const WebCore::StyleColor *)(v5 + 32), (WebCore::Color *)&v22);
  LOBYTE(v23) = *(_BYTE *)(v5 + 49);
  HIDWORD(v23) = 1065353216;
  v24 = v20;
  v25 = v21;
  v26 = v22;
  if ((v22 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v27 = v23;
  v28 = 1;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)this + 8, (uint64_t)&v24);
  if (v28)
  {
    if ((v26 & 0x8000000000000) != 0)
    {
      v17 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFLL);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v10);
      }
    }
  }
  result = (unsigned int *)(*(uint64_t (**)(WebCore *, char *))(*(_QWORD *)this + 88))(this, (char *)this + 8);
  if ((v22 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, result));
    if (!v16)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  return result;
}

uint64_t WebCore::FilterOperations::transformColor(WebCore::FilterOperations *this, WebCore::Color *a2)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  float v16[4];

  if (!*((_DWORD *)this + 3) || (*(_QWORD *)a2 & 0x5000000000000) != 0x4000000000000)
    return 0;
  v16[0] = WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>((unint64_t *)a2);
  v16[1] = v4;
  v16[2] = v5;
  v16[3] = v6;
  v7 = *((unsigned int *)this + 3);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)this;
    v9 = 8 * v7;
    while (((*(uint64_t (**)(_QWORD, float *))(*(_QWORD *)*v8 + 40))(*v8, v16) & 1) != 0)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  v15 = bswap32(WebCore::convertColor<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(v16)) | 0x1104000000000000;
  WebCore::Color::operator=((unint64_t *)a2, &v15);
  if ((v15 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  return 1;
}

uint64_t WebCore::drawGlyphs(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double *v4;
  double *v5;
  const CGGlyph *v6;
  const CGGlyph *v7;
  double v8;
  uint64_t Info;
  _QWORD *v10;
  CGFont *Font;
  CGFontRef v12;
  CGFont *v13;
  double *CTM;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __n128 v21;
  BOOL v22;
  CGContext *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  CGColor *FillColor;
  CGColor *StrokeColor;
  CGFloat v55;
  double v56;
  char *v57;
  float v58;
  WTF::StringImpl *v59;
  WebCore::Font *v60;
  int v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  CGFloat v70;
  unint64_t v71;
  double *v72;
  double v73;
  double v74;
  int b_high;
  uint64_t v76;
  CGFloat a;
  float64x2_t v78;
  uint64_t v79;
  void *v80;
  WTF *v82;
  void *v83;
  WTF *v84;
  void *v85;
  uint64_t v86;
  CGSize *p_c;
  float v88;
  float v89;
  void *v90;
  CGFloat v91;
  float64x2_t v92;
  WebCore::Font *v93[2];
  double v94;
  double v95;
  double v96;
  double v97;
  char *v98[2];
  float64x2_t v99;
  CGAffineTransform v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  CGGStateGetAlpha();
  if (v8 > 0.0)
  {
    Info = CGContextDelegateGetInfo();
    if (v3)
    {
      v10 = (_QWORD *)Info;
      Font = (CGFont *)CGGStateGetFont();
      if (*((_BYTE *)v10 + 24))
        goto LABEL_7;
      v12 = CTFontCopyGraphicsFont(*(CTFontRef *)(v10[2] + 88), 0);
      v13 = v12;
      if (v12)
        CFRelease(v12);
      if (Font == v13)
      {
LABEL_7:
        CTM = (double *)CGGStateGetCTM();
        v15 = *CTM;
        v16 = CTM[1];
        v17 = CTM[2];
        v18 = CTM[3];
        v19 = CTM[4];
        v20 = CTM[5];
        (*(void (**)(CGAffineTransform *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v10 + 672))(&v100, *v10, 1);
        v21.n128_u64[0] = *(_QWORD *)&v100.a;
        v22 = v100.a == v15;
        if (v100.a == v15)
        {
          v21.n128_u64[0] = *(_QWORD *)&v100.b;
          v22 = v100.b == v16;
          if (v100.b == v16)
          {
            v21.n128_u64[0] = *(_QWORD *)&v100.c;
            v22 = v100.c == v17;
            if (v100.c == v17)
            {
              v21.n128_u64[0] = *(_QWORD *)&v100.d;
              v22 = v100.d == v18;
              if (v100.d == v18)
              {
                v21.n128_u64[0] = *(_QWORD *)&v100.tx;
                v22 = v100.tx == v19;
                if (v100.tx == v19)
                {
                  v21.n128_u64[0] = *(_QWORD *)&v100.ty;
                  v22 = v100.ty == v20;
                }
              }
            }
          }
        }
        if (!v22)
        {
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, __n128))(*(_QWORD *)*v10 + 672))(&v105, *v10, 1, v21);
          WebCore::AffineTransform::inverse((float64x2_t *)&v105, (uint64_t)&v100);
          if (v101)
          {
            v86 = *v10;
            *(double *)&v105 = v16 * v100.c + v15 * v100.a;
            *((double *)&v105 + 1) = v16 * v100.d + v15 * v100.b;
            *(double *)&v106 = v18 * v100.c + v17 * v100.a;
            *((double *)&v106 + 1) = v18 * v100.d + v17 * v100.b;
            *(double *)&v107 = v20 * v100.c + v19 * v100.a + v100.tx;
            *((double *)&v107 + 1) = v20 * v100.d + v19 * v100.b + v100.ty;
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v86 + 656))(v86, &v105);
          }
        }
        v23 = (CGContext *)(*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v10[1] + 24))(v10[1], v21);
        CGContextGetTextMatrix(&v100, v23);
        v106 = xmmword_1969F8630;
        v107 = xmmword_1969F8640;
        v105 = constinit_4;
        v24 = *((double *)v10 + 4);
        v25 = *((double *)v10 + 5);
        v26 = *((double *)v10 + 6);
        v27 = *((double *)v10 + 7);
        v28 = v24 * v27 - v25 * v26;
        v29 = fabs(v28);
        v30 = 1.0;
        if ((unint64_t)(*(_QWORD *)&v29 - 0x10000000000000) >> 53 > 0x3FE
          && (unint64_t)(*(_QWORD *)&v29 - 1) > 0xFFFFFFFFFFFFELL)
        {
          v42 = 0.0;
          v43 = 0.0;
          v41 = 0.0;
          v40 = 0.0;
          v39 = 1.0;
        }
        else
        {
          if (v24 == 1.0 && v25 == 0.0 && v26 == 0.0 && v27 == 1.0)
          {
            v37 = -*((double *)v10 + 8);
            v38 = -*((double *)v10 + 9);
            v33 = 0.0;
            v34 = 1.0;
            v32 = 0.0;
          }
          else
          {
            v30 = v27 / v28;
            v32 = -v25 / v28;
            v33 = -v26 / v28;
            v34 = v24 / v28;
            v36 = *((double *)v10 + 8);
            v35 = *((double *)v10 + 9);
            v37 = (v26 * v35 - v27 * v36) / v28;
            v38 = (v25 * v36 - v24 * v35) / v28;
          }
          v39 = v100.c * v32 + v30 * v100.a;
          v40 = v100.d * v32 + v30 * v100.b;
          v41 = v100.c * v34 + v33 * v100.a;
          v30 = v100.d * v34 + v33 * v100.b;
          v42 = v100.tx + v100.c * v38 + v37 * v100.a;
          *(double *)&v105 = v39;
          *((double *)&v105 + 1) = v40;
          *(double *)&v106 = v41;
          *((double *)&v106 + 1) = v30;
          v43 = v100.ty + v100.d * v38 + v37 * v100.b;
          *(double *)&v107 = v42;
          *((double *)&v107 + 1) = v43;
        }
        v102 = constinit_4;
        v103 = xmmword_1969F8630;
        v104 = xmmword_1969F8640;
        v44 = v39 * v30 - v40 * v41;
        v45 = fabs(v44);
        if ((unint64_t)(*(_QWORD *)&v45 - 0x10000000000000) >> 53 > 0x3FE
          && (unint64_t)(*(_QWORD *)&v45 - 1) > 0xFFFFFFFFFFFFELL)
        {
          v105 = constinit_4;
          v106 = xmmword_1969F8630;
          v107 = xmmword_1969F8640;
        }
        else
        {
          v47 = 1.0;
          if (v39 == 1.0 && v40 == 0.0 && v41 == 0.0 && v30 == 1.0)
          {
            v51 = -v42;
            v52 = -v43;
            v50 = 0.0;
            v49 = 0.0;
            v48 = 1.0;
          }
          else
          {
            v48 = v30 / v44;
            v49 = -v40 / v44;
            v50 = -v41 / v44;
            v47 = v39 / v44;
            v51 = (v41 * v43 - v30 * v42) / v44;
            v52 = (v40 * v42 - v39 * v43) / v44;
          }
          *(double *)&v102 = v48;
          *((double *)&v102 + 1) = v49;
          *(double *)&v103 = v50;
          *((double *)&v103 + 1) = v47;
          *(double *)&v104 = v51;
          *((double *)&v104 + 1) = v52;
        }
        (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*v10 + 656))(*v10, &v105);
        FillColor = (CGColor *)CGGStateGetFillColor();
        WebCore::DrawGlyphsRecorder::updateFillColor((WebCore::DrawGlyphsRecorder *)v10, FillColor);
        StrokeColor = (CGColor *)CGGStateGetStrokeColor();
        WebCore::DrawGlyphsRecorder::updateStrokeColor((WebCore::DrawGlyphsRecorder *)v10, StrokeColor);
        CGGStateGetStyle();
        WebCore::DrawGlyphsRecorder::updateShadow(v10);
        CGGStateGetFontSize();
        if (*((_BYTE *)v10 + 24))
        {
          v56 = v55;
          v57 = (char *)CTFontCreateWithGraphicsFont(Font, v55, 0, 0);
          v98[0] = v57;
          v58 = v56;
          WebCore::FontPlatformData::FontPlatformData((uint64_t)&v100, (CFTypeRef *)v98, 0, 0, 0, 0, 0, 0, v58);
          WebCore::Font::create((uint64_t)&v100, 1, 0, 0, 0, 0, 0, (uint64_t *)v93);
          v60 = v93[0];
          v61 = (*(_DWORD *)v93[0])++;
          if (v61)
          {
            *(_DWORD *)v60 = v61;
          }
          else
          {
            WebCore::Font::~Font((WTF **)v60);
            WTF::fastFree(v84, v85);
          }
          WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)&v100, v59);
          if (v57)
            CFRelease(v57);
        }
        else
        {
          v60 = (WebCore::Font *)v10[2];
          ++*(_DWORD *)v60;
        }
        v62 = *((double *)v10 + 4);
        v63 = *((double *)v10 + 5);
        v64 = *((double *)v10 + 6);
        v65 = *((double *)v10 + 7);
        v67 = *((double *)v10 + 8);
        v66 = *((double *)v10 + 9);
        if (!*((_BYTE *)v60 + 100))
        {
          v100.b = 0.0;
          if (!(v3 >> 28))
          {
            *(double *)&v68 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)(16 * v3)));
            LODWORD(v100.b) = v3;
            *(_QWORD *)&v100.a = v68;
            v69 = v5[1];
            v70 = v66 + v65 * v69 + v63 * *v5;
            v100.c = v67 + v64 * v69 + v62 * *v5;
            v100.d = v70;
            v71 = v3 - 1;
            if (v3 == 1)
            {
              a = *(double *)&v68;
              v76 = 0;
            }
            else
            {
              v72 = v5 + 2;
              do
              {
                v73 = *v72 - *(v72 - 2);
                v74 = v72[1] - *(v72 - 1);
                *(double *)v93 = v64 * v74 + v62 * v73;
                *(double *)&v93[1] = v65 * v74 + v63 * v73;
                b_high = HIDWORD(v100.b);
                if (HIDWORD(v100.b) == LODWORD(v100.b))
                {
                  WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,CGSize>((uint64_t)&v100, (unint64_t)v93);
                }
                else
                {
                  *(_OWORD *)(*(_QWORD *)&v100.a + 16 * HIDWORD(v100.b)) = *(_OWORD *)v93;
                  HIDWORD(v100.b) = b_high + 1;
                }
                v72 += 2;
                --v71;
              }
              while (v71);
              v76 = HIDWORD(v100.b);
              if (HIDWORD(v100.b) == LODWORD(v100.b))
              {
                WTF::Vector<CGSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,CGSize const&>((uint64_t)&v100);
                a = v100.a;
                goto LABEL_49;
              }
              a = v100.a;
            }
            *(_OWORD *)(*(_QWORD *)&a + 16 * v76) = *MEMORY[0x1E0C9D820];
LABEL_49:
            v78 = *(float64x2_t *)&v100.c;
LABEL_50:
            v79 = *v10;
            *(float32x2_t *)&v100.a = vcvt_f32_f64(v78);
            (*(void (**)(uint64_t, WebCore::Font *, const CGGlyph *, CGFloat, unint64_t, CGAffineTransform *, _QWORD))(*(_QWORD *)v79 + 544))(v79, v60, v7, COERCE_CGFLOAT(*(_QWORD *)&a), v3, &v100, *((unsigned __int8 *)v10 + 25));
            (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)*v10 + 656))(*v10, &v102);
            if (a != 0.0)
              WTF::fastFree(*(WTF **)&a, v80);
            if (*(_DWORD *)v60 == 1)
            {
              WebCore::Font::~Font((WTF **)v60);
              WTF::fastFree(v82, v83);
            }
            else
            {
              --*(_DWORD *)v60;
            }
            return 0;
          }
LABEL_74:
          __break(0xC471u);
          JUMPOUT(0x1941A7A8CLL);
        }
        *(_QWORD *)&v100.a = &v100.c;
        LODWORD(v100.b) = 256;
        HIDWORD(v100.b) = v3;
        p_c = (CGSize *)&v100.c;
        if (v3 >= 0x101)
        {
          if (v3 >> 28)
            goto LABEL_74;
          p_c = (CGSize *)WTF::fastMalloc((WTF *)(16 * v3));
          LODWORD(v100.b) = v3;
          *(_QWORD *)&v100.a = p_c;
        }
        CTFontGetVerticalTranslationsForGlyphs(*((CTFontRef *)v60 + 11), v7, p_c, v3);
        v88 = *((float *)v60 + 5);
        v89 = (float)(v88 + *((float *)v60 + 7)) * 0.5;
        v93[0] = *(WebCore::Font **)&v62;
        v93[1] = *(WebCore::Font **)&v63;
        v94 = v64;
        v95 = v65;
        v96 = v67;
        v97 = v66;
        WebCore::computeVerticalAdvancesFromPositions(v98, *(double **)&v100.a, v5, v3, (float64x2_t *)v93, v89 - v88);
        a = *(double *)v98;
        v91 = v100.a;
        v92 = v99;
        if ((CGAffineTransform *)&v100.c != *(CGAffineTransform **)&v100.a && *(_QWORD *)&v100.a)
        {
          v100.a = 0.0;
          LODWORD(v100.b) = 0;
          WTF::fastFree(*(WTF **)&v91, v90);
        }
        v78 = v92;
        goto LABEL_50;
      }
    }
  }
  return 0;
}

uint64_t WebCore::DisplayList::Recorder::concatCTM(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  float64x2_t v6;
  unsigned int v7;
  double *v8;
  double v9;
  double v10;
  double v13;
  double v14;
  double v15;
  double v16;
  double v22;
  double v24;

  v2 = *(double *)a2;
  v3 = *(double *)(a2 + 8);
  v4 = *(double *)(a2 + 16);
  _Q0 = *(float64x2_t *)(a2 + 24);
  v6.f64[0] = *(float64_t *)a2;
  v6.f64[1] = v4;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v6, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(_Q0, (float64x2_t)xmmword_1968A14B0))))) & 1) != 0|| v3 != 0.0|| *(double *)(a2 + 40) != 0.0)
  {
    v7 = *(_DWORD *)(result + 732);
    if (v7)
    {
      v8 = (double *)(*(_QWORD *)(result + 720) + 760 * v7 - 760);
      v9 = v8[45];
      v10 = v8[46];
      _D16 = v8[43];
      _D17 = v8[44];
      v13 = v3 * v9 + v2 * _D16;
      v14 = v3 * v10 + v2 * _D17;
      v15 = v9 * _Q0.f64[0] + v4 * _D16;
      v16 = v10 * _Q0.f64[0] + v4 * _D17;
      __asm { FMLA            D5, D16, V0.D[1] }
      v22 = v8[47] + _D5;
      __asm { FMLA            D1, D17, V0.D[1] }
      v24 = _D1 + v8[48];
      v8[43] = v13;
      v8[44] = v14;
      v8[45] = v15;
      v8[46] = v16;
      v8[47] = v22;
      v8[48] = v24;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 776))(result);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::DrawGlyphsRecorder::updateStrokeColor(WebCore::DrawGlyphsRecorder *this, CGColorRef color)
{
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _BYTE v12[8];
  uint64_t v13;
  int v14;
  _QWORD v15[12];

  v15[11] = *MEMORY[0x1E0C80C00];
  if (!CGColorGetPattern(color))
  {
    v4 = *(_QWORD *)this;
    if (*((CGColorRef *)this + 45) == color)
    {
      WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(v4 + 8, (void *)4, 88, (_QWORD *)this + 21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
    }
    else
    {
      WebCore::Color::createAndPreserveColorSpace((uint64_t)color, 0, &v10);
      v14 = 0;
      WebCore::SourceBrush::SourceBrush((uint64_t)v15, &v10, (uint64_t)v12);
      WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(v4 + 8, (void *)4, 88, v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
      WebCore::SourceBrush::~SourceBrush((WebCore::SourceBrush *)v15, v5);
      if (v14 != -1)
        ((void (*)(char *, uint64_t *))off_1E3413028[v14])(&v11, &v13);
      if ((v10 & 0x8000000000000) != 0)
      {
        v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v6);
        }
      }
    }
  }
}

void WebCore::DrawGlyphsRecorder::updateFillColor(WebCore::DrawGlyphsRecorder *this, CGColorRef color)
{
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  _BYTE v12[8];
  uint64_t v13;
  int v14;
  _QWORD v15[12];

  v15[11] = *MEMORY[0x1E0C80C00];
  if (!CGColorGetPattern(color))
  {
    v4 = *(_QWORD *)this;
    if (*((CGColorRef *)this + 44) == color)
    {
      WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(v4 + 8, (void *)1, 0, (_QWORD *)this + 10);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
    }
    else
    {
      WebCore::Color::createAndPreserveColorSpace((uint64_t)color, 0, &v10);
      v14 = 0;
      WebCore::SourceBrush::SourceBrush((uint64_t)v15, &v10, (uint64_t)v12);
      WebCore::GraphicsContextState::setProperty<WebCore::SourceBrush>(v4 + 8, (void *)1, 0, v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
      WebCore::SourceBrush::~SourceBrush((WebCore::SourceBrush *)v15, v5);
      if (v14 != -1)
        ((void (*)(char *, uint64_t *))off_1E3413028[v14])(&v11, &v13);
      if ((v10 & 0x8000000000000) != 0)
      {
        v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v6);
        }
      }
    }
  }
}

unsigned int *WebCore::DrawGlyphsRecorder::updateShadow(uint64_t *a1)
{
  unsigned int *result;
  void *v3;
  double *Data;
  __double2 v5;
  float cosval;
  float sinval;
  float v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  uint64_t Color;
  void *v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  _QWORD v21[2];
  char v22;

  if (CGStyleGetType() == 1)
  {
    Data = (double *)CGStyleGetData();
    v5 = __sincos_stret((Data[2] + -180.0) * 0.0174532925);
    cosval = v5.__cosval;
    sinval = v5.__sinval;
    v8 = Data[4];
    *(float *)&v9 = v8 * cosval;
    *(float *)&v10 = v8 * sinval;
    v11 = Data[5];
    Color = CGStyleGetColor();
    WebCore::Color::createAndPreserveColorSpace(Color, 0, &v17);
    LOBYTE(v18) = 0;
    HIDWORD(v18) = 1065353216;
    v19 = __PAIR64__(v10, v9);
    v20 = v11;
    WebCore::Color::Color(v21, &v17);
    v21[1] = v18;
    v22 = 1;
    WebCore::DrawGlyphsRecorder::updateShadow(a1, (uint64_t)&v19, 1);
    result = (unsigned int *)std::optional<WebCore::GraphicsDropShadow>::~optional((uint64_t)&v19, v13);
    if ((v17 & 0x8000000000000) == 0)
      return result;
    result = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(result);
      v15 = --v14 == 0;
    }
    while (__stlxr(v14, result));
    goto LABEL_11;
  }
  LOBYTE(v19) = 0;
  v22 = 0;
  result = (unsigned int *)WebCore::DrawGlyphsRecorder::updateShadow(a1, (uint64_t)&v19, 0);
  if (v22 && (v21[0] & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v21[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(result);
      v15 = --v16 == 0;
    }
    while (__stlxr(v16, result));
LABEL_11:
    if (v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::drawGlyphsAndCacheResources(_DWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t IdentifierInternal;
  double v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary((uint64_t)a1, a2);
  (*(void (**)(_DWORD *, void *))(*(_QWORD *)a1 + 1344))(a1, a2);
  if (a1[950] != 2)
    return (*(uint64_t (**)(_DWORD *, void *, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 920))(a1, a2, a3, a4, a5, a6, a7);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    result = 142;
    __break(0xC471u);
  }
  else
  {
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v16 = WebCore::DecomposedGlyphs::create(a3, a4, a5, a6, a7, IdentifierInternal, &v19);
    v17 = v19;
    (*(void (**)(_DWORD *, uint64_t, double))(*(_QWORD *)a1 + 1352))(a1, v19, v16);
    result = (*(uint64_t (**)(_DWORD *, void *, uint64_t))(*(_QWORD *)a1 + 928))(a1, a2, v17);
    if (v17)
      return (uint64_t)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v17 + 8), v18);
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::fillRect(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary(a1, a2);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1088))(a1, a2, a3, a4, a5);
}

{
  WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary(a1, a2);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1080))(a1, a2, a3, a4, a5);
}

uint64_t WebCore::DisplayList::Recorder::clipRoundedRect(WebCore::DisplayList::Recorder *this, const WebCore::FloatRoundedRect *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  result = WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary((uint64_t)this, a2);
  v5 = *((_DWORD *)this + 183);
  if (v5)
  {
    v6 = *((_QWORD *)this + 90) + 760 * v5;
    v7 = (float *)(v6 - 760);
    v8 = (float *)(v6 - 368);
    v9 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(v6 - 416), a2);
    v13 = v7[98];
    if (v13 >= v9)
      v14 = v7[98];
    else
      v14 = v9;
    v15 = v7[99];
    if (v15 >= v10)
      v16 = v7[99];
    else
      v16 = v10;
    v17 = v13 + v7[100];
    v18 = v9 + v11;
    if (v18 >= v17)
      v18 = v17;
    v19 = v10 + v12;
    if (v19 >= (float)(v15 + v7[101]))
      v19 = v15 + v7[101];
    if (v14 >= v18 || v16 >= v19)
    {
      v14 = 0.0;
      v16 = 0.0;
      v18 = 0.0;
      v19 = 0.0;
    }
    *v8 = v14;
    v8[1] = v16;
    v7[100] = v18 - v14;
    v7[101] = v19 - v16;
    return (*(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::FloatRoundedRect *))(*(_QWORD *)this + 864))(this, a2);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::clip(WebCore::DisplayList::Recorder *this, const WebCore::FloatRect *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  result = WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary((uint64_t)this, a2);
  v5 = *((_DWORD *)this + 183);
  if (v5)
  {
    v6 = *((_QWORD *)this + 90) + 760 * v5;
    v7 = (float *)(v6 - 760);
    v8 = (float *)(v6 - 368);
    v9 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(v6 - 416), a2);
    v13 = v7[98];
    if (v13 >= v9)
      v14 = v7[98];
    else
      v14 = v9;
    v15 = v7[99];
    if (v15 >= v10)
      v16 = v7[99];
    else
      v16 = v10;
    v17 = v13 + v7[100];
    v18 = v9 + v11;
    if (v18 >= v17)
      v18 = v17;
    v19 = v10 + v12;
    if (v19 >= (float)(v15 + v7[101]))
      v19 = v15 + v7[101];
    if (v14 >= v18 || v16 >= v19)
    {
      v14 = 0.0;
      v16 = 0.0;
      v18 = 0.0;
      v19 = 0.0;
    }
    *v8 = v14;
    v8[1] = v16;
    v7[100] = v18 - v14;
    v7[101] = v19 - v16;
    return (*(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::FloatRect *))(*(_QWORD *)this + 856))(this, a2);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  __int128 v84;
  __int128 v85;

  v4 = *(unsigned int *)(this + 732);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
    goto LABEL_145;
  }
  v5 = this;
  v6 = *(_QWORD *)(this + 720);
  v2 = v6 + 760 * v4 - 760;
  v7 = (unsigned int *)(v6 + 760 * v4 - 584);
  v4 = *v7;
  if (!(_DWORD)v4)
    return this;
  if ((v4 & 0xFFFFFFF2) != 0 || (v4 & 4) != 0 && (*(_DWORD *)(v2 + 168) || (*(_BYTE *)(v2 + 94) & 8) != 0))
    goto LABEL_74;
  if ((v4 & 1) == 0)
    goto LABEL_8;
  if (*(_DWORD *)(v2 + 80) || (*(_BYTE *)(v2 + 6) & 8) != 0)
  {
LABEL_74:
    if ((v4 & 1) != 0)
    {
      v51 = *(_DWORD *)(this + 88);
      if (v51 == 1)
      {
        if (!*(_DWORD *)(this + 32))
        {
          v53 = *(_QWORD *)(this + 24);
          if (v53)
          {
            if (*(_BYTE *)(v53 + 40))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)this + 1360))(this, v53);
          }
        }
      }
      else if (v51 == 2)
      {
        v52 = *(_QWORD *)(this + 24);
        if (v52)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)this + 1336))(this, v52 + 8);
      }
    }
    if ((*(_BYTE *)v7 & 4) != 0)
    {
      v54 = *(_DWORD *)(v5 + 176);
      if (v54 == 1)
      {
        if (!*(_DWORD *)(v5 + 120))
        {
          v56 = *(_QWORD *)(v5 + 112);
          if (v56)
          {
            if (*(_BYTE *)(v56 + 40))
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 1360))(v5, v56);
          }
        }
      }
      else if (v54 == 2)
      {
        v55 = *(_QWORD *)(v5 + 112);
        if (v55)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 1336))(v5, v55 + 8);
      }
    }
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 800))(v5, v2);
    goto LABEL_15;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 0x8000000000000) != 0)
    goto LABEL_145;
  this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 784))(this, *(_QWORD *)(this + 8));
  v4 = *v7;
LABEL_8:
  if ((v4 & 0xC) != 0)
  {
    if ((v4 & 4) == 0)
    {
      v11 = 0;
      v10 = 0;
      v12 = 0;
      v9 = *(_DWORD *)(v5 + 188);
      goto LABEL_13;
    }
    v8 = *(_QWORD *)(v5 + 96);
    if ((v4 & 8) != 0)
    {
      if ((v8 & 0x8000000000000) == 0)
      {
        v9 = *(_DWORD *)(v5 + 188);
        v10 = 0x100000000;
        v11 = *(_QWORD *)(v5 + 96);
        v12 = v8 & 0xFFFFFF00;
LABEL_13:
        v13 = 0x100000000;
LABEL_14:
        *(_QWORD *)&v85 = v11 | (unint64_t)v10 | v12 & 0xFFFFFF00;
        *((_QWORD *)&v85 + 1) = v13 | v9;
        this = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 792))(v5, &v85);
        goto LABEL_15;
      }
    }
    else if ((v8 & 0x8000000000000) == 0)
    {
      v9 = 0;
      v13 = 0;
      v10 = 0x100000000;
      v11 = *(_QWORD *)(v5 + 96);
      v12 = v8 & 0xFFFFFF00;
      goto LABEL_14;
    }
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
LABEL_15:
  *v7 = 0;
  v14 = *(_DWORD *)(v5 + 732);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1941A8B58);
  }
  v15 = *(_QWORD *)(v5 + 720) + 760 * v14;
  v3 = v15 - 352;
  v16 = v15 - 336;
  if (*(_BYTE *)(v15 - 8))
  {
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)v2;
    if ((*(_QWORD *)v3 & 0x8000000000000) != 0)
    {
      if ((v18 & 0x8000000000000) != 0)
      {
        v85 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
        v84 = *(_OWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 4);
        this = WebCore::operator==<float,4ul>((float *)&v85, (float *)&v84);
        v17 = *(_QWORD *)v3;
        if ((_DWORD)this)
        {
          if (HIBYTE(v17) == HIBYTE(*(_QWORD *)v2) && BYTE6(v17) == BYTE6(*(_QWORD *)v2))
            goto LABEL_23;
        }
      }
    }
    else if (v17 == v18 && (v18 & 0x8000000000000) == 0)
    {
      goto LABEL_23;
    }
    if ((v17 & 0x8000000000000) != 0)
    {
      this = v17 & 0xFFFFFFFFFFFFLL;
      do
      {
        v68 = __ldaxr((unsigned int *)this);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, (unsigned int *)this));
      if (!v69)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    v65 = *(_QWORD *)v2;
    *(_QWORD *)v3 = *(_QWORD *)v2;
    if ((v65 & 0x8000000000000) != 0)
    {
      v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 + 1, v66));
    }
LABEL_23:
    v20 = *(unsigned int *)(v3 + 80);
    v21 = *(unsigned int *)(v2 + 80);
    if ((_DWORD)v20 == -1)
    {
      if ((_DWORD)v21 != -1)
        goto LABEL_25;
    }
    else
    {
      if ((_DWORD)v21 != -1)
      {
LABEL_25:
        *(_QWORD *)&v85 = v16;
        this = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_1E3413D80[v21])(&v85, v16, v2 + 16);
        goto LABEL_26;
      }
      this = ((uint64_t (*)(__int128 *, uint64_t))off_1E3413D08[v20])(&v85, v16);
      *(_DWORD *)(v3 + 80) = -1;
    }
LABEL_26:
    v22 = *(_QWORD *)(v3 + 88);
    v23 = *(_QWORD *)(v2 + 88);
    if ((v22 & 0x8000000000000) != 0)
    {
      if ((v23 & 0x8000000000000) != 0)
      {
        v85 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
        v84 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
        this = WebCore::operator==<float,4ul>((float *)&v85, (float *)&v84);
        v22 = *(_QWORD *)(v3 + 88);
        if ((_DWORD)this)
        {
          v70 = *(_QWORD *)(v2 + 88);
          if (HIBYTE(v22) == HIBYTE(v70) && BYTE6(v22) == BYTE6(v70))
            goto LABEL_29;
        }
      }
    }
    else if (v22 == v23 && (v23 & 0x8000000000000) == 0)
    {
      goto LABEL_29;
    }
    if ((v22 & 0x8000000000000) != 0)
    {
      this = v22 & 0xFFFFFFFFFFFFLL;
      do
      {
        v74 = __ldaxr((unsigned int *)this);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, (unsigned int *)this));
      if (!v75)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    v71 = *(_QWORD *)(v2 + 88);
    *(_QWORD *)(v3 + 88) = v71;
    if ((v71 & 0x8000000000000) != 0)
    {
      v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFLL);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 + 1, v72));
    }
LABEL_29:
    a2 = (void *)(v3 + 104);
    v24 = *(unsigned int *)(v3 + 168);
    v25 = *(unsigned int *)(v2 + 168);
    if ((_DWORD)v24 == -1)
    {
      if ((_DWORD)v25 != -1)
        goto LABEL_31;
    }
    else
    {
      if ((_DWORD)v25 != -1)
      {
LABEL_31:
        *(_QWORD *)&v85 = v3 + 104;
        this = ((uint64_t (*)(__int128 *))off_1E3413D80[v25])(&v85);
        goto LABEL_32;
      }
      this = ((uint64_t (*)(__int128 *, void *))off_1E3413D08[v24])(&v85, a2);
      *(_DWORD *)(v3 + 168) = -1;
    }
LABEL_32:
    v26 = *(_QWORD *)v7;
    *(_DWORD *)(v3 + 184) = v7[2];
    *(_QWORD *)(v3 + 176) = v26;
    v27 = (_QWORD *)(v3 + 192);
    v28 = (uint64_t *)(v2 + 192);
    if (*(unsigned __int8 *)(v3 + 224) == *(unsigned __int8 *)(v2 + 224))
    {
      if (!*(_BYTE *)(v3 + 224))
        goto LABEL_56;
      v29 = *v28;
      *(_DWORD *)(v3 + 200) = *(_DWORD *)(v2 + 200);
      *v27 = v29;
      v30 = *(_QWORD *)(v3 + 208);
      v31 = *(_QWORD *)(v2 + 208);
      if ((v30 & 0x8000000000000) != 0)
      {
        if ((v31 & 0x8000000000000) != 0)
        {
          v85 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
          v84 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4);
          this = WebCore::operator==<float,4ul>((float *)&v85, (float *)&v84);
          v30 = *(_QWORD *)(v3 + 208);
          if ((_DWORD)this)
          {
            v78 = *(_QWORD *)(v2 + 208);
            if (HIBYTE(v30) == HIBYTE(v78) && BYTE6(v30) == BYTE6(v78))
              goto LABEL_37;
          }
        }
      }
      else if (v30 == v31 && (v31 & 0x8000000000000) == 0)
      {
LABEL_37:
        *(_QWORD *)(v3 + 216) = *(_QWORD *)(v2 + 216);
        goto LABEL_56;
      }
      if ((v30 & 0x8000000000000) != 0)
      {
        this = v30 & 0xFFFFFFFFFFFFLL;
        do
        {
          v82 = __ldaxr((unsigned int *)this);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, (unsigned int *)this));
        if (!v83)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
      v79 = *(_QWORD *)(v2 + 208);
      *(_QWORD *)(v3 + 208) = v79;
      if ((v79 & 0x8000000000000) != 0)
      {
        v80 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFLL);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 + 1, v80));
      }
      goto LABEL_37;
    }
    if (!*(_BYTE *)(v3 + 224))
    {
      v48 = *v28;
      *(_DWORD *)(v3 + 200) = *(_DWORD *)(v2 + 200);
      *v27 = v48;
      v49 = *(_QWORD *)(v2 + 208);
      *(_QWORD *)(v3 + 208) = v49;
      if ((v49 & 0x8000000000000) != 0)
      {
        v63 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 + 1, v63));
      }
      *(_QWORD *)(v3 + 216) = *(_QWORD *)(v2 + 216);
      *(_BYTE *)(v3 + 224) = 1;
LABEL_56:
      v42 = v3 + 232;
      v43 = v2 + 232;
      if (*(unsigned __int8 *)(v3 + 320) != *(unsigned __int8 *)(v2 + 320))
      {
        if (*(_BYTE *)(v3 + 320))
        {
          v46 = *(unsigned int *)(v3 + 312);
          if ((_DWORD)v46 != -1)
            this = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v46])(&v85, v42, v43);
          *(_DWORD *)(v3 + 312) = -1;
          *(_BYTE *)(v3 + 320) = 0;
        }
        else
        {
          *(_BYTE *)(v3 + 232) = 0;
          *(_DWORD *)(v3 + 312) = -1;
          v50 = *(unsigned int *)(v2 + 312);
          if ((_DWORD)v50 != -1)
          {
            this = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_1E3413D50[v50])(&v85, v42, v43);
            *(_DWORD *)(v3 + 312) = v50;
          }
          *(_BYTE *)(v3 + 320) = 1;
        }
        goto LABEL_65;
      }
      if (*(_BYTE *)(v3 + 320))
      {
        v44 = *(unsigned int *)(v3 + 312);
        v45 = *(unsigned int *)(v2 + 312);
        if ((_DWORD)v44 == -1)
        {
          if ((_DWORD)v45 == -1)
            goto LABEL_65;
        }
        else if ((_DWORD)v45 == -1)
        {
          this = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v44])(&v85, v42, v43);
          *(_DWORD *)(v3 + 312) = -1;
          goto LABEL_65;
        }
        *(_QWORD *)&v85 = v3 + 232;
        this = ((uint64_t (*)(__int128 *))*(&off_1E3413D98 + v45))(&v85);
      }
LABEL_65:
      v47 = *(_QWORD *)(v2 + 328);
      *(_QWORD *)(v3 + 333) = *(_QWORD *)(v2 + 333);
      *(_QWORD *)(v3 + 328) = v47;
      return this;
    }
    v4 = *(_QWORD *)(v3 + 208);
    if ((v4 & 0x8000000000000) == 0)
    {
LABEL_55:
      *(_BYTE *)(v3 + 224) = 0;
      goto LABEL_56;
    }
LABEL_146:
    this = v4 & 0xFFFFFFFFFFFFLL;
    do
    {
      v76 = __ldaxr((unsigned int *)this);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, (unsigned int *)this));
    if (!v77)
    {
      atomic_store(1u, (unsigned int *)this);
      this = WTF::fastFree((WTF *)this, a2);
    }
    goto LABEL_55;
  }
  v32 = *(_QWORD *)v2;
  *(_QWORD *)v3 = *(_QWORD *)v2;
  if ((v32 & 0x8000000000000) != 0)
  {
    v57 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 + 1, v57));
  }
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 80) = -1;
  v33 = *(unsigned int *)(v2 + 80);
  if ((_DWORD)v33 != -1)
  {
    this = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))off_1E3413D38[v33])(&v85, v16, v2 + 16);
    *(_DWORD *)(v3 + 80) = v33;
  }
  v34 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v3 + 88) = v34;
  if ((v34 & 0x8000000000000) != 0)
  {
    v59 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_BYTE *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 168) = -1;
  v35 = *(unsigned int *)(v2 + 168);
  if ((_DWORD)v35 != -1)
  {
    this = ((uint64_t (*)(__int128 *))off_1E3413D38[v35])(&v85);
    *(_DWORD *)(v3 + 168) = v35;
  }
  v36 = *(_QWORD *)v7;
  v37 = v7[2];
  *(_BYTE *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 184) = v37;
  *(_QWORD *)(v3 + 176) = v36;
  *(_BYTE *)(v3 + 224) = 0;
  if (*(_BYTE *)(v2 + 224))
  {
    v38 = *(_QWORD *)(v2 + 192);
    *(_DWORD *)(v3 + 200) = *(_DWORD *)(v2 + 200);
    *(_QWORD *)(v3 + 192) = v38;
    v39 = *(_QWORD *)(v2 + 208);
    *(_QWORD *)(v3 + 208) = v39;
    if ((v39 & 0x8000000000000) != 0)
    {
      v61 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 + 1, v61));
    }
    *(_QWORD *)(v3 + 216) = *(_QWORD *)(v2 + 216);
    *(_BYTE *)(v3 + 224) = 1;
  }
  *(_BYTE *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 320) = 0;
  if (*(_BYTE *)(v2 + 320))
  {
    *(_DWORD *)(v3 + 312) = -1;
    v40 = *(unsigned int *)(v2 + 312);
    if ((_DWORD)v40 != -1)
    {
      this = ((uint64_t (*)(__int128 *))off_1E3413D50[v40])(&v85);
      *(_DWORD *)(v3 + 312) = v40;
    }
    *(_BYTE *)(v3 + 320) = 1;
  }
  v41 = *(_QWORD *)(v2 + 328);
  *(_QWORD *)(v3 + 333) = *(_QWORD *)(v2 + 333);
  *(_QWORD *)(v3 + 328) = v41;
  *(_BYTE *)(v3 + 344) = 1;
  return this;
}

float WebCore::AffineTransform::mapRect(WebCore::AffineTransform *this, const WebCore::FloatRect *a2)
{
  double v2;
  double v3;
  float v4;
  float result;
  float v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  float v12;
  double v13;
  float v14;
  double v15;
  float v16;
  float v17;

  v2 = *(double *)this;
  v3 = *((double *)this + 2);
  if (*(double *)this == 1.0 && *((double *)this + 1) == 0.0 && v3 == 0.0 && *((double *)this + 3) == 1.0)
  {
    v4 = *((double *)this + 4);
    return *(float *)a2 + v4;
  }
  else
  {
    v6 = *((float *)a2 + 1);
    v7 = *(float *)a2;
    v8 = v3 * v6;
    v9 = *((double *)this + 4);
    v10 = v9 + v8 + v2 * v7;
    v11 = (float)(*(float *)a2 + *((float *)a2 + 2));
    v12 = v9 + v8 + v2 * v11;
    v13 = v3 * (float)(v6 + *((float *)a2 + 3));
    v14 = v9 + v13 + v2 * v11;
    v15 = v9 + v13 + v2 * v7;
    *(float *)&v7 = v15;
    if (*(float *)&v7 >= v14)
      result = v14;
    else
      result = v15;
    if (v12 >= v10)
      v16 = v10;
    else
      v16 = v12;
    if (result >= v16)
      result = v16;
    v17 = fabsf(result);
    if (v17 == INFINITY || v17 > 2147500000.0)
      return (float)((SLODWORD(result) >> 31) ^ 0x7FFFFFFF);
  }
  return result;
}

unsigned int *WebCore::DisplayList::SetState::apply(WebCore::DisplayList::SetState *this, WebCore::GraphicsContext *a2)
{
  unsigned int *result;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  LOBYTE(v12) = 0;
  v23 = 0;
  WebCore::GraphicsContextState::mergeLastChanges((uint64_t)a2 + 8, this, &v12);
  result = (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  if (v23)
  {
    if (v22)
    {
      if (v21 != -1)
        result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E3413CF0[v21])(&v11, &v20);
      v21 = -1;
    }
    if (v19)
    {
      if ((v18 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
        }
      }
    }
    if (v17 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E3413D08[v17])(&v11, &v16);
    v17 = -1;
    if ((v15 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
      {
        v5 = __ldaxr(result);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, result));
      if (!v6)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
    if (v14 != -1)
      result = (unsigned int *)((uint64_t (*)(char *, uint64_t *))off_1E3413D08[v14])(&v11, &v13);
    v14 = -1;
    if ((v12 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
      {
        v7 = __ldaxr(result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, result));
      if (!v8)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

uint64_t WebCore::DrawGlyphsRecorder::updateShadow(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[16];
  uint64_t v14;
  char v15;

  v5 = *a1;
  if (*(_BYTE *)(a2 + 32))
  {
    WebCore::GraphicsContext::setDropShadow(*a1, (uint64_t *)a2);
  }
  else
  {
    v13[0] = 0;
    v15 = 0;
    WebCore::GraphicsContextState::setDropShadow(v5 + 8, (uint64_t)v13);
    if (v15)
    {
      if ((v14 & 0x8000000000000) != 0)
      {
        v10 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, v6);
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v5 + 8);
  }
  v7 = *a1;
  v8 = a3 == 1;
  if (*(unsigned __int8 *)(*a1 + 345) != v8)
  {
    *(_BYTE *)(v7 + 345) = v8;
    *(_DWORD *)(v7 + 184) |= 0x4000u;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, v7 + 8);
}

uint64_t WebCore::DisplayList::Recorder::didUpdateState(uint64_t this, WebCore::GraphicsContextState *a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(this + 732);
  if (v2)
  {
    v4 = *(_QWORD *)(this + 720) + 760 * v2;
    this = WebCore::GraphicsContextState::mergeLastChanges(v4 - 760, a2, (uint64_t *)(v4 - 352));
    *((_DWORD *)a2 + 44) = 0;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::GraphicsContextState::mergeLastChanges(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  int v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  float v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _BOOL4 v35;
  int v36;
  int v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  float v43;
  int v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t *v51;
  unsigned int v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  _BOOL4 v75;
  unint64_t v76;
  int v77;
  int v78;
  _BOOL4 v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91[2];
  int *v92;
  uint64_t *v93;
  int v94;
  __int128 v95;
  __int128 v96;

  v3 = *((_DWORD *)a2 + 44);
  if (v3)
  {
    v6 = result;
    do
    {
      while (1)
      {
        v7 = v3 & -v3;
        v94 = v7;
        v91[0] = v6;
        v91[1] = (uint64_t)a2;
        v92 = &v94;
        v93 = a3;
        if ((v7 & 1) != 0)
          break;
        v8 = -1;
        v9 = v3 & -v3;
        do
        {
          ++v8;
          v10 = v9 & 2;
          v9 >>= 1;
        }
        while (v8 <= 0x1E && v10 == 0);
        switch(v8)
        {
          case 0u:
            v54 = *((unsigned __int8 *)a2 + 184);
            if ((*(_BYTE *)(v6 + 184) == 0) != (*((_BYTE *)a2 + 184) != 0))
              goto LABEL_12;
            *(_BYTE *)(v6 + 184) = v54;
            if (!*((_BYTE *)a3 + 344))
              goto LABEL_88;
            v55 = v54 != 0;
            v42 = *(_DWORD *)(v6 + 176);
            if (v55 == (*((_BYTE *)a3 + 184) != 0))
              goto LABEL_77;
            goto LABEL_89;
          case 1u:
            v13 = *(_QWORD *)(v6 + 88);
            v14 = a2[11];
            if ((v13 & 0x8000000000000) != 0)
            {
              if ((v14 & 0x8000000000000) == 0)
                goto LABEL_17;
              v96 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
              v95 = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 4);
              result = WebCore::operator==<float,4ul>((float *)&v96, (float *)&v95);
              if (!(_DWORD)result)
                goto LABEL_17;
              v71 = *(_QWORD *)(v6 + 88);
              v72 = a2[11];
              if (HIBYTE(v71) != HIBYTE(v72) || BYTE6(v71) != BYTE6(v72))
                goto LABEL_17;
            }
            else if (v13 != v14 || (v14 & 0x8000000000000) != 0)
            {
              goto LABEL_17;
            }
            v73 = *(_DWORD *)(v6 + 168);
            v74 = *((_DWORD *)a2 + 42);
            v75 = v74 == v73;
            if (v74 == -1)
              v75 = 0;
            if (v73 == -1)
              v75 = v74 == -1;
            if (v75)
            {
              if (v73 == 2)
              {
                if (v74 == 2)
                {
                  if (*(_QWORD *)(v6 + 104) != a2[13])
                    goto LABEL_17;
                  goto LABEL_12;
                }
                goto LABEL_202;
              }
              if (v73 != 1)
                goto LABEL_12;
              if (v74 != 1)
                goto LABEL_202;
              result = WebCore::operator==(v6 + 104, (uint64_t)(a2 + 13));
              if ((result & 1) == 0)
                goto LABEL_17;
LABEL_12:
              v3 &= v3 - 1;
              if (!v3)
                return result;
            }
            else
            {
LABEL_17:
              v15 = *(_QWORD *)(v6 + 88);
              v16 = a2[11];
              if ((v15 & 0x8000000000000) != 0)
              {
                if ((v16 & 0x8000000000000) != 0)
                {
                  v96 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
                  v95 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
                  result = WebCore::operator==<float,4ul>((float *)&v96, (float *)&v95);
                  v15 = *(_QWORD *)(v6 + 88);
                  if ((_DWORD)result)
                  {
                    v76 = a2[11];
                    if (HIBYTE(v15) == HIBYTE(v76) && BYTE6(v15) == BYTE6(v76))
                      goto LABEL_20;
                  }
                }
              }
              else if (v15 == v16 && (v16 & 0x8000000000000) == 0)
              {
                goto LABEL_20;
              }
              if ((v15 & 0x8000000000000) != 0)
              {
                result = v15 & 0xFFFFFFFFFFFFLL;
                do
                {
                  v65 = __ldaxr((unsigned int *)result);
                  v66 = v65 - 1;
                }
                while (__stlxr(v66, (unsigned int *)result));
                if (!v66)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, a2);
                }
              }
              v31 = a2[11];
              *(_QWORD *)(v6 + 88) = v31;
              if ((v31 & 0x8000000000000) != 0)
              {
                v57 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 + 1, v57));
              }
LABEL_20:
              v17 = *(unsigned int *)(v6 + 168);
              v18 = *((unsigned int *)a2 + 42);
              if ((_DWORD)v17 == -1)
              {
                if ((_DWORD)v18 != -1)
                {
LABEL_22:
                  *(_QWORD *)&v96 = v6 + 104;
                  result = ((uint64_t (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v18])(&v96);
                }
              }
              else
              {
                if ((_DWORD)v18 != -1)
                  goto LABEL_22;
                result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v17])(&v96, v6 + 104);
                *(_DWORD *)(v6 + 168) = -1;
              }
              v19 = v94;
              if (!*((_BYTE *)a3 + 344))
                goto LABEL_41;
              v20 = a3[11];
              v21 = *(_QWORD *)(v6 + 88);
              if ((v20 & 0x8000000000000) != 0)
              {
                if ((v21 & 0x8000000000000) == 0)
                  goto LABEL_41;
                v96 = *(_OWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 4);
                v95 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
                result = WebCore::operator==<float,4ul>((float *)&v96, (float *)&v95);
                if (!(_DWORD)result)
                  goto LABEL_41;
                v80 = a3[11];
                v81 = *(_QWORD *)(v6 + 88);
                if (HIBYTE(v80) != HIBYTE(v81) || BYTE6(v80) != BYTE6(v81))
                  goto LABEL_41;
              }
              else if (v20 != v21 || (v21 & 0x8000000000000) != 0)
              {
                goto LABEL_41;
              }
              v33 = *((_DWORD *)a3 + 42);
              v34 = *(_DWORD *)(v6 + 168);
              v35 = v34 == v33;
              if (v34 == -1)
                v35 = 0;
              if (v33 == -1)
                v35 = v34 == -1;
              if (!v35)
                goto LABEL_41;
              if (v33 == 2)
              {
                if (v34 == 2)
                {
                  v69 = a3[13];
                  v70 = *(_QWORD *)(v6 + 104);
                  goto LABEL_155;
                }
                goto LABEL_202;
              }
              if (v33 == 1)
              {
                if (v34 != 1)
                  goto LABEL_202;
                v40 = v6 + 104;
                v41 = (uint64_t)(a3 + 13);
LABEL_159:
                result = WebCore::operator==(v41, v40);
                if ((result & 1) != 0)
                  goto LABEL_62;
                goto LABEL_41;
              }
LABEL_62:
              v36 = *(_DWORD *)(v6 + 176) & ~v19;
LABEL_90:
              *(_DWORD *)(v6 + 176) = v36;
              v3 &= v3 - 1;
              if (!v3)
                return result;
            }
            break;
          case 2u:
            v12 = *((float *)a2 + 45);
            if (*(float *)(v6 + 180) == v12)
              goto LABEL_12;
            *(float *)(v6 + 180) = v12;
            if (*((_BYTE *)a3 + 344) && *((float *)a3 + 45) == v12)
              goto LABEL_76;
            *(_DWORD *)(v6 + 176) |= v7;
            v3 &= v3 - 1;
            if (v3)
              continue;
            return result;
          case 3u:
            v44 = *((unsigned __int8 *)a2 + 185);
            if (*(unsigned __int8 *)(v6 + 185) == v44)
              goto LABEL_12;
            *(_BYTE *)(v6 + 185) = v44;
            if (!*((_BYTE *)a3 + 344))
              goto LABEL_88;
            v45 = *((unsigned __int8 *)a3 + 185);
            goto LABEL_87;
          case 4u:
            if (*(unsigned __int8 *)(v6 + 186) == *((unsigned __int8 *)a2 + 186)
              && *(unsigned __int8 *)(v6 + 187) == *((unsigned __int8 *)a2 + 187))
            {
              goto LABEL_12;
            }
            v53 = *((unsigned __int16 *)a2 + 93);
            *(_WORD *)(v6 + 186) = v53;
            if (!*((_BYTE *)a3 + 344))
              goto LABEL_88;
            v42 = *(_DWORD *)(v6 + 176);
            if (*((unsigned __int8 *)a3 + 186) == v53 && *((unsigned __int8 *)a3 + 187) == v53 >> 8)
              goto LABEL_77;
            goto LABEL_89;
          case 5u:
            v46 = (_QWORD *)(v6 + 192);
            v90 = a2 + 24;
            result = std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(v6 + 192, (uint64_t)(a2 + 24));
            if ((result & 1) != 0)
              goto LABEL_12;
            if (*(unsigned __int8 *)(v6 + 224) == *((unsigned __int8 *)a2 + 224))
            {
              if (*(_BYTE *)(v6 + 224))
              {
                v47 = *v90;
                *(_DWORD *)(v6 + 200) = *((_DWORD *)a2 + 50);
                *v46 = v47;
                v48 = *(_QWORD *)(v6 + 208);
                v49 = a2[26];
                if ((v48 & 0x8000000000000) != 0)
                {
                  if ((v49 & 0x8000000000000) == 0)
                    goto LABEL_226;
                  v96 = *(_OWORD *)((v48 & 0xFFFFFFFFFFFFLL) + 4);
                  v95 = *(_OWORD *)((v49 & 0xFFFFFFFFFFFFLL) + 4);
                  result = WebCore::operator==<float,4ul>((float *)&v96, (float *)&v95);
                  v48 = *(_QWORD *)(v6 + 208);
                  if (!(_DWORD)result)
                    goto LABEL_226;
                  v84 = a2[26];
                  if (HIBYTE(v48) != HIBYTE(v84) || BYTE6(v48) != BYTE6(v84))
                    goto LABEL_226;
                }
                else
                {
                  if (v48 == v49 && (v49 & 0x8000000000000) == 0)
                    goto LABEL_107;
LABEL_226:
                  if ((v48 & 0x8000000000000) != 0)
                  {
                    result = v48 & 0xFFFFFFFFFFFFLL;
                    do
                    {
                      v88 = __ldaxr((unsigned int *)result);
                      v89 = v88 - 1;
                    }
                    while (__stlxr(v89, (unsigned int *)result));
                    if (!v89)
                    {
                      atomic_store(1u, (unsigned int *)result);
                      result = WTF::fastFree((WTF *)result, a2);
                    }
                  }
                  v85 = a2[26];
                  *(_QWORD *)(v6 + 208) = v85;
                  if ((v85 & 0x8000000000000) != 0)
                  {
                    v86 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
                    do
                      v87 = __ldaxr(v86);
                    while (__stlxr(v87 + 1, v86));
                  }
                }
LABEL_107:
                *(_QWORD *)(v6 + 216) = a2[27];
              }
LABEL_108:
              v50 = &v94;
              v51 = a3;
              goto LABEL_109;
            }
            if (!*(_BYTE *)(v6 + 224))
            {
              v61 = *v90;
              *(_DWORD *)(v6 + 200) = *((_DWORD *)a2 + 50);
              *v46 = v61;
              v62 = a2[26];
              *(_QWORD *)(v6 + 208) = v62;
              if ((v62 & 0x8000000000000) != 0)
              {
                v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 + 1, v63));
              }
              *(_QWORD *)(v6 + 216) = a2[27];
              *(_BYTE *)(v6 + 224) = 1;
              goto LABEL_108;
            }
            v56 = *(_QWORD *)(v6 + 208);
            if ((v56 & 0x8000000000000) != 0)
            {
              result = v56 & 0xFFFFFFFFFFFFLL;
              do
              {
                v82 = __ldaxr((unsigned int *)result);
                v83 = v82 - 1;
              }
              while (__stlxr(v83, (unsigned int *)result));
              if (!v83)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, a2);
              }
            }
            *(_BYTE *)(v6 + 224) = 0;
            v50 = v92;
            v51 = v93;
LABEL_109:
            v19 = *v50;
            if (*((_BYTE *)v51 + 344))
            {
              result = std::operator!=[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>((uint64_t)(v51 + 24), v6 + 192);
              if (!(_DWORD)result)
                goto LABEL_62;
            }
            v36 = *(_DWORD *)(v6 + 176) | v19;
            goto LABEL_90;
          case 6u:
            result = WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<std::optional<std::variant<WebCore::GraphicsDropShadow,WebCore::GraphicsGaussianBlur,WebCore::GraphicsColorMatrix>>>((uint64_t)v91);
            goto LABEL_12;
          case 7u:
            v43 = *((float *)a2 + 82);
            if (*(float *)(v6 + 328) == v43)
              goto LABEL_12;
            *(float *)(v6 + 328) = v43;
            if (*((_BYTE *)a3 + 344) && *((float *)a3 + 82) == v43)
              goto LABEL_76;
            goto LABEL_88;
          case 8u:
            result = (uint64_t)WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<WTF::OptionSet<WebCore::TextDrawingMode>>(v91);
            goto LABEL_12;
          case 9u:
            v44 = *((unsigned __int8 *)a2 + 332);
            if (*(unsigned __int8 *)(v6 + 332) == v44)
              goto LABEL_12;
            *(_BYTE *)(v6 + 332) = v44;
            if (!*((_BYTE *)a3 + 344))
              goto LABEL_88;
            v45 = *((unsigned __int8 *)a3 + 332);
            goto LABEL_87;
          case 0xAu:
            v44 = *((unsigned __int8 *)a2 + 334);
            if (*(unsigned __int8 *)(v6 + 334) == v44)
              goto LABEL_12;
            *(_BYTE *)(v6 + 334) = v44;
            if (!*((_BYTE *)a3 + 344))
              goto LABEL_88;
            v45 = *((unsigned __int8 *)a3 + 334);
            goto LABEL_87;
          case 0xBu:
            result = (uint64_t)WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<BOOL>(v91, 335);
            goto LABEL_12;
          case 0xCu:
            v44 = *((unsigned __int8 *)a2 + 336);
            if (*(unsigned __int8 *)(v6 + 336) == v44)
              goto LABEL_12;
            *(_BYTE *)(v6 + 336) = v44;
            if (!*((_BYTE *)a3 + 344))
              goto LABEL_88;
            v45 = *((unsigned __int8 *)a3 + 336);
            goto LABEL_87;
          case 0xDu:
            v44 = *((unsigned __int8 *)a2 + 337);
            if (*(unsigned __int8 *)(v6 + 337) == v44)
              goto LABEL_12;
            *(_BYTE *)(v6 + 337) = v44;
            if (!*((_BYTE *)a3 + 344))
              goto LABEL_88;
            v45 = *((unsigned __int8 *)a3 + 337);
LABEL_87:
            if (v45 == v44)
            {
LABEL_76:
              v42 = *(_DWORD *)(v6 + 176);
LABEL_77:
              v36 = v42 & ~v7;
            }
            else
            {
LABEL_88:
              v42 = *(_DWORD *)(v6 + 176);
LABEL_89:
              v36 = v42 | v7;
            }
            goto LABEL_90;
          case 0xEu:
            result = (uint64_t)WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<BOOL>(v91, 338);
            goto LABEL_12;
          case 0xFu:
            result = (uint64_t)WebCore::GraphicsContextState::mergeLastChanges(WebCore::GraphicsContextState const&,std::optional<WebCore::GraphicsContextState> const&)::$_0::operator()<BOOL>(v91, 339);
            goto LABEL_12;
          default:
            __break(0xC471u);
            JUMPOUT(0x1941A976CLL);
        }
      }
      v22 = *(_QWORD *)v6;
      v23 = *a2;
      if ((*(_QWORD *)v6 & 0x8000000000000) != 0)
      {
        if ((v23 & 0x8000000000000) == 0)
          goto LABEL_32;
        v96 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4);
        v95 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v96, (float *)&v95);
        if (!(_DWORD)result
          || HIBYTE(*(_QWORD *)v6) != HIBYTE(*a2)
          || BYTE6(*(_QWORD *)v6) != BYTE6(*a2))
        {
          goto LABEL_32;
        }
      }
      else if (v22 != v23 || (v23 & 0x8000000000000) != 0)
      {
        goto LABEL_32;
      }
      v77 = *(_DWORD *)(v6 + 80);
      v78 = *((_DWORD *)a2 + 20);
      v79 = v78 == v77;
      if (v78 == -1)
        v79 = 0;
      if (v77 == -1)
        v79 = v78 == -1;
      if (v79)
      {
        if (v77 == 2)
        {
          if (v78 != 2)
            goto LABEL_202;
          if (*(_QWORD *)(v6 + 16) == a2[2])
            goto LABEL_12;
        }
        else
        {
          if (v77 != 1)
            goto LABEL_12;
          if (v78 != 1)
            goto LABEL_202;
          result = WebCore::operator==(v6 + 16, (uint64_t)(a2 + 2));
          if ((result & 1) != 0)
            goto LABEL_12;
        }
      }
LABEL_32:
      v25 = *(_QWORD *)v6;
      v26 = *a2;
      if ((*(_QWORD *)v6 & 0x8000000000000) == 0)
      {
        if (v25 == v26 && (v26 & 0x8000000000000) == 0)
          goto LABEL_35;
        goto LABEL_49;
      }
      while (2)
      {
        if ((v26 & 0x8000000000000) != 0)
        {
          v96 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
          v95 = *(_OWORD *)((v26 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)&v96, (float *)&v95);
          v25 = *(_QWORD *)v6;
          if ((_DWORD)result)
          {
            if (HIBYTE(v25) == HIBYTE(*a2) && BYTE6(v25) == BYTE6(*a2))
              goto LABEL_35;
          }
        }
LABEL_49:
        if ((v25 & 0x8000000000000) != 0)
        {
          result = v25 & 0xFFFFFFFFFFFFLL;
          do
          {
            v67 = __ldaxr((unsigned int *)result);
            v68 = v67 - 1;
          }
          while (__stlxr(v68, (unsigned int *)result));
          if (!v68)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
          }
        }
        v32 = *a2;
        *(_QWORD *)v6 = *a2;
        if ((v32 & 0x8000000000000) != 0)
        {
          v59 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
        }
LABEL_35:
        v27 = *(unsigned int *)(v6 + 80);
        v28 = *((unsigned int *)a2 + 20);
        if ((_DWORD)v27 == -1)
        {
          if ((_DWORD)v28 != -1)
          {
LABEL_37:
            *(_QWORD *)&v96 = v6 + 16;
            result = ((uint64_t (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v28])(&v96);
          }
        }
        else
        {
          if ((_DWORD)v28 != -1)
            goto LABEL_37;
          result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v27])(&v96, v6 + 16);
          *(_DWORD *)(v6 + 80) = -1;
        }
        v19 = v94;
        if (!*((_BYTE *)a3 + 344))
          goto LABEL_41;
        v29 = *a3;
        v30 = *(_QWORD *)v6;
        if ((*a3 & 0x8000000000000) != 0)
        {
          if ((v30 & 0x8000000000000) == 0)
            goto LABEL_41;
          v96 = *(_OWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 4);
          v95 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)&v96, (float *)&v95);
          if (!(_DWORD)result
            || HIBYTE(*a3) != HIBYTE(*(_QWORD *)v6)
            || BYTE6(*a3) != BYTE6(*(_QWORD *)v6))
          {
            goto LABEL_41;
          }
        }
        else if (v29 != v30 || (v30 & 0x8000000000000) != 0)
        {
          goto LABEL_41;
        }
        v37 = *((_DWORD *)a3 + 20);
        v38 = *(_DWORD *)(v6 + 80);
        v39 = v38 == v37;
        if (v38 == -1)
          v39 = 0;
        if (v37 == -1)
          v39 = v38 == -1;
        if (!v39)
          goto LABEL_41;
        if (v37 != 2)
        {
          if (v37 != 1)
            goto LABEL_62;
          if (v38 == 1)
          {
            v40 = v6 + 16;
            v41 = (uint64_t)(a3 + 2);
            goto LABEL_159;
          }
LABEL_202:
          result = std::__throw_bad_variant_access[abi:sn180100]();
          continue;
        }
        break;
      }
      if (v38 != 2)
        goto LABEL_202;
      v69 = a3[2];
      v70 = *(_QWORD *)(v6 + 16);
LABEL_155:
      if (v69 == v70)
        goto LABEL_62;
LABEL_41:
      *(_DWORD *)(v6 + 176) |= v19;
      v3 &= v3 - 1;
    }
    while (v3);
  }
  return result;
}

uint64_t WebCore::GraphicsContextState::setDropShadow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;

  v4 = a1 + 192;
  result = std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(a1 + 192, a2);
  if ((result & 1) == 0)
  {
    if (*(unsigned __int8 *)(a1 + 224) != *(unsigned __int8 *)(a2 + 32))
    {
      if (*(_BYTE *)(a1 + 224))
      {
        v10 = *(_QWORD *)(a1 + 208);
        if ((v10 & 0x8000000000000) != 0)
        {
          result = v10 & 0xFFFFFFFFFFFFLL;
          do
          {
            v15 = __ldaxr((unsigned int *)result);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, (unsigned int *)result));
          if (!v16)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v6);
          }
        }
        *(_BYTE *)(a1 + 224) = 0;
      }
      else
      {
        v11 = *(_QWORD *)a2;
        *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
        *(_QWORD *)v4 = v11;
        v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 208) = v12;
        if ((v12 & 0x8000000000000) != 0)
        {
          v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
        }
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 24);
        *(_BYTE *)(a1 + 224) = 1;
      }
      goto LABEL_11;
    }
    if (!*(_BYTE *)(a1 + 224))
    {
LABEL_11:
      *(_DWORD *)(a1 + 176) |= 0x40u;
      return result;
    }
    v7 = *(_QWORD *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v4 = v7;
    v8 = *(_QWORD *)(a1 + 208);
    v9 = *(_QWORD *)(a2 + 16);
    if ((v8 & 0x8000000000000) != 0)
    {
      if ((v9 & 0x8000000000000) != 0)
      {
        v24 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
        v23 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v24, (float *)&v23);
        v8 = *(_QWORD *)(a1 + 208);
        if ((_DWORD)result)
        {
          v17 = *(_QWORD *)(a2 + 16);
          if (HIBYTE(v8) == HIBYTE(v17) && BYTE6(v8) == BYTE6(v17))
            goto LABEL_7;
        }
      }
    }
    else if (v8 == v9 && (v9 & 0x8000000000000) == 0)
    {
LABEL_7:
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 24);
      goto LABEL_11;
    }
    if ((v8 & 0x8000000000000) != 0)
    {
      result = v8 & 0xFFFFFFFFFFFFLL;
      do
      {
        v21 = __ldaxr((unsigned int *)result);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)result));
      if (!v22)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v6);
      }
    }
    v18 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 208) = v18;
    if ((v18 & 0x8000000000000) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    goto LABEL_7;
  }
  return result;
}

_BYTE *WebCore::ResourceRequestBase::httpUserAgent@<X0>(WebCore::ResourceRequestBase *this@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::ResourceRequestBase::httpHeaderField(this, 86, a2);
}

uint64_t WebCore::FrameLoader::loadType(WebCore::FrameLoader *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t *WebCore::JSPerformanceObserver::destroy(WebCore::JSPerformanceObserver *this, JSC::JSCell *a2)
{
  return WTF::Ref<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>::~Ref((uint64_t *)this + 3, a2);
}

uint64_t WebCore::JSCSSStyleDeclaration::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return WebCore::JSCSSStyleDeclaration::legacyPlatformObjectGetOwnProperty(a1, a2, a3, a4);
}

uint64_t WebCore::JSDOMStringMap::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, __n128 a5)
{
  return WebCore::JSDOMStringMap::legacyPlatformObjectGetOwnProperty(a1, a2, a3, a4, 0, a5);
}

uint64_t WebCore::Settings::setLayoutViewportHeightExpansionFactor(uint64_t this, double a2)
{
  uint64_t v2;

  if (*(double *)(this + 432) != a2)
  {
    *(double *)(this + 432) = a2;
    v2 = *(_QWORD *)(this + 8);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setMinimumLogicalFontSize(uint64_t this, double a2)
{
  uint64_t v2;

  if (*(double *)(this + 504) != a2)
  {
    *(double *)(this + 504) = a2;
    v2 = *(_QWORD *)(this + 8);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setDefaultFixedFontSize(uint64_t this, double a2)
{
  uint64_t v2;

  if (*(double *)(this + 328) != a2)
  {
    *(double *)(this + 328) = a2;
    v2 = *(_QWORD *)(this + 8);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setMinimumFontSize(uint64_t this, double a2)
{
  uint64_t v2;

  if (*(double *)(this + 496) != a2)
  {
    *(double *)(this + 496) = a2;
    v2 = *(_QWORD *)(this + 8);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::Settings::setDefaultFontSize(uint64_t this, double a2)
{
  uint64_t v2;

  if (*(double *)(this + 336) != a2)
  {
    *(double *)(this + 336) = a2;
    v2 = *(_QWORD *)(this + 8);
    if (v2)
    {
      this = *(_QWORD *)(v2 + 8);
      if (this)
        return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
    }
  }
  return this;
}

uint64_t WebCore::NativeImage::size(WebCore::NativeImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
}

void WebCore::ScriptExecutionContext::didChangeTimerAlignmentInterval(WebCore::ScriptExecutionContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)this + 104))(this);
  v3 = *((_QWORD *)this + 17);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
    goto LABEL_20;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = v3 + 16 * v4;
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = v3 + 16 * v4;
LABEL_20:
    v5 = v3 + 16 * v4;
    goto LABEL_8;
  }
  v6 = v3;
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = v3;
    while ((*(_DWORD *)v6 + 1) <= 1)
    {
      v6 += 16;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  if (v3)
    v8 = v3 + 16 * *(unsigned int *)(v3 - 4);
  else
    v8 = 0;
  while (v6 != v8)
  {
    WebCore::EventLoopTimerHandle::EventLoopTimerHandle(&v11, (uint64_t *)(*(_QWORD *)(v6 + 8) + 48));
    WebCore::EventLoopTaskGroup::didChangeTimerAlignmentInterval(v2, &v11);
    WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v11, v9);
    v10 = v6 + 16;
    v6 = v5;
    if (v10 != v5)
    {
      v6 = v10;
      while ((*(_DWORD *)v6 + 1) <= 1)
      {
        v6 += 16;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
}

void WebCore::EventLoopTimerHandle::~EventLoopTimerHandle(WebCore::EventLoopTimerHandle *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  void *v21;

  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 64);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (*(_DWORD *)(v3 + 48) == 1)
          {
            if (*(_BYTE *)(v3 + 88))
              WebCore::EventLoopTaskGroup::removeRepeatingTimer(v6, (_QWORD *)v3);
            else
              WebCore::EventLoopTaskGroup::removeScheduledTimer(v6, (_QWORD *)v3);
          }
        }
      }
    }
    if (*(_DWORD *)(v3 + 48) == 1)
    {
      v8 = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v9 = *(_QWORD *)(v3 + 56);
      if (v9)
      {
        *(_QWORD *)(v9 + 8) = 0;
        v10 = *(unsigned int **)(v3 + 56);
        *(_QWORD *)(v3 + 56) = 0;
        if (v10)
        {
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)(v3 + 56) = 0;
      }
      WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v3);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)(v3 + 48);
    }
    v7 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 48) == 1)
      {
        v15 = *(_QWORD *)(v7 + 64);
        *(_QWORD *)(v7 + 64) = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        v16 = *(_QWORD *)(v7 + 56);
        if (v16)
        {
          *(_QWORD *)(v16 + 8) = 0;
          v17 = *(unsigned int **)(v7 + 56);
          *(_QWORD *)(v7 + 56) = 0;
          if (v17)
          {
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
            {
              atomic_store(1u, v17);
              WTF::fastFree((WTF *)v17, a2);
            }
          }
        }
        else
        {
          *(_QWORD *)(v7 + 56) = 0;
        }
        WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v7);
        WTF::fastFree(v20, v21);
      }
      else
      {
        --*(_DWORD *)(v7 + 48);
      }
    }
  }
}

_QWORD *WebCore::EventLoopTimerHandle::EventLoopTimerHandle(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*a2)
    ++*(_DWORD *)(v2 + 48);
  *result = v2;
  return result;
}

uint64_t WebCore::EventLoopTaskGroup::didChangeTimerAlignmentInterval(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = *a2;
  if (*a2)
  {
    result = WebCore::TimerBase::setNextFireTime(result, *(double *)(result + 16));
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      result = *(_QWORD *)(v4 + 8);
      if (result)
      {
        v5 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = v5 + 1;
        *(_QWORD *)(result + 128) = 0x7FF8000000000000;
        if (v5)
          *(_DWORD *)(result + 8) = v5;
        else
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

WTF::MonotonicTime *WTF::Detail::CallableWrapper<WebCore::ThreadTimers::setSharedTimer(WebCore::SharedTimer *)::$_0,void>::call(WebCore *a1)
{
  WTF::MonotonicTime *result;
  uint64_t **v2;
  WTF::ApproximateTime *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  unint64_t StatusReg;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t hasValidHeapPosition;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  uint64_t **v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  double v54;
  __n128 v55;
  double v56;
  uint64_t v59;
  double v60;
  __n128 v61;
  double v62;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int **v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  double v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  bmalloc::api *v85;
  char v86;

  result = (WTF::MonotonicTime *)WebCore::threadGlobalData(a1);
  v2 = (uint64_t **)*((_QWORD *)result + 6);
  if (*((_BYTE *)v2 + 24))
    return result;
  *((_BYTE *)v2 + 24) = 1;
  v2[4] = 0;
  v3 = (WTF::ApproximateTime *)WTF::MonotonicTime::now(result);
  v5 = v4;
  result = (WTF::MonotonicTime *)WTF::ApproximateTime::now(v3);
  v8 = v7 + 0.016;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (*((_DWORD *)v2 + 3))
  {
    v10 = **v2;
    do
      v11 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v11 + 1, (unsigned int *)v10));
    v12 = *(_QWORD *)(v10 + 32);
    if (!v12)
    {
      result = (WTF::MonotonicTime *)WebCore::TimerBase::heapDeleteNullMin(v2);
      v21 = 2;
      goto LABEL_22;
    }
    if (*(double *)(v10 + 8) > v5)
    {
LABEL_27:
      v21 = 3;
      goto LABEL_22;
    }
    v13 = *(double *)(v12 + 24);
    v14 = 0.0;
    if (v13 != 0.0)
      v14 = v5 + v13;
    *(double *)&v15 = COERCE_DOUBLE(WTF::canCurrentThreadAccessThreadLocalData());
    if ((v15 & 1) == 0 && (webThreadStarted & 1) == 0)
    {
      *(double *)&v15 = COERCE_DOUBLE(WTF::linkedOnOrAfterSDKWithBehavior());
      if ((_DWORD)v15)
      {
        __break(0xC471u);
        JUMPOUT(0x1941AA810);
      }
    }
    if (*(double *)(v12 + 16) != v14)
      *(double *)(v12 + 16) = v14;
    v17 = *(_QWORD *)(v12 + 32);
    v18 = 0.0;
    if ((v17 & 0xFFFFFFFFFFFFLL) != 0)
      v18 = *(double *)((v17 & 0xFFFFFFFFFFFFLL) + 8);
    v19 = *(_QWORD *)(v12 + 8);
    if (v19)
    {
      if (v14 != 0.0)
      {
        v15 = *(uint64_t *)(v19 + 8);
        if (*(double *)&v15 != 0.0)
        {
          *(double *)&v15 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, unint64_t, double))(*(_QWORD *)v15 + 16))(v15, HIWORD(v17) & 1, v14));
          if ((_BYTE)v16)
            v14 = *(double *)&v15;
        }
      }
    }
    if (v18 != v14)
    {
      v24 = *(_QWORD *)(StatusReg + 736);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 96);
        if (v25)
          goto LABEL_30;
      }
      else
      {
        v24 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v15);
        v25 = *(_QWORD *)(v24 + 96);
        if (v25)
          goto LABEL_30;
      }
      v25 = WTF::fastMalloc((WTF *)0x60);
      *(_DWORD *)(v25 + 8) = 1;
      v46 = (unsigned int *)(v25 + 8);
      *(_QWORD *)v25 = off_1E31F4A70;
      v47 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v47 = 0;
      *(_QWORD *)(v25 + 16) = v47;
      *(_QWORD *)v25 = off_1E3407108;
      *(_BYTE *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0;
      *(_QWORD *)(v25 + 40) = 0;
      v48 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v48 + 28) = 0;
      *(_QWORD *)(v48 + 32) = 0;
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v48 + 16) = 0;
      *(_QWORD *)v48 = 0;
      *(_WORD *)(v48 + 24) = 0;
      if (WTF::isUIThread((WTF *)v48))
      {
        {
          WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
          qword_1ECE90CE8 = 0;
        }
        WebCore::ThreadTimers::setSharedTimer((uint64_t **)v48, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
      }
      *(_QWORD *)(v25 + 48) = v48;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_OWORD *)(v25 + 72) = 0u;
      *(_BYTE *)(v25 + 88) = 0;
      if (pthread_main_np())
      {
        WebCore::sharedMainThreadStaticData = v25;
        do
          v49 = __ldaxr(v46);
        while (__stlxr(v49 + 1, v46));
      }
      v50 = *(unsigned int **)(v24 + 96);
      *(_QWORD *)(v24 + 96) = v25;
      if (v50)
      {
        v51 = v50 + 2;
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v50 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
        }
      }
LABEL_30:
      v26 = *(_QWORD *)(v25 + 48);
      v27 = *(_DWORD *)(v26 + 28);
      *(_DWORD *)(v26 + 28) = v27 + 1;
      v28 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
      if (v28)
        goto LABEL_140;
      v65 = bmalloc::api::isoAllocate();
      *(_DWORD *)v65 = 1;
      *(double *)(v65 + 8) = v14;
      *(_DWORD *)(v65 + 16) = 0;
      *(_QWORD *)(v65 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v65) + 48);
      *(_QWORD *)(v65 + 32) = v12;
      *(_DWORD *)(v65 + 40) = -1;
      v66 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 32) = v66 & 0xFF000000000000 | v65;
      v67 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
      if ((v66 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          atomic_store(1u, v67);
          bmalloc::api::isoDeallocate((bmalloc::api *)v67, v16);
        }
      }
      v28 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
      if (v28)
      {
LABEL_140:
        do
          v29 = __ldaxr((unsigned int *)v28);
        while (__stlxr(v29 + 1, (unsigned int *)v28));
      }
      *(double *)(v28 + 8) = v14;
      *(_DWORD *)(v28 + 16) = v27;
      v30 = *(_DWORD *)(v28 + 40);
      v31 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
      if (!v31 || (v75 = *(double *)((*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL) + 8), v75 == 0.0))
      {
        if (v18 == 0.0)
          goto LABEL_35;
        hasValidHeapPosition = (uint64_t)WebCore::TimerBase::heapDelete((WebCore::TimerBase *)v12, v16);
      }
      else
      {
        hasValidHeapPosition = WebCore::TimerBase::hasValidHeapPosition((WebCore::TimerBase *)v12, v16);
        if ((hasValidHeapPosition & 1) == 0)
        {
          if (v18 != 0.0)
          {
            if (v75 >= v18)
            {
              v76 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
              if (v76)
              {
                do
                  v77 = __ldaxr((unsigned int *)v76);
                while (__stlxr(v77 + 1, (unsigned int *)v76));
              }
              v78 = *(_QWORD *)(v76 + 8);
              *(_QWORD *)(v76 + 8) = 0xFFF0000000000000;
              WebCore::TimerBase::heapDecreaseKey(v12, v16);
              v79 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
              if (v79)
              {
                do
                  v80 = __ldaxr((unsigned int *)v79);
                while (__stlxr(v80 + 1, (unsigned int *)v79));
              }
              std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v79 + 24), (void *)(**(_QWORD **)(v79 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v79 + 24) + 12)), (uint64_t)&v86, *(unsigned int *)(*(_QWORD *)(v79 + 24) + 12));
              do
              {
                v81 = __ldaxr((unsigned int *)v79);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, (unsigned int *)v79));
              if (!v82)
              {
                atomic_store(1u, (unsigned int *)v79);
                bmalloc::api::isoDeallocate((bmalloc::api *)v79, v16);
              }
              *(_QWORD *)(v76 + 8) = v78;
              do
              {
                v83 = __ldaxr((unsigned int *)v76);
                v84 = v83 - 1;
              }
              while (__stlxr(v84, (unsigned int *)v76));
              if (!v84)
              {
                atomic_store(1u, (unsigned int *)v76);
                bmalloc::api::isoDeallocate((bmalloc::api *)v76, v16);
              }
            }
            hasValidHeapPosition = WebCore::TimerBase::heapDecreaseKey(v12, v16);
            goto LABEL_45;
          }
          v31 = *(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
LABEL_35:
          if (v31)
          {
            do
              v33 = __ldaxr((unsigned int *)v31);
            while (__stlxr(v33 + 1, (unsigned int *)v31));
          }
          v85 = (bmalloc::api *)v31;
          v34 = *(uint64_t **)(v31 + 24);
          v35 = *((unsigned int *)v34 + 3);
          if ((_DWORD)v35 == *((_DWORD *)v34 + 2))
          {
            v70 = (unsigned int **)WTF::Vector<WTF::RefPtr<WebCore::ThreadTimerHeapItem,WTF::RawPtrTraits<WebCore::ThreadTimerHeapItem>,WTF::DefaultRefDerefTraits<WebCore::ThreadTimerHeapItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v31 + 24), v35 + 1, (unint64_t)&v85);
            v71 = *((unsigned int *)v34 + 3);
            v72 = *v34;
            v73 = *v70;
            if (*v70)
            {
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 + 1, v73));
              v38 = *((_DWORD *)v34 + 3);
            }
            else
            {
              v38 = *((_DWORD *)v34 + 3);
            }
            *(_QWORD *)(v72 + 8 * v71) = v73;
          }
          else
          {
            v36 = *v34;
            do
              v37 = __ldaxr((unsigned int *)v31);
            while (__stlxr(v37 + 1, (unsigned int *)v31));
            *(_QWORD *)(v36 + 8 * v35) = v31;
            v38 = *((_DWORD *)v34 + 3);
          }
          *((_DWORD *)v34 + 3) = v38 + 1;
          *((_DWORD *)v85 + 10) = v38;
          WebCore::TimerBase::heapDecreaseKey(v12, v16);
          hasValidHeapPosition = (uint64_t)v85;
          v85 = 0;
          if (hasValidHeapPosition)
          {
            do
            {
              v39 = __ldaxr((unsigned int *)hasValidHeapPosition);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, (unsigned int *)hasValidHeapPosition));
            if (!v40)
            {
              atomic_store(1u, (unsigned int *)hasValidHeapPosition);
              hasValidHeapPosition = bmalloc::api::isoDeallocate((bmalloc::api *)hasValidHeapPosition, v16);
            }
          }
        }
      }
LABEL_45:
      if (v30 && *(_DWORD *)(v28 + 40))
        goto LABEL_141;
      v41 = (unsigned int *)WebCore::threadGlobalData((WebCore *)hasValidHeapPosition);
      v42 = (uint64_t **)*((_QWORD *)v41 + 6);
      if (!v42[2])
        goto LABEL_141;
      while (1)
      {
        if (!*((_DWORD *)v42 + 3))
          goto LABEL_51;
        v43 = **v42;
        if (*(_QWORD *)(v43 + 32))
          break;
        v41 = WebCore::TimerBase::heapDeleteNullMin(v42);
      }
      if (*((_BYTE *)v42 + 24))
      {
LABEL_51:
        v42[4] = 0;
        (*(void (**)(uint64_t *))(*v42[2] + 32))(v42[2]);
        goto LABEL_52;
      }
      v54 = *(double *)(v43 + 8);
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v41);
      v56 = *((double *)v42 + 4);
      if (v56 == 0.0 || v56 > v55.n128_f64[0] || v55.n128_f64[0] < v54)
      {
        *((double *)v42 + 4) = v54;
        v55.n128_f64[0] = v54 - v55.n128_f64[0];
        if (v55.n128_f64[0] < 0.0)
          v55.n128_f64[0] = 0.0;
        (*(void (**)(uint64_t *, __n128))(*v42[2] + 24))(v42[2], v55);
      }
LABEL_52:
      if (v28)
      {
LABEL_141:
        do
        {
          v44 = __ldaxr((unsigned int *)v28);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, (unsigned int *)v28));
        if (!v45)
        {
          atomic_store(1u, (unsigned int *)v28);
          bmalloc::api::isoDeallocate((bmalloc::api *)v28, v16);
        }
      }
    }
    result = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 32) + 16))(*(_QWORD *)(v10 + 32));
    if (!*((_BYTE *)v2 + 24))
      goto LABEL_27;
    result = (WTF::MonotonicTime *)WTF::ApproximateTime::now(result);
    if (v8 < v20)
      goto LABEL_27;
    if (*((_BYTE *)v2 + 25))
      v21 = 3;
    else
      v21 = 0;
    do
    {
LABEL_22:
      v22 = __ldaxr((unsigned int *)v10);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v10));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v10);
      result = (WTF::MonotonicTime *)bmalloc::api::isoDeallocate((bmalloc::api *)v10, v6);
    }
    if (v21 == 3)
      break;
  }
  *((_WORD *)v2 + 12) = 0;
  if (v2[2])
  {
    while (1)
    {
      if (!*((_DWORD *)v2 + 3))
        goto LABEL_84;
      v59 = **v2;
      if (*(_QWORD *)(v59 + 32))
        break;
      result = (WTF::MonotonicTime *)WebCore::TimerBase::heapDeleteNullMin(v2);
    }
    if (*((_BYTE *)v2 + 24))
    {
LABEL_84:
      v2[4] = 0;
      return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t *))(*v2[2] + 32))(v2[2]);
    }
    v60 = *(double *)(v59 + 8);
    result = (WTF::MonotonicTime *)WTF::MonotonicTime::now(result);
    v62 = *((double *)v2 + 4);
    if (v62 == 0.0 || v62 > v61.n128_f64[0] || v61.n128_f64[0] < v60)
    {
      *((double *)v2 + 4) = v60;
      v61.n128_f64[0] = v60 - v61.n128_f64[0];
      if (v61.n128_f64[0] < 0.0)
        v61.n128_f64[0] = 0.0;
      return (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t *, __n128))(*v2[2] + 24))(v2[2], v61);
    }
  }
  return result;
}

uint64_t WebCore::TimerBase::setNextFireTime(uint64_t a1, double a2)
{
  uint64_t result;
  void *v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  double v21;
  __n128 v22;
  double v23;
  unsigned int *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int **v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  int v62;
  bmalloc::api *v63;
  char v64;

  result = WTF::canCurrentThreadAccessThreadLocalData();
  if ((result & 1) == 0 && (webThreadStarted & 1) == 0)
  {
    result = WTF::linkedOnOrAfterSDKWithBehavior();
    if ((_DWORD)result)
    {
      __break(0xC471u);
      JUMPOUT(0x1941AAD4CLL);
    }
  }
  if (*(double *)(a1 + 16) != a2)
    *(double *)(a1 + 16) = a2;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = 0.0;
  if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    v7 = *(double *)((v6 & 0xFFFFFFFFFFFFLL) + 8);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    if (a2 != 0.0)
    {
      result = *(_QWORD *)(v8 + 8);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t, double))(*(_QWORD *)result + 16))(result, HIWORD(v6) & 1, a2);
        if ((_BYTE)v5)
          a2 = *(double *)&result;
      }
    }
  }
  if (v7 == a2)
    return result;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 96);
    if (v10)
      goto LABEL_11;
  }
  else
  {
    v9 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)result);
    v10 = *(_QWORD *)(v9 + 96);
    if (v10)
      goto LABEL_11;
  }
  v10 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v10 + 8) = 1;
  v26 = (unsigned int *)(v10 + 8);
  *(_QWORD *)v10 = off_1E31F4A70;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v27 = 0;
  *(_QWORD *)(v10 + 16) = v27;
  *(_QWORD *)v10 = off_1E3407108;
  *(_BYTE *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v28 + 28) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)v28 = 0;
  *(_WORD *)(v28 + 24) = 0;
  if (WTF::isUIThread((WTF *)v28))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v28, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *(_QWORD *)(v10 + 48) = v28;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_BYTE *)(v10 + 88) = 0;
  if (pthread_main_np())
  {
    WebCore::sharedMainThreadStaticData = v10;
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 + 1, v26));
  }
  v30 = *(unsigned int **)(v9 + 96);
  *(_QWORD *)(v9 + 96) = v10;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
LABEL_11:
  v11 = *(_QWORD *)(v10 + 48);
  v12 = *(_DWORD *)(v11 + 28);
  *(_DWORD *)(v11 + 28) = v12 + 1;
  v13 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v13)
    goto LABEL_101;
  v34 = bmalloc::api::isoAllocate();
  *(_DWORD *)v34 = 1;
  *(double *)(v34 + 8) = a2;
  *(_DWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v34) + 48);
  *(_QWORD *)(v34 + 32) = a1;
  *(_DWORD *)(v34 + 40) = -1;
  v35 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v35 & 0xFF000000000000 | v34;
  v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
  if ((v35 & 0xFFFFFFFFFFFFLL) != 0)
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      bmalloc::api::isoDeallocate((bmalloc::api *)v36, v5);
    }
  }
  v13 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
LABEL_101:
    do
      v14 = __ldaxr((unsigned int *)v13);
    while (__stlxr(v14 + 1, (unsigned int *)v13));
  }
  *(double *)(v13 + 8) = a2;
  *(_DWORD *)(v13 + 16) = v12;
  v15 = *(_DWORD *)(v13 + 40);
  v16 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  if (!v16 || (v39 = *(double *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL) + 8), v39 == 0.0))
  {
    if (v7 == 0.0)
      goto LABEL_83;
    result = (uint64_t)WebCore::TimerBase::heapDelete((WebCore::TimerBase *)a1, v5);
  }
  else
  {
    result = WebCore::TimerBase::hasValidHeapPosition((WebCore::TimerBase *)a1, v5);
    if ((result & 1) == 0)
    {
      v62 = v15;
      if (v7 != 0.0)
      {
        if (v39 >= v7)
        {
          v40 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
          if (v40)
          {
            do
              v41 = __ldaxr((unsigned int *)v40);
            while (__stlxr(v41 + 1, (unsigned int *)v40));
          }
          v42 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0xFFF0000000000000;
          WebCore::TimerBase::heapDecreaseKey(a1, v5);
          v43 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
          if (v43)
          {
            do
              v44 = __ldaxr((unsigned int *)v43);
            while (__stlxr(v44 + 1, (unsigned int *)v43));
          }
          std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v43 + 24), (void *)(**(_QWORD **)(v43 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v43 + 24) + 12)), (uint64_t)&v64, *(unsigned int *)(*(_QWORD *)(v43 + 24) + 12));
          do
          {
            v45 = __ldaxr((unsigned int *)v43);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, (unsigned int *)v43));
          if (!v46)
          {
            atomic_store(1u, (unsigned int *)v43);
            bmalloc::api::isoDeallocate((bmalloc::api *)v43, v5);
          }
          *(_QWORD *)(v40 + 8) = v42;
          do
          {
            v47 = __ldaxr((unsigned int *)v40);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, (unsigned int *)v40));
          if (!v48)
          {
            atomic_store(1u, (unsigned int *)v40);
            bmalloc::api::isoDeallocate((bmalloc::api *)v40, v5);
          }
        }
        result = WebCore::TimerBase::heapDecreaseKey(a1, v5);
        v15 = v62;
        goto LABEL_16;
      }
      v16 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
LABEL_83:
      if (v16)
      {
        do
          v49 = __ldaxr((unsigned int *)v16);
        while (__stlxr(v49 + 1, (unsigned int *)v16));
      }
      v63 = (bmalloc::api *)v16;
      v50 = *(uint64_t **)(v16 + 24);
      v51 = *((unsigned int *)v50 + 3);
      if ((_DWORD)v51 == *((_DWORD *)v50 + 2))
      {
        v57 = (unsigned int **)WTF::Vector<WTF::RefPtr<WebCore::ThreadTimerHeapItem,WTF::RawPtrTraits<WebCore::ThreadTimerHeapItem>,WTF::DefaultRefDerefTraits<WebCore::ThreadTimerHeapItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v16 + 24), v51 + 1, (unint64_t)&v63);
        v58 = *((unsigned int *)v50 + 3);
        v59 = *v50;
        v60 = *v57;
        if (*v57)
        {
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 + 1, v60));
          v54 = *((_DWORD *)v50 + 3);
        }
        else
        {
          v54 = *((_DWORD *)v50 + 3);
        }
        *(_QWORD *)(v59 + 8 * v58) = v60;
      }
      else
      {
        v52 = *v50;
        do
          v53 = __ldaxr((unsigned int *)v16);
        while (__stlxr(v53 + 1, (unsigned int *)v16));
        *(_QWORD *)(v52 + 8 * v51) = v16;
        v54 = *((_DWORD *)v50 + 3);
      }
      *((_DWORD *)v50 + 3) = v54 + 1;
      *((_DWORD *)v63 + 10) = v54;
      WebCore::TimerBase::heapDecreaseKey(a1, v5);
      result = (uint64_t)v63;
      v63 = 0;
      if (result)
      {
        do
        {
          v55 = __ldaxr((unsigned int *)result);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, (unsigned int *)result));
        if (!v56)
        {
          atomic_store(1u, (unsigned int *)result);
          result = bmalloc::api::isoDeallocate((bmalloc::api *)result, v5);
        }
      }
    }
  }
LABEL_16:
  if (v15 && *(_DWORD *)(v13 + 40))
    goto LABEL_102;
  result = WebCore::threadGlobalData((WebCore *)result);
  v17 = *(uint64_t ***)(result + 48);
  if (!v17[2])
    goto LABEL_102;
  while (1)
  {
    if (!*((_DWORD *)v17 + 3))
      goto LABEL_22;
    v18 = **v17;
    if (*(_QWORD *)(v18 + 32))
      break;
    result = (uint64_t)WebCore::TimerBase::heapDeleteNullMin(v17);
  }
  if (*((_BYTE *)v17 + 24))
  {
LABEL_22:
    v17[4] = 0;
    result = (*(uint64_t (**)(uint64_t *))(*v17[2] + 32))(v17[2]);
    goto LABEL_23;
  }
  v21 = *(double *)(v18 + 8);
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
  v23 = *((double *)v17 + 4);
  if (v23 == 0.0 || v23 > v22.n128_f64[0] || v22.n128_f64[0] < v21)
  {
    *((double *)v17 + 4) = v21;
    v22.n128_f64[0] = v21 - v22.n128_f64[0];
    if (v22.n128_f64[0] < 0.0)
      v22.n128_f64[0] = 0.0;
    result = (*(uint64_t (**)(uint64_t *, __n128))(*v17[2] + 24))(v17[2], v22);
  }
LABEL_23:
  if (v13)
  {
LABEL_102:
    do
    {
      v19 = __ldaxr((unsigned int *)v13);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v13));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v13);
      return bmalloc::api::isoDeallocate((bmalloc::api *)v13, v5);
    }
  }
  return result;
}

uint64_t WebCore::threadGlobalData(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 96);
    if (v2)
      return v2;
  }
  else
  {
    v1 = WTF::Thread::initializeCurrentTLS(this);
    v2 = *(_QWORD *)(v1 + 96);
    if (v2)
      return v2;
  }
  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v2 + 8) = 1;
  v4 = (unsigned int *)(v2 + 8);
  *(_QWORD *)v2 = off_1E31F4A70;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = 0;
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v2 = off_1E3407108;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 28) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *(_WORD *)(v6 + 24) = 0;
  if (WTF::isUIThread((WTF *)v6))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v6, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *(_QWORD *)(v2 + 48) = v6;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_BYTE *)(v2 + 88) = 0;
  if (pthread_main_np())
  {
    WebCore::sharedMainThreadStaticData = v2;
    do
      v7 = __ldaxr(v4);
    while (__stlxr(v7 + 1, v4));
  }
  v8 = *(unsigned int **)(v1 + 96);
  *(_QWORD *)(v1 + 96) = v2;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return v2;
}

void WebCore::MainThreadSharedTimer::stop(WebCore::MainThreadSharedTimer *this)
{
  if ((_MergedGlobals_222 & 1) != 0)
  {
    if (qword_1ECE83BE8)
      CFRunLoopTimerSetNextFireDate((CFRunLoopTimerRef)qword_1ECE83BE8, 1.79769313e308);
  }
  else
  {
    qword_1ECE83BE8 = 0;
    _MergedGlobals_222 = 1;
  }
}

uint64_t WebCore::Timer::fired(WebCore::Timer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
}

uint64_t `non-virtual thunk to'WebCore::ScriptExecutionContext::alignedFireTime(uint64_t a1, double a2)
{
  WTF *v3;
  double v4;
  uint64_t result;
  long double v6;
  uint64_t v7;

  v4 = (*(double (**)(uint64_t))(*(_QWORD *)(a1 - 96) + 368))(a1 - 96);
  if (v4 == 0.0)
  {
    *(double *)&result = 0.0;
  }
  else
  {
    v6 = v4;
    {
      v7 = WebCore::ScriptExecutionContext::alignedFireTime(BOOL,WTF::MonotonicTime)const::randomizedProportion;
    }
    else
    {
      WTF::cryptographicallyRandomUnitInterval(v3);
      WebCore::ScriptExecutionContext::alignedFireTime(BOOL,WTF::MonotonicTime)const::randomizedProportion = v7;
    }
    *(double *)&result = v6 * *(double *)&v7 + v6 + a2 - v6 * *(double *)&v7 - fmod(a2 - v6 * *(double *)&v7, v6);
  }
  return result;
}

double WebCore::Document::domTimerAlignmentInterval(WebCore::Document *this, WTF::StringImpl *a2)
{
  double result;
  WebCore::SecurityContext *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  WebCore::SecurityOrigin *v10;
  WebCore::SecurityOrigin *v11;
  WTF::StringImpl *v12;
  const WebCore::SecurityOrigin *v13;
  double v15;

  result = 0.0;
  if ((_DWORD)a2)
  {
    v3 = (WebCore::Document *)((char *)this + 192);
    v4 = 1.0;
    if (!*((_BYTE *)this + 3411))
      v4 = 0.0;
    v15 = v4;
    v5 = *((_QWORD *)this + 66);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 24);
        if (v7)
        {
          v8 = *(double **)(v7 + 8);
          if (v8)
          {
            ++*(_DWORD *)v8;
            v9 = v4;
            if (v4 < v8[73])
              v9 = v8[73];
            v15 = v9;
            WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v8);
          }
        }
      }
    }
    WebCore::Document::topOrigin(this, a2);
    v11 = v10;
    WebCore::SecurityContext::securityOrigin(v3, v12);
    if ((WebCore::SecurityOrigin::isSameOriginDomain(v11, v13) & 1) == 0 && *((double *)this + 289) == 0.0)
    {
      result = v15;
      if (v15 < 0.03)
        return 0.03;
    }
    else
    {
      return v15;
    }
  }
  return result;
}

void WebCore::timerFired(WebCore *this, __CFRunLoopTimer *a2, void *a3)
{
  _BYTE v3[8];

  WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)v3);
  (*(void (**)(uint64_t))(*(_QWORD *)qword_1ECE90CE8 + 16))(qword_1ECE90CE8);
  WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)v3);
}

void WebCore::MainThreadSharedTimer::setFireInterval(double a1)
{
  double v1;
  CFRunLoopTimerRef v2;
  const void *v3;
  __CFRunLoop *Current;
  __CFRunLoopTimer *v5;
  WebCore *v6;

  v1 = a1 + CFAbsoluteTimeGetCurrent();
  if ((_MergedGlobals_222 & 1) != 0)
  {
    if (qword_1ECE83BE8)
    {
      CFRunLoopTimerSetNextFireDate((CFRunLoopTimerRef)qword_1ECE83BE8, v1);
      return;
    }
  }
  else
  {
    qword_1ECE83BE8 = 0;
    _MergedGlobals_222 = 1;
  }
  v2 = CFRunLoopTimerCreate(0, v1, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)WebCore::timerFired, 0);
  if ((_MergedGlobals_222 & 1) != 0)
  {
    v3 = (const void *)qword_1ECE83BE8;
    qword_1ECE83BE8 = (uint64_t)v2;
    if (v3)
      CFRelease(v3);
  }
  else
  {
    _MergedGlobals_222 = 1;
    qword_1ECE83BE8 = (uint64_t)v2;
  }
  if (webThreadStarted == 1)
    Current = (__CFRunLoop *)webThreadRunLoop;
  else
    Current = CFRunLoopGetCurrent();
  if (_MergedGlobals_222 == 1)
  {
    v5 = (__CFRunLoopTimer *)qword_1ECE83BE8;
  }
  else
  {
    v5 = 0;
    qword_1ECE83BE8 = 0;
    _MergedGlobals_222 = 1;
  }
  CFRunLoopAddTimer(Current, v5, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  WebCore::setupPowerObserver(v6);
}

uint64_t WebCore::EventLoopTimer::fired(WebCore::EventLoopTimer *this, void *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v2 = (char *)this + 48;
  ++*((_DWORD *)this + 12);
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 16);
    if (v5 && (v6 = *(uint64_t **)(v5 + 8)) != 0)
    {
      v7 = *v6;
      if (*v6)
        goto LABEL_29;
      v7 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = v6;
      v16 = (unsigned int *)*v6;
      *v6 = v7;
      if (!v16)
        goto LABEL_29;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v15);
      }
      v7 = *v6;
      if (*v6)
      {
LABEL_29:
        do
          v14 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v14 + 1, (unsigned int *)v7));
      }
    }
    else
    {
      v7 = 0;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8 && !*((_BYTE *)this + 88))
      {
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            ++*(_DWORD *)(v10 + 8);
            WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTimer>((unsigned int *)(v10 + 40), this);
            *(_QWORD *)(v10 + 128) = 0x7FF8000000000000;
            if (*(_DWORD *)(v10 + 8) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            else
              --*(_DWORD *)(v10 + 8);
          }
        }
        WTF::WeakHashSet<WebCore::EventLoopTimer,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::EventLoopTimer>((unsigned int *)(v8 + 24), this);
      }
      do
      {
        v11 = __ldaxr((unsigned int *)v7);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v7));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  return WTF::RefCounted<WebCore::EventLoopTimer>::deref((uint64_t)v2, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DOMTimer::DOMTimer(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WebCore::ScriptExecutionContext &)> &&,WTF::Seconds,WebCore::DOMTimer::Type)::$_0,void>::call(unsigned int *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::DOMTimer *v3;
  void *v4;
  WTF *v5;
  void *v6;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(WebCore::DOMTimer **)(v2 + 8);
    if (v3)
    {
      ++*((_DWORD *)v3 + 6);
      result = WebCore::DOMTimer::fired(v3, a2);
      if (*((_DWORD *)v3 + 6) == 1)
      {
        WebCore::DOMTimer::~DOMTimer(v3, v4);
        return (unsigned int *)WTF::fastFree(v5, v6);
      }
      else
      {
        --*((_DWORD *)v3 + 6);
      }
    }
  }
  return result;
}

unsigned int *WebCore::DOMTimer::fired(WebCore::DOMTimer *this, WTF::StringImpl *a2)
{
  WebCore::DOMTimer *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  void *v23;
  WebCore::UserGestureToken *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  void *v34;
  unsigned int *v35;
  uint64_t v36;
  void *v37;
  unsigned int *result;
  int v39;
  WTF *v40;
  void *v41;
  void *v42;
  WebCore::UserGestureToken *v43;
  WebCore::TimelineRecordFactory *v44;
  int v45;
  void *v47;
  WebCore::DOMTimer *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int j;
  uint64_t v61;
  int v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  int v73;
  void *v75;
  WTF *v76;
  uint64_t *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WebCore::DOMTimer **v89;
  WebCore::DOMTimer *v90;
  WTF *v91;
  void *v92;
  int v93;
  WTF *v94;
  void *v95;
  WTF *v96;
  void *v97;
  WTF *v98;
  void *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  WTF *v104;
  int v105;
  int v106;
  WTF *v107;
  void *v108;
  WTF *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  WebCore::DOMTimer **v116;
  WebCore::DOMTimer *v117;
  WTF *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  _QWORD *v124;
  _QWORD *v125;
  int v126;
  BOOL v127;
  int v128;
  _QWORD *v129;
  WebCore::DOMTimer *v130;
  uint64_t v131;
  WebCore::UserGestureToken *v132;
  unsigned int *v133;
  __int16 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;

  v2 = this;
  ++*((_DWORD *)this + 6);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      v5 = v4 - 96;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(unsigned __int8 *)(v5 + 274);
  if (!*(_BYTE *)(v5 + 274))
  {
    *(_DWORD *)(v5 - 168) += 4;
    if (*((_BYTE *)this + 76))
    {
      v7 = *(uint64_t **)(v5 + 2832);
      if (v7)
      {
        ++*((_DWORD *)v7 + 2);
        v8 = *((_QWORD *)this + 4);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 8))
          {
            v9 = *v7;
            if (v9)
            {
              v10 = *(_DWORD *)(v9 - 8);
              v11 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
              v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
              v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
              v14 = v10 & ((v13 >> 31) ^ v13);
              for (i = 1; ; ++i)
              {
                v16 = *(_QWORD *)(v9 + 8 * v14);
                if (v16 != -1)
                {
                  if (!v16)
                    goto LABEL_16;
                  if (v16 == v8)
                    break;
                }
                v14 = (v14 + i) & v10;
              }
              v26 = WebCore::Document::eventLoop((WebCore::Document *)(v5 - 192), a2);
              ++*(_DWORD *)(v26 + 8);
              v27 = *((_QWORD *)v2 + 4);
              if (v27)
                goto LABEL_222;
              v27 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v27 = 1;
              *(_QWORD *)(v27 + 8) = v2;
              v29 = (unsigned int *)*((_QWORD *)v2 + 4);
              *((_QWORD *)v2 + 4) = v27;
              if (!v29)
                goto LABEL_222;
              do
              {
                v30 = __ldaxr(v29);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, v29));
              if (!v31)
              {
                atomic_store(1u, v29);
                WTF::fastFree((WTF *)v29, v28);
              }
              v27 = *((_QWORD *)v2 + 4);
              if (v27)
              {
LABEL_222:
                do
                  v32 = __ldaxr((unsigned int *)v27);
                while (__stlxr(v32 + 1, (unsigned int *)v27));
              }
              v33 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v33 = &off_1E33FE568;
              *((_QWORD *)v33 + 1) = v27;
              v138 = v33;
              WebCore::EventLoopTaskGroup::scheduleTask(v26, 19, (uint64_t *)&v138, &v133, 0.0);
              v35 = v133;
              if (v133)
                ++v133[12];
              v36 = *((_QWORD *)v2 + 6);
              *((_QWORD *)v2 + 6) = v35;
              if (v36)
                WTF::RefCounted<WebCore::EventLoopTimer>::deref(v36 + 48, v34);
              WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v133, v34);
              result = v138;
              if (v138)
                result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v138 + 8))(v138);
              v39 = *(_DWORD *)(v26 + 8);
              if (!v39)
              {
                __break(0xC471u);
                JUMPOUT(0x1941AC054);
              }
              *(_DWORD *)(v26 + 8) = v39 - 1;
              if (*(_DWORD *)(v5 - 168) == 2)
              {
                if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
                  result = WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), v37);
              }
              else
              {
                *(_DWORD *)(v5 - 168) -= 2;
              }
              goto LABEL_141;
            }
          }
        }
      }
    }
LABEL_16:
    if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        this = (WebCore::DOMTimer *)WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), a2);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
    goto LABEL_18;
  }
  if (v6 == 1)
  {
    v126 = *(_DWORD *)(v5 + 312);
    *(_DWORD *)(v5 + 312) = v126 + 2;
    v127 = __CFADD__(v126, 1);
    v128 = v126 + 1;
    if (v127)
      this = (WebCore::DOMTimer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    else
      *(_DWORD *)(v5 + 312) = v128;
    goto LABEL_18;
  }
  if (v6 == 2)
  {
    *(_DWORD *)(v5 + 312) += 2;
    this = (WebCore::DOMTimer *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
LABEL_18:
    v6 = *(unsigned __int8 *)(v5 + 274);
  }
  v17 = *((_DWORD *)v2 + 11);
  if (v17 >= 9)
    v17 = 9;
  v18 = v17 + 1;
  if (v6)
  {
    if ((v6 - 1) <= 1)
      ++*(_DWORD *)(v5 + 312);
    v19 = 0;
    v20 = 0;
    v133 = (unsigned int *)v5;
    v134 = 0;
    v135 = 0;
  }
  else
  {
    *(_DWORD *)(v5 - 168) += 2;
    v133 = (unsigned int *)v5;
    v134 = 1;
    v135 = 0;
    v19 = *(_QWORD *)(v5 + 1096);
    v20 = WebCore::DOMTimerFireState::current;
    WebCore::DOMTimerFireState::current = (uint64_t)&v133;
  }
  v136 = v19;
  v137 = v20;
  *(_DWORD *)(v5 + 180) = v18;
  v21 = *((_QWORD *)v2 + 11);
  if (!v21)
    goto LABEL_28;
  v22 = *(double *)(v21 + 72) + 1.0;
  WTF::MonotonicTime::now(this);
  v24 = (WebCore::UserGestureToken *)*((_QWORD *)v2 + 11);
  if (v22 < v25)
  {
    *((_QWORD *)v2 + 11) = 0;
    if (!v24)
    {
LABEL_28:
      v24 = 0;
      goto LABEL_50;
    }
    if (*(_DWORD *)v24 != 1)
    {
      --*(_DWORD *)v24;
      goto LABEL_28;
    }
    WebCore::UserGestureToken::~UserGestureToken(v24, v23);
    WTF::fastFree(v40, v41);
    v24 = (WebCore::UserGestureToken *)*((_QWORD *)v2 + 11);
  }
  if (v24)
    ++*(_DWORD *)v24;
LABEL_50:
  v132 = v24;
  WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)&v138, (uint64_t *)&v132, 0, 0);
  v132 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v24, v42);
      WTF::fastFree(v94, v95);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  v43 = (WebCore::UserGestureToken *)*((_QWORD *)v2 + 11);
  *((_QWORD *)v2 + 11) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 1)
    {
      WebCore::UserGestureToken::~UserGestureToken(v43, v42);
      WTF::fastFree(v96, v97);
    }
    else
    {
      --*(_DWORD *)v43;
    }
  }
  v44 = (WebCore::TimelineRecordFactory *)*((unsigned int *)v2 + 10);
  v45 = *((unsigned __int8 *)v2 + 76);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v124 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v5, (WebCore::ScriptExecutionContext *)v42);
    if (v124)
      WebCore::InspectorInstrumentation::willFireTimerImpl(v124, v44, v45 != 0, v5);
  }
  if (!*((_BYTE *)v2 + 76))
  {
    v62 = *((_DWORD *)v2 + 11);
    if (v62 <= 9)
    {
      *((_DWORD *)v2 + 11) = v62 + 1;
      *((_BYTE *)v2 + 77) = v62 > 3;
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
      v65 = v63;
      ++*(_DWORD *)(v63 + 8);
      v66 = *((_QWORD *)v2 + 6);
      if (v66)
      {
        ++*(_DWORD *)(v66 + 48);
        v131 = v66;
        *(_QWORD *)(v66 + 32) = *(_QWORD *)(v66 + 32) & 0xFEFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int8 *)v2
                                                                                                + 77) << 48);
        v67 = *(_QWORD *)(v63 + 16);
        if (v67)
        {
          v68 = *(_QWORD *)(v67 + 8);
          if (v68)
          {
            v69 = *(_DWORD *)(v68 + 8);
            *(_DWORD *)(v68 + 8) = v69 + 1;
            *(_QWORD *)(v68 + 128) = 0x7FF8000000000000;
            if (v69)
              *(_DWORD *)(v68 + 8) = v69;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
          }
        }
      }
      else
      {
        v131 = 0;
      }
      WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v131, v64);
      v70 = *(_DWORD *)(v65 + 8);
      if (!v70)
      {
        __break(0xC471u);
        JUMPOUT(0x1941AC034);
      }
      *(_DWORD *)(v65 + 8) = v70 - 1;
      WebCore::DOMTimer::updateTimerIntervalIfNecessary(v2);
    }
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v2 + 7) + 16))(*((_QWORD *)v2 + 7), v5);
    v72 = *((unsigned int *)v2 + 10);
    v73 = *((unsigned __int8 *)v2 + 76);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v129 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v5, v71);
      if (v129)
        WebCore::InspectorInstrumentation::didFireTimerImpl(v129, v72, v73 != 0);
    }
    WebCore::DOMTimer::updateThrottlingStateIfNecessary(v2, (uint64_t *)&v133);
    v76 = (WTF *)*((_QWORD *)v2 + 12);
    *((_QWORD *)v2 + 12) = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 1)
      {
        v120 = *((_QWORD *)v76 + 1);
        if (v120)
        {
          v121 = *(_QWORD *)(v120 + 8);
          if (v121)
            --*(_QWORD *)(v121 + 24);
          *((_QWORD *)v76 + 1) = 0;
          do
          {
            v122 = __ldaxr((unsigned int *)v120);
            v123 = v122 - 1;
          }
          while (__stlxr(v123, (unsigned int *)v120));
          if (!v123)
          {
            atomic_store(1u, (unsigned int *)v120);
            WTF::fastFree((WTF *)v120, v75);
          }
        }
        else
        {
          *((_QWORD *)v76 + 1) = 0;
        }
        WTF::fastFree(v76, v75);
      }
      else
      {
        --*(_DWORD *)v76;
      }
    }
    goto LABEL_135;
  }
  WTF::HashMap<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::take(&v130, (uint64_t *)(v5 + 136), *((_DWORD *)v2 + 10));
  v48 = v130;
  v130 = 0;
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 1)
    {
      WebCore::DOMTimer::~DOMTimer(v48, v47);
      WTF::fastFree(v109, v110);
    }
    else
    {
      --*((_DWORD *)v48 + 6);
    }
  }
  v49 = *(unsigned __int8 *)(v5 + 274);
  if (*(_BYTE *)(v5 + 274))
  {
    v77 = 0;
    goto LABEL_110;
  }
  if ((byte_1ECE83858 & 1) == 0)
  {
    qword_1ECE83850 = 0;
    byte_1ECE83858 = 1;
    goto LABEL_64;
  }
  v50 = qword_1ECE83850;
  if (qword_1ECE83850)
  {
    qword_1ECE83850 = 0;
    v88 = *(unsigned int *)(v50 - 4);
    if ((_DWORD)v88)
    {
      v89 = (WebCore::DOMTimer **)(v50 + 8);
      do
      {
        if (*((_DWORD *)v89 - 2) != -1)
        {
          v90 = *v89;
          *v89 = 0;
          if (v90)
          {
            if (*((_DWORD *)v90 + 6) == 1)
            {
              WebCore::DOMTimer::~DOMTimer(v90, v47);
              WTF::fastFree(v91, v92);
            }
            else
            {
              --*((_DWORD *)v90 + 6);
            }
          }
        }
        v89 += 2;
        --v88;
      }
      while (v88);
    }
    WTF::fastFree((WTF *)(v50 - 16), v47);
    v93 = *(unsigned __int8 *)(v5 + 274);
    _MergedGlobals_209 = 1;
    v77 = &qword_1ECE83850;
    if (!v93)
      goto LABEL_65;
LABEL_110:
    v52 = 0;
    goto LABEL_87;
  }
LABEL_64:
  _MergedGlobals_209 = 1;
LABEL_65:
  v51 = WebCore::Document::contentChangeObserver((WebCore::Document *)(v5 - 192));
  v52 = v51;
  ++*(_DWORD *)(v51 + 80);
  v53 = *((_QWORD *)v2 + 4);
  if (v53)
  {
    if (*(_QWORD *)(v53 + 8))
    {
      v54 = *(_QWORD *)(v51 + 72);
      if (v54)
      {
        v55 = *(_DWORD *)(v54 - 8);
        v56 = (~(v53 << 32) + v53) ^ ((unint64_t)(~(v53 << 32) + v53) >> 22);
        v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
        v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
        v59 = v55 & ((v58 >> 31) ^ v58);
        for (j = 1; ; ++j)
        {
          v61 = *(_QWORD *)(v54 + 8 * v59);
          if (v61 != -1)
          {
            if (!v61)
              goto LABEL_86;
            if (v61 == v53)
              break;
          }
          v59 = (v59 + j) & v55;
        }
        *(_BYTE *)(v51 + 156) = 1;
      }
    }
  }
LABEL_86:
  v77 = &qword_1ECE83850;
LABEL_87:
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v2 + 7) + 16))(*((_QWORD *)v2 + 7), v5);
  v79 = *((unsigned int *)v2 + 10);
  v80 = *((unsigned __int8 *)v2 + 76);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v125 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v5, v78);
    if (v125)
      WebCore::InspectorInstrumentation::didFireTimerImpl(v125, v79, v80 != 0);
  }
  if (!v49)
  {
    v82 = *v77;
    if (*v77)
    {
      v83 = *(unsigned int *)(v82 - 4);
      v84 = v82 + 16 * v83;
      if (*(_DWORD *)(v82 - 12))
      {
        v85 = *v77;
        if ((_DWORD)v83)
        {
          v86 = 16 * v83;
          v85 = *v77;
          while ((*(_DWORD *)v85 + 1) <= 1)
          {
            v85 += 16;
            v86 -= 16;
            if (!v86)
            {
              v85 = v84;
              goto LABEL_98;
            }
          }
        }
        goto LABEL_98;
      }
      v85 = v82 + 16 * v83;
    }
    else
    {
      v85 = 0;
      v83 = 0;
    }
    v84 = v82 + 16 * v83;
LABEL_98:
    if (v82)
      v87 = v82 + 16 * *(unsigned int *)(v82 - 4);
    else
      v87 = 0;
    if (v87 != v85)
    {
      do
      {
        v100 = *(_QWORD *)(v85 + 8);
        v101 = *(_DWORD *)(v100 + 24) + 1;
        *(_DWORD *)(v100 + 24) = v101;
        if (*(_BYTE *)(v100 + 76))
        {
          WebCore::DOMTimer::updateThrottlingStateIfNecessary((WebCore::DOMTimer *)v100, (uint64_t *)&v133);
          v101 = *(_DWORD *)(v100 + 24);
        }
        v102 = v101 - 1;
        if (v102)
        {
          *(_DWORD *)(v100 + 24) = v102;
        }
        else
        {
          WebCore::DOMTimer::~DOMTimer((WebCore::DOMTimer *)v100, v78);
          WTF::fastFree(v98, v99);
        }
        v103 = v85 + 16;
        v85 = v84;
        if (v103 != v84)
        {
          v85 = v103;
          while ((*(_DWORD *)v85 + 1) <= 1)
          {
            v85 += 16;
            if (v85 == v84)
            {
              v85 = v84;
              break;
            }
          }
        }
      }
      while (v85 != v87);
      v82 = *v77;
    }
    _MergedGlobals_209 = 0;
    if (v82)
    {
      *v77 = 0;
      v115 = *(unsigned int *)(v82 - 4);
      if ((_DWORD)v115)
      {
        v116 = (WebCore::DOMTimer **)(v82 + 8);
        do
        {
          if (*((_DWORD *)v116 - 2) != -1)
          {
            v117 = *v116;
            *v116 = 0;
            if (v117)
            {
              if (*((_DWORD *)v117 + 6) == 1)
              {
                WebCore::DOMTimer::~DOMTimer(v117, v78);
                WTF::fastFree(v118, v119);
              }
              else
              {
                --*((_DWORD *)v117 + 6);
              }
            }
          }
          v116 += 2;
          --v115;
        }
        while (v115);
      }
      WTF::fastFree((WTF *)(v82 - 16), v78);
    }
  }
  v104 = (WTF *)*((_QWORD *)v2 + 12);
  *((_QWORD *)v2 + 12) = 0;
  if (!v104)
    goto LABEL_132;
  if (*(_DWORD *)v104 != 1)
  {
    --*(_DWORD *)v104;
LABEL_132:
    if (!v52)
      goto LABEL_135;
    goto LABEL_133;
  }
  v111 = *((_QWORD *)v104 + 1);
  if (v111)
  {
    v112 = *(_QWORD *)(v111 + 8);
    if (v112)
      --*(_QWORD *)(v112 + 24);
    *((_QWORD *)v104 + 1) = 0;
    do
    {
      v113 = __ldaxr((unsigned int *)v111);
      v114 = v113 - 1;
    }
    while (__stlxr(v114, (unsigned int *)v111));
    if (!v114)
    {
      atomic_store(1u, (unsigned int *)v111);
      WTF::fastFree((WTF *)v111, v78);
    }
  }
  else
  {
    *((_QWORD *)v104 + 1) = 0;
  }
  WTF::fastFree(v104, v78);
  if (v52)
  {
LABEL_133:
    if (*(_BYTE *)(v52 + 156))
    {
      *(_BYTE *)(v52 + 156) = 0;
      WTF::WeakHashSet<WebCore::DOMTimer const,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::DOMTimer>(v52 + 72, v2);
      WebCore::ContentChangeObserver::adjustObservedState(v52, (void *)8);
    }
  }
LABEL_135:
  WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)&v138);
  if ((_BYTE)v134)
    WebCore::DOMTimerFireState::current = v137;
  result = v133;
  v133[45] = 0;
  v133 = 0;
  v105 = *((unsigned __int8 *)result + 274);
  if (*((_BYTE *)result + 274))
  {
    if (v105 == 1)
    {
      if (result[78] == 1)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
      else
        --result[78];
    }
    else if (v105 == 2)
    {
      result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(result + 78);
    }
  }
  else if (*(result - 42) == 2)
  {
    if ((*((_WORD *)result - 81) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)(result - 48), v37);
  }
  else
  {
    *(result - 42) -= 2;
  }
  if (v5)
  {
LABEL_141:
    v106 = *(unsigned __int8 *)(v5 + 274);
    if (*(_BYTE *)(v5 + 274))
    {
      if (v106 == 1)
      {
        if (*(_DWORD *)(v5 + 312) == 1)
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        else
          --*(_DWORD *)(v5 + 312);
      }
      else if (v106 == 2)
      {
        result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 312));
      }
    }
    else if (*(_DWORD *)(v5 - 168) == 2)
    {
      if ((*(_WORD *)(v5 - 162) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 192), v37);
    }
    else
    {
      *(_DWORD *)(v5 - 168) -= 2;
    }
  }
  if (*((_DWORD *)v2 + 6) == 1)
  {
    WebCore::DOMTimer::~DOMTimer(v2, v37);
    return (unsigned int *)WTF::fastFree(v107, v108);
  }
  else
  {
    --*((_DWORD *)v2 + 6);
  }
  return result;
}

WTF *WebCore::UserGestureIndicator::UserGestureIndicator(WTF *a1, uint64_t *a2, int a3, char a4)
{
  void *v8;
  uint64_t v9;
  WebCore::UserGestureToken *v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  WebCore::UserGestureToken *v15;
  WTF *v16;
  void *v17;
  _DWORD *v18;

  *(_QWORD *)a1 = 0;
  if (WTF::isMainThread(a1))
  {
    {
      v9 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v9 = 0;
      WebCore::currentToken(void)::token = 0;
    }
    v10 = *(WebCore::UserGestureToken **)a1;
    *(_QWORD *)a1 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::UserGestureToken::~UserGestureToken(v10, v8);
        WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    v11 = *a2;
    if (*a2)
    {
      *(_DWORD *)(v11 + 68) = a3;
      *(_BYTE *)(v11 + 80) = a4;
      {
        v15 = (WebCore::UserGestureToken *)WebCore::currentToken(void)::token;
        ++*(_DWORD *)v11;
        WebCore::currentToken(void)::token = v11;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
          {
            WebCore::UserGestureToken::~UserGestureToken(v15, v8);
            WTF::fastFree(v16, v17);
          }
          else
          {
            --*(_DWORD *)v15;
          }
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
        v18 = (_DWORD *)*a2;
        if (*a2)
        {
          ++*v18;
          WebCore::currentToken(void)::token = (uint64_t)v18;
        }
      }
    }
  }
  return a1;
}

{
  void *v8;
  uint64_t v9;
  WebCore::UserGestureToken *v10;
  uint64_t v11;
  WTF *v13;
  void *v14;

  *(_QWORD *)a1 = 0;
  if (WTF::isMainThread(a1))
  {
    {
      v9 = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
        ++*(_DWORD *)WebCore::currentToken(void)::token;
    }
    else
    {
      v9 = 0;
      WebCore::currentToken(void)::token = 0;
    }
    v10 = *(WebCore::UserGestureToken **)a1;
    *(_QWORD *)a1 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::UserGestureToken::~UserGestureToken(v10, v8);
        WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
    v11 = *a2;
    if (*a2)
    {
      *(_DWORD *)(v11 + 68) = a3;
      *(_BYTE *)(v11 + 80) = a4;
      {
        WebCore::currentToken(void)::token = 0;
        v11 = *a2;
      }
      WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=((_DWORD *)v11, v8);
    }
  }
  return a1;
}

uint64_t WebCore::ScheduledAction::execute(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = *((_QWORD *)a2 + 66);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = this;
      this = (uint64_t)WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*(_QWORD *)(*(_QWORD *)(v3 + 304) + 16) + 112), *(WebCore::DOMWrapperWorld **)this);
      v6 = *(_QWORD *)(this + 16);
      if (v6)
      {
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 3408) + 104))(*(_QWORD *)(v6 + 3408));
        if (this)
        {
          v7 = this;
          if (!*(_BYTE *)(this + 144))
          {
            v8 = (unsigned int *)(this + 8);
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 + 1, v8));
            this = WebCore::ScriptController::canExecuteScripts(*(_QWORD *)(this + 304), 1u);
            if ((_DWORD)this)
            {
              v10 = *(_QWORD **)(v5 + 8);
              if (v10 && *v10)
                this = WebCore::ScheduledAction::executeFunctionInContext(v5, (JSC *)v6, *(_QWORD *)(v6 + 3336), (WebCore::Document *)((char *)a2 + 192));
              else
                this = WebCore::ScriptController::executeScriptInWorldIgnoringException(*(_QWORD *)(v7 + 304), *(WebCore::DOMWrapperWorld **)v5, (_DWORD **)(v5 + 24), *(_BYTE *)(v5 + 32), 0);
            }
            do
            {
              v11 = __ldaxr(v8);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v8));
            if (!v12)
            {
              atomic_store(1u, v8);
              v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v13 = off_1E31FE290;
              v13[1] = v8;
              v14 = (uint64_t)v13;
              WTF::ensureOnMainThread();
              this = v14;
              if (v14)
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ScriptController::canExecuteScripts(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (a2 == 1 && WebCore::ScriptDisallowedScope::s_count)
  {
    v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0;
    if (v2 && !webThreadDelegateMessageScopeCount)
    {
      __break(0xC471u);
      JUMPOUT(0x1941AC470);
    }
  }
  v3 = *(_QWORD **)(a1 + 16);
  v4 = v3[37];
  if (v4 && (*(_BYTE *)(v4 + 268) & 0x10) != 0)
  {
    if (a2 <= 1)
    {
      WTF::URL::stringCenterEllipsizedToLength((WTF::URL *)(v4 + 736));
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((int8x16_t *)"Blocked script execution in '", 30, (uint64_t *)&v13, (int8x16_t *)"' because the document's frame is sandboxed and the 'allow-scripts' permission is not set.", 91, &v14);
      WebCore::Document::addConsoleMessage((_QWORD *)v4, 8, 2, &v14, 0);
      v11 = v14;
      v14 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v13;
      v13 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    return 0;
  }
  v5 = v3[3];
  if (!v5 || !*(_QWORD *)(v5 + 8))
    return 0;
  v6 = *(_QWORD *)(v3[35] + 16);
  v7 = v3[17];
  if (*(_BYTE *)(v7 + 245))
    v8 = *(unsigned __int8 *)(v7 + 244) != 0;
  else
    v8 = (*(_QWORD *)(v7 + 688) >> 52) & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 968))(v6, v8);
}

uint64_t WebCore::ScheduledAction::executeFunctionInContext(uint64_t a1, JSC *a2, uint64_t a3, WTF::StringImpl *a4)
{
  uint64_t v7;
  JSCell *v8;
  JSC::JSFunction **v9;
  JSC::JSFunction *v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *v12;
  unsigned int *v13;
  WebCore::JSDOMGlobalObject **v14;
  unint64_t StatusReg;
  uint64_t v16;
  WebCore *v17;
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  WebCore::ScriptExecutionContext *v20;
  void *v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  Class **v28;
  uint64_t v29;
  JSValue v30;
  uint64_t v31;
  BOOL v32[8];
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  _QWORD v37[3];
  _BYTE v38[8];
  WebCore::JSDOMGlobalObject *v39[2];

  v7 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)a4 + 344))(a4);
  MEMORY[0x19AEA3294](v38, v7);
  v9 = *(JSC::JSFunction ***)(a1 + 8);
  if (v9)
    v10 = *v9;
  else
    v10 = 0;
  if (*((_BYTE *)v10 + 5) == 26)
    JSC::JSFunction::getCallData(v10, v8);
  else
    (*(void (**)(_QWORD *__return_ptr, JSC::JSFunction *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(v37, v10);
  if (!LOBYTE(v37[0]))
    return MEMORY[0x19AEA32A0](v38);
  v12 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v32[0] = 0;
  v33 = 0x800000000;
  v34 = (WTF *)((char *)v35 + 8);
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  v13 = *(unsigned int **)(a1 + 16);
  if (v13)
  {
    v11 = (JSC::JSGlobalObject *)*v13;
    if (v11 >= 9)
    {
      v32[0] = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v33) == 1;
      v13 = *(unsigned int **)(a1 + 16);
      if (!v13)
        goto LABEL_7;
      v11 = (JSC::JSGlobalObject *)*v13;
    }
    if ((_DWORD)v11)
    {
      v28 = (Class **)(v13 + 2);
      v29 = 8 * v11;
      do
      {
        v31 = v29;
        if (*v28)
          v30.super.isa = **v28;
        else
          v30.super.isa = 0;
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t)v32, v30);
        ++v28;
        v29 = v31 - 8;
      }
      while (v31 != 8);
    }
  }
LABEL_7:
  if (v32[0])
  {
    JSC::createOutOfMemoryError(a2, v11);
    v25 = JSC::Exception::create();
    WebCore::reportException(v12, v25, 0, 0, 0);
  }
  else
  {
    v14 = (WebCore::JSDOMGlobalObject **)WebCore::JSExecState::instrumentFunction(a4, (WebCore::ScriptExecutionContext *)v37);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v16 = *(_QWORD *)(StatusReg + 736);
    if (!v16 || (v14 = *(WebCore::JSDOMGlobalObject ***)(v16 + 96)) == 0)
      v14 = (WebCore::JSDOMGlobalObject **)WebCore::threadGlobalDataSlow((WebCore *)v14);
    v39[0] = v14[8];
    v17 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
    v18 = *(_QWORD *)(StatusReg + 736);
    if (!v18 || (v17 = *(WebCore **)(v18 + 96)) == 0)
      v17 = (WebCore *)WebCore::threadGlobalDataSlow(v17);
    *((_QWORD *)v17 + 8) = a2;
    JSC::profiledCall();
    WebCore::JSExecState::~JSExecState(v39, v19);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v26 = WebCore::InspectorInstrumentation::instrumentingAgents(a4, v20);
      if (v26)
        WebCore::InspectorInstrumentation::didCallFunctionImpl(v26, a4);
    }
    v22 = 0;
  }
  v23 = *(uint64_t **)&v35[0];
  if (*(_QWORD *)&v35[0])
  {
    v39[0] = (WebCore::JSDOMGlobalObject *)&v33;
    v27 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)v39);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v23, v27);
  }
  if (v34 != (WTF *)((char *)v35 + 8) && v34)
    WTF::fastFree(v34, v22);
  return MEMORY[0x19AEA32A0](v38);
}

_QWORD *WTF::HashMap<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::take(_QWORD *result, uint64_t *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v3 = *a2;
  if (!*a2)
    goto LABEL_18;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = *(_DWORD *)(v3 + 16 * v7);
  if (v8 != a3)
  {
    v17 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v17) & v4;
      v8 = *(_DWORD *)(v3 + 16 * v7);
      ++v17;
      if (v8 == a3)
        goto LABEL_3;
    }
    v7 = *(unsigned int *)(v3 - 4);
  }
LABEL_3:
  if (v7 == *(_DWORD *)(v3 - 4))
  {
LABEL_18:
    *result = 0;
  }
  else
  {
    v9 = v3 + 16 * v7;
    v10 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    *result = v10;
    v11 = *a2;
    if (!*a2 || (v11 += 16 * *(unsigned int *)(v11 - 4), v11 != v9))
    {
      if (v11 != v9)
      {
        v12 = -1;
        *(_DWORD *)v9 = -1;
        *(_QWORD *)(v9 + 8) = 0;
        ++*(_DWORD *)(*a2 - 16);
        v13 = *a2;
        if (*a2)
          v12 = *(_DWORD *)(v13 - 12) - 1;
        *(_DWORD *)(v13 - 12) = v12;
        v14 = *a2;
        if (*a2)
        {
          v15 = 6 * *(_DWORD *)(v14 - 12);
          v16 = *(_DWORD *)(v14 - 4);
          if (v15 < v16 && v16 >= 9)
            return (_QWORD *)WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a2, v16 >> 1);
        }
      }
    }
  }
  return result;
}

void WebCore::WindowEventLoop::didReachTimeToRun(WebCore::WindowEventLoop *this)
{
  double v2;
  WTF::MonotonicTime *v3;
  int MatchingAssociatedContext;
  WTF::MonotonicTime *v5;
  double v6;
  WTF::MonotonicTime *v7;

  ++*((_DWORD *)this + 2);
  WTF::ApproximateTime::now(this);
  WebCore::EventLoop::run((uint64_t)this, COERCE_VOID_(v2 + 0.016), 1u);
  v3 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E33A9010;
  v7 = v3;
  MatchingAssociatedContext = WebCore::EventLoop::findMatchingAssociatedContext((uint64_t)this, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    v5 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v5 + 8))(v5);
  if (MatchingAssociatedContext)
  {
    WTF::MonotonicTime::now(v5);
    if (WebCore::WindowEventLoop::shouldEndIdlePeriod((uint64_t)this, v6))
    {
      *((double *)this + 42) = *((double *)this + 42) * 0.5;
      if (!*((_BYTE *)this + 120))
      {
        *((_BYTE *)this + 120) = 1;
        (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)this + 24))(this);
      }
    }
    else
    {
      WebCore::WindowEventLoop::opportunisticallyRunIdleCallbacks(this);
    }
  }
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::WindowEventLoop::*&)(void),WebCore::WindowEventLoop*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::EventLoop::findMatchingAssociatedContext(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = v4 + 8 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = v4 + 8 * v6;
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v15 = 0;
    v7 = *(_QWORD *)(a1 + 104);
    goto LABEL_34;
  }
  v14 = 8 * v6;
  v7 = *(_QWORD *)(a1 + 104);
  while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
  {
    v7 += 8;
    v14 -= 8;
    if (!v14)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v15 = *(unsigned int *)(v4 - 4);
LABEL_34:
  v8 = v4 + 8 * v15;
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v17 = v7 + 8;
      v7 = v5;
      if (v17 != v5)
      {
        v7 = v17;
        while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
        {
          v7 += 8;
          if (v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v9 = v4 + 8 * *(unsigned int *)(v4 - 4);
  else
    v9 = 0;
  if (v7 == v9)
    return 0;
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    v11 = v10 ? v10 - 96 : 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v11);
    if ((result & 1) != 0)
      return 1;
    v13 = v5;
    if (v7 + 8 != v5)
    {
      v13 = v7 + 8;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 8;
        if (v13 == v5)
        {
          v13 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v13 != v8)
    {
      v7 = v13;
      if (!*(_QWORD *)(*(_QWORD *)v13 + 8))
      {
        while (1)
        {
          v16 = v7 + 8;
          v7 = v5;
          if (v16 != v5)
          {
            v7 = v16;
            while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
            {
              v7 += 8;
              if (v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*(_QWORD *)v7 + 8))
            goto LABEL_22;
        }
        v7 = v8;
      }
    }
LABEL_22:
    ++*(_DWORD *)(a1 + 112);
    if (v7 == v9)
      return result;
  }
}

uint64_t WebCore::LocalFrameViewLayoutContext::layout(WebCore::LocalFrameViewLayoutContext *this)
{
  _DWORD *v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD **)(*((_QWORD *)this + 1) + 8);
  ++v2[2];
  result = (uint64_t)WebCore::LocalFrameViewLayoutContext::performLayout(this);
  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (*(_DWORD *)(v5 + 8) == 1)
    goto LABEL_8;
  v7 = 0;
  do
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 328) + 296);
    if (!v6)
      break;
    result = WebCore::Style::Scope::updateQueryContainerState(*(_QWORD **)(v6 + 1328), &v7);
    if (!(_DWORD)result)
      break;
    WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8)
                                                                             + 328)
                                                                 + 296));
    result = WebCore::LocalFrameViewLayoutContext::needsLayout(this);
    if (!(_DWORD)result)
      break;
    result = (uint64_t)WebCore::LocalFrameViewLayoutContext::performLayout(this);
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  }
  while (*(_DWORD *)(v5 + 8) != 1);
  if (v7)
    result = WTF::fastFree((WTF *)(v7 - 16), v4);
  if (v2)
  {
LABEL_8:
    if (v2[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return result;
}

BOOL WebCore::Style::Scope::updateQueryContainerState(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  WebCore::Element *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  unsigned int **v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v39;
  uint64_t v40[2];
  char v41;
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53[2];

  v2 = a1[2];
  if (!*(_QWORD *)(v2 + 1944))
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = a1[33];
  v6 = a1[34];
  a1[33] = 0;
  a1[34] = 0;
  v53[0] = v5;
  v53[1] = v6;
  v51 = 0;
  v52 = 0;
  v7 = (_QWORD *)(*(_QWORD *)(v2 + 1944) + 512);
  v8 = *v7;
  if (*v7)
  {
    v4 = *(unsigned int *)(v8 - 4);
    v9 = v8 + 8 * v4;
    if (*(_DWORD *)(v8 - 12))
    {
      v3 = *v7;
      if ((_DWORD)v4)
      {
        v17 = 8 * v4;
        v3 = *v7;
        while ((unint64_t)(*(_QWORD *)v3 + 1) <= 1)
        {
          v3 += 8;
          v17 -= 8;
          if (!v17)
          {
            v3 = v9;
            goto LABEL_4;
          }
        }
      }
      goto LABEL_4;
    }
    v3 = v8 + 8 * v4;
  }
  v9 = v8 + 8 * v4;
LABEL_4:
  v46 = v7;
  v47 = v3;
  v48 = v9;
  if (v8)
  {
    v11 = *(unsigned int *)(v8 - 4);
    v10 = v8 + 8 * v11;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v49 = v10;
  v50 = v8 + 8 * v11;
  if (v3 != v10)
  {
    v27 = v3;
    while (!*(_QWORD *)(*(_QWORD *)v27 + 8))
    {
      v37 = v27 + 8;
      v47 = v27 + 8;
      v27 = v9;
      if (v37 != v9)
      {
        v27 = v37;
        while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
        {
          v27 += 8;
          v47 = v27;
          if (v27 == v9)
          {
            v27 = v9;
            break;
          }
        }
      }
      v3 = v10;
      if (v27 == v10)
        goto LABEL_7;
    }
    v3 = v27;
  }
LABEL_7:
  if (v8)
    v12 = v8 + 8 * *(unsigned int *)(v8 - 4);
  else
    v12 = 0;
  if (v3 == v12)
  {
    v13 = 0;
  }
  else
  {
    v18 = a1 + 33;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)v3 + 8);
      v45 = 0;
      v20 = WebCore::RenderElement::element((WebCore::RenderElement *)v19);
      v45 = v20;
      if (v20)
      {
        v21 = __ROR8__(*(_QWORD *)(v19 + 160), 32);
        if (((*(_DWORD *)(v19 + 124) >> 13) & 6u) - 2 <= 3)
          v22 = v21;
        else
          v22 = *(_QWORD *)(v19 + 160);
        v44 = v22;
        WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::find((uint64_t)v42, v53, *(_QWORD *)(v20 + 16));
        WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::end((uint64_t)v40, v53);
        if (v43 == v40[1]
          || (WebCore::Style::Scope::updateQueryContainerState(WebCore::Style::Scope::QueryContainerUpdateContext &)::$_0::operator()(*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 40) + 642) << 16)) << 32), v22, SHIDWORD(v22), *(_QWORD *)(v43 + 8)) & 1) != 0)
        {
          WTF::HashTable<objc_class *,objc_class *,WTF::IdentityExtractor,WTF::DefaultHash<objc_class *>,WTF::HashTraits<objc_class *>,WTF::HashTraits<objc_class *>>::add(v40, a2, &v45);
          if (v41)
          {
            v23 = HIDWORD(v52);
            if (HIDWORD(v52) == (_DWORD)v52)
            {
              WTF::Vector<__CTFont const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,__CTFont const*>((uint64_t)&v51, (unint64_t)&v45);
            }
            else
            {
              *((_QWORD *)v51 + HIDWORD(v52)) = v45;
              HIDWORD(v52) = v23 + 1;
            }
          }
        }
        WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::add<WebCore::LayoutSize&>((uint64_t)v40, v18, v45, &v44);
      }
      WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v46);
      v3 = v47;
    }
    while (v47 != v12);
    v24 = v51;
    if (HIDWORD(v52))
    {
      v25 = 8 * HIDWORD(v52);
      do
      {
        v26 = *(WebCore::Element **)v24;
        v24 = (WTF *)((char *)v24 + 8);
        WebCore::Element::invalidateForQueryContainerSizeChange(v26);
        v25 -= 8;
      }
      while (v25);
      v24 = v51;
      v13 = HIDWORD(v52);
    }
    else
    {
      v13 = 0;
    }
    if (v24)
    {
      v51 = 0;
      LODWORD(v52) = 0;
      WTF::fastFree(v24, a2);
    }
  }
  v14 = v13 != 0;
  v15 = v53[0];
  if (v53[0])
  {
    v28 = *(unsigned int *)(v53[0] - 4);
    if ((_DWORD)v28)
    {
      for (i = 0; i != v28; ++i)
      {
        v30 = (unsigned int **)(v15 + 16 * i);
        v31 = *v30;
        if (*v30 != (unsigned int *)-1)
        {
          *v30 = 0;
          if (v31)
          {
            v32 = i;
            do
            {
              v33 = __ldaxr(v31);
              v34 = --v33 == 0;
            }
            while (__stlxr(v33, v31));
            i = v32;
            if (v34)
            {
              atomic_store(1u, v31);
              v39 = (WTF *)v31;
              v35 = v31[7];
              if ((_DWORD)v35)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v39 + 2), (WTF::StringImpl *)(*((_QWORD *)v39 + 2) + 32 * v35));
              v36 = (WTF *)*((_QWORD *)v39 + 2);
              if (v36)
              {
                *((_QWORD *)v39 + 2) = 0;
                *((_DWORD *)v39 + 6) = 0;
                WTF::fastFree(v36, a2);
              }
              WTF::fastFree(v39, a2);
              i = v32;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v15 - 16), a2);
  }
  return v14;
}

unsigned int *WebCore::ImageLoader::timerFired(WebCore::ImageLoader *this, void *a2)
{
  unsigned int *result;

  result = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ImageLoader::*&)(void),WebCore::ImageLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::LocalFrameView::updateEmbeddedObjectsTimerFired(WebCore::LocalFrameView *this, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v4;

  ++*((_DWORD *)this + 2);
  if ((*((_QWORD *)this + 88) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::LocalFrameView *)((char *)this + 672));
  result = WebCore::LocalFrameView::updateEmbeddedObjects(this, a2);
  if ((result & 1) == 0)
    result = WebCore::LocalFrameView::updateEmbeddedObjects(this, v4);
  if (*((_DWORD *)this + 2) == 1)
    return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 2);
  return result;
}

BOOL WebCore::LocalFrameView::updateEmbeddedObjects(WebCore::LocalFrameView *this, _QWORD *a2)
{
  char v3;
  _BOOL8 result;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  _BOOL8 v12;
  char v13;
  uint64_t *v14;
  WTF *v15;

  v3 = *((_BYTE *)this + 1389);
  result = 1;
  *((_BYTE *)this + 1389) = 1;
  if (*((_BYTE *)this + 481) != 2)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 70);
    if (v5)
    {
      v13 = v3;
      v6 = *v5;
      if (*v5 && *(_DWORD *)(v6 - 12))
      {
        ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        v7 = *(_DWORD *)(v6 - 12);
        if (v7)
        {
          while (1)
          {
            a2 = (_QWORD *)*((_QWORD *)this + 70);
            if (!*a2 || !*(_DWORD *)(*a2 - 12))
              break;
            WTF::ListHashSet<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>::takeFirst(&v14, (uint64_t)a2);
            v8 = (WTF *)v14;
            WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v15, v14[1]);
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, v9);
            else
              --*(_DWORD *)v8;
            WebCore::LocalFrameView::updateEmbeddedObject((uint64_t)&v15);
            v10 = v15;
            v15 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 1)
                WTF::fastFree(v10, a2);
              else
                --*(_DWORD *)v10;
            }
            if (!--v7)
            {
              v11 = **((_QWORD **)this + 70);
              if (!v11)
                break;
              v12 = *(_DWORD *)(v11 - 12) == 0;
              goto LABEL_21;
            }
          }
        }
        v12 = 1;
LABEL_21:
        WebCore::WidgetHierarchyUpdatesSuspensionScope::~WidgetHierarchyUpdatesSuspensionScope((WebCore::WidgetHierarchyUpdatesSuspensionScope *)&v15, a2);
        result = v12;
      }
      v3 = v13;
    }
  }
  *((_BYTE *)this + 1389) = v3;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::LocalFrameView::*&)(void),WebCore::LocalFrameView*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebCore::CachedResourceLoader::garbageCollectDocumentResources(WebCore::CachedResourceLoader *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  WTF::StringImpl **v17;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  _BYTE v24[80];

  v22 = (WTF *)v24;
  v23 = 10;
  v5 = (uint64_t *)((char *)this + 64);
  v4 = *((_QWORD *)this + 8);
  if (!v4)
  {
    v8 = 0;
    v6 = 0;
LABEL_47:
    v7 = (_QWORD *)(v4 + 16 * v6);
    goto LABEL_8;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = (_QWORD *)(v4 + 16 * v6);
  if (!*(_DWORD *)(v4 - 12))
  {
    v8 = (_QWORD *)(v4 + 16 * v6);
    goto LABEL_47;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 8);
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = (_QWORD *)*((_QWORD *)this + 8);
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_8:
  if (v4)
    v10 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  if (v10 != v8)
  {
    do
    {
      v11 = v8[1];
      if (v11)
        v12 = *(_QWORD *)(v11 + 8);
      else
        v12 = 0;
      if (*(_DWORD *)(v12 + 548) == 1 && !*(_QWORD *)(v12 + 384) && !*(_DWORD *)(v12 + 552))
      {
        v14 = HIDWORD(v23);
        if (HIDWORD(v23) == (_DWORD)v23)
        {
          WTF::Vector<WTF::String,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v22, (unint64_t)v8);
        }
        else
        {
          v15 = v22;
          v16 = (_DWORD *)*v8;
          if (*v8)
            *v16 += 2;
          *((_QWORD *)v15 + v14) = v16;
          HIDWORD(v23) = v14 + 1;
        }
        WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::remove((uint64_t)this + 216, (_QWORD *)v12);
      }
      v13 = v8 + 2;
      v8 = v7;
      if (v13 != v7)
      {
        v8 = v13;
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          if (v8 == v7)
          {
            v8 = v7;
            break;
          }
        }
      }
    }
    while (v8 != v10);
    v17 = (WTF::StringImpl **)v22;
    if (HIDWORD(v23))
    {
      v19 = 8 * HIDWORD(v23);
      do
      {
        WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::remove(v5, v17++, a3);
        v19 -= 8;
      }
      while (v19);
      v17 = (WTF::StringImpl **)v22;
      if (HIDWORD(v23))
      {
        v20 = 8 * HIDWORD(v23);
        do
        {
          v21 = *v17;
          *v17 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, a2);
            else
              *(_DWORD *)v21 -= 2;
          }
          ++v17;
          v20 -= 8;
        }
        while (v20);
        v17 = (WTF::StringImpl **)v22;
      }
    }
    if (v24 != (_BYTE *)v17 && v17 != 0)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      WTF::fastFree((WTF *)v17, a2);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CachedResourceLoader::*&)(void),WebCore::CachedResourceLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t *WebCore::FontCache::purgeInactiveFontDataIfNeeded(WebCore::FontCache *this)
{
  uint64_t *result;
  int v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  result = (uint64_t *)WTF::MemoryPressureHandler::singleton(this);
  v3 = atomic_load((unsigned __int8 *)result + 4);
  v4 = v3 != 2 && *((_BYTE *)result + 7) == 0;
  v5 = !v4;
  if (v4)
    v6 = 120;
  else
    v6 = 50;
  v7 = **((_QWORD **)this + 9);
  if (v7)
  {
    if (*(_DWORD *)(v7 - 12) >= v6)
    {
      result = (uint64_t *)WebCore::FontCache::inactiveFontCount(this);
      if (v6 < result)
      {
        if (v5)
          v8 = -30;
        else
          v8 = -100;
        return WebCore::FontCache::purgeInactiveFontData(this, (WTF::StringImpl *)(v8 + (_DWORD)result));
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::FontCache::*&)(void),WebCore::FontCache*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::ThreadTimerHeapItem,WTF::RawPtrTraits<WebCore::ThreadTimerHeapItem>,WTF::DefaultRefDerefTraits<WebCore::ThreadTimerHeapItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::RefPtr<WebCore::ThreadTimerHeapItem,WTF::RawPtrTraits<WebCore::ThreadTimerHeapItem>,WTF::DefaultRefDerefTraits<WebCore::ThreadTimerHeapItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::BitmapImage::startAnimation(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Image::*&)(void),WebCore::Image*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Style::Scope::*&)(void),WebCore::Style::Scope*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ScriptRunner::*&)(void),WebCore::ScriptRunner*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebCore::setupPowerObserver(WebCore *this)
{
  __CFNotificationCenter *LocalCenter;

  if (WebCore::MainThreadSharedTimer::shouldSetupPowerObserver(void)::setup)
  {
    if ((WebCore::setupPowerObserver(void)::registeredForApplicationNotification & 1) == 0)
    {
      WebCore::setupPowerObserver(void)::registeredForApplicationNotification = 1;
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)WebCore::applicationDidBecomeActive, CFSTR("UIApplicationDidBecomeActiveNotification"), 0, CFNotificationSuspensionBehaviorCoalesce);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Document::*&)(void),WebCore::Document*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchPendingEvents(WebCore::TimerBase *this, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Event *v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  _QWORD *v21;
  uint64_t v22;
  WTF *v23;

  if (!*((_DWORD *)this + 21))
  {
    if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase(this);
      v4 = *((unsigned int *)this + 21);
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 7);
      v6 = *((_DWORD *)this + 16);
      v7 = *((_DWORD *)this + 17);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      if ((_DWORD)v4)
        WTF::VectorDestructor<true,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::destruct(*((_QWORD *)this + 9), (WTF::StringImpl *)(*((_QWORD *)this + 9) + 16 * v4));
    }
    else
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 7);
      v6 = *((_DWORD *)this + 16);
      v7 = *((_DWORD *)this + 17);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    v8 = (WTF *)*((_QWORD *)this + 9);
    if (v8)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v8, a2);
    }
    *((_QWORD *)this + 9) = v5;
    *((_DWORD *)this + 20) = v6;
    *((_DWORD *)this + 21) = v7;
    if (v7)
    {
      v9 = (uint64_t *)&v5[2 * v7];
      do
      {
        v10 = *v5;
        if (*v5 && *((_QWORD *)v10 + 1))
        {
          *v5 = 0;
          v11 = *((_QWORD *)v10 + 1);
          if (!a2)
            goto LABEL_13;
          v21 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 528);
          if (v21)
          {
            v21 = (_QWORD *)v21[1];
            if (v21)
            {
              v21 = (_QWORD *)v21[3];
              if (v21)
                v21 = (_QWORD *)v21[1];
            }
          }
          if (v21 == a2)
          {
LABEL_13:
            v12 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
            *(_QWORD *)v12 = off_1E33A4B48;
            *(_QWORD *)(v12 + 8) = 0;
            v15 = *(_DWORD *)(v12 + 20) & 0xFFC00000 | (v5[1] != 0) | 0x1E8200;
            *(_DWORD *)(v12 + 16) = 1;
            *(_DWORD *)(v12 + 20) = v15;
            v16 = v5[1];
            if (v16)
              *(_DWORD *)v16 += 2;
            *(_QWORD *)(v12 + 24) = v16;
            *(_QWORD *)(v12 + 32) = 0;
            *(_QWORD *)(v12 + 40) = 0;
            *(_QWORD *)(v12 + 48) = 0;
            *(_QWORD *)(v12 + 56) = v14;
            *(_QWORD *)(v12 + 64) = 0;
            WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v11, (WebCore::Node *)v12, v13);
            if (*(_DWORD *)(v12 + 16) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            else
              --*(_DWORD *)(v12 + 16);
          }
          else
          {
            WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)this, *((_QWORD **)v10 + 1), v5 + 1);
          }
          do
          {
            v17 = __ldaxr((unsigned int *)v10);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, (unsigned int *)v10));
          if (!v18)
          {
            atomic_store(1u, (unsigned int *)v10);
            v22 = *((unsigned int *)v10 + 7);
            if ((_DWORD)v22)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v22));
            v23 = (WTF *)*((_QWORD *)v10 + 2);
            if (v23)
            {
              *((_QWORD *)v10 + 2) = 0;
              *((_DWORD *)v10 + 6) = 0;
              WTF::fastFree(v23, a2);
            }
            WTF::fastFree(v10, a2);
          }
        }
        v5 += 2;
      }
      while (v5 != (WTF::StringImpl **)v9);
      v6 = *((_DWORD *)this + 20);
    }
    if (v6)
    {
      v19 = *((unsigned int *)this + 21);
      v20 = (WTF *)*((_QWORD *)this + 9);
      if ((_DWORD)v19)
      {
        WTF::VectorDestructor<true,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::destruct((uint64_t)v20, (WTF *)((char *)v20 + 16 * v19));
        *((_DWORD *)this + 21) = 0;
        v20 = (WTF *)*((_QWORD *)this + 9);
      }
      if (v20)
      {
        *((_QWORD *)this + 9) = 0;
        *((_DWORD *)this + 20) = 0;
        WTF::fastFree(v20, a2);
      }
    }
  }
}

void WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired(WebCore::TimerBase *a1)
{
  WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchPendingEvents(a1, 0);
}

void WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired(WTF **a1)
{
  WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchPendingEvents(a1, 0);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::*&)(void),WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::*&)(void),WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::Document::loadEventDelayTimerFired(WebCore::Document *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WTF *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  *((_DWORD *)this + 6) += 2;
  result = WebCore::Document::checkCompleted((uint64_t)this);
  v3 = *((_QWORD *)this + 66);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = (unsigned int *)(v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *(WTF **)(v4 + 280);
      ++*(_DWORD *)v7;
      result = (uint64_t)WebCore::FrameLoader::checkLoadComplete(v7, 0);
      if (!*(_DWORD *)v7)
      {
        __break(0xC471u);
        JUMPOUT(0x1941ADB60);
      }
      --*(_DWORD *)v7;
      do
      {
        v8 = __ldaxr(v5);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v5));
      if (!v9)
      {
        atomic_store(1u, v5);
        v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v10 = off_1E31FE290;
        v10[1] = v5;
        v11 = (uint64_t)v10;
        WTF::ensureOnMainThread();
        result = v11;
        if (v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::ProgressTracker::progressHeartbeatTimerFired(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::FrameLoader *v7;

  v1 = this;
  v2 = *(_QWORD *)(this + 104);
  if (v2 >= *(_QWORD *)(this + 112) + 1024)
    v3 = 0;
  else
    v3 = *(_DWORD *)(this + 156) + 1;
  *(_DWORD *)(this + 156) = v3;
  *(_QWORD *)(this + 112) = v2;
  v4 = *(_QWORD *)(this + 24);
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = *(WebCore::FrameLoader **)(v4 + 280);
    ++*(_DWORD *)v7;
    WebCore::FrameLoader::loadProgressingStatusChanged(v7);
    if (!*(_DWORD *)v7)
    {
      this = 286;
      __break(0xC471u);
      return this;
    }
    --*(_DWORD *)v7;
    this = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
  }
  if (*(double *)(v1 + 128) >= 0.9 && (*(_QWORD *)(v1 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 40));
  return this;
}

void WebCore::FrameLoader::loadProgressingStatusChanged(WebCore::FrameLoader *this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 128) + 8);
  if (v1)
    v2 = *(_BYTE *)(v1 + 144) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v1 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = *(_QWORD *)(v1 + 288);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 8);
      WebCore::LocalFrameView::loadProgressingStatusChanged((id *)v5);
      if (*(_DWORD *)(v5 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      else
        --*(_DWORD *)(v5 + 8);
    }
    do
    {
      v6 = __ldaxr(v3);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v3));
    if (!v7)
    {
      atomic_store(1u, v3);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E31FE290;
      v8[1] = v3;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ProgressTracker::*&)(void),WebCore::ProgressTracker*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::LocalFrameViewLayoutContext::*&)(void),WebCore::LocalFrameViewLayoutContext*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DocumentFontLoader::*&)(void),WebCore::DocumentFontLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::SettingsBase::*&)(void),WebCore::SettingsBase*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WTF::StringImpl *WebCore::Document::invalidateDOMCookieCache(WebCore::Document *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  if ((*((_QWORD *)this + 355) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2808));
  result = (WTF::StringImpl *)*((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchPendingEvents(WebCore::TimerBase *this, _QWORD *a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  int v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Event *v15;
  uint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  WTF *v23;

  if (!*((_DWORD *)this + 21))
  {
    if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase(this);
      v4 = *((unsigned int *)this + 21);
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 7);
      v6 = *((_DWORD *)this + 16);
      v7 = *((_DWORD *)this + 17);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      if ((_DWORD)v4)
        WTF::VectorDestructor<true,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::destruct(*((_QWORD *)this + 9), (WTF::StringImpl *)(*((_QWORD *)this + 9) + 16 * v4));
    }
    else
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 7);
      v6 = *((_DWORD *)this + 16);
      v7 = *((_DWORD *)this + 17);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    v8 = (WTF *)*((_QWORD *)this + 9);
    if (v8)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree(v8, a2);
    }
    *((_QWORD *)this + 9) = v5;
    *((_DWORD *)this + 20) = v6;
    *((_DWORD *)this + 21) = v7;
    if (v7)
    {
      v11 = (uint64_t *)&v5[2 * v7];
      do
      {
        v12 = *v5;
        if (*v5 && *((_QWORD *)v12 + 1))
        {
          *v5 = 0;
          v13 = *((_QWORD *)v12 + 1);
          if (!a2)
            goto LABEL_18;
          v21 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 8) + 528);
          if (v21)
          {
            v21 = (_QWORD *)v21[1];
            if (v21)
            {
              v21 = (_QWORD *)v21[3];
              if (v21)
                v21 = (_QWORD *)v21[1];
            }
          }
          if (v21 == a2)
          {
LABEL_18:
            v14 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v14);
            *(_QWORD *)v14 = off_1E33A4B48;
            *(_QWORD *)(v14 + 8) = 0;
            v17 = *(_DWORD *)(v14 + 20) & 0xFFC00000 | (v5[1] != 0) | 0x1E8200;
            *(_DWORD *)(v14 + 16) = 1;
            *(_DWORD *)(v14 + 20) = v17;
            v18 = v5[1];
            if (v18)
              *(_DWORD *)v18 += 2;
            *(_QWORD *)(v14 + 24) = v18;
            *(_QWORD *)(v14 + 32) = 0;
            *(_QWORD *)(v14 + 40) = 0;
            *(_QWORD *)(v14 + 48) = 0;
            *(_QWORD *)(v14 + 56) = v16;
            *(_QWORD *)(v14 + 64) = 0;
            WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)v13, (WebCore::Node *)v14, v15);
            if (*(_DWORD *)(v14 + 16) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            else
              --*(_DWORD *)(v14 + 16);
          }
          else
          {
            WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)this, *((_QWORD **)v12 + 1), v5 + 1);
          }
          do
          {
            v19 = __ldaxr((unsigned int *)v12);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, (unsigned int *)v12));
          if (!v20)
          {
            atomic_store(1u, (unsigned int *)v12);
            v22 = *((unsigned int *)v12 + 7);
            if ((_DWORD)v22)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v12 + 2), (WTF::StringImpl *)(*((_QWORD *)v12 + 2) + 32 * v22));
            v23 = (WTF *)*((_QWORD *)v12 + 2);
            if (v23)
            {
              *((_QWORD *)v12 + 2) = 0;
              *((_DWORD *)v12 + 6) = 0;
              WTF::fastFree(v23, a2);
            }
            WTF::fastFree(v12, a2);
          }
        }
        v5 += 2;
      }
      while (v5 != (WTF::StringImpl **)v11);
      v6 = *((_DWORD *)this + 20);
    }
    if (v6)
    {
      v9 = *((unsigned int *)this + 21);
      v10 = (WTF *)*((_QWORD *)this + 9);
      if ((_DWORD)v9)
      {
        WTF::VectorDestructor<true,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::destruct((uint64_t)v10, (WTF *)((char *)v10 + 16 * v9));
        *((_DWORD *)this + 21) = 0;
        v10 = (WTF *)*((_QWORD *)this + 9);
      }
      if (v10)
      {
        *((_QWORD *)this + 9) = 0;
        *((_DWORD *)this + 20) = 0;
        WTF::fastFree(v10, a2);
      }
    }
  }
}

void WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired(WebCore::TimerBase *a1)
{
  WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchPendingEvents(a1, 0);
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMTimer,WTF::RawPtrTraits<WebCore::DOMTimer>,WTF::DefaultRefDerefTraits<WebCore::DOMTimer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::DOMTimer *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::DOMTimer *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (int *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10)
        break;
      v22 = (WebCore::DOMTimer *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 1)
          goto LABEL_23;
        --*((_DWORD *)v22 + 6);
      }
LABEL_21:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    if (v11 == -1)
      goto LABEL_21;
    v12 = *a1;
    v13 = *a1 ? *(_DWORD *)(v12 - 8) : 0;
    v14 = 0;
    v15 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
    v16 = ((v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11)) ^ (((v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11)) >> 16);
    do
    {
      v17 = v16 & v13;
      v16 = ++v14 + v17;
    }
    while (*(_DWORD *)(v12 + 16 * v17));
    v18 = v12 + 16 * v17;
    v19 = *(WebCore::DOMTimer **)(v18 + 8);
    *(_QWORD *)(v18 + 8) = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 1)
      {
        WebCore::DOMTimer::~DOMTimer(v19, v8);
        WTF::fastFree(v25, v26);
      }
      else
      {
        --*((_DWORD *)v19 + 6);
      }
    }
    *(_DWORD *)v18 = *v10;
    v20 = v4 + 16 * v9;
    v21 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v18 + 8) = v21;
    v22 = *(WebCore::DOMTimer **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (!v22)
      goto LABEL_21;
    if (*((_DWORD *)v22 + 6) != 1)
    {
      --*((_DWORD *)v22 + 6);
      goto LABEL_21;
    }
LABEL_23:
    WebCore::DOMTimer::~DOMTimer(v22, v8);
    WTF::fastFree(v23, v24);
    goto LABEL_21;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::*&)(void),WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::RenderLayerCompositor::updateCompositingLayersTimerFired(WebCore::RenderLayerCompositor *this)
{
  return WebCore::RenderLayerCompositor::updateCompositingLayers((unint64_t)this, 1u, 0);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RenderLayerCompositor::*&)(void),WebCore::RenderLayerCompositor*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WebCore::DOMTimer::updateTimerIntervalIfNecessary(WebCore::DOMTimer *this)
{
  uint64_t v1;
  double v3;
  double v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v3 = *((double *)this + 10);
      v4 = WebCore::DOMTimer::intervalClampedToMinimum(this);
      *((double *)this + 10) = v4;
      if (v3 != v4)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
        if (v5)
          v6 = (_DWORD *)(v5 - 96);
        else
          v6 = 0;
        WebCore::ScriptExecutionContext::ref((uint64_t)v6);
        v7 = *((unsigned __int8 *)this + 76);
        v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 104))(v6);
        v9 = v8;
        ++*(_DWORD *)(v8 + 8);
        v10 = *((_QWORD *)this + 6);
        if (v7)
        {
          if (v10)
            ++*(_DWORD *)(v10 + 48);
          v15 = v10;
          WebCore::EventLoopTaskGroup::adjustTimerNextFireTime(v8, &v15, *((double *)this + 10) - v3);
          WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v15, v11);
          v12 = *(_DWORD *)(v9 + 8);
          if (v12)
          {
LABEL_12:
            *(_DWORD *)(v9 + 8) = v12 - 1;
            WebCore::ScriptExecutionContext::deref(v6);
            return;
          }
          __break(0xC471u);
        }
        else
        {
          if (v10)
            ++*(_DWORD *)(v10 + 48);
          v14 = v10;
          WebCore::EventLoopTaskGroup::adjustTimerRepeatInterval(v8, &v14, *((double *)this + 10) - v3);
          WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v14, v13);
          v12 = *(_DWORD *)(v9 + 8);
          if (v12)
            goto LABEL_12;
          __break(0xC471u);
        }
        JUMPOUT(0x1941AE428);
      }
    }
  }
}

unsigned int *WebCore::Page::playbackControlsManagerUpdateTimerFired(WebCore::Page *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *result;
  void *v5;
  uint64_t v6;

  WebCore::HTMLMediaElement::bestMediaElementForRemoteControls(0, 0, &v6);
  v2 = v6;
  v3 = **(_QWORD **)(*((_QWORD *)this + 6) + 16);
  if (!v6)
    return (unsigned int *)(*(uint64_t (**)(void))(v3 + 1136))();
  result = (unsigned int *)(*(uint64_t (**)(void))(v3 + 1128))();
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DOMTimer::DOMTimer(WebCore::ScriptExecutionContext &,WTF::Function<void ()(WebCore::ScriptExecutionContext &)> &&,WTF::Seconds,WebCore::DOMTimer::Type)::$_1,void>::call(unsigned int *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::DOMTimer *v3;
  void *v4;
  WTF *v5;
  void *v6;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(WebCore::DOMTimer **)(v2 + 8);
    if (v3)
    {
      ++*((_DWORD *)v3 + 6);
      result = WebCore::DOMTimer::fired(v3, a2);
      if (*((_DWORD *)v3 + 6) == 1)
      {
        WebCore::DOMTimer::~DOMTimer(v3, v4);
        return (unsigned int *)WTF::fastFree(v5, v6);
      }
      else
      {
        --*((_DWORD *)v3 + 6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Page::*&)(void),WebCore::Page*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unint64_t WTF::Vector<WebCore::RenderTreeUpdater::Parent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 72 * (unint64_t)a1[3] > a3)
  {
    v8 = a3 - v4;
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::RenderTreeUpdater::Parent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::RenderTreeUpdater::Parent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::RenderTreeUpdater::Parent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  char *v7;
  char *v8;
  unsigned int *v9;
  uint64_t v10;
  char *v11;
  __int128 v12;

  if (result[2] < a2)
  {
    if (a2 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 72 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(72 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = (char *)v3 + 72 * v4;
        v8 = (char *)v3 + 32;
        v9 = result + 6;
        do
        {
          *(_OWORD *)(v9 - 6) = *((_OWORD *)v8 - 2);
          *((_BYTE *)v9 - 8) = 0;
          *((_BYTE *)v9 + 16) = 0;
          if (v8[8])
          {
            *((_QWORD *)v9 - 1) = *((_QWORD *)v8 - 2);
            v10 = *((_QWORD *)v8 - 1);
            *((_QWORD *)v8 - 1) = 0;
            *(_QWORD *)v9 = v10;
            *((_BYTE *)v9 + 8) = *v8;
            *((_BYTE *)v9 + 16) = 1;
          }
          v11 = v8 - 32;
          v12 = *((_OWORD *)v8 + 1);
          *((_BYTE *)v9 + 40) = v8[32];
          *(_OWORD *)(v9 + 6) = v12;
          if (v8[8])
          {
            result = (unsigned int *)*((_QWORD *)v8 - 1);
            *((_QWORD *)v8 - 1) = 0;
            if (result)
            {
              if (*result == 1)
                result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
              else
                --*result;
            }
          }
          v8 += 72;
          v9 += 18;
        }
        while (v11 + 72 != v7);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::ResourceResponseBase::httpStatusCode(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  return *((__int16 *)this + 68);
}

void WebCore::CachedResource::responseReceived(WebCore::CachedResource *this, WTF::StringImpl **a2)
{
  WTF::WallTime *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v4 = (WTF::WallTime *)WebCore::CachedResource::setResponse(this, (const WebCore::ResourceResponse *)a2);
  WTF::WallTime::now(v4);
  *((_QWORD *)this + 54) = v5;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v6 = a2[7];
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v9 = v6;
    (*(void (**)(WebCore::CachedResource *, WTF::StringImpl **))(*(_QWORD *)this + 24))(this, &v9);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
}

uint64_t WebCore::CachedResource::setResponse(WebCore::CachedResource *this, const WebCore::ResourceResponse *a2)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t *v13;
  WebCore::CachedResource::ResponseData *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WebCore::CachedResource::ResponseData *v23;
  WTF *v24;
  void *v25;
  WebCore::CachedResource::ResponseData *v26;
  WTF::StringImpl *v27;
  WebCore::CachedResource::ResponseData *v28;
  WTF *v29;
  void *v30;
  WebCore::CachedResource::ResponseData *v31;
  WTF::StringImpl *v32;
  WebCore::CachedResource::ResponseData *v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  const void *v38;
  _QWORD v39[2];
  _QWORD *v40;
  _QWORD *v41;

  v4 = *((_QWORD *)this + 50);
  if (!v4)
  {
    v4 = WTF::fastMalloc((WTF *)0x198);
    WebCore::CachedResource::ResponseData::ResponseData((WebCore::CachedResource::ResponseData *)v4, this);
    v23 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v4;
    if (v23)
    {
      WebCore::CachedResource::ResponseData::~ResponseData(v23, v22);
      WTF::fastFree(v24, v25);
      v4 = *((_QWORD *)this + 50);
    }
  }
  WebCore::ResourceResponseBase::operator=(v4, (uint64_t)a2);
  v5 = (const void *)*((_QWORD *)a2 + 30);
  if (v5)
  {
    v38 = (const void *)*((_QWORD *)a2 + 30);
    CFRetain(v5);
    v5 = v38;
  }
  v6 = *(const void **)(v4 + 240);
  *(_QWORD *)(v4 + 240) = v5;
  if (v6)
    CFRelease(v6);
  *(_BYTE *)(v4 + 248) = *((_BYTE *)a2 + 248);
  v7 = (_QWORD *)*((_QWORD *)this + 53);
  v8 = (uint64_t *)*((_QWORD *)this + 50);
  if (!v8)
  {
    v18 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v18 != -1)
    {
      v39[0] = &v40;
      v41 = v39;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v8 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  v41 = v7;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E341D820;
  v9[1] = (char *)this + 160;
  v9[2] = &v41;
  v40 = v9;
  WebCore::collectVaryingRequestHeadersInternal((uint64_t)v39, (uint64_t)v8, &v40);
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  v11 = *((unsigned int *)this + 121);
  if ((_DWORD)v11)
  {
    v36 = (WTF::StringImpl **)*((_QWORD *)this + 59);
    v37 = 16 * v11;
    do
    {
      v36 = WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v36, v10) + 2;
      v37 -= 16;
    }
    while (v37);
  }
  v12 = (WTF *)*((_QWORD *)this + 59);
  if (v12)
  {
    *((_QWORD *)this + 59) = 0;
    *((_DWORD *)this + 120) = 0;
    WTF::fastFree(v12, v10);
  }
  *((_QWORD *)this + 59) = v39[0];
  *((_QWORD *)this + 60) = v39[1];
  v13 = (uint64_t *)*((_QWORD *)this + 50);
  if (!v13)
  {
    v19 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v19 != -1)
    {
      v39[0] = &v40;
      v41 = v39;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v13 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v13, 2);
  if ((v13[29] & 0x3C00) == 0x1800)
  {
    result = (uint64_t)WebCore::CachedResource::response(this);
    *(_WORD *)((char *)this + 557) = *(_WORD *)((_BYTE *)this + 557) & 0xFFFC | *(_BYTE *)(result + 233) & 3;
  }
  else
  {
    v14 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
    if (!v14)
    {
      v26 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
      v14 = WebCore::CachedResource::ResponseData::ResponseData(v26, this);
      v28 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
      *((_QWORD *)this + 50) = v14;
      if (v28)
      {
        WebCore::CachedResource::ResponseData::~ResponseData(v28, v27);
        WTF::fastFree(v29, v30);
        v14 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
      }
    }
    *((_WORD *)v14 + 116) = *((_WORD *)v14 + 116) & 0xFFBF | ((*((_BYTE *)this + 536) != 0) << 6);
    v15 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v15)
    {
      v20 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v20 != -1)
      {
        v39[0] = &v40;
        v41 = v39;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v15 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    if ((v15[29] & 0x300) == 0
      || (result = (uint64_t)WebCore::CachedResource::response(this), (*(_WORD *)(result + 232) & 0x300) == 0x100))
    {
      v16 = (uint64_t *)*((_QWORD *)this + 50);
      if (!v16)
      {
        v21 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v21 != -1)
        {
          v39[0] = &v40;
          v41 = v39;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v16 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v16, 1);
      result = WTF::URL::protocolIs();
      if ((result & 1) == 0)
      {
        result = *((_QWORD *)this + 50);
        if (!result)
        {
          v31 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
          result = (uint64_t)WebCore::CachedResource::ResponseData::ResponseData(v31, this);
          v33 = (WebCore::CachedResource::ResponseData *)*((_QWORD *)this + 50);
          *((_QWORD *)this + 50) = result;
          if (v33)
          {
            WebCore::CachedResource::ResponseData::~ResponseData(v33, v32);
            WTF::fastFree(v34, v35);
            result = *((_QWORD *)this + 50);
          }
        }
        *(_WORD *)(result + 232) = *(_WORD *)(result + 232) & 0xFCFF | ((*(_WORD *)((_BYTE *)this + 557) & 3) << 8);
      }
    }
  }
  return result;
}

unsigned int *WebCore::collectVaryingRequestHeadersInternal(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  WTF::StringImpl *v5;
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  unint64_t v37;
  uint64_t *v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  WTF::StringImpl *v45;

  WebCore::ResourceResponseBase::httpHeaderField(a2, 87, &v45);
  result = (unsigned int *)v45;
  if (!v45 || (v7 = *((unsigned int *)v45 + 1), !(_DWORD)v7))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
LABEL_3:
    v45 = 0;
    if (result)
    {
      if (*result == 2)
        return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *result -= 2;
    }
    return result;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (result[4] >> 2) & 1;
  v41 = *((_QWORD *)result + 1);
  v42 = v7 | (v8 << 32);
  v43 = 44;
  v44 = 0;
  v38 = &v41;
  v39 = 0;
  v40 = 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v38);
  v9 = v42;
  while (1)
  {
    if (v39 == v9 && v40)
    {
      result = (unsigned int *)v45;
      goto LABEL_3;
    }
    result = WTF::StringView::SplitResult::Iterator::operator*((unsigned int *)&v38);
    v11 = v10;
    if ((v10 & 0xFF00000000) == 0)
      break;
    if ((_DWORD)v10)
    {
      v22 = 0;
      while (1)
      {
        v23 = *((unsigned __int8 *)result + v22);
        if ((v23 - 9) >= 5 && v23 != 32)
          break;
        if (v10 == ++v22)
        {
          v10 = 0x100000000;
          result = (unsigned int *)"";
          goto LABEL_13;
        }
      }
      if ((_DWORD)v10 != 1)
      {
        v24 = (v10 - 1);
        while (v24 < v10)
        {
          v25 = *((unsigned __int8 *)result + v24);
          if ((v25 - 9) < 5 || v25 == 32)
          {
            if ((_DWORD)--v24)
              continue;
          }
          if (!(_DWORD)v22 && (_DWORD)v24 == (_DWORD)v10 - 1)
            goto LABEL_13;
          goto LABEL_60;
        }
        goto LABEL_65;
      }
      if ((_DWORD)v22)
      {
        LODWORD(v24) = 0;
LABEL_60:
        v31 = (v24 - v22 + 1);
        if ((unint64_t)v10 - v22 < v31)
          goto LABEL_65;
        result = (unsigned int *)((char *)result + v22);
        v10 = v31 | 0x100000000;
      }
    }
LABEL_13:
    v36 = result;
    v37 = v10;
    WTF::StringView::toString((uint64_t *)&v33, (WTF::StringView *)&v36);
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, unsigned int *, unint64_t))(*(_QWORD *)*a3 + 16))(&v32, *a3, v36, v37);
    v14 = v32;
    v13 = v33;
    v32 = 0;
    v33 = 0;
    v34 = v13;
    v35 = v14;
    v15 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::String>>(a1, (unint64_t)&v34);
    }
    else
    {
      v16 = v15 + 1;
      v17 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16 * v15);
      v34 = 0;
      *v17 = v13;
      v18 = v35;
      v35 = 0;
      v17[1] = v18;
      *(_DWORD *)(a1 + 12) = v16;
    }
    WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v34, v12);
    v20 = v32;
    v32 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v33;
    v33 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    WTF::StringView::SplitResult::Iterator::operator++();
  }
  if (!(_DWORD)v10)
    goto LABEL_13;
  v26 = 0;
  v27 = result;
  while (1)
  {
    v28 = *(unsigned __int16 *)v27;
    if ((v28 - 9) >= 5 && v28 != 32)
      break;
    ++v26;
    v27 = (unsigned int *)((char *)v27 + 2);
    if (v10 == v26)
    {
      v10 = 0x100000000;
      result = (unsigned int *)"";
      goto LABEL_13;
    }
  }
  if ((_DWORD)v10 == 1)
  {
    if ((_DWORD)v26)
    {
      LODWORD(v29) = 0;
LABEL_64:
      v10 = (v29 - v26 + 1);
      result = v27;
      if (v11 - v26 < v10)
        goto LABEL_65;
    }
    goto LABEL_13;
  }
  v29 = (v10 - 1);
  while (v29 < v10)
  {
    v30 = *((unsigned __int16 *)result + v29);
    if ((v30 - 9) < 5 || v30 == 32)
    {
      if ((_DWORD)--v29)
        continue;
    }
    if (!(_DWORD)v26 && (_DWORD)v29 == (_DWORD)v10 - 1)
      goto LABEL_13;
    goto LABEL_64;
  }
LABEL_65:
  __break(1u);
  return result;
}

WebCore::CachedResource::ResponseData *WebCore::CachedResource::ResponseData::ResponseData(WebCore::CachedResource::ResponseData *this, WebCore::CachedResource *a2)
{
  WTF *v4;
  char v5;
  int64x2_t v6;
  double v7;
  uint64_t v8;
  unint64_t StatusReg;
  unsigned int *v10;
  unsigned int v11;

  *(_QWORD *)this = 0;
  v4 = (WTF *)WTF::URL::invalidate(this);
  *((_BYTE *)this + 128) = 0;
  *((_WORD *)this + 68) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  v5 = *((_BYTE *)this + 138);
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 9) = v6;
  *((int64x2_t *)this + 10) = v6;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0x8000000000000000;
  *(int64x2_t *)((char *)this + 200) = v6;
  *((_QWORD *)this + 27) = 0x7FF8000000000000;
  *((_BYTE *)this + 224) &= 0xF0u;
  *((_WORD *)this + 116) &= 0xC000u;
  *((_BYTE *)this + 234) = *((_BYTE *)this + 234) & 0xF8 | 2;
  *((_QWORD *)this + 30) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 138) = v5 & 0xC0 | 5;
  v7 = 5.0;
  if ((*((_BYTE *)a2 + 556) & 0x1F) != 3)
  {
    if ((WTF::isMainThread(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941AF0A0);
    }
    {
      WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    v7 = *(double *)&qword_1ECE908B8;
  }
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E33F89B0;
  *(_OWORD *)(v8 + 8) = xmmword_1969F2C80;
  *(_QWORD *)(v8 + 24) = a2;
  *((_QWORD *)this + 32) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v10 = *(unsigned int **)(StatusReg + 736);
  if (!v10)
    v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *((_QWORD *)this + 32) = off_1E33DC988;
  *((_QWORD *)this + 37) = v10;
  *((_QWORD *)this + 38) = v8;
  *((double *)this + 39) = v7;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  WTF::URL::invalidate((WebCore::CachedResource::ResponseData *)((char *)this + 328));
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = 0;
  *(_QWORD *)((char *)this + 374) = 0;
  *((_BYTE *)this + 392) = 1;
  *((_QWORD *)this + 50) = 0;
  return this;
}

void WebCore::SubresourceLoader::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *this, uint64_t *a3)
{
  uint64_t v5;
  WebCore *v6;
  WTF::StringImpl *v7;
  const WTF::String *v8;
  WebCore::LegacyPreviewLoader *v9;
  WebCore::LegacyPreviewLoader *v10;
  void *v11;
  WebCore::LegacyPreviewLoader *v12;
  WTF *v13;
  void *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::CachedResourceLoader *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  _DWORD **v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  const void *v28;
  uint64_t v29;
  CFTypeRef v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  const void *v41;
  WebCore::CachedResource *v42;
  WTF *v43;
  WebCore *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  WTF::StringImpl *v50;
  _QWORD *v51;
  uint64_t v52;
  CFTypeRef v53;
  void *v54;
  uint64_t isMainThread;
  uint64_t v56;
  void *v57;
  WebCore *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  int v72;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  const void *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  CFTypeRef v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  WebCore::FragmentedSharedBuffer *v86;
  WTF::StringImpl *v87;
  _DWORD *v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  const void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  _DWORD *v99;
  __int128 v100;
  WTF::StringImpl *v101;
  CFTypeRef v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  __int128 v122;
  WTF::StringImpl *v123;
  CFTypeRef v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  void *v129;
  WTF *v130;
  void *v131;
  WTF *v132;
  void *v133;
  WTF *v134;
  void *v135;
  __int16 v136;
  _BOOL8 v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  WTF::StringImpl *v151;
  char v152;
  unsigned int *v153;
  _DWORD *v154;
  uint64_t v155;
  uint8_t v156[32];
  _OWORD v157[2];
  CFTypeRef cf[2];
  WTF::StringImpl *v159[2];
  int v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  char v164;
  __int16 v165;
  char v166;
  CFTypeRef v167;
  char v168;
  _BYTE buf[12];
  __int16 v170;
  uint64_t v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  _QWORD *v175;
  __int16 v176;
  uint64_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  *a3 = 0;
  if (WebCore::ResourceResponseBase::containsInvalidHTTPHeaders(this))
  {
    v6 = (WebCore *)(a1 + 336);
    if ((*(_BYTE *)(a1 + 520) & 1) != 0)
    {
LABEL_3:
      WebCore::badResponseHeadersError(v6, (uint64_t)v156);
      WebCore::SubresourceLoader::didFail((WebCore::SubresourceLoader *)a1, (WTF::StringImpl **)v156);
LABEL_41:
      v30 = cf[0];
      cf[0] = 0;
      if (v30)
        CFRelease(v30);
      v31 = *(WTF::StringImpl **)&v157[1];
      *(_QWORD *)&v157[1] = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v7);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = *(WTF::StringImpl **)&v156[8];
      *(_QWORD *)&v156[8] = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v7);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = *(WTF::StringImpl **)v156;
      *(_QWORD *)v156 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v7);
        else
          *(_DWORD *)v33 -= 2;
      }
      goto LABEL_52;
    }
LABEL_284:
    WebCore::ResourceRequest::doUpdateResourceRequest(v6);
    *(_BYTE *)(a1 + 520) |= 1u;
    goto LABEL_3;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 1328) + 8) + 556) & 0x1F) == 0 && !*(_QWORD *)(a1 + 320))
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    if (WebCore::PreviewConverter::supportsMIMEType((WebCore::ResourceResponseBase *)((char *)this + 40), v8))
    {
      v9 = (WebCore::LegacyPreviewLoader *)WTF::fastMalloc((WTF *)0x48);
      v10 = WebCore::LegacyPreviewLoader::LegacyPreviewLoader(v9, (WebCore::ResourceLoader *)a1, this);
      v12 = *(WebCore::LegacyPreviewLoader **)(a1 + 320);
      *(_QWORD *)(a1 + 320) = v10;
      if (v12)
      {
        WebCore::LegacyPreviewLoader::~LegacyPreviewLoader(v12, v11);
        WTF::fastFree(v13, v14);
        v10 = *(WebCore::LegacyPreviewLoader **)(a1 + 320);
      }
      if (!*((_BYTE *)v10 + 67))
        goto LABEL_52;
    }
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  if ((*((_WORD *)this + 116) & 0x3C00) == 0x1800)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    if ((*(_BYTE *)(a1 + 520) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 336));
      *(_BYTE *)(a1 + 520) |= 1u;
    }
    if ((WTF::equal(*(WTF **)this, *(const WTF::StringImpl **)(a1 + 336), v15) & 1) == 0)
    {
      v16 = *(_QWORD *)(a1 + 40);
      if (v16)
        ++*(_DWORD *)(v16 + 24);
      v17 = *(WebCore::CachedResourceLoader **)(v16 + 72);
      ++*(_DWORD *)v17;
      if (*(_DWORD *)(v16 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      else
        --*(_DWORD *)(v16 + 24);
      v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 1328) + 8) + 556);
      WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
      *(_QWORD *)v156 = 0;
      WTF::URL::invalidate((WTF::URL *)v156);
      v20 = WebCore::CachedResourceLoader::allowedByContentSecurityPolicy((uint64_t)v17, v18 & 0x1F, this, (_BYTE *)(a1 + 976), 1, (WTF::URL *)v156);
      v21 = *(WTF::StringImpl **)v156;
      *(_QWORD *)v156 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v19);
          if ((v20 & 1) != 0)
          {
LABEL_22:
            if (*(_DWORD *)v17 == 1)
            {
              WebCore::CachedResourceLoader::~CachedResourceLoader(v17, v19);
              WTF::fastFree(v128, v129);
            }
            else
            {
              --*(_DWORD *)v17;
            }
            goto LABEL_24;
          }
LABEL_228:
          v116 = qword_1ECE7C860;
          if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
          {
            v117 = *(_QWORD **)(a1 + 32);
            if (v117)
            {
              v118 = v117[3];
              if (v118)
              {
                v118 = *(_QWORD *)(v118 + 8);
                if (v118)
                {
                  if (*(_BYTE *)(v118 + 40))
                    v118 = *(_QWORD *)(v118 + 32);
                  else
                    v118 = 0;
                }
              }
              v119 = v117[4];
              v117 = (_QWORD *)v117[35];
            }
            else
            {
              v119 = 0;
              v118 = 0;
            }
            v120 = *(_QWORD *)(a1 + 744);
            *(_DWORD *)v156 = 134219008;
            *(_QWORD *)&v156[4] = a1;
            *(_WORD *)&v156[12] = 2048;
            *(_QWORD *)&v156[14] = v118;
            *(_WORD *)&v156[22] = 2048;
            *(_QWORD *)&v156[24] = v119;
            LOWORD(v157[0]) = 2048;
            *(_QWORD *)((char *)v157 + 2) = v117;
            WORD5(v157[0]) = 2048;
            *(_QWORD *)((char *)v157 + 12) = v120;
            _os_log_impl(&dword_1940B8000, v116, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didReceiveResponse: canceling load because not allowed by content policy", v156, 0x34u);
          }
          WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
          *(_QWORD *)v156 = 0;
          v121 = *(_DWORD **)this;
          if (*(_QWORD *)this)
            *v121 += 2;
          *(_QWORD *)&v156[8] = v121;
          v122 = *(_OWORD *)((char *)this + 24);
          *(_OWORD *)&v156[16] = *(_OWORD *)((char *)this + 8);
          v157[0] = v122;
          *(_QWORD *)&v157[1] = 0;
          DWORD2(v157[1]) = 0;
          WORD6(v157[1]) = 1;
          cf[0] = 0;
          LOBYTE(cf[1]) = 1;
          WebCore::ResourceLoader::cancel((WTF::StringImpl *)a1, (uint64_t)v156, 0);
          v124 = cf[0];
          cf[0] = 0;
          if (v124)
            CFRelease(v124);
          v125 = *(WTF::StringImpl **)&v157[1];
          *(_QWORD *)&v157[1] = 0;
          if (v125)
          {
            if (*(_DWORD *)v125 == 2)
              WTF::StringImpl::destroy(v125, v123);
            else
              *(_DWORD *)v125 -= 2;
          }
          v126 = *(WTF::StringImpl **)&v156[8];
          *(_QWORD *)&v156[8] = 0;
          if (v126)
          {
            if (*(_DWORD *)v126 == 2)
              WTF::StringImpl::destroy(v126, v123);
            else
              *(_DWORD *)v126 -= 2;
          }
          v127 = *(WTF::StringImpl **)v156;
          *(_QWORD *)v156 = 0;
          if (v127)
          {
            if (*(_DWORD *)v127 == 2)
              WTF::StringImpl::destroy(v127, v123);
            else
              *(_DWORD *)v127 -= 2;
          }
          if (*(_DWORD *)v17 == 1)
          {
            WebCore::CachedResourceLoader::~CachedResourceLoader(v17, v123);
            WTF::fastFree(v130, v131);
          }
          else
          {
            --*(_DWORD *)v17;
          }
          goto LABEL_52;
        }
        *(_DWORD *)v21 -= 2;
      }
      if ((v20 & 1) != 0)
        goto LABEL_22;
      goto LABEL_228;
    }
  }
LABEL_24:
  v22 = (_DWORD **)(a1 + 336);
  WebCore::validateRangeRequestedFlag((WebCore *)(a1 + 336), this, v156);
  if (LOBYTE(v159[0]))
  {
    v6 = (WebCore *)qword_1ECE7C860;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      goto LABEL_40;
    v24 = *(_QWORD **)(a1 + 32);
    if (v24)
    {
      v25 = v24[3];
      if (v25)
      {
        v25 = *(_QWORD *)(v25 + 8);
        if (v25)
        {
          if (*(_BYTE *)(v25 + 40))
            v25 = *(_QWORD *)(v25 + 32);
          else
            v25 = 0;
        }
      }
      v26 = v24[4];
      v24 = (_QWORD *)v24[35];
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    v29 = *(_QWORD *)(a1 + 744);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    v170 = 2048;
    v171 = v25;
    v172 = 2048;
    v173 = v26;
    v174 = 2048;
    v175 = v24;
    v176 = 2048;
    v177 = v29;
    _os_log_impl(&dword_1940B8000, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didReceiveResponse: canceling load because receiving a range requested response for a non-range request", buf, 0x34u);
    if (LOBYTE(v159[0]))
    {
LABEL_40:
      WebCore::ResourceLoader::cancel((WTF::StringImpl *)a1, (uint64_t)v156, 0);
      if (!LOBYTE(v159[0]))
        goto LABEL_52;
      goto LABEL_41;
    }
    goto LABEL_283;
  }
  ++*(_DWORD *)(a1 + 16);
  if (((*(_BYTE *)(a1 + 1090) & 0x80) == 0
     || (v27 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0)
    && !*((_BYTE *)this + 128))
  {
    WebCore::ResourceResponse::platformCertificateInfo((uint64_t)this, 0, 0, (__SecTrust **)v156);
    if (*((_BYTE *)this + 128))
    {
      v28 = (const void *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = *(_QWORD *)v156;
      if (v28)
        CFRelease(v28);
    }
    else
    {
      *((_QWORD *)this + 15) = *(_QWORD *)v156;
      *((_BYTE *)this + 128) = 1;
    }
  }
  v34 = *(_QWORD *)(a1 + 1328);
  if (!v34)
    goto LABEL_61;
  v35 = *(_QWORD *)(v34 + 8);
  if (!v35)
    goto LABEL_61;
  v36 = *(unsigned int **)(v35 + 8);
  if (v36)
    goto LABEL_332;
  v36 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *v36 = 1;
  *((_QWORD *)v36 + 1) = v35;
  v148 = *(unsigned int **)(v35 + 8);
  *(_QWORD *)(v35 + 8) = v36;
  if (!v148)
    goto LABEL_332;
  do
  {
    v149 = __ldaxr(v148);
    v150 = v149 - 1;
  }
  while (__stlxr(v150, v148));
  if (!v150)
  {
    atomic_store(1u, v148);
    WTF::fastFree((WTF *)v148, v23);
  }
  v36 = *(unsigned int **)(v35 + 8);
  if (v36)
  {
LABEL_332:
    do
      v145 = __ldaxr(v36);
    while (__stlxr(v145 + 1, v36));
    v153 = v36;
    v146 = *((_QWORD *)v36 + 1);
    if (v146)
    {
      *(_QWORD *)buf = &v153;
      ++*(_DWORD *)(v146 + 548);
      v147 = *(_QWORD *)(v146 + 488);
      if (!v147
        || !*(_QWORD *)(v147 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v146 + 464), (uint64_t *)buf, (uint64_t)v156), (v36 = v153) != 0))
      {
        v38 = *((_QWORD *)v36 + 1);
        if (v38)
          goto LABEL_65;
      }
    }
  }
  else
  {
LABEL_61:
    v36 = 0;
    v153 = 0;
  }
  v37 = qword_1ECE7C478;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v156 = 0;
    _os_log_fault_impl(&dword_1940B8000, v37, OS_LOG_TYPE_FAULT, "Resource was unexpectedly null in SubresourceLoader::didReceiveResponse", v156, 2u);
    v36 = v153;
    if (!v153)
      goto LABEL_108;
  }
  else if (!v36)
  {
    goto LABEL_108;
  }
  v38 = *((_QWORD *)v36 + 1);
  if (!v38)
    goto LABEL_108;
LABEL_65:
  v39 = *(_QWORD *)(v38 + 488);
  if (v39 && *(_QWORD *)(v39 + 8))
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
    if (*((_WORD *)this + 68) == 304)
    {
      WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v156, this);
      v41 = (const void *)*((_QWORD *)this + 30);
      v167 = v41;
      if (v41)
        CFRetain(v41);
      v168 = *((_BYTE *)this + 248);
      v165 = v165 & 0xC3FF | 0x1400;
      if (v153)
        v42 = (WebCore::CachedResource *)*((_QWORD *)v153 + 1);
      else
        v42 = 0;
      v43 = (WTF *)WebCore::CachedResource::setResponse(v42, (const WebCore::ResourceResponse *)v156);
      if ((WTF::isMainThread(v43) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941B027CLL);
      }
      {
        WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
      }
      WebCore::MemoryCache::revalidationSucceeded((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, *((WebCore::CachedResource **)v153 + 1), (const WebCore::ResourceResponse *)v156);
      v46 = *(_QWORD *)(a1 + 32);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 24);
        if (v47)
        {
          v48 = *(_QWORD *)(v47 + 8);
          if (v48)
          {
            ++*(_DWORD *)v48;
            if ((*(_QWORD *)(*(_QWORD *)(v48 + 112) + 672) & 0x800000000000) == 0
              || (v49 = *(uint64_t **)(v48 + 256)) == 0)
            {
              v49 = WebCore::emptyDiagnosticLoggingClient(v44);
            }
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            (*(void (**)(uint64_t *, _BYTE *, _QWORD, _QWORD, uint64_t))(*v49 + 8))(v49, buf, MEMORY[0x1E0CBF738], 0, 1);
            v50 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v45);
              else
                *(_DWORD *)v50 -= 2;
            }
            if (*(_DWORD *)v48 == 1)
            {
              WebCore::Page::~Page(v48);
              WTF::fastFree(v132, v133);
            }
            else
            {
              --*(_DWORD *)v48;
            }
          }
        }
      }
      if (!*(_BYTE *)(a1 + 752))
      {
        v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v51 = &off_1E33F7BF8;
        v51[1] = v5;
        *(_QWORD *)buf = v51;
        WebCore::ResourceLoader::didReceiveResponse(a1, (uint64_t)v156, (uint64_t *)buf);
        v52 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
        v5 = 0;
      }
      v53 = v167;
      v167 = 0;
      if (v53)
        CFRelease(v53);
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v156, v45);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v153, v54);
LABEL_201:
      if (*(_DWORD *)(a1 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
      else
        --*(_DWORD *)(a1 + 16);
      goto LABEL_52;
    }
    isMainThread = WTF::isMainThread(v40);
    if ((isMainThread & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941B029CLL);
    }
    {
      isMainThread = (uint64_t)WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
    }
    if (v153)
      v56 = *((_QWORD *)v153 + 1);
    else
      v56 = 0;
    if ((WTF::isMainThread((WTF *)isMainThread) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941B02BCLL);
    }
    v58 = (WebCore *)WebCore::CachedResource::clearResourceToRevalidate(v56, v57);
    v59 = *(_QWORD *)(a1 + 32);
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 24);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 8);
        if (v61)
        {
          ++*(_DWORD *)v61;
          if ((*(_QWORD *)(*(_QWORD *)(v61 + 112) + 672) & 0x800000000000) == 0
            || (v62 = *(uint64_t **)(v61 + 256)) == 0)
          {
            v62 = WebCore::emptyDiagnosticLoggingClient(v58);
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(uint64_t *, uint8_t *, _QWORD, uint64_t, uint64_t))(*v62 + 8))(v62, v156, MEMORY[0x1E0CBF738], 1, 1);
          v63 = *(WTF::StringImpl **)v156;
          *(_QWORD *)v156 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v23);
            else
              *(_DWORD *)v63 -= 2;
          }
          if (*(_DWORD *)v61 == 1)
          {
            WebCore::Page::~Page(v61);
            WTF::fastFree(v134, v135);
          }
          else
          {
            --*(_DWORD *)v61;
          }
        }
      }
    }
  }
LABEL_108:
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1328) + 8) + 557) & 3) == 0 || *(_BYTE *)(a1 + 977) != 3)
    goto LABEL_109;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  v136 = *((_WORD *)this + 116);
  if ((v136 & 0x3C00) == 0x1800)
  {
    if ((v136 & 0x300) == 0x200)
    {
      v151 = 0;
      v152 = 1;
      goto LABEL_110;
    }
LABEL_109:
    LOBYTE(v151) = 0;
    v152 = 0;
    goto LABEL_110;
  }
  v137 = *(unsigned __int8 *)(a1 + 978) == 2;
  v138 = *(_QWORD *)(a1 + 1368);
  if (v138)
  {
    do
      v139 = __ldaxr((unsigned int *)v138);
    while (__stlxr(v139 + 1, (unsigned int *)v138));
  }
  {
    WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler = (uint64_t)&off_1E33F3298;
    unk_1ECE90770 = 1;
  }
  WebCore::passesAccessControlCheck((uint64_t)this, (WTF::StringImpl *)v137, (WTF::StringImpl *)v138, (uint64_t)&WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler, &v151);
  do
  {
    v140 = __ldaxr((unsigned int *)v138);
    v141 = v140 - 1;
  }
  while (__stlxr(v141, (unsigned int *)v138));
  if (!v141)
  {
    atomic_store(1u, (unsigned int *)v138);
    v142 = *(WTF::StringImpl **)(v138 + 48);
    *(_QWORD *)(v138 + 48) = 0;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2)
        WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v142 -= 2;
    }
    v143 = *(WTF::StringImpl **)(v138 + 40);
    *(_QWORD *)(v138 + 40) = 0;
    if (v143)
    {
      if (*(_DWORD *)v143 == 2)
        WTF::StringImpl::destroy(v143, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v143 -= 2;
    }
    v144 = *(unsigned int *)(v138 + 32);
    if ((_DWORD)v144 != -1)
      ((void (*)(uint8_t *, uint64_t))off_1E33F7B38[v144])(v156, v138 + 8);
    *(_DWORD *)(v138 + 32) = -1;
    WTF::fastFree((WTF *)v138, v23);
  }
LABEL_110:
  if (!v152)
  {
    v70 = *((__int16 *)this + 68) - 301;
    v71 = v70 > 7;
    v72 = (1 << v70) & 0xC7;
    if (v71 || v72 == 0)
    {
LABEL_144:
      if (*(_BYTE *)(a1 + 1644))
      {
        if ((*(_BYTE *)(a1 + 1522) & 1) == 0)
        {
          if (v153)
          {
            v83 = *((_QWORD *)v153 + 1);
            if (v83)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 128))(v83, a1 + 1384);
              if (v153)
                v85 = *((_QWORD *)v153 + 1);
              else
                v85 = 0;
              v86 = (WebCore::FragmentedSharedBuffer *)WebCore::ResourceLoader::resourceData((WebCore::ResourceLoader *)a1, v84);
              WebCore::FragmentedSharedBuffer::copy(v86, (uint64_t *)buf);
              v160 = 0;
              *(_OWORD *)cf = 0u;
              *(_OWORD *)v159 = 0u;
              memset(v157, 0, sizeof(v157));
              memset(v156, 0, sizeof(v156));
              v161 = -1;
              v162 = -1;
              v163 = 0;
              (*(void (**)(uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v85 + 64))(v85, *(_QWORD *)buf, v156);
              v88 = v163;
              v163 = 0;
              if (v88)
                WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v88, v87);
              v89 = v159[1];
              v159[1] = 0;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                  WTF::StringImpl::destroy(v89, v87);
                else
                  *(_DWORD *)v89 -= 2;
              }
              WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)buf, v87);
            }
          }
        }
        if (*(_QWORD *)(a1 + 736))
          WebCore::SharedBufferBuilder::empty((WebCore::SharedBufferBuilder *)(a1 + 736));
        WebCore::ResourceResponseBase::operator=(a1 + 1384, (uint64_t)this);
        v90 = *((_QWORD *)this + 30);
        if (v90)
          CFRetain(*((CFTypeRef *)this + 30));
        v91 = *(const void **)(a1 + 1624);
        *(_QWORD *)(a1 + 1624) = v90;
        if (v91)
          CFRelease(v91);
        *(_BYTE *)(a1 + 1632) = *((_BYTE *)this + 248);
        v160 = 0;
        *(_OWORD *)cf = 0u;
        *(_OWORD *)v159 = 0u;
        memset(v157, 0, sizeof(v157));
        memset(v156, 0, sizeof(v156));
        v161 = -1;
        v162 = -1;
        v163 = 0;
        v92 = *(_QWORD *)(a1 + 40);
        if (v92)
          ++*(_DWORD *)(v92 + 24);
        v93 = *(_QWORD *)(a1 + 744);
        v154 = (_DWORD *)a1;
        v155 = v93;
        WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::add<WebCore::ResourceLoader*>((uint64_t *)(v92 + 96), &v155, &v154, (uint64_t)buf);
        if (BYTE2(v171))
          WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)(v92 + 88), &v155);
        WebCore::DocumentLoader::checkLoadComplete((_DWORD *)v92);
        v94 = *(_QWORD *)(v92 + 16);
        if (v94)
        {
          v95 = *(_QWORD *)(v94 + 8);
          if (v95)
            WebCore::FrameLoader::checkLoadComplete(*(WTF **)(v95 + 280), 0);
        }
        if (*(_DWORD *)(v92 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92);
        else
          --*(_DWORD *)(v92 + 24);
        WebCore::ResourceLoader::didFinishLoadingOnePart((WebCore::ResourceLoader *)a1, (const WebCore::NetworkLoadMetrics *)v156);
        v96 = v163;
        v163 = 0;
        if (v96)
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v96, (WTF::StringImpl *)v23);
        v97 = v159[1];
        v159[1] = 0;
        if (v97)
        {
          if (*(_DWORD *)v97 == 2)
            WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v23);
          else
            *(_DWORD *)v97 -= 2;
        }
      }
      else if (v153)
      {
        v107 = *((_QWORD *)v153 + 1);
        if (v107)
          (*(void (**)(uint64_t, WebCore::ResourceResponseBase *))(*(_QWORD *)v107 + 128))(v107, this);
      }
      if (!*(_BYTE *)(a1 + 752))
      {
        WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
        v108 = MEMORY[0x19AEA53F4](*((_QWORD *)this + 5), "multipart/x-mixed-replace", 25);
        if (*(_BYTE *)(a1 + 977))
        {
          WebCore::ResourceResponseBase::httpHeaderField((uint64_t)this, 51, (WTF::StringImpl **)v156);
          v109 = *(_QWORD *)(a1 + 40);
          if (v109)
            ++*(_DWORD *)(v109 + 24);
          v110 = v109 + 872;
          if ((*(_BYTE *)(v109 + 1056) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v109 + 872));
            v110 = v109 + 872;
            *(_BYTE *)(v109 + 1056) |= 1u;
          }
          v111 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 296);
          if (v111)
            *(_DWORD *)(v111 + 24) += 2;
          WebCore::LinkLoader::loadLinksFromHeader((WTF::String *)v156, v110, (const WebCore::LinkLoadParameters *)v111, 2);
          if (*(_DWORD *)(v111 + 24) == 2)
          {
            if ((*(_WORD *)(v111 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v111, v112);
          }
          else
          {
            *(_DWORD *)(v111 + 24) -= 2;
          }
          if (*(_DWORD *)(v109 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v109 + 24))(v109);
          else
            --*(_DWORD *)(v109 + 24);
          v113 = *(WTF::StringImpl **)v156;
          *(_QWORD *)v156 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v112);
            else
              *(_DWORD *)v113 -= 2;
          }
        }
        v114 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v114 = &off_1E33F7C48;
        *(_QWORD *)(v114 + 8) = a1;
        *(_QWORD *)(v114 + 16) = a1;
        *(_BYTE *)(v114 + 24) = v108;
        *(_QWORD *)(v114 + 32) = v5;
        *(_QWORD *)v156 = v114;
        WebCore::ResourceLoader::didReceiveResponse(a1, (uint64_t)this, (uint64_t *)v156);
        v115 = *(_QWORD *)v156;
        *(_QWORD *)v156 = 0;
        if (v115)
          (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
        a1 = 0;
        v5 = 0;
      }
      goto LABEL_196;
    }
    v74 = *(unsigned __int8 *)(a1 + 980);
    if (*(_BYTE *)(a1 + 980))
    {
LABEL_131:
      if (v74 == 2)
      {
        WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v156, this);
        v78 = (const void *)*((_QWORD *)this + 30);
        v167 = v78;
        if (v78)
          CFRetain(v78);
        v168 = *((_BYTE *)this + 248);
        v164 &= ~1u;
        v166 = v166 & 0xF8 | 5;
        v165 |= 0x300u;
        if (v153)
        {
          v79 = *((_QWORD *)v153 + 1);
          if (v79)
            (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v79 + 128))(v79, v156);
        }
        if (!*(_BYTE *)(a1 + 752))
        {
          v80 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v80 = &off_1E33F7C20;
          v80[1] = v5;
          *(_QWORD *)buf = v80;
          WebCore::ResourceLoader::didReceiveResponse(a1, (uint64_t)v156, (uint64_t *)buf);
          v81 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          if (v81)
            (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
          v5 = 0;
        }
        v82 = v167;
        v167 = 0;
        if (v82)
          CFRelease(v82);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v156, v77);
        goto LABEL_196;
      }
      goto LABEL_144;
    }
    WebCore::ResourceResponseBase::httpHeaderField((uint64_t)this, 52, (WTF::StringImpl **)v156);
    v75 = *(WTF::StringImpl **)v156;
    if (*(_QWORD *)v156)
    {
      v76 = *(_DWORD *)(*(_QWORD *)v156 + 4);
      *(_QWORD *)v156 = 0;
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v23);
        if (v76)
          goto LABEL_130;
      }
      else
      {
        *(_DWORD *)v75 -= 2;
        if (v76)
          goto LABEL_130;
      }
      WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)a1);
      goto LABEL_196;
    }
LABEL_130:
    v74 = *(unsigned __int8 *)(a1 + 980);
    goto LABEL_131;
  }
  v64 = *(_QWORD *)(a1 + 32);
  if (v64)
  {
    v65 = *(_QWORD *)(v64 + 296);
    if (v65)
    {
      *(_DWORD *)(v65 + 24) += 2;
      WebCore::Document::addConsoleMessage((_QWORD *)v65, 8, 2, &v151, 0);
      if (*(_DWORD *)(v65 + 24) == 2)
      {
        if ((*(_WORD *)(v65 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v65, v66);
      }
      else
      {
        *(_DWORD *)(v65 + 24) -= 2;
      }
    }
  }
  v6 = (WebCore *)qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v67 = *(_QWORD **)(a1 + 32);
    if (v67)
    {
      v68 = v67[3];
      if (v68)
      {
        v68 = *(_QWORD *)(v68 + 8);
        if (v68)
        {
          if (*(_BYTE *)(v68 + 40))
            v68 = *(_QWORD *)(v68 + 32);
          else
            v68 = 0;
        }
      }
      v69 = v67[4];
      v67 = (_QWORD *)v67[35];
    }
    else
    {
      v69 = 0;
      v68 = 0;
    }
    v98 = *(_QWORD *)(a1 + 744);
    *(_DWORD *)v156 = 134219008;
    *(_QWORD *)&v156[4] = a1;
    *(_WORD *)&v156[12] = 2048;
    *(_QWORD *)&v156[14] = v68;
    *(_WORD *)&v156[22] = 2048;
    *(_QWORD *)&v156[24] = v69;
    LOWORD(v157[0]) = 2048;
    *(_QWORD *)((char *)v157 + 2) = v67;
    WORD5(v157[0]) = 2048;
    *(_QWORD *)((char *)v157 + 12) = v98;
    _os_log_impl(&dword_1940B8000, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didReceiveResponse: canceling load because of cross origin access control", v156, 0x34u);
  }
  if ((*(_BYTE *)(a1 + 520) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a1 + 336));
    *(_BYTE *)(a1 + 520) |= 1u;
  }
  if (!v152)
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }
  *(_QWORD *)v156 = 0;
  v99 = *v22;
  if (*v22)
    *v99 += 2;
  *(_QWORD *)&v156[8] = v99;
  v100 = *(_OWORD *)(a1 + 360);
  *(_OWORD *)&v156[16] = *(_OWORD *)(a1 + 344);
  v157[0] = v100;
  v101 = v151;
  if (v151)
    *(_DWORD *)v151 += 2;
  *(_QWORD *)&v157[1] = v101;
  DWORD2(v157[1]) = 0;
  WORD6(v157[1]) = 2;
  cf[0] = 0;
  LOBYTE(cf[1]) = 1;
  WebCore::ResourceLoader::cancel((WTF::StringImpl *)a1, (uint64_t)v156, 0);
  v102 = cf[0];
  cf[0] = 0;
  if (v102)
    CFRelease(v102);
  v103 = *(WTF::StringImpl **)&v157[1];
  *(_QWORD *)&v157[1] = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = *(WTF::StringImpl **)&v156[8];
  *(_QWORD *)&v156[8] = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v104 -= 2;
  }
  v105 = *(WTF::StringImpl **)v156;
  *(_QWORD *)v156 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v105 -= 2;
  }
LABEL_196:
  if (v152)
  {
    v106 = v151;
    v151 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v106 -= 2;
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v153, v23);
  if (a1)
    goto LABEL_201;
LABEL_52:
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void WebCore::ResourceResponseBase::httpHeaderField(uint64_t a1@<X0>, int a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  char v6;
  unint64_t v7;
  unint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  int v16;

  v6 = 1;
  WebCore::ResourceResponse::platformLazyInit(a1, 1);
  v7 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 80) + 8);
    while (*((unsigned __int16 *)v9 - 4) != a2)
    {
      ++v8;
      v9 += 2;
      if (v7 == v8)
      {
        v10 = 0;
        goto LABEL_6;
      }
    }
    if (v8 >= v7)
      goto LABEL_26;
    v10 = *v9;
    if (*v9)
    {
      v16 = *((_DWORD *)v10 + 1);
      *(_DWORD *)v10 += 2;
      if (v16)
      {
        *a3 = v10;
        return;
      }
      v6 = 0;
    }
    else
    {
LABEL_6:
      v6 = 1;
    }
  }
  else
  {
    v10 = 0;
  }
  WebCore::ResourceResponse::platformLazyInit(a1, 2);
  v12 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 80) + 8);
    while (*((unsigned __int16 *)v14 - 4) != a2)
    {
      ++v13;
      v14 += 2;
      if (v12 == v13)
        goto LABEL_12;
    }
    if (v13 < v12)
    {
      v15 = *v14;
      if (*v14)
        *(_DWORD *)v15 += 2;
      goto LABEL_13;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x1941B05C4);
  }
LABEL_12:
  v15 = 0;
LABEL_13:
  *a3 = v15;
  if ((v6 & 1) == 0)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v11);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void WebCore::ResourceResponse::platformLazyInit(uint64_t a1, int a2)
{
  unsigned int v2;
  void *v5;
  __CFHTTPMessage *HTTPResponse;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const __CFDictionary *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  CFStringRef v30;
  WTF::StringImpl *v31;
  CFStringRef v32;
  double v33;
  double v34;
  float v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  CFStringRef v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl **v43;
  char v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  _BYTE *v53;
  unsigned int v54;
  unint64_t v55;
  _BYTE *v56;
  unint64_t v57;
  unsigned int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  _BYTE context[40];
  WTF::StringImpl *v62;

  v2 = *(unsigned __int8 *)(a1 + 138);
  if ((v2 & 1) == 0 && (int)((v2 >> 1) & 7) < a2 && *(_QWORD *)(a1 + 240))
  {
    v5 = (void *)MEMORY[0x19AEA7E30]();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 240), "_CFURLResponse");
      HTTPResponse = (__CFHTTPMessage *)CFURLResponseGetHTTPResponse();
    }
    else
    {
      HTTPResponse = 0;
    }
    if ((*(_BYTE *)(a1 + 138) & 0xE) != 0)
      goto LABEL_44;
    MEMORY[0x19AEA52E0](context, objc_msgSend(*(id *)(a1 + 240), "URL"));
    v8 = *(_QWORD *)context;
    *(_QWORD *)context = 0;
    v9 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v7);
        v10 = *(WTF::StringImpl **)context;
      }
      else
      {
        v10 = 0;
        *(_DWORD *)v9 -= 2;
      }
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_DWORD *)&context[8];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&context[8];
    *(_DWORD *)&context[8] = v11 & 0xFFFFFFFE;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&context[24];
    *(_QWORD *)context = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
    MEMORY[0x19AEA5508](context, objc_msgSend(*(id *)(a1 + 240), "MIMEType"));
    v13 = *(_QWORD *)context;
    *(_QWORD *)context = 0;
    v14 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    if (v14)
    {
      v15 = *(_DWORD *)v14 - 2;
      if (*(_DWORD *)v14 != 2)
      {
LABEL_16:
        *(_DWORD *)v14 = v15;
        goto LABEL_17;
      }
      WTF::StringImpl::destroy(v14, v12);
      v14 = *(WTF::StringImpl **)context;
      *(_QWORD *)context = 0;
      if (v14)
      {
        v15 = *(_DWORD *)v14 - 2;
        if (*(_DWORD *)v14 != 2)
          goto LABEL_16;
        WTF::StringImpl::destroy(v14, v52);
      }
    }
LABEL_17:
    *(_QWORD *)(a1 + 48) = objc_msgSend(*(id *)(a1 + 240), "expectedContentLength");
    MEMORY[0x19AEA5508](&v60, objc_msgSend(*(id *)(a1 + 240), "textEncodingName"));
    v17 = v60;
    if (!v60)
    {
LABEL_21:
      v62 = v17;
LABEL_22:
      if (v17)
        *(_DWORD *)v17 += 2;
      v20 = *(WTF::StringImpl **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v17;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::destroy(v20, v16);
          v17 = v62;
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      v62 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      v21 = v60;
      v60 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v16);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (!HTTPResponse)
      {
        *(_WORD *)(a1 + 136) = 0;
        goto LABEL_77;
      }
      *(_WORD *)(a1 + 136) = CFHTTPMessageGetResponseStatusCode(HTTPResponse);
      v22 = CFHTTPMessageCopyAllHeaderFields(HTTPResponse);
      memset(context, 0, 32);
      CFDictionaryApplyFunction(v22, (CFDictionaryApplierFunction)WebCore::addToHTTPHeaderMap, context);
      if (v22)
        CFRelease(v22);
      v24 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v24)
      {
        v49 = 16 * v24;
        v50 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 80) + 8);
        do
        {
          v51 = *v50;
          *v50 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v23);
            else
              *(_DWORD *)v51 -= 2;
          }
          v50 += 2;
          v49 -= 16;
        }
        while (v49);
      }
      v25 = *(WTF **)(a1 + 80);
      if (v25)
      {
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 88) = 0;
        WTF::fastFree(v25, v23);
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)context;
      v26 = *(_QWORD *)&context[8];
      *(_OWORD *)context = 0uLL;
      *(_QWORD *)(a1 + 88) = v26;
      v27 = *(unsigned int *)(a1 + 108);
      if ((_DWORD)v27)
        WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*(WTF::StringImpl **)(a1 + 96), (WTF::StringImpl *)(*(_QWORD *)(a1 + 96) + 16 * v27));
      v28 = *(WTF **)(a1 + 96);
      if (v28)
      {
        *(_QWORD *)(a1 + 96) = 0;
        *(_DWORD *)(a1 + 104) = 0;
        WTF::fastFree(v28, v23);
      }
      *(_QWORD *)(a1 + 96) = *(_QWORD *)&context[16];
      v29 = *(_QWORD *)&context[24];
      *(_QWORD *)&context[16] = 0;
      *(_QWORD *)&context[24] = 0;
      *(_QWORD *)(a1 + 104) = v29;
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)context, v23);
LABEL_44:
      if (a2 == 2 && HTTPResponse)
      {
        v30 = CFHTTPMessageCopyResponseStatusLine(HTTPResponse);
        if (v30)
        {
          v32 = v30;
          v33 = MEMORY[0x19AEA5508](context, v30);
          WebCore::extractReasonPhraseFromHTTPStatusLine((uint64_t *)context, &v62, v33, v34, v35);
          v37 = *(WTF::StringImpl **)context;
          *(_QWORD *)context = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v36);
            else
              *(_DWORD *)v37 -= 2;
          }
          CFRelease(v32);
          v38 = v62;
          goto LABEL_51;
        }
        if ((_MergedGlobals_109 & 1) != 0)
        {
LABEL_122:
          v38 = (WTF::StringImpl *)qword_1ECE81390;
          if (qword_1ECE81390)
            *(_DWORD *)qword_1ECE81390 += 2;
          v62 = v38;
LABEL_51:
          if (v38)
            *(_DWORD *)v38 += 2;
          v39 = *(WTF::StringImpl **)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v38;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::destroy(v39, v31);
              v38 = v62;
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          v62 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v31);
            else
              *(_DWORD *)v38 -= 2;
          }
          v40 = CFHTTPMessageCopyVersion(HTTPResponse);
          MEMORY[0x19AEA5508](&v59, v40);
          WTF::String::convertToASCIIUppercase((WTF::String *)&v59);
          v42 = v60;
          v60 = 0;
          if (v42)
          {
            v62 = v42;
            if ((*((_BYTE *)v42 + 16) & 0x10) != 0)
            {
              v43 = (WTF::StringImpl **)(a1 + 72);
LABEL_62:
              v44 = 0;
              *(_DWORD *)v42 += 2;
LABEL_63:
              v45 = *v43;
              *v43 = v42;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v41);
                else
                  *(_DWORD *)v45 -= 2;
              }
              if ((v44 & 1) == 0)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, v41);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v46 = v60;
              v60 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, v41);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = v59;
              v59 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, v41);
                else
                  *(_DWORD *)v47 -= 2;
              }
              if (v40)
                CFRelease(v40);
              goto LABEL_77;
            }
            WTF::AtomStringImpl::addSlowCase();
            v48 = v62;
            v42 = *(WTF::StringImpl **)context;
            *(_QWORD *)context = 0;
            v62 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, v41);
              else
                *(_DWORD *)v48 -= 2;
            }
            v43 = (WTF::StringImpl **)(a1 + 72);
            if (v42)
              goto LABEL_62;
          }
          else
          {
            v43 = (WTF::StringImpl **)(a1 + 72);
          }
          v44 = 1;
          goto LABEL_63;
        }
LABEL_133:
        *(_QWORD *)context = "OK";
        *(_QWORD *)&context[8] = 3;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE81390, (uint64_t)context);
        _MergedGlobals_109 = 1;
        goto LABEL_122;
      }
LABEL_77:
      objc_autoreleasePoolPop(v5);
      *(_BYTE *)(a1 + 138) = *(_BYTE *)(a1 + 138) & 0xF1 | (2 * (a2 & 7));
      return;
    }
    v18 = *((unsigned int *)v60 + 1);
    v19 = *((_DWORD *)v60 + 4);
    if (v18 < 2)
    {
LABEL_19:
      if ((v19 & 0x10) != 0)
      {
        *(_DWORD *)v60 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(v60, v16);
        v17 = *(WTF::StringImpl **)context;
      }
      goto LABEL_21;
    }
    v53 = (_BYTE *)*((_QWORD *)v60 + 1);
    if ((v19 & 4) != 0)
    {
      if (*v53 != 34)
        goto LABEL_19;
      v54 = v18 - 1;
      if (v53[(v18 - 1)] != 34)
        goto LABEL_19;
      LODWORD(v55) = v18 - 2;
      if (v54 >= (int)v18 - 2)
        v55 = v55;
      else
        v55 = v54;
      if (v18 - 1 >= v55)
      {
        v56 = v53 + 1;
        v57 = v55 | 0x100000000;
LABEL_117:
        *(_QWORD *)context = v56;
        *(_QWORD *)&context[8] = v57;
        WTF::StringView::toAtomString((WTF::StringView *)context, &v62);
        v17 = v62;
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_WORD *)v53 != 34)
        goto LABEL_19;
      v58 = v18 - 1;
      if (*(_WORD *)&v53[2 * (v18 - 1)] != 34)
        goto LABEL_19;
      LODWORD(v57) = v18 - 2;
      if (v58 >= (int)v18 - 2)
        v57 = v57;
      else
        v57 = v58;
      if (v18 - 1 >= v57)
      {
        v56 = v53 + 2;
        goto LABEL_117;
      }
    }
    __break(1u);
    goto LABEL_133;
  }
}

void sub_1941B0C54(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void sub_1941B0D24(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)va, a2);
  if (v4)
    JUMPOUT(0x1941B0D14);
  JUMPOUT(0x1941B0D1CLL);
}

void sub_1941B0D6C()
{
  JUMPOUT(0x1941B0D58);
}

void WebCore::LinkLoader::loadLinksFromHeader(WTF::String *a1, uint64_t a2, const WebCore::LinkLoadParameters *a3, int a4)
{
  WTF::StringImpl *v6;
  WebCore::LinkHeader *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL isViewportDependent;
  WTF::StringImpl *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  WebCore::Document *v25;
  unsigned int v26;
  char v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  BOOL v30;
  WTF::StringImpl *v31;
  char v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int16 v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  char v49;
  char v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  WebCore::LinkHeader *v55;
  unsigned int v56;

  if (*(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 + 4))
  {
    WebCore::LinkHeaderSet::LinkHeaderSet((WebCore::LinkHeaderSet *)&v55, a1);
    if (v56)
    {
      v7 = v55;
      for (i = 96 * v56; i; i -= 96)
      {
        if (*((_BYTE *)v7 + 88))
        {
          if (*(_QWORD *)v7)
          {
            if (*(_DWORD *)(*(_QWORD *)v7 + 4))
            {
              v9 = *((_QWORD *)v7 + 1);
              if (v9)
              {
                v10 = *(unsigned int *)(v9 + 4);
                if ((_DWORD)v10)
                {
                  v34 = *((_QWORD *)v7 + 1);
                  if (a4)
                  {
                    v11 = *((_QWORD *)v7 + 1);
                    if (a4 != 1
                      || (isViewportDependent = WebCore::LinkHeader::isViewportDependent(v7),
                          v11 = v34,
                          isViewportDependent))
                    {
LABEL_42:
                      v35 = i;
                      WebCore::LinkRelAttribute::LinkRelAttribute(&v54, a3, *(_QWORD *)(v11 + 8), v10 | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32));
                      MEMORY[0x19AEA52F8](&v51, a2, v7, 0);
                      if ((WTF::equalIgnoringFragmentIdentifier() & 1) == 0)
                      {
                        if ((*(_QWORD *)(*((_QWORD *)a3 + 85) + 672) & 0x8000000000000000) != 0)
                        {
                          v33 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>((uint64_t *)v7 + 10);
                          if ((v33 & 0xFF00) != 0)
                            v32 = v33;
                          else
                            v32 = 2;
                        }
                        else
                        {
                          v32 = 2;
                        }
                        v38 = v54;
                        v13 = v51;
                        if (v51)
                          *(_DWORD *)v51 += 2;
                        v39 = v13;
                        v40 = v52;
                        v41 = v53;
                        v14 = (_DWORD *)*((_QWORD *)v7 + 2);
                        if (v14)
                          *v14 += 2;
                        v42 = v14;
                        v15 = (_DWORD *)*((_QWORD *)v7 + 4);
                        if (v15)
                          *v15 += 2;
                        v43 = v15;
                        v16 = (_DWORD *)*((_QWORD *)v7 + 3);
                        if (v16)
                          *v16 += 2;
                        v44 = v16;
                        v17 = (_DWORD *)*((_QWORD *)v7 + 5);
                        if (v17)
                          *v17 += 2;
                        v45 = v17;
                        v18 = (_DWORD *)*((_QWORD *)v7 + 6);
                        if (v18)
                          *v18 += 2;
                        v46 = v18;
                        v19 = (_DWORD *)*((_QWORD *)v7 + 7);
                        if (v19)
                          *v19 += 2;
                        v47 = v19;
                        v20 = (_DWORD *)*((_QWORD *)v7 + 8);
                        if (v20)
                          *v20 += 2;
                        v48 = v20;
                        v21 = *((_QWORD *)v7 + 9);
                        if (v21)
                        {
                          v22 = *(unsigned int *)(v21 + 16);
                          v23 = *(unsigned __int16 **)(v21 + 8);
                          v21 = *(unsigned int *)(v21 + 4);
                          v24 = (v22 >> 2) & 1;
                        }
                        else
                        {
                          v23 = 0;
                          v24 = 1;
                        }
                        v26 = (unsigned __int16)WebCore::parseReferrerPolicy(v23, v21 | (v24 << 32), 2);
                        if (v26 <= 0x100)
                          v27 = 0;
                        else
                          v27 = v26;
                        v49 = v27;
                        v50 = v32;
                        WebCore::LinkLoader::preconnectIfNeeded((WebCore::LinkLoader *)&v38, a3, v25);
                        WebCore::LinkLoader::preloadIfNeeded((uint64_t)&v37, (const WebCore::LinkLoadParameters *)&v38, a3, 0);
                        v29 = v37;
                        v37 = 0;
                        if (v29)
                          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
                        WebCore::LinkLoadParameters::~LinkLoadParameters((WebCore::LinkLoadParameters *)&v38, v28);
                      }
                      v31 = v51;
                      v51 = 0;
                      if (v31)
                      {
                        if (*(_DWORD *)v31 == 2)
                          WTF::StringImpl::destroy(v31, v6);
                        else
                          *(_DWORD *)v31 -= 2;
                      }
                      i = v35;
                    }
                  }
                  else
                  {
                    v30 = WebCore::LinkHeader::isViewportDependent(v7);
                    v11 = v34;
                    if (!v30)
                      goto LABEL_42;
                  }
                }
              }
            }
          }
        }
        v7 = (WebCore::LinkHeader *)((char *)v7 + 96);
      }
    }
    WebCore::LinkHeaderSet::~LinkHeaderSet(&v55, v6);
  }
}

void WebCore::validateRangeRequestedFlag(WebCore *this@<X0>, const WebCore::ResourceRequest *a2@<X1>, _BYTE *a3@<X8>)
{
  BOOL hasHTTPHeaderField;
  _DWORD *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  uint64_t v11[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  char v18;

  if ((*((_WORD *)a2 + 116) & 0x80) != 0
    && (v10 = (uint64_t)a3,
        WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1),
        a3 = (_BYTE *)v10,
        *((_WORD *)a2 + 68) == 206)
    && (*((_BYTE *)a2 + 234) & 7) == 4
    && (hasHTTPHeaderField = WebCore::ResourceRequestBase::hasHTTPHeaderField((uint64_t)this, 59),
        a3 = (_BYTE *)v10,
        !hasHTTPHeaderField))
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
    v11[0] = 0;
    v6 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v6 += 2;
    v11[1] = (uint64_t)v6;
    v7 = *(_OWORD *)((char *)a2 + 24);
    v12 = *(_OWORD *)((char *)a2 + 8);
    v13 = v7;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    v17 = 0;
    v18 = 1;
    std::optional<WebCore::ResourceError>::optional[abi:sn180100]<WebCore::ResourceError,0>(v10, v11);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v11, v8);
  }
  else
  {
    *a3 = 0;
    a3[80] = 0;
  }
}

void WebCore::ResourceLoader::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  WebCore::Frame *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::Page *v38;
  NSObject *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _BYTE *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  _BYTE buf[12];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  *a3 = 0;
  ++*(_DWORD *)(a1 + 16);
  if ((*(_BYTE *)(a2 + 138) & 0x10) != 0)
  {
    v28 = *(WebCore::Frame **)(a1 + 32);
    if (v28)
    {
      v29 = *((_QWORD *)v28 + 37);
      if (v29)
      {
        v30 = *(_DWORD *)(v29 + 24) + 2;
        *(_DWORD *)(v29 + 24) = v30;
        if (!*(_BYTE *)(v29 + 278))
        {
          v35 = *(_QWORD *)(v29 + 528);
          if (v35)
          {
            v36 = *(_QWORD *)(v35 + 8);
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 24);
              if (v37)
              {
                v38 = *(WebCore::Page **)(v37 + 8);
                if (v38)
                {
                  ++*(_DWORD *)v38;
                  v39 = qword_1ECE7C608;
                  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
                  {
                    WebCore::Frame::pageID(v28);
                    if (!v41)
                      v40 = 0;
                    v42 = *((_QWORD *)v28 + 4);
                    v43 = *((_QWORD *)v28 + 35);
                    v44 = *(_QWORD *)(a1 + 744);
                    *(_DWORD *)buf = 134219008;
                    *(_QWORD *)&buf[4] = a1;
                    v52 = 2048;
                    v53 = v40;
                    v54 = 2048;
                    v55 = v42;
                    v56 = 2048;
                    v57 = v43;
                    v58 = 2048;
                    v59 = v44;
                    _os_log_impl(&dword_1940B8000, v39, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::usedLegacyTLS:", buf, 0x34u);
                  }
                  v45 = (uint64_t *)*((_QWORD *)v38 + 99);
                  WebCore::ResourceResponse::platformLazyInit(a2, 1);
                  v46 = (_BYTE *)WTF::URL::host((WTF::URL *)a2);
                  WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>("Loaded resource from ", 22, v46, v47, " using TLS 1.0 or 1.1, which are deprecated protocols that will be removed. Please use TLS 1.2 or newer instead.", 113, buf);
                  WebCore::PageConsoleClient::addMessage(v45, 2, 1, (uint64_t)buf, 0, (WebCore::Document *)v29);
                  v49 = *(WTF::StringImpl **)buf;
                  *(_QWORD *)buf = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, v48);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                  WTF::RefCounted<WebCore::Page>::deref(v38);
                  v30 = *(_DWORD *)(v29 + 24);
                }
              }
            }
          }
          *(_BYTE *)(v29 + 278) = 1;
        }
        v31 = v30 - 2;
        if (v31)
        {
          *(_DWORD *)(v29 + 24) = v31;
        }
        else if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v29, (void *)a2);
        }
      }
    }
  }
  if ((*(_BYTE *)(a2 + 138) & 0x20) != 0)
  {
    v32 = *(_QWORD *)(a1 + 32);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 296);
      if (v33)
      {
        v34 = *(_DWORD *)(v33 + 24);
        *(_DWORD *)(v33 + 24) = v34 + 2;
        if (!*(_BYTE *)(v33 + 279))
          *(_BYTE *)(v33 + 279) = 1;
        if (v34)
        {
          *(_DWORD *)(v33 + 24) = v34;
        }
        else if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v33, (void *)a2);
        }
      }
    }
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    WebCore::ResourceResponse::platformLazyInit(a2, 2);
    v10 = *(_QWORD *)(v6 + 24);
    if (v10 && *(_QWORD *)(v10 + 8))
    {
      v11 = (*(unsigned __int16 *)(a2 + 232) >> 10) & 0xF;
      *(_QWORD *)buf = 0;
      if (v11 == 5)
      {
LABEL_9:
        v9 = (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_10:
        *(_QWORD *)buf = v50;
LABEL_11:
        v12 = *(_QWORD *)(v6 + 24);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
            ++*(_DWORD *)v13;
        }
        else
        {
          v13 = 0;
        }
        if ((*(_QWORD *)(*(_QWORD *)(v13 + 112) + 672) & 0x800000000000) == 0
          || (v14 = *(uint64_t **)(v13 + 256)) == 0)
        {
          v14 = WebCore::emptyDiagnosticLoggingClient((WebCore *)v9);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(uint64_t *, WTF::StringImpl **, _BYTE *, uint64_t))*v14)(v14, &v50, buf, 1);
        v16 = v50;
        v50 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v15);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::Page::~Page(v13);
          WTF::fastFree(v24, v25);
        }
        else
        {
          --*(_DWORD *)v13;
        }
        v17 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v15);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
      else
      {
        switch(v11)
        {
          case 0:
          case 7:
          case 8:
          case 9:
            goto LABEL_24;
          case 1:
          case 3:
            goto LABEL_9;
          case 2:
            v9 = WebCore::DiagnosticLoggingKeys::diskCacheKey((uint64_t *)&v50, (WebCore::DiagnosticLoggingKeys *)v9);
            goto LABEL_10;
          case 4:
            v9 = WebCore::DiagnosticLoggingKeys::memoryCacheKey((uint64_t *)&v50, (WebCore::DiagnosticLoggingKeys *)v9);
            goto LABEL_10;
          case 6:
            v9 = WebCore::DiagnosticLoggingKeys::serviceWorkerKey((uint64_t *)&v50, (WebCore::DiagnosticLoggingKeys *)v9);
            goto LABEL_10;
          default:
            goto LABEL_11;
        }
      }
    }
    do
    {
LABEL_24:
      v18 = __ldaxr(v7);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v7));
    if (!v19)
    {
      atomic_store(1u, v7);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E31FE290;
      v26[1] = v7;
      *(_QWORD *)buf = v26;
      WTF::ensureOnMainThread();
      v27 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
  else
  {
    WebCore::ResourceResponse::platformLazyInit(a2, 2);
  }
  WebCore::ResourceResponseBase::operator=(a1 + 48, a2);
  v20 = *(_QWORD *)(a2 + 240);
  if (v20)
    CFRetain(*(CFTypeRef *)(a2 + 240));
  v21 = *(const void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v20;
  if (v21)
    CFRelease(v21);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 248);
  if ((*(_BYTE *)(a1 + 1090) & 1) == 0)
  {
    v22 = *(_QWORD *)(a1 + 32);
    if (v22 && (v23 = *(_DWORD **)(v22 + 280)) != 0)
    {
      ++*v23;
      WebCore::ResourceLoadNotifier::didReceiveResponse((WebCore::ResourceLoadNotifier *)(v23 + 8), (WebCore::ResourceLoader *)a1, (const WebCore::ResourceResponse *)(a1 + 48));
      if (!*v23)
      {
        __break(0xC471u);
        JUMPOUT(0x1941B145CLL);
      }
      --*v23;
    }
    else
    {
      WebCore::ResourceLoadNotifier::didReceiveResponse((WebCore::ResourceLoadNotifier *)0x20, (WebCore::ResourceLoader *)a1, (const WebCore::ResourceResponse *)(a1 + 48));
    }
  }
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void WebCore::ResourceLoadNotifier::didReceiveResponse(WebCore::ResourceLoadNotifier *this, WebCore::ResourceLoader *a2, const WebCore::ResourceResponse *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  WTF *v31;
  _DWORD *v32;
  uint64_t *v33;
  int v34;
  unsigned int v35;
  WTF *v36;
  void *v37;

  WebCore::DocumentLoader::addResponse(*((_BYTE **)a2 + 5), a3);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 24);
  if (!v6)
    goto LABEL_24;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_24;
  ++*(_DWORD *)v7;
  v8 = *(_QWORD *)(v7 + 128);
  ++*(_DWORD *)v8;
  if (*(int *)(v8 + 152) >= 1)
  {
    v9 = *((_QWORD *)a2 + 93);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
    if (*((uint64_t *)a3 + 6) >= 0)
      v11 = *((_QWORD *)a3 + 6);
    else
      v11 = 0x4000;
    v13 = (uint64_t *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v8 + 96) += v11;
    if (v12
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ProgressItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v8 + 32), 8u, 0), (v12 = *v13) != 0))
    {
      v14 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = (uint64_t *)(v12 + 16 * v18);
    v20 = *v19;
    if (*v19)
    {
      v33 = 0;
      v34 = 1;
      while (v20 != v9)
      {
        if (v20 == -1)
          v33 = v19;
        v18 = (v18 + v34) & v14;
        v19 = (uint64_t *)(v12 + 16 * v18);
        v20 = *v19;
        ++v34;
        if (!*v19)
        {
          if (v33)
          {
            *v33 = 0;
            v33[1] = 0;
            --*(_DWORD *)(*v13 - 16);
            v19 = v33;
          }
          goto LABEL_10;
        }
      }
      goto LABEL_18;
    }
LABEL_10:
    v21 = (WTF *)v19[1];
    *v19 = v9;
    v19[1] = 0;
    if (v21)
      WTF::fastFree(v21, v10);
    v22 = *v13;
    if (*v13)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v13;
    if (*v13)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        goto LABEL_18;
    }
    else
    {
      if (3 * v27 > 4 * v26)
        goto LABEL_18;
      if (!(_DWORD)v27)
      {
        v35 = 8;
LABEL_44:
        v19 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::ProgressItem>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::ProgressItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v8 + 32), v35, v19);
LABEL_18:
        v28 = (_QWORD *)v19[1];
        if (v28)
        {
          *v28 = 0;
          v28[1] = v11;
        }
        else
        {
          v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v30 = 0;
          v30[1] = v11;
          v31 = (WTF *)v19[1];
          v19[1] = (uint64_t)v30;
          if (v31)
            WTF::fastFree(v31, v29);
        }
        goto LABEL_21;
      }
    }
    if (6 * *(_DWORD *)(v24 - 12) >= (2 * v27))
      v35 = 2 * v27;
    else
      v35 = *(_DWORD *)(v24 - 4);
    goto LABEL_44;
  }
LABEL_21:
  if (!*(_DWORD *)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1941B1A04);
  }
  --*(_DWORD *)v8;
  if (*(_DWORD *)v7 == 1)
  {
    WebCore::Page::~Page(v7);
    WTF::fastFree(v36, v37);
  }
  else
  {
    --*(_DWORD *)v7;
  }
LABEL_24:
  v32 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v32)
  {
    ++v32[6];
    WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse((uint64_t)this, (uint64_t)v32, *((Inspector::IdentifiersFactory **)a2 + 93), (uint64_t)a3, (uint64_t)a2);
    if (v32[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 24))(v32);
    else
      --v32[6];
  }
  else
  {
    WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse((uint64_t)this, 0, *((Inspector::IdentifiersFactory **)a2 + 93), (uint64_t)a3, (uint64_t)a2);
  }
}

uint64_t WebCore::InspectorController::developerExtrasEnabled(WebCore::InspectorController *this)
{
  return (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 112) + 672) >> 46) & 1;
}

_BYTE *WebCore::DocumentLoader::addResponse(_BYTE *this, const WebCore::ResourceResponse *a2)
{
  const WebCore::ResourceResponse *v2;
  _BYTE *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!this[3546])
  {
    v2 = a2;
    v3 = this;
    v4 = (uint64_t *)(this + 2536);
    v5 = *((unsigned int *)v3 + 637);
    if ((_DWORD)v5 == *((_DWORD *)v3 + 636))
    {
      v2 = (const WebCore::ResourceResponse *)WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, (unint64_t)a2);
      v5 = *((unsigned int *)v3 + 637);
      v6 = *((_QWORD *)v3 + 317);
    }
    else
    {
      v6 = *v4;
    }
    v7 = v6 + (v5 << 8);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v7, v2);
    this = (_BYTE *)*((_QWORD *)v2 + 30);
    *(_QWORD *)(v7 + 240) = this;
    if (this)
      this = CFRetain(this);
    *(_BYTE *)(v7 + 248) = *((_BYTE *)v2 + 248);
    ++*((_DWORD *)v3 + 637);
  }
  return this;
}

uint64_t WebCore::DiagnosticLoggingKeys::diskCacheKey(WebCore::DiagnosticLoggingKeys *this)
{
  return WTF::StringImpl::createWithoutCopyingNonEmpty();
}

void WebCore::passesAccessControlCheck(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v8;
  unsigned int v10;
  _OWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int16x8_t *v24;
  int16x8_t v25;
  int16x8_t *v26;
  int8x16_t v27;
  int16x8_t *v28;
  char *v29;
  int16x8_t v30;
  __int16 *v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  _WORD *v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  int8x16_t v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;
  __int16 v61;
  _WORD *v62;
  _WORD *v63;
  uint64_t v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned __int128 *v74;
  unsigned __int128 *v75;
  unsigned __int128 v76;
  char v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80[3];
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;

  v8 = a1;
  v80[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WebCore::ResourceResponseBase::httpHeaderField(a1, 8, &v79);
  if ((_DWORD)a2)
  {
    if (a4)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    else
      v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  if (!MEMORY[0x19AEA53F4](v79, "*", 1) || (v10 & 1) != 0)
  {
    v12 = *((unsigned int *)a3 + 8);
    if ((_DWORD)v12 == 1)
      goto LABEL_40;
    if ((_DWORD)v12 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_140;
    }
    v80[0] = (WTF::StringImpl *)&v78;
    v13 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v12])(v80, (char *)a3 + 8);
    if (MEMORY[0x19AEA53F4](*v13, "file", 4) && *((_BYTE *)a3 + 59))
LABEL_40:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
    else
      WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)a3 + 8), &v78);
    if ((WTF::equal(v79, v78, v14) & 1) != 0)
    {
      if ((_DWORD)a2 != 1)
      {
LABEL_19:
        *a5 = 0;
        a5[8] = 0;
        goto LABEL_117;
      }
      WebCore::ResourceResponseBase::httpHeaderField(v8, 5, v80);
      if ((MEMORY[0x19AEA53F4](v80[0], "true", 4) & 1) != 0)
      {
        v15 = v80[0];
        v80[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v15 -= 2;
        }
        goto LABEL_19;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      a5[8] = 1;
      v23 = v80[0];
      v80[0] = 0;
      if (!v23)
      {
LABEL_117:
        v68 = v78;
        v78 = 0;
        if (v68)
        {
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v68 -= 2;
        }
        goto LABEL_120;
      }
      if (*(_DWORD *)v23 != 2)
      {
        *(_DWORD *)v23 -= 2;
        goto LABEL_117;
      }
LABEL_127:
      WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v11);
      goto LABEL_117;
    }
    if (MEMORY[0x19AEA53F4](v79, "*", 1))
    {
LABEL_21:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      a5[8] = 1;
      goto LABEL_117;
    }
    if (v79)
    {
      v17 = *((_QWORD *)v79 + 1);
      v18 = *((unsigned int *)v79 + 1);
      if ((*((_BYTE *)v79 + 16) & 4) != 0)
      {
        if ((_DWORD)v18)
        {
          v19 = 16;
          if (v18 < 0x10)
            v19 = *((unsigned int *)v79 + 1);
          v20 = v19;
          v21 = (_BYTE *)*((_QWORD *)v79 + 1);
          do
          {
            if (*v21 == 44)
              goto LABEL_32;
            ++v21;
            --v20;
          }
          while (v20);
          if (v18 >= 0x11)
          {
            v21 = memchr((void *)(v17 + v19), 44, v18 - v19);
            if (v21)
            {
LABEL_32:
              v22 = (uint64_t)&v21[-v17];
              goto LABEL_33;
            }
          }
        }
      }
      else if ((_DWORD)v18)
      {
        v24 = (int16x8_t *)(v17 + 2 * v18);
        if (v18 <= 0x1F)
        {
          v32 = 2 * v18;
          v31 = (__int16 *)*((_QWORD *)v79 + 1);
          while (*v31 != 44)
          {
            ++v31;
            v32 -= 2;
            if (!v32)
              goto LABEL_55;
          }
LABEL_50:
          if (v31 != (__int16 *)v24)
          {
            v22 = ((uint64_t)v31 - v17) >> 1;
LABEL_33:
            if (v22 != -1)
              goto LABEL_21;
          }
        }
        else
        {
          v25.i64[0] = 0x2C002C002C002CLL;
          v25.i64[1] = 0x2C002C002C002CLL;
          v26 = (int16x8_t *)*((_QWORD *)v79 + 1);
          do
          {
            v27 = (int8x16_t)vceqq_s16(*v26, v25);
            LOWORD(v16) = vmaxvq_u16((uint16x8_t)v27);
            if (v16)
              goto LABEL_49;
            v28 = v26 + 1;
            v29 = &v26[1].i8[14];
            ++v26;
          }
          while (v29 < (char *)v24);
          if (v28 < v24)
          {
            v30.i64[0] = 0x2C002C002C002CLL;
            v30.i64[1] = 0x2C002C002C002CLL;
            v27 = (int8x16_t)vceqq_s16(v24[-1], v30);
            v30.i16[0] = vmaxvq_u16((uint16x8_t)v27);
            if (v30.i32[0])
            {
              v26 = v24 - 1;
LABEL_49:
              v31 = &v26->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v27))];
              goto LABEL_50;
            }
          }
        }
      }
    }
LABEL_55:
    a2 = v78;
    if (v78)
    {
      *(_DWORD *)v78 += 2;
      WebCore::ResourceResponse::platformLazyInit(v8, 1);
      v33 = *((_DWORD *)a2 + 1);
    }
    else
    {
      WebCore::ResourceResponse::platformLazyInit(v8, 1);
      v33 = 0;
    }
    v10 = *(__int16 *)(v8 + 136);
    if ((v10 & 0x80000000) != 0)
    {
      v71 = -v10;
      v34 = 1;
      do
      {
        ++v34;
        v65 = v71 >= 0xA;
        v71 /= 0xAu;
      }
      while (v65);
    }
    else
    {
      v34 = 0;
      v35 = *(__int16 *)(v8 + 136);
      do
      {
        ++v34;
        v36 = v35 > 9;
        v35 /= 0xAu;
      }
      while (v36);
    }
    if (v34 < 0)
      goto LABEL_148;
    v37 = __OFADD__(v34, 14);
    v38 = v34 + 14;
    if (v37)
      goto LABEL_148;
    v37 = __OFADD__(v38, 47);
    v39 = v38 + 47;
    v40 = v37;
    if (v33 < 0)
      goto LABEL_148;
    if (v40)
      goto LABEL_148;
    v37 = __OFADD__(v33, v39);
    v41 = v33 + v39;
    if (v37)
      goto LABEL_148;
    v42 = (v41 + 7);
    if (__OFADD__(v41, 7))
      goto LABEL_148;
    if (a2 && (*((_BYTE *)a2 + 16) & 4) == 0)
    {
      if (v41 == -7)
      {
        v70 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        *(_QWORD *)a5 = v70;
        a5[8] = 1;
LABEL_115:
        if (*(_DWORD *)a2 != 2)
        {
          *(_DWORD *)a2 -= 2;
          goto LABEL_117;
        }
        v23 = a2;
        goto LABEL_127;
      }
      if (v42 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v42 + 20));
        a3 = v80[0];
        if (v80[0])
        {
          *(_DWORD *)v80[0] = 2;
          *((_DWORD *)a3 + 1) = v42;
          *(_QWORD *)((char *)a3 + 20) = 0x6700690072004FLL;
          *((_QWORD *)a3 + 1) = (char *)a3 + 20;
          *((_DWORD *)a3 + 4) = 0;
          v43 = (_WORD *)((char *)a3 + 34);
          *((_DWORD *)a3 + 7) = 7209065;
          *((_WORD *)a3 + 16) = 32;
          v11 = (_OWORD *)*((_QWORD *)a2 + 1);
          v44 = *((unsigned int *)a2 + 1);
          if ((*((_BYTE *)a2 + 16) & 4) != 0)
          {
            v51 = (char *)&v43[v44];
            if (v44 >= 0x40)
            {
              v52 = (char *)&v43[v44 & 0xFFFFFFC0];
              v53 = 0uLL;
              v54 = (char *)a3 + 34;
              do
              {
                v81.val[0] = (int8x16_t)*v11;
                v55 = *((int8x16_t *)v11 + 1);
                v82.val[0] = (int8x16_t)v11[2];
                v56 = v11[3];
                v11 += 4;
                v57 = v56;
                v82.val[1] = 0uLL;
                v83.val[0] = v55;
                v81.val[1] = 0uLL;
                v58 = v54;
                vst2q_s8(v58, v81);
                v58 += 32;
                v83.val[1] = 0uLL;
                vst2q_s8(v58, v83);
                v59 = v54 + 64;
                vst2q_s8(v59, v82);
                v60 = v54 + 96;
                vst2q_s8(v60, *(int8x16x2_t *)(&v53 - 1));
                v54 += 128;
              }
              while (v54 != v52);
            }
            else
            {
              v52 = (char *)a3 + 34;
            }
            while (v52 != v51)
            {
              v61 = *(unsigned __int8 *)v11;
              v11 = (_OWORD *)((char *)v11 + 1);
              *(_WORD *)v52 = v61;
              v52 += 2;
            }
          }
          else if ((_DWORD)v44 == 1)
          {
            *v43 = *(_WORD *)v11;
          }
          else if ((_DWORD)v44)
          {
            memcpy((char *)a3 + 34, v11, 2 * v44);
          }
          v62 = &v43[*((unsigned int *)a2 + 1)];
          *(_OWORD *)v62 = xmmword_1969F26C0;
          *((_OWORD *)v62 + 1) = xmmword_1969F26D0;
          *((_OWORD *)v62 + 2) = xmmword_1969F26E0;
          *((_OWORD *)v62 + 3) = xmmword_1969F26F0;
          *((_OWORD *)v62 + 4) = xmmword_1969F2700;
          *((_OWORD *)v62 + 5) = xmmword_1969F2710;
          *((_OWORD *)v62 + 6) = xmmword_1969F2720;
          v62[60] = 32;
          v63 = v62 + 61;
          *((_QWORD *)v62 + 14) = 0x3A00650064006FLL;
          if ((v10 & 0x80000000) != 0)
          {
            v66 = -v10;
            v67 = 12;
            do
            {
              *((_BYTE *)v80 + v67--) = (v66 % 0xA) | 0x30;
              v36 = v66 > 9;
              v66 /= 0xAu;
            }
            while (v36);
            *((_BYTE *)v80 + v67) = 45;
            if (v67 + 2 <= 14)
            {
              do
              {
                *v63++ = *((unsigned __int8 *)v80 + v67);
                v36 = v67++ < 12;
              }
              while (v36);
            }
          }
          else
          {
            v64 = 0;
            do
            {
              *((_BYTE *)&v80[1] + v64-- + 4) = (v10 % 0xA) | 0x30;
              v36 = v10 > 9;
              v10 /= 0xAu;
            }
            while (v36);
            if (v64 + 14 <= 13)
            {
              do
              {
                *v63++ = *((unsigned __int8 *)&v80[1] + v64 + 5);
                v65 = __CFADD__(v64++, 1);
              }
              while (!v65);
            }
          }
LABEL_114:
          *(_QWORD *)a5 = a3;
          a5[8] = 1;
          if (!a2)
            goto LABEL_117;
          goto LABEL_115;
        }
      }
LABEL_148:
      __break(0xC471u);
      return;
    }
    if (v41 == -7)
    {
      a3 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_114;
    }
    if ((v42 & 0x80000000) != 0)
      goto LABEL_148;
    WTF::tryFastCompactMalloc((WTF *)(v42 + 20));
    a3 = v80[0];
    if (!v80[0])
      goto LABEL_148;
    *(_DWORD *)v80[0] = 2;
    *((_DWORD *)a3 + 1) = v42;
    *((_QWORD *)a3 + 1) = (char *)a3 + 20;
    *((_QWORD *)a3 + 2) = 0x6769724F00000004;
    v8 = (uint64_t)a3 + 27;
    *(_DWORD *)((char *)a3 + 23) = 544106855;
    if (!a2)
    {
      v46 = 0;
LABEL_86:
      v47 = (char *)(v8 + v46);
      qmemcpy(v47, " is not allowed by Access-Control-Allow-Origin. Status code: ", 61);
      v48 = v47 + 61;
      v49 = 0;
      if ((v10 & 0x80000000) != 0)
      {
        v72 = -v10;
        do
        {
          *((_BYTE *)&v80[1] + v49-- + 4) = (v72 % 0xA) | 0x30;
          v36 = v72 > 9;
          v72 /= 0xAu;
        }
        while (v36);
        v73 = v49 + 12;
        v11 = (_OWORD *)((char *)&v80[1] + v49 + 4);
        *(_BYTE *)v11 = 45;
        if (v49 + 14 > 14)
          goto LABEL_114;
        if (v73 <= 12)
          v73 = 12;
        v50 = v73 - v49 - 11;
      }
      else
      {
        do
        {
          *((_BYTE *)&v80[1] + v49-- + 4) = (v10 % 0xA) | 0x30;
          v36 = v10 > 9;
          v10 /= 0xAu;
        }
        while (v36);
        if (v49 + 14 > 13)
          goto LABEL_114;
        v11 = (_OWORD *)((char *)&v80[1] + v49 + 5);
        v50 = -v49;
      }
      memcpy(v48, v11, v50);
      goto LABEL_114;
    }
    v11 = (_OWORD *)*((_QWORD *)a2 + 1);
    v45 = *((unsigned int *)a2 + 1);
    if ((*((_BYTE *)a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v45)
      {
        if ((_DWORD)v45 == 1)
          *(_BYTE *)v8 = *(_BYTE *)v11;
        else
          memcpy((char *)a3 + 27, v11, v45);
      }
      goto LABEL_85;
    }
LABEL_140:
    if (v45 < 0x10)
    {
      v74 = (unsigned __int128 *)v8;
    }
    else
    {
      v74 = (unsigned __int128 *)(v8 + (v45 & 0xFFFFFFF0));
      v75 = (unsigned __int128 *)v8;
      do
      {
        v76 = (unsigned __int128)vld2q_s8((const char *)v11);
        v11 += 2;
        *v75++ = v76;
      }
      while (v75 != v74);
    }
    while (v74 != (unsigned __int128 *)(v8 + v45))
    {
      v77 = *(_BYTE *)v11;
      v11 = (_OWORD *)((char *)v11 + 2);
      *(_BYTE *)v74 = v77;
      v74 = (unsigned __int128 *)((char *)v74 + 1);
    }
LABEL_85:
    v46 = *((unsigned int *)a2 + 1);
    goto LABEL_86;
  }
  *a5 = 0;
  a5[8] = 0;
LABEL_120:
  v69 = v79;
  v79 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v69 -= 2;
  }
}

const char *WebCore::CachedScript::setEncoding(WebCore::CachedScript *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *result;
  char *v7;
  char *v8;
  __int16 v9;
  BOOL v10;
  __int128 v11;
  WTF *v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  __int16 v17;
  const char *v18[2];

  v2 = *((_QWORD *)this + 85);
  if (v2)
  {
    ++*(_DWORD *)v2;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v4 = 0;
      v5 = 0x100000000;
    }
    result = (const char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
    v8 = v7;
    *(_QWORD *)&v16 = result;
    *((_QWORD *)&v16 + 1) = v7;
    v18[0] = result;
    v18[1] = v7;
    if (v7 && (result = (const char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      result = (const char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v18);
      if (result)
        v9 = 165;
      else
        v9 = 92;
    }
    else
    {
      v9 = 92;
    }
    v17 = v9;
    if (*(_BYTE *)(v2 + 94))
      v10 = 1;
    else
      v10 = v8 == 0;
    if (!v10)
    {
      v11 = v16;
      *(_WORD *)(v2 + 32) = v17;
      *(_OWORD *)(v2 + 16) = v11;
      result = *(const char **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (result)
        result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
      *(_DWORD *)(v2 + 56) = 5;
    }
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::TextResourceDecoder::~TextResourceDecoder((WebCore::TextResourceDecoder *)v2, v7);
      return (const char *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  else
  {
    result = (const char *)PAL::TextEncoding::TextEncoding((PAL::TextEncoding *)&v15, a2);
    if (MEMORY[0x5E])
      v14 = 1;
    else
      v14 = *((_QWORD *)&v16 + 1) == 0;
    if (!v14)
    {
      MEMORY[0x10] = v16;
      MEMORY[0x20] = v17;
      result = (const char *)MEMORY[0x28];
      MEMORY[0x28] = 0;
      if (result)
        result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
      MEMORY[0x38] = 5;
    }
  }
  return result;
}

_BYTE *WebCore::TextResourceDecoder::setEncoding(_BYTE *result, PAL::TextEncoding *this, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v6;
  const char *v7;
  __int128 v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int128 v12;
  __int16 v13;

  if (result[94])
    return result;
  v3 = (uint64_t *)this;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
    return result;
  v6 = result;
  if (a3 == 3)
  {
    if (v4 == 15
      && WTF::equalLettersIgnoringASCIICaseWithLength<unsigned char>(*((_QWORD *)this + 1), 0xEuLL, (uint64_t)"x-user-defined", 0xEuLL, 0xEuLL))
    {
      PAL::TextEncoding::TextEncoding((PAL::TextEncoding *)&v11, (PAL *)"windows-1252");
      *((_OWORD *)v6 + 1) = v12;
      *((_WORD *)v6 + 16) = v13;
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (a3 == 2 || a3 == 4)
  {
LABEL_8:
    if (PAL::TextEncoding::isNonByteBasedEncoding((PAL::TextEncoding *)v3, (const char *)this))
    {
      v3 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      {
        PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
        *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", v7);
        *((_QWORD *)&xmmword_1ECE86C80 + 1) = v9;
        v11 = (const char *)xmmword_1ECE86C80;
        *(_QWORD *)&v12 = v9;
        if (v9 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
        {
          if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v11))
          {
            v10 = 165;
          }
          else
          {
            v10 = 92;
          }
        }
        else
        {
          v10 = 92;
        }
        word_1ECE86C90 = v10;
      }
    }
  }
  v8 = *(_OWORD *)(v3 + 1);
  *((_WORD *)v6 + 16) = *((_WORD *)v3 + 12);
  *((_OWORD *)v6 + 1) = v8;
LABEL_11:
  result = (_BYTE *)*((_QWORD *)v6 + 5);
  *((_QWORD *)v6 + 5) = 0;
  if (result)
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  *((_DWORD *)v6 + 14) = a3;
  return result;
}

void WebCore::CachedImage::responseReceived(WebCore::CachedImage *this, WTF::StringImpl **a2)
{
  uint64_t *v4;
  WTF::WallTime *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  char v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;

  v4 = (uint64_t *)*((_QWORD *)this + 50);
  if (!v4)
  {
    v10 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v10 != -1)
    {
      v13 = (WTF::StringImpl *)&v11;
      v12 = &v13;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v4 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  if ((*((_BYTE *)v4 + 138) & 1) == 0)
    WebCore::CachedImage::clear((WTF ***)this, a2);
  v5 = (WTF::WallTime *)WebCore::CachedResource::setResponse(this, (const WebCore::ResourceResponse *)a2);
  WTF::WallTime::now(v5);
  *((_QWORD *)this + 54) = v6;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v7 = a2[7];
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    v13 = v7;
    (*(void (**)(WebCore::CachedImage *, WTF::StringImpl **))(*(_QWORD *)this + 24))(this, &v13);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
}

uint64_t *WebCore::extractReasonPhraseFromHTTPStatusLine@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>, float a5@<S2>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  double v24;
  double v25;
  float v26;
  _DWORD *v27;

  v7 = *this;
  if (!*this)
    goto LABEL_30;
  v8 = *(unsigned int *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(unsigned int *)(v7 + 4);
  v11 = (v8 >> 2) & 1;
  if (!(_DWORD)v11)
    goto LABEL_41;
  if (!(_DWORD)v10)
    goto LABEL_30;
  v12 = 16;
  if (v10 < 0x10)
    v12 = v10;
  v13 = v12;
  this = (uint64_t *)v9;
  do
  {
    if (*(_BYTE *)this == 32)
      goto LABEL_11;
    this = (uint64_t *)((char *)this + 1);
    --v13;
  }
  while (v13);
  if (v10 < 0x11)
  {
    v14 = 0;
LABEL_12:
    if (v10 <= v14)
      goto LABEL_30;
    goto LABEL_13;
  }
  this = (uint64_t *)memchr((void *)(v9 + v12), 32, v10 - v12);
  if (this)
  {
LABEL_11:
    v14 = (_DWORD)this - v9 + 1;
    goto LABEL_12;
  }
  v14 = 0;
LABEL_13:
  v15 = (uint64_t *)(v9 + v14);
  v16 = v10 - v14;
  v17 = 16;
  if (v16 < 0x10)
    v17 = v16;
  if (v17)
  {
    v18 = v17;
    this = v15;
    while (*(_BYTE *)this != 32)
    {
      this = (uint64_t *)((char *)this + 1);
      if (!--v18)
        goto LABEL_19;
    }
LABEL_21:
    for (this = (uint64_t *)((char *)this - v9);
          ;
          this = (uint64_t *)WTF::find<char16_t,(void *)0>(v9, v10, 0x20u, (v23 + 1), v24, v25, v26))
    {
      if (this == (uint64_t *)-1)
        goto LABEL_30;
      v19 = (_DWORD)this + 1;
      if (v10 <= (int)this + 1)
        goto LABEL_27;
      if ((_DWORD)this == -1)
        break;
      v20 = v10 - v19;
      v22 = v10 - v19;
      if ((_DWORD)v11)
      {
        if (v22 >= v20)
        {
          v20 |= 0x100000000uLL;
LABEL_26:
          if ((v20 & 0x100000000) != 0)
LABEL_27:
            this = (uint64_t *)WTF::AtomStringImpl::add();
          else
            this = (uint64_t *)WTF::AtomStringImpl::add();
          v21 = v27;
          goto LABEL_29;
        }
      }
      else if (v22 >= v20)
      {
        goto LABEL_26;
      }
      __break(1u);
LABEL_41:
      v23 = WTF::find<char16_t,(void *)0>(v9, v10, 0x20u, 0, a3, a4, a5);
    }
    v20 = v10 & 0xFFFFFFFEFFFFFFFFLL | (((v8 >> 2) & 1) << 32);
    goto LABEL_26;
  }
LABEL_19:
  if (v16 >= 0x11)
  {
    this = (uint64_t *)memchr((char *)v15 + v17, 32, v16 - v17);
    if (this)
      goto LABEL_21;
  }
LABEL_30:
  v21 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v21 += 2;
LABEL_29:
  *a2 = v21;
  return this;
}

void WebCore::CachedRawResource::responseReceived(WebCore::CachedRawResource *this, WTF::StringImpl **a2)
{
  WTF::WallTime *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF **v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  char v37;
  unsigned int ***v38;
  WTF::StringImpl *v39;
  WTF *v40;
  unint64_t v41;
  unsigned int **v42;

  if (!this)
    goto LABEL_2;
  v28 = *((_QWORD *)this + 1);
  if (v28)
    goto LABEL_60;
  v28 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = this;
  v33 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v28;
  if (!v33)
    goto LABEL_60;
  do
  {
    v34 = __ldaxr(v33);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v33));
  if (!v35)
  {
    atomic_store(1u, v33);
    WTF::fastFree((WTF *)v33, v32);
  }
  v28 = *((_QWORD *)this + 1);
  if (v28)
  {
LABEL_60:
    do
      v29 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v29 + 1, (unsigned int *)v28));
    v36 = (unsigned int *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    if (v30)
    {
      v42 = &v36;
      ++*(_DWORD *)(v30 + 548);
      v31 = *(_QWORD *)(v30 + 488);
      if (v31)
      {
        if (*(_QWORD *)(v31 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v30 + 464), (uint64_t *)&v42, (uint64_t)&v39);
      }
    }
  }
  else
  {
LABEL_2:
    v36 = 0;
  }
  if (!*((_QWORD *)this + 82))
    *((_QWORD *)this + 82) = *(_QWORD *)(*((_QWORD *)this + 48) + 744);
  v4 = (WTF::WallTime *)WebCore::CachedResource::setResponse(this, (const WebCore::ResourceResponse *)a2);
  WTF::WallTime::now(v4);
  *((_QWORD *)this + 54) = v5;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v6 = a2[7];
  if (v6)
  {
    *(_DWORD *)v6 += 2;
    v39 = v6;
    (*(void (**)(WebCore::CachedRawResource *, WTF::StringImpl **))(*(_QWORD *)this + 24))(this, &v39);
    v8 = v39;
    v39 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  WebCore::CachedResourceClientWalker<WebCore::CachedRawResourceClient>::CachedResourceClientWalker((uint64_t *)&v39, (uint64_t)this);
  v10 = v40;
  if (!v40)
  {
LABEL_28:
    v40 = 0;
    goto LABEL_40;
  }
LABEL_10:
  v11 = *(unsigned int *)v10;
  v12 = v41;
  if (v41 < v11)
  {
    do
    {
      v13 = v12 + 1;
      v41 = v12 + 1;
      if (*(_DWORD *)v40 <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1941B2C5CLL);
      }
      v14 = (char *)v40 + 8;
      v15 = *((_QWORD *)v40 + v12 + 1);
      if (v15)
      {
        v9 = *(void **)(v15 + 8);
        if (v9)
        {
          v16 = v39;
          if (v39)
            v16 = (WTF::StringImpl *)*((_QWORD *)v39 + 1);
          if ((WTF::WeakHashCountedSet<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::contains((uint64_t *)v16 + 45, (uint64_t)v9) & 1) != 0)
          {
            v17 = *(_QWORD *)(*(_QWORD *)&v14[8 * v12] + 8);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17) != 5)
            {
              __break(0xC471u);
              JUMPOUT(0x1941B2C7CLL);
            }
            v18 = *(_QWORD *)&v14[8 * v12];
            if (!v18)
              break;
            v19 = *(_QWORD *)(v18 + 8);
            if (!v19)
              break;
            if (!*((_QWORD *)this + 50))
            {
              v21 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
              if (v21 != -1)
              {
                v42 = (unsigned int **)&v37;
                v38 = &v42;
                std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
              }
            }
            v42 = 0;
            (*(void (**)(uint64_t, WebCore::CachedRawResource *))(*(_QWORD *)v19 + 56))(v19, this);
            v20 = (uint64_t)v42;
            v42 = 0;
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
            v10 = v40;
            if (!v40)
              goto LABEL_28;
            goto LABEL_10;
          }
          v13 = v41;
        }
      }
      v12 = v13;
    }
    while (v13 < v11);
  }
  v22 = v40;
  v40 = 0;
  if (v22)
  {
    v24 = (WTF **)((char *)v22 + 8);
    v23 = *(unsigned int *)v22;
    if ((_DWORD)v23)
    {
      v25 = 8 * v23;
      do
      {
        v26 = *v24;
        *v24 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
            WTF::fastFree(v26, v9);
          else
            --*(_DWORD *)v26;
        }
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
    WTF::fastFree(v22, v9);
  }
LABEL_40:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v39, v9);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v36, v27);
}

BOOL WebCore::PreviewConverter::supportsMIMEType(WebCore::PreviewConverter *this, const WTF::String *a2)
{
  uint64_t v2;
  WTF::ASCIICaseInsensitiveHash *v3;
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = this;
  v4 = *(_DWORD *)(v2 + 4);
  if (v4 == 9)
  {
    v6 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v6 & 0xDF) != 0x54
        || (*(_BYTE *)(v6 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v6 + 2) & 0xDF) != 0x58
        || (*(_BYTE *)(v6 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v6 + 4) & 0xDF) != 0xF
        || (*(_BYTE *)(v6 + 5) & 0xDF) != 0x48
        || (*(_BYTE *)(v6 + 6) & 0xDF) != 0x54
        || (*(_BYTE *)(v6 + 7) & 0xDF) != 0x4D)
      {
        goto LABEL_4;
      }
      v7 = *(unsigned __int8 *)(v6 + 8);
    }
    else
    {
      if ((*(_WORD *)v6 & 0xFFDF) != 0x54
        || (*(_WORD *)(v6 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v6 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(v6 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v6 + 8) & 0xFFDF) != 0xF
        || (*(_WORD *)(v6 + 10) & 0xFFDF) != 0x48
        || (*(_WORD *)(v6 + 12) & 0xFFDF) != 0x54
        || (*(_WORD *)(v6 + 14) & 0xFFDF) != 0x4D)
      {
        goto LABEL_4;
      }
      v7 = *(unsigned __int16 *)(v6 + 16);
    }
    if ((v7 & 0xFFFFFFDF) == 0x4C)
      return 0;
    goto LABEL_4;
  }
  if (v4 != 10)
    goto LABEL_4;
  v8 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v8 & 0xDF) == 0x54
      && (*(_BYTE *)(v8 + 1) & 0xDF) == 0x45
      && (*(_BYTE *)(v8 + 2) & 0xDF) == 0x58
      && (*(_BYTE *)(v8 + 3) & 0xDF) == 0x54
      && (*(_BYTE *)(v8 + 4) & 0xDF) == 0xF
      && (*(_BYTE *)(v8 + 5) & 0xDF) == 0x50
      && (*(_BYTE *)(v8 + 6) & 0xDF) == 0x4C
      && (*(_BYTE *)(v8 + 7) & 0xDF) == 0x41
      && (*(_BYTE *)(v8 + 8) & 0xDF) == 0x49)
    {
      v9 = *(unsigned __int8 *)(v8 + 9);
      goto LABEL_30;
    }
  }
  else if ((*(_WORD *)v8 & 0xFFDF) == 0x54
         && (*(_WORD *)(v8 + 2) & 0xFFDF) == 0x45
         && (*(_WORD *)(v8 + 4) & 0xFFDF) == 0x58
         && (*(_WORD *)(v8 + 6) & 0xFFDF) == 0x54
         && (*(_WORD *)(v8 + 8) & 0xFFDF) == 0xF
         && (*(_WORD *)(v8 + 10) & 0xFFDF) == 0x50
         && (*(_WORD *)(v8 + 12) & 0xFFDF) == 0x4C
         && (*(_WORD *)(v8 + 14) & 0xFFDF) == 0x41
         && (*(_WORD *)(v8 + 16) & 0xFFDF) == 0x49)
  {
    v9 = *(unsigned __int16 *)(v8 + 18);
LABEL_30:
    if ((v9 & 0xFFFFFFDF) == 0x4E)
      return 0;
  }
LABEL_4:
  if (_MergedGlobals_219 == 1)
  {
    if (qword_1ECE83B60)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&qword_1ECE83B60, v3) != 0;
  }
  else
  {
    WebCore::PreviewConverter::platformSupportedMIMETypes(this, &v11);
    v3 = this;
    qword_1ECE83B60 = v11;
    _MergedGlobals_219 = 1;
    if (v11)
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(&qword_1ECE83B60, v3) != 0;
  }
  return 0;
}

uint64_t WebCore::ResourceLoader::shouldUseCredentialStorage(WebCore::ResourceLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v12;
  void *v13;

  if ((*(_DWORD *)((_BYTE *)this + 1090) & 0x30) != 0x10)
    return 0;
  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v7 = (_DWORD *)((char *)this + 16);
    ++*((_DWORD *)this + 4);
LABEL_8:
    v8 = *(_QWORD *)(v2 + 280);
    if (v8)
      ++*(_DWORD *)v8;
    goto LABEL_10;
  }
  v5 = (*(_DWORD *)v4)++;
  v6 = *(unsigned __int8 *)(v4 + 1682);
  if (v5)
  {
    *(_DWORD *)v4 = v5;
  }
  else
  {
    WebCore::Page::~Page(v4);
    WTF::fastFree(v12, v13);
  }
  if (!(_DWORD)v6)
    return v6;
  v7 = (_DWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 4);
  ++*((_DWORD *)this + 4);
  if (v2)
    goto LABEL_8;
  v8 = 0;
LABEL_10:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  if (v10)
    ++v10[6];
  v6 = (*(uint64_t (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v9 + 104))(v9, v10, *((_QWORD *)this + 93));
  if (v10)
  {
    if (v10[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
    else
      --v10[6];
  }
  if (!*(_DWORD *)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1941B31A8);
  }
  --*(_DWORD *)v8;
  if (*v7 == 1)
    (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)this + 8))(this);
  else
    --*v7;
  return v6;
}

_DWORD *WebCore::JSAbstractRange::destroy(WebCore::JSAbstractRange *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WebCore::JSNodeList::destroy(WebCore::JSNodeList *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::RenderElement *WebCore::RenderInline::styleWillChange(WTF **a1, uint64_t a2, WebCore::RenderStyle *a3)
{
  WebCore::RenderElement *result;
  WebCore::RenderObject *v6;

  WebCore::RenderLayerModelObject::styleWillChange(a1, a2, a3);
  result = (WebCore::RenderElement *)WebCore::RenderElement::canContainAbsolutelyPositionedObjects((WebCore::RenderElement *)a1);
  if ((_DWORD)result)
  {
    if ((*((_BYTE *)a3 + 18) & 0x38) == 0)
    {
      result = (WebCore::RenderElement *)WebCore::RenderObject::containingBlockForPositionType(2, (uint64_t)a1);
      if (result)
      {
        v6 = result;
        result = (WebCore::RenderElement *)WebCore::RenderElement::canContainAbsolutelyPositionedObjects(result);
        if ((result & 1) == 0)
          return WebCore::RenderBlock::removePositionedObjects(v6, 0, 0);
      }
    }
  }
  return result;
}

void WebCore::RenderStyle::getRoundedInnerBorderFor(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  __int16 v18;
  char v19;
  _BYTE v20[64];
  char v21;
  _BYTE v22[64];
  char v23;

  if ((WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)a1) & 1) != 0)
  {
    WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 208);
    v23 = 1;
    v20[0] = 0;
    v21 = 0;
    WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v20, (uint64_t)v22);
    v21 = 1;
  }
  else
  {
    v22[0] = 0;
    v23 = 0;
    v20[0] = 0;
    v21 = 0;
  }
  v18 = (unsigned __int16)*(_DWORD *)(a1 + 44) >> 13;
  v19 = 2;
  switch((unsigned __int16)*(_DWORD *)(a1 + 44) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_5;
    case 3:
    case 5:
      LOBYTE(v18) = 3;
      goto LABEL_5;
    case 4:
      goto LABEL_6;
    default:
      LOBYTE(v18) = 0;
LABEL_5:
      v19 = v18;
LABEL_6:
      WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::BorderDataRadii *)v20, a2, a3, a4, a5, a6, (v19 & 6) != 2, a7, a9, a8);
      if (v21)
        WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v20);
      if (v23)
        WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v22);
      return;
  }
}

void WebCore::BorderDataRadii::~BorderDataRadii(WebCore::BorderDataRadii *this)
{
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 8));
  }
  if (*((_BYTE *)this + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 6));
  }
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  if (*((_BYTE *)this + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 2));
  }
  if (*((_BYTE *)this + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
  }
}

WebCore::Length *WebCore::BorderDataRadii::BorderDataRadii(WebCore::Length *this, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int v8;
  int *v9;
  unsigned int v10;
  int v11;
  int *v12;
  unsigned int v13;
  int v14;
  int *v15;
  unsigned int v16;
  int v17;
  int *v18;
  unsigned int v19;
  int v20;
  int *v21;
  unsigned int v22;
  int v23;
  int *v24;
  unsigned int v25;
  int v26;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v4 = *(unsigned __int8 *)(a2 + 4);
  *((_BYTE *)this + 4) = v4;
  *((_BYTE *)this + 5) = *(_BYTE *)(a2 + 5);
  if (v4 <= 0xD)
  {
    v5 = 1 << v4;
    if ((v5 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 6) = *(_BYTE *)(a2 + 6);
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else if ((v5 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a2;
      WebCore::Length::ref((int *)this);
    }
  }
  *((_DWORD *)this + 2) = 0;
  v6 = (int *)((char *)this + 8);
  *(_WORD *)((char *)this + 13) = 0;
  v7 = *(unsigned __int8 *)(a2 + 12);
  *((_BYTE *)this + 12) = v7;
  *((_BYTE *)this + 13) = *(_BYTE *)(a2 + 13);
  if (v7 <= 0xD)
  {
    v8 = 1 << v7;
    if ((v8 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 14) = *(_BYTE *)(a2 + 14);
      *v6 = *(_DWORD *)(a2 + 8);
    }
    else if ((v8 & 0x3003) != 0)
    {
      *v6 = 0;
    }
    else
    {
      *v6 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref(v6);
    }
  }
  *((_DWORD *)this + 4) = 0;
  v9 = (int *)((char *)this + 16);
  *(_WORD *)((char *)this + 21) = 0;
  v10 = *(unsigned __int8 *)(a2 + 20);
  *((_BYTE *)this + 20) = v10;
  *((_BYTE *)this + 21) = *(_BYTE *)(a2 + 21);
  if (v10 <= 0xD)
  {
    v11 = 1 << v10;
    if ((v11 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 22) = *(_BYTE *)(a2 + 22);
      *v9 = *(_DWORD *)(a2 + 16);
    }
    else if ((v11 & 0x3003) != 0)
    {
      *v9 = 0;
    }
    else
    {
      *v9 = *(_DWORD *)(a2 + 16);
      WebCore::Length::ref(v9);
    }
  }
  *((_DWORD *)this + 6) = 0;
  v12 = (int *)((char *)this + 24);
  *(_WORD *)((char *)this + 29) = 0;
  v13 = *(unsigned __int8 *)(a2 + 28);
  *((_BYTE *)this + 28) = v13;
  *((_BYTE *)this + 29) = *(_BYTE *)(a2 + 29);
  if (v13 <= 0xD)
  {
    v14 = 1 << v13;
    if ((v14 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 30) = *(_BYTE *)(a2 + 30);
      *v12 = *(_DWORD *)(a2 + 24);
    }
    else if ((v14 & 0x3003) != 0)
    {
      *v12 = 0;
    }
    else
    {
      *v12 = *(_DWORD *)(a2 + 24);
      WebCore::Length::ref(v12);
    }
  }
  *((_DWORD *)this + 8) = 0;
  v15 = (int *)((char *)this + 32);
  *(_WORD *)((char *)this + 37) = 0;
  v16 = *(unsigned __int8 *)(a2 + 36);
  *((_BYTE *)this + 36) = v16;
  *((_BYTE *)this + 37) = *(_BYTE *)(a2 + 37);
  if (v16 <= 0xD)
  {
    v17 = 1 << v16;
    if ((v17 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 38) = *(_BYTE *)(a2 + 38);
      *v15 = *(_DWORD *)(a2 + 32);
    }
    else if ((v17 & 0x3003) != 0)
    {
      *v15 = 0;
    }
    else
    {
      *v15 = *(_DWORD *)(a2 + 32);
      WebCore::Length::ref(v15);
    }
  }
  *((_DWORD *)this + 10) = 0;
  v18 = (int *)((char *)this + 40);
  *(_WORD *)((char *)this + 45) = 0;
  v19 = *(unsigned __int8 *)(a2 + 44);
  *((_BYTE *)this + 44) = v19;
  *((_BYTE *)this + 45) = *(_BYTE *)(a2 + 45);
  if (v19 <= 0xD)
  {
    v20 = 1 << v19;
    if ((v20 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 46) = *(_BYTE *)(a2 + 46);
      *v18 = *(_DWORD *)(a2 + 40);
    }
    else if ((v20 & 0x3003) != 0)
    {
      *v18 = 0;
    }
    else
    {
      *v18 = *(_DWORD *)(a2 + 40);
      WebCore::Length::ref(v18);
    }
  }
  *((_DWORD *)this + 12) = 0;
  v21 = (int *)((char *)this + 48);
  *(_WORD *)((char *)this + 53) = 0;
  v22 = *(unsigned __int8 *)(a2 + 52);
  *((_BYTE *)this + 52) = v22;
  *((_BYTE *)this + 53) = *(_BYTE *)(a2 + 53);
  if (v22 <= 0xD)
  {
    v23 = 1 << v22;
    if ((v23 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 54) = *(_BYTE *)(a2 + 54);
      *v21 = *(_DWORD *)(a2 + 48);
    }
    else if ((v23 & 0x3003) != 0)
    {
      *v21 = 0;
    }
    else
    {
      *v21 = *(_DWORD *)(a2 + 48);
      WebCore::Length::ref(v21);
    }
  }
  *((_DWORD *)this + 14) = 0;
  v24 = (int *)((char *)this + 56);
  *(_WORD *)((char *)this + 61) = 0;
  v25 = *(unsigned __int8 *)(a2 + 60);
  *((_BYTE *)this + 60) = v25;
  *((_BYTE *)this + 61) = *(_BYTE *)(a2 + 61);
  if (v25 <= 0xD)
  {
    v26 = 1 << v25;
    if ((v26 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 62) = *(_BYTE *)(a2 + 62);
      *v24 = *(_DWORD *)(a2 + 56);
    }
    else if ((v26 & 0x3003) != 0)
    {
      *v24 = 0;
    }
    else
    {
      *v24 = *(_DWORD *)(a2 + 56);
      WebCore::Length::ref(v24);
    }
  }
  return this;
}

WTF *WebCore::RenderLayer::backgroundClipRect(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  WTF *result;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  int v19;
  WTF *v20;
  WTF *v21;

  WebCore::RenderLayer::parentClipRects((WTF *)&v21, a2, a3);
  result = v21;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = (*(_DWORD *)(v8 + 96) >> 19) & 7;
  v10 = (char *)v21 + 8;
  if (v9 == 6)
    v10 = (char *)v21 + 28;
  if (v9 == 2)
    v11 = (char *)v21 + 48;
  else
    v11 = v10;
  *(_OWORD *)a1 = *(_OWORD *)v11;
  a1[4] = *((_DWORD *)v11 + 4);
  if (*((_BYTE *)result + 4))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8) + 1944);
    if (*(_QWORD *)(*(_QWORD *)a3 + 32) == v12)
    {
      v14 = *a1;
      v13 = a1[1];
      if (*a1 != -1073741808 || v13 != -1073741808 || a1[2] != 2147483615 || a1[3] != 2147483615)
      {
        v20 = result;
        v15 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v12 + 248));
        result = v20;
        v16 = HIDWORD(v15);
        v17 = __OFADD__(v14, (_DWORD)v15);
        v18 = v14 + v15;
        if (v17)
          v18 = (v14 >> 31) + 0x7FFFFFFF;
        v17 = __OFADD__(v13, (_DWORD)v16);
        v19 = v13 + v16;
        if (v17)
          v19 = (v13 >> 31) + 0x7FFFFFFF;
        *a1 = v18;
        a1[1] = v19;
      }
    }
  }
  if (*(_DWORD *)result == 1)
    return (WTF *)WTF::fastFree(result, v6);
  --*(_DWORD *)result;
  return result;
}

void WebCore::RenderLayer::collectFragments(uint64_t a1, void *a2, WebCore::RenderLayer *a3, const WebCore::LayoutRect *a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t *a8, __int128 *a9, int a10)
{
  WebCore::RenderLayer *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  int v14;
  int *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WebCore::RenderObject *v62;
  WebCore::RenderLayer *v63;
  uint64_t v64;
  WebCore::RenderLayer *v65;
  BOOL v66;
  signed int v67;
  uint64_t v68;
  int v69;
  signed int v70;
  int v71;
  signed int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  signed int v80;
  uint64_t v81;
  int v82;
  signed int v83;
  int v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  signed int v98;
  uint64_t v99;
  int v100;
  signed int v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  signed int v106;
  uint64_t v107;
  int v108;
  signed int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  unint64_t v122;
  _DWORD *v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  signed int v130;
  int v131;
  int isTransformed;
  double v133;
  WebCore::RenderFragmentedFlow *v134;
  int v135;
  int v136;
  WebCore::RenderLayer *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  int v145;
  void *v146;
  WTF *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  WTF *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  int v214;
  signed int v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  WebCore::RenderFragmentedFlow *v219;
  unsigned int v220;
  uint64_t v222;
  unsigned int v224;
  unsigned int v226;
  WTF *v228;
  __int128 v230;
  char v231;
  WebCore::RenderLayer *v232;
  unsigned int v233;
  unsigned __int8 v234;
  __int128 v235;
  char v236;
  _OWORD v237[2];
  WTF *v238[2];
  _BYTE v239[64];
  __int128 v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  char v244;
  __int128 v245;
  char v246;
  __int128 v247;
  uint64_t v248;
  unsigned int v249;
  unsigned __int8 v250;
  WTF *v251[3];

  v222 = (uint64_t)a2;
  v10 = (WebCore::RenderLayer *)a1;
  if (!(_DWORD)a5)
  {
    v57 = *(_QWORD *)(a1 + 216);
    if (v57)
    {
      v58 = a1;
      do
      {
        v59 = *(_QWORD *)(v57 + 8);
        if (!v59)
          break;
        if (*(_QWORD *)(v59 + 256))
          goto LABEL_3;
        if (v59 == v58)
          break;
        if (*(_QWORD *)(v58 + 256))
          goto LABEL_3;
        v60 = a5;
        v61 = a6;
        if ((*(_BYTE *)(v58 + 24) & 4) == 0)
        {
          v62 = *(WebCore::RenderObject **)(v58 + 32);
          while (1)
          {
            v62 = WebCore::RenderObject::containingBlock(v62);
            LODWORD(a6) = v61;
            LODWORD(a5) = v60;
            v10 = (WebCore::RenderLayer *)a1;
            if (!v62 || *((_BYTE *)v62 + 46) == 49)
              goto LABEL_2;
            if ((*((_BYTE *)v62 + 21) & 0x80) != 0)
            {
              v58 = *((_QWORD *)v62 + 18);
              goto LABEL_362;
            }
          }
        }
        v58 = *(_QWORD *)(v58 + 40);
LABEL_362:
        v57 = *(_QWORD *)(v58 + 216);
        a6 = v61;
        a5 = v60;
        v10 = (WebCore::RenderLayer *)a1;
      }
      while (v57);
    }
  }
LABEL_2:
  v11 = *((_QWORD *)v10 + 27);
  if (!v11)
    goto LABEL_3;
  v63 = *(WebCore::RenderLayer **)(v11 + 8);
  if (!v63)
    goto LABEL_3;
  v218 = a5;
  v220 = a6;
  v64 = (uint64_t)a3;
  if (v63 == a3)
    goto LABEL_303;
  v10 = (WebCore::RenderLayer *)a1;
  if ((WebCore::RenderLayer *)a1 == a3)
  {
LABEL_3:
    LOBYTE(v238[0]) = 0;
    BYTE4(v238[0]) = 0;
    v239[4] = 0;
    memset(&v239[44], 0, 17);
    memset(&v239[8], 0, 33);
    v241 = 0;
    v240 = 0uLL;
    *(_QWORD *)&v235 = a3;
    DWORD2(v235) = a6;
    BYTE12(v235) = a7;
    if (a3 == v10 || !*((_QWORD *)v10 + 5))
    {
      *(_OWORD *)&v239[24] = *(_OWORD *)a4;
      v239[40] = 0;
      goto LABEL_47;
    }
    WebCore::RenderLayer::parentClipRects((WTF *)&v245, (uint64_t)v10, (uint64_t)&v235);
    v12 = (WTF *)v245;
    v13 = *((_QWORD *)v10 + 4);
    v14 = (*(_DWORD *)(v13 + 96) >> 19) & 7;
    if (v14 == 2)
    {
      v15 = (int *)(v245 + 48);
    }
    else if (v14 == 6)
    {
      v15 = (int *)(v245 + 28);
    }
    else
    {
      v15 = (int *)(v245 + 8);
    }
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = v15[3];
    v20 = v15[4];
    if (!*(_BYTE *)(v245 + 4))
    {
      v21 = *v15;
      v22 = v15[1];
      goto LABEL_9;
    }
    v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8) + 1944);
    v21 = *v15;
    v22 = v15[1];
    if (*((_QWORD *)a3 + 4) != v116)
    {
LABEL_9:
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, a2);
      else
        --*(_DWORD *)v12;
      *(_DWORD *)&v239[24] = v21;
      *(_DWORD *)&v239[28] = v22;
      *(_DWORD *)&v239[32] = v18;
      *(_DWORD *)&v239[36] = v19;
      v239[40] = v20;
      v24 = *(_DWORD *)a4;
      v23 = *((_DWORD *)a4 + 1);
      if (*(_DWORD *)a4 == -1073741808
        && v23 == -1073741808
        && *((_DWORD *)a4 + 2) == 2147483615
        && *((_DWORD *)a4 + 3) == 2147483615)
      {
        goto LABEL_47;
      }
      if (v21 == -1073741808 && v18 == 2147483615)
      {
        if (v22 != -1073741808 || v19 != 2147483615)
          goto LABEL_19;
      }
      else if (v21 != -1073741808 || v22 != -1073741808 || v18 != 2147483615 || v19 != 2147483615)
      {
LABEL_19:
        if (v21 <= v24)
          v25 = *(_DWORD *)a4;
        else
          v25 = v21;
        if ((int)v22 <= (int)v23)
          v26 = v23;
        else
          v26 = v22;
        v27 = v21 + v18;
        if (__OFADD__(v21, v18))
          v27 = (v21 >> 31) + 0x7FFFFFFF;
        v28 = *((_DWORD *)a4 + 2);
        v29 = __OFADD__(v24, v28);
        v30 = v24 + v28;
        if (v29)
          v30 = (v24 >> 31) + 0x7FFFFFFF;
        if (v30 >= v27)
          v31 = v27;
        else
          v31 = v30;
        v32 = v22 + v19;
        if (__OFADD__(v22, v19))
          v32 = (v22 >> 31) + 0x7FFFFFFF;
        v33 = *((_DWORD *)a4 + 3);
        v29 = __OFADD__(v23, v33);
        v34 = v23 + v33;
        if (v29)
          v34 = (v23 >> 31) + 0x7FFFFFFF;
        if (v34 >= v32)
          v35 = v32;
        else
          v35 = v34;
        if (v25 >= v31 || (int)v26 >= v35)
        {
          v31 = 0;
          v35 = 0;
          v25 = 0;
          v26 = 0;
        }
        *(_QWORD *)&v239[24] = v25 | (unint64_t)(v26 << 32);
        v29 = __OFSUB__(v31, v25);
        v36 = v31 - v25;
        if (v29)
          v36 = (v31 >> 31) + 0x7FFFFFFF;
        v29 = __OFSUB__(v35, (_DWORD)v26);
        v37 = (v35 - v26);
        if (v29)
          v37 = (v35 >> 31) + 0x7FFFFFFF;
        *(_QWORD *)&v239[32] = v36 | (unint64_t)(v37 << 32);
LABEL_47:
        v38 = *a8;
        v39 = *(_DWORD *)(a1 + 164);
        v40 = *(_DWORD *)(a1 + 168);
        LODWORD(v41) = v39 << 6;
        if (v39 < -33554432)
          LODWORD(v41) = 0x80000000;
        if (v39 <= 0x1FFFFFF)
          v41 = v41;
        else
          v41 = 0x7FFFFFFFLL;
        if (v40 >= -33554432)
          v42 = v40 << 6;
        else
          v42 = 0x80000000;
        if (v40 <= 0x1FFFFFF)
          v43 = v42;
        else
          v43 = 0x7FFFFFFFLL;
        *(_QWORD *)&v239[8] = *a8;
        *(_QWORD *)&v239[16] = v41 | (v43 << 32);
        v44 = *(double *)&v239[24];
        *(_OWORD *)&v239[44] = *(_OWORD *)&v239[24];
        v239[60] = v239[40];
        v45 = *(_QWORD *)(a1 + 32);
        v46 = *(_DWORD *)(v45 + 20);
        if ((v46 & 0x1800000) == 0x1000000)
        {
          if ((v46 & 0x10000) == 0
            && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v45 + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
          {
            goto LABEL_60;
          }
          if ((v46 & 0x10000) == 0)
            goto LABEL_129;
        }
        else if ((v46 & 0x10000) == 0)
        {
          goto LABEL_60;
        }
        if (a3 != (WebCore::RenderLayer *)a1 || (a7 & 1) != 0)
        {
          *(_QWORD *)&v245 = v38;
          if ((*(_BYTE *)(v45 + 45) & 4) != 0)
          {
            v54 = 177;
          }
          else
          {
            if ((*(_BYTE *)(v45 + 52) & 7) != 4 || (*(_BYTE *)(v45 + 53) & 1) != 0)
            {
              a2 = 0;
              v56 = 0;
              LODWORD(v55) = 0;
LABEL_72:
              if (*(_QWORD *)&v239[44] == 0xC0000010C0000010
                && *(_DWORD *)&v239[52] == 2147483615
                && *(_DWORD *)&v239[56] == 2147483615)
              {
                *(_QWORD *)&v239[44] = v55 | (v56 << 32);
              }
              else
              {
                if (*(int *)&v239[44] <= (int)v55)
                  v67 = v55;
                else
                  v67 = *(_DWORD *)&v239[44];
                if (*(int *)&v239[48] <= (int)v56)
                  v68 = v56;
                else
                  v68 = *(unsigned int *)&v239[48];
                v69 = *(_DWORD *)&v239[44] + *(_DWORD *)&v239[52];
                if (__OFADD__(*(_DWORD *)&v239[44], *(_DWORD *)&v239[52]))
                  v69 = (*(_DWORD *)&v239[44] >> 31) + 0x7FFFFFFF;
                v70 = v55 + (_DWORD)a2;
                if (__OFADD__((_DWORD)v55, (_DWORD)a2))
                  v70 = (v55 >> 31) + 0x7FFFFFFF;
                if (v70 >= v69)
                  v70 = v69;
                v71 = *(_DWORD *)&v239[48] + *(_DWORD *)&v239[56];
                if (__OFADD__(*(_DWORD *)&v239[48], *(_DWORD *)&v239[56]))
                  v71 = (*(_DWORD *)&v239[48] >> 31) + 0x7FFFFFFF;
                v72 = v56 + HIDWORD(a2);
                if (__OFADD__((_DWORD)v56, HIDWORD(a2)))
                  v72 = (v56 >> 31) + 0x7FFFFFFF;
                if (v72 >= v71)
                  v73 = v71;
                else
                  v73 = v72;
                if (v67 >= v70 || (int)v68 >= v73)
                {
                  v70 = 0;
                  v73 = 0;
                  v67 = 0;
                  v68 = 0;
                }
                *(_QWORD *)&v239[44] = v67 | (unint64_t)(v68 << 32);
                v29 = __OFSUB__(v70, v67);
                v74 = v70 - v67;
                if (v29)
                  v74 = (v70 >> 31) + 0x7FFFFFFF;
                v29 = __OFSUB__(v73, (_DWORD)v68);
                v75 = (v73 - v68);
                if (v29)
                  v75 = (v73 >> 31) + 0x7FFFFFFF;
                a2 = (void *)(v74 | (unint64_t)(v75 << 32));
              }
              *(_QWORD *)&v239[52] = a2;
              goto LABEL_128;
            }
            v54 = 110;
          }
          v55 = (*(uint64_t (**)(void))(*(_QWORD *)v45 + 8 * v54))();
          v56 = HIDWORD(v55);
          if (v55 != 0xC0000010C0000010 || a2 != (void *)0x7FFFFFDF7FFFFFDFLL)
            goto LABEL_72;
LABEL_128:
          v239[60] = 1;
          goto LABEL_129;
        }
        if (*(_QWORD *)(a1 + 200)
          && (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v45 + 80)) & 1) != 0)
        {
          goto LABEL_128;
        }
LABEL_129:
        v76 = *(_QWORD *)(a1 + 32);
        if ((*(_DWORD *)(v76 + 20) & 0x1800000) == 0x1000000
          && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v76 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v76 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v76 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0
          && (*(_BYTE *)(v76 + 45) & 4) != 0)
        {
          ++*(_DWORD *)(v76 + 16);
          *(_QWORD *)&v245 = v38;
          v96 = WebCore::RenderBox::clipRect((WebCore::RenderBox *)v76, (const WebCore::LayoutPoint *)&v245, 0);
          if (v96 != 0xC0000010C0000010 || a2 != (void *)0x7FFFFFDF7FFFFFDFLL)
          {
            if (*(_DWORD *)&v239[24] == -1073741808
              && *(_QWORD *)&v239[28] == 0x7FFFFFDFC0000010
              && *(_DWORD *)&v239[36] == 2147483615)
            {
              *(_QWORD *)&v239[24] = v96;
              v97 = (unint64_t)a2;
            }
            else
            {
              if (*(int *)&v239[24] <= (int)v96)
                v98 = v96;
              else
                v98 = *(_DWORD *)&v239[24];
              if (*(int *)&v239[28] <= SHIDWORD(v96))
                v99 = HIDWORD(v96);
              else
                v99 = *(unsigned int *)&v239[28];
              v100 = *(_DWORD *)&v239[24] + *(_DWORD *)&v239[32];
              if (__OFADD__(*(_DWORD *)&v239[24], *(_DWORD *)&v239[32]))
                v100 = (*(_DWORD *)&v239[24] >> 31) + 0x7FFFFFFF;
              v101 = v96 + (_DWORD)a2;
              if (__OFADD__((_DWORD)v96, (_DWORD)a2))
                v101 = (v96 >> 31) + 0x7FFFFFFF;
              if (v101 >= v100)
                v101 = v100;
              v102 = *(_DWORD *)&v239[28] + *(_DWORD *)&v239[36];
              if (__OFADD__(*(_DWORD *)&v239[28], *(_DWORD *)&v239[36]))
                v102 = (*(_DWORD *)&v239[28] >> 31) + 0x7FFFFFFF;
              v103 = HIDWORD(v96) + HIDWORD(a2);
              if (__OFADD__(HIDWORD(v96), HIDWORD(a2)))
                v103 = (HIDWORD(v96) >> 31) + 0x7FFFFFFF;
              if (v103 >= v102)
                v103 = v102;
              if (v98 >= v101 || (int)v99 >= v103)
              {
                v101 = 0;
                v103 = 0;
                v98 = 0;
                v99 = 0;
              }
              *(_QWORD *)&v239[24] = v98 | (unint64_t)(v99 << 32);
              v29 = __OFSUB__(v101, v98);
              v104 = v101 - v98;
              if (v29)
                v104 = (v101 >> 31) + 0x7FFFFFFF;
              v29 = __OFSUB__(v103, (_DWORD)v99);
              v105 = (v103 - v99);
              if (v29)
                v105 = (v103 >> 31) + 0x7FFFFFFF;
              v97 = v104 | (unint64_t)(v105 << 32);
            }
            *(_QWORD *)&v239[32] = v97;
            if (*(_DWORD *)&v239[44] == -1073741808
              && *(_DWORD *)&v239[48] == -1073741808
              && *(_DWORD *)&v239[52] == 2147483615
              && *(_DWORD *)&v239[56] == 2147483615)
            {
              *(_QWORD *)&v239[44] = v96;
            }
            else
            {
              if (*(int *)&v239[44] <= (int)v96)
                v106 = v96;
              else
                v106 = *(_DWORD *)&v239[44];
              if (*(int *)&v239[48] <= SHIDWORD(v96))
                v107 = HIDWORD(v96);
              else
                v107 = *(unsigned int *)&v239[48];
              v108 = *(_DWORD *)&v239[44] + *(_DWORD *)&v239[52];
              if (__OFADD__(*(_DWORD *)&v239[44], *(_DWORD *)&v239[52]))
                v108 = (*(_DWORD *)&v239[44] >> 31) + 0x7FFFFFFF;
              v109 = v96 + (_DWORD)a2;
              if (__OFADD__((_DWORD)v96, (_DWORD)a2))
                v109 = (v96 >> 31) + 0x7FFFFFFF;
              if (v109 >= v108)
                v109 = v108;
              v110 = *(_DWORD *)&v239[48] + *(_DWORD *)&v239[56];
              if (__OFADD__(*(_DWORD *)&v239[48], *(_DWORD *)&v239[56]))
                v110 = (*(_DWORD *)&v239[48] >> 31) + 0x7FFFFFFF;
              v111 = HIDWORD(v96) + HIDWORD(a2);
              if (__OFADD__(HIDWORD(v96), HIDWORD(a2)))
                v111 = (HIDWORD(v96) >> 31) + 0x7FFFFFFF;
              if (v111 >= v110)
                v112 = v110;
              else
                v112 = v111;
              if (v106 >= v109 || (int)v107 >= v112)
              {
                v109 = 0;
                v112 = 0;
                v106 = 0;
                v107 = 0;
              }
              *(_QWORD *)&v239[44] = v106 | (unint64_t)(v107 << 32);
              v113 = v109 - v106;
              if (__OFSUB__(v109, v106))
                v113 = (v109 >> 31) + 0x7FFFFFFF;
              v29 = __OFSUB__(v112, (_DWORD)v107);
              v114 = (v112 - v107);
              if (v29)
                v114 = (v112 >> 31) + 0x7FFFFFFF;
              a2 = (void *)(v113 | (unint64_t)(v114 << 32));
            }
            *(_QWORD *)&v239[52] = a2;
          }
          v115 = *(_DWORD *)(v76 + 16);
          if (!v115)
          {
            __break(0xC471u);
            JUMPOUT(0x1941B457CLL);
          }
          *(_DWORD *)(v76 + 16) = v115 - 1;
          v76 = *(_QWORD *)(a1 + 32);
        }
        v77 = *(_BYTE *)(v76 + 45) & 4;
        if (v76 && (*(_BYTE *)(v76 + 45) & 4) != 0)
        {
          v78 = *(_QWORD *)(v76 + 192);
          if (v78)
          {
            v89 = *(_QWORD *)(v78 + 20);
            if ((v89 & 0x80000000) != 0)
              goto LABEL_273;
            v90 = *(_QWORD *)(v76 + 160);
            v91 = *(_QWORD *)(v78 + 28);
            v92 = v89 + v91;
            if (__OFADD__((_DWORD)v89, (_DWORD)v91))
              v92 = 0x7FFFFFFF;
            if (v92 > (int)v90 || (v89 & 0x8000000000000000) != 0)
              goto LABEL_273;
            v93 = HIDWORD(v89);
            v94 = HIDWORD(v90);
            v95 = v93 + HIDWORD(v91);
            if (__OFADD__((_DWORD)v93, HIDWORD(v91)))
              v95 = 0x7FFFFFFF;
            if (v95 > (int)v94)
            {
LABEL_273:
              if (v77)
              {
                v121 = *(_QWORD *)(v76 + 192);
                if (v121)
                {
                  v122 = *(_QWORD *)(v121 + 20);
                  v123 = (_DWORD *)(v121 + 28);
                }
                else
                {
                  v122 = 0;
                  v123 = (_DWORD *)(v76 + 160);
                }
                LODWORD(v124) = *v123;
                LODWORD(v123) = v123[1];
                v125 = HIDWORD(v122);
              }
              else
              {
                v122 = 0;
                if ((*(_BYTE *)(v76 + 52) & 7) == 4 && (*(_BYTE *)(v76 + 53) & 1) == 0)
                {
                  v122 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v76, (const WebCore::RenderLayerModelObject *)a2, v44);
                  v76 = *(_QWORD *)(a1 + 32);
                  v77 = *(_BYTE *)(v76 + 45) & 4;
                }
                else
                {
                  v124 = 0;
                }
                v125 = HIDWORD(v122);
                v123 = (_DWORD *)HIDWORD(v124);
                if (!v77)
                {
LABEL_279:
                  v127 = v122 + v38;
                  if (__OFADD__((_DWORD)v122, (_DWORD)v38))
                    v127 = (v122 >> 31) + 0x7FFFFFFF;
                  v128 = (v125 + HIDWORD(v38));
                  if (__OFADD__((_DWORD)v125, HIDWORD(v38)))
                    v128 = (v125 >> 31) + 0x7FFFFFFF;
                  if ((_QWORD)v235 == a1 && (a7 & 1) == 0)
                    goto LABEL_60;
                  if (v127 == -1073741808 && (_DWORD)v124 == 2147483615)
                  {
                    if ((_DWORD)v128 == -1073741808 && (_DWORD)v123 == 2147483615)
                      goto LABEL_60;
                    v130 = *(_DWORD *)&v239[24];
                    v129 = *(_DWORD *)&v239[28];
                    v131 = *(_DWORD *)&v239[32];
                    if (*(_DWORD *)&v239[24] == -1073741808
                      && *(_QWORD *)&v239[28] == 0x7FFFFFDFC0000010
                      && *(_DWORD *)&v239[36] == 2147483615)
                    {
                      goto LABEL_291;
                    }
                  }
                  else
                  {
                    if (v127 == -1073741808
                      && (_DWORD)v128 == -1073741808
                      && (_DWORD)v124 == 2147483615
                      && (_DWORD)v123 == 2147483615)
                    {
                      goto LABEL_60;
                    }
                    v130 = *(_DWORD *)&v239[24];
                    v129 = *(_DWORD *)&v239[28];
                    v131 = *(_DWORD *)&v239[32];
                    if (*(_DWORD *)&v239[24] == -1073741808
                      && *(_QWORD *)&v239[28] == 0x7FFFFFDFC0000010
                      && *(_DWORD *)&v239[36] == 2147483615)
                    {
LABEL_291:
                      *(_QWORD *)&v239[24] = v127 | (unint64_t)(v128 << 32);
                      *(_DWORD *)&v239[32] = v124;
                      *(_DWORD *)&v239[36] = (_DWORD)v123;
LABEL_60:
                      v47 = *(_DWORD *)(v222 + 12);
                      if (v47 == *(_DWORD *)(v222 + 8))
                      {
                        WTF::Vector<WebCore::LayerFragment,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayerFragment&>(v222, (unint64_t)v238);
                      }
                      else
                      {
                        v48 = *(_QWORD *)v222 + 104 * v47;
                        v49 = *(_OWORD *)v238;
                        v50 = *(_OWORD *)&v239[16];
                        *(_OWORD *)(v48 + 16) = *(_OWORD *)v239;
                        *(_OWORD *)(v48 + 32) = v50;
                        *(_OWORD *)v48 = v49;
                        v51 = *(_OWORD *)&v239[32];
                        v52 = *(_OWORD *)&v239[48];
                        v53 = v240;
                        *(_QWORD *)(v48 + 96) = v241;
                        *(_OWORD *)(v48 + 64) = v52;
                        *(_OWORD *)(v48 + 80) = v53;
                        *(_OWORD *)(v48 + 48) = v51;
                        ++*(_DWORD *)(v222 + 12);
                      }
                      return;
                    }
                  }
                  if (v130 <= (int)v127)
                    v209 = v127;
                  else
                    v209 = v130;
                  if ((int)v129 <= (int)v128)
                    v210 = v128;
                  else
                    v210 = v129;
                  v29 = __OFADD__(v130, v131);
                  v211 = v130 + v131;
                  if (v29)
                    v211 = (v130 >> 31) + 0x7FFFFFFF;
                  v212 = v127 + v124;
                  if (__OFADD__(v127, (_DWORD)v124))
                    v212 = (v127 >> 31) + 0x7FFFFFFF;
                  if (v212 >= v211)
                    v213 = v211;
                  else
                    v213 = v212;
                  v214 = v129 + *(_DWORD *)&v239[36];
                  if (__OFADD__(v129, *(_DWORD *)&v239[36]))
                    v214 = (v129 >> 31) + 0x7FFFFFFF;
                  v29 = __OFADD__((_DWORD)v128, (_DWORD)v123);
                  v215 = v128 + (_DWORD)v123;
                  if (v29)
                    v215 = (v128 >> 31) + 0x7FFFFFFF;
                  if (v215 >= v214)
                    v215 = v214;
                  if ((int)v209 >= v213 || (int)v210 >= v215)
                  {
                    v213 = 0;
                    v215 = 0;
                    v209 = 0;
                    v210 = 0;
                  }
                  *(_QWORD *)&v239[24] = v209 | (unint64_t)(v210 << 32);
                  v216 = v213 - v209;
                  if (__OFSUB__(v213, v209))
                    v216 = (v213 >> 31) + 0x7FFFFFFF;
                  v217 = (v215 - v210);
                  if (__OFSUB__(v215, (_DWORD)v210))
                    v217 = (v215 >> 31) + 0x7FFFFFFF;
                  v79 = v216 | (unint64_t)(v217 << 32);
LABEL_169:
                  *(_QWORD *)&v239[32] = v79;
                  goto LABEL_60;
                }
              }
              v126 = (unsigned __int16)*(_DWORD *)(v76 + 124) >> 13;
              if (v126 <= 5 && ((1 << v126) & 0x2A) != 0)
              {
                if ((*(_BYTE *)(v76 + 21) & 0x10) != 0)
                {
                  v207 = *(_DWORD *)(v76 + 160);
                  v208 = v122 + v124;
                  if (__OFADD__((_DWORD)v122, (_DWORD)v124))
                    v208 = (v122 >> 31) + 0x7FFFFFFF;
                  LODWORD(v122) = v207 - v208;
                  if (__OFSUB__(v207, v208))
                    LODWORD(v122) = (v207 >> 31) + 0x7FFFFFFF;
                }
                else
                {
                  v205 = *(_DWORD *)(v76 + 164);
                  v206 = v125 + (_DWORD)v123;
                  if (__OFADD__((_DWORD)v125, (_DWORD)v123))
                    v206 = (v125 >> 31) + 0x7FFFFFFF;
                  LODWORD(v125) = v205 - v206;
                  if (__OFSUB__(v205, v206))
                    LODWORD(v125) = (v205 >> 31) + 0x7FFFFFFF;
                }
              }
              goto LABEL_279;
            }
          }
        }
        else if ((*(_BYTE *)(v76 + 52) & 7) == 4 && (*(_BYTE *)(v76 + 53) & 1) == 0)
        {
          v118 = *(_QWORD *)(v76 + 160);
          *(_QWORD *)&v245 = 0;
          *((_QWORD *)&v245 + 1) = v118;
          *(_QWORD *)&v243 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v76, (const WebCore::RenderLayerModelObject *)a2, v44);
          *((_QWORD *)&v243 + 1) = v119;
          v120 = WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v245, (const WebCore::LayoutRect *)&v243);
          v76 = *(_QWORD *)(a1 + 32);
          v77 = *(_BYTE *)(v76 + 45) & 4;
          if (!v120)
            goto LABEL_273;
        }
        if (v77 || (v79 = 0, (*(_BYTE *)(v76 + 52) & 7) == 4) && (*(_BYTE *)(v76 + 53) & 1) == 0)
          v79 = *(_QWORD *)(v76 + 160);
        if (a3 == (WebCore::RenderLayer *)a1 && (a7 & 1) == 0
          || v38 == 0xC0000010C0000010 && v79 == 0x7FFFFFDF7FFFFFDFLL)
        {
          goto LABEL_60;
        }
        if (*(_DWORD *)&v239[24] == -1073741808
          && *(_QWORD *)&v239[28] == 0x7FFFFFDFC0000010
          && *(_DWORD *)&v239[36] == 2147483615)
        {
          *(_QWORD *)&v239[24] = v38;
        }
        else
        {
          if (*(int *)&v239[24] <= (int)v38)
            v80 = v38;
          else
            v80 = *(_DWORD *)&v239[24];
          if (*(int *)&v239[28] <= SHIDWORD(v38))
            v81 = HIDWORD(v38);
          else
            v81 = *(unsigned int *)&v239[28];
          v82 = *(_DWORD *)&v239[24] + *(_DWORD *)&v239[32];
          if (__OFADD__(*(_DWORD *)&v239[24], *(_DWORD *)&v239[32]))
            v82 = (*(_DWORD *)&v239[24] >> 31) + 0x7FFFFFFF;
          v83 = v38 + v79;
          if (__OFADD__((_DWORD)v38, (_DWORD)v79))
            v83 = (v38 >> 31) + 0x7FFFFFFF;
          if (v83 >= v82)
            v83 = v82;
          v84 = *(_DWORD *)&v239[28] + *(_DWORD *)&v239[36];
          if (__OFADD__(*(_DWORD *)&v239[28], *(_DWORD *)&v239[36]))
            v84 = (*(_DWORD *)&v239[28] >> 31) + 0x7FFFFFFF;
          v85 = HIDWORD(v79);
          v29 = __OFADD__(HIDWORD(v38), (_DWORD)v85);
          v86 = HIDWORD(v38) + v85;
          if (v29)
            v86 = (HIDWORD(v38) >> 31) + 0x7FFFFFFF;
          if (v86 >= v84)
            v86 = v84;
          if (v80 >= v83 || (int)v81 >= v86)
          {
            v83 = 0;
            v86 = 0;
            v80 = 0;
            v81 = 0;
          }
          *(_QWORD *)&v239[24] = v80 | (unint64_t)(v81 << 32);
          v29 = __OFSUB__(v83, v80);
          v87 = v83 - v80;
          if (v29)
            v87 = (v83 >> 31) + 0x7FFFFFFF;
          v29 = __OFSUB__(v86, (_DWORD)v81);
          v88 = (v86 - v81);
          if (v29)
            v88 = (v86 >> 31) + 0x7FFFFFFF;
          v79 = v87 | (unint64_t)(v88 << 32);
        }
        goto LABEL_169;
      }
      *(_OWORD *)&v239[24] = *(_OWORD *)a4;
      goto LABEL_47;
    }
    if (v16 == -1073741808 && v18 == 2147483615)
    {
      if (v17 == -1073741808)
        goto LABEL_253;
    }
    else if (v16 == -1073741808 && v17 == -1073741808 && v18 == 2147483615)
    {
LABEL_253:
      v21 = -1073741808;
      v22 = -1073741808;
      if (v19 == 2147483615)
        goto LABEL_9;
    }
    v117 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v116 + 248));
    v21 = v16 + v117;
    if (__OFADD__(v16, (_DWORD)v117))
      v21 = (v16 >> 31) + 0x7FFFFFFF;
    v22 = v17 + HIDWORD(v117);
    if (__OFADD__(v17, HIDWORD(v117)))
      v22 = (v17 >> 31) + 0x7FFFFFFF;
    goto LABEL_9;
  }
  v65 = (WebCore::RenderLayer *)a1;
  v10 = (WebCore::RenderLayer *)a1;
  while (v65 != v63)
  {
    v65 = (WebCore::RenderLayer *)*((_QWORD *)v65 + 5);
    if (v65)
      v66 = v65 == a3;
    else
      v66 = 1;
    if (v66)
      goto LABEL_3;
  }
  v64 = (uint64_t)v63;
LABEL_303:
  v10 = (WebCore::RenderLayer *)a1;
  isTransformed = WebCore::RenderLayer::isTransformed(*(WebCore::RenderLayer **)(a1 + 32));
  LODWORD(a6) = v220;
  if (isTransformed)
    goto LABEL_3;
  v251[0] = (WTF *)WebCore::RenderLayer::offsetFromAncestor(a1, v64, 0);
  v248 = v64;
  v249 = v220;
  v250 = a7;
  v247 = 0uLL;
  v245 = 0uLL;
  v246 = 0;
  v243 = 0uLL;
  v244 = 0;
  *(_OWORD *)v238 = xmmword_1969FCA90;
  WebCore::RenderLayer::calculateRects(a1, &v248, (int *)v238, (WTF **)&v247, &v245, (uint64_t)&v243, v251);
  if (a9)
  {
    v242 = *a9;
  }
  else
  {
    *(_QWORD *)&v242 = WebCore::RenderLayer::boundingBox(a1, (const WebCore::RenderLayerModelObject *)v64, v251, 0, v133);
    *((_QWORD *)&v242 + 1) = v180;
  }
  WebCore::LayoutRect::intersect((int *)&v242, (const WebCore::LayoutRect *)&v245);
  v134 = *(WebCore::RenderFragmentedFlow **)(v64 + 32);
  v135 = *((_BYTE *)v134 + 52) & 7;
  v219 = v134;
  v136 = *((_BYTE *)v134 + 53) & 2;
  if (v135 != 1 || v136 == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941B4E7CLL);
  }
  v138 = WebCore::RenderLayer::enclosingPaginationLayerInSubtree(*(WebCore::RenderLayer **)(v64 + 40), a3, v218);
  v238[0] = (WTF *)v239;
  v238[1] = (WTF *)1;
  if (v138)
  {
    v139 = (uint64_t)v138;
    *(_QWORD *)&v235 = WebCore::RenderFragmentedFlow::fragmentsBoundingBox(v219, (const WebCore::LayoutRect *)&v242);
    *((_QWORD *)&v235 + 1) = v140;
    v141 = WebCore::RenderLayer::offsetFromAncestor(v64, v139, 0);
    v142 = v141;
    v143 = HIDWORD(v141);
    v144 = v235 + v141;
    if (__OFADD__((_DWORD)v235, (_DWORD)v141))
      v144 = (v235 >> 31) + 0x7FFFFFFF;
    LODWORD(v235) = v144;
    v145 = DWORD1(v235) + HIDWORD(v141);
    if (__OFADD__(DWORD1(v235), HIDWORD(v141)))
      v145 = (DWORD1(v235) >> 31) + 0x7FFFFFFF;
    DWORD1(v235) = v145;
    *(_QWORD *)&v230 = WebCore::RenderLayer::offsetFromAncestor(a1, (uint64_t)a3, 0);
    WebCore::RenderLayer::collectFragments(v139, v238, a3, a4, v218, v220, a7, &v230, &v235, 0);
    if (HIDWORD(v238[1]))
    {
      v147 = v238[0];
      v228 = (WTF *)((char *)v238[0] + 104 * HIDWORD(v238[1]));
      if ((_DWORD)v143 == 0x80000000)
        v148 = 0x7FFFFFFF;
      else
        v148 = -(int)v143;
      v226 = v148;
      if (v142 == 0x80000000)
        v149 = 0x7FFFFFFF;
      else
        v149 = -v142;
      v224 = v149;
      do
      {
        v230 = *(_OWORD *)a4;
        v150 = *((_DWORD *)v147 + 20);
        v151 = *((_DWORD *)v147 + 21);
        v29 = __OFSUB__(v224, v150);
        v152 = v224 - v150;
        if (v29)
          v152 = (v224 >> 31) + 0x7FFFFFFF;
        v29 = __OFSUB__(v226, v151);
        v153 = v226 - v151;
        if (v29)
          v153 = (v226 >> 31) + 0x7FFFFFFF;
        v29 = __OFADD__((_DWORD)v230, v152);
        v154 = v230 + v152;
        if (v29)
          v154 = (v230 >> 31) + 0x7FFFFFFF;
        v29 = __OFADD__(DWORD1(v230), v153);
        v155 = DWORD1(v230) + v153;
        if (v29)
          v155 = (DWORD1(v230) >> 31) + 0x7FFFFFFF;
        *(_QWORD *)&v230 = __PAIR64__(v155, v154);
        v156 = *(unsigned int *)(v222 + 12);
        WebCore::RenderFragmentedFlow::collectLayerFragments(v219, v222, (uint64_t)&v242, (uint64_t)&v230);
        v157 = *(unsigned int *)(v222 + 12);
        if (v156 < v157)
        {
          v158 = 104 * v156;
          do
          {
            if (v156 >= *(unsigned int *)(v222 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1941B5080);
            }
            v159 = *(_QWORD *)v222 + v158;
            v160 = v242;
            *(_OWORD *)(v159 + 24) = v247;
            *(_OWORD *)(v159 + 40) = v245;
            *(_BYTE *)(v159 + 56) = v246;
            *(_OWORD *)(v159 + 60) = v243;
            *(_BYTE *)(v159 + 76) = v244;
            *(_OWORD *)(v159 + 4) = v160;
            *(_BYTE *)(v159 + 20) = 1;
            v161 = *((_DWORD *)v147 + 20);
            v162 = *((_DWORD *)v147 + 21);
            v163 = *(_DWORD *)(v159 + 80);
            v164 = *(_DWORD *)(v159 + 84);
            v29 = __OFADD__(v161, v163);
            v165 = v161 + v163;
            v166 = (v161 >> 31) + 0x7FFFFFFF;
            if (!v29)
              v166 = v165;
            v29 = __OFADD__(v162, v164);
            v167 = v162 + v164;
            v168 = (v162 >> 31) + 0x7FFFFFFF;
            if (!v29)
              v168 = v167;
            v29 = __OFADD__(v166, v142);
            v169 = v166 + v142;
            LODWORD(v170) = (v166 >> 31) + 0x7FFFFFFF;
            if (v29)
              v170 = v170;
            else
              v170 = v169;
            v29 = __OFADD__(v168, (_DWORD)v143);
            v171 = v168 + v143;
            LODWORD(v172) = (v168 >> 31) + 0x7FFFFFFF;
            if (v29)
              v172 = v172;
            else
              v172 = v171;
            *(_QWORD *)&v237[0] = v170 | (v172 << 32);
            WebCore::LayerFragment::moveBy(v159, (const WebCore::LayoutPoint *)v237);
            WebCore::LayerFragment::intersect(v159, (WTF *)((char *)v147 + 88));
            WebCore::LayerFragment::intersect(v159, (const WebCore::LayoutRect *)(v159 + 88));
            if (!a10)
            {
              v173 = *(_DWORD *)(v159 + 80);
              v174 = *(_DWORD *)(v159 + 84);
              v29 = __OFADD__(v173, v142);
              v175 = v173 + v142;
              LODWORD(v176) = (v173 >> 31) + 0x7FFFFFFF;
              if (v29)
                v176 = v176;
              else
                v176 = v175;
              v29 = __OFADD__(v174, (_DWORD)v143);
              v177 = v174 + v143;
              LODWORD(v178) = (v174 >> 31) + 0x7FFFFFFF;
              if (v29)
                v178 = v178;
              else
                v178 = v177;
              *(_QWORD *)(v159 + 80) = v176 | (v178 << 32);
            }
            ++v156;
            v158 += 104;
          }
          while (v157 != v156);
        }
        v147 = (WTF *)((char *)v147 + 104);
      }
      while (v147 != v228);
    }
  }
  else
  {
    if ((v218
       || (WebCore::RenderLayer::hasCompositedLayerInEnclosingPaginationChain((WebCore::RenderLayer *)a1) & 1) == 0)
      && (v181 = *(_QWORD *)(a1 + 216)) != 0)
    {
      v182 = *(_QWORD *)(v181 + 8);
    }
    else
    {
      v182 = 0;
    }
    v183 = WebCore::RenderLayer::offsetFromAncestor(v182, (uint64_t)a3, 0);
    v184 = v183;
    v185 = HIDWORD(v183);
    v237[0] = *(_OWORD *)a4;
    if (HIDWORD(v183) == 0x80000000)
      v186 = 0x7FFFFFFF;
    else
      v186 = -HIDWORD(v183);
    if ((_DWORD)v183 == 0x80000000)
      v187 = 0x7FFFFFFF;
    else
      v187 = -(int)v183;
    v29 = __OFADD__(v237[0], v187);
    v188 = LODWORD(v237[0]) + v187;
    if (v29)
      v188 = (LODWORD(v237[0]) >> 31) + 0x7FFFFFFF;
    LODWORD(v237[0]) = v188;
    v29 = __OFADD__(DWORD1(v237[0]), v186);
    v189 = DWORD1(v237[0]) + v186;
    if (v29)
      v189 = (DWORD1(v237[0]) >> 31) + 0x7FFFFFFF;
    DWORD1(v237[0]) = v189;
    WebCore::RenderFragmentedFlow::collectLayerFragments(v219, v222, (uint64_t)&v242, (uint64_t)v237);
    v190 = *(_DWORD *)(v222 + 12);
    if (v190)
    {
      v235 = *(_OWORD *)a4;
      v236 = 0;
      if (!*(_QWORD *)(v64 + 40))
        goto LABEL_381;
      v232 = a3;
      v233 = v220;
      v234 = a7;
      WebCore::RenderLayer::backgroundClipRect((unsigned int *)&v230, v64, (uint64_t)&v232);
      v235 = v230;
      v236 = v231;
      WebCore::ClipRect::intersect((int *)&v235, a4);
      v190 = *(_DWORD *)(v222 + 12);
      if (v190)
      {
LABEL_381:
        v191 = *(_QWORD *)v222;
        v192 = *(_QWORD *)v222 + 104 * v190;
        do
        {
          *(_OWORD *)(v191 + 24) = v247;
          *(_OWORD *)(v191 + 40) = v245;
          *(_BYTE *)(v191 + 56) = v246;
          *(_OWORD *)(v191 + 60) = v243;
          *(_BYTE *)(v191 + 76) = v244;
          *(_OWORD *)(v191 + 4) = v242;
          *(_BYTE *)(v191 + 20) = 1;
          v193 = *(_DWORD *)(v191 + 80);
          v194 = *(_DWORD *)(v191 + 84);
          v29 = __OFADD__(v193, v184);
          v195 = v193 + v184;
          LODWORD(v196) = (v193 >> 31) + 0x7FFFFFFF;
          if (v29)
            v196 = v196;
          else
            v196 = v195;
          v29 = __OFADD__(v194, (_DWORD)v185);
          v197 = v194 + v185;
          LODWORD(v198) = (v194 >> 31) + 0x7FFFFFFF;
          if (v29)
            v198 = v198;
          else
            v198 = v197;
          *(_QWORD *)&v230 = v196 | (v198 << 32);
          WebCore::LayerFragment::moveBy(v191, (const WebCore::LayoutPoint *)&v230);
          WebCore::ClipRect::intersect((int *)(v191 + 40), (const WebCore::ClipRect *)&v235);
          WebCore::ClipRect::intersect((int *)(v191 + 60), (const WebCore::ClipRect *)&v235);
          WebCore::LayerFragment::intersect(v191, (const WebCore::LayoutRect *)(v191 + 88));
          if (!a10)
          {
            v199 = *(_DWORD *)(v191 + 80);
            v200 = *(_DWORD *)(v191 + 84);
            v29 = __OFADD__(v199, v184);
            v201 = v199 + v184;
            LODWORD(v202) = (v199 >> 31) + 0x7FFFFFFF;
            if (v29)
              v202 = v202;
            else
              v202 = v201;
            v29 = __OFADD__(v200, (_DWORD)v185);
            v203 = v200 + v185;
            LODWORD(v204) = (v200 >> 31) + 0x7FFFFFFF;
            if (v29)
              v204 = v204;
            else
              v204 = v203;
            *(_QWORD *)(v191 + 80) = v202 | (v204 << 32);
          }
          v191 += 104;
        }
        while (v191 != v192);
      }
    }
  }
  v179 = v238[0];
  if (v239 != (_BYTE *)v238[0] && v238[0])
  {
    v238[0] = 0;
    LODWORD(v238[1]) = 0;
    WTF::fastFree(v179, v146);
  }
}

WTF *WebCore::RenderLayer::parentClipRects(WTF *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  void *v25;
  _OWORD *v26;
  WebCore::ClipRectsCache *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;

  v4 = result;
  v5 = *(_QWORD **)(a2 + 40);
  v6 = *(_DWORD *)(a3 + 8);
  if (v6 == 5)
  {
    v15 = WTF::fastMalloc((WTF *)0x44);
    *(_DWORD *)v15 = 1;
    *(_BYTE *)(v15 + 4) = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_BYTE *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 36) = 0;
    *(_QWORD *)(v15 + 28) = 0;
    *(_BYTE *)(v15 + 44) = 0;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0;
    *(_BYTE *)(v15 + 64) = 0;
    *v4 = v15;
    return (WTF *)WebCore::RenderLayer::calculateClipRects((uint64_t)v5, (__int128 *)a3, v15);
  }
  if (v6 == 2)
    goto LABEL_57;
  v7 = v5[27];
  if (v7)
  {
    v7 = *(_QWORD *)(v7 + 8);
    v8 = *(_QWORD *)(a2 + 216);
    if (!v8)
      goto LABEL_5;
LABEL_26:
    v8 = *(_QWORD *)(v8 + 8);
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(a2 + 216);
  if (v8)
    goto LABEL_26;
LABEL_5:
  if (v7 != v8)
    goto LABEL_109;
  v9 = v5[32];
  if (!v9 || (v14 = *(unsigned __int8 *)(v9 + 291), v16 = *(_QWORD *)(a2 + 40), !v14))
  {
    v10 = v5[10];
    if (!v10 || (v16 = *(_QWORD *)(v10 + 8)) == 0)
    {
      if ((v5[3] & 4) != 0)
      {
        v11 = v5[5];
        if (v11)
          goto LABEL_12;
      }
      else
      {
        v11 = *(_QWORD *)(a2 + 40);
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 40);
          if (!v11)
            break;
          if ((*(_BYTE *)(v11 + 24) & 0x4A) != 0)
          {
            while (1)
            {
LABEL_12:
              v12 = *(_QWORD *)(v11 + 256);
              if (v12 && *(_BYTE *)(v12 + 291))
              {
                v16 = v11;
                goto LABEL_33;
              }
              v13 = *(_QWORD *)(v11 + 80);
              if (v13)
              {
                v16 = *(_QWORD *)(v13 + 8);
                if (v16)
                  goto LABEL_33;
              }
              if ((*(_BYTE *)(v11 + 24) & 4) == 0)
                break;
              v11 = *(_QWORD *)(v11 + 40);
LABEL_17:
              if (!v11)
                goto LABEL_32;
            }
            while (1)
            {
              v11 = *(_QWORD *)(v11 + 40);
              if (!v11)
                goto LABEL_32;
              if ((*(_BYTE *)(v11 + 24) & 0x4A) != 0)
                goto LABEL_17;
            }
          }
        }
      }
LABEL_32:
      v16 = 0;
    }
  }
LABEL_33:
  v17 = *(_QWORD *)(a2 + 256);
  if (v17 && *(_BYTE *)(v17 + 291))
  {
LABEL_50:
    v21 = a2;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 80);
    if (!v18 || (v21 = *(_QWORD *)(v18 + 8)) == 0)
    {
      if ((*(_QWORD *)(a2 + 24) & 4) != 0)
      {
        a2 = *(_QWORD *)(a2 + 40);
        if (v5)
          goto LABEL_38;
      }
      else
      {
        while (1)
        {
          a2 = *(_QWORD *)(a2 + 40);
          if (!a2)
            break;
          if ((*(_BYTE *)(a2 + 24) & 0x4A) != 0)
          {
LABEL_38:
            while (1)
            {
              v19 = *(_QWORD *)(a2 + 256);
              if (v19)
              {
                if (*(_BYTE *)(v19 + 291))
                  goto LABEL_50;
              }
              v20 = *(_QWORD *)(a2 + 80);
              if (v20)
              {
                v21 = *(_QWORD *)(v20 + 8);
                if (v21)
                  goto LABEL_56;
              }
              if ((*(_BYTE *)(a2 + 24) & 4) == 0)
              {
                while (1)
                {
                  a2 = *(_QWORD *)(a2 + 40);
                  if (!a2)
                    goto LABEL_55;
                  if ((*(_BYTE *)(a2 + 24) & 0x4A) != 0)
                    goto LABEL_43;
                }
              }
              a2 = *(_QWORD *)(a2 + 40);
LABEL_43:
              if (!a2)
                goto LABEL_55;
            }
          }
        }
      }
LABEL_55:
      v21 = 0;
    }
  }
LABEL_56:
  if (v16 != v21)
  {
LABEL_109:
    v41 = *(_OWORD *)a3;
    DWORD2(v41) = 5;
    v40 = WTF::fastMalloc((WTF *)0x44);
    *(_DWORD *)v40 = 1;
    *(_BYTE *)(v40 + 4) = 0;
    *(_QWORD *)(v40 + 8) = 0;
    *(_QWORD *)(v40 + 16) = 0;
    *(_BYTE *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 36) = 0;
    *(_QWORD *)(v40 + 28) = 0;
    *(_BYTE *)(v40 + 44) = 0;
    *(_QWORD *)(v40 + 48) = 0;
    *(_QWORD *)(v40 + 56) = 0;
    *(_BYTE *)(v40 + 64) = 0;
    *v4 = v40;
    return (WTF *)WebCore::RenderLayer::calculateClipRects((uint64_t)v5, &v41, v40);
  }
LABEL_57:
  v22 = v5[22];
  if (v22)
  {
    if ((*(_BYTE *)(a3 + 12) & 1) != 0)
      v23 = v6 + 3;
    else
      v23 = *(_DWORD *)(a3 + 8);
    v24 = *(_DWORD **)(v22 + 8 * v23);
    if (v24)
    {
      ++*v24;
      *(_QWORD *)result = v24;
      return result;
    }
  }
  else
  {
    v26 = (_OWORD *)WTF::fastMalloc((WTF *)0x30);
    *v26 = 0u;
    v26[1] = 0u;
    v26[2] = 0u;
    v27 = (WebCore::ClipRectsCache *)v5[22];
    v5[22] = v26;
    if (v27)
    {
      WebCore::ClipRectsCache::~ClipRectsCache(v27, v25);
      WTF::fastFree(v28, v29);
    }
  }
  if (*(_QWORD **)a3 == v5 || !v5[5])
  {
    v30 = 0;
  }
  else
  {
    WebCore::RenderLayer::parentClipRects(&v41, v5, a3);
    v30 = v41;
  }
  v31 = WTF::fastMalloc((WTF *)0x44);
  *(_DWORD *)v31 = 1;
  *(_BYTE *)(v31 + 4) = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_BYTE *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 36) = 0;
  *(_QWORD *)(v31 + 28) = 0;
  *(_BYTE *)(v31 + 44) = 0;
  *(_QWORD *)(v31 + 48) = 0;
  *(_QWORD *)(v31 + 56) = 0;
  *(_BYTE *)(v31 + 64) = 0;
  WebCore::RenderLayer::calculateClipRects((uint64_t)v5, (__int128 *)a3, v31);
  if (v30
    && *(_DWORD *)(v30 + 8) == *(_DWORD *)(v31 + 8)
    && *(_DWORD *)(v30 + 12) == *(_DWORD *)(v31 + 12)
    && *(_DWORD *)(v30 + 16) == *(_DWORD *)(v31 + 16)
    && *(_DWORD *)(v30 + 20) == *(_DWORD *)(v31 + 20)
    && *(unsigned __int8 *)(v30 + 24) == *(unsigned __int8 *)(v31 + 24)
    && *(_DWORD *)(v30 + 28) == *(_DWORD *)(v31 + 28)
    && *(_DWORD *)(v30 + 32) == *(_DWORD *)(v31 + 32)
    && *(_DWORD *)(v30 + 36) == *(_DWORD *)(v31 + 36)
    && *(_DWORD *)(v30 + 40) == *(_DWORD *)(v31 + 40)
    && *(unsigned __int8 *)(v30 + 44) == *(unsigned __int8 *)(v31 + 44)
    && *(_DWORD *)(v30 + 48) == *(_DWORD *)(v31 + 48)
    && *(_DWORD *)(v30 + 52) == *(_DWORD *)(v31 + 52)
    && *(_DWORD *)(v30 + 56) == *(_DWORD *)(v31 + 56)
    && *(_DWORD *)(v30 + 60) == *(_DWORD *)(v31 + 60)
    && *(unsigned __int8 *)(v30 + 64) == *(unsigned __int8 *)(v31 + 64)
    && *(unsigned __int8 *)(v30 + 4) == *(unsigned __int8 *)(v31 + 4))
  {
    v33 = v5[22];
    v34 = *(_BYTE *)(a3 + 12);
    ++*(_DWORD *)v30;
    if ((v34 & 1) != 0)
      v35 = v6 + 3;
    else
      v35 = v6;
    result = *(WTF **)(v33 + 8 * v35);
    *(_QWORD *)(v33 + 8 * v35) = v30;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, v32);
      else
        --*(_DWORD *)result;
    }
    *v4 = v30;
    if (*(_DWORD *)v31 != 1)
    {
      --*(_DWORD *)v31;
      return result;
    }
    v39 = (WTF *)v31;
    return (WTF *)WTF::fastFree(v39, v32);
  }
  v36 = v5[22];
  v37 = *(_BYTE *)(a3 + 12);
  ++*(_DWORD *)v31;
  if ((v37 & 1) != 0)
    v38 = v6 + 3;
  else
    v38 = v6;
  result = *(WTF **)(v36 + 8 * v38);
  *(_QWORD *)(v36 + 8 * v38) = v31;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v32);
    else
      --*(_DWORD *)result;
  }
  *v4 = v31;
  if (v30)
  {
    if (*(_DWORD *)v30 != 1)
    {
      --*(_DWORD *)v30;
      return result;
    }
    v39 = (WTF *)v30;
    return (WTF *)WTF::fastFree(v39, v32);
  }
  return result;
}

unint64_t WebCore::RenderLayer::calculateClipRects(uint64_t a1, __int128 *a2, uint64_t a3)
{
  unint64_t result;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v73;
  float v74;
  float v75;
  float v77;
  float v78;
  float v80;
  float v81;
  float v82;
  double v84;
  float v85;
  double v86;
  float v87;
  double v88;
  int v89;
  double v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  char hasBorderRadius;
  unsigned int v97;
  signed int v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  int v106;
  int v107;
  int v108;
  signed int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v114;
  char v115;
  char v116;
  unsigned int v117;
  signed int v118;
  unint64_t v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  signed int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  unsigned int v135;
  signed int v136;
  signed int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  int v142;
  signed int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v161;
  float v162;
  float v163;
  float v165;
  float v166;
  float v168;
  float v169;
  float v170;
  double v172;
  float v173;
  double v174;
  float v175;
  double v176;
  unsigned int v177;
  double v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  unsigned int v183;
  signed int v184;
  uint64_t v185;
  unsigned int v186;
  unint64_t v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  signed int v193;
  int v194;
  int v195;
  int v196;
  char v197;
  unsigned int v198;
  signed int v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  signed int v207;
  int v208;
  int v209;
  int v210;
  char v211;
  unsigned int v212;
  signed int v213;
  signed int v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  int v219;
  signed int v220;
  int v221;
  int v222;
  int v223;
  char v224;
  int v225;
  unsigned int v227;
  int v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  __int128 v237;
  float v238;
  float v239;
  float v240;
  float v241;

  result = *(_QWORD *)(a1 + 40);
  if (!result)
  {
    *(_OWORD *)(a3 + 8) = xmmword_1969FCA90;
    *(_OWORD *)(a3 + 28) = xmmword_1969FCA90;
    *(_OWORD *)(a3 + 48) = xmmword_1969FCA90;
    *(_BYTE *)(a3 + 4) = 0;
    return result;
  }
  v7 = *((_DWORD *)a2 + 2);
  if (*(_QWORD *)a2 == a1)
  {
    *(_OWORD *)(a3 + 8) = xmmword_1969FCA90;
    *(_OWORD *)(a3 + 28) = xmmword_1969FCA90;
    *(_OWORD *)(a3 + 48) = xmmword_1969FCA90;
    *(_BYTE *)(a3 + 4) = 0;
  }
  else if (v7 != 5
         && (v8 = *(_QWORD *)(result + 176)) != 0
         && ((*((_BYTE *)a2 + 12) & 1) != 0 ? (v9 = v7 + 3) : (v9 = *((_DWORD *)a2 + 2)),
             (v10 = *(_QWORD *)(v8 + 8 * v9)) != 0))
  {
    v11 = *(_OWORD *)(v10 + 8);
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(v10 + 24);
    *(_OWORD *)(a3 + 8) = v11;
    v12 = *(_OWORD *)(v10 + 28);
    *(_BYTE *)(a3 + 44) = *(_BYTE *)(v10 + 44);
    *(_OWORD *)(a3 + 28) = v12;
    v13 = *(_OWORD *)(v10 + 48);
    *(_BYTE *)(a3 + 64) = *(_BYTE *)(v10 + 64);
    *(_OWORD *)(a3 + 48) = v13;
    *(_BYTE *)(a3 + 4) = *(_BYTE *)(v10 + 4);
  }
  else
  {
    v237 = *a2;
    if (DWORD2(v237) != 2 && DWORD2(v237) != 5)
    {
      v15 = *(_QWORD *)(result + 216);
      if (v15)
        v15 = *(_QWORD *)(v15 + 8);
      v16 = *(_QWORD *)(a1 + 216);
      if (v16)
        v16 = *(_QWORD *)(v16 + 8);
      if (v15 != v16)
        goto LABEL_66;
      v17 = *(_QWORD *)(result + 256);
      if (!v17 || (v23 = *(unsigned __int8 *)(v17 + 291), v22 = result, !v23))
      {
        v18 = *(_QWORD *)(result + 80);
        if (!v18 || (v22 = *(_QWORD *)(v18 + 8)) == 0)
        {
          if ((*(_QWORD *)(result + 24) & 4) != 0)
          {
            v19 = *(_QWORD *)(result + 40);
            if (v19)
              goto LABEL_26;
          }
          else
          {
            v19 = result;
            while (1)
            {
              v19 = *(_QWORD *)(v19 + 40);
              if (!v19)
                break;
              if ((*(_BYTE *)(v19 + 24) & 0x4A) != 0)
              {
                while (1)
                {
LABEL_26:
                  v20 = *(_QWORD *)(v19 + 256);
                  if (v20 && *(_BYTE *)(v20 + 291))
                  {
                    v22 = v19;
                    goto LABEL_45;
                  }
                  v21 = *(_QWORD *)(v19 + 80);
                  if (v21)
                  {
                    v22 = *(_QWORD *)(v21 + 8);
                    if (v22)
                      goto LABEL_45;
                  }
                  if ((*(_BYTE *)(v19 + 24) & 4) == 0)
                    break;
                  v19 = *(_QWORD *)(v19 + 40);
                  if (!v19)
                    goto LABEL_44;
                }
                while (1)
                {
                  v19 = *(_QWORD *)(v19 + 40);
                  if (!v19)
                    goto LABEL_44;
                  if ((*(_BYTE *)(v19 + 24) & 0x4A) != 0)
                    goto LABEL_26;
                }
              }
            }
          }
LABEL_44:
          v22 = 0;
        }
      }
LABEL_45:
      v24 = *(_QWORD *)(a1 + 256);
      if (!v24 || (v29 = a1, !*(_BYTE *)(v24 + 291)))
      {
        v25 = *(_QWORD *)(a1 + 80);
        if (!v25 || (v29 = *(_QWORD *)(v25 + 8)) == 0)
        {
          v26 = result;
          if ((*(_QWORD *)(a1 + 24) & 4) != 0)
          {
            while (1)
            {
LABEL_51:
              v27 = *(_QWORD *)(v26 + 256);
              if (v27 && *(_BYTE *)(v27 + 291))
              {
                v29 = v26;
                goto LABEL_65;
              }
              v28 = *(_QWORD *)(v26 + 80);
              if (v28)
              {
                v29 = *(_QWORD *)(v28 + 8);
                if (v29)
                  goto LABEL_65;
              }
              if ((*(_BYTE *)(v26 + 24) & 4) == 0)
                break;
              v26 = *(_QWORD *)(v26 + 40);
              if (!v26)
                goto LABEL_61;
            }
            while (1)
            {
              v26 = *(_QWORD *)(v26 + 40);
              if (!v26)
                break;
              if ((*(_BYTE *)(v26 + 24) & 0x4A) != 0)
                goto LABEL_51;
            }
          }
          else
          {
            v26 = a1;
            while (1)
            {
              v26 = *(_QWORD *)(v26 + 40);
              if (!v26)
                break;
              if ((*(_BYTE *)(v26 + 24) & 0x4A) != 0)
                goto LABEL_51;
            }
          }
LABEL_61:
          v29 = 0;
        }
      }
LABEL_65:
      if (v22 != v29)
LABEL_66:
        DWORD2(v237) = 5;
    }
    result = WebCore::RenderLayer::calculateClipRects();
  }
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_DWORD *)(v30 + 20);
  if ((v31 & 0x1800000) != 0x1000000)
  {
    if ((v31 & 0x800000) == 0)
      goto LABEL_70;
LABEL_81:
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a3 + 8);
    *(_BYTE *)(a3 + 64) = *(_BYTE *)(a3 + 24);
    goto LABEL_82;
  }
  v32 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v30 + 45) & 2) != 0)
    v32 = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 8);
  if ((*(_QWORD *)(v32 + 96) & 0x380000) == 0x300000)
  {
    v33 = *(_OWORD *)(a3 + 28);
    *(_OWORD *)(a3 + 48) = v33;
    v34 = *(_BYTE *)(a3 + 44);
    *(_BYTE *)(a3 + 64) = v34;
    *(_OWORD *)(a3 + 8) = v33;
    *(_BYTE *)(a3 + 24) = v34;
    *(_BYTE *)(a3 + 4) = 1;
    goto LABEL_82;
  }
  if ((v31 & 0x800000) != 0)
    goto LABEL_81;
  v35 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v30 + 45) & 2) != 0)
    v35 = *(_QWORD *)(*(_QWORD *)(v30 + 32) + 8);
  if ((*(_QWORD *)(v35 + 96) & 0x380000) == 0x100000)
    goto LABEL_80;
LABEL_70:
  if (*(_BYTE *)(v30 + 46) == 67)
  {
LABEL_80:
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a3 + 48);
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(a3 + 64);
  }
LABEL_82:
  v36 = *(_QWORD *)(a1 + 32);
  v37 = *(_DWORD *)(v36 + 20);
  if ((v37 & 0x1800000) == 0x1000000)
  {
    if ((v37 & 0x10000) == 0
      && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v36 + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
    {
      return result;
    }
  }
  else if ((v37 & 0x10000) == 0)
  {
    return result;
  }
  v38 = *(_QWORD *)a2;
  if ((*((_BYTE *)a2 + 12) & 1) == 0 && v38 == a1)
  {
    if ((v37 & 0x10000) != 0 && *(_QWORD *)(a1 + 200))
    {
      result = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v36 + 80));
      if ((_DWORD)result)
        *(_BYTE *)(a3 + 24) = 1;
    }
    return result;
  }
  if (v7 != 2)
  {
    if (v38 != a1)
    {
      v43 = a1;
      v41 = 1;
      do
      {
        v44 = *(_QWORD *)(v43 + 32);
        v45 = *(_DWORD *)(v44 + 20);
        if ((v45 & 0x20000) != 0)
        {
          v47 = *(_QWORD *)(v43 + 32);
          if ((*(_BYTE *)(v44 + 45) & 2) != 0)
            v47 = *(_QWORD *)(*(_QWORD *)(v44 + 32) + 8);
          v48 = *(_QWORD *)(v47 + 88);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 32) + 40) + 20))
            goto LABEL_122;
          v49 = *(_QWORD **)(v48 + 40);
          if (v49[41] || v49[38] || v49[39] || v49[40] || (v45 & 0x100000) != 0)
            goto LABEL_122;
        }
        v39 = 0;
        v46 = *(unsigned __int8 *)(v44 + 46);
        if (v46 == 83)
          goto LABEL_117;
        LODWORD(v42) = 0;
        if (v46 == 103)
          goto LABEL_123;
        v43 = *(_QWORD *)(v43 + 40);
      }
      while (v43 && v43 != v38);
    }
LABEL_116:
    result = WebCore::RenderLayer::offsetFromAncestor(a1, v38, 1);
    v39 = result;
    v41 = 0;
    v42 = HIDWORD(result);
    goto LABEL_123;
  }
  if ((*(_BYTE *)(a1 + 27) & 0x40) != 0)
    goto LABEL_122;
  if ((v37 & 0x20000) != 0)
  {
    v50 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v36 + 45) & 2) != 0)
      v50 = *(_QWORD *)(*(_QWORD *)(v36 + 32) + 8);
    v51 = *(_QWORD *)(v50 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 40) + 20)
      || (v52 = *(_QWORD **)(v51 + 40), v52[41])
      || v52[38]
      || v52[39]
      || v52[40]
      || (v37 & 0x100000) != 0)
    {
LABEL_122:
      v39 = 0;
      LODWORD(v42) = 0;
      v41 = 1;
      goto LABEL_123;
    }
  }
  v39 = 0;
  v40 = *(unsigned __int8 *)(v36 + 46);
  v41 = 1;
  if (v40 == 83)
  {
LABEL_117:
    LODWORD(v42) = 0;
    goto LABEL_123;
  }
  LODWORD(v42) = 0;
  if (v40 != 103)
    goto LABEL_116;
LABEL_123:
  if (*(_BYTE *)(a3 + 4))
  {
    v53 = *(_QWORD *)(*(_QWORD *)a2 + 32);
    if (v53 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                      + 8)
                          + 1944))
    {
      result = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v53 + 248));
      if ((_DWORD)result == 0x80000000)
        v54 = 0x7FFFFFFF;
      else
        v54 = -(int)result;
      if (HIDWORD(result) == 0x80000000)
        v55 = 0x7FFFFFFF;
      else
        v55 = -HIDWORD(result);
      if (__OFADD__(v39, v54))
        v39 = (v39 >> 31) + 0x7FFFFFFF;
      else
        v39 += v54;
      v56 = __OFADD__((_DWORD)v42, v55);
      v57 = v42 + v55;
      if (v56)
        LODWORD(v42) = (v42 >> 31) + 0x7FFFFFFF;
      else
        LODWORD(v42) = v57;
    }
  }
  v58 = *(_QWORD *)(a1 + 32);
  v59 = *(_DWORD *)(v58 + 20);
  if ((v59 & 0x10000) == 0)
    goto LABEL_344;
  *(_QWORD *)&v237 = 0;
  v60 = (*((unsigned __int8 *)a2 + 12) >> 1) & 1;
  if ((*(_BYTE *)(v58 + 45) & 4) != 0)
  {
    v61 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v58 + 1424))(v58, &v237, 0, v60);
  }
  else
  {
    if ((*(_BYTE *)(v58 + 52) & 7) != 4 || (*(_BYTE *)(v58 + 53) & 1) != 0)
    {
      v61 = 0;
      v63 = 0;
      goto LABEL_141;
    }
    v61 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v58 + 880))(v58, &v237, 0, v60, 0);
  }
  v63 = v62;
LABEL_141:
  v64 = HIDWORD(v61);
  v65 = HIDWORD(v63);
  v228 = v41;
  if (v41)
  {
    v66 = *(_QWORD *)(a1 + 32);
    v229 = (float)(int)v61 * 0.015625;
    v230 = (float)SHIDWORD(v61) * 0.015625;
    v231 = v229 + (float)((float)(int)v63 * 0.015625);
    v232 = v230;
    v233 = v231;
    v234 = v230 + (float)((float)SHIDWORD(v63) * 0.015625);
    v235 = v229;
    v236 = v234;
    WebCore::RenderObject::localToContainerQuad(v66, &v229, *(_QWORD *)(*(_QWORD *)a2 + 32), 2u, &v237);
    v67 = *(float *)&v237;
    v68 = v238;
    if (v240 >= v238)
      v69 = v238;
    else
      v69 = v240;
    if (*((float *)&v237 + 2) >= *(float *)&v237)
      v70 = *(float *)&v237;
    else
      v70 = *((float *)&v237 + 2);
    if (v69 >= v70)
      v69 = v70;
    v71 = fabsf(v69);
    if (v71 == INFINITY || v71 > 2147500000.0)
      v69 = (float)((SLODWORD(v69) >> 31) ^ 0x7FFFFFFF);
    if (v241 >= v239)
      v73 = v239;
    else
      v73 = v241;
    if (*((float *)&v237 + 3) >= *((float *)&v237 + 1))
      v74 = *((float *)&v237 + 1);
    else
      v74 = *((float *)&v237 + 3);
    if (v73 >= v74)
      v73 = v74;
    v75 = fabsf(v73);
    if (v75 == INFINITY || v75 > 2147500000.0)
      v73 = (float)((SLODWORD(v73) >> 31) ^ 0x7FFFFFFF);
    if (*(float *)&v237 < *((float *)&v237 + 2))
      v67 = *((float *)&v237 + 2);
    if (v238 < v240)
      v68 = v240;
    if (v67 >= v68)
      v77 = v67;
    else
      v77 = v68;
    v78 = fabsf(v77);
    if (v78 == INFINITY || v78 > 2147500000.0)
      v77 = (float)((SLODWORD(v77) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v237 + 1) >= *((float *)&v237 + 3))
      v80 = *((float *)&v237 + 1);
    else
      v80 = *((float *)&v237 + 3);
    if (v239 >= v241)
      v81 = v239;
    else
      v81 = v241;
    if (v80 >= v81)
      v81 = v80;
    v82 = fabsf(v81);
    if (v82 == INFINITY || v82 > 2147500000.0)
      v81 = (float)((SLODWORD(v81) >> 31) ^ 0x7FFFFFFF);
    v84 = v69 * 64.0;
    if (v84 >= 2147483650.0)
    {
      LODWORD(v61) = 0x7FFFFFFF;
    }
    else if (v84 > -2147483650.0)
    {
      LODWORD(v61) = (int)v84;
    }
    else
    {
      LODWORD(v61) = 0x80000000;
    }
    v85 = v77 - v69;
    v86 = v73 * 64.0;
    if (v86 >= 2147483650.0)
    {
      LODWORD(v64) = 0x7FFFFFFF;
    }
    else if (v86 <= -2147483650.0)
    {
      LODWORD(v64) = 0x80000000;
    }
    else
    {
      LODWORD(v64) = (int)v86;
    }
    v87 = v81 - v73;
    v88 = v85 * 64.0;
    if (v88 >= 2147483650.0)
    {
      v89 = 0x7FFFFFFF;
    }
    else if (v88 <= -2147483650.0)
    {
      v89 = 0x80000000;
    }
    else
    {
      v89 = (int)v88;
    }
    v90 = v87 * 64.0;
    if (v90 >= 2147483650.0)
    {
      v91 = 0x7FFFFFFF;
    }
    else if (v90 <= -2147483650.0)
    {
      v91 = 0x80000000;
    }
    else
    {
      v91 = (int)v90;
    }
    v65 = v91;
    LODWORD(v63) = v89;
  }
  if (__OFADD__((_DWORD)v61, v39))
    v92 = (v61 >> 31) + 0x7FFFFFFF;
  else
    v92 = v61 + v39;
  v56 = __OFADD__((_DWORD)v64, (_DWORD)v42);
  v93 = v64 + v42;
  v94 = (v64 >> 31) + 0x7FFFFFFF;
  if (v56)
    v95 = v94;
  else
    v95 = v93;
  hasBorderRadius = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(*(_QWORD *)(a1 + 32) + 80));
  v98 = *(_DWORD *)(a3 + 8);
  v97 = *(_DWORD *)(a3 + 12);
  if (v98 != -1073741808
    || v97 != -1073741808
    || *(_DWORD *)(a3 + 16) != 2147483615
    || (v99 = v63, v100 = v65, v101 = v92, v102 = v95, *(_DWORD *)(a3 + 20) != 2147483615))
  {
    if (v92 == -1073741808 && (_DWORD)v95 == -1073741808 && (_DWORD)v63 == 2147483615 && (_DWORD)v65 == 2147483615)
    {
      v101 = *(_DWORD *)(a3 + 8);
      v102 = *(unsigned int *)(a3 + 12);
      v99 = *(_DWORD *)(a3 + 16);
      v100 = *(unsigned int *)(a3 + 20);
    }
    else
    {
      if ((int)v92 <= v98)
        v101 = *(_DWORD *)(a3 + 8);
      else
        v101 = v92;
      if ((int)v95 <= (int)v97)
        v102 = v97;
      else
        v102 = v95;
      v106 = v92 + v63;
      if (__OFADD__(v92, (_DWORD)v63))
        v106 = (v92 >> 31) + 0x7FFFFFFF;
      v107 = *(_DWORD *)(a3 + 16);
      v56 = __OFADD__(v98, v107);
      v108 = v98 + v107;
      if (v56)
        v108 = (v98 >> 31) + 0x7FFFFFFF;
      if (v108 < v106)
        v106 = v108;
      v109 = (v95 >> 31) + 0x7FFFFFFF;
      if (!__OFADD__((_DWORD)v95, (_DWORD)v65))
        v109 = v95 + v65;
      v110 = *(_DWORD *)(a3 + 20);
      v56 = __OFADD__(v97, v110);
      v111 = v97 + v110;
      if (v56)
        v111 = (v97 >> 31) + 0x7FFFFFFF;
      if (v111 >= v109)
        v112 = v109;
      else
        v112 = v111;
      if ((int)v101 >= v106 || (int)v102 >= v112)
      {
        v106 = 0;
        v112 = 0;
        v101 = 0;
        v102 = 0;
      }
      v56 = __OFSUB__(v106, v101);
      v114 = v106 - v101;
      v99 = (v106 >> 31) + 0x7FFFFFFF;
      if (!v56)
        v99 = v114;
      v100 = (v112 - v102);
      if (__OFSUB__(v112, (_DWORD)v102))
        v100 = (v112 >> 31) + 0x7FFFFFFF;
    }
  }
  v227 = v39;
  v115 = hasBorderRadius;
  v116 = hasBorderRadius;
  if (*(_BYTE *)(a3 + 24))
    v116 = 1;
  *(_QWORD *)(a3 + 8) = v101 | (unint64_t)(v102 << 32);
  *(_QWORD *)(a3 + 16) = v99 | (v100 << 32);
  *(_BYTE *)(a3 + 24) = v116;
  if (WebCore::RenderElement::canContainAbsolutelyPositionedObjects(*(WebCore::RenderElement **)(a1 + 32)))
  {
    v118 = *(_DWORD *)(a3 + 48);
    v117 = *(_DWORD *)(a3 + 52);
    if (v118 != -1073741808
      || v117 != -1073741808
      || *(_DWORD *)(a3 + 56) != 2147483615
      || (v119 = v65, v120 = v63, v121 = v92, v122 = v95, *(_DWORD *)(a3 + 60) != 2147483615))
    {
      if (v92 == -1073741808 && (_DWORD)v95 == -1073741808 && (_DWORD)v63 == 2147483615 && (_DWORD)v65 == 2147483615)
      {
        v121 = *(_DWORD *)(a3 + 48);
        v122 = *(unsigned int *)(a3 + 52);
        v120 = *(_DWORD *)(a3 + 56);
        v119 = *(unsigned int *)(a3 + 60);
      }
      else
      {
        if ((int)v92 <= v118)
          v121 = *(_DWORD *)(a3 + 48);
        else
          v121 = v92;
        if ((int)v95 <= (int)v117)
          v122 = v117;
        else
          v122 = v95;
        v123 = v92 + v63;
        if (__OFADD__(v92, (_DWORD)v63))
          v123 = (v92 >> 31) + 0x7FFFFFFF;
        v124 = *(_DWORD *)(a3 + 56);
        v56 = __OFADD__(v118, v124);
        v125 = v118 + v124;
        if (v56)
          v125 = (v118 >> 31) + 0x7FFFFFFF;
        if (v125 >= v123)
          v126 = v123;
        else
          v126 = v125;
        v127 = v95 + v65;
        if (__OFADD__((_DWORD)v95, (_DWORD)v65))
          v127 = (v95 >> 31) + 0x7FFFFFFF;
        v128 = *(_DWORD *)(a3 + 60);
        v56 = __OFADD__(v117, v128);
        v129 = v117 + v128;
        if (v56)
          v129 = (v117 >> 31) + 0x7FFFFFFF;
        if (v129 >= v127)
          v130 = v127;
        else
          v130 = v129;
        if ((int)v121 >= v126 || (int)v122 >= v130)
        {
          v126 = 0;
          v130 = 0;
          v121 = 0;
          v122 = 0;
        }
        v56 = __OFSUB__(v126, v121);
        v120 = v126 - v121;
        v131 = (v126 >> 31) + 0x7FFFFFFF;
        if (v56)
          v120 = v131;
        v56 = __OFSUB__(v130, (_DWORD)v122);
        v132 = v130 - v122;
        v133 = (v130 >> 31) + 0x7FFFFFFF;
        if (v56)
          v119 = v133;
        else
          v119 = v132;
      }
    }
    v134 = v115;
    if (*(_BYTE *)(a3 + 64))
      v134 = 1;
    *(_QWORD *)(a3 + 48) = v121 | (unint64_t)(v122 << 32);
    *(_QWORD *)(a3 + 56) = v120 | (v119 << 32);
    *(_BYTE *)(a3 + 64) = v134;
  }
  result = WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(a1 + 32));
  if ((_DWORD)result)
  {
    v136 = *(_DWORD *)(a3 + 28);
    v135 = *(_DWORD *)(a3 + 32);
    if (v136 != -1073741808
      || v135 != -1073741808
      || *(_DWORD *)(a3 + 36) != 2147483615
      || *(_DWORD *)(a3 + 40) != 2147483615)
    {
      if (v92 == -1073741808 && (_DWORD)v95 == -1073741808 && (_DWORD)v63 == 2147483615 && (_DWORD)v65 == 2147483615)
      {
        v92 = *(_DWORD *)(a3 + 28);
        v95 = *(unsigned int *)(a3 + 32);
        LODWORD(v63) = *(_DWORD *)(a3 + 36);
        v65 = *(unsigned int *)(a3 + 40);
      }
      else
      {
        if ((int)v92 <= v136)
          v137 = *(_DWORD *)(a3 + 28);
        else
          v137 = v92;
        if ((int)v95 <= (int)v135)
          v138 = v135;
        else
          v138 = v95;
        v139 = v92 + v63;
        if (__OFADD__(v92, (_DWORD)v63))
          v139 = (v92 >> 31) + 0x7FFFFFFF;
        v140 = *(_DWORD *)(a3 + 36);
        v56 = __OFADD__(v136, v140);
        v141 = v136 + v140;
        if (v56)
          v141 = (v136 >> 31) + 0x7FFFFFFF;
        if (v141 >= v139)
          v142 = v139;
        else
          v142 = v141;
        v143 = v95 + v65;
        if (__OFADD__((_DWORD)v95, (_DWORD)v65))
          v143 = (v95 >> 31) + 0x7FFFFFFF;
        v144 = *(_DWORD *)(a3 + 40);
        v56 = __OFADD__(v135, v144);
        v145 = v135 + v144;
        if (v56)
          v145 = (v135 >> 31) + 0x7FFFFFFF;
        if (v145 >= v143)
          v146 = v143;
        else
          v146 = v145;
        if (v137 >= v142 || (int)v138 >= v146)
        {
          v142 = 0;
          v146 = 0;
          v92 = 0;
          v95 = 0;
        }
        else
        {
          v92 = v137;
          v95 = v138;
        }
        v56 = __OFSUB__(v142, v92);
        v147 = v142 - v92;
        v148 = (v142 >> 31) + 0x7FFFFFFF;
        if (v56)
          LODWORD(v63) = v148;
        else
          LODWORD(v63) = v147;
        v56 = __OFSUB__(v146, (_DWORD)v95);
        v149 = v146 - v95;
        v150 = (v146 >> 31) + 0x7FFFFFFF;
        if (v56)
          v65 = v150;
        else
          v65 = v149;
      }
    }
    if (*(_BYTE *)(a3 + 44))
      v115 = 1;
    *(_QWORD *)(a3 + 28) = v92 | (unint64_t)(v95 << 32);
    *(_QWORD *)(a3 + 36) = v63 | (v65 << 32);
    *(_BYTE *)(a3 + 44) = v115;
  }
  v58 = *(_QWORD *)(a1 + 32);
  v59 = *(_DWORD *)(v58 + 20);
  v41 = v228;
  v39 = v227;
LABEL_344:
  if ((v59 & 0x1800000) == 0x1000000
    && ((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v58 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v58 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v58 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) != 0
    && (*(_BYTE *)(v58 + 45) & 4) != 0)
  {
    ++*(_DWORD *)(v58 + 16);
    *(_QWORD *)&v237 = 0;
    v151 = WebCore::RenderBox::clipRect((WebCore::RenderBox *)v58, (const WebCore::LayoutPoint *)&v237, 0);
    v153 = HIDWORD(v151);
    if (v41)
    {
      v154 = *(_QWORD *)(a1 + 32);
      v229 = (float)(int)v151 * 0.015625;
      v230 = (float)SHIDWORD(v151) * 0.015625;
      v231 = v229 + (float)((float)(int)v152 * 0.015625);
      v232 = v230;
      v233 = v231;
      v234 = v230 + (float)((float)SHIDWORD(v152) * 0.015625);
      v235 = v229;
      v236 = v234;
      WebCore::RenderObject::localToContainerQuad(v154, &v229, *(_QWORD *)(*(_QWORD *)a2 + 32), 2u, &v237);
      v155 = *(float *)&v237;
      v156 = v238;
      if (v240 >= v238)
        v157 = v238;
      else
        v157 = v240;
      if (*((float *)&v237 + 2) >= *(float *)&v237)
        v158 = *(float *)&v237;
      else
        v158 = *((float *)&v237 + 2);
      if (v157 >= v158)
        v157 = v158;
      v159 = fabsf(v157);
      if (v159 == INFINITY || v159 > 2147500000.0)
        v157 = (float)((SLODWORD(v157) >> 31) ^ 0x7FFFFFFF);
      if (v241 >= v239)
        v161 = v239;
      else
        v161 = v241;
      if (*((float *)&v237 + 3) >= *((float *)&v237 + 1))
        v162 = *((float *)&v237 + 1);
      else
        v162 = *((float *)&v237 + 3);
      if (v161 >= v162)
        v161 = v162;
      v163 = fabsf(v161);
      if (v163 == INFINITY || v163 > 2147500000.0)
        v161 = (float)((SLODWORD(v161) >> 31) ^ 0x7FFFFFFF);
      if (*(float *)&v237 < *((float *)&v237 + 2))
        v155 = *((float *)&v237 + 2);
      if (v238 < v240)
        v156 = v240;
      if (v155 >= v156)
        v165 = v155;
      else
        v165 = v156;
      v166 = fabsf(v165);
      if (v166 == INFINITY || v166 > 2147500000.0)
        v165 = (float)((SLODWORD(v165) >> 31) ^ 0x7FFFFFFF);
      if (*((float *)&v237 + 1) >= *((float *)&v237 + 3))
        v168 = *((float *)&v237 + 1);
      else
        v168 = *((float *)&v237 + 3);
      if (v239 >= v241)
        v169 = v239;
      else
        v169 = v241;
      if (v168 >= v169)
        v169 = v168;
      v170 = fabsf(v169);
      if (v170 == INFINITY || v170 > 2147500000.0)
        v169 = (float)((SLODWORD(v169) >> 31) ^ 0x7FFFFFFF);
      v172 = v157 * 64.0;
      if (v172 >= 2147483650.0)
      {
        LODWORD(v151) = 0x7FFFFFFF;
      }
      else if (v172 <= -2147483650.0)
      {
        LODWORD(v151) = 0x80000000;
      }
      else
      {
        LODWORD(v151) = (int)v172;
      }
      v173 = v165 - v157;
      v174 = v161 * 64.0;
      if (v174 >= 2147483650.0)
      {
        LODWORD(v153) = 0x7FFFFFFF;
      }
      else if (v174 <= -2147483650.0)
      {
        LODWORD(v153) = 0x80000000;
      }
      else
      {
        LODWORD(v153) = (int)v174;
      }
      v175 = v169 - v161;
      v176 = v173 * 64.0;
      if (v176 >= 2147483650.0)
      {
        v177 = 0x7FFFFFFF;
      }
      else if (v176 <= -2147483650.0)
      {
        v177 = 0x80000000;
      }
      else
      {
        v177 = (int)v176;
      }
      v178 = v175 * 64.0;
      if (v178 >= 2147483650.0)
      {
        v179 = 0x7FFFFFFFLL;
      }
      else if (v178 <= -2147483650.0)
      {
        v179 = 0x80000000;
      }
      else
      {
        v179 = (int)v178;
      }
      v152 = v177 | (unint64_t)(v179 << 32);
    }
    v180 = v151 + v39;
    if (__OFADD__((_DWORD)v151, v39))
      v180 = (v151 >> 31) + 0x7FFFFFFF;
    v181 = (v153 + v42);
    if (__OFADD__((_DWORD)v153, (_DWORD)v42))
      v181 = (v153 >> 31) + 0x7FFFFFFF;
    v182 = HIDWORD(v152);
    v184 = *(_DWORD *)(a3 + 48);
    v183 = *(_DWORD *)(a3 + 52);
    if (v184 != -1073741808
      || v183 != -1073741808
      || *(_DWORD *)(a3 + 56) != 2147483615
      || (v185 = v181, v186 = v180, v187 = HIDWORD(v152), v188 = v152, *(_DWORD *)(a3 + 60) != 2147483615))
    {
      if (v180 == -1073741808 && (_DWORD)v181 == -1073741808 && v152 == 0x7FFFFFDF7FFFFFDFLL)
      {
        v186 = *(_DWORD *)(a3 + 48);
        v185 = *(unsigned int *)(a3 + 52);
        v188 = *(_DWORD *)(a3 + 56);
        v187 = *(unsigned int *)(a3 + 60);
      }
      else
      {
        if ((int)v180 <= v184)
          v186 = *(_DWORD *)(a3 + 48);
        else
          v186 = v180;
        if ((int)v181 <= (int)v183)
          v185 = v183;
        else
          v185 = v181;
        v189 = v180 + v152;
        if (__OFADD__(v180, (_DWORD)v152))
          v189 = (v180 >> 31) + 0x7FFFFFFF;
        v190 = *(_DWORD *)(a3 + 56);
        v56 = __OFADD__(v184, v190);
        v191 = v184 + v190;
        if (v56)
          v191 = (v184 >> 31) + 0x7FFFFFFF;
        if (v191 >= v189)
          v192 = v189;
        else
          v192 = v191;
        v193 = v181 + HIDWORD(v152);
        if (__OFADD__((_DWORD)v181, HIDWORD(v152)))
          v193 = (v181 >> 31) + 0x7FFFFFFF;
        v194 = *(_DWORD *)(a3 + 60);
        v56 = __OFADD__(v183, v194);
        v195 = v183 + v194;
        if (v56)
          v195 = (v183 >> 31) + 0x7FFFFFFF;
        if (v195 >= v193)
          v196 = v193;
        else
          v196 = v195;
        if ((int)v186 >= v192 || (int)v185 >= v196)
        {
          v192 = 0;
          v196 = 0;
          v186 = 0;
          v185 = 0;
        }
        v188 = v192 - v186;
        if (__OFSUB__(v192, v186))
          v188 = (v192 >> 31) + 0x7FFFFFFF;
        v187 = (v196 - v185);
        if (__OFSUB__(v196, (_DWORD)v185))
          v187 = (v196 >> 31) + 0x7FFFFFFF;
      }
    }
    v197 = *(_BYTE *)(a3 + 64);
    *(_QWORD *)(a3 + 48) = v186 | (unint64_t)(v185 << 32);
    *(_QWORD *)(a3 + 56) = v188 | (v187 << 32);
    *(_BYTE *)(a3 + 64) = v197 != 0;
    v199 = *(_DWORD *)(a3 + 8);
    v198 = *(_DWORD *)(a3 + 12);
    if (v199 != -1073741808
      || v198 != -1073741808
      || *(_DWORD *)(a3 + 16) != 2147483615
      || (v200 = v181, v201 = v180, result = HIDWORD(v152), v202 = v152, *(_DWORD *)(a3 + 20) != 2147483615))
    {
      if (v180 == -1073741808 && (_DWORD)v181 == -1073741808 && v152 == 0x7FFFFFDF7FFFFFDFLL)
      {
        v201 = *(_DWORD *)(a3 + 8);
        v200 = *(unsigned int *)(a3 + 12);
        v202 = *(_DWORD *)(a3 + 16);
        result = *(unsigned int *)(a3 + 20);
      }
      else
      {
        if ((int)v180 <= v199)
          v201 = *(_DWORD *)(a3 + 8);
        else
          v201 = v180;
        if ((int)v181 <= (int)v198)
          v200 = v198;
        else
          v200 = v181;
        v203 = v180 + v152;
        if (__OFADD__(v180, (_DWORD)v152))
          v203 = (v180 >> 31) + 0x7FFFFFFF;
        v204 = *(_DWORD *)(a3 + 16);
        v56 = __OFADD__(v199, v204);
        v205 = v199 + v204;
        if (v56)
          v205 = (v199 >> 31) + 0x7FFFFFFF;
        if (v205 >= v203)
          v206 = v203;
        else
          v206 = v205;
        v207 = v181 + HIDWORD(v152);
        if (__OFADD__((_DWORD)v181, HIDWORD(v152)))
          v207 = (v181 >> 31) + 0x7FFFFFFF;
        v208 = *(_DWORD *)(a3 + 20);
        v56 = __OFADD__(v198, v208);
        v209 = v198 + v208;
        if (v56)
          v209 = (v198 >> 31) + 0x7FFFFFFF;
        if (v209 >= v207)
          v210 = v207;
        else
          v210 = v209;
        if ((int)v201 >= v206 || (int)v200 >= v210)
        {
          v206 = 0;
          v210 = 0;
          v201 = 0;
          v200 = 0;
        }
        v202 = v206 - v201;
        if (__OFSUB__(v206, v201))
          v202 = (v206 >> 31) + 0x7FFFFFFF;
        result = (v210 - v200);
        if (__OFSUB__(v210, (_DWORD)v200))
          result = (v210 >> 31) + 0x7FFFFFFF;
      }
    }
    v211 = *(_BYTE *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = v201 | (unint64_t)(v200 << 32);
    *(_QWORD *)(a3 + 16) = v202 | (result << 32);
    *(_BYTE *)(a3 + 24) = v211 != 0;
    v213 = *(_DWORD *)(a3 + 28);
    v212 = *(_DWORD *)(a3 + 32);
    if (v213 != -1073741808
      || v212 != -1073741808
      || *(_DWORD *)(a3 + 36) != 2147483615
      || *(_DWORD *)(a3 + 40) != 2147483615)
    {
      if (v180 == -1073741808 && (_DWORD)v181 == -1073741808 && v152 == 0x7FFFFFDF7FFFFFDFLL)
      {
        v180 = *(_DWORD *)(a3 + 28);
        v181 = *(unsigned int *)(a3 + 32);
        LODWORD(v152) = *(_DWORD *)(a3 + 36);
        v182 = *(unsigned int *)(a3 + 40);
      }
      else
      {
        if ((int)v180 <= v213)
          v214 = *(_DWORD *)(a3 + 28);
        else
          v214 = v180;
        if ((int)v181 <= (int)v212)
          v215 = v212;
        else
          v215 = v181;
        v216 = v180 + v152;
        if (__OFADD__(v180, (_DWORD)v152))
          v216 = (v180 >> 31) + 0x7FFFFFFF;
        v217 = *(_DWORD *)(a3 + 36);
        v56 = __OFADD__(v213, v217);
        v218 = v213 + v217;
        if (v56)
          v218 = (v213 >> 31) + 0x7FFFFFFF;
        if (v218 >= v216)
          v219 = v216;
        else
          v219 = v218;
        v220 = v181 + HIDWORD(v152);
        if (__OFADD__((_DWORD)v181, HIDWORD(v152)))
          v220 = (v181 >> 31) + 0x7FFFFFFF;
        v221 = *(_DWORD *)(a3 + 40);
        v56 = __OFADD__(v212, v221);
        v222 = v212 + v221;
        if (v56)
          v222 = (v212 >> 31) + 0x7FFFFFFF;
        if (v222 >= v220)
          v223 = v220;
        else
          v223 = v222;
        if (v214 >= v219 || (int)v215 >= v223)
        {
          v219 = 0;
          v223 = 0;
          v180 = 0;
          v181 = 0;
        }
        else
        {
          v180 = v214;
          v181 = v215;
        }
        LODWORD(v152) = v219 - v180;
        if (__OFSUB__(v219, v180))
          LODWORD(v152) = (v219 >> 31) + 0x7FFFFFFF;
        v182 = (v223 - v181);
        if (__OFSUB__(v223, (_DWORD)v181))
          v182 = (v223 >> 31) + 0x7FFFFFFF;
      }
    }
    v224 = *(_BYTE *)(a3 + 44);
    *(_QWORD *)(a3 + 28) = v180 | (unint64_t)(v181 << 32);
    *(_QWORD *)(a3 + 36) = v152 | (v182 << 32);
    *(_BYTE *)(a3 + 44) = v224 != 0;
    v225 = *(_DWORD *)(v58 + 16);
    if (!v225)
    {
      __break(0xC471u);
      JUMPOUT(0x1941B67F4);
    }
    *(_DWORD *)(v58 + 16) = v225 - 1;
  }
  return result;
}

uint64_t WebCore::RenderStyle::hasBorderRadius(WebCore::RenderStyle *this)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  int v12;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  if (*(_BYTE *)(v1 + 212))
    v2 = *(_BYTE *)(v1 + 212) == 11;
  else
    v2 = 1;
  if (!v2)
  {
    if (*(_BYTE *)(v1 + 214))
    {
      if (*(float *)(v1 + 208) == 0.0)
        goto LABEL_7;
    }
    else if (!*(_DWORD *)(v1 + 208))
    {
      goto LABEL_7;
    }
  }
  if (*(_BYTE *)(v1 + 220))
    v7 = *(_BYTE *)(v1 + 220) == 11;
  else
    v7 = 1;
  if (v7)
    return 1;
  if (*(_BYTE *)(v1 + 222))
  {
    if (*(float *)(v1 + 216) != 0.0)
      return 1;
  }
  else if (*(_DWORD *)(v1 + 216))
  {
    return 1;
  }
LABEL_7:
  if (*(_BYTE *)(v1 + 228))
    v3 = *(_BYTE *)(v1 + 228) == 11;
  else
    v3 = 1;
  if (!v3)
  {
    if (*(_BYTE *)(v1 + 230))
    {
      if (*(float *)(v1 + 224) == 0.0)
        goto LABEL_13;
    }
    else if (!*(_DWORD *)(v1 + 224))
    {
      goto LABEL_13;
    }
  }
  if (*(_BYTE *)(v1 + 236))
    v8 = *(_BYTE *)(v1 + 236) == 11;
  else
    v8 = 1;
  if (v8)
    return 1;
  if (*(_BYTE *)(v1 + 238))
  {
    if (*(float *)(v1 + 232) != 0.0)
      return 1;
  }
  else if (*(_DWORD *)(v1 + 232))
  {
    return 1;
  }
LABEL_13:
  if (*(_BYTE *)(v1 + 244))
    v4 = *(_BYTE *)(v1 + 244) == 11;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(_BYTE *)(v1 + 246))
    {
      if (*(float *)(v1 + 240) == 0.0)
        goto LABEL_19;
    }
    else if (!*(_DWORD *)(v1 + 240))
    {
      goto LABEL_19;
    }
  }
  if (*(_BYTE *)(v1 + 252))
    v9 = *(_BYTE *)(v1 + 252) == 11;
  else
    v9 = 1;
  if (v9)
    return 1;
  if (!*(_BYTE *)(v1 + 254))
  {
    if (!*(_DWORD *)(v1 + 248))
      goto LABEL_19;
    return 1;
  }
  if (*(float *)(v1 + 248) != 0.0)
    return 1;
LABEL_19:
  if (*(_BYTE *)(v1 + 260))
    v5 = *(_BYTE *)(v1 + 260) == 11;
  else
    v5 = 1;
  if (!v5)
  {
    if (*(_BYTE *)(v1 + 262))
    {
      if (*(float *)(v1 + 256) == 0.0)
        return 0;
    }
    else if (!*(_DWORD *)(v1 + 256))
    {
      return 0;
    }
  }
  if (*(_BYTE *)(v1 + 268))
    v10 = *(_BYTE *)(v1 + 268) == 11;
  else
    v10 = 1;
  if (v10)
    return 1;
  if (*(_BYTE *)(v1 + 270))
    v11 = *(float *)(v1 + 264) == 0.0;
  else
    v11 = *(_DWORD *)(v1 + 264) == 0;
  v12 = v11;
  return v12 ^ 1u;
}

BOOL WebCore::RenderElement::canContainAbsolutelyPositionedObjects(WebCore::RenderElement *this)
{
  int v1;
  uint64_t v2;
  WebCore::WillChangeData *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  char v9;
  int v11;
  int isAtomicInlineLevelBox;
  WebCore::RenderObject *v14;
  WebCore::RenderObject *v15;
  WebCore::RenderElement *v16;

  v1 = *((unsigned __int8 *)this + 46);
  if (v1 == 49)
    return 1;
  if ((*((_BYTE *)this + 98) & 0x38) != 0
    || ((*((_BYTE *)this + 45) & 0x40) != 0 || (v1 - 36) <= 4 && v1 != 38)
    && (*((_BYTE *)this + 22) & 2) != 0)
  {
    return 1;
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 72) + 20))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8))
      return 1;
  }
  if ((*((_BYTE *)this + 45) & 0x40) != 0)
  {
    v3 = *(WebCore::WillChangeData **)(v2 + 200);
    if (v3)
    {
      v15 = this;
      if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) != 0)return 1;
      this = v15;
      v1 = *((unsigned __int8 *)v15 + 46);
    }
  }
  v4 = 1;
  if (v1 == 67 || v1 == 90)
    return v4;
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v6 = *(_BYTE *)(v5 + 462);
  v7 = *(_BYTE *)(v5 + 642) & 3;
  v8 = v6 | 0x19;
  if (v7 == 1)
    v6 |= 0x15u;
  if (v7 == 2)
    v9 = v8;
  else
    v9 = v6;
  if ((v9 & 3) == 0)
    goto LABEL_16;
  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v16 = this;
    isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox(this);
    this = v16;
    if (!isAtomicInlineLevelBox)
      goto LABEL_16;
  }
  if ((*((_QWORD *)this + 12) & 0x1FLL) == 0x19)
    goto LABEL_16;
  if (*((unsigned __int8 *)this + 46) - 36 <= 4)
  {
    v4 = *((_BYTE *)this + 52) & 7;
    if ((_DWORD)v4 == 1)
      return v4;
LABEL_16:
    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) == 0)
      return 0;
    v14 = this;
    if (((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
      && (*((_QWORD *)v14 + 12) & 0x1FLL) != 0x19
      && ((v11 = *((unsigned __int8 *)v14 + 46), (v11 - 36) > 4) || v11 == 36))
    {
      return v11 != 35 && v11 != 63;
    }
    else
    {
      return 0;
    }
  }
  return 1;
}

BOOL WebCore::RenderElement::canContainFixedPositionObjects(WebCore::RenderElement *this)
{
  int v1;
  uint64_t v2;
  WebCore::WillChangeData *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  char v9;
  int v11;
  int isAtomicInlineLevelBox;
  WebCore::RenderObject *v14;
  WebCore::RenderObject *v15;
  WebCore::RenderElement *v16;

  v1 = *((unsigned __int8 *)this + 46);
  if (v1 == 49
    || ((*((_BYTE *)this + 45) & 0x40) != 0 || (v1 - 36) <= 4 && v1 != 38)
    && (*((_BYTE *)this + 22) & 2) != 0)
  {
    return 1;
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 72) + 20))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8))
      return 1;
  }
  if ((*((_BYTE *)this + 45) & 0x40) != 0)
  {
    v3 = *(WebCore::WillChangeData **)(v2 + 200);
    if (v3)
    {
      v15 = this;
      if ((WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned(v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) != 0)return 1;
      this = v15;
      v1 = *((unsigned __int8 *)v15 + 46);
    }
  }
  v4 = 1;
  if (v1 == 67 || v1 == 90)
    return v4;
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v6 = *(_BYTE *)(v5 + 462);
  v7 = *(_BYTE *)(v5 + 642) & 3;
  v8 = v6 | 0x19;
  if (v7 == 1)
    v6 |= 0x15u;
  if (v7 == 2)
    v9 = v8;
  else
    v9 = v6;
  if ((v9 & 3) != 0)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0
      || (v16 = this,
          isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox(this),
          this = v16,
          isAtomicInlineLevelBox))
    {
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19)
      {
        if (*((unsigned __int8 *)this + 46) - 36 <= 4)
        {
          v4 = *((_BYTE *)this + 52) & 7;
          if ((_DWORD)v4 == 1)
            return v4;
          goto LABEL_15;
        }
        return 1;
      }
    }
  }
LABEL_15:
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) == 0)
    return 0;
  v14 = this;
  if ((*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this))
    return 0;
  if ((*((_QWORD *)v14 + 12) & 0x1FLL) == 0x19)
    return 0;
  v11 = *((unsigned __int8 *)v14 + 46);
  if ((v11 - 36) <= 4 && v11 != 36)
    return 0;
  return v11 != 35 && v11 != 63;
}

uint64_t WebCore::RenderBox::overflowClipRectForChildLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1416))(a1, a2, a3, a4, 0);
}

uint64_t WebCore::DeprecatedGlobalSettings::setShouldManageAudioSessionCategory(uint64_t this)
{
  WebCore::AudioSession::s_shouldManageAudioSessionCategory = this;
  return this;
}

uint64_t WebCore::Quirks::shouldLayOutAtMinimumWindowWidthWhenIgnoringScalingConstraints(WebCore::Quirks *this, const WTF::URL *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)this)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (!*(_BYTE *)(v3 + 242))
      return 0;
  }
  else if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
  {
    return 0;
  }
  return WebCore::isWikipediaDomain((WebCore *)(v2 + 736), a2);
}

BOOL WebCore::ImageBufferIOSurfaceBackend::setNonVolatile(WebCore::ImageBufferIOSurfaceBackend *this)
{
  uint64_t v2;
  uint32_t oldState;

  if (*((_BYTE *)this + 69) != 1)
    return 0;
  *((_BYTE *)this + 69) = 0;
  v2 = *((_QWORD *)this + 6);
  oldState = 0;
  IOSurfaceSetPurgeable(*(IOSurfaceRef *)(v2 + 48), 0, &oldState);
  return oldState == 2;
}

WebCore::URLSearchParams *WebCore::JSURLSearchParams::destroy(WebCore::JSURLSearchParams *this, JSC::JSCell *a2)
{
  WebCore::URLSearchParams *result;
  WTF *v4;
  void *v5;

  result = (WebCore::URLSearchParams *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(result, a2);
      return (WebCore::URLSearchParams *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::JSDOMWindowBase::destroy(WebCore::JSDOMWindowBase *this, JSC::JSCell *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;

  v3 = (_DWORD *)*((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v4 + 72))(v4, a2);
    else
      --v4[6];
  }
  v5 = (unsigned int *)*((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)v5);
      WTF::fastFree(v8, v9);
    }
  }
  WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(this);
}

int *JSC::ARM64Assembler::label(int *this, _DWORD *a2)
{
  int v2;
  JSC::AssemblerBuffer *v3;
  JSC::AssemblerBuffer *v4;
  _DWORD *v5;
  int *v6;

  v2 = a2[42];
  *this = v2;
  if (v2 < a2[5])
  {
    v3 = (JSC::AssemblerBuffer *)(a2 + 6);
    do
    {
      if ((v2 + 4) > a2[40])
      {
        v6 = this;
        v4 = v3;
        v5 = a2;
        JSC::AssemblerBuffer::outOfLineGrow(v3);
        v3 = v4;
        a2 = v5;
        this = v6;
        v2 = v5[42];
      }
      *(_DWORD *)(*((_QWORD *)a2 + 3) + v2) = -721215457;
      v2 = a2[42] + 4;
      a2[42] = v2;
      *this = v2;
    }
    while (v2 < a2[5]);
  }
  return this;
}

uint64_t JSC::ARM64LogicalImmediate::create32(JSC::ARM64LogicalImmediate *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  _QWORD v17[7];

  if (((_DWORD)this + 1) < 2)
    return 0xFFFFFFFFLL;
  v17[5] = v1;
  v17[6] = v2;
  v3 = this;
  v17[0] = 0;
  v16 = 0;
  if (JSC::ARM64LogicalImmediate::findBitRange<32u>(this, (int *)v17 + 1, (int *)v17, &v16))
  {
    v4 = LODWORD(v17[0]) - HIDWORD(v17[0]) + 30;
    if (v16)
    {
      v5 = 31 - HIDWORD(v17[0]);
    }
    else
    {
      v4 = HIDWORD(v17[0]) - LODWORD(v17[0]);
      v5 = -LODWORD(v17[0]) & 0x1F;
    }
    return v4 | (v5 << 6);
  }
  if ((unsigned __int16)v3 != HIWORD(v3))
    return 0xFFFFFFFFLL;
  if (JSC::ARM64LogicalImmediate::findBitRange<16u>((unsigned __int16)v3, (_DWORD *)v17 + 1, v17, &v16))
  {
    v7 = LODWORD(v17[0]) - HIDWORD(v17[0]) + 14;
    if (v16)
    {
      v8 = 15 - HIDWORD(v17[0]);
    }
    else
    {
      v7 = HIDWORD(v17[0]) - LODWORD(v17[0]);
      v8 = -LODWORD(v17[0]) & 0xF;
    }
    return v7 | (v8 << 6) | 0x20u;
  }
  else
  {
    if (v3 != BYTE1(v3))
      return 0xFFFFFFFFLL;
    if (JSC::ARM64LogicalImmediate::findBitRange<8u>(v3, (_DWORD *)v17 + 1, v17, &v16))
    {
      v9 = LODWORD(v17[0]) - HIDWORD(v17[0]) + 6;
      if (v16)
      {
        v10 = 7 - HIDWORD(v17[0]);
      }
      else
      {
        v9 = HIDWORD(v17[0]) - LODWORD(v17[0]);
        v10 = -LODWORD(v17[0]) & 7;
      }
      return v9 | (v10 << 6) | 0x30u;
    }
    else
    {
      if ((v3 & 0xF) != v3 >> 4)
        return 0xFFFFFFFFLL;
      if (JSC::ARM64LogicalImmediate::findBitRange<4u>(v3 & 0xF, (_DWORD *)v17 + 1, v17, &v16))
      {
        if (v16)
        {
          v11 = 3 - HIDWORD(v17[0]);
          v12 = LODWORD(v17[0]) - HIDWORD(v17[0]) + 2;
        }
        else
        {
          v11 = -LODWORD(v17[0]) & 3;
          v12 = HIDWORD(v17[0]) - LODWORD(v17[0]);
        }
        return v12 | (v11 << 6) | 0x38u;
      }
      else
      {
        v13 = v3 & 3;
        if ((_DWORD)v13 != (v3 & 0xF) >> 2
          || !JSC::ARM64LogicalImmediate::findBitRange<2u>(v13, (_DWORD *)v17 + 1, v17, &v16))
        {
          return 0xFFFFFFFFLL;
        }
        v14 = HIDWORD(v17[0]) - LODWORD(v17[0]);
        if (v16)
        {
          v14 = LODWORD(v17[0]) - HIDWORD(v17[0]);
          v15 = 1 - HIDWORD(v17[0]);
        }
        else
        {
          v15 = v17[0] & 1;
        }
        return v14 | (v15 << 6) | 0x3Cu;
      }
    }
  }
}

uint64_t JSC::ARM64LogicalImmediate::findBitRange<32u>(unint64_t a1, int *a2, int *a3, BOOL *a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;
  BOOL v13;
  int v14;
  int v15;

  v4 = 0;
  *a4 = (a1 & 0x80000000) != 0;
  if ((a1 & 0x80000000) != 0)
    v5 = a1 ^ 0xFFFFFFFF;
  else
    v5 = a1;
  v6 = HIDWORD(v5);
  if (!HIDWORD(v5))
    v6 = v5;
  v7 = 32 * (HIDWORD(v5) != 0);
  v8 = v6 >> 16;
  if (v6 >= 0x10000)
    v7 = (32 * (HIDWORD(v5) != 0)) | 0x10;
  else
    v8 = v6;
  if (v8 >= 0x100)
  {
    v8 >>= 8;
    v7 |= 8u;
  }
  if (v8 >= 0x10)
  {
    v8 >>= 4;
    v7 |= 4u;
  }
  if (v8 >= 4)
  {
    v8 >>= 2;
    v7 += 2;
  }
  if (v8 <= 1)
    v9 = v7;
  else
    v9 = v7 + 1;
  *a2 = v9;
  v10 = (0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v9) ^ v5;
  if (!v10)
    goto LABEL_19;
  result = 0;
  v12 = HIDWORD(v10);
  if (!HIDWORD(v10))
    v12 = v10;
  v13 = v12 >= 0x10000;
  if (v12 >= 0x10000)
    v12 >>= 16;
  v14 = (32 * (HIDWORD(v10) != 0)) | 0x10;
  if (!v13)
    v14 = 32 * (HIDWORD(v10) != 0);
  if (v12 >= 0x100)
  {
    v12 >>= 8;
    v14 |= 8u;
  }
  if (v12 >= 0x10)
  {
    v12 >>= 4;
    v14 |= 4u;
  }
  if (v12 >= 4)
  {
    v12 >>= 2;
    v14 += 2;
  }
  if (v12 <= 1)
    v15 = v14;
  else
    v15 = v14 + 1;
  *a3 = v15;
  if (v10 == 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v15)
  {
    v4 = v15 + 1;
LABEL_19:
    *a3 = v4;
    return 1;
  }
  return result;
}

void WebCore::SelectorCompiler::SelectorCodeGenerator::branchOnResolvingMode(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  if (*(_DWORD *)(a2 + 1148) != 1)
    goto LABEL_6;
  v4 = *(_DWORD *)(a2 + 3172);
  v5 = *(_DWORD *)(a2 + 608);
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1941B76D0);
  }
  JSC::MacroAssemblerARM64::load64(a2 + 160, (v7 << 32) | 0x1F, a3);
  if (!*(_BYTE *)(a2 + 372))
  {
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x1941B76B0);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 456) + 208) &= ~*(_DWORD *)(a2 + 480);
  JSC::MacroAssemblerARM64::load8(a2 + 160, a3, *(_BYTE *)(a2 + 464));
  JSC::MacroAssemblerARM64::branchTest32(a2 + 160, 1u, 17, 17, a1);
}

void *WebCore::SelectorCompiler::SelectorCodeGenerator::jumpIfNoPreviousAdjacentElement(WebCore::SelectorCompiler::SelectorCodeGenerator *this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v16;
  unsigned __int8 v17;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 2;
  v2 = *(_QWORD *)(a2 + 496);
  v3 = *(_QWORD *)(a2 + 504);
  v4 = *(unsigned int *)(a2 + 520);
  if (v2 <= v3)
    v5 = 0;
  else
    v5 = *(unsigned int *)(a2 + 520);
  if (v5 + v3 == v2)
  {
    __break(0xC471u);
    JUMPOUT(0x1941B7824);
  }
  if (v2 == v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1941B7844);
  }
  v8 = (uint64_t *)(a2 + 496);
  v9 = *(_QWORD *)(a2 + 512);
  v10 = *(unsigned __int8 *)(v9 + v2);
  v17 = *(_BYTE *)(v9 + v2);
  if (v2 == v4 - 1)
    v11 = 0;
  else
    v11 = v2 + 1;
  *(_QWORD *)(a2 + 496) = v11;
  v12 = (_QWORD *)(a2 + 544);
  v13 = *(unsigned int *)(a2 + 556);
  if ((_DWORD)v13 == *(_DWORD *)(a2 + 552))
  {
    v16 = (_BYTE *)WTF::Vector<WebCore::CSSParserImpl::AncestorRuleType,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, (WTF *)(v13 + 1), (unint64_t)&v17);
    v13 = *(unsigned int *)(a2 + 556);
    *(_BYTE *)(*(_QWORD *)(a2 + 544) + v13) = *v16;
    v10 = v17;
  }
  else
  {
    *(_BYTE *)(*v12 + v13) = v10;
  }
  *(_DWORD *)(a2 + 556) = v13 + 1;
  if (v10)
  {
    if (v10 == 31)
    {
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 216), -1862270945);
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 360);
      if (v14 + 4 > *(_DWORD *)(a2 + 352))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 216));
        v14 = *(_DWORD *)(a2 + 360);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 216) + v14) = v10 | 0xAA0003E0;
      *(_DWORD *)(a2 + 360) += 4;
    }
  }
  WebCore::SelectorCompiler::SelectorCodeGenerator::generateWalkToPreviousAdjacentElement(a2, (uint64_t)this, (char)v10);
  return WebCore::RegisterAllocator::deallocateRegister(v8, v10);
}

BOOL WebCore::ContentFilter::continueAfterDataReceived(WebCore::ContentFilter *this, const WebCore::SharedBuffer *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  unsigned int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];

  v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v7 = *((_DWORD *)this + 24);
  if (v7 == 1)
  {
    do
      v10 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v10 + 1, (unsigned int *)a2));
    v19[0] = a2;
    WebCore::ContentFilter::forEachContentFilterUntilBlocked<WebCore::ContentFilter::continueAfterDataReceived(WebCore::SharedBuffer const&,unsigned long)::$_0>((unsigned int *)this, v19);
    WebCore::ContentFilter::ResourceDataItem::~ResourceDataItem((WebCore::ContentFilter::ResourceDataItem *)v19, v11);
    if (*((_DWORD *)this + 24) == 2)
    {
      WebCore::ContentFilter::deliverStoredResourceData((uint64_t)this, v12);
      v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      (*(void (**)(uint64_t, const WebCore::SharedBuffer *, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, a3);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    }
    else
    {
      do
        v14 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v14 + 1, (unsigned int *)a2));
      v19[0] = a2;
      v19[1] = a3;
      v15 = *((unsigned int *)this + 19);
      if ((_DWORD)v15 == *((_DWORD *)this + 18))
      {
        WTF::Vector<WebCore::ContentFilter::ResourceDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContentFilter::ResourceDataItem>((uint64_t)this + 64, (unint64_t)v19);
      }
      else
      {
        v16 = v15 + 1;
        v17 = *((_QWORD *)this + 8);
        v19[0] = 0;
        v18 = (_QWORD *)(v17 + 16 * v15);
        *v18 = a2;
        v18[1] = a3;
        *((_DWORD *)this + 19) = v16;
      }
      WebCore::ContentFilter::ResourceDataItem::~ResourceDataItem((WebCore::ContentFilter::ResourceDataItem *)v19, v12);
    }
    v8 = 0;
  }
  else
  {
    v8 = v7 != 3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v8;
}

uint64_t WebCore::verifyVaryingRequestHeaders(uint64_t a1, uint64_t *a2, uint64_t (**a3)())
{
  uint64_t (***v5)();
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;

  v17 = a1;
  if (!a1)
    return 0;
  v5 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v6 = off_1E341D870;
  *v5 = off_1E341D870;
  v5[1] = a3;
  v5[2] = (uint64_t (**)())&v17;
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v10 = *a2;
    v11 = v10 + 16 * v7;
    while ((MEMORY[0x19AEA53F4](*(_QWORD *)v10, "*", 1) & 1) == 0)
    {
      ((void (*)(WTF::StringImpl **__return_ptr, uint64_t (***)(), uint64_t))(*v5)[2])(&v18, v5, v10);
      v13 = WTF::equal(v18, *(const WTF::StringImpl **)(v10 + 8), v12);
      v15 = v18;
      v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          v16 = v13;
          WTF::StringImpl::destroy(v15, v14);
          v13 = v16;
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      if ((v13 & 1) == 0)
        break;
      v10 += 16;
      if (v10 == v11)
      {
        v8 = 1;
        goto LABEL_15;
      }
    }
    v8 = 0;
LABEL_15:
    v6 = *v5;
  }
  else
  {
    v8 = 1;
  }
  ((void (*)(uint64_t (***)()))v6[1])(v5);
  return v8;
}

float WebCore::TileController::setVelocity(uint64_t a1, __int128 *a2)
{
  _OWORD *v2;
  __int128 v3;
  float result;
  __int128 v5;

  v2 = (_OWORD *)(a1 + 272);
  if (*(float *)(a1 + 272) != 0.0
    || *(float *)(a1 + 276) != 0.0
    || *(float *)(a1 + 280) != 0.0
    || *(float *)a2 != 0.0
    || *((float *)a2 + 1) != 0.0)
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 2);
    *v2 = v3;
    *(_BYTE *)(a1 + 313) = 1;
LABEL_5:
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 48) + 144))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48));
    return result;
  }
  result = *((float *)a2 + 2);
  v5 = *a2;
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 2);
  *v2 = v5;
  *(_BYTE *)(a1 + 313) = 1;
  if (result != 0.0)
    goto LABEL_5;
  return result;
}

double WebCore::GraphicsContextCG::clearRect(WebCore::GraphicsContextCG *this, const WebCore::FloatRect *a2)
{
  double result;
  CGRect v3;

  *((_BYTE *)this + 744) |= 8u;
  v3.origin.x = *(float *)a2;
  v3.origin.y = *((float *)a2 + 1);
  v3.size.width = *((float *)a2 + 2);
  v3.size.height = *((float *)a2 + 3);
  CGContextClearRect(*((CGContextRef *)this + 90), v3);
  return result;
}

double WTF::Vector<WebCore::ServerTiming,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServerTiming>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = WTF::Vector<WebCore::ServerTiming,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 32 * a1[3];
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  result = *(double *)(v3 + 8);
  *(double *)(v4 + 8) = result;
  v7 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v7;
  *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ServerTiming,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ServerTiming,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ServerTiming,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ServerTiming,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 32 * v5);
        v9 = v4;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          *((_QWORD *)v7 + 1) = *((_QWORD *)v9 + 1);
          v11 = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          *((_QWORD *)v7 + 2) = v11;
          *((_WORD *)v7 + 12) = *((_WORD *)v9 + 12);
          v12 = (WTF::StringImpl *)*((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 32);
          v7 += 8;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

unsigned int *WebCore::JSNodeOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int *result;
  int v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  unsigned int *v26;

  result = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = result[6];
  result[6] = v4 + 2;
  v5 = result + 2;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)result + ~((_QWORD)result << 32)) ^ (((unint64_t)result + ~((_QWORD)result << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(unsigned int **)(v7 + 16 * v13);
      if (v14 != result)
      {
        v25 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v25) & v9;
          v14 = *(unsigned int **)(v7 + 16 * v13);
          ++v25;
          if (v14 == result)
            goto LABEL_13;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_13:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v15 = (_QWORD *)(v7 + 16 * v13);
        *v15 = -1;
        v18 = v15[1];
        v17 = v15 + 1;
        v16 = v18;
        if (v18)
        {
          *(_QWORD *)(v16 + 8) = 3;
          *v17 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v19 = *v6;
        if (*v6)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v6;
        if (*v6)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v23 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = result[6] - 2;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    result[6] = v4;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

uint64_t WebCore::Page::setIsPrerender(uint64_t this)
{
  *(_BYTE *)(this + 657) = 1;
  return WebCore::Page::updateDOMTimerAlignmentInterval(this);
}

uint64_t WebCore::PlatformMediaSessionManager::setShouldDeactivateAudioSession(uint64_t this)
{
  WebCore::deactivateAudioSession(void)::deactivate = this;
  return this;
}

uint64_t WebCore::MessagePortChannelRegistry::MessagePortChannelRegistry(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t WebCore::ServiceWorkerProvider::setSharedProvider(uint64_t result)
{
  WebCore::sharedProvider = result;
  return result;
}

uint64_t WebCore::ProcessCapabilities::setHardwareAcceleratedDecodingDisabled(uint64_t this)
{
  WebCore::s_hardwareAcceleratedDecodingDisabled = this;
  return this;
}

uint64_t WebCore::ProcessCapabilities::setCanUseAcceleratedBuffers(uint64_t this)
{
  WebCore::s_canUseAcceleratedBuffers = this;
  return this;
}

uint64_t WebCore::ProcessCapabilities::setHEICDecodingEnabled(uint64_t this)
{
  WebCore::s_HEICDecodingEnabled = this;
  return this;
}

uint64_t WebCore::ProcessCapabilities::setAVIFDecodingEnabled(uint64_t this)
{
  WebCore::s_AVIFDecodingEnabled = this;
  return this;
}

uint64_t WebCore::GamepadProvider::setSharedProvider(uint64_t result)
{
  WebCore::sharedProvider = result;
  return result;
}

uint64_t WebCore::AXObjectCache::setEnhancedUserInterfaceAccessibility(uint64_t this)
{
  WebCore::AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled = this;
  return this;
}

void WebCore::MemoryCache::setCapacities(WebCore::MemoryCache *this, int a2, int a3, int a4)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 1) = a4;
  WebCore::MemoryCache::prune(this);
}

uint64_t WebCore::FontCascade::setCodePath(uint64_t result)
{
  WebCore::FontCascade::s_codePath = result;
  return result;
}

uint64_t *WebCore::symbolFromCSSValue(uint64_t *this, const WebCore::CSSValue *a2)
{
  if (a2 && ((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0)
  {
    *(_BYTE *)this = (*((_WORD *)a2 + 2) & 0x7F) == 63;
    return WebCore::CSSPrimitiveValue::stringValue((uint64_t *)a2, this + 1);
  }
  else
  {
    *(_BYTE *)this = 0;
    this[1] = 0;
  }
  return this;
}

uint64_t WebCore::IOSurface::asCAIOSurfaceLayerContents@<X0>(WebCore::IOSurface *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _BOOL4 v4;
  WebCore::IOSurface *v5;

  {
    v5 = this;
    v4 = PAL::init_QuartzCore_CAIOSurfaceCreate(this);
    this = v5;
    PAL::canLoad_QuartzCore_CAIOSurfaceCreate(void)::loaded = v4;
    if (v4)
      goto LABEL_3;
LABEL_5:
    result = 0;
    goto LABEL_6;
  }
  if (!PAL::canLoad_QuartzCore_CAIOSurfaceCreate(void)::loaded)
    goto LABEL_5;
LABEL_3:
  result = PAL::softLinkQuartzCoreCAIOSurfaceCreate(*((_QWORD *)this + 6));
LABEL_6:
  *a2 = result;
  return result;
}

uint64_t PAL::get_WebPrivacy_WPResourceDataChangedNotificationName(PAL *this)
{
  if (qword_1ECE7F0E0 != -1)
    dispatch_once(&qword_1ECE7F0E0, &__block_literal_global_4_12);
  return qword_1ECE7F0D8;
}

void WebCore::RenderBlockFlow::layoutBlock(uint64_t a1, BOOL a2, int a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  WebCore::WillChangeData *v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  int v32;
  char v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t *v59;
  unsigned int *v60;
  uint64_t v61;
  const WebCore::RenderBox *v62;
  _DWORD *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  int v73;
  int v74;
  _BOOL4 v75;
  uint64_t v76;
  int v77;
  void *v78;
  int *v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  int ii;
  uint64_t v98;
  int v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BOOL4 v108;
  uint64_t v109;
  int v110;
  int v111;
  void *v112;
  int v113;
  unsigned int v114;
  __int16 v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  void *v137;
  unsigned int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WebCore::RenderObject *v149;
  _DWORD *v150;
  int v151;
  uint64_t v152;
  int v153;
  _DWORD *v154;
  int v155;
  _DWORD *v156;
  int v157;
  _DWORD *v158;
  _QWORD *v159;
  char v160;
  int v161;
  __int16 v162;
  __int16 v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  char v170;
  void *v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  uint64_t v177;
  int *v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  void *v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  WebCore::RenderObject *v211;
  int v212;
  _BYTE *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  unsigned int v224;
  float v225;
  float v226;
  double v227;
  unsigned int v229;
  uint64_t v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  _BYTE *v234;
  int v235;
  int v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  WTF *v246;
  int v247;
  unsigned __int8 *v248;
  uint64_t v249;
  _DWORD *k;
  int v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  unsigned int v259;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  float v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  int *v290;
  int v291;
  unsigned int v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  _QWORD *v297;
  int v298;
  uint64_t v299;
  int *v300;
  int v301;
  BOOL v302;
  char **v303;
  char *v304;
  const WebCore::RenderBlockFlow *v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  int v309;
  int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  unsigned int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  int v323;
  __int16 v324;
  __int16 v325;
  unsigned int v326;
  int v327;
  __int16 v328;
  uint64_t v329;
  uint64_t v330;
  float v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  uint64_t v335;
  char v336;
  char **v337;
  _BOOL4 v338;
  _QWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  WTF *v347;
  int v348;
  int v349;
  __int16 v350;
  unsigned int *v351;
  uint64_t v352;
  int *v353;
  int v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  WTF *v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  int v366;
  uint64_t v367;
  int *v368;
  int v369;
  unsigned int v370;
  int v371;
  unsigned int v372;
  uint64_t v373;
  int *v374;
  unsigned int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  int v384;
  uint64_t v385;
  int v386;
  int v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  int v394;
  void *v395;
  WTF *v396;
  int v397;
  int v398;
  __int16 v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  uint64_t v403;
  int v404;
  uint64_t v405;
  WebCore::LegacyLineLayout *v406;
  void *v407;
  WebCore::LegacyLineLayout *v408;
  uint64_t v409;
  WTF *v410;
  _QWORD *v411;
  uint64_t v412;
  int *v413;
  int v414;
  unsigned int v415;
  uint64_t v416;
  unsigned int v417;
  int v418;
  unsigned int v419;
  int v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  int v424;
  int v425;
  unsigned int v426;
  uint64_t v427;
  WebCore::Element *v428;
  uint64_t v429;
  int v430;
  int v431;
  char v432;
  uint64_t v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  int v437;
  unsigned int v438;
  int v439;
  unsigned int v440;
  int v441;
  int v442;
  int v443;
  unsigned int v444;
  int v445;
  unsigned int v446;
  unsigned int v447;
  int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unsigned int v459;
  int jj;
  uint64_t v461;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  void *v468;
  WTF *v469;
  int v470;
  void (*v471)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD);
  unsigned int v472;
  unsigned int v473;
  BOOL v474;
  _BOOL4 v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  int v480;
  int *v481;
  int v482;
  uint64_t v483;
  unsigned __int16 *v484;
  __int16 v485;
  int v486;
  int v487;
  int v488;
  _BOOL4 v489;
  uint64_t v490;
  int v491;
  int *v492;
  int v493;
  _BYTE *v494;
  int v495;
  uint64_t v496;
  int v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unsigned int v501;
  int mm;
  uint64_t v503;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t v508;
  _QWORD *v509;
  uint64_t v510;
  uint64_t *v511;
  unsigned int v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  _DWORD *v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int v519;
  WebCore *v520;
  _BOOL8 v521;
  uint64_t v522;
  WebCore *v523;
  uint64_t v524;
  void *v525;
  char v526;
  WTF *v527;
  unsigned int v528;
  _DWORD *v529;
  uint64_t v530;
  int *v531;
  int v532;
  unsigned int v533;
  unsigned int v534;
  int v535;
  int v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  int v543;
  unsigned int v544;
  int v545;
  unsigned int v546;
  int nn;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int v551;
  _DWORD *v552;
  void *v553;
  WTF *v554;
  uint64_t v555;
  WebCore::RenderLayerScrollableArea *v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  int v560;
  int v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  int v565;
  int v566;
  char *LineStyle;
  void *v568;
  float v569;
  int v570;
  unsigned int v571;
  unsigned __int8 *v572;
  uint64_t v573;
  unsigned int v574;
  int v575;
  signed int *v576;
  int ClearDelta;
  unsigned int *v578;
  _DWORD *v579;
  unsigned int v580;
  int v581;
  int v582;
  int v583;
  uint64_t v584;
  int *v585;
  unsigned int v586;
  int v587;
  int v588;
  unsigned int v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  _BYTE *v595;
  int v596;
  unsigned int *v597;
  int v598;
  unsigned int v599;
  uint64_t v600;
  int v601;
  unsigned int v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  char v606;
  char v607;
  WebCore::RenderMultiColumnFlow *v608;
  uint64_t MultiColumnSet;
  WebCore::RenderMultiColumnSet *v610;
  int v611;
  int v612;
  uint64_t v613;
  int v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  unsigned int v618;
  int v619;
  unsigned int v620;
  int v621;
  uint64_t v622;
  unsigned int v623;
  int v624;
  _DWORD *v625;
  signed int *v626;
  int v627;
  unsigned int *v628;
  unsigned int v629;
  int v630;
  int v631;
  int v632;
  uint64_t v633;
  int *v634;
  unsigned int v635;
  int v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int *v642;
  unsigned int v643;
  int v644;
  unsigned int started;
  int v646;
  int v647;
  unsigned int v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int *v654;
  unsigned int *v655;
  int v656;
  void *v657;
  int v658;
  unsigned int v659;
  int n;
  uint64_t v661;
  uint64_t v662;
  int v663;
  unsigned int v664;
  int kk;
  uint64_t v666;
  uint64_t v667;
  int v668;
  unint64_t v669;
  unint64_t v670;
  unint64_t v671;
  unsigned int v672;
  int i;
  uint64_t v674;
  uint64_t v675;
  int v676;
  int v677;
  uint64_t v678;
  _QWORD *v679;
  _DWORD *v680;
  unsigned int v681;
  int v682;
  int v683;
  int v684;
  uint64_t v685;
  uint64_t v686;
  WebCore::RenderBlockFlowRareData *v687;
  WTF *v688;
  WTF *v689;
  uint64_t **m;
  uint64_t v692;
  int v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  unsigned int v697;
  unint64_t v698;
  int v699;
  int v700;
  int v701;
  uint64_t v702;
  unint64_t v703;
  unint64_t v704;
  int v705;
  unsigned int v706;
  unsigned int v707;
  int v708;
  signed int v709;
  uint64_t v710;
  int v711;
  int v712;
  int v713;
  int v714;
  uint64_t v715;
  WebCore::Element *v716;
  int v717;
  int v718;
  int v719;
  uint64_t v720;
  int v721;
  unint64_t v722;
  unint64_t v723;
  unint64_t v724;
  unsigned int v725;
  int j;
  uint64_t v727;
  uint64_t v729;
  _QWORD *v730;
  uint64_t v731;
  uint64_t (*v732)();
  unsigned int v733;
  uint64_t v734;
  unsigned int v735;
  int v736;
  unsigned int v737;
  int v738;
  unsigned int v739;
  int v740;
  unsigned int v741;
  int v742;
  int v743;
  unsigned int v744;
  void *v745;
  unsigned int v746;
  unsigned int v747;
  _DWORD *v748;
  uint64_t v749;
  WebCore::RenderLayerScrollableArea *v750;
  _QWORD *v752;
  _DWORD *v753;
  unsigned int v754;
  int v755;
  int v756;
  int v757;
  int v758;
  int v759;
  int v760;
  _QWORD *v761;
  _DWORD *v762;
  unsigned int v763;
  int v764;
  int v765;
  int v766;
  int v767;
  int *v769;
  int v770;
  int v771;
  int *v772;
  int v773;
  int v774;
  uint64_t v775;
  int v776;
  int v777;
  int v778;
  _BOOL4 isCentered;
  double v780;
  int v781;
  int v782;
  int v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  unsigned int *v787;
  unsigned int v788;
  int v789;
  int v790;
  _BYTE *v791;
  unint64_t v792;
  uint64_t v793;
  uint64_t v794;
  _BYTE *v795;
  uint64_t v796;
  unsigned int v797;
  int v798;
  int v799;
  int v800;
  uint64_t v801;
  int v802;
  uint64_t *v803;
  uint64_t v804;
  uint64_t *v805;
  WTF *v806;
  uint64_t v807;
  void *v808;
  uint64_t v809;
  uint64_t v810;
  WTF *v811;
  uint64_t v812;
  WTF **v813;
  WTF *v814;
  unsigned int v815;
  int v816;
  int v817;
  int v818;
  int *v819;
  uint64_t v821;
  unsigned int v822;
  int v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  const WebCore::RenderBlockFlow *v828;
  uint64_t InlineFormattingContextRoot;
  BOOL v830;
  char v831;
  int v832;
  int v833;
  int v834;
  uint64_t v835;
  unsigned int v836;
  unsigned int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  uint64_t v843;
  uint64_t v844;
  float v845;
  unint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  float v851;
  unint64_t v852;
  uint64_t v853;
  unsigned int v854;
  uint64_t *v855;
  uint64_t v856;
  uint64_t v857;
  int v858;
  int v859;
  int v860;
  _QWORD *v861;
  uint64_t v862;
  _DWORD *v863;
  int v864;
  int v865;
  char v866;
  char v867;
  int v868;
  uint64_t v869;
  const WebCore::RenderBlockFlow *v870;
  uint64_t v871;
  BOOL v872;
  char v873;
  unsigned int v874;
  int v875;
  unsigned int v876;
  int v877;
  unsigned int v878;
  int v879;
  unsigned int v880;
  int v881;
  int v882;
  int v883;
  unsigned int v884;
  int v885;
  unsigned int v886;
  int v887;
  unsigned int v888;
  int v889;
  unsigned int v890;
  int v891;
  unsigned int v892;
  int v893;
  unsigned int v894;
  int v895;
  unsigned int v896;
  int v897;
  int v898;
  int v899;
  unsigned int v900;
  int v901;
  unsigned int v902;
  unsigned int v903;
  unsigned int v904;
  int v905;
  unsigned int v906;
  int v907;
  int v908;
  int v909;
  int v910;
  unsigned int v911;
  int v912;
  unsigned int v913;
  int v914;
  unsigned int v915;
  int v916;
  unsigned int v917;
  int v918;
  int v919;
  int v920;
  unsigned int v921;
  int v922;
  void *v923;
  WTF *v924;
  uint64_t v925;
  int v926;
  unsigned int v927;
  unsigned int v928;
  BOOL v929;
  uint64_t v930;
  uint64_t v931;
  int v932;
  int v933;
  uint64_t v934;
  void *v935;
  uint64_t v936;
  unsigned int v937;
  uint64_t v938;
  uint64_t v939;
  void *v940;
  uint64_t v941;
  unsigned int v942;
  int v943;
  int v944;
  unsigned int v945;
  uint64_t v946;
  int v947;
  int v948;
  uint64_t v949;
  unsigned int v950;
  uint64_t v951;
  int v952;
  int v953;
  uint64_t v954;
  int v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  void *v960;
  uint64_t v961;
  int v962;
  int v963;
  WebCore::RenderBlockFlowRareData *v964;
  WTF *v965;
  WTF *v966;
  int v967;
  uint64_t v968;
  int v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  WebCore::RenderBlockFlowRareData *v973;
  WTF *v974;
  WTF *v975;
  unsigned int v976;
  uint64_t v977;
  int v978;
  int v979;
  unsigned int v980;
  int v981;
  int v982;
  float v983;
  double v984;
  unsigned int v986;
  int v987;
  int v988;
  float v989;
  double v990;
  int v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  int v999;
  int v1000;
  _QWORD *v1001;
  _QWORD *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  int v1006;
  uint64_t v1007;
  uint64_t v1008;
  int v1009;
  WebCore::RenderObject *v1010;
  _BYTE *v1011;
  uint64_t v1012;
  unsigned int v1013;
  uint64_t v1014;
  int v1015;
  unsigned __int8 *v1016;
  int v1017;
  unsigned int v1018;
  uint64_t v1019;
  _BOOL4 v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  int v1025;
  unsigned int v1026;
  unsigned int v1027;
  uint64_t v1028;
  _BOOL4 v1029;
  unsigned int v1030;
  unsigned int v1031;
  int v1032;
  int v1033;
  WTF *v1034;
  char v1035;
  char v1036;
  _BOOL4 v1037;
  _BOOL4 v1038;
  _QWORD *v1039;
  int v1040;
  int v1041;
  WebCore::LegacyLineLayout **v1042;
  WebCore::LocalFrameViewLayoutContext *v1043;
  _BOOL4 v1044;
  int v1045;
  int v1046;
  int v1047;
  int *v1048;
  int v1049;
  _DWORD *v1050;
  unint64_t v1051;
  unint64_t v1052;
  int v1053;
  uint64_t v1054;
  WebCore *v1055;
  uint64_t v1056;
  __int128 v1057;
  __int128 v1058;
  int v1059;
  _BYTE v1060[3];
  BOOL v1061;
  __int128 v1062;
  __int128 v1063;
  int v1064;
  uint64_t v1065[2];
  char v1066;

  v1061 = a2;
  if (a2 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1736))(a1))
    goto LABEL_3;
  v8 = *(_DWORD *)(a1 + 20);
  if ((v8 & 0x20000) != 0)
  {
    v24 = a1;
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v25 = *(_QWORD *)(v24 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 40) + 20))
      goto LABEL_39;
    v340 = *(_QWORD **)(v25 + 40);
    if (v340[41] || v340[38] || v340[39] || v340[40] || (v8 & 0x100000) != 0)
      goto LABEL_39;
  }
  if ((v8 & 0x4000) == 0)
    goto LABEL_12;
  v668 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
  v669 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v670 = 9 * ((v669 + ~(v669 << 13)) ^ ((v669 + ~(v669 << 13)) >> 8));
  v671 = (v670 ^ (v670 >> 15)) + ~((v670 ^ (v670 >> 15)) << 27);
  v672 = v668 & ((v671 >> 31) ^ v671);
  for (i = 1; ; v672 = (v674 + i++) & v668)
  {
    v674 = v672;
    v675 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v672);
    if (v675 != -1 && *(_QWORD *)(v675 + 8) == a1)
      break;
  }
  if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v674 + 8))
  {
LABEL_39:
    v10 = 1;
  }
  else
  {
LABEL_12:
    v9 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v910 = 2;
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_14;
      case 3:
      case 5:
        v9 = 3;
        goto LABEL_14;
      case 4:
        goto LABEL_15;
      default:
        v9 = 0;
LABEL_14:
        v910 = v9;
LABEL_15:
        v10 = (v910 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  v1055 = *(WebCore **)(a1 + 152);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v12 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v11 + 336, (WebCore::RenderObject *)a1, (int *)&v1055, 0, 0);
  v14 = v12;
  if (v10 && v12)
    ++*(_DWORD *)(v11 + 492);
  if ((*(_BYTE *)(a1 + 20) & 0x10) != 0)
  {
    v759 = *(_DWORD *)(a1 + 160);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
    if (v759 != *(_DWORD *)(a1 + 160))
      goto LABEL_1692;
    WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)a1);
  }
  v15 = *(unsigned __int8 *)(a1 + 46);
  if (v15 == 49
    || ((*(_BYTE *)(a1 + 45) & 0x40) != 0 || (v15 - 36) <= 4 && v15 != 38)
    && (*(_BYTE *)(a1 + 22) & 2) != 0)
  {
    goto LABEL_1283;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 40);
  if (*(_DWORD *)(*(_QWORD *)(v16 + 72) + 20))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
      goto LABEL_1283;
  }
  if ((*(_BYTE *)(a1 + 45) & 0x40) != 0)
  {
    v17 = *(WebCore::WillChangeData **)(v16 + 200);
    if (v17)
    {
      if ((WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned(v17, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) != 0)
      {
LABEL_1283:
        v18 = 1;
        goto LABEL_1284;
      }
      v15 = *(unsigned __int8 *)(a1 + 46);
    }
  }
  v18 = 1;
  if (v15 != 67 && v15 != 90)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 40);
    v20 = *(_BYTE *)(v19 + 462);
    v21 = *(_BYTE *)(v19 + 642) & 3;
    v22 = v20 | 0x19;
    if (v21 == 1)
      v20 |= 0x15u;
    if (v21 == 2)
      v23 = v22;
    else
      v23 = v20;
    if ((v23 & 3) == 0
      || (*(_BYTE *)(a1 + 20) & 1) == 0
      && !WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)a1)
      || (*(_QWORD *)(a1 + 96) & 0x1FLL) == 0x19
      || *(unsigned __int8 *)(a1 + 46) - 36 <= 4 && (*(_BYTE *)(a1 + 52) & 7) != 1)
    {
      v18 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 636) & 0xC0000) != 0
         && ((*(_BYTE *)(a1 + 20) & 1) != 0
          || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)a1))
         && (*(_QWORD *)(a1 + 96) & 0x1FLL) != 0x19
         && ((v767 = *(unsigned __int8 *)(a1 + 46), (v767 - 36) > 4) || v767 == 36)
         && v767 != 35
         && v767 != 63;
    }
  }
LABEL_1284:
  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
  {
    v716 = 0;
  }
  else
  {
    v716 = *(WebCore::Element **)(*(_QWORD *)(a1 + 24) + 8);
    if (v716 && (*((_WORD *)v716 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941BC3C4);
    }
  }
  v717 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 636) >> 18) & 3;
  if (!v717
    || (v867 = *(_BYTE *)(a1 + 96), (v867 & 0x1F) != 0xD) && (v867 & 0x1Eu) - 14 > 0xFFFFFFF5
    || v717 != 2 && (!v716 || WebCore::Element::isRelevantToUser(v716)))
  {
    v718 = *(_DWORD *)(a1 + 20);
LABEL_1289:
    if ((v718 & 0x80) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1744))(a1);
    if ((*(_BYTE *)(a1 + 52) & 7) == 1 && (*(_BYTE *)(a1 + 53) & 2) != 0)
    {
      ++*(_DWORD *)(a1 + 16);
      v815 = WebCore::RenderBox::clientLogicalBottom((WebCore::RenderBox *)a1);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 2032))(a1, v815);
      v816 = *(_DWORD *)(a1 + 16);
      if (!v816)
      {
        __break(0xC471u);
        JUMPOUT(0x1941BDF80);
      }
      *(_DWORD *)(a1 + 16) = v816 - 1;
    }
    if ((((*(_DWORD *)(a1 + 20) & 0x40) == 0) & ~v18) == 0)
    {
      {
        v719 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
      }
      else
      {
        WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
        unk_1ECE91358 = 0u;
        v719 = 1;
      }
      DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v719;
      v720 = *(_QWORD *)(a1 + 8);
      if (v720)
      {
        if (*(_QWORD *)(v720 + 8) && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
        {
          v721 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
          v722 = (~(v720 << 32) + v720) ^ ((unint64_t)(~(v720 << 32) + v720) >> 22);
          v723 = 9 * ((v722 + ~(v722 << 13)) ^ ((v722 + ~(v722 << 13)) >> 8));
          v724 = (v723 ^ (v723 >> 15)) + ~((v723 ^ (v723 >> 15)) << 27);
          v725 = v721 & ((v724 >> 31) ^ v724);
          for (j = 1; ; ++j)
          {
            v727 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v725);
            if (!v727)
              break;
            if (v727 != -1 && v727 == v720)
            {
              v729 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v725 + 8);
              if (v729)
              {
                v730 = *(_QWORD **)(v729 + 8);
                if (v730)
                {
                  while (!*(_QWORD *)(*v730 + 8))
                  {
                    v730 = (_QWORD *)v730[2];
                    if (!v730)
                      goto LABEL_1314;
                  }
LABEL_1309:
                  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1720))(a1);
                  while (1)
                  {
                    v730 = (_QWORD *)v730[2];
                    if (!v730)
                      break;
                    if (*(_QWORD *)(*v730 + 8))
                    {
                      ++*(_DWORD *)(v729 + 24);
                      goto LABEL_1309;
                    }
                  }
                  ++*(_DWORD *)(v729 + 24);
                }
              }
              break;
            }
            v725 = (v725 + j) & v721;
          }
        }
      }
    }
LABEL_1314:
    v731 = *(_QWORD *)(a1 + 192);
    v732 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
    if (!v731)
      v732 = 0;
    if (v732)
    {
      v744 = *(_DWORD *)(v731 + 36);
    }
    else
    {
      v733 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
      v734 = *(_QWORD *)a1;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      {
        v904 = *(_DWORD *)(a1 + 160);
        v905 = (*(uint64_t (**)(uint64_t))(v734 + 1016))(a1);
        if (__OFSUB__(v904, v905))
          v906 = (v904 >> 31) + 0x7FFFFFFF;
        else
          v906 = v904 - v905;
        v907 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
        if (__OFSUB__(v906, v907))
          v739 = (v906 >> 31) + 0x7FFFFFFF;
        else
          v739 = v906 - v907;
        v740 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
      }
      else
      {
        v735 = *(_DWORD *)(a1 + 164);
        v736 = (*(uint64_t (**)(uint64_t))(v734 + 1000))(a1);
        if (__OFSUB__(v735, v736))
          v737 = (v735 >> 31) + 0x7FFFFFFF;
        else
          v737 = v735 - v736;
        v738 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
        if (__OFSUB__(v737, v738))
          v739 = (v737 >> 31) + 0x7FFFFFFF;
        else
          v739 = v737 - v738;
        v740 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
      }
      v741 = v740 << 6;
      if (v740 < -33554432)
        v741 = 0x80000000;
      if (v740 > 0x1FFFFFF)
        v741 = 0x7FFFFFFF;
      v44 = __OFSUB__(v739, v741);
      v742 = v739 - v741;
      if (v44)
        v742 = (v739 >> 31) + 0x7FFFFFFF;
      v743 = v742 & ~(v742 >> 31);
      v44 = __OFADD__(v733, v743);
      v744 = v733 + v743;
      if (v44)
        v744 = (v733 >> 31) + 0x7FFFFFFF;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 1752))(a1, v744, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
    if ((*(_BYTE *)(a1 + 22) & 1) != 0)
    {
      v747 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      if ((v747 > 5 || ((1 << v747) & 0x2A) == 0)
        && (v748 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 1944)
                                          + 248)
                              + 528)) != 0
        && *v748)
      {
        WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v748 + 2), (_QWORD *)a1, (uint64_t)&v1055);
      }
      else
      {
        v749 = *(_QWORD *)(a1 + 144);
        if (v749)
        {
          WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
          v750 = *(WebCore::RenderLayerScrollableArea **)(v749 + 264);
          if (v750)
            WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v750);
        }
      }
    }
    v746 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
    *(_DWORD *)(a1 + 20) = v746;
    if ((*(_BYTE *)(a1 + 45) & 2) == 0)
    {
      *(_WORD *)(a1 + 69) &= ~1u;
      *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                       * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                          + 1944)
                                                                              + 248)
                                                                  + 472));
    }
    *(_DWORD *)(a1 + 20) = v746 & 0xFFDFFE07;
    if (v14)
    {
      WebCore::LocalFrameViewLayoutContext::popLayoutState(v11 + 336, v745);
      if (v10)
        --*(_DWORD *)(v11 + 492);
    }
    return;
  }
  v718 = *(_DWORD *)(a1 + 20);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                        + 1944)
                            + 248)
                + 479)
    || ((v18 | ((*(_DWORD *)(a1 + 20) & 0x40u) >> 6)) & 1) == 0)
  {
    goto LABEL_1289;
  }
LABEL_1692:
  if (v14)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState(v11 + 336, v13);
    if (v10)
      --*(_DWORD *)(v11 + 492);
  }
LABEL_3:
  LOBYTE(v1059) = 0;
  v1055 = (WebCore *)a1;
  v1056 = 0;
  v1057 = 0uLL;
  LOBYTE(v1058) = 0;
  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x200) == 0)
    goto LABEL_43;
  if ((v5 & 0x8000) == 0)
    goto LABEL_5;
  if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941BC484);
  }
  v26 = *(_QWORD *)(a1 + 144);
  if (v26 && (*(_BYTE *)(v26 + 25) & 8) != 0)
  {
LABEL_43:
    *(_WORD *)v1060 = 0;
    v1060[2] = 1;
  }
  else
  {
LABEL_5:
    v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 528)
                                                    + 8)
                                        + 288)
                            + 476);
    v1060[0] = v6 ^ 1;
    *(_WORD *)&v1060[1] = 256;
    if (!v6)
    {
      WebCore::RenderObject::containerForRepaint((_QWORD *)a1, (uint64_t)&v1062);
      v1056 = *((_QWORD *)&v1062 + 1);
      if (*((_QWORD *)&v1062 + 1))
      {
        v7 = *(_DWORD *)(*((_QWORD *)&v1062 + 1) + 16);
        if (!v7)
        {
          __break(0xC471u);
          JUMPOUT(0x1941BBE74);
        }
        *(_DWORD *)(*((_QWORD *)&v1062 + 1) + 16) = v7 - 1;
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v1055 + 464))(&v1062);
      v1057 = v1062;
      v1058 = v1063;
      v1059 = v1064;
    }
  }
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
    v27 = (int *)(a1 + 160);
  else
    v27 = (int *)(a1 + 164);
  v28 = *v27;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  v29 = *(unsigned __int16 *)(a1 + 69);
  *(_WORD *)(a1 + 69) = v29 & 0xFDFF;
  v30 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
  if (v30 >= 4)
    v31 = (_DWORD *)(a1 + 160);
  else
    v31 = (_DWORD *)(a1 + 164);
  v32 = (v29 >> 9) & 1;
  if (v28 == *v31)
    v33 = v32;
  else
    v33 = 1;
  v34 = *(_QWORD *)(a1 + 224);
  if (v34 && (v590 = *(_QWORD *)(v34 + 24)) != 0)
  {
    v591 = *(_QWORD *)(v590 + 8);
    v35 = (_DWORD *)a1;
    if (v591)
    {
      do
      {
        v35 = (_DWORD *)v591;
        v592 = *(_QWORD *)(v591 + 224);
        if (!v592)
          break;
        v946 = *(_QWORD *)(v592 + 24);
        if (!v946)
          break;
        v591 = *(_QWORD *)(v946 + 8);
      }
      while (v591);
      v30 = ((v35[31] >> 13) & 6) - 2;
    }
  }
  else
  {
    v35 = (_DWORD *)a1;
  }
  v36 = *(_QWORD *)v35;
  if (v30 < 4)
  {
    v874 = v35[41];
    v875 = (*(uint64_t (**)(_DWORD *))(v36 + 1000))(v35);
    if (__OFSUB__(v874, v875))
      v876 = (v874 >> 31) + 0x7FFFFFFF;
    else
      v876 = v874 - v875;
    v877 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 1008))(v35);
    if (__OFSUB__(v876, v877))
      v878 = (v876 >> 31) + 0x7FFFFFFF;
    else
      v878 = v876 - v877;
    v879 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 1360))(v35);
    v880 = v879 << 6;
    if (v879 < -33554432)
      v880 = 0x80000000;
    if (v879 > 0x1FFFFFF)
      v880 = 0x7FFFFFFF;
    v44 = __OFSUB__(v878, v880);
    v881 = v878 - v880;
    if (v44)
      v881 = (v878 >> 31) + 0x7FFFFFFF;
    v882 = v881 & ~(v881 >> 31);
    v883 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 928))(v35);
    v44 = __OFSUB__(v882, v883);
    v884 = v882 - v883;
    if (v44)
      v884 = 0x7FFFFFFF;
    v885 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 936))(v35);
    if (__OFSUB__(v884, v885))
      v50 = (v884 >> 31) + 0x7FFFFFFF;
    else
      v50 = v884 - v885;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v35 + 11) + 40) + 584) & 0x100) == 0)
      goto LABEL_75;
    v841 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 1360))(v35);
  }
  else
  {
    v37 = v35[40];
    v38 = (*(uint64_t (**)(_DWORD *))(v36 + 1016))(v35);
    if (__OFSUB__(v37, v38))
      v39 = (v37 >> 31) + 0x7FFFFFFF;
    else
      v39 = v37 - v38;
    v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 1024))(v35);
    if (__OFSUB__(v39, v40))
      v41 = (v39 >> 31) + 0x7FFFFFFF;
    else
      v41 = v39 - v40;
    v42 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 1352))(v35);
    v43 = v42 << 6;
    if (v42 < -33554432)
      v43 = 0x80000000;
    if (v42 > 0x1FFFFFF)
      v43 = 0x7FFFFFFF;
    v44 = __OFSUB__(v41, v43);
    v45 = v41 - v43;
    if (v44)
      v45 = (v41 >> 31) + 0x7FFFFFFF;
    v46 = v45 & ~(v45 >> 31);
    v47 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 944))(v35);
    v44 = __OFSUB__(v46, v47);
    v48 = v46 - v47;
    if (v44)
      v48 = 0x7FFFFFFF;
    v49 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 952))(v35);
    if (__OFSUB__(v48, v49))
      v50 = (v48 >> 31) + 0x7FFFFFFF;
    else
      v50 = v48 - v49;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v35 + 11) + 40) + 584) & 0x100) == 0)
    {
LABEL_75:
      v51 = 0;
      goto LABEL_76;
    }
    v841 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v35 + 1352))(v35);
  }
  v842 = v841 << 6;
  if (v841 > 0x1FFFFFF)
    v842 = 0x7FFFFFFF;
  if (v841 >= -33554432)
    v51 = v842;
  else
    v51 = 0x80000000;
LABEL_76:
  v44 = __OFSUB__(v50, v51);
  v52 = v50 - v51;
  if (v44)
    v53 = (v50 >> 31) + 0x7FFFFFFF;
  else
    v53 = v52;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1928))(a1);
  if ((v33 & 1) != 0)
  {
LABEL_80:
    v1061 = 1;
    goto LABEL_81;
  }
  v249 = *(_QWORD *)(a1 + 224);
  k = (_DWORD *)a1;
  if (v249)
  {
    v649 = *(_QWORD *)(v249 + 24);
    k = (_DWORD *)a1;
    if (v649)
    {
      v650 = *(_QWORD *)(v649 + 8);
      for (k = (_DWORD *)a1; v650; v650 = *(_QWORD *)(v652 + 8))
      {
        k = (_DWORD *)v650;
        v651 = *(_QWORD *)(v650 + 224);
        if (!v651)
          break;
        v652 = *(_QWORD *)(v651 + 24);
        if (!v652)
          break;
      }
    }
  }
  v251 = v53 & ~(v53 >> 31);
  v252 = *(_QWORD *)k;
  if (((k[31] >> 13) & 6u) - 2 < 4)
  {
    v911 = k[41];
    v912 = (*(uint64_t (**)(_DWORD *))(v252 + 1000))(k);
    if (__OFSUB__(v911, v912))
      v913 = (v911 >> 31) + 0x7FFFFFFF;
    else
      v913 = v911 - v912;
    v914 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 1008))(k);
    if (__OFSUB__(v913, v914))
      v915 = (v913 >> 31) + 0x7FFFFFFF;
    else
      v915 = v913 - v914;
    v916 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 1360))(k);
    v917 = v916 << 6;
    if (v916 < -33554432)
      v917 = 0x80000000;
    if (v916 > 0x1FFFFFF)
      v917 = 0x7FFFFFFF;
    v44 = __OFSUB__(v915, v917);
    v918 = v915 - v917;
    if (v44)
      v918 = (v915 >> 31) + 0x7FFFFFFF;
    v919 = v918 & ~(v918 >> 31);
    v920 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 928))(k);
    v44 = __OFSUB__(v919, v920);
    v921 = v919 - v920;
    if (v44)
      v921 = 0x7FFFFFFF;
    v922 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 936))(k);
    if (__OFSUB__(v921, v922))
      v265 = (v921 >> 31) + 0x7FFFFFFF;
    else
      v265 = v921 - v922;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)k + 11) + 40) + 584) & 0x100) == 0)
      goto LABEL_406;
    v864 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 1360))(k);
  }
  else
  {
    v253 = k[40];
    v254 = (*(uint64_t (**)(_DWORD *))(v252 + 1016))(k);
    if (__OFSUB__(v253, v254))
      v255 = (v253 >> 31) + 0x7FFFFFFF;
    else
      v255 = v253 - v254;
    v256 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 1024))(k);
    if (__OFSUB__(v255, v256))
      v257 = (v255 >> 31) + 0x7FFFFFFF;
    else
      v257 = v255 - v256;
    v258 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 1352))(k);
    v259 = v258 << 6;
    if (v258 < -33554432)
      v259 = 0x80000000;
    if (v258 > 0x1FFFFFF)
      v259 = 0x7FFFFFFF;
    v44 = __OFSUB__(v257, v259);
    v260 = v257 - v259;
    if (v44)
      v260 = (v257 >> 31) + 0x7FFFFFFF;
    v261 = v260 & ~(v260 >> 31);
    v262 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 944))(k);
    v44 = __OFSUB__(v261, v262);
    v263 = v261 - v262;
    if (v44)
      v263 = 0x7FFFFFFF;
    v264 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 952))(k);
    if (__OFSUB__(v263, v264))
      v265 = (v263 >> 31) + 0x7FFFFFFF;
    else
      v265 = v263 - v264;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)k + 11) + 40) + 584) & 0x100) == 0)
    {
LABEL_406:
      v266 = 0;
      goto LABEL_407;
    }
    v864 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)k + 1352))(k);
  }
  v865 = v864 << 6;
  if (v864 > 0x1FFFFFF)
    v865 = 0x7FFFFFFF;
  if (v864 >= -33554432)
    v266 = v865;
  else
    v266 = 0x80000000;
LABEL_407:
  v44 = __OFSUB__(v265, v266);
  v267 = v265 - v266;
  if (v44)
    v267 = (v265 >> 31) + 0x7FFFFFFF;
  if (v251 != (v267 & ~(v267 >> 31)))
    goto LABEL_80;
LABEL_81:
  v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v56 = *(unsigned int *)(v55 + 508);
  if ((_DWORD)v56)
  {
    v245 = *(_QWORD *)(*(_QWORD *)(v55 + 496) + 8 * v56 - 8);
    if (v245)
    {
      if (*(_BYTE *)(v245 + 136))
      {
        v246 = *(WTF **)(v245 + 128);
        if (v246)
        {
          v247 = (*(_DWORD *)v246)++;
          if (v247)
            *(_DWORD *)v246 = v247;
          else
            WTF::fastFree(v246, v54);
        }
        v1061 = 1;
      }
    }
  }
  v57 = *(_QWORD *)(a1 + 216);
  if (v57)
  {
    *(_BYTE *)(v57 + 40) = (*(_DWORD *)(a1 + 20) & 0x1000) == 0;
    v1065[0] = 0;
    if ((*(_BYTE *)(a1 + 22) & 4) == 0)
    {
      for (m = *(uint64_t ***)(v57 + 8); m; m = (uint64_t **)m[2])
      {
        if ((*((_BYTE *)*m + 36) & 8) == 0)
        {
          v692 = **m;
          if (v692)
          {
            v694 = *(_QWORD *)(v692 + 8);
            v1051 = v694;
            if (v694)
              ++*(_DWORD *)(v694 + 16);
          }
          else
          {
            v1051 = 0;
          }
          WTF::HashTable<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>>::add((uint64_t)&v1062, v1065, (uint64_t *)&v1051);
          if (v1051)
          {
            v693 = *(_DWORD *)(v1051 + 16);
            if (!v693)
            {
              __break(0xC471u);
              JUMPOUT(0x1941BCCDCLL);
            }
            *(_DWORD *)(v1051 + 16) = v693 - 1;
          }
        }
      }
    }
  }
  else
  {
    v1065[0] = 0;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1504))(a1) & 1) == 0
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
  {
    v235 = *(unsigned __int8 *)(a1 + 46);
    if (v235 != 49 && v235 != 37)
    {
      v236 = *(_DWORD *)(a1 + 20);
      if ((v236 & 0x800) == 0 && (v236 & 0x1800000) != 0x1000000)
      {
        v237 = *(uint64_t **)(a1 + 216);
        if (v237)
          WebCore::FloatingObjects::clear(v237, v58);
        v238 = *(_QWORD *)(a1 + 32);
        if (v238)
        {
          v239 = *(uint64_t **)(v238 + 8);
          if (v239)
          {
            if ((*((_BYTE *)v239 + 52) & 7) == 1)
            {
              ++*((_DWORD *)v239 + 4);
              v296 = *(unsigned int *)(a1 + 40);
              if (v296 | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32)
                && (v297 = *(_QWORD **)((v296 | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32)) + 8)) != 0)
              {
                v298 = 0;
                while ((*((_BYTE *)v297 + 52) & 7) != 1
                     || (*(unsigned int (**)(_QWORD *))(*v297 + 1504))(v297))
                {
                  if ((*((_BYTE *)v297 + 21) & 8) != 0)
                    v298 = 1;
                  v299 = *((unsigned int *)v297 + 10);
                  if (!(v299 | ((unint64_t)*((unsigned __int8 *)v297 + 44) << 32)))
                    goto LABEL_588;
                  v300 = 0;
                  v297 = *(_QWORD **)((v299 | ((unint64_t)*((unsigned __int8 *)v297 + 44) << 32)) + 8);
                  if (!v297)
                    goto LABEL_589;
                }
                v300 = (int *)v297;
              }
              else
              {
                v298 = 0;
LABEL_588:
                v300 = 0;
              }
LABEL_589:
              v351 = (unsigned int *)(a1 + 152);
              if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
                v351 = (unsigned int *)(a1 + 156);
              v352 = *v351;
              if (v298 || !v300)
                goto LABEL_1057;
              if (!(*(unsigned int (**)(int *))(*(_QWORD *)v300 + 1240))(v300))
                goto LABEL_594;
              v616 = v239[27];
              if (v616)
              {
                v761 = *(_QWORD **)(v616 + 8);
                if (v761)
                {
                  LODWORD(v616) = 0;
                  do
                  {
                    v762 = (_DWORD *)*v761;
                    if ((*(_BYTE *)(*v761 + 36) & 0x10) != 0 && (*(_BYTE *)(*v761 + 36) & 3) != 0)
                    {
                      if ((*((_BYTE *)v239 + 21) & 0x10) != 0)
                      {
                        v763 = v762[2];
                        v764 = v762[4];
                      }
                      else
                      {
                        v763 = v762[3];
                        v764 = v762[5];
                      }
                      v44 = __OFADD__(v763, v764);
                      v765 = v763 + v764;
                      v766 = (v763 >> 31) + 0x7FFFFFFF;
                      if (v44)
                        v765 = v766;
                      if ((int)v616 <= v765)
                        LODWORD(v616) = v765;
                    }
                    v761 = (_QWORD *)v761[2];
                  }
                  while (v761);
                }
                else
                {
                  LODWORD(v616) = 0;
                }
              }
              if ((int)v616 > (int)v352)
              {
LABEL_1057:
                v617 = *v239;
                if ((*((_BYTE *)v239 + 21) & 0x10) != 0)
                {
                  v618 = (*(uint64_t (**)(uint64_t *))(v617 + 1000))(v239);
                  v619 = (*(uint64_t (**)(uint64_t *))(*v239 + 928))(v239);
                }
                else
                {
                  v618 = (*(uint64_t (**)(uint64_t *))(v617 + 1016))(v239);
                  v619 = (*(uint64_t (**)(uint64_t *))(*v239 + 944))(v239);
                }
                v620 = v618 + v619;
                if (__OFADD__(v618, v619))
                  v620 = (v618 >> 31) + 0x7FFFFFFF;
                WebCore::RenderBlockFlow::addIntrudingFloats(a1, v239, v239, v620, v352);
              }
              if (!v300)
              {
LABEL_1064:
                if ((*(_BYTE *)(a1 + 22) & 4) == 0)
                {
                  if (v1065[0])
                  {
                    v854 = *(_DWORD *)(v1065[0] - 12);
                    if (v854)
                    {
                      v855 = *(uint64_t **)(a1 + 216);
                      v856 = *v855;
                      if (*v855)
                        LODWORD(v856) = *(_DWORD *)(v856 - 12);
                      if (v856 >= v854 && (v861 = (_QWORD *)v855[1]) != 0)
                      {
                        while (v1065[0] && *(_DWORD *)(v1065[0] - 12))
                        {
                          WTF::HashSet<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>(v1065, *(_QWORD *)(*(_QWORD *)*v861 + 8));
                          v861 = (_QWORD *)v861[2];
                          if (!v861)
                          {
                            if (v1065[0] && *(_DWORD *)(v1065[0] - 12))
                              goto LABEL_1638;
                            break;
                          }
                        }
                      }
                      else
                      {
LABEL_1638:
                        WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout((WebCore::RenderBlockFlow *)a1, 0, 1);
                      }
                    }
                  }
                }
                v621 = *((_DWORD *)v239 + 4);
                if (!v621)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1941BC4E4);
                }
                *((_DWORD *)v239 + 4) = v621 - 1;
                goto LABEL_369;
              }
LABEL_594:
              v353 = v300 + 38;
              if (((v300[31] >> 13) & 6) - 2 >= 4)
                v353 = v300 + 39;
              v354 = *v353;
              v44 = __OFSUB__((_DWORD)v352, v354);
              v355 = v352 - v354;
              if (v44)
                v356 = (v352 >> 31) + 0x7FFFFFFF;
              else
                v356 = v355;
              v357 = *((_QWORD *)v300 + 27);
              if (v357)
              {
                v752 = *(_QWORD **)(v357 + 8);
                if (v752)
                {
                  LODWORD(v357) = 0;
                  do
                  {
                    v753 = (_DWORD *)*v752;
                    if ((*(_BYTE *)(*v752 + 36) & 0x10) != 0 && (*(_BYTE *)(*v752 + 36) & 3) != 0)
                    {
                      if ((*((_BYTE *)v300 + 21) & 0x10) != 0)
                      {
                        v754 = v753[2];
                        v755 = v753[4];
                      }
                      else
                      {
                        v754 = v753[3];
                        v755 = v753[5];
                      }
                      v44 = __OFADD__(v754, v755);
                      v756 = v754 + v755;
                      v757 = (v754 >> 31) + 0x7FFFFFFF;
                      if (v44)
                        v756 = v757;
                      if ((int)v357 <= v756)
                        LODWORD(v357) = v756;
                    }
                    v752 = (_QWORD *)v752[2];
                  }
                  while (v752);
                }
                else
                {
                  LODWORD(v357) = 0;
                }
              }
              if ((int)v357 > (int)v356)
                WebCore::RenderBlockFlow::addIntrudingFloats(a1, v300, v239, 0, v356);
              goto LABEL_1064;
            }
          }
        }
LABEL_369:
        v240 = v1065[0];
        if (v1065[0])
        {
          v241 = *(unsigned int *)(v1065[0] - 4);
          if ((_DWORD)v241)
          {
            v242 = (uint64_t *)v1065[0];
            do
            {
              v243 = *v242;
              if ((unint64_t)(*v242 + 1) >= 2)
              {
                v244 = *(_DWORD *)(v243 + 16);
                if (!v244)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1941BDA10);
                }
                *(_DWORD *)(v243 + 16) = v244 - 1;
              }
              ++v242;
              --v241;
            }
            while (v241);
          }
          WTF::fastFree((WTF *)(v240 - 16), v58);
        }
        goto LABEL_88;
      }
    }
  }
  v59 = *(uint64_t **)(a1 + 216);
  if (v59)
    WebCore::FloatingObjects::clear(v59, v58);
  if (v1065[0])
  {
    if (*(_DWORD *)(v1065[0] - 12))
      WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout((WebCore::RenderBlockFlow *)a1, 0, 1);
    goto LABEL_369;
  }
LABEL_88:
  v60 = (unsigned int *)(a1 + 160);
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
    v60 = (unsigned int *)(a1 + 164);
  v61 = *v60;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1) & 1) != 0
    || (v233 = *(_QWORD *)(a1 + 32)) != 0
    && (v234 = *(_BYTE **)(v233 + 8)) != 0
    && (v234[45] & 0x40) != 0
    && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v234 + 1704))(v234, a1))
  {
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v63 = (_DWORD *)(a1 + 160);
    else
      v63 = (_DWORD *)(a1 + 164);
    *v63 = 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 7) == 1 && (*(_BYTE *)(a1 + 53) & 2) != 0)
  {
    v775 = *(_QWORD *)(a1 + 224);
    if (!v775 || (v993 = *(_QWORD *)(v775 + 24)) == 0 || (v594 = *(_QWORD *)(v993 + 8)) == 0)
    {
      ++*(_DWORD *)(a1 + 16);
      v776 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2040))(a1);
      v777 = *(_DWORD *)(a1 + 16);
      if (!v777)
      {
        __break(0xC471u);
LABEL_1866:
        __break(1u);
        goto LABEL_1867;
      }
      v65 = (*(unsigned __int8 *)(a1 + 328) >> 3) & 1;
      if (v776)
        a3 = 64;
      else
        a3 = 0;
      *(_DWORD *)(a1 + 16) = v777 - 1;
      goto LABEL_98;
    }
    goto LABEL_1011;
  }
  v64 = *(_QWORD *)(a1 + 224);
  if (v64)
  {
    v593 = *(_QWORD *)(v64 + 24);
    if (v593)
    {
      v594 = *(_QWORD *)(v593 + 8);
      if (v594)
      {
LABEL_1011:
        if ((unint64_t)WebCore::RenderBlock::availableLogicalHeightForPercentageComputation((WebCore::RenderBlock *)a1, v62) >> 32|| (v595 = (_BYTE *)WebCore::LocalFrameView::pagination(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)+ 248)), v596 = *v595, *v595))
        {
          if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
            v597 = (unsigned int *)(a1 + 152);
          else
            v597 = (unsigned int *)(a1 + 156);
          (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1312))(&v1062, a1, 0, *v597);
          v598 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalHeight((WebCore::RenderBoxModelObject *)a1);
          v599 = v1062 - v598;
          if (__OFSUB__((_DWORD)v1062, v598))
            v599 = (v1062 >> 31) + 0x7FFFFFFF;
          v600 = 1360;
          if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
            v600 = 1352;
          v601 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v600))(a1);
          v602 = v601 << 6;
          if (v601 < -33554432)
            v602 = 0x80000000;
          if (v601 > 0x1FFFFFF)
            v602 = 0x7FFFFFFF;
          v44 = __OFSUB__(v599, v602);
          v603 = v599 - v602;
          if (v44)
            v603 = (v599 >> 31) + 0x7FFFFFFF;
          v596 = v603 & ~(v603 >> 31);
          if (*(_DWORD *)(v594 + 360) != v596)
            v1061 = 1;
        }
        v65 = 0;
        *(_DWORD *)(v594 + 360) = v596;
        goto LABEL_98;
      }
    }
  }
  v65 = 0;
LABEL_98:
  v66 = 0;
  v1054 = 0;
  v1053 = 0;
  v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v68 = *(unsigned int *)(v67 + 508);
  if ((_DWORD)v68)
  {
    v248 = *(unsigned __int8 **)(*(_QWORD *)(v67 + 496) + 8 * v68 - 8);
    if (v248)
      v66 = (*v248 >> 1) & 1;
    else
      v66 = 0;
  }
  v1040 = 0;
  v69 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
  v1048 = (int *)(a1 + 168);
  v1042 = (WebCore::LegacyLineLayout **)(a1 + 232);
  v1050 = (_DWORD *)(a1 + 164);
  v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
  v1041 = (v71 >> 31) ^ v71;
  v72 = &unk_1ECE91000;
  v1046 = a3;
  v1049 = v66;
  while (1)
  {
    v73 = *(_DWORD *)(a1 + 20);
    if ((v73 & 0x20000) != 0)
    {
      v147 = a1;
      if ((*(_BYTE *)(a1 + 45) & 2) != 0)
        v147 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v148 = *(_QWORD *)(v147 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 32) + 40) + 20))
        goto LABEL_203;
      v339 = *(_QWORD **)(v148 + 40);
      if (v339[41] || v339[38] || v339[39] || v339[40] || (v73 & 0x100000) != 0)
        goto LABEL_203;
    }
    if ((v73 & 0x4000) == 0)
      goto LABEL_102;
    v658 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
    v659 = v658 & v1041;
    for (n = 1; ; v659 = (v661 + n++) & v658)
    {
      v661 = v659;
      v662 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v659);
      if (v662 != -1 && *(_QWORD *)(v662 + 8) == a1)
        break;
    }
    if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v661 + 8))
    {
LABEL_203:
      v75 = 1;
    }
    else
    {
LABEL_102:
      v74 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
      v908 = 2;
      switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
      {
        case 1:
        case 2:
          goto LABEL_104;
        case 3:
        case 5:
          v74 = 3;
          goto LABEL_104;
        case 4:
          goto LABEL_105;
        default:
          v74 = 0;
LABEL_104:
          v908 = v74;
LABEL_105:
          v75 = (v908 & 0xFFFFFFFD) == 1;
          break;
      }
    }
    *(_QWORD *)&v1062 = *(_QWORD *)(a1 + 152);
    v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                    + 248);
    v1043 = (WebCore::LocalFrameViewLayoutContext *)(v76 + 336);
    v77 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v76 + 336, (WebCore::RenderObject *)a1, (int *)&v1062, a3, v65);
    v1044 = v75;
    if (v75 && v77)
      ++*(_DWORD *)(v76 + 492);
    v1047 = v77;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v869 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
      if (v869)
        WebCore::RenderFragmentedFlow::logicalWidthChangedInFragmentsForBlock(v869, (const WebCore::RenderBlock *)a1, &v1061);
    }
    v79 = (int *)(a1 + 168);
    if (v66)
      v1040 = WebCore::RenderBlockFlow::pageLogicalHeightForOffset(a1);
    if (*(_BYTE *)(a1 + 46) != 37)
    {
      v80 = *(int **)(a1 + 224);
      if (v80)
      {
        v557 = 3;
        switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
        {
          case 1:
            v967 = *(_DWORD *)(a1 + 176);
            v558 = v967 & ~(v967 >> 31);
LABEL_1973:
            if (v967 == 0x80000000)
              v561 = 0x7FFFFFFF;
            else
              v561 = -v967 & ~(-v967 >> 31);
            v79 = (int *)(a1 + 168);
LABEL_1977:
            v563 = *v79 & ~(*v79 >> 31);
LABEL_1978:
            v564 = 0;
            goto LABEL_962;
          case 2:
          case 4:
            goto LABEL_954;
          case 3:
          case 5:
            v557 = 1;
            goto LABEL_954;
          default:
            v557 = 0;
LABEL_954:
            v558 = v1048[v557] & ~(v1048[v557] >> 31);
            v559 = 3;
            switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
            {
              case 1:
                v967 = *(_DWORD *)(a1 + 176);
                goto LABEL_1973;
              case 2:
              case 4:
                break;
              case 3:
              case 5:
                v559 = 1;
                break;
              default:
                v559 = 0;
                break;
            }
            v560 = v1048[v559];
            if (v560 == 0x80000000)
              v561 = 0x7FFFFFFF;
            else
              v561 = -v560 & ~(-v560 >> 31);
            v562 = 3;
            switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
            {
              case 1:
                goto LABEL_1977;
              case 2:
              case 4:
                v562 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v562 = 2;
                break;
            }
            v563 = v1048[v562] & ~(v1048[v562] >> 31);
            v564 = 3;
            switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
            {
              case 1:
                goto LABEL_1978;
              case 2:
              case 4:
                v564 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v564 = 2;
                break;
            }
LABEL_962:
            v565 = v79[v564];
            *v80 = v558;
            v80[1] = v561;
            if (v565 == 0x80000000)
              v566 = 0x7FFFFFFF;
            else
              v566 = -v565 & ~(-v565 >> 31);
            v80[2] = v563;
            v80[3] = v566;
            break;
        }
      }
      v81 = *(_QWORD *)(a1 + 88);
      v82 = *(_QWORD *)(v81 + 24);
      v83 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
      v84 = 3;
      switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
      {
        case 1:
          v85 = *(_WORD *)(a1 + 69) & 0xFF7F | (*(unsigned __int8 *)(v82 + 61) << 7);
          *(_WORD *)(a1 + 69) = v85;
          v86 = *(_QWORD *)(v81 + 24);
LABEL_1836:
          v87 = 0;
          goto LABEL_118;
        case 2:
        case 4:
          goto LABEL_116;
        case 3:
        case 5:
          v84 = 1;
          goto LABEL_116;
        default:
          v84 = 0;
LABEL_116:
          v85 = *(_WORD *)(a1 + 69) & 0xFF7F | (*(unsigned __int8 *)(v82 + 8 * v84 + 45) << 7);
          *(_WORD *)(a1 + 69) = v85;
          v86 = *(_QWORD *)(v81 + 24);
          v858 = v83;
          v87 = 3;
          switch(v858)
          {
            case 0:
              goto LABEL_1836;
            case 1:
            case 3:
              v87 = 1;
              break;
            case 2:
            case 4:
              break;
            default:
              v87 = 2;
              break;
          }
LABEL_118:
          *(_WORD *)(a1 + 69) = v85 & 0xFEFF | (*(unsigned __int8 *)(v86 + 8 * v87 + 45) << 8);
          if ((v85 & 0x400) != 0)
          {
            v863 = (_DWORD *)WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, a1);
            if (v863)
              *v863 = 0;
          }
          break;
      }
    }
    v88 = *(unsigned int *)(a1 + 64);
    if (!(v88 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
      || !*(_QWORD *)((v88 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8))
    {
      if ((*(_BYTE *)(a1 + 45) & 1) == 0)
        goto LABEL_160;
      if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      {
        v637 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 96);
        if ((v637 & 0x1F) != 1 && (v637 & 0x1F) != 14)
        {
LABEL_160:
          *(_DWORD *)(a1 + 20) |= 0x40000u;
          goto LABEL_121;
        }
      }
      else
      {
        v637 = *(_QWORD *)(a1 + 96);
        if ((v637 & 0x1F) != 1 && (v637 & 0x1F) != 0xE)
          goto LABEL_160;
      }
      if ((*(_BYTE *)(a1 + 45) & 0x40) == 0)
        goto LABEL_160;
      if ((v637 & 0xF80000000000) != 0)
        goto LABEL_160;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) != 0)
        goto LABEL_160;
      v638 = *(unsigned __int8 *)(a1 + 46);
      if (v638 == 20)
        goto LABEL_160;
      if ((*(_BYTE *)(a1 + 52) & 7) == 1)
      {
        if ((*(_BYTE *)(a1 + 53) & 2) != 0 || v638 == 26 || v638 == 49)
          goto LABEL_160;
      }
      else if (v638 == 49 || v638 == 26)
      {
        goto LABEL_160;
      }
    }
LABEL_121:
    v89 = (uint64_t *)v72[99];
    if (v89)
    {
      ++*((_DWORD *)v89 + 2);
      v90 = *(_QWORD *)(a1 + 8);
      if (v90)
      {
        if (*(_QWORD *)(v90 + 8))
        {
          v91 = *v89;
          if (v91)
          {
            v92 = *(_DWORD *)(v91 - 8);
            v93 = (~(v90 << 32) + v90) ^ ((unint64_t)(~(v90 << 32) + v90) >> 22);
            v94 = 9 * ((v93 + ~(v93 << 13)) ^ ((v93 + ~(v93 << 13)) >> 8));
            v95 = (v94 ^ (v94 >> 15)) + ~((v94 ^ (v94 >> 15)) << 27);
            v96 = v92 & ((v95 >> 31) ^ v95);
            for (ii = 1; ; ++ii)
            {
              v98 = *(_QWORD *)(v91 + 16 * v96);
              if (!v98)
                break;
              if (v98 != -1 && v98 == v90)
              {
                v341 = *(_QWORD *)(v91 + 16 * v96 + 8);
                if (v341)
                {
                  v159 = *(_QWORD **)(v341 + 8);
                  if (v159)
                  {
                    while (1)
                    {
                      v154 = *(_DWORD **)(*v159 + 8);
                      if (v154)
                        break;
                      v159 = (_QWORD *)v159[2];
                      if (!v159)
                        goto LABEL_142;
                    }
LABEL_205:
                    v149 = (WebCore::RenderObject *)v154;
                    do
                    {
                      v149 = WebCore::RenderObject::containingBlock(v149);
                      if (!v149 || v149 == (WebCore::RenderObject *)a1)
                      {
                        ++v154[4];
                        v150 = (_DWORD *)a1;
                        if (v154 == (_DWORD *)a1)
                          goto LABEL_217;
                        while (1)
                        {
                          v151 = v154[5];
                          if ((v151 & 0x20) != 0)
                            break;
                          v154[5] = v151 | 0x20;
                          if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v154 + 288))(v154) & 1) != 0
                            || ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v154 + 11) + 32) + 148) >> 5) & 3u) - 1 <= 1)
                          {
                            WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v154, 1, 1);
                          }
                          v152 = WebCore::RenderObject::container((WebCore::RenderObject *)v154);
                          if (!v152)
                          {
                            v758 = v154[4];
                            v158 = v154 + 4;
                            v155 = v758;
                            if (!v758)
                            {
LABEL_1383:
                              __break(0xC471u);
                              JUMPOUT(0x1941BC570);
                            }
                            goto LABEL_219;
                          }
                          ++*(_DWORD *)(v152 + 16);
                          v153 = v154[4];
                          if (!v153)
                            goto LABEL_1383;
                          v154[4] = v153 - 1;
                          v154 = (_DWORD *)v152;
                          if (v152 == a1)
                          {
                            v150 = (_DWORD *)a1;
                            goto LABEL_217;
                          }
                        }
                        v150 = v154;
LABEL_217:
                        v157 = v150[4];
                        v156 = v150 + 4;
                        v155 = v157;
                        if (!v157)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1941BC3ECLL);
                        }
                        v158 = v156;
LABEL_219:
                        *v158 = v155 - 1;
                        break;
                      }
                    }
                    while ((*((_DWORD *)v149 + 5) & 0x1800000) != 0x1000000);
                    while (1)
                    {
                      v159 = (_QWORD *)v159[2];
                      if (!v159)
                        break;
                      v154 = *(_DWORD **)(*v159 + 8);
                      if (v154)
                      {
                        ++*(_DWORD *)(v341 + 24);
                        goto LABEL_205;
                      }
                    }
                    ++*(_DWORD *)(v341 + 24);
                  }
                }
                break;
              }
              v96 = (v96 + ii) & v92;
            }
          }
        }
      }
    }
LABEL_142:
    v1045 = v65;
    if (!(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
      || !*(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8))
    {
      v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
      v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
      v121 = v119 + v120;
      if (__OFADD__(v119, v120))
        v121 = (v119 >> 31) + 0x7FFFFFFF;
      v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
      v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
      v124 = v122 + v123;
      if (__OFADD__(v122, v123))
        v124 = (v122 >> 31) + 0x7FFFFFFF;
      v125 = v121 + v124;
      if (__OFADD__(v121, v124))
        v125 = (v121 >> 31) + 0x7FFFFFFF;
      v126 = 1360;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v126 = 1352;
      v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v126))(a1);
      v128 = v127 << 6;
      if (v127 < -33554432)
        v128 = 0x80000000;
      if (v127 > 0x1FFFFFF)
        v128 = 0x7FFFFFFF;
      v129 = v125 + v128;
      if (__OFADD__(v125, v128))
        v129 = (v125 >> 31) + 0x7FFFFFFF;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1712))(a1))
      {
        LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)a1, v130);
        v569 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, v568) * 64.0);
        if (v569 >= 2147500000.0 || v569 <= -2147500000.0)
        {
          if (v569 >= 2147500000.0)
          {
            v570 = 0x7FFFFFFF;
          }
          else if (v569 <= -2147500000.0)
          {
            v570 = 0x80000000;
          }
          else
          {
            v570 = (int)v569;
          }
          v79 = (int *)(a1 + 168);
        }
        else
        {
          v570 = (int)v569;
        }
        v44 = __OFADD__(v129, v570);
        v571 = v129 + v570;
        if (v44)
          v129 = (v129 >> 31) + 0x7FFFFFFF;
        else
          v129 = v571;
      }
      v131 = 164;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v131 = 160;
      *(_DWORD *)(a1 + v131) = v129;
      v1054 = 0;
      v1053 = 0;
      goto LABEL_179;
    }
    v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
    v106 = *(unsigned int *)(v105 + 508);
    if ((_DWORD)v106)
      v107 = *(_QWORD *)(*(_QWORD *)(v105 + 496) + 8 * v106 - 8);
    else
      v107 = 0;
    v108 = v1061;
    if ((*(_DWORD *)(a1 + 20) & 0x40000) != 0)
    {
      if (!v107)
        goto LABEL_151;
      v109 = v61;
      if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) >> 2) & 3) != 0)
      {
        v1038 = v1061;
        v818 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) >> 2;
        WebCore::RenderLayoutState::resetTextBoxTrim(v107, v78);
        if ((v818 & 2) != 0)
        {
          WebCore::RenderLayoutState::addTextBoxTrimEnd((WebCore::RenderLayoutState *)v107, (const WebCore::RenderBlockFlow *)a1);
          InlineFormattingContextRoot = WebCore::firstInlineFormattingContextRoot(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32), v828);
          if (InlineFormattingContextRoot)
            v830 = InlineFormattingContextRoot == a1;
          else
            v830 = 1;
          v831 = !v830;
          v79 = (int *)(a1 + 168);
          if ((v818 & 1) == 0 || (v831 & 1) != 0)
            goto LABEL_151;
        }
        else
        {
          v79 = (int *)(a1 + 168);
          if ((v818 & 1) == 0)
            goto LABEL_151;
        }
        if (!*(_BYTE *)(v107 + 160))
        {
          *(_QWORD *)(v107 + 152) = 0;
          *(_BYTE *)(v107 + 160) = 1;
        }
        *(_BYTE *)(v107 + 144) = 1;
        v79 = (int *)(a1 + 168);
        v108 = v1038;
      }
      else
      {
        v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
        v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
        v44 = __OFADD__(v110, v111);
        v113 = v110 + v111;
        v61 = v109;
        if ((v44 || v113) && *(_BYTE *)(v107 + 160))
        {
          v347 = *(WTF **)(v107 + 152);
          *(_QWORD *)(v107 + 152) = 0;
          if (v347)
          {
            if (*(_DWORD *)v347 == 1)
              WTF::fastFree(v347, v112);
            else
              --*(_DWORD *)v347;
          }
          *(_BYTE *)(v107 + 160) = 0;
        }
      }
LABEL_151:
      v114 = *(unsigned __int16 *)(a1 + 69);
      if (!(v114 >> 13))
      {
        if ((*(_BYTE *)(a1 + 52) & 7) == 1
          && (*(_BYTE *)(a1 + 53) & 8) != 0
          && ((v301 = *(unsigned __int8 *)(a1 + 46), v301 != 90) ? (v302 = v301 == 67) : (v302 = 1), !v302))
        {
          v115 = 0x4000;
        }
        else
        {
          v115 = 0x2000;
        }
        LOWORD(v114) = v115 | v114;
        *(_WORD *)(a1 + 69) = v114;
      }
      if ((v114 & 0xE000) == 0x2000)
      {
        WebCore::RenderBlockFlow::layoutModernLines((WebCore::RenderBlockFlow *)a1, v108, (WebCore::LayoutUnit *)((char *)&v1054 + 4), (WebCore::LayoutUnit *)&v1054);
        goto LABEL_157;
      }
      v405 = v61;
      if (*(_DWORD *)(a1 + 240) != 2 || (v408 = *v1042) == 0)
      {
        v406 = (WebCore::LegacyLineLayout *)WTF::fastMalloc((WTF *)0x18);
        v408 = v406;
        *((_QWORD *)v406 + 1) = 0;
        *((_QWORD *)v406 + 2) = 0;
        *(_QWORD *)v406 = a1;
        v409 = *(unsigned int *)(a1 + 240);
        if ((_DWORD)v409 != -1)
        {
          if ((_DWORD)v409 == 2)
          {
            v410 = *v1042;
            *v1042 = v406;
            if (v410)
            {
              v411 = (_QWORD *)*((_QWORD *)v410 + 1);
              if (v411)
              {
                do
                {
                  v1001 = (_QWORD *)v411[12];
                  v1002 = (_QWORD *)v411[9];
                  if (v1002)
                  {
                    do
                    {
                      v1039 = (_QWORD *)v1002[1];
                      (*(void (**)(_QWORD *))(*v1002 + 16))(v1002);
                      v1002 = v1039;
                    }
                    while (v1039);
                  }
                  (*(void (**)(_QWORD *))(*v411 + 216))(v411);
                  (*(void (**)(_QWORD *))(*v411 + 8))(v411);
                  v411 = v1001;
                }
                while (v1001);
              }
              *((_QWORD *)v410 + 1) = 0;
              *((_QWORD *)v410 + 2) = 0;
              WTF::fastFree(v410, v407);
              v408 = 0;
              if (*(_DWORD *)(a1 + 240) == 2)
                v408 = *v1042;
            }
            goto LABEL_1052;
          }
          ((void (*)(__int128 *, WebCore::LegacyLineLayout **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v409])(&v1062, v1042);
        }
        *(_QWORD *)(a1 + 232) = v408;
        *(_DWORD *)(a1 + 240) = 2;
      }
LABEL_1052:
      WebCore::LegacyLineLayout::layoutLineBoxes(v408);
      *(_BYTE *)(a1 + 208) = 0;
      *(_BYTE *)(a1 + 212) = 0;
      v61 = v405;
LABEL_157:
      v117 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                   + 1944)
                       + 248);
      v118 = *(unsigned int *)(v117 + 508);
      if (!(_DWORD)v118)
        goto LABEL_179;
      v285 = *(_QWORD *)(*(_QWORD *)(v117 + 496) + 8 * v118 - 8);
      if (!v285)
        goto LABEL_179;
      if ((((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) << 48) & 0xC000000000000) != 0)
      {
LABEL_1595:
        WebCore::RenderLayoutState::resetTextBoxTrim(v285, v116);
        goto LABEL_179;
      }
      if (!*(_BYTE *)(v285 + 160) || !*(_BYTE *)(v285 + 144) || (*(_BYTE *)(a1 + 22) & 4) == 0)
        goto LABEL_179;
      v286 = *(_DWORD *)(a1 + 240);
      if (v286 == 1)
      {
        v79 = (int *)(a1 + 168);
        if (!*v1042)
          goto LABEL_179;
        v287 = *((_QWORD *)*v1042 + 10);
        if (!v287 || *(_DWORD *)(v287 + 60) < 2u)
          goto LABEL_179;
        v288 = *(_DWORD *)(v287 + 44);
      }
      else
      {
        v79 = (int *)(a1 + 168);
        if (v286 != 2 || !*v1042)
          goto LABEL_179;
        v288 = WebCore::LegacyLineLayout::lineCount(*v1042);
      }
      v79 = (int *)(a1 + 168);
      if (v288)
      {
        if (!*(_BYTE *)(v285 + 160))
          goto LABEL_1866;
        *(_BYTE *)(v285 + 144) = 0;
LABEL_451:
        v79 = (int *)(a1 + 168);
        goto LABEL_179;
      }
      goto LABEL_179;
    }
    if (v107)
    {
      v185 = v61;
      if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) >> 2) & 3) != 0)
      {
        v832 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) >> 2;
        WebCore::RenderLayoutState::resetTextBoxTrim(v107, v78);
        if ((v832 & 1) != 0)
        {
          if (!*(_BYTE *)(v107 + 160))
          {
            *(_QWORD *)(v107 + 152) = 0;
            *(_BYTE *)(v107 + 160) = 1;
          }
          *(_BYTE *)(v107 + 144) = 1;
          v79 = (int *)(a1 + 168);
        }
      }
      else
      {
        v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
        v187 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
        v44 = __OFADD__(v186, v187);
        v189 = v186 + v187;
        v61 = v185;
        if ((v44 || v189) && *(_BYTE *)(v107 + 160))
        {
          v358 = *(WTF **)(v107 + 152);
          *(_QWORD *)(v107 + 152) = 0;
          if (v358)
          {
            if (*(_DWORD *)v358 == 1)
              WTF::fastFree(v358, v188);
            else
              --*(_DWORD *)v358;
          }
          *(_BYTE *)(v107 + 160) = 0;
        }
      }
    }
    v190 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v192 = v190 + v191;
    if (__OFADD__(v190, v191))
      v192 = (v190 >> 31) + 0x7FFFFFFF;
    v193 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v194 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v195 = v193 + v194;
    if (__OFADD__(v193, v194))
      v195 = (v193 >> 31) + 0x7FFFFFFF;
    v196 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v196 = 1352;
    v197 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v196))(a1);
    v198 = v197 << 6;
    if (v197 < -33554432)
      v198 = 0x80000000;
    if (v197 > 0x1FFFFFF)
      v198 = 0x7FFFFFFF;
    v199 = v195 + v198;
    if (__OFADD__(v195, v198))
      v199 = (v195 >> 31) + 0x7FFFFFFF;
    v1037 = v108;
    v200 = 164;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v200 = 160;
    *(_DWORD *)(a1 + v200) = v192;
    v201 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
    v202 = *(unsigned int *)(v201 + 508);
    if ((_DWORD)v202)
      v342 = *(_QWORD *)(*(_QWORD *)(v201 + 496) + 8 * v202 - 8);
    else
      v342 = 0;
    v160 = WebCore::RenderElement::createsNewFormattingContext((WebCore::RenderElement *)a1);
    v161 = *(unsigned __int8 *)(a1 + 46);
    v1032 = v199;
    if ((v160 & 1) != 0)
    {
      v164 = 0;
      v162 = 0;
      v165 = 16;
      goto LABEL_228;
    }
    v162 = 0;
    v163 = v161 != 49;
    if ((v163 & (v192 == 0)) != 0)
      v164 = 2;
    else
      v164 = 0;
    v165 = v163 | 0x10;
    if (v161 != 49 && !v199)
    {
      v282 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(v282 + 8))
        {
          v162 = 0;
          v79 = (int *)(a1 + 168);
          goto LABEL_228;
        }
        v283 = v282 + 4;
        v79 = (int *)(a1 + 168);
      }
      else
      {
        if (*(_BYTE *)(v282 + 16))
        {
          v162 = 0;
          goto LABEL_228;
        }
        v283 = v282 + 12;
      }
      if (*(_BYTE *)(v283 + 6))
        v284 = *(float *)v283;
      else
        v284 = (float)*(int *)v283;
      v162 = 4 * (v284 == 0.0);
    }
LABEL_228:
    if (v161 == 37)
    {
      LOWORD(v166) = 8;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 45) & 1) == 0)
      {
        v166 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (!v166)
          goto LABEL_235;
        if ((*(_WORD *)(v166 + 28) & 0x10) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v166 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            LOWORD(v166) = 8;
          else
            LOWORD(v166) = 0;
          goto LABEL_235;
        }
      }
      LOWORD(v166) = 0;
    }
LABEL_235:
    LOWORD(v1062) = v165 | v162 | v166 | v164;
    if (v164)
    {
      v167 = WebCore::RenderBlockFlow::maxPositiveMarginBefore((WebCore::RenderBlockFlow *)a1);
      v168 = WebCore::RenderBlockFlow::maxNegativeMarginBefore((WebCore::RenderBlockFlow *)a1);
    }
    else
    {
      v167 = 0;
      v168 = 0;
    }
    *(_QWORD *)((char *)&v1062 + 4) = __PAIR64__(v168, v167);
    v169 = *(unsigned int *)(v342 + 20);
    if ((_DWORD)v169)
      v170 = *(_BYTE *)(v169 + *(_QWORD *)(v342 + 8) - 1);
    else
      v170 = 0;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 1) != 0)
    {
      LOBYTE(v1065[0]) = 1;
      v303 = (char **)(v342 + 8);
      if ((_DWORD)v169 != *(_DWORD *)(v342 + 16))
      {
        (*v303)[v169] = 1;
        goto LABEL_496;
      }
      goto LABEL_495;
    }
    if (!v164)
    {
      if (!(_DWORD)v169)
      {
LABEL_607:
        v1035 = 1;
        goto LABEL_241;
      }
      LOBYTE(v1065[0]) = 0;
      v303 = (char **)(v342 + 8);
      if ((_DWORD)v169 != *(_DWORD *)(v342 + 16))
      {
        (*v303)[v169] = 0;
        goto LABEL_496;
      }
LABEL_495:
      v304 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v303, (WTF *)(v169 + 1), (unint64_t)v1065);
      v169 = *(unsigned int *)(v342 + 20);
      *(_BYTE *)(*(_QWORD *)(v342 + 8) + v169) = *v304;
      goto LABEL_496;
    }
    if (!(_DWORD)v169)
      goto LABEL_607;
    LOBYTE(v1065[0]) = v170;
    v303 = (char **)(v342 + 8);
    if ((_DWORD)v169 == *(_DWORD *)(v342 + 16))
      goto LABEL_495;
    (*v303)[v169] = v170;
LABEL_496:
    v1035 = 0;
    *(_DWORD *)(v342 + 20) = v169 + 1;
LABEL_241:
    (*(void (**)(uint64_t, _BOOL4))(*(_QWORD *)a1 + 1760))(a1, v1037);
    LODWORD(v1051) = 0;
    v1053 = 0;
    v172 = *(unsigned int *)(a1 + 64);
    if (v172 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v206 = *(_QWORD *)((v172 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v206)
      {
        if ((*(_BYTE *)(v206 + 45) & 4) != 0)
        {
          v1030 = v61;
          while (1)
          {
            v203 = v206;
            v204 = *(unsigned int *)(v206 + 47);
            if (v204 | ((unint64_t)*(unsigned __int8 *)(v206 + 51) << 32)
              && (v205 = *(_QWORD *)((v204 | ((unint64_t)*(unsigned __int8 *)(v206 + 51) << 32)) + 8)) != 0)
            {
              if ((*(_BYTE *)(v205 + 45) & 4) != 0)
                v206 = *(_QWORD *)((v204 | ((unint64_t)*(unsigned __int8 *)(v206 + 51) << 32)) + 8);
              else
                v206 = 0;
            }
            else
            {
              v206 = 0;
            }
            v207 = *(_DWORD *)(v203 + 20);
            if ((v207 & 0x400) != 0)
              goto LABEL_300;
            v208 = *(_QWORD *)(v203 + 32);
            if (v208)
            {
              v209 = *(_QWORD *)(v208 + 8);
              if (v209)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v209 + 104) + 239) & 0x18) != 0
                  && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v203 + 24) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 479))
                {
                  WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v203);
                  goto LABEL_300;
                }
              }
            }
            if ((v207 & 0x1800000) != 0x1000000)
            {
              if (v1037)
                goto LABEL_292;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v203 + 1544))(v203)
                && *(_BYTE *)(a1 + 46) != 49)
              {
                break;
              }
            }
LABEL_297:
            v210 = *(_DWORD *)(v203 + 20);
            if ((v210 & 0x1800000) == 0x1000000)
            {
              v211 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v203);
              if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
                WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v203);
              if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
                WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v203);
              if ((*(_BYTE *)(v203 + 52) & 7) != 1 || (*(_BYTE *)(v203 + 53) & 2) == 0)
              {
                if ((*(_BYTE *)(v203 + 20) & 0xF8) != 0)
                  *((_DWORD *)v211 + 5) |= 0x40u;
                {
                  WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                  unk_1ECE91358 = 0u;
                }
                WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v211, (WebCore::RenderBox *)v203);
              }
              v212 = *(_DWORD *)(a1 + 20);
              v213 = *(_BYTE **)(*(_QWORD *)(v203 + 88) + 24);
              if ((v212 & 0x1000) != 0)
              {
                if (!v213[36])
                {
                  v572 = v213 + 20;
                  v79 = (int *)(a1 + 168);
                  goto LABEL_973;
                }
                v1020 = 0;
                v79 = (int *)(a1 + 168);
              }
              else
              {
                if (v213[12])
                {
                  v1020 = 0;
                  goto LABEL_319;
                }
                v572 = v213 + 28;
LABEL_973:
                v1020 = *v572 == 0;
              }
LABEL_319:
              v214 = 164;
              if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
                v214 = 160;
              v1028 = *(unsigned int *)(a1 + v214);
              v215 = (*(_DWORD *)(v203 + 96) >> 5) & 0x1F;
              v1027 = v192;
              if (v215 > 0x19 || ((1 << v215) & 0x3528029) == 0)
              {
                if ((v212 & 0x10000000) != 0)
                {
                  v959 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
                  if (!v959
                    || (v961 = v959, (*(_BYTE *)(v959 + 328) & 1) != 0)
                    || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v959 + 248), v960) & 1) != 0)
                  {
                    v641 = 0;
                  }
                  else
                  {
                    v976 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
                    if (__OFADD__(v976, (_DWORD)v1028))
                      v977 = (v976 >> 31) + 0x7FFFFFFF;
                    else
                      v977 = v976 + v1028;
                    v641 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v961 + 2000))(v961, a1, v977, 1);
                  }
                  v79 = (int *)(a1 + 168);
                }
                else
                {
                  v641 = 0;
                }
                if ((*(_BYTE *)(a1 + 123) & 4) != 0)
                {
                  v642 = (unsigned int *)(a1 + 160);
                  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
                    v642 = (unsigned int *)(a1 + 164);
                  v643 = *v642;
                  v644 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a1, v641);
                  v229 = v643 - v644;
                  if (__OFSUB__(v643, v644))
                    v229 = (v643 >> 31) + 0x7FFFFFFF;
                  v192 = v1027;
                }
                else
                {
                  v229 = WebCore::RenderBlock::logicalLeftOffsetForContent((_DWORD *)a1);
                }
                if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
                {
                  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1))
                  {
                    started = WebCore::RenderBlock::startOffsetForContent((WebCore::RenderBlock *)a1);
                    v646 = WebCore::RenderBlock::startOffsetForContent((_BYTE *)a1, v1028);
                    v647 = started - v646;
                    if (__OFSUB__(started, v646))
                      v647 = (started >> 31) + 0x7FFFFFFF;
                    v44 = __OFADD__(v229, v647);
                    v648 = v229 + v647;
                    if (v44)
                      v229 = (v229 >> 31) + 0x7FFFFFFF;
                    else
                      v229 = v648;
                  }
                  v79 = (int *)(a1 + 168);
                }
                goto LABEL_350;
              }
              v1026 = *(_DWORD *)(a1 + 120);
              if ((v212 & 0x10000000) != 0)
              {
                v934 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
                if (v934)
                {
                  v936 = v934;
                  if ((*(_BYTE *)(v934 + 328) & 1) == 0
                    && (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v934 + 248), v935) & 1) == 0)
                  {
                    v937 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
                    if (__OFADD__(v937, (_DWORD)v1028))
                      v938 = (v937 >> 31) + 0x7FFFFFFF;
                    else
                      v938 = v937 + v1028;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v936 + 2000))(v936, a1, v938, 1);
                  }
                }
              }
              v216 = *(_QWORD *)a1;
              if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
              {
                v217 = (*(uint64_t (**)(uint64_t))(v216 + 1000))(a1);
                v218 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
              }
              else
              {
                v217 = (*(uint64_t (**)(uint64_t))(v216 + 1016))(a1);
                v218 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
              }
              v219 = v217 + v218;
              if (__OFADD__(v217, v218))
                v219 = (v217 >> 31) + 0x7FFFFFFF;
              v1025 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1824))(a1, v1028, v219, 0);
              if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 234) & 0x20) == 0)
              {
LABEL_330:
                if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
                {
                  v939 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
                  if (!v939
                    || (v941 = v939, (*(_BYTE *)(v939 + 328) & 1) != 0)
                    || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v939 + 248), v940) & 1) != 0)
                  {
                    v1022 = 0;
                  }
                  else
                  {
                    v950 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
                    if (__OFADD__(v950, (_DWORD)v1028))
                      v951 = (v950 >> 31) + 0x7FFFFFFF;
                    else
                      v951 = v950 + v1028;
                    v1022 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v941 + 2000))(v941, a1, v951, 1);
                  }
                  v79 = (int *)(a1 + 168);
                }
                else
                {
                  v1022 = 0;
                }
                v221 = *(_QWORD *)a1;
                if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
                {
                  (*(void (**)(uint64_t))(v221 + 1000))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
                  v79 = (int *)(a1 + 168);
                }
                else
                {
                  (*(void (**)(uint64_t))(v221 + 1016))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
                }
                v222 = *(_QWORD *)a1;
                if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
                {
                  (*(uint64_t (**)(uint64_t))(v222 + 1000))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
                  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
                  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
                    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
                  v79 = (int *)(a1 + 168);
                }
                else
                {
                  (*(uint64_t (**)(uint64_t))(v222 + 1016))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
                  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
                  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
                  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
                    v79 = (int *)(a1 + 168);
                  }
                }
                if (v1022)
                  v79 = (int *)(a1 + 168);
                v223 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1816))(a1);
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 234) & 0x20) == 0)
                {
LABEL_340:
                  v224 = v1026;
LABEL_341:
                  v225 = (float)v1025 * 0.015625;
                  v226 = (float)v223 * 0.015625;
                  switch((v224 >> 6) & 0xF)
                  {
                    case 1u:
                    case 5u:
                      v225 = (float)v223 * 0.015625;
                      goto LABEL_342;
                    case 2u:
                    case 6u:
                      v225 = v225 + (float)((float)(v226 - v225) * 0.5);
                      goto LABEL_342;
                    case 3u:
                    case 7u:
                      goto LABEL_343;
                    case 8u:
                      if ((v224 & 0x4000000) == 0)
                        v225 = (float)v223 * 0.015625;
                      goto LABEL_342;
                    default:
LABEL_342:
                      v226 = v225;
LABEL_343:
                      if ((v224 & 0x4000000) != 0)
                      {
                        v819 = (int *)(a1 + 160);
                        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
                          v819 = (int *)(a1 + 164);
                        v227 = (float)((float)((float)*v819 * 0.015625) - v226) * 64.0;
                        if (v227 < 2147483650.0 && v227 > -2147483650.0)
                        {
LABEL_1542:
                          v229 = (int)v227;
                          goto LABEL_1543;
                        }
                      }
                      else
                      {
                        v227 = v225 * 64.0;
                        if (v227 < 2147483650.0 && v227 > -2147483650.0)
                        {
                          v229 = (int)v227;
                          goto LABEL_349;
                        }
                      }
                      if (v227 >= 2147483650.0)
                      {
                        v229 = 0x7FFFFFFF;
                      }
                      else
                      {
                        if (v227 > -2147483650.0)
                          goto LABEL_1542;
                        v229 = 0x80000000;
                      }
LABEL_1543:
                      v79 = (int *)(a1 + 168);
LABEL_349:
                      if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
                      {
                        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1))
                        {
                          v942 = WebCore::RenderBlock::startOffsetForContent((WebCore::RenderBlock *)a1);
                          v943 = WebCore::RenderBlock::startOffsetForContent((_BYTE *)a1, v1028);
                          v944 = v942 - v943;
                          if (__OFSUB__(v942, v943))
                            v944 = (v942 >> 31) + 0x7FFFFFFF;
                          v44 = __OFADD__(v229, v944);
                          v945 = v229 + v944;
                          if (v44)
                            v229 = (v229 >> 31) + 0x7FFFFFFF;
                          else
                            v229 = v945;
                        }
                        v79 = (int *)(a1 + 168);
                      }
                      break;
                  }
LABEL_350:
                  v230 = *(_QWORD *)(v203 + 144);
                  *(_DWORD *)(v230 + 148) = v229;
                  v231 = v1028;
                  if ((~(unsigned __int16)v1062 & 0x12) != 0)
                  {
                    v588 = DWORD1(v1062) - DWORD2(v1062);
                    if (__OFSUB__(DWORD1(v1062), DWORD2(v1062)))
                      v588 = (DWORD1(v1062) >> 31) + 0x7FFFFFFF;
                    v44 = __OFADD__((_DWORD)v1028, v588);
                    v589 = v1028 + v588;
                    if (v44)
                      v231 = (v1028 >> 31) + 0x7FFFFFFF;
                    else
                      v231 = v589;
                  }
                  if (*(_DWORD *)(v230 + 152) != v231)
                  {
                    *(_DWORD *)(v230 + 152) = v231;
                    if (v1020)
                    {
                      v232 = *(_DWORD *)(v203 + 20);
                      if ((v232 & 0x20) == 0)
                        *(_DWORD *)(v203 + 20) = v232 | 0x20;
                    }
                  }
                  goto LABEL_300;
                }
                v824 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248);
                v825 = *(unsigned int *)(v824 + 508);
                if ((_DWORD)v825)
                {
                  v1023 = *(_QWORD *)(*(_QWORD *)(v824 + 496) + 8 * v825 - 8);
                  if (v1023)
                  {
                    v843 = *(_QWORD *)(v1023 + 24);
                    if (v843)
                    {
                      v1021 = *(_QWORD *)(v843 + 8);
                      if (v1021)
                      {
                        if (((*(_DWORD *)(a1 + 124) ^ *(_DWORD *)(v1021 + 124)) & 0xE000) == 0)
                        {
                          v844 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v1021 + 112) + 32), v171);
                          v845 = *(float *)(v844 + 80);
                          v79 = (int *)(a1 + 168);
                          v224 = v1026;
                          if (v845 == 0.0)
                            goto LABEL_341;
                          v846 = *(_QWORD *)(v1023 + 84);
                          if ((*(_BYTE *)(v1021 + 21) & 0x10) != 0)
                          {
                            v846 >>= 32;
                            LODWORD(v847) = *(_DWORD *)(v1023 + 60);
                          }
                          else
                          {
                            v847 = *(_QWORD *)(v1023 + 56);
                          }
                          v44 = __OFADD__(v223, (_DWORD)v847);
                          v980 = v223 + v847;
                          if (v44)
                            v980 = (v223 >> 31) + 0x7FFFFFFF;
                          v44 = __OFSUB__(v980, (_DWORD)v846);
                          v981 = v980 - v846;
                          v982 = (v980 >> 31) + 0x7FFFFFFF;
                          if (v44)
                            v981 = v982;
                          v983 = fmodf((float)v981 * 0.015625, *(float *)(v844 + 80));
                          v984 = (float)((float)((float)v223 * 0.015625) - ceilf(fmodf(v983, v845))) * 64.0;
                          if (v984 >= 2147483650.0 || v984 <= -2147483650.0)
                          {
                            if (v984 >= 2147483650.0)
                            {
                              v223 = 0x7FFFFFFF;
                            }
                            else
                            {
                              if (v984 > -2147483650.0)
                                goto LABEL_2042;
                              v223 = 0x80000000;
                            }
                          }
                          else
                          {
LABEL_2042:
                            v223 = (int)v984;
                          }
                        }
                      }
                    }
                  }
                }
                v79 = (int *)(a1 + 168);
                goto LABEL_340;
              }
              v826 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248);
              v827 = *(unsigned int *)(v826 + 508);
              if ((_DWORD)v827)
              {
                v848 = *(_QWORD *)(*(_QWORD *)(v826 + 496) + 8 * v827 - 8);
                if (v848)
                {
                  v849 = *(_QWORD *)(v848 + 24);
                  if (v849)
                  {
                    v1024 = *(_QWORD *)(v849 + 8);
                    if (v1024)
                    {
                      if (((*(_DWORD *)(a1 + 124) ^ *(_DWORD *)(v1024 + 124)) & 0xE000) == 0)
                      {
                        v850 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v1024 + 112) + 32), v220);
                        v851 = *(float *)(v850 + 80);
                        v79 = (int *)(a1 + 168);
                        if (v851 == 0.0)
                          goto LABEL_330;
                        v852 = *(_QWORD *)(v848 + 84);
                        if ((*(_BYTE *)(v1024 + 21) & 0x10) != 0)
                        {
                          v852 >>= 32;
                          LODWORD(v853) = *(_DWORD *)(v848 + 60);
                        }
                        else
                        {
                          v853 = *(_QWORD *)(v848 + 56);
                        }
                        v44 = __OFADD__(v1025, (_DWORD)v853);
                        v986 = v1025 + v853;
                        if (v44)
                          v986 = (v1025 >> 31) + 0x7FFFFFFF;
                        v44 = __OFSUB__(v986, (_DWORD)v852);
                        v987 = v986 - v852;
                        v988 = (v986 >> 31) + 0x7FFFFFFF;
                        if (v44)
                          v987 = v988;
                        v989 = fmodf((float)v987 * 0.015625, *(float *)(v850 + 80));
                        v990 = (float)((float)((float)v1025 * 0.015625) + fmodf(v851 - v989, v851)) * 64.0;
                        if (v990 >= 2147483650.0 || v990 <= -2147483650.0)
                        {
                          if (v990 >= 2147483650.0)
                          {
                            v992 = 0x7FFFFFFF;
                          }
                          else
                          {
                            if (v990 > -2147483650.0)
                              goto LABEL_2054;
                            v992 = 0x80000000;
                          }
                        }
                        else
                        {
LABEL_2054:
                          v992 = (int)v990;
                        }
                        v1025 = v992;
                      }
                    }
                  }
                }
              }
              v79 = (int *)(a1 + 168);
              goto LABEL_330;
            }
            if ((v210 & 0x800) != 0)
            {
              v1065[0] = v203;
              WebCore::RenderBlockFlow::layoutBlockChildren(BOOL,WebCore::LayoutUnit &)::$_1::operator()((uint64_t)v1065);
              WebCore::RenderBlockFlow::insertFloatingObject((uint64_t *)a1, (WebCore::RenderBox *)v203);
              WebCore::RenderBlockFlow::adjustFloatingBlock(a1, (unsigned __int16 *)&v1062);
            }
            else
            {
              WebCore::RenderBlockFlow::layoutBlockChild(a1, (_QWORD *)v203, (unsigned __int16 *)&v1062, (int *)&v1051, &v1053);
            }
LABEL_300:
            v61 = v1030;
            if (!v206)
              goto LABEL_242;
          }
          v207 = *(_DWORD *)(v203 + 20);
LABEL_292:
          if ((v207 & 0x20) == 0)
            *(_DWORD *)(v203 + 20) = v207 | 0x20;
          if (v1037 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v203 + 1520))(v203))
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v203, 1, 0);
          goto LABEL_297;
        }
      }
    }
LABEL_242:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 2) != 0)
      WebCore::RenderBlockFlow::trimBlockEndChildrenMargins(a1);
    v173 = v1062;
    v174 = *(unsigned int *)(a1 + 71);
    if (v174 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32))
    {
      v294 = *(_QWORD *)((v174 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)) + 8);
      if (v294)
      {
        if ((*(_BYTE *)(v294 + 52) & 7) == 1)
        {
          ++*(_DWORD *)(v294 + 16);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v294 + 1240))(v294))
            goto LABEL_471;
          v573 = v294;
          if ((*(_BYTE *)(v294 + 45) & 2) != 0)
            v573 = *(_QWORD *)(*(_QWORD *)(v294 + 32) + 8);
          v574 = *(_WORD *)(v573 + 98) & 7;
          if (!v574)
            goto LABEL_471;
          if (v574 > 5)
            goto LABEL_1669;
          v575 = 1 << v574;
          if ((v575 & 0x26) == 0)
          {
            if ((v575 & 0x18) == 0)
            {
LABEL_1669:
              __break(0xC471u);
              JUMPOUT(0x1941BD458);
            }
            WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v294);
          }
          v61 = v61;
          v79 = (int *)(a1 + 168);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1))
            goto LABEL_471;
          if (((*(_DWORD *)(v294 + 124) >> 13) & 6u) - 2 < 4)
            v576 = (signed int *)(v294 + 160);
          else
            v576 = (signed int *)(v294 + 164);
          ClearDelta = WebCore::RenderBlockFlow::getClearDelta((uint64_t *)a1, (_DWORD *)v294, *v576);
          if (((*(_DWORD *)(v294 + 124) >> 13) & 6u) - 2 < 4)
          {
            v578 = (unsigned int *)(v294 + 152);
            v579 = (_DWORD *)(v294 + 160);
          }
          else
          {
            v578 = (unsigned int *)(v294 + 156);
            v579 = (_DWORD *)(v294 + 164);
          }
          v580 = *v578;
          v581 = *v578 + *v579;
          if (__OFADD__(v580, *v579))
            v581 = (v580 >> 31) + 0x7FFFFFFF;
          v61 = v61;
          v79 = (int *)(a1 + 168);
          if (ClearDelta >= v581)
          {
            v582 = WebCore::RenderBlockFlow::marginValuesForChild((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBox *)v294);
            v583 = *(_DWORD *)(v294 + 16);
            if (!v583)
            {
LABEL_1359:
              __break(0xC471u);
              JUMPOUT(0x1941BC4A4);
            }
            *(_DWORD *)(v294 + 16) = v583 - 1;
            v584 = 160;
            if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
              v584 = 164;
            v585 = (int *)(a1 + 160);
            if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
              v585 = (int *)(a1 + 164);
            v586 = *(_DWORD *)(a1 + v584);
            v587 = v586 - v582;
            if (__OFSUB__(v586, v582))
              v587 = (v586 >> 31) + 0x7FFFFFFF;
            *v585 = v587;
            v61 = v61;
            v79 = (int *)(a1 + 168);
          }
          else
          {
LABEL_471:
            v295 = *(_DWORD *)(v294 + 16);
            if (!v295)
              goto LABEL_1359;
            *(_DWORD *)(v294 + 16) = v295 - 1;
          }
        }
      }
    }
    v175 = v173 & 4 | 0x20;
    if ((v173 & 0x12) != 0x12
      && v175 != 36
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3384) != 2
       || (v173 & 8) == 0
       || (v173 & 0x80) == 0))
    {
      v289 = 160;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
        v289 = 164;
      v290 = (int *)(a1 + 160);
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
        v290 = (int *)(a1 + 164);
      v291 = DWORD1(v1062) - DWORD2(v1062);
      if (__OFSUB__(DWORD1(v1062), DWORD2(v1062)))
        v291 = (DWORD1(v1062) >> 31) + 0x7FFFFFFF;
      v292 = *(_DWORD *)(a1 + v289);
      v293 = v292 + v291;
      if (__OFADD__(v292, v291))
        v293 = (v292 >> 31) + 0x7FFFFFFF;
      *v290 = v293;
    }
    v176 = *(_DWORD *)(a1 + 124);
    v177 = 160;
    if (((v176 >> 13) & 6) - 2 >= 4)
      v177 = 164;
    v178 = (int *)(a1 + 160);
    if (((v176 >> 13) & 6) - 2 >= 4)
      v178 = (int *)(a1 + 164);
    v179 = *(_DWORD *)(a1 + v177);
    v44 = __OFADD__(v179, v1032);
    v180 = v179 + v1032;
    v181 = (v179 >> 31) + 0x7FFFFFFF;
    if (!v44)
      v181 = v180;
    v182 = v192 + v1032;
    if (__OFADD__(v192, v1032))
      v182 = (v192 >> 31) + 0x7FFFFFFF;
    if (v181 <= v182)
      v181 = v182;
    *v178 = v181;
    if ((v173 & 0x12) == 0x12 || v175 != 36)
      goto LABEL_257;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 2) != 0)
    {
      v271 = v61;
      v269 = *(_QWORD *)(a1 + 224);
      if (v269)
      {
        v274 = *(_DWORD *)(v269 + 8) & ~(*(int *)(v269 + 8) >> 31);
        v278 = *(_DWORD *)(v269 + 12) & ~(*(int *)(v269 + 12) >> 31);
      }
      else
      {
        v954 = (unsigned __int16)v176 >> 13;
        v996 = 3;
        switch((int)v954)
        {
          case 1:
            v999 = *v1048;
            v274 = v999 & ~(v999 >> 31);
LABEL_2098:
            if (v999 == 0x80000000)
              v278 = 0x7FFFFFFF;
            else
              v278 = -v999 & ~(-v999 >> 31);
LABEL_2101:
            v956 = 0;
            goto LABEL_1953;
          case 2:
          case 4:
            v996 = 1;
            goto LABEL_1947;
          case 3:
          case 5:
            goto LABEL_1947;
          default:
            v996 = 2;
LABEL_1947:
            v274 = v1048[v996] & ~(v1048[v996] >> 31);
            v995 = 3;
            switch((int)v954)
            {
              case 1:
                v999 = *v1048;
                goto LABEL_2098;
              case 2:
              case 4:
                v995 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v995 = 2;
                break;
            }
            v955 = v1048[v995];
            if (v955 == 0x80000000)
              v278 = 0x7FFFFFFF;
            else
              v278 = -v955 & ~(-v955 >> 31);
            v956 = 3;
            switch((int)v954)
            {
              case 1:
                goto LABEL_2101;
              case 2:
              case 4:
                v956 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v956 = 2;
                break;
            }
LABEL_1953:
            if ((v1048[v956] & ~(v1048[v956] >> 31)) == v274)
            {
              v957 = v954 - 1;
              v958 = v957 > 4 ? 2 : qword_1969FC6F0[v957];
              v79 = (int *)(a1 + 168);
              v962 = v1048[v958];
              v963 = v962 == 0x80000000 ? 0x7FFFFFFF : -v962 & ~(-v962 >> 31);
              if (v963 == v278)
                goto LABEL_584;
            }
            v964 = (WebCore::RenderBlockFlowRareData *)WTF::fastMalloc((WTF *)0x28);
            WebCore::RenderBlockFlowRareData::RenderBlockFlowRareData(v964, (const WebCore::RenderBlockFlow *)a1);
            v965 = *(WTF **)(a1 + 224);
            *(_QWORD *)(a1 + 224) = v269;
            if (v965)
            {
              v966 = (WTF *)*((_QWORD *)v965 + 3);
              *((_QWORD *)v965 + 3) = 0;
              if (v966)
              {
                if (*(_DWORD *)v966 == 1)
                  WTF::fastFree(v966, v171);
                else
                  --*(_DWORD *)v966;
              }
              WTF::fastFree(v965, v171);
              v269 = *(_QWORD *)(a1 + 224);
            }
            break;
        }
      }
      v79 = (int *)(a1 + 168);
    }
    else
    {
      v268 = DWORD1(v1062);
      v269 = *(_QWORD *)(a1 + 224);
      if (v269)
      {
        v271 = v61;
        v274 = *(_DWORD *)(v269 + 8) <= SDWORD1(v1062) ? DWORD1(v1062) : *(_DWORD *)(v269 + 8);
        v278 = *(_DWORD *)(v269 + 12) <= SDWORD2(v1062) ? DWORD2(v1062) : *(_DWORD *)(v269 + 12);
      }
      else
      {
        v270 = (unsigned __int16)v176 >> 13;
        v271 = v61;
        v272 = 3;
        switch((unsigned __int16)v176 >> 13)
        {
          case 1:
            v947 = *v79;
            if (*v79 > SDWORD1(v1062))
              v268 = *v79;
            v274 = v268 & ~(v268 >> 31);
LABEL_1909:
            if (v947 == 0x80000000)
              v948 = 0x7FFFFFFF;
            else
              v948 = -v947 & ~(-v947 >> 31);
            if (v948 <= SDWORD2(v1062))
              v278 = DWORD2(v1062);
            else
              v278 = v948;
            v79 = (int *)(a1 + 168);
LABEL_1916:
            v279 = 0;
            goto LABEL_428;
          case 2:
          case 4:
            v272 = 1;
            goto LABEL_417;
          case 3:
          case 5:
            goto LABEL_417;
          default:
            v272 = 2;
LABEL_417:
            v273 = v79[v272];
            if (v273 > SDWORD1(v1062))
              v268 = v273;
            v274 = v268 & ~(v268 >> 31);
            v275 = 3;
            switch((unsigned __int16)v176 >> 13)
            {
              case 1:
                v947 = *v79;
                goto LABEL_1909;
              case 2:
              case 4:
                v275 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v275 = 2;
                break;
            }
            v276 = v79[v275];
            if (v276 == 0x80000000)
              v277 = 0x7FFFFFFF;
            else
              v277 = -v276 & ~(-v276 >> 31);
            if (v277 <= SDWORD2(v1062))
              v278 = DWORD2(v1062);
            else
              v278 = v277;
            v279 = 3;
            switch((unsigned __int16)v176 >> 13)
            {
              case 1:
                goto LABEL_1916;
              case 2:
              case 4:
                v279 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v279 = 2;
                break;
            }
LABEL_428:
            if ((v79[v279] & ~(v79[v279] >> 31)) == v274)
            {
              v280 = v270 - 1;
              v281 = v280 > 4 ? 2 : qword_1969FC6F0[v280];
              v348 = v79[v281];
              v349 = v348 == 0x80000000 ? 0x7FFFFFFF : -v348 & ~(-v348 >> 31);
              if (v349 == v278)
                goto LABEL_584;
            }
            v687 = (WebCore::RenderBlockFlowRareData *)WTF::fastMalloc((WTF *)0x28);
            WebCore::RenderBlockFlowRareData::RenderBlockFlowRareData(v687, (const WebCore::RenderBlockFlow *)a1);
            v688 = *(WTF **)(a1 + 224);
            *(_QWORD *)(a1 + 224) = v269;
            if (v688)
            {
              v689 = (WTF *)*((_QWORD *)v688 + 3);
              *((_QWORD *)v688 + 3) = 0;
              if (v689)
              {
                if (*(_DWORD *)v689 == 1)
                {
                  v1034 = v688;
                  WTF::fastFree(v689, v171);
                  v688 = v1034;
                }
                else
                {
                  --*(_DWORD *)v689;
                }
              }
              WTF::fastFree(v688, v171);
              v269 = *(_QWORD *)(a1 + 224);
            }
            break;
        }
      }
    }
    *(_DWORD *)(v269 + 8) = v274;
    *(_DWORD *)(v269 + 12) = v278;
LABEL_584:
    if (v173 < 0)
    {
      v639 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
      v61 = v271;
      if (v639 > 4)
        v640 = 2;
      else
        v640 = qword_1969FC6F0[v639];
      if (v79[v640])
        goto LABEL_257;
      v350 = *(_WORD *)(a1 + 69) | 0x100;
    }
    else
    {
      v350 = *(_WORD *)(a1 + 69) & 0xFEFF;
      v61 = v271;
    }
    *(_WORD *)(a1 + 69) = v350;
LABEL_257:
    if ((v1035 & 1) == 0)
    {
      v817 = *(_DWORD *)(v342 + 20);
      if (!v817)
      {
        __break(0xC471u);
        JUMPOUT(0x1941BDECCLL);
      }
      *(_DWORD *)(v342 + 20) = v817 - 1;
      v79 = (int *)(a1 + 168);
    }
    v183 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
    v184 = *(unsigned int *)(v183 + 508);
    if ((_DWORD)v184)
    {
      v343 = *(_QWORD *)(*(_QWORD *)(v183 + 496) + 8 * v184 - 8);
      if (v343)
      {
        if ((((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) << 48) & 0xC000000000000) != 0)
        {
          WebCore::RenderLayoutState::resetTextBoxTrim(v343, v171);
          goto LABEL_259;
        }
        if (*(_BYTE *)(v343 + 160) && *(_BYTE *)(v343 + 144) && (*(_BYTE *)(a1 + 22) & 4) != 0)
        {
          v344 = *(_DWORD *)(a1 + 240);
          if (v344 == 1)
          {
            v79 = (int *)(a1 + 168);
            if (!*v1042)
              goto LABEL_259;
            v345 = *((_QWORD *)*v1042 + 10);
            if (!v345 || *(_DWORD *)(v345 + 60) < 2u)
              goto LABEL_259;
            v346 = *(_DWORD *)(v345 + 44);
          }
          else
          {
            v79 = (int *)(a1 + 168);
            if (v344 != 2 || !*v1042)
              goto LABEL_259;
            v346 = WebCore::LegacyLineLayout::lineCount(*v1042);
          }
          v79 = (int *)(a1 + 168);
          if (v346)
          {
            if (!*(_BYTE *)(v343 + 160))
              goto LABEL_1866;
            *(_BYTE *)(v343 + 144) = 0;
            v79 = (int *)(a1 + 168);
          }
        }
      }
    }
LABEL_259:
    if (((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) << 16)) << 32)) & 0x8000000000000) == 0)
      goto LABEL_179;
    v101 = WebCore::lastInlineFormattingContextRoot(*(unsigned int *)(a1 + 71) | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32), (const WebCore::RenderBlockFlow *)v171);
    if (!v101)
      goto LABEL_179;
    v305 = (const WebCore::RenderBlockFlow *)v101;
    if (v101 != a1)
    {
      do
      {
        v100 = *(_DWORD *)(v101 + 20);
        if ((v100 & 8) == 0)
        {
          *(_DWORD *)(v101 + 20) = v100 | 8;
          if ((v100 & 0x8000) != 0)
          {
            if ((*(_BYTE *)(v101 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1941BC40CLL);
            }
            v103 = *(_QWORD *)(v101 + 144);
            if (v103)
            {
              v104 = *(_DWORD *)(v103 + 8) + 1;
              *(_DWORD *)(v103 + 8) = v104;
            }
            else
            {
              v104 = MEMORY[8];
            }
            *(_QWORD *)(v103 + 24) = *(_QWORD *)(v103 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
            if (!v104)
            {
              __break(0xC471u);
              JUMPOUT(0x1941BC438);
            }
            *(_DWORD *)(v103 + 8) = v104 - 1;
          }
        }
        v101 = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v101);
      }
      while (v101 && v101 != a1);
    }
    v1031 = v61;
    v306 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
    v307 = *(unsigned int *)(v306 + 508);
    if ((_DWORD)v307)
    {
      v392 = *(_QWORD *)(*(_QWORD *)(v306 + 496) + 8 * v307 - 8);
      if (v392)
      {
        if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) >> 2) & 3) != 0)
        {
          v868 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) >> 2;
          WebCore::RenderLayoutState::resetTextBoxTrim(v392, v102);
          if ((v868 & 2) != 0)
          {
            WebCore::RenderLayoutState::addTextBoxTrimEnd((WebCore::RenderLayoutState *)v392, v305);
            v871 = WebCore::firstInlineFormattingContextRoot(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32), v870);
            if (v871)
              v872 = v871 == (_QWORD)v305;
            else
              v872 = 1;
            v873 = !v872;
            v79 = (int *)(a1 + 168);
            if ((v868 & 1) == 0 || (v873 & 1) != 0)
              goto LABEL_500;
          }
          else
          {
            v79 = (int *)(a1 + 168);
            if ((v868 & 1) == 0)
              goto LABEL_500;
          }
          if (!*(_BYTE *)(v392 + 160))
          {
            *(_QWORD *)(v392 + 152) = 0;
            *(_BYTE *)(v392 + 160) = 1;
          }
          *(_BYTE *)(v392 + 144) = 1;
          v79 = (int *)(a1 + 168);
        }
        else
        {
          v393 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
          v394 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
          if ((__OFADD__(v393, v394) || v393 + v394) && *(_BYTE *)(v392 + 160))
          {
            v396 = *(WTF **)(v392 + 152);
            *(_QWORD *)(v392 + 152) = 0;
            if (v396)
            {
              if (*(_DWORD *)v396 == 1)
                WTF::fastFree(v396, v395);
              else
                --*(_DWORD *)v396;
            }
            *(_BYTE *)(v392 + 160) = 0;
          }
        }
      }
    }
LABEL_500:
    v308 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v309 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    v310 = v308 + v309;
    if (__OFADD__(v308, v309))
      v310 = (v308 >> 31) + 0x7FFFFFFF;
    v311 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v312 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v313 = v311 + v312;
    if (__OFADD__(v311, v312))
      v313 = (v311 >> 31) + 0x7FFFFFFF;
    v314 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v314 = 1352;
    v315 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v314))(a1);
    v316 = v315 << 6;
    if (v315 < -33554432)
      v316 = 0x80000000;
    if (v315 > 0x1FFFFFF)
      v316 = 0x7FFFFFFF;
    v317 = v313 + v316;
    if (__OFADD__(v313, v316))
      v317 = (v313 >> 31) + 0x7FFFFFFF;
    v318 = 164;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v318 = 160;
    *(_DWORD *)(a1 + v318) = v310;
    v319 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
    v320 = *(unsigned int *)(v319 + 508);
    if ((_DWORD)v320)
      v321 = *(_QWORD *)(*(_QWORD *)(v319 + 496) + 8 * v320 - 8);
    else
      v321 = 0;
    v322 = WebCore::RenderElement::createsNewFormattingContext((WebCore::RenderElement *)a1);
    v323 = *(unsigned __int8 *)(a1 + 46);
    v1033 = v317;
    if ((v322 & 1) != 0)
    {
      v326 = v310;
      v327 = 0;
      v324 = 0;
      v328 = 16;
      goto LABEL_528;
    }
    v324 = 0;
    v325 = v323 != 49;
    v326 = v310;
    if ((v325 & (v310 == 0)) != 0)
      v327 = 2;
    else
      v327 = 0;
    v328 = v325 | 0x10;
    if (v323 != 49 && !v317)
    {
      v329 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(v329 + 8))
        {
          v324 = 0;
          v79 = (int *)(a1 + 168);
          goto LABEL_528;
        }
        v330 = v329 + 4;
        v79 = (int *)(a1 + 168);
      }
      else
      {
        if (*(_BYTE *)(v329 + 16))
        {
          v324 = 0;
          goto LABEL_528;
        }
        v330 = v329 + 12;
      }
      if (*(_BYTE *)(v330 + 6))
        v331 = *(float *)v330;
      else
        v331 = (float)*(int *)v330;
      v324 = 4 * (v331 == 0.0);
    }
LABEL_528:
    if (v323 == 37)
    {
      LOWORD(v332) = 8;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 45) & 1) == 0)
      {
        v332 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        if (!v332)
          goto LABEL_535;
        if ((*(_WORD *)(v332 + 28) & 0x10) != 0)
        {
          if (*(_QWORD *)(*(_QWORD *)(v332 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            LOWORD(v332) = 8;
          else
            LOWORD(v332) = 0;
          goto LABEL_535;
        }
      }
      LOWORD(v332) = 0;
    }
LABEL_535:
    LOWORD(v1062) = v328 | v324 | v332 | v327;
    if (v327)
    {
      v333 = WebCore::RenderBlockFlow::maxPositiveMarginBefore((WebCore::RenderBlockFlow *)a1);
      v334 = WebCore::RenderBlockFlow::maxNegativeMarginBefore((WebCore::RenderBlockFlow *)a1);
    }
    else
    {
      v333 = 0;
      v334 = 0;
    }
    *(_QWORD *)((char *)&v1062 + 4) = __PAIR64__(v334, v333);
    v335 = *(unsigned int *)(v321 + 20);
    if ((_DWORD)v335)
      v336 = *(_BYTE *)(v335 + *(_QWORD *)(v321 + 8) - 1);
    else
      v336 = 0;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 1) != 0)
    {
      LOBYTE(v1065[0]) = 1;
      v337 = (char **)(v321 + 8);
      v338 = v1037;
      if ((_DWORD)v335 != *(_DWORD *)(v321 + 16))
      {
        (*v337)[v335] = 1;
        goto LABEL_619;
      }
      goto LABEL_618;
    }
    if (!v327)
    {
      if (!(_DWORD)v335)
      {
LABEL_949:
        v1036 = 1;
        v338 = v1037;
        goto LABEL_620;
      }
      LOBYTE(v1065[0]) = 0;
      v337 = (char **)(v321 + 8);
      v338 = v1037;
      if ((_DWORD)v335 != *(_DWORD *)(v321 + 16))
      {
        (*v337)[v335] = 0;
        goto LABEL_619;
      }
LABEL_618:
      v359 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v337, (WTF *)(v335 + 1), (unint64_t)v1065);
      v335 = *(unsigned int *)(v321 + 20);
      *(_BYTE *)(*(_QWORD *)(v321 + 8) + v335) = *v359;
      goto LABEL_619;
    }
    if (!(_DWORD)v335)
      goto LABEL_949;
    LOBYTE(v1065[0]) = v336;
    v337 = (char **)(v321 + 8);
    v338 = v1037;
    if ((_DWORD)v335 == *(_DWORD *)(v321 + 16))
      goto LABEL_618;
    (*v337)[v335] = v336;
LABEL_619:
    v1036 = 0;
    *(_DWORD *)(v321 + 20) = v335 + 1;
LABEL_620:
    (*(void (**)(uint64_t, _BOOL4))(*(_QWORD *)a1 + 1760))(a1, v338);
    LODWORD(v1051) = 0;
    v1053 = 0;
    v360 = *(unsigned int *)(a1 + 64);
    if (v360 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    {
      v361 = *(_QWORD *)((v360 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if (v361)
      {
        if ((*(_BYTE *)(v361 + 45) & 4) != 0)
        {
          while (1)
          {
            v1003 = v361;
            v1004 = *(unsigned int *)(v361 + 47);
            if (v1004 | ((unint64_t)*(unsigned __int8 *)(v361 + 51) << 32)
              && (v1005 = *(_QWORD *)((v1004 | ((unint64_t)*(unsigned __int8 *)(v361 + 51) << 32)) + 8)) != 0)
            {
              if ((*(_BYTE *)(v1005 + 45) & 4) != 0)
                v361 = *(_QWORD *)((v1004 | ((unint64_t)*(unsigned __int8 *)(v361 + 51) << 32)) + 8);
              else
                v361 = 0;
            }
            else
            {
              v361 = 0;
            }
            v1006 = *(_DWORD *)(v1003 + 20);
            if ((v1006 & 0x400) != 0)
              goto LABEL_2134;
            v1007 = *(_QWORD *)(v1003 + 32);
            if (v1007)
            {
              v1008 = *(_QWORD *)(v1007 + 8);
              if (v1008)
              {
                if ((*(_BYTE *)(*(_QWORD *)(v1008 + 104) + 239) & 0x18) != 0
                  && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1003 + 24)
                                                                                           + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 479))
                {
                  WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v1003);
                  goto LABEL_2134;
                }
              }
            }
            if ((v1006 & 0x1800000) != 0x1000000)
            {
              if (v1037)
                goto LABEL_2126;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1003 + 1544))(v1003)
                && *(_BYTE *)(a1 + 46) != 49)
              {
                break;
              }
            }
LABEL_2131:
            v1009 = *(_DWORD *)(v1003 + 20);
            if ((v1009 & 0x1800000) == 0x1000000)
            {
              v1010 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v1003);
              if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
                WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v1003);
              if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
                WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v1003);
              if ((*(_BYTE *)(v1003 + 52) & 7) != 1 || (*(_BYTE *)(v1003 + 53) & 2) == 0)
              {
                if ((*(_BYTE *)(v1003 + 20) & 0xF8) != 0)
                  *((_DWORD *)v1010 + 5) |= 0x40u;
                {
                  WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                  unk_1ECE91358 = 0u;
                }
                WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v1010, (WebCore::RenderBox *)v1003);
              }
              v1011 = *(_BYTE **)(*(_QWORD *)(v1003 + 88) + 24);
              if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
              {
                if (v1011[36])
                {
                  v1029 = 0;
                  v79 = (int *)(a1 + 168);
                  goto LABEL_2153;
                }
                v1016 = v1011 + 20;
                v79 = (int *)(a1 + 168);
              }
              else
              {
                if (v1011[12])
                {
                  v1029 = 0;
LABEL_2153:
                  v1012 = 164;
                  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
                    v1012 = 160;
                  v1013 = *(_DWORD *)(a1 + v1012);
                  WebCore::RenderBlockFlow::updateStaticInlinePositionForChild((unsigned int *)a1, v1003, v1013);
                  if ((~(unsigned __int16)v1062 & 0x12) != 0)
                  {
                    v1017 = (DWORD1(v1062) >> 31) + 0x7FFFFFFF;
                    if (!__OFSUB__(DWORD1(v1062), DWORD2(v1062)))
                      v1017 = DWORD1(v1062) - DWORD2(v1062);
                    v44 = __OFADD__(v1013, v1017);
                    v1018 = v1013 + v1017;
                    if (v44)
                      v1013 = (v1013 >> 31) + 0x7FFFFFFF;
                    else
                      v1013 = v1018;
                  }
                  v1014 = *(_QWORD *)(v1003 + 144);
                  if (*(_DWORD *)(v1014 + 152) != v1013)
                  {
                    *(_DWORD *)(v1014 + 152) = v1013;
                    if (v1029)
                    {
                      v1015 = *(_DWORD *)(v1003 + 20);
                      if ((v1015 & 0x20) == 0)
                        *(_DWORD *)(v1003 + 20) = v1015 | 0x20;
                    }
                  }
                  goto LABEL_2134;
                }
                v1016 = v1011 + 28;
              }
              v1029 = *v1016 == 0;
              goto LABEL_2153;
            }
            if ((v1009 & 0x800) != 0)
            {
              v1065[0] = v1003;
              WebCore::RenderBlockFlow::layoutBlockChildren(BOOL,WebCore::LayoutUnit &)::$_1::operator()((uint64_t)v1065);
              WebCore::RenderBlockFlow::insertFloatingObject((uint64_t *)a1, (WebCore::RenderBox *)v1003);
              WebCore::RenderBlockFlow::adjustFloatingBlock(a1, (unsigned __int16 *)&v1062);
            }
            else
            {
              WebCore::RenderBlockFlow::layoutBlockChild(a1, (_QWORD *)v1003, (unsigned __int16 *)&v1062, (int *)&v1051, &v1053);
            }
LABEL_2134:
            if (!v361)
              goto LABEL_623;
          }
          v1006 = *(_DWORD *)(v1003 + 20);
LABEL_2126:
          if ((v1006 & 0x20) == 0)
            *(_DWORD *)(v1003 + 20) = v1006 | 0x20;
          if (v1037 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1003 + 1520))(v1003))
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v1003, 1, 0);
          goto LABEL_2131;
        }
      }
    }
LABEL_623:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 2) != 0)
      WebCore::RenderBlockFlow::trimBlockEndChildrenMargins(a1);
    v362 = v1062;
    v363 = *(unsigned int *)(a1 + 71);
    if (v363 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32))
    {
      v364 = *(_QWORD *)((v363 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)) + 8);
      if (v364)
      {
        if ((*(_BYTE *)(v364 + 52) & 7) == 1)
        {
          ++*(_DWORD *)(v364 + 16);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v364 + 1240))(v364))
            goto LABEL_629;
          v622 = v364;
          if ((*(_BYTE *)(v364 + 45) & 2) != 0)
            v622 = *(_QWORD *)(*(_QWORD *)(v364 + 32) + 8);
          v623 = *(_WORD *)(v622 + 98) & 7;
          if (!v623)
            goto LABEL_629;
          if (v623 > 5)
            goto LABEL_1722;
          v624 = 1 << v623;
          if ((v624 & 0x26) == 0)
          {
            if ((v624 & 0x18) == 0)
            {
LABEL_1722:
              __break(0xC471u);
              JUMPOUT(0x1941BD700);
            }
            WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v364);
          }
          v79 = (int *)(a1 + 168);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1))
            goto LABEL_629;
          v625 = (_DWORD *)(v364 + 164);
          if (((*(_DWORD *)(v364 + 124) >> 13) & 6u) - 2 >= 4)
            v626 = (signed int *)(v364 + 164);
          else
            v626 = (signed int *)(v364 + 160);
          v627 = WebCore::RenderBlockFlow::getClearDelta((uint64_t *)a1, (_DWORD *)v364, *v626);
          if (((*(_DWORD *)(v364 + 124) >> 13) & 6u) - 2 < 4)
          {
            v628 = (unsigned int *)(v364 + 152);
            v625 = (_DWORD *)(v364 + 160);
          }
          else
          {
            v628 = (unsigned int *)(v364 + 156);
          }
          v629 = *v628;
          v630 = *v628 + *v625;
          if (__OFADD__(v629, *v625))
            v630 = (v629 >> 31) + 0x7FFFFFFF;
          v79 = (int *)(a1 + 168);
          if (v627 >= v630)
          {
            v631 = WebCore::RenderBlockFlow::marginValuesForChild((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBox *)v364);
            v632 = *(_DWORD *)(v364 + 16);
            if (!v632)
            {
LABEL_1386:
              __break(0xC471u);
              JUMPOUT(0x1941BC5B4);
            }
            *(_DWORD *)(v364 + 16) = v632 - 1;
            v633 = 160;
            if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
              v633 = 164;
            v634 = (int *)(a1 + 160);
            if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
              v634 = (int *)(a1 + 164);
            v635 = *(_DWORD *)(a1 + v633);
            v636 = v635 - v631;
            if (__OFSUB__(v635, v631))
              v636 = (v635 >> 31) + 0x7FFFFFFF;
            *v634 = v636;
            v79 = (int *)(a1 + 168);
          }
          else
          {
LABEL_629:
            v365 = *(_DWORD *)(v364 + 16);
            if (!v365)
              goto LABEL_1386;
            *(_DWORD *)(v364 + 16) = v365 - 1;
          }
        }
      }
    }
    v366 = v362 & 4 | 0x20;
    if ((v362 & 0x12) != 0x12
      && v366 != 36
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3384) != 2
       || (v362 & 8) == 0
       || (v362 & 0x80) == 0))
    {
      v367 = 160;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
        v367 = 164;
      v368 = (int *)(a1 + 160);
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
        v368 = (int *)(a1 + 164);
      v369 = DWORD1(v1062) - DWORD2(v1062);
      if (__OFSUB__(DWORD1(v1062), DWORD2(v1062)))
        v369 = (DWORD1(v1062) >> 31) + 0x7FFFFFFF;
      v370 = *(_DWORD *)(a1 + v367);
      v371 = v370 + v369;
      if (__OFADD__(v370, v369))
        v371 = (v370 >> 31) + 0x7FFFFFFF;
      *v368 = v371;
    }
    v372 = *(_DWORD *)(a1 + 124);
    v373 = 160;
    if (((v372 >> 13) & 6) - 2 >= 4)
      v373 = 164;
    v374 = (int *)(a1 + 160);
    if (((v372 >> 13) & 6) - 2 >= 4)
      v374 = (int *)(a1 + 164);
    v375 = *(_DWORD *)(a1 + v373);
    v44 = __OFADD__(v375, v1033);
    v376 = v375 + v1033;
    v377 = (v375 >> 31) + 0x7FFFFFFF;
    if (!v44)
      v377 = v376;
    v378 = v326 + v1033;
    if (__OFADD__(v326, v1033))
      v378 = (v326 >> 31) + 0x7FFFFFFF;
    if (v377 <= v378)
      v377 = v378;
    *v374 = v377;
    if ((v362 & 0x12) == 0x12 || v366 != 36)
      goto LABEL_694;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 2) == 0)
    {
      v379 = DWORD1(v1062);
      v380 = *(_QWORD *)(a1 + 224);
      if (!v380)
      {
        v381 = (unsigned __int16)v372 >> 13;
        v382 = 3;
        switch((unsigned __int16)v372 >> 13)
        {
          case 1:
            v952 = *v79;
            if (*v79 > SDWORD1(v1062))
              v379 = *v79;
            v384 = v379 & ~(v379 >> 31);
LABEL_1933:
            if (v952 == 0x80000000)
              v953 = 0x7FFFFFFF;
            else
              v953 = -v952 & ~(-v952 >> 31);
            if (v953 <= SDWORD2(v1062))
              v388 = DWORD2(v1062);
            else
              v388 = v953;
            v79 = (int *)(a1 + 168);
LABEL_1940:
            v389 = 0;
            goto LABEL_670;
          case 2:
          case 4:
            v382 = 1;
            goto LABEL_659;
          case 3:
          case 5:
            goto LABEL_659;
          default:
            v382 = 2;
LABEL_659:
            v383 = v79[v382];
            if (v383 > SDWORD1(v1062))
              v379 = v383;
            v384 = v379 & ~(v379 >> 31);
            v385 = 3;
            switch((unsigned __int16)v372 >> 13)
            {
              case 1:
                v952 = *v79;
                goto LABEL_1933;
              case 2:
              case 4:
                v385 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v385 = 2;
                break;
            }
            v386 = v79[v385];
            if (v386 == 0x80000000)
              v387 = 0x7FFFFFFF;
            else
              v387 = -v386 & ~(-v386 >> 31);
            if (v387 <= SDWORD2(v1062))
              v388 = DWORD2(v1062);
            else
              v388 = v387;
            v389 = 3;
            switch((unsigned __int16)v372 >> 13)
            {
              case 1:
                goto LABEL_1940;
              case 2:
              case 4:
                v389 = 1;
                break;
              case 3:
              case 5:
                break;
              default:
                v389 = 2;
                break;
            }
LABEL_670:
            if ((v79[v389] & ~(v79[v389] >> 31)) != v384)
              goto LABEL_1992;
            v390 = v381 - 1;
            if (v390 > 4)
              v391 = 2;
            else
              v391 = qword_1969FC6F0[v390];
            v397 = v79[v391];
            if (v397 == 0x80000000)
              v398 = 0x7FFFFFFF;
            else
              v398 = -v397 & ~(-v397 >> 31);
            break;
        }
        goto LABEL_690;
      }
      if (*(_DWORD *)(v380 + 8) <= SDWORD1(v1062))
        v384 = DWORD1(v1062);
      else
        v384 = *(_DWORD *)(v380 + 8);
      if (*(_DWORD *)(v380 + 12) <= SDWORD2(v1062))
        v388 = DWORD2(v1062);
      else
        v388 = *(_DWORD *)(v380 + 12);
LABEL_1997:
      *(_DWORD *)(v380 + 8) = v384;
      *(_DWORD *)(v380 + 12) = v388;
      v79 = (int *)(a1 + 168);
      goto LABEL_691;
    }
    v380 = *(_QWORD *)(a1 + 224);
    if (v380)
    {
      v384 = *(_DWORD *)(v380 + 8) & ~(*(int *)(v380 + 8) >> 31);
      v388 = *(_DWORD *)(v380 + 12) & ~(*(int *)(v380 + 12) >> 31);
      goto LABEL_1997;
    }
    v968 = (unsigned __int16)v372 >> 13;
    v998 = 3;
    switch((int)v968)
    {
      case 1:
        v1000 = *v1048;
        v384 = v1000 & ~(v1000 >> 31);
LABEL_2104:
        if (v1000 == 0x80000000)
          v388 = 0x7FFFFFFF;
        else
          v388 = -v1000 & ~(-v1000 >> 31);
LABEL_2107:
        v970 = 0;
        goto LABEL_1989;
      case 2:
      case 4:
        v998 = 1;
        goto LABEL_1983;
      case 3:
      case 5:
        goto LABEL_1983;
      default:
        v998 = 2;
LABEL_1983:
        v384 = v1048[v998] & ~(v1048[v998] >> 31);
        v997 = 3;
        switch((int)v968)
        {
          case 1:
            v1000 = *v1048;
            goto LABEL_2104;
          case 2:
          case 4:
            v997 = 1;
            break;
          case 3:
          case 5:
            break;
          default:
            v997 = 2;
            break;
        }
        v969 = v1048[v997];
        if (v969 == 0x80000000)
          v388 = 0x7FFFFFFF;
        else
          v388 = -v969 & ~(-v969 >> 31);
        v970 = 3;
        switch((int)v968)
        {
          case 1:
            goto LABEL_2107;
          case 2:
          case 4:
            v970 = 1;
            break;
          case 3:
          case 5:
            break;
          default:
            v970 = 2;
            break;
        }
LABEL_1989:
        if ((v1048[v970] & ~(v1048[v970] >> 31)) != v384)
          goto LABEL_1992;
        v971 = v968 - 1;
        if (v971 > 4)
          v972 = 2;
        else
          v972 = qword_1969FC6F0[v971];
        v79 = (int *)(a1 + 168);
        v978 = v1048[v972];
        if (v978 == 0x80000000)
          v398 = 0x7FFFFFFF;
        else
          v398 = -v978 & ~(-v978 >> 31);
        break;
    }
LABEL_690:
    if (v398 != v388)
    {
LABEL_1992:
      v973 = (WebCore::RenderBlockFlowRareData *)WTF::fastMalloc((WTF *)0x28);
      WebCore::RenderBlockFlowRareData::RenderBlockFlowRareData(v973, (const WebCore::RenderBlockFlow *)a1);
      v974 = *(WTF **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v380;
      if (v974)
      {
        v975 = (WTF *)*((_QWORD *)v974 + 3);
        *((_QWORD *)v974 + 3) = 0;
        if (v975)
        {
          if (*(_DWORD *)v975 == 1)
            WTF::fastFree(v975, v116);
          else
            --*(_DWORD *)v975;
        }
        WTF::fastFree(v974, v116);
        v380 = *(_QWORD *)(a1 + 224);
      }
      goto LABEL_1997;
    }
LABEL_691:
    if ((v362 & 0x80) == 0)
    {
      v399 = *(_WORD *)(a1 + 69) & 0xFEFF;
LABEL_693:
      *(_WORD *)(a1 + 69) = v399;
      goto LABEL_694;
    }
    v685 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
    if (v685 > 4)
      v686 = 2;
    else
      v686 = qword_1969FC6F0[v685];
    if (!v79[v686])
    {
      v399 = *(_WORD *)(a1 + 69) | 0x100;
      goto LABEL_693;
    }
LABEL_694:
    if ((v1036 & 1) == 0)
    {
      v833 = *(_DWORD *)(v321 + 20);
      if (!v833)
      {
        __break(0xC471u);
        JUMPOUT(0x1941BDED4);
      }
      *(_DWORD *)(v321 + 20) = v833 - 1;
      v79 = (int *)(a1 + 168);
    }
    v400 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
    v401 = *(unsigned int *)(v400 + 508);
    v61 = v1031;
    if ((_DWORD)v401)
    {
      v285 = *(_QWORD *)(*(_QWORD *)(v400 + 496) + 8 * v401 - 8);
      if (v285)
      {
        if ((((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 642) << 48) & 0xC000000000000) != 0)
          goto LABEL_1595;
        if (!*(_BYTE *)(v285 + 160) || !*(_BYTE *)(v285 + 144) || (*(_BYTE *)(a1 + 22) & 4) == 0)
          goto LABEL_179;
        v402 = *(_DWORD *)(a1 + 240);
        if (v402 == 1)
        {
          v61 = v1031;
          v79 = (int *)(a1 + 168);
          if (!*v1042)
            goto LABEL_179;
          v403 = *((_QWORD *)*v1042 + 10);
          if (!v403 || *(_DWORD *)(v403 + 60) < 2u)
            goto LABEL_179;
          v404 = *(_DWORD *)(v403 + 44);
        }
        else
        {
          v61 = v1031;
          v79 = (int *)(a1 + 168);
          if (v402 != 2 || !*v1042)
            goto LABEL_179;
          v404 = WebCore::LegacyLineLayout::lineCount(*v1042);
        }
        v61 = v1031;
        v79 = (int *)(a1 + 168);
        if (v404)
        {
          if (!*(_BYTE *)(v285 + 160))
            goto LABEL_1866;
          *(_BYTE *)(v285 + 144) = 0;
          v61 = v1031;
          goto LABEL_451;
        }
      }
    }
LABEL_179:
    v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    if (__OFADD__(v132, v133))
      v134 = (v132 >> 31) + 0x7FFFFFFF;
    else
      v134 = v132 + v133;
    v135 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v135 = 1352;
    v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v135))(a1);
    v138 = v136 << 6;
    if (v136 < -33554432)
      v138 = 0x80000000;
    if (v136 > 0x1FFFFFF)
      v138 = 0x7FFFFFFF;
    v44 = __OFADD__(v134, v138);
    v139 = v134 + v138;
    v140 = v44 ? (v134 >> 31) + 0x7FFFFFFF : v139;
    v141 = *(_QWORD *)(a1 + 216);
    if (v141)
    {
      v679 = *(_QWORD **)(v141 + 8);
      v66 = v1049;
      for (LODWORD(v141) = 0; v679; v679 = (_QWORD *)v679[2])
      {
        v680 = (_DWORD *)*v679;
        if ((*(_BYTE *)(*v679 + 36) & 0x10) != 0 && (*(_BYTE *)(*v679 + 36) & 3) != 0)
        {
          if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
          {
            v681 = v680[2];
            v682 = v680[4];
          }
          else
          {
            v681 = v680[3];
            v682 = v680[5];
          }
          v44 = __OFADD__(v681, v682);
          v683 = v681 + v682;
          v684 = (v681 >> 31) + 0x7FFFFFFF;
          if (v44)
            v683 = v684;
          if ((int)v141 <= v683)
            LODWORD(v141) = v683;
        }
      }
    }
    else
    {
      v66 = v1049;
    }
    v142 = 164;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v142 = 160;
    v143 = *(_DWORD *)(a1 + v142);
    v44 = __OFSUB__(v143, v140);
    v144 = v143 - v140;
    v145 = (v143 >> 31) + 0x7FFFFFFF;
    if (!v44)
      v145 = v144;
    if ((int)v141 > v145
      && WebCore::RenderElement::createsNewFormattingContext((WebCore::RenderElement *)a1))
    {
      v676 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom(a1, 3u);
      v677 = v676 + v140;
      if (__OFADD__(v676, v140))
        v677 = 0x7FFFFFFF;
      v678 = 164;
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v678 = 160;
      *(_DWORD *)(a1 + v678) = v677;
      v66 = v1049;
      v79 = (int *)(a1 + 168);
    }
    v146 = *(_QWORD *)(a1 + 224);
    if (!v146 || (*(_DWORD *)(v146 + 16) & 0x80000000) != 0)
      break;
    *(_DWORD *)(a1 + 20) |= 0x200u;
    v65 = v1045;
    a3 = v1046;
    v72 = (_QWORD *)&unk_1ECE91000;
    if (v1047)
    {
      WebCore::LocalFrameViewLayoutContext::popLayoutState((uint64_t)v1043, v137);
      if (v1044)
        --*(_DWORD *)(v76 + 492);
    }
  }
  if (v1047)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState((uint64_t)v1043, v137);
    if (v1044)
      --*(_DWORD *)(v76 + 492);
  }
  v412 = *(_QWORD *)(a1 + 224);
  if (!v412)
    goto LABEL_722;
  v604 = *(_QWORD *)(v412 + 24);
  if (!v604)
    goto LABEL_722;
  v605 = *(_QWORD *)(v604 + 8);
  if (!v605 || *(_BYTE *)(v605 + 365) || !*(_BYTE *)(v605 + 366))
    goto LABEL_722;
  v606 = 0;
  v607 = 1;
  *(_WORD *)(v605 + 365) = 1;
  while (1)
  {
    if (v412 && (v949 = *(_QWORD *)(v412 + 24)) != 0)
      v608 = *(WebCore::RenderMultiColumnFlow **)(v949 + 8);
    else
      v608 = 0;
    MultiColumnSet = WebCore::RenderMultiColumnFlow::firstMultiColumnSet(v608);
    if (!MultiColumnSet)
      break;
    v610 = (WebCore::RenderMultiColumnSet *)MultiColumnSet;
    v611 = 0;
    do
    {
      while (1)
      {
        v611 |= WebCore::RenderMultiColumnSet::recalculateColumnHeight(v610, v607 & 1);
        if ((v611 & 1) != 0)
          break;
        v610 = (WebCore::RenderMultiColumnSet *)WebCore::RenderMultiColumnFlow::firstMultiColumnSet(v610);
        if (!v610)
          goto LABEL_1709;
      }
      v612 = *((_DWORD *)v610 + 5);
      if ((v612 & 0x20) == 0)
        *((_DWORD *)v610 + 5) = v612 | 0x20;
      v610 = (WebCore::RenderMultiColumnSet *)WebCore::RenderMultiColumnFlow::firstMultiColumnSet(v610);
    }
    while (v610);
    v613 = *(_QWORD *)(a1 + 224);
    if (v613)
    {
      v613 = *(_QWORD *)(v613 + 24);
      if (v613)
        v613 = *(_QWORD *)(v613 + 8);
    }
    v614 = *(_DWORD *)(v613 + 20);
    if ((v614 & 0x20) == 0)
      *(_DWORD *)(v613 + 20) = v614 | 0x20;
    v615 = *(_DWORD *)(a1 + 20);
    if ((v615 & 0x20) == 0)
      *(_DWORD *)(a1 + 20) = v615 | 0x20;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1656))(a1, 0, 0);
    v607 = 0;
    v412 = *(_QWORD *)(a1 + 224);
    v606 = 1;
  }
LABEL_1709:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 24) + 8) + 365) = 0;
  v66 = v1049;
  v79 = (int *)(a1 + 168);
  if ((v606 & 1) == 0)
  {
LABEL_722:
    v413 = (int *)(a1 + 164);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
      v413 = (int *)(a1 + 160);
    v414 = *v413;
    v415 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v416 = *(_QWORD *)a1;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    {
      v886 = *(_DWORD *)(a1 + 160);
      v887 = (*(uint64_t (**)(uint64_t))(v416 + 1016))(a1);
      if (__OFSUB__(v886, v887))
        v888 = (v886 >> 31) + 0x7FFFFFFF;
      else
        v888 = v886 - v887;
      v889 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
      if (__OFSUB__(v888, v889))
        v421 = (v888 >> 31) + 0x7FFFFFFF;
      else
        v421 = v888 - v889;
      v422 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
    }
    else
    {
      v417 = *(_DWORD *)(a1 + 164);
      v418 = (*(uint64_t (**)(uint64_t))(v416 + 1000))(a1);
      if (__OFSUB__(v417, v418))
        v419 = (v417 >> 31) + 0x7FFFFFFF;
      else
        v419 = v417 - v418;
      v420 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
      if (__OFSUB__(v419, v420))
        v421 = (v419 >> 31) + 0x7FFFFFFF;
      else
        v421 = v419 - v420;
      v422 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
    }
    v423 = v422 << 6;
    if (v422 < -33554432)
      v423 = 0x80000000;
    if (v422 > 0x1FFFFFF)
      v423 = 0x7FFFFFFF;
    v44 = __OFSUB__(v421, v423);
    v424 = v421 - v423;
    if (v44)
      v424 = (v421 >> 31) + 0x7FFFFFFF;
    v425 = v424 & ~(v424 >> 31);
    v44 = __OFADD__(v415, v425);
    v426 = v415 + v425;
    if (v44)
      v427 = (v415 >> 31) + 0x7FFFFFFF;
    else
      v427 = v426;
    if ((*(_BYTE *)(a1 + 52) & 7) != 1 || (*(_BYTE *)(a1 + 53) & 2) == 0)
    {
LABEL_744:
      if ((*(_BYTE *)(a1 + 45) & 1) != 0)
      {
        v428 = 0;
      }
      else
      {
        v428 = *(WebCore::Element **)(*(_QWORD *)(a1 + 24) + 8);
        if (v428 && (*((_WORD *)v428 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1941BBC9CLL);
        }
      }
      v429 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 40);
      v430 = (*(_DWORD *)(v429 + 636) >> 18) & 3;
      if (!v430)
      {
LABEL_748:
        v431 = *(_BYTE *)(v429 + 642) & 3;
        if (v431 == 1)
          goto LABEL_1392;
        v432 = *(_BYTE *)(v429 + 462);
        if (v431 == 2)
          v432 |= 0x19u;
        if ((v432 & 4) != 0)
        {
LABEL_1392:
          if (((*(_BYTE *)(a1 + 20) & 1) != 0
             || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)a1))
            && (*(_QWORD *)(a1 + 96) & 0x1FLL) != 0x19)
          {
            v760 = *(unsigned __int8 *)(a1 + 46);
            if ((v760 - 36) <= 4)
            {
              v66 = v1049;
              v79 = (int *)(a1 + 168);
              if (v760 == 36)
LABEL_1397:
                WebCore::RenderBox::overrideLogicalHeightForSizeContainment((WebCore::RenderBox *)a1);
            }
            else
            {
              v66 = v1049;
              v79 = (int *)(a1 + 168);
              if (v760 != 35 && v760 != 63)
              {
LABEL_1396:
                if (v760 == 12)
                  goto LABEL_752;
                goto LABEL_1397;
              }
            }
          }
        }
LABEL_752:
        v433 = *(_QWORD *)a1;
        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        {
          v890 = *(_DWORD *)(a1 + 160);
          v891 = (*(uint64_t (**)(uint64_t))(v433 + 1016))(a1);
          v892 = v890 - v891;
          if (__OFSUB__(v890, v891))
            v892 = (v890 >> 31) + 0x7FFFFFFF;
          v893 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
          v894 = v892 - v893;
          if (__OFSUB__(v892, v893))
            v894 = (v892 >> 31) + 0x7FFFFFFF;
          v895 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
          v896 = v895 << 6;
          if (v895 < -33554432)
            v896 = 0x80000000;
          if (v895 > 0x1FFFFFF)
            v896 = 0x7FFFFFFF;
          v44 = __OFSUB__(v894, v896);
          v897 = v894 - v896;
          if (v44)
            v897 = (v894 >> 31) + 0x7FFFFFFF;
          v898 = v897 & ~(v897 >> 31);
          v899 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
          v900 = v898 - v899;
          if (__OFSUB__(v898, v899))
            v900 = 0x7FFFFFFF;
          v901 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
          v902 = v900 - v901;
          if (__OFSUB__(v900, v901))
            v902 = (v900 >> 31) + 0x7FFFFFFF;
          if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
          {
            v979 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
            if (v979 >= -33554432)
            {
              v903 = v979 << 6;
              if (v979 > 0x1FFFFFF)
                v903 = 0x7FFFFFFF;
            }
            else
            {
              v903 = 0x80000000;
            }
          }
          else
          {
            v903 = 0;
          }
          v448 = v902 - v903;
          if (__OFSUB__(v902, v903))
            v448 = (v902 >> 31) + 0x7FFFFFFF;
          v66 = v1049;
          v79 = (int *)(a1 + 168);
        }
        else
        {
          v434 = *(_DWORD *)(a1 + 164);
          v435 = (*(uint64_t (**)(uint64_t))(v433 + 1000))(a1);
          v436 = v434 - v435;
          if (__OFSUB__(v434, v435))
            v436 = (v434 >> 31) + 0x7FFFFFFF;
          v437 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
          v438 = v436 - v437;
          if (__OFSUB__(v436, v437))
            v438 = (v436 >> 31) + 0x7FFFFFFF;
          v439 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
          v440 = v439 << 6;
          if (v439 < -33554432)
            v440 = 0x80000000;
          if (v439 > 0x1FFFFFF)
            v440 = 0x7FFFFFFF;
          v44 = __OFSUB__(v438, v440);
          v441 = v438 - v440;
          if (v44)
            v441 = (v438 >> 31) + 0x7FFFFFFF;
          v442 = v441 & ~(v441 >> 31);
          v443 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
          v444 = v442 - v443;
          if (__OFSUB__(v442, v443))
            v444 = 0x7FFFFFFF;
          v445 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
          v446 = v444 - v445;
          if (__OFSUB__(v444, v445))
            v446 = (v444 >> 31) + 0x7FFFFFFF;
          if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
          {
            v823 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
            if (v823 >= -33554432)
            {
              v447 = v823 << 6;
              if (v823 > 0x1FFFFFF)
                v447 = 0x7FFFFFFF;
            }
            else
            {
              v447 = 0x80000000;
            }
            v66 = v1049;
            v79 = (int *)(a1 + 168);
          }
          else
          {
            v447 = 0;
          }
          v448 = v446 - v447;
          if (__OFSUB__(v446, v447))
            v448 = (v446 >> 31) + 0x7FFFFFFF;
        }
        v449 = *(_DWORD *)(a1 + 20);
        if ((v449 & 0x800) != 0)
          goto LABEL_799;
        if ((v449 & 0x1800000) == 0x1000000)
          goto LABEL_799;
        v450 = *(_QWORD *)(a1 + 32);
        if (!v450)
          goto LABEL_799;
        v451 = *(_QWORD *)(v450 + 8);
        if (!v451 || (*(char *)(v451 + 45) & 0x80000000) == 0)
          goto LABEL_799;
        ++*(_DWORD *)(v451 + 16);
        v452 = (uint64_t *)WebCore::gOverridingLogicalHeightMap;
        if (WebCore::gOverridingLogicalHeightMap)
        {
          ++*(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8);
          v453 = *(_QWORD *)(a1 + 8);
          if (v453 && *(_QWORD *)(v453 + 8))
          {
            v454 = *v452;
            if (*v452)
            {
              v455 = *(_DWORD *)(v454 - 8);
              v456 = (~(v453 << 32) + v453) ^ ((unint64_t)(~(v453 << 32) + v453) >> 22);
              v457 = 9 * ((v456 + ~(v456 << 13)) ^ ((v456 + ~(v456 << 13)) >> 8));
              v458 = (v457 ^ (v457 >> 15)) + ~((v457 ^ (v457 >> 15)) << 27);
              v459 = v455 & ((v458 >> 31) ^ v458);
              for (jj = 1; ; ++jj)
              {
                v461 = *(_QWORD *)(v454 + 16 * v459);
                if (!v461)
                {
                  v463 = *(unsigned int *)(v454 - 4);
                  v464 = v454 + 16 * v463;
                  v465 = v464;
                  goto LABEL_788;
                }
                if (v461 != -1 && v461 == v453)
                  break;
                v459 = (v459 + jj) & v455;
              }
              v464 = v454 + 16 * v459;
              v463 = *(unsigned int *)(v454 - 4);
              v465 = v454 + 16 * v463;
LABEL_788:
              *((_QWORD *)&v1062 + 1) = v464;
              v466 = v454 + 16 * v463;
            }
            else
            {
              v464 = 0;
              v465 = 0;
              v466 = 0;
              *((_QWORD *)&v1062 + 1) = 0;
              *(_QWORD *)&v1063 = 0;
            }
            for (*((_QWORD *)&v1063 + 1) = v466; v464 != v466; v79 = (int *)(a1 + 168))
            {
              if (*(_QWORD *)(*(_QWORD *)v464 + 8))
                break;
              v1019 = v464 + 16;
              *((_QWORD *)&v1062 + 1) = v464 + 16;
              v464 = v465;
              if (v1019 != v465)
              {
                v464 = v1019;
                while ((unint64_t)(*(_QWORD *)v464 + 1) <= 1)
                {
                  v464 += 16;
                  *((_QWORD *)&v1062 + 1) = v464;
                  if (v464 == v465)
                  {
                    v464 = v465;
                    break;
                  }
                }
              }
              v66 = v1049;
            }
          }
          else
          {
            WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v1062, v452);
            v454 = *(_QWORD *)WebCore::gOverridingLogicalHeightMap;
          }
          if (v454)
            v454 += 16 * *(unsigned int *)(v454 - 4);
          if (*((_QWORD *)&v1062 + 1) != v454)
          {
LABEL_797:
            v470 = *(_DWORD *)(v451 + 16);
            if (!v470)
            {
              __break(0xC471u);
              JUMPOUT(0x1941BBDDCLL);
            }
            *(_DWORD *)(v451 + 16) = v470 - 1;
LABEL_799:
            v471 = *(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1312);
            if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 6 > 0xFFFFFFFB)
            {
              v471(&v1062, a1, *(unsigned int *)(a1 + 160), *(unsigned int *)(a1 + 152));
              v927 = *(_DWORD *)(a1 + 124);
              v928 = ((v927 >> 13) & 6) - 2;
              v929 = v928 >= 4;
              v475 = v928 < 4;
              v930 = 164;
              if (!v929)
                v930 = 160;
              v931 = 156;
              if (!v929)
                v931 = 152;
              v932 = DWORD1(v1062);
              *(_DWORD *)(a1 + v930) = v1062;
              *(_DWORD *)(a1 + v931) = v932;
              v933 = ((unsigned __int16)v927 >> 13) - 1;
              v994 = 3;
              switch(v933)
              {
                case 0:
                  *(_DWORD *)(a1 + 176) = DWORD2(v1062);
                  v480 = HIDWORD(v1062);
                  v66 = v1049;
                  v79 = (int *)(a1 + 168);
LABEL_1834:
                  v857 = 0;
                  break;
                case 1:
                case 3:
                  goto LABEL_1878;
                case 2:
                case 4:
                  v994 = 1;
                  goto LABEL_1878;
                default:
                  v994 = 0;
LABEL_1878:
                  v1048[v994] = DWORD2(v1062);
                  v480 = HIDWORD(v1062);
                  v857 = 3;
                  v66 = v1049;
                  v79 = (int *)(a1 + 168);
                  switch(v933)
                  {
                    case 0:
                      goto LABEL_1834;
                    case 1:
                    case 3:
LABEL_1641:
                      v857 = 1;
                      break;
                    case 2:
                    case 4:
                      goto LABEL_808;
                    default:
                      v857 = 2;
                      v66 = v1049;
                      v79 = (int *)(a1 + 168);
                      break;
                  }
                  break;
              }
            }
            else
            {
              v471(&v1062, a1, *(unsigned int *)(a1 + 164), *(unsigned int *)(a1 + 156));
              v472 = *(_DWORD *)(a1 + 124);
              v473 = ((v472 >> 13) & 6) - 2;
              v474 = v473 >= 4;
              v475 = v473 < 4;
              v476 = 164;
              if (!v474)
                v476 = 160;
              v477 = 156;
              if (!v474)
                v477 = 152;
              v478 = DWORD1(v1062);
              *(_DWORD *)(a1 + v476) = v1062;
              *(_DWORD *)(a1 + v477) = v478;
              v479 = ((unsigned __int16)v472 >> 13) - 1;
              v862 = 3;
              switch(v479)
              {
                case 0:
                  *(_DWORD *)(a1 + 176) = DWORD2(v1062);
                  v480 = HIDWORD(v1062);
                  goto LABEL_1834;
                case 1:
                case 3:
                  break;
                case 2:
                case 4:
                  v862 = 1;
                  break;
                default:
                  v862 = 0;
                  break;
              }
              v79[v862] = DWORD2(v1062);
              v480 = HIDWORD(v1062);
              v857 = 3;
              switch(v479)
              {
                case 0:
                  goto LABEL_1834;
                case 1:
                case 3:
                  goto LABEL_1641;
                case 2:
                case 4:
                  break;
                default:
                  v857 = 2;
                  break;
              }
            }
LABEL_808:
            v79[v857] = v480;
            v481 = (int *)(a1 + 164);
            if (v475)
              v481 = (int *)(a1 + 160);
            v482 = *v481;
            if (v66 && v1040 <= v482
              || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 528)
                                                                            + 8)
                                                                + 24)
                                                    + 8)
                                        + 112)
                            + 664) & 0x800) == 0
              || *(_BYTE *)(a1 + 46) == 37)
            {
              v486 = 0;
              v801 = *(_QWORD *)(a1 + 224);
              if (!v801)
                goto LABEL_818;
              v802 = 0;
              goto LABEL_1495;
            }
            v483 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 32);
            v485 = *(_WORD *)(v483 + 120);
            v484 = (unsigned __int16 *)(v483 + 120);
            if ((v485 & 0x7F) == 0)
              goto LABEL_814;
            v486 = 0;
            if ((WebCore::StyleContentAlignmentData::isStartward(v484, 0, 0) & 1) != 0)
              goto LABEL_815;
            if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
              v1050 = (_DWORD *)(a1 + 160);
            v486 = *v1050 - v414;
            if (__OFSUB__(*v1050, v414))
              v486 = (*v1050 >> 31) + 0x7FFFFFFF;
            if (v486 <= 0)
            {
              if ((v837 = *v484, v838 = (v837 >> 7) & 3, v838 == 2)
                || !v838
                && (v839 = (unsigned __int16)*(_DWORD *)(a1 + 96) >> 13, v839 != 1)
                && (v839 - 3) > 1
                || (v837 & 0xF) == 0)
              {
LABEL_814:
                v486 = 0;
LABEL_815:
                if (__OFADD__((_DWORD)v427, v486))
                  LODWORD(v427) = (v427 >> 31) + 0x7FFFFFFF;
                else
                  LODWORD(v427) = v427 + v486;
                if ((v486 & 0x80000000) == 0)
                {
LABEL_818:
                  v487 = *(_DWORD *)(a1 + 20);
                  if ((v487 & 0x20000) != 0)
                  {
                    v505 = a1;
                    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
                      v505 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
                    v506 = *(_QWORD *)(v505 + 88);
                    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v506 + 32) + 40) + 20))
                      goto LABEL_847;
                    v507 = *(_QWORD **)(v506 + 40);
                    if (v507[41] || v507[38] || v507[39] || v507[40] || (v487 & 0x100000) != 0)
                      goto LABEL_847;
                  }
                  if ((v487 & 0x4000) == 0)
                    goto LABEL_820;
                  v663 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
                  v664 = v663 & v1041;
                  for (kk = 1; ; v664 = (v666 + kk++) & v663)
                  {
                    v666 = v664;
                    v667 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v664);
                    if (v667 != -1 && *(_QWORD *)(v667 + 8) == a1)
                      break;
                  }
                  if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v666 + 8))
                  {
LABEL_847:
                    v489 = 1;
                  }
                  else
                  {
LABEL_820:
                    v488 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
                    v909 = 2;
                    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
                    {
                      case 1:
                      case 2:
                        goto LABEL_822;
                      case 3:
                      case 5:
                        v488 = 3;
                        goto LABEL_822;
                      case 4:
                        goto LABEL_823;
                      default:
                        v488 = 0;
LABEL_822:
                        v909 = v488;
LABEL_823:
                        v489 = (v909 & 0xFFFFFFFD) == 1;
                        break;
                    }
                  }
                  *(_QWORD *)&v1062 = *(_QWORD *)(a1 + 152);
                  v490 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248);
                  v491 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v490 + 336, (WebCore::RenderObject *)a1, (int *)&v1062, v1046, v1045);
                  v493 = v491;
                  if (v489 && v491)
                    ++*(_DWORD *)(v490 + 492);
                  if (v414 > v482 && v1053 > v482 && (*(_BYTE *)(a1 + 22) & 4) == 0)
                  {
                    v1065[0] = a1;
                    *(_QWORD *)&v1062 = WebCore::RenderChildIteratorAdapter<WebCore::RenderBlockFlow>::begin(v1065);
                    *((_QWORD *)&v1062 + 1) = v492;
                    if (v492)
                    {
                      v769 = v492;
                      do
                      {
                        v770 = v769[5];
                        if ((v770 & 0x800) == 0 && (v770 & 0x1800000) != 0x1000000)
                        {
                          v771 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom((uint64_t)v769, 3u);
                          v772 = v769 + 38;
                          if (((v769[31] >> 13) & 6) - 2 >= 4)
                            v772 = v769 + 39;
                          v773 = *v772;
                          v44 = __OFADD__(v771, v773);
                          v774 = v771 + v773;
                          if (v44)
                            v774 = 0x7FFFFFFF;
                          if (v774 > v482)
                            WebCore::RenderBlockFlow::addOverhangingFloats((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBlockFlow *)v769, 0);
                        }
                        WebCore::RenderChildIterator<WebCore::RenderBlockFlow>::operator++((uint64_t)&v1062);
                        v769 = (int *)*((_QWORD *)&v1062 + 1);
                      }
                      while (*((_QWORD *)&v1062 + 1));
                    }
                  }
                  if ((_DWORD)v61 == v482 && !v486)
                  {
                    v494 = (_BYTE *)&unk_1ECE91000;
                  }
                  else
                  {
                    v1061 = 1;
                    v494 = &unk_1ECE91000;
                  }
                  if (v494[872] == 1)
                  {
                    v495 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
                  }
                  else
                  {
                    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                    unk_1ECE91358 = 0u;
                    v495 = 1;
                    v494[872] = 1;
                  }
                  DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v495;
                  v496 = *(_QWORD *)(a1 + 8);
                  if (v496
                    && *(_QWORD *)(v496 + 8)
                    && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
                  {
                    v497 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
                    v498 = (~(v496 << 32) + v496) ^ ((unint64_t)(~(v496 << 32) + v496) >> 22);
                    v499 = 9 * ((v498 + ~(v498 << 13)) ^ ((v498 + ~(v498 << 13)) >> 8));
                    v500 = (v499 ^ (v499 >> 15)) + ~((v499 ^ (v499 >> 15)) << 27);
                    v501 = v497 & ((v500 >> 31) ^ v500);
                    for (mm = 1; ; ++mm)
                    {
                      v503 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants
                                       + 16 * v501);
                      if (!v503)
                        break;
                      if (v503 != -1 && v503 == v496)
                      {
                        v508 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants
                                         + 16 * v501
                                         + 8);
                        if (v508)
                        {
                          v509 = *(_QWORD **)(v508 + 8);
                          if (v509)
                          {
                            while (1)
                            {
                              v492 = *(int **)(*v509 + 8);
                              if (v492)
                                break;
                              v509 = (_QWORD *)v509[2];
                              if (!v509)
                                goto LABEL_866;
                            }
LABEL_861:
                            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1720))(a1);
                            while (1)
                            {
                              v509 = (_QWORD *)v509[2];
                              if (!v509)
                                break;
                              v492 = *(int **)(*v509 + 8);
                              if (v492)
                              {
                                ++*(_DWORD *)(v508 + 24);
                                goto LABEL_861;
                              }
                            }
                            ++*(_DWORD *)(v508 + 24);
                          }
                        }
                        break;
                      }
                      v501 = (v501 + mm) & v497;
                    }
                  }
LABEL_866:
                  if (v493)
                  {
                    WebCore::LocalFrameViewLayoutContext::popLayoutState(v490 + 336, v492);
                    if (v489)
                      --*(_DWORD *)(v490 + 492);
                  }
                  v510 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248);
                  v511 = (uint64_t *)(v510 + 536);
                  v512 = *(_DWORD *)(v510 + 544);
                  *(_DWORD *)(v510 + 544) = v512 + 1;
                  if (v512 > *(_DWORD *)(v510 + 548))
                    WTF::WeakHashMap<WebCore::RenderBlock,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(v511, v492);
                  v513 = *(_QWORD *)(a1 + 8);
                  if (!v513 || !*(_QWORD *)(v513 + 8))
                  {
                    v1062 = 0uLL;
                    WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1062, v492);
                    goto LABEL_874;
                  }
                  *(_QWORD *)&v1062 = *(_QWORD *)(a1 + 8);
                  if (!*v511)
                  {
LABEL_874:
                    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1752))(a1, v427, 0);
                    v514 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                             + 8)
                                                 + 1944)
                                     + 248);
                    v515 = *(unsigned int *)(v514 + 508);
                    if ((_DWORD)v515)
                    {
                      v516 = *(_DWORD **)(*(_QWORD *)(v514 + 496) + 8 * v515 - 8);
                      if (v516)
                      {
                        if (v516[18])
                        {
                          v821 = 156;
                          if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
                            v821 = 152;
                          v822 = WebCore::RenderLayoutState::pageLogicalOffset(v516, a1, *(_DWORD *)(a1 + v821));
                          WebCore::RenderBlock::setPageLogicalOffset(a1, (void *)v822);
                        }
                      }
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
                    if ((*(_BYTE *)(a1 + 22) & 1) != 0)
                    {
                      v551 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
                      if ((v551 > 5 || ((1 << v551) & 0x2A) == 0)
                        && (v552 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                                              + 40)
                                                                                  + 8)
                                                                      + 1944)
                                                          + 248)
                                              + 528)) != 0
                        && *v552)
                      {
                        WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v552 + 2), (_QWORD *)a1, (uint64_t)&v1062);
                      }
                      else
                      {
                        v555 = *(_QWORD *)(a1 + 144);
                        if (v555)
                        {
                          WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
                          v556 = *(WebCore::RenderLayerScrollableArea **)(v555 + 264);
                          if (v556)
                            WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v556);
                        }
                      }
                    }
                    if (!v1060[0])
                      goto LABEL_879;
                    if (v1060[1])
                    {
                      v521 = 1;
                      v520 = v1055;
                    }
                    else
                    {
                      v520 = v1055;
                      v521 = (*((_DWORD *)v1055 + 5) & 8) != 0;
                    }
                    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v520 + 464))(&v1062);
                    v523 = v1055;
                    v522 = v1056;
                    if (!v1056)
                    {
                      v524 = 0;
                      goto LABEL_888;
                    }
                    v524 = *(_QWORD *)(v1056 + 8);
                    if (!v524)
                    {
                      v524 = WTF::fastCompactMalloc((WTF *)0x10);
                      *(_DWORD *)v524 = 1;
                      *(_QWORD *)(v524 + 8) = v522;
                      v924 = *(WTF **)(v522 + 8);
                      *(_QWORD *)(v522 + 8) = v524;
                      if (v924)
                      {
                        if (*(_DWORD *)v924 == 1)
                        {
                          WTF::fastFree(v924, v923);
                          v524 = *(_QWORD *)(v522 + 8);
                          if (!v524)
                          {
LABEL_888:
                            v1065[0] = v524;
                            v526 = WebCore::RenderElement::repaintAfterLayoutIfNeeded(v523, v1065, (const WebCore::FillLayer *)v521, &v1057, &v1062);
                            v527 = (WTF *)v1065[0];
                            v1065[0] = 0;
                            if (v527)
                            {
                              if (*(_DWORD *)v527 == 1)
                                WTF::fastFree(v527, v525);
                              else
                                --*(_DWORD *)v527;
                            }
                            if ((v526 & 1) != 0)
                              goto LABEL_880;
LABEL_879:
                            v518 = v1054;
                            v517 = HIDWORD(v1054);
                            if (HIDWORD(v1054) == (_DWORD)v1054)
                              goto LABEL_880;
                            if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0
                              || (*(_BYTE *)(a1 + 120) & 0x30) != 0)
                            {
                              v550 = a1;
                              if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
                              {
                                v550 = a1;
                                do
                                  v550 = *(_QWORD *)(*(_QWORD *)(v550 + 32) + 8);
                                while ((*(_BYTE *)(v550 + 45) & 0x10) == 0);
                              }
                              while ((*(_BYTE *)(v550 + 21) & 0x80) == 0)
                              {
                                do
                                  v550 = *(_QWORD *)(*(_QWORD *)(v550 + 32) + 8);
                                while ((*(_BYTE *)(v550 + 45) & 0x10) == 0);
                              }
                              if ((*(_BYTE *)(*(_QWORD *)(v550 + 144) + 26) & 8) == 0)
                                goto LABEL_880;
                            }
                            v528 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
                            v529 = *(_DWORD **)(a1 + 192);
                            if (v528 < 4)
                            {
                              if (v529)
                              {
                                LODWORD(v530) = v529[6];
                                v925 = (uint64_t)(v529 + 7);
                              }
                              else
                              {
                                LODWORD(v530) = 0;
                                v925 = a1 + 160;
                              }
                              v926 = *(_DWORD *)(v925 + 4);
                              v534 = v530 + v926;
                              if (__OFADD__((_DWORD)v530, v926))
                                v534 = (v530 >> 31) + 0x7FFFFFFF;
                            }
                            else
                            {
                              if (v529)
                              {
                                LODWORD(v530) = v529[5];
                                v531 = v529 + 7;
                              }
                              else
                              {
                                LODWORD(v530) = 0;
                                v531 = (int *)(a1 + 160);
                              }
                              v532 = *v531;
                              v44 = __OFADD__((_DWORD)v530, v532);
                              v533 = v530 + v532;
                              if (v44)
                                v534 = (v530 >> 31) + 0x7FFFFFFF;
                              else
                                v534 = v533;
                            }
                            v535 = *(_DWORD *)(a1 + 20);
                            if ((v535 & 0x10000) != 0)
                            {
                              v696 = WebCore::RenderBox::layoutOverflowRect((WebCore::RenderBox *)a1);
                              if (v528 <= 3)
                                v696 >>= 32;
                              if ((int)v530 >= (int)v696)
                                LODWORD(v530) = v696;
                              v697 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
                              v698 = WebCore::RenderBox::layoutOverflowRect((WebCore::RenderBox *)a1);
                              if (v697 < 4)
                              {
                                v701 = (HIDWORD(v698) >> 31) + 0x7FFFFFFF;
                                if (!__OFADD__(HIDWORD(v698), v700))
                                  v701 = HIDWORD(v698) + v700;
                              }
                              else
                              {
                                v701 = v698 + v699;
                                if (__OFADD__((_DWORD)v698, v699))
                                  v701 = (v698 >> 31) + 0x7FFFFFFF;
                              }
                              if ((int)v534 <= v701)
                                v534 = v701;
                              v535 = *(_DWORD *)(a1 + 20);
                            }
                            if ((v535 & 0x1000) != 0)
                            {
                              v536 = v518 - v517;
                              if (__OFSUB__(v518, v517))
                                v536 = (v518 >> 31) + 0x7FFFFFFF;
                              LODWORD(v537) = (v534 >> 31) + 0x7FFFFFFF;
                              if (!__OFSUB__(v534, (_DWORD)v530))
                                LODWORD(v537) = v534 - v530;
                              v538 = v517;
                            }
                            else
                            {
                              v536 = (v534 >> 31) + 0x7FFFFFFF;
                              if (!__OFSUB__(v534, (_DWORD)v530))
                                v536 = v534 - v530;
                              LODWORD(v537) = (v518 >> 31) + 0x7FFFFFFF;
                              if (!__OFSUB__(v518, v517))
                                LODWORD(v537) = v518 - v517;
                              v538 = v530;
                              LODWORD(v530) = v517;
                            }
                            v1051 = __PAIR64__(v530, v538);
                            v1052 = __PAIR64__(v537, v536);
                            if ((v535 & 0x10000) == 0)
                            {
LABEL_909:
                              if (v536 >= 1 && (int)v537 >= 1)
                              {
                                v539 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                             + 8)
                                                 + 1944);
                                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v539 + 24) + 8) + 40)
                                                           + 8)
                                               + 3382))
                                {
                                  v540 = *(_QWORD *)(v539 + 248);
                                  v541 = *(unsigned int *)(v540 + 508);
                                  if ((_DWORD)v541 && (v541 = *(_QWORD *)(*(_QWORD *)(v540 + 496) + 8 * v541 - 8)) != 0)
                                  {
                                    v542 = *(_DWORD *)(v541 + 64);
                                    LODWORD(v541) = *(_DWORD *)(v541 + 68);
                                  }
                                  else
                                  {
                                    v542 = 0;
                                  }
                                  v44 = __OFADD__(v538, v542);
                                  v543 = v538 + v542;
                                  if (v44)
                                    v543 = (v538 >> 31) + 0x7FFFFFFF;
                                  v44 = __OFADD__((_DWORD)v530, (_DWORD)v541);
                                  v544 = v530 + v541;
                                  if (v44)
                                    v544 = (v530 >> 31) + 0x7FFFFFFF;
                                  *(_QWORD *)&v1062 = __PAIR64__(v544, v543);
                                  *((_QWORD *)&v1062 + 1) = v1052;
                                  LOBYTE(v1063) = 1;
                                  LOBYTE(v1065[0]) = 0;
                                  v1066 = 0;
                                  WebCore::RenderObject::issueRepaint(a1, &v1062, 1, 0, (uint64_t)v1065);
                                  v535 = *(_DWORD *)(a1 + 20);
                                }
                                if ((v535 & 0x4000) != 0)
                                {
                                  v545 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
                                  v546 = v545 & v1041;
                                  for (nn = 1; ; ++nn)
                                  {
                                    v548 = v546;
                                    v549 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v546);
                                    if (v549 != -1 && *(_QWORD *)(v549 + 8) == a1)
                                      break;
                                    v546 = (v548 + nn) & v545;
                                  }
                                  if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v548 + 8))
                                  {
                                    *(_QWORD *)&v1062 = WebCore::RenderBox::reflectedRect((WebCore::RenderBox *)a1, (const WebCore::LayoutRect *)&v1051);
                                    *((_QWORD *)&v1062 + 1) = v715;
                                    WebCore::RenderObject::repaintRectangle(a1, (const WebCore::LayoutRect *)&v1062);
                                  }
                                }
                              }
LABEL_880:
                              v519 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
                              *(_DWORD *)(a1 + 20) = v519;
                              if ((*(_BYTE *)(a1 + 45) & 2) == 0)
                              {
                                *(_WORD *)(a1 + 69) &= ~1u;
                                *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                                                 * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944) + 248)
                                                                                            + 472));
                              }
                              *(_DWORD *)(a1 + 20) = v519 & 0xFFDFFE07;
                              return;
                            }
                            if ((*(_BYTE *)(a1 + 45) & 2) != 0)
                              v702 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 96);
                            else
                              v702 = *(_QWORD *)(a1 + 96);
                            v703 = v702 & 0x1C00;
                            if (v703 == 2048)
                            {
                              LODWORD(v703) = 0;
                            }
                            else if (v703)
                            {
                              v703 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 264);
                              if (v703)
                              {
                                v704 = *(_QWORD *)(v703 + 104);
                                v703 = HIDWORD(v704);
LABEL_1246:
                                v705 = -(int)v704;
                                if (v705 >= -33554432)
                                  v706 = v705 << 6;
                                else
                                  v706 = 0x80000000;
                                if (v705 > 0x1FFFFFF)
                                  v706 = 0x7FFFFFFF;
                                if ((int)v703 <= 0x2000000)
                                  v707 = -64 * v703;
                                else
                                  v707 = 0x80000000;
                                if ((int)v703 < -33554431)
                                  v707 = 0x7FFFFFFF;
                                v708 = v538 + v706;
                                if (__OFADD__(v538, v706))
                                  v708 = (v538 >> 31) + 0x7FFFFFFF;
                                v44 = __OFADD__((_DWORD)v530, v707);
                                v709 = v530 + v707;
                                if (v44)
                                  v709 = (v530 >> 31) + 0x7FFFFFFF;
                                v710 = *(_QWORD *)(a1 + 160);
                                v44 = __OFADD__(v708, v536);
                                v711 = v708 + v536;
                                if (v44)
                                  v711 = (v708 >> 31) + 0x7FFFFFFF;
                                v538 = v708 & ~(v708 >> 31);
                                if ((int)v710 >= v711)
                                  v712 = v711;
                                else
                                  v712 = *(_QWORD *)(a1 + 160);
                                v713 = v709 + v537;
                                if (__OFADD__(v709, (_DWORD)v537))
                                  v713 = (v709 >> 31) + 0x7FFFFFFF;
                                if (SHIDWORD(v710) >= v713)
                                  v714 = v713;
                                else
                                  v714 = HIDWORD(*(_QWORD *)(a1 + 160));
                                if ((int)v538 >= v712 || (v530 = v709 & ~(v709 >> 31), (int)v530 >= v714))
                                {
                                  v712 = 0;
                                  v714 = 0;
                                  v538 = 0;
                                  v530 = 0;
                                }
                                v1051 = v538 | (unint64_t)(v530 << 32);
                                v536 = v712 - v538;
                                if (__OFSUB__(v712, v538))
                                  v536 = (v712 >> 31) + 0x7FFFFFFF;
                                v537 = (v714 - v530);
                                if (__OFSUB__(v714, (_DWORD)v530))
                                  v537 = (v714 >> 31) + 0x7FFFFFFF;
                                v1052 = v536 | (unint64_t)(v537 << 32);
                                goto LABEL_909;
                              }
                            }
                            LODWORD(v704) = 0;
                            goto LABEL_1246;
                          }
                        }
                        else
                        {
                          --*(_DWORD *)v924;
                        }
                      }
                    }
                    ++*(_DWORD *)v524;
                    goto LABEL_888;
                  }
                  v803 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::SingleThreadWeakPtrImpl const*>(v511, &v1062);
                  v804 = *v511;
                  if (v803)
                  {
                    v805 = v803;
                    if (!v804)
                      goto LABEL_1508;
                  }
                  else
                  {
                    if (!v804)
                      goto LABEL_874;
                    v805 = (uint64_t *)(v804 + 24 * *(unsigned int *)(v804 - 4));
                  }
                  v804 += 24 * *(unsigned int *)(v804 - 4);
LABEL_1508:
                  if ((uint64_t *)v804 != v805)
                  {
                    v806 = (WTF *)v805[1];
                    v807 = *((unsigned int *)v805 + 5);
                    v805[1] = 0;
                    v805[2] = 0;
                    WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(v511, (WTF **)v805);
                    if ((_DWORD)v807)
                    {
                      v809 = 8 * v807;
                      v810 = v809;
                      v811 = v806;
                      do
                      {
                        if (*(_QWORD *)v811)
                        {
                          v812 = *(_QWORD *)(*(_QWORD *)v811 + 8);
                          if (v812)
                          {
                            if ((*(_BYTE *)(v812 + 21) & 0x80) != 0)
                              WebCore::RenderLayer::updateTransform(*(WebCore::RenderLayer **)(v812 + 144), v808);
                          }
                        }
                        v811 = (WTF *)((char *)v811 + 8);
                        v810 -= 8;
                      }
                      while (v810);
                      v813 = (WTF **)v806;
                      do
                      {
                        v814 = *v813;
                        *v813 = 0;
                        if (v814)
                        {
                          if (*(_DWORD *)v814 == 1)
                            WTF::fastFree(v814, v808);
                          else
                            --*(_DWORD *)v814;
                        }
                        ++v813;
                        v809 -= 8;
                      }
                      while (v809);
                    }
                    if (v806)
                      WTF::fastFree(v806, v808);
                  }
                  goto LABEL_874;
                }
                v801 = *(_QWORD *)(a1 + 224);
                if (!v801)
                {
                  WebCore::RenderBlockFlow::materializeRareBlockFlowData((WTF **)a1);
                  v801 = *(_QWORD *)(a1 + 224);
                }
                v802 = 1;
LABEL_1495:
                *(_DWORD *)(v801 + 20) = v486;
                v486 = v802;
                goto LABEL_818;
              }
            }
            isCentered = WebCore::StyleContentAlignmentData::isCentered((WebCore::StyleContentAlignmentData *)v484);
            if (v486 >= 0)
              v781 = v486;
            else
              v781 = v486 + 1;
            v782 = v781 >> 1;
            if (isCentered)
              v486 = v782;
            v783 = *(_DWORD *)(a1 + 20);
            if ((v783 & 0x40000) != 0)
            {
              v834 = *(_DWORD *)(a1 + 240);
              if (v834 == 1)
              {
                if (*v1042)
                  WebCore::LayoutIntegration::LineLayout::shiftLinesBy((uint64_t)*v1042, v486, v780);
              }
              else if (v834 == 2 && *v1042)
              {
                if ((v783 & 0x1000) != 0)
                {
                  if (v486 == 0x80000000)
                    v859 = 0x7FFFFFFF;
                  else
                    v859 = -v486;
                  v860 = 0;
                }
                else
                {
                  v859 = 0;
                  v860 = v486;
                }
                WebCore::RenderLineBoxList::shiftLinesBy((_QWORD **)*v1042 + 1, v859, v860);
              }
            }
            else
            {
              v784 = *(unsigned int *)(a1 + 64);
              if (v784 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
              {
                v785 = *(_QWORD *)((v784 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
                if (v785)
                {
                  if ((*(_BYTE *)(v785 + 45) & 4) != 0)
                  {
                    *(_QWORD *)&v1062 = *(_QWORD *)((v784 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
                    ++*(_DWORD *)(v785 + 16);
                    do
                    {
                      v786 = *(_DWORD *)(a1 + 20);
                      if ((v786 & 0x1000) != 0)
                        v787 = (unsigned int *)(v785 + 152);
                      else
                        v787 = (unsigned int *)(v785 + 156);
                      v788 = *v787;
                      v44 = __OFADD__(v788, v486);
                      v789 = v788 + v486;
                      v790 = (v788 >> 31) + 0x7FFFFFFF;
                      if (!v44)
                        v790 = v789;
                      if ((v786 & 0x1000) != 0)
                        *(_DWORD *)(v785 + 152) = v790;
                      else
                        *(_DWORD *)(v785 + 156) = v790;
                      if ((*(_DWORD *)(v785 + 20) & 0x1800000) != 0x1000000)
                        goto LABEL_1475;
                      v791 = *(_BYTE **)(*(_QWORD *)(v785 + 88) + 24);
                      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
                      {
                        if (!v791[36])
                        {
                          v795 = v791 + 20;
LABEL_1484:
                          if (!*v795)
                          {
                            v796 = *(_QWORD *)(v785 + 144);
                            v797 = *(_DWORD *)(v796 + 152);
                            v44 = __OFADD__(v797, v486);
                            v798 = v797 + v486;
                            v799 = (v797 >> 31) + 0x7FFFFFFF;
                            if (!v44)
                              v799 = v798;
                            *(_DWORD *)(v796 + 152) = v799;
                            v800 = *(_DWORD *)(v785 + 20);
                            if ((v800 & 0x20) == 0)
                              *(_DWORD *)(v785 + 20) = v800 | 0x20;
                          }
                        }
                      }
                      else if (!v791[12])
                      {
                        v795 = v791 + 28;
                        goto LABEL_1484;
                      }
LABEL_1475:
                      v792 = *(unsigned int *)(v785 + 47) | ((unint64_t)*(unsigned __int8 *)(v785 + 51) << 32);
                      if (v792 && (v793 = *(_QWORD *)(v792 + 8)) != 0)
                      {
                        if ((*(_BYTE *)(v793 + 45) & 4) != 0)
                          v794 = v793;
                        else
                          v794 = 0;
                      }
                      else
                      {
                        v794 = 0;
                      }
                      WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>::operator=((uint64_t)&v1062, v794);
                      v785 = v1062;
                    }
                    while ((_QWORD)v1062);
                  }
                }
              }
            }
            v835 = *(_QWORD *)(a1 + 216);
            if (v835)
              WebCore::FloatingObjects::shiftFloatsBy(v835, v486);
            if (v486 < 0)
            {
              v840 = HIDWORD(v1054) + v486;
              if (__OFADD__(HIDWORD(v1054), v486))
                v840 = (HIDWORD(v1054) >> 31) + 0x7FFFFFFF;
              HIDWORD(v1054) = v840;
            }
            else
            {
              v836 = v1054 + v486;
              if (__OFADD__((_DWORD)v1054, v486))
                v836 = (v1054 >> 31) + 0x7FFFFFFF;
              LODWORD(v1054) = v836;
            }
            goto LABEL_815;
          }
        }
        if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 148) >> 5) & 3u) - 1 > 1
          || *(unsigned __int8 *)(a1 + 46) - 36 < 5
          || WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets((WebCore *)a1, (const WebCore::RenderBox *)v452))
        {
LABEL_794:
          LODWORD(v1051) = v448 & ~(v448 >> 31);
          if ((*(_BYTE *)(a1 + 52) & 7) != 3)
          {
            v467 = *(_QWORD *)(a1 + 8);
            if (!v467)
            {
              v467 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v467 = 1;
              *(_QWORD *)(v467 + 8) = a1;
              v554 = *(WTF **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v467;
              if (v554)
              {
                if (*(_DWORD *)v554 == 1)
                {
                  WTF::fastFree(v554, v553);
                  v467 = *(_QWORD *)(a1 + 8);
                }
                else
                {
                  --*(_DWORD *)v554;
                }
              }
            }
            ++*(_DWORD *)v467;
            v1065[0] = v467;
            WTF::HashMap<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBox const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::set<WebCore::LayoutUnit&>((uint64_t *)(v451 + 208), v1065, &v1051, (uint64_t)&v1062);
            v469 = (WTF *)v1065[0];
            v1065[0] = 0;
            if (v469)
            {
              if (*(_DWORD *)v469 == 1)
                WTF::fastFree(v469, v468);
              else
                --*(_DWORD *)v469;
            }
          }
          goto LABEL_797;
        }
        v653 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
        v654 = (unsigned int *)(v653 + 4);
        v655 = (unsigned int *)(v653 + 12);
        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
          v654 = v655;
        BYTE6(v1065[0]) = 0;
        BYTE4(v1065[0]) = *((_BYTE *)v654 + 4);
        v656 = BYTE4(v1065[0]);
        BYTE5(v1065[0]) = *((_BYTE *)v654 + 5);
        if (BYTE4(v1065[0]) - 2 >= 9)
        {
          if (!BYTE4(v1065[0]))
            goto LABEL_1136;
          v657 = 0;
          if (BYTE4(v1065[0]) == 11)
          {
            v657 = (void *)*v654;
            LODWORD(v1065[0]) = *v654;
            WebCore::Length::ref((int *)v1065);
LABEL_1194:
            if ((v656 & 0xFFFFFFF7) != 3 || (*(_DWORD *)(a1 + 20) & 0x1800000) == 0x1000000)
            {
              if (v656 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v657);
              }
              v66 = v1049;
              v79 = (int *)(a1 + 168);
            }
            else
            {
              LODWORD(v1062) = 100;
              WORD2(v1062) = 3;
              BYTE6(v1062) = 0;
              v695 = (unint64_t)WebCore::RenderBox::computePercentageLogicalHeight(a1, (WebCore::Length *)&v1062, 1) >> 32;
              if (v656 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v657);
              }
              v66 = v1049;
              v79 = (int *)(a1 + 168);
              if (!v695)
                goto LABEL_797;
            }
            goto LABEL_794;
          }
        }
        else
        {
          v657 = (void *)*v654;
        }
        if (BYTE4(v1065[0]) - 7 < 4)
        {
LABEL_1136:
          v66 = v1049;
          goto LABEL_797;
        }
        goto LABEL_1194;
      }
      v866 = *(_BYTE *)(a1 + 96);
      if ((v866 & 0x1F) == 0xD || (v866 & 0x1Eu) - 14 <= 0xFFFFFFF5)
      {
        if (v430 == 2)
          goto LABEL_1708;
        v66 = v1049;
        v79 = (int *)(a1 + 168);
        if (!v428)
          goto LABEL_748;
        if (!WebCore::Element::isRelevantToUser(v428))
        {
LABEL_1708:
          v760 = *(unsigned __int8 *)(a1 + 46);
          v66 = v1049;
          v79 = (int *)(a1 + 168);
          goto LABEL_1396;
        }
        v429 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 40);
      }
      v66 = v1049;
      v79 = (int *)(a1 + 168);
      goto LABEL_748;
    }
    ++*(_DWORD *)(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2032))(a1, v427);
    v778 = *(_DWORD *)(a1 + 16);
    if (v778)
    {
      *(_DWORD *)(a1 + 16) = v778 - 1;
      v66 = v1049;
      v79 = (int *)(a1 + 168);
      goto LABEL_744;
    }
LABEL_1867:
    __break(0xC471u);
    JUMPOUT(0x1941BDEB0);
  }
}

uint64_t WebCore::LocalFrameViewLayoutContext::pushLayoutState(uint64_t a1, WebCore::RenderObject *a2, int *a3, int a4, int a5)
{
  WTF *v5;
  uint64_t v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  char v21;
  WTF *v22;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  char v36;
  WebCore::RenderObject *v37;
  int *v38;
  int v39;
  WTF *v40;
  WTF *v41;
  _BYTE v42[8];
  uint64_t v43;
  char v44;
  char v45;
  __int128 v46;
  int v47;
  WTF *v48;
  char v49;
  __int128 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned int *)(a1 + 172);
  if ((_DWORD)v11 && (v15 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v11 - 8)) != 0)
  {
    if (*(_BYTE *)(a1 + 140)
      && (*(_BYTE *)v15 & 2) == 0
      && ((*((_BYTE *)a2 + 23) & 0x10) == 0
       || !(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)a2 + 648))(a2)))
    {
      v26 = *(_QWORD *)(v15 + 24);
      if ((!v26 || !*(_QWORD *)(v26 + 8))
        && (*(_QWORD *)(*((_QWORD *)a2 + 13) + 328) == *MEMORY[0x1E0CBF2F8] || (*((_BYTE *)a2 + 52) & 7) != 1))
      {
        return 0;
      }
    }
    v39 = a5;
    v38 = a3;
    if (*(_BYTE *)(v15 + 136))
    {
      v13 = *(_BYTE *)(v15 + 104);
      v50 = *(_OWORD *)(v15 + 105);
      v51 = *(_DWORD *)(v15 + 121);
      v5 = *(WTF **)(v15 + 128);
      if (v5)
        ++*(_DWORD *)v5;
      v24 = 1;
    }
    else
    {
      v13 = 0;
      v24 = 0;
    }
    v37 = a2;
    if (*(_BYTE *)(v15 + 160))
    {
      v25 = *(_BYTE *)(v15 + 144);
      v15 = *(_QWORD *)(v15 + 152);
      v36 = v25;
      v14 = 0;
      if (v15)
        ++*(_DWORD *)v15;
    }
    else
    {
      v36 = 0;
      v14 = 1;
    }
    v12 = v24;
  }
  else
  {
    v37 = a2;
    v38 = a3;
    v39 = a5;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v36 = 0;
  }
  v16 = WTF::fastMalloc((WTF *)0xA8);
  v17 = (WTF *)v16;
  v45 = 0;
  v49 = 0;
  v18 = v5;
  if (v12)
  {
    v18 = 0;
    v45 = v13;
    v46 = v50;
    v47 = v51;
    v48 = v5;
    v49 = 1;
  }
  v40 = v18;
  v42[0] = 0;
  v44 = 0;
  if (v14)
  {
    WebCore::RenderLayoutState::RenderLayoutState(v16, (int *)(a1 + 160), v37, v38, a4, v39, (__int128 *)&v45, (uint64_t)v42);
    v41 = v17;
  }
  else
  {
    v42[0] = v36;
    v43 = v15;
    v44 = 1;
    WebCore::RenderLayoutState::RenderLayoutState(v16, (int *)(a1 + 160), v37, v38, a4, v39, (__int128 *)&v45, (uint64_t)v42);
    v41 = v17;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
        WTF::fastFree((WTF *)v15, v19);
      else
        --*(_DWORD *)v15;
      v15 = 0;
      if (!v12)
        goto LABEL_16;
LABEL_13:
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
          WTF::fastFree(v5, v19);
        else
          --*(_DWORD *)v5;
      }
      goto LABEL_16;
    }
  }
  if (v12)
    goto LABEL_13;
LABEL_16:
  v20 = *(unsigned int *)(a1 + 172);
  if ((_DWORD)v20 == *(_DWORD *)(a1 + 168))
  {
    v27 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 160, v20 + 1, (unint64_t)&v41);
    v28 = *(unsigned int *)(a1 + 172);
    v29 = *(_QWORD *)(a1 + 160);
    v30 = *v27;
    *v27 = 0;
    *(_QWORD *)(v29 + 8 * v28) = v30;
    v31 = v41;
    *(_DWORD *)(a1 + 172) = v28 + 1;
    v41 = 0;
    if (v31)
    {
      if (*((_BYTE *)v31 + 160))
      {
        v32 = (WTF *)*((_QWORD *)v31 + 19);
        *((_QWORD *)v31 + 19) = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
            WTF::fastFree(v32, v19);
          else
            --*(_DWORD *)v32;
        }
      }
      if (*((_BYTE *)v31 + 136))
      {
        v33 = (WTF *)*((_QWORD *)v31 + 16);
        *((_QWORD *)v31 + 16) = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
            WTF::fastFree(v33, v19);
          else
            --*(_DWORD *)v33;
        }
      }
      v34 = (WTF *)*((_QWORD *)v31 + 3);
      *((_QWORD *)v31 + 3) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
          WTF::fastFree(v34, v19);
        else
          --*(_DWORD *)v34;
      }
      v35 = (WTF *)*((_QWORD *)v31 + 1);
      if (v35)
      {
        *((_QWORD *)v31 + 1) = 0;
        *((_DWORD *)v31 + 4) = 0;
        WTF::fastFree(v35, v19);
      }
      WTF::fastFree(v31, v19);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v20) = v17;
    *(_DWORD *)(a1 + 172) = v20 + 1;
    v41 = 0;
  }
  if (v15)
    v21 = v14;
  else
    v21 = 1;
  v22 = v40;
  if ((v21 & 1) == 0)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WTF::fastFree((WTF *)v15, v19);
      v22 = v40;
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  if (v12 && v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, v19);
    else
      --*(_DWORD *)v22;
  }
  return 1;
}

uint64_t WebCore::LocalFrameViewLayoutContext::popLayoutState(uint64_t this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;

  v3 = *(unsigned int *)(this + 172);
  if ((_DWORD)v3)
  {
    v4 = this;
    v5 = v3 - 1;
    v6 = *(_QWORD *)(this + 160);
    v7 = *(_QWORD *)(v6 + 8 * (v3 - 1));
    if (v7)
    {
      v8 = *(unsigned __int8 *)(v7 + 136);
      if (*(_BYTE *)(v7 + 136))
      {
        v9 = *(_BYTE *)(v7 + 104);
        v20 = *(_OWORD *)(v7 + 105);
        v21 = *(_DWORD *)(v7 + 121);
        v2 = *(WTF **)(v7 + 128);
        if (v2)
          ++*(_DWORD *)v2;
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)(v6 + 8 * v5) = 0;
      v10 = v8;
      if (*(_BYTE *)(v7 + 160))
      {
        v11 = *(WTF **)(v7 + 152);
        *(_QWORD *)(v7 + 152) = 0;
        v10 = v8;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
          {
            WTF::fastFree(v11, a2);
            v10 = *(unsigned __int8 *)(v7 + 136);
          }
          else
          {
            --*(_DWORD *)v11;
            v10 = v8;
          }
        }
      }
      if (v10)
      {
        v12 = *(WTF **)(v7 + 128);
        *(_QWORD *)(v7 + 128) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
            WTF::fastFree(v12, a2);
          else
            --*(_DWORD *)v12;
        }
      }
      v13 = *(WTF **)(v7 + 24);
      *(_QWORD *)(v7 + 24) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, a2);
        else
          --*(_DWORD *)v13;
      }
      v14 = *(WTF **)(v7 + 8);
      if (v14)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        WTF::fastFree(v14, a2);
      }
      this = WTF::fastFree((WTF *)v7, a2);
      *(_DWORD *)(v4 + 172) = v5;
      if (v8)
      {
        if ((_DWORD)v3 == 1 || (v16 = *(_QWORD *)(*(_QWORD *)(v4 + 160) + 8 * v3 - 16)) == 0 || !*(_BYTE *)(v16 + 136))
        {
          if (!v2)
            return this;
LABEL_27:
          if (*(_DWORD *)v2 == 1)
            return WTF::fastFree(v2, v15);
          --*(_DWORD *)v2;
          return this;
        }
        this = *(_QWORD *)(v16 + 128);
        if (this)
        {
          v17 = (*(_DWORD *)this)++;
          if (v17)
            *(_DWORD *)this = v17;
          else
            this = WTF::fastFree((WTF *)this, v15);
        }
        if (v2)
        {
          ++*(_DWORD *)v2;
          v18 = *(unsigned __int8 *)(v16 + 136);
          *(_BYTE *)(v16 + 104) = v9;
          *(_OWORD *)(v16 + 105) = v20;
          *(_DWORD *)(v16 + 121) = v21;
          ++*(_DWORD *)v2;
          if (v18)
            goto LABEL_36;
        }
        else
        {
          v19 = *(unsigned __int8 *)(v16 + 136);
          *(_BYTE *)(v16 + 104) = v9;
          *(_OWORD *)(v16 + 105) = v20;
          *(_DWORD *)(v16 + 121) = v21;
          if (v19)
          {
LABEL_36:
            this = *(_QWORD *)(v16 + 128);
            *(_QWORD *)(v16 + 128) = v2;
            if (this)
            {
              if (*(_DWORD *)this == 1)
                this = WTF::fastFree((WTF *)this, v15);
              else
                --*(_DWORD *)this;
            }
            goto LABEL_39;
          }
        }
        *(_QWORD *)(v16 + 128) = v2;
        *(_BYTE *)(v16 + 136) = 1;
LABEL_39:
        if (!v2)
          return this;
        if (*(_DWORD *)v2 == 1)
          this = WTF::fastFree(v2, v15);
        else
          --*(_DWORD *)v2;
        goto LABEL_27;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayoutState::RenderLayoutState(uint64_t a1, int *a2, WebCore::RenderObject *this, int *a4, int a5, int a6, __int128 *a7, uint64_t a8)
{
  int v9;
  __int128 v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Element *v43;
  uint64_t v44;
  int v45;
  char v46;
  int v47;
  char v48;
  char v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::Element *v54;
  uint64_t v55;
  int v56;
  char v57;
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WebCore::RenderObject *v65;
  uint64_t v66;
  float v67;
  WTF *v68;
  double v69;
  double v70;
  double v71;
  WTF *v72;
  unsigned int v73;
  double v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  WebCore::RenderObject *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  char v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  char v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  WebCore::WillChangeData *v110;
  uint64_t v111;
  char v112;
  int v113;
  char v114;
  char v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  signed int v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  signed int v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  BOOL v192;
  int v193;
  int v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  char v205;
  int v206;
  uint64_t v207;
  int v209;
  uint64_t v210;
  char v211;
  char v212;
  WTF *v213;
  WTF *v214;
  double v215;
  unsigned int v216;
  int v217;
  unsigned int v218[4];
  _QWORD v219[7];
  char v220;
  WTF *v221;
  WTF *v222;
  uint64_t v223;
  char v224;
  __int16 v225;
  int v226;
  int v227;
  WebCore::RenderObject *v228;
  _BYTE *v229;
  uint64_t v230;

  v9 = a5;
  *(_BYTE *)a1 &= 0xF8u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  if (*((_BYTE *)a7 + 32))
  {
    v13 = *a7;
    *(_QWORD *)(a1 + 117) = *(_QWORD *)((char *)a7 + 13);
    *(_OWORD *)(a1 + 104) = v13;
    v14 = (_DWORD *)*((_QWORD *)a7 + 3);
    if (v14)
      ++*v14;
    *(_QWORD *)(a1 + 128) = v14;
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a8 + 16))
  {
    *(_BYTE *)(a1 + 144) = *(_BYTE *)a8;
    v15 = *(_DWORD **)(a8 + 8);
    if (v15)
      ++*v15;
    *(_QWORD *)(a1 + 152) = v15;
    *(_BYTE *)(a1 + 160) = 1;
  }
  v16 = a2[3];
  if (!(_DWORD)v16)
  {
    v39 = 0;
    v9 = a5;
    goto LABEL_40;
  }
  v17 = *(char **)(*(_QWORD *)a2 + 8 * v16 - 8);
  v19 = *a4;
  v18 = a4[1];
  if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
    goto LABEL_11;
  v65 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v65 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
  if ((*((_QWORD *)v65 + 12) & 0x380000) != 0x300000)
  {
LABEL_11:
    v21 = *((_DWORD *)v17 + 12);
    v20 = *((_DWORD *)v17 + 13);
    v192 = __OFADD__(v21, v19);
    v22 = v21 + v19;
    LODWORD(v23) = (v21 >> 31) + 0x7FFFFFFF;
    if (v192)
      v23 = v23;
    else
      v23 = v22;
    v192 = __OFADD__(v20, v18);
    v24 = v20 + v18;
    LODWORD(v25) = (v20 >> 31) + 0x7FFFFFFF;
    if (v192)
      v25 = v25;
    else
      v25 = v24;
    *(_QWORD *)(a1 + 48) = v23 | (v25 << 32);
    if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
      goto LABEL_31;
    v230 = 0;
    v229 = 0;
    v26 = *((_BYTE *)this + 45);
    if ((v26 & 2) != 0 || *((_BYTE *)this + 46) == 17)
    {
      v30 = *((_QWORD *)this + 4);
      if (!v30)
        goto LABEL_31;
      goto LABEL_28;
    }
    v228 = this;
    *(_QWORD *)v218 = &v229;
    *(_QWORD *)&v218[2] = &v230;
    v219[0] = &v228;
    if ((v26 & 1) == 0)
    {
      v27 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v27)
      {
        if ((*(_WORD *)(v27 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1941C05A8);
        }
        if ((*(_BYTE *)(v27 + 23) & 0x20) != 0)
          goto LABEL_463;
      }
    }
    v28 = *((_QWORD *)this + 12);
    if ((v28 & 0xF80000000000) == 0x480000000000)
    {
LABEL_463:
      WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)v218);
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v228 + 3) + 8) + 40) + 8) + 1944);
      goto LABEL_29;
    }
    v29 = (v28 >> 19) & 7;
    if (v29 <= 3 && v29 != 2)
    {
      v30 = *((_QWORD *)this + 4);
      if (v30)
      {
LABEL_28:
        v31 = *(_QWORD *)(v30 + 8);
LABEL_29:
        if (v31 && (*(_BYTE *)(v31 + 45) & 0x20) != 0)
        {
          v171 = *(_DWORD *)(v31 + 16) + 1;
          *(_DWORD *)(v31 + 16) = v171;
          if ((*(_BYTE *)(v31 + 22) & 0x80) != 0)
          {
            v172 = WebCore::RenderInline::offsetForInFlowPositionedInline((WebCore::RenderInline *)v31, this);
            v173 = *(_DWORD *)(a1 + 48);
            v174 = *(_DWORD *)(a1 + 52);
            v192 = __OFADD__(v173, (_DWORD)v172);
            v175 = v173 + v172;
            v176 = (v173 >> 31) + 0x7FFFFFFF;
            if (!v192)
              v176 = v175;
            v192 = __OFADD__(v174, HIDWORD(v172));
            v177 = v174 + HIDWORD(v172);
            v178 = (v174 >> 31) + 0x7FFFFFFF;
            if (v192)
              v177 = v178;
            *(_DWORD *)(a1 + 48) = v176;
            *(_DWORD *)(a1 + 52) = v177;
            v171 = *(_DWORD *)(v31 + 16);
          }
          if (!v171)
          {
            __break(0xC471u);
            JUMPOUT(0x1941C0728);
          }
          *(_DWORD *)(v31 + 16) = v171 - 1;
        }
        goto LABEL_31;
      }
LABEL_358:
      v31 = 0;
      goto LABEL_29;
    }
    v106 = *((_QWORD *)this + 4);
    if (v106)
    {
      v107 = *(_QWORD *)(v106 + 8);
      if (v107)
        ++*(_DWORD *)(v107 + 16);
    }
    else
    {
      v107 = 0;
    }
    if (v29 == 2)
    {
      if (!v107)
        goto LABEL_358;
      while (1)
      {
        v108 = *(unsigned __int8 *)(v107 + 46);
        if (v108 == 49 || (*(_BYTE *)(v107 + 98) & 0x38) != 0)
          break;
        if (((*(_BYTE *)(v107 + 45) & 0x40) != 0 || (v108 - 36) <= 4 && v108 != 38)
          && (*(_BYTE *)(v107 + 22) & 2) != 0)
        {
          break;
        }
        v109 = *(_QWORD *)(*(_QWORD *)(v107 + 88) + 40);
        if (*(_DWORD *)(*(_QWORD *)(v109 + 72) + 20))
        {
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v107 + 24) + 8))
            break;
        }
        if ((*(_BYTE *)(v107 + 45) & 0x40) != 0)
        {
          v110 = *(WebCore::WillChangeData **)(v109 + 200);
          if (v110)
          {
            if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v110, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v107 + 24) + 8)) & 1) != 0)break;
            v108 = *(unsigned __int8 *)(v107 + 46);
          }
        }
        if (v108 == 67 || v108 == 90)
          break;
        v111 = *(_QWORD *)(*(_QWORD *)(v107 + 88) + 40);
        v112 = *(_BYTE *)(v111 + 462);
        v113 = *(_BYTE *)(v111 + 642) & 3;
        v114 = v112 | 0x19;
        if (v113 == 1)
          v112 |= 0x15u;
        v115 = v113 == 2 ? v114 : v112;
        if ((v115 & 3) != 0
          && ((*(_BYTE *)(v107 + 20) & 1) != 0
           || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v107))
          && (*(_QWORD *)(v107 + 96) & 0x1FLL) != 0x19
          && (*(unsigned __int8 *)(v107 + 46) - 36 > 4 || (*(_BYTE *)(v107 + 52) & 7) == 1))
        {
          break;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 88) + 40) + 636) & 0xC0000) != 0
          && ((*(_BYTE *)(v107 + 20) & 1) != 0
           || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v107))
          && (*(_QWORD *)(v107 + 96) & 0x1FLL) != 0x19)
        {
          v202 = *(unsigned __int8 *)(v107 + 46);
          if ((v202 - 36) <= 4)
          {
            if (v202 == 36)
              break;
          }
          else if (v202 != 63 && v202 != 35)
          {
            break;
          }
        }
        if (v229 && v107 == v230)
          *v229 = 1;
        v116 = *(_QWORD *)(v107 + 32);
        if (v116)
        {
          v116 = *(_QWORD *)(v116 + 8);
          if (v116)
            ++*(_DWORD *)(v116 + 16);
        }
        v117 = *(_DWORD *)(v107 + 16);
        if (!v117)
        {
          __break(0xC471u);
          JUMPOUT(0x1941C066CLL);
        }
        v31 = 0;
        *(_DWORD *)(v107 + 16) = v117 - 1;
        v107 = v116;
        if (!v116)
          goto LABEL_29;
      }
    }
    else
    {
      if (!v107)
        goto LABEL_358;
      while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v107))
      {
        if ((*(_BYTE *)(v107 + 45) & 1) == 0)
        {
          v181 = *(_QWORD *)(*(_QWORD *)(v107 + 24) + 8);
          if (v181)
          {
            if ((*(_WORD *)(v181 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1941C0A18);
            }
            if ((*(_BYTE *)(v181 + 23) & 0x20) != 0)
              goto LABEL_460;
          }
        }
        if ((*(_QWORD *)(v107 + 96) & 0xF80000000000) == 0x480000000000)
        {
LABEL_460:
          WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)v218);
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v228 + 3) + 8) + 40) + 8) + 1944);
          goto LABEL_393;
        }
        if (v229 && v107 == v230)
          *v229 = 1;
        v182 = *(_QWORD *)(v107 + 32);
        if (!v182)
        {
          v187 = *(_DWORD *)(v107 + 16);
          if (!v187)
          {
LABEL_423:
            __break(0xC471u);
            JUMPOUT(0x1941C09F8);
          }
          v31 = 0;
          goto LABEL_394;
        }
        v183 = *(_QWORD *)(v182 + 8);
        if (v183)
          ++*(_DWORD *)(v183 + 16);
        v184 = *(_DWORD *)(v107 + 16);
        if (!v184)
          goto LABEL_423;
        v31 = 0;
        *(_DWORD *)(v107 + 16) = v184 - 1;
        v107 = v183;
        if (!v183)
          goto LABEL_29;
      }
    }
    v31 = v107;
LABEL_393:
    v187 = *(_DWORD *)(v107 + 16);
    if (!v187)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C0854);
    }
LABEL_394:
    *(_DWORD *)(v107 + 16) = v187 - 1;
    goto LABEL_29;
  }
  v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v220 = 0;
  v222 = 0;
  v223 = 0;
  v221 = 0;
  v224 = 0;
  *(_OWORD *)v218 = 0u;
  memset(v219, 0, 25);
  v225 = 1;
  v226 = 0;
  v227 = 0;
  (*(void (**)(uint64_t, _QWORD, unsigned int *, uint64_t, _QWORD))(*(_QWORD *)v66 + 576))(v66, 0, v218, 5, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v218, 0);
  v67 = *(float *)&v218[1];
  v68 = v222;
  v222 = 0;
  v69 = *(float *)v218;
  v70 = *(float *)v218 * 64.0;
  if (v70 >= 2147483650.0 || v70 <= -2147483650.0)
  {
    if (v68)
      WTF::fastFree(v68, a2);
    v214 = v221;
    v221 = 0;
    if (v214)
      WTF::fastFree(v214, a2);
    v215 = v69 * 64.0;
    if (v69 * 64.0 >= 2147483650.0)
    {
      v73 = 0x7FFFFFFF;
    }
    else if (v215 <= -2147483650.0)
    {
      v73 = 0x80000000;
    }
    else
    {
      v73 = (int)v215;
    }
  }
  else
  {
    v71 = *(float *)v218 * 64.0;
    if (v68)
      WTF::fastFree(v68, a2);
    v72 = v221;
    v221 = 0;
    if (v72)
      WTF::fastFree(v72, a2);
    v73 = (int)v71;
  }
  v74 = v67 * 64.0;
  if (v74 < 2147483650.0 && v74 > -2147483650.0)
    goto LABEL_100;
  if (v74 >= 2147483650.0)
  {
    v75 = 0x7FFFFFFF;
    goto LABEL_101;
  }
  if (v74 > -2147483650.0)
LABEL_100:
    v75 = (int)v74;
  else
    v75 = 0x80000000;
LABEL_101:
  v76 = v73 + v19;
  if (__OFADD__(v73, v19))
    v76 = (v73 >> 31) + 0x7FFFFFFF;
  v77 = v75 + v18;
  if (__OFADD__(v75, v18))
    v77 = (v75 >> 31) + 0x7FFFFFFF;
  *(_QWORD *)(a1 + 48) = v76 | (unint64_t)(v77 << 32);
LABEL_31:
  v32 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = v32;
  v33 = *((_DWORD *)this + 5);
  v34 = HIDWORD(v32);
  if ((~v33 & 0x808000) == 0)
  {
    v118 = *((_QWORD *)this + 18);
    v119 = *(_DWORD *)(v118 + 148);
    v192 = __OFADD__((_DWORD)v32, v119);
    v120 = v32 + v119;
    if (v192)
      v120 = (v32 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a1 + 48) = v120;
    v121 = *(_DWORD *)(v118 + 152);
    v192 = __OFADD__((_DWORD)v34, v121);
    v122 = v34 + v121;
    if (v192)
      LODWORD(v34) = (v34 >> 31) + 0x7FFFFFFF;
    else
      LODWORD(v34) = v122;
    *(_DWORD *)(a1 + 52) = v34;
    v33 = *((_DWORD *)this + 5);
  }
  if ((v33 & 0x10000) != 0)
  {
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v123 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96);
    else
      v123 = *((_QWORD *)this + 12);
    v124 = v123 & 0x1C00;
    if (v124 == 2048)
    {
      v125 = 0;
      LODWORD(v124) = 0;
    }
    else if (v124 && (v124 = *(_QWORD *)(*((_QWORD *)this + 18) + 264)) != 0)
    {
      v124 = *(_QWORD *)(v124 + 104);
      v125 = v124 & 0xFFFFFFFF00000000;
    }
    else
    {
      v125 = 0;
    }
    v126 = HIDWORD(v125);
    v127 = v125 >> 26;
    if ((int)v124 >= -33554432)
      v128 = (_DWORD)v124 << 6;
    else
      v128 = 0x80000000;
    if ((int)v124 > 0x1FFFFFF)
      v128 = 0x7FFFFFFF;
    if ((int)v126 >= -33554432)
      v129 = v127;
    else
      v129 = 0x80000000;
    if ((int)v126 > 0x1FFFFFF)
      v129 = 0x7FFFFFFF;
    v130 = *(_DWORD *)(a1 + 48);
    v131 = v130 - v128;
    if (__OFSUB__(v130, v128))
      v131 = (v130 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(a1 + 48) = v131;
    v192 = __OFSUB__((_DWORD)v34, v129);
    v132 = v34 - v129;
    if (v192)
      LODWORD(v34) = (v34 >> 31) + 0x7FFFFFFF;
    else
      LODWORD(v34) = v132;
    *(_DWORD *)(a1 + 52) = v34;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)v17 + 8);
  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
  {
    v78 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v78 = *(WebCore::RenderObject **)(*((_QWORD *)this + 4) + 8);
    v79 = *((_QWORD *)v78 + 12) & 0x380000;
    v35 = *(_BYTE *)a1;
    if (v79 == 3145728)
    {
      v37 = v35 & 0xFE;
      *(_BYTE *)a1 = v37;
      goto LABEL_37;
    }
  }
  else
  {
    v35 = *(_BYTE *)a1;
  }
  v36 = *v17;
  v37 = v35 & 0xFE | *v17 & 1;
  *(_BYTE *)a1 = v37;
  if ((v36 & 1) != 0)
    *(_OWORD *)(a1 + 32) = *((_OWORD *)v17 + 2);
LABEL_37:
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v133 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96);
    else
      v133 = *((_QWORD *)this + 12);
    v134 = v133 & 0x1C00;
    if (v134 == 2048)
    {
      v135 = 0;
      LODWORD(v134) = 0;
    }
    else if (v134 && (v134 = *(_QWORD *)(*((_QWORD *)this + 18) + 264)) != 0)
    {
      v134 = *(_QWORD *)(v134 + 104);
      v135 = v134 & 0xFFFFFFFF00000000;
    }
    else
    {
      v135 = 0;
    }
    v136 = HIDWORD(v135);
    v137 = v135 >> 26;
    if ((int)v134 >= -33554432)
      v138 = (_DWORD)v134 << 6;
    else
      v138 = 0x80000000;
    if ((int)v134 <= 0x1FFFFFF)
      v139 = v138;
    else
      v139 = 0x7FFFFFFF;
    if ((int)v136 < -33554432)
      LODWORD(v137) = 0x80000000;
    if ((int)v136 > 0x1FFFFFF)
      LODWORD(v137) = 0x7FFFFFFF;
    v140 = *(_DWORD *)(a1 + 48);
    v192 = __OFADD__(v140, v139);
    v141 = v140 + v139;
    if (v192)
      v141 = (v140 >> 31) + 0x7FFFFFFF;
    v192 = __OFADD__((_DWORD)v34, (_DWORD)v137);
    v142 = v34 + v137;
    if (v192)
      v142 = (v34 >> 31) + 0x7FFFFFFF;
    v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
    v144 = *(unsigned int *)(v143 + 508);
    if ((_DWORD)v144)
    {
      v145 = *(_QWORD *)(*(_QWORD *)(v143 + 496) + 8 * v144 - 8);
      if (v145)
      {
        v146 = *(_QWORD *)(v145 + 64);
        v145 = v146 & 0xFFFFFFFF00000000;
        goto LABEL_240;
      }
    }
    else
    {
      v145 = 0;
    }
    LODWORD(v146) = 0;
LABEL_240:
    v147 = HIDWORD(v145);
    v192 = __OFADD__(v141, (_DWORD)v146);
    v148 = v141 + v146;
    if (v192)
      v148 = (v141 >> 31) + 0x7FFFFFFF;
    v149 = v142 + v147;
    if (__OFADD__(v142, (_DWORD)v147))
      v149 = (v142 >> 31) + 0x7FFFFFFF;
    v150 = *((_QWORD *)this + 18);
    v152 = *(_DWORD *)(v150 + 164);
    v151 = *(_DWORD *)(v150 + 168);
    v153 = v152 << 6;
    if (v152 < -33554432)
      v153 = 0x80000000;
    if (v152 <= 0x1FFFFFF)
      v154 = v153;
    else
      v154 = 0x7FFFFFFFLL;
    LODWORD(v155) = v151 << 6;
    if (v151 < -33554432)
      LODWORD(v155) = 0x80000000;
    if (v151 <= 0x1FFFFFF)
      v155 = v155;
    else
      v155 = 0x7FFFFFFFLL;
    if ((v37 & 1) != 0)
    {
      v158 = *(_DWORD *)(a1 + 32);
      v157 = *(_DWORD *)(a1 + 36);
      if (v158 <= (int)v148)
        v159 = v148;
      else
        v159 = *(_DWORD *)(a1 + 32);
      if ((int)v157 <= (int)v149)
        v160 = v149;
      else
        v160 = v157;
      v161 = *(_DWORD *)(a1 + 40);
      v192 = __OFADD__(v158, v161);
      v162 = v158 + v161;
      if (v192)
        v162 = (v158 >> 31) + 0x7FFFFFFF;
      v192 = __OFADD__(v148, (_DWORD)v154);
      v163 = v148 + v154;
      if (v192)
        v163 = (v148 >> 31) + 0x7FFFFFFF;
      if (v163 >= v162)
        v164 = v162;
      else
        v164 = v163;
      v165 = *(_DWORD *)(a1 + 44);
      v192 = __OFADD__(v157, v165);
      v166 = v157 + v165;
      if (v192)
        v166 = (v157 >> 31) + 0x7FFFFFFF;
      v192 = __OFADD__((_DWORD)v149, (_DWORD)v155);
      v167 = v149 + v155;
      if (v192)
        v167 = (v149 >> 31) + 0x7FFFFFFF;
      if (v167 >= v166)
        v168 = v166;
      else
        v168 = v167;
      if ((int)v159 >= v164 || (int)v160 >= v168)
      {
        v164 = 0;
        v168 = 0;
        v159 = 0;
        v160 = 0;
      }
      *(_QWORD *)(a1 + 32) = v159 | (unint64_t)(v160 << 32);
      v192 = __OFSUB__(v164, v159);
      v169 = v164 - v159;
      if (v192)
        v169 = (v164 >> 31) + 0x7FFFFFFF;
      v192 = __OFSUB__(v168, (_DWORD)v160);
      v170 = (v168 - v160);
      if (v192)
        v170 = (v168 >> 31) + 0x7FFFFFFF;
      v156 = v169 | (unint64_t)(v170 << 32);
    }
    else
    {
      v156 = v154 | (v155 << 32);
      *(_QWORD *)(a1 + 32) = v148 | (unint64_t)(v149 << 32);
    }
    *(_QWORD *)(a1 + 40) = v156;
    *(_BYTE *)a1 = v37 | 1;
  }
  v38 = a2[3];
  if ((_DWORD)v38)
    v39 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v38 - 8);
  else
    v39 = 0;
LABEL_40:
  if (v9 || (*((_BYTE *)this + 52) & 7) == 1 && (*((_BYTE *)this + 53) & 2) != 0)
  {
    *(_DWORD *)(a1 + 72) = v9;
    v188 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v188 <= 5 && ((1 << v188) & 0x2A) != 0)
    {
      v189 = *(_DWORD *)(a1 + 56);
      v216 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1024))(this);
      v217 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 952))(this);
      v192 = __OFADD__(v216, v217);
      v193 = v216 + v217;
      v194 = (v216 >> 31) + 0x7FFFFFFF;
      v195 = 1;
    }
    else
    {
      v189 = *(_DWORD *)(a1 + 56);
      v190 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1016))(this);
      v191 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 944))(this);
      v192 = __OFADD__(v190, v191);
      v193 = v190 + v191;
      v194 = (v190 >> 31) + 0x7FFFFFFF;
      v195 = 0;
    }
    if (v192)
      v193 = v194;
    v192 = __OFADD__(v189, v193);
    v196 = v189 + v193;
    if (v192)
      v197 = (v189 >> 31) + 0x7FFFFFFF;
    else
      v197 = v196;
    v198 = *(_DWORD *)(a1 + 60);
    v199 = *(_QWORD *)this;
    if ((v195 & 1) != 0)
    {
      v200 = (*(uint64_t (**)(WebCore::RenderObject *))(v199 + 1008))(this);
      v201 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 936))(this);
    }
    else
    {
      v200 = (*(uint64_t (**)(WebCore::RenderObject *))(v199 + 1000))(this);
      v201 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 928))(this);
    }
    v203 = v200 + v201;
    if (__OFADD__(v200, v201))
      v203 = (v200 >> 31) + 0x7FFFFFFF;
    v192 = __OFADD__(v198, v203);
    v204 = v198 + v203;
    if (v192)
      v204 = (v198 >> 31) + 0x7FFFFFFF;
    *(_QWORD *)(a1 + 76) = v197 | (v204 << 32);
    if (a6)
      v205 = 6;
    else
      v205 = 2;
    *(_BYTE *)a1 = *(_BYTE *)a1 & 0xFB | v205;
    if (!v39)
      goto LABEL_85;
    goto LABEL_64;
  }
  if (!v39)
    goto LABEL_85;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(v39 + 72);
  *(_BYTE *)a1 = *(_BYTE *)a1 & 0xFB | *(_BYTE *)v39 & 4;
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(v39 + 76);
  v40 = *((_DWORD *)this + 5);
  if ((v40 & 2) != 0)
    goto LABEL_296;
  if ((v40 & 0x1000) != 0)
  {
    if ((v40 & 0x10000) == 0 || ((*((_DWORD *)this + 24) >> 10) & 7u) - 3 > 1)
      goto LABEL_47;
  }
  else if ((v40 & 0x10000) == 0 || ((unsigned __int16)*((_DWORD *)this + 24) >> 13) - 3 >= 2)
  {
    goto LABEL_47;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
    goto LABEL_47;
  v80 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v81 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v82 = v81 + 4;
  if (v80 >= 4)
    v82 = v81 + 12;
  v83 = *(unsigned __int8 *)(v82 + 4);
  if ((v83 - 7) >= 4 && v83 && (v83 - 5) > 1)
    goto LABEL_296;
  if (v80 < 4)
    v84 = v81 + 28;
  else
    v84 = v81 + 44;
  v85 = *(unsigned __int8 *)(v84 + 4);
  if ((v85 - 7) >= 4 && v85 && (v85 - 5) >= 2)
  {
    if (v80 <= 3)
    {
      if (*(_BYTE *)(v81 + 32) == 13)
        goto LABEL_489;
      v179 = v81 + 28;
    }
    else
    {
      if (*(_BYTE *)(v81 + 48) == 13)
        goto LABEL_118;
      v179 = v81 + 44;
    }
    if ((*(_BYTE *)(v179 + 4) & 0xF7) != 3 || WebCore::RenderBox::percentageLogicalHeightIsResolvable(this))
      goto LABEL_296;
    v81 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v80 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  }
LABEL_118:
  if (v80 >= 4)
  {
    v86 = 0;
    v87 = v81 + 36;
    goto LABEL_120;
  }
LABEL_489:
  v87 = v81 + 20;
  v86 = 1;
LABEL_120:
  v88 = *(unsigned __int8 *)(v87 + 4);
  if ((v88 - 7) < 4 || !v88 || (v88 - 5) < 2)
    goto LABEL_47;
  if ((v86 & 1) != 0)
    v89 = v81 + 20;
  else
    v89 = v81 + 36;
  v90 = *(unsigned __int8 *)(v89 + 4);
  if (v90 != 11)
  {
    if (v90 == 13)
      goto LABEL_47;
    if (*(_BYTE *)(v89 + 6))
    {
      if (*(float *)v89 <= 0.0)
        goto LABEL_47;
    }
    else if (*(int *)v89 < 1)
    {
      goto LABEL_47;
    }
  }
  if ((v86 & 1) != 0)
    v91 = v81 + 20;
  else
    v91 = v81 + 36;
  if ((*(_BYTE *)(v91 + 4) & 0xF7) != 3)
    goto LABEL_296;
  v218[0] = 100;
  LOWORD(v218[1]) = 3;
  BYTE2(v218[1]) = 0;
  v92 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)v218, 1);
  if (LOBYTE(v218[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v218[0]);
  }
  if ((v92 & 0xFF00000000) != 0)
    goto LABEL_296;
LABEL_47:
  v41 = *((_QWORD *)this + 4);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 8);
    if (v42)
    {
      if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v42 + 124)) & 0xE000) != 0)
        goto LABEL_296;
    }
  }
  if ((*((_BYTE *)this + 21) & 8) != 0
    && (*((_QWORD *)this + 12) & 0xF80000000000) == 0x100000000000
    && *(int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 52) > 0)
  {
    goto LABEL_296;
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v43 = 0;
  }
  else
  {
    v43 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v43 && (*((_WORD *)v43 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C0548);
    }
  }
  v44 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v45 = (*(_DWORD *)(v44 + 636) >> 18) & 3;
  v46 = *(_BYTE *)(v44 + 642);
  if (v45)
  {
    v211 = *((_BYTE *)this + 96);
    if ((v211 & 0x1F) == 0xD || (v211 & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v45 == 2)
        goto LABEL_296;
      if (v43)
      {
        if (!WebCore::Element::isRelevantToUser(v43))
          goto LABEL_296;
        v44 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
        v46 = *(_BYTE *)(v44 + 642);
      }
    }
  }
  v47 = v46 & 3;
  if (v47 != 1)
  {
    v48 = *(_BYTE *)(v44 + 462);
    if (v47 == 2)
      v48 |= 0x19u;
    if ((v48 & 4) == 0)
      goto LABEL_59;
  }
  if ((*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this)
    || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19)
  {
    goto LABEL_59;
  }
  v185 = *((unsigned __int8 *)this + 46);
  if ((v185 - 36) > 4)
  {
    if (v185 != 35 && v185 != 63)
      goto LABEL_296;
LABEL_59:
    if (*(_DWORD *)(a1 + 72))
    {
      v49 = 2;
    }
    else if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v49 = 2 * ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 648))(this) != 0);
    }
    else
    {
      v49 = 0;
    }
    v50 = *(_BYTE *)a1 & 0xFD | v49;
    goto LABEL_63;
  }
  if (v185 != 36)
    goto LABEL_59;
LABEL_296:
  *(_DWORD *)(a1 + 72) = 0;
  v50 = *(_BYTE *)a1 & 0xFD;
LABEL_63:
  *(_BYTE *)a1 = v50;
LABEL_64:
  v51 = *((_DWORD *)this + 5);
  if ((v51 & 2) != 0)
    goto LABEL_85;
  if ((v51 & 0x1000) != 0)
  {
    if ((v51 & 0x10000) == 0 || ((*((_DWORD *)this + 24) >> 10) & 7u) - 3 > 1)
      goto LABEL_67;
  }
  else if ((v51 & 0x10000) == 0 || ((unsigned __int16)*((_DWORD *)this + 24) >> 13) - 3 >= 2)
  {
    goto LABEL_67;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
    goto LABEL_67;
  v93 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v94 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v95 = v94 + 4;
  if (v93 >= 4)
    v95 = v94 + 12;
  v96 = *(unsigned __int8 *)(v95 + 4);
  if ((v96 - 7) < 4 || !v96 || (v96 - 5) <= 1)
  {
    if (v93 < 4)
      v97 = v94 + 28;
    else
      v97 = v94 + 44;
    v98 = *(unsigned __int8 *)(v97 + 4);
    if ((v98 - 7) >= 4 && v98 && (v98 - 5) >= 2)
    {
      if (v93 <= 3)
      {
        if (*(_BYTE *)(v94 + 32) == 13)
          goto LABEL_492;
        v180 = v94 + 28;
      }
      else
      {
        if (*(_BYTE *)(v94 + 48) == 13)
          goto LABEL_143;
        v180 = v94 + 44;
      }
      if ((*(_BYTE *)(v180 + 4) & 0xF7) != 3 || WebCore::RenderBox::percentageLogicalHeightIsResolvable(this))
        goto LABEL_85;
      v94 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      v93 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
    }
LABEL_143:
    if (v93 >= 4)
    {
      v99 = 0;
      v100 = v94 + 36;
      goto LABEL_145;
    }
LABEL_492:
    v100 = v94 + 20;
    v99 = 1;
LABEL_145:
    v101 = *(unsigned __int8 *)(v100 + 4);
    if ((v101 - 7) < 4 || !v101 || (v101 - 5) < 2)
      goto LABEL_67;
    if ((v99 & 1) != 0)
      v102 = v94 + 20;
    else
      v102 = v94 + 36;
    v103 = *(unsigned __int8 *)(v102 + 4);
    if (v103 != 11)
    {
      if (v103 == 13)
        goto LABEL_67;
      if (*(_BYTE *)(v102 + 6))
      {
        if (*(float *)v102 <= 0.0)
          goto LABEL_67;
      }
      else if (*(int *)v102 < 1)
      {
        goto LABEL_67;
      }
    }
    if ((v99 & 1) != 0)
      v104 = v94 + 20;
    else
      v104 = v94 + 36;
    if ((*(_BYTE *)(v104 + 4) & 0xF7) != 3)
      goto LABEL_85;
    v218[0] = 100;
    LOWORD(v218[1]) = 3;
    BYTE2(v218[1]) = 0;
    v105 = WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)v218, 1);
    if (LOBYTE(v218[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v218[0]);
    }
    if ((v105 & 0xFF00000000) != 0)
      goto LABEL_85;
LABEL_67:
    v52 = *((_QWORD *)this + 4);
    if (v52)
    {
      v53 = *(_QWORD *)(v52 + 8);
      if (v53)
      {
        if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v53 + 124)) & 0xE000) != 0)
          goto LABEL_85;
      }
    }
    if ((*((_BYTE *)this + 21) & 8) != 0
      && (*((_QWORD *)this + 12) & 0xF80000000000) == 0x100000000000
      && *(int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 52) > 0)
    {
      goto LABEL_85;
    }
    if ((*((_BYTE *)this + 45) & 1) != 0)
    {
      v54 = 0;
    }
    else
    {
      v54 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
      if (v54 && (*((_WORD *)v54 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941C0568);
      }
    }
    v55 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
    v56 = (*(_DWORD *)(v55 + 636) >> 18) & 3;
    v57 = *(_BYTE *)(v55 + 642);
    if (v56)
    {
      v212 = *((_BYTE *)this + 96);
      if ((v212 & 0x1F) == 0xD || (v212 & 0x1Eu) - 14 <= 0xFFFFFFF5)
      {
        if (v56 == 2)
          goto LABEL_85;
        if (v54)
        {
          if (!WebCore::Element::isRelevantToUser(v54))
            goto LABEL_85;
          v55 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
          v57 = *(_BYTE *)(v55 + 642);
        }
      }
    }
    v58 = v57 & 3;
    if (v58 == 1)
      goto LABEL_367;
    v59 = *(_BYTE *)(v55 + 462);
    if (v58 == 2)
      v59 |= 0x19u;
    if ((v59 & 4) != 0)
    {
LABEL_367:
      if (((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
        && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19)
      {
        v186 = *((unsigned __int8 *)this + 46);
        if ((v186 - 36) <= 4)
        {
          if (v186 == 36)
            goto LABEL_85;
        }
        else if (v186 != 63 && v186 != 35)
        {
          goto LABEL_85;
        }
      }
    }
    v60 = *(_QWORD *)(v39 + 24);
    if (v60 && (v210 = *(_QWORD *)(v60 + 8)) != 0)
    {
      v61 = *(_QWORD *)(v210 + 8);
      if (!v61)
      {
        v61 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v61 = 1;
        *(_QWORD *)(v61 + 8) = v210;
        v213 = *(WTF **)(v210 + 8);
        *(_QWORD *)(v210 + 8) = v61;
        if (v213)
        {
          if (*(_DWORD *)v213 == 1)
          {
            WTF::fastFree(v213, a2);
            v61 = *(_QWORD *)(v210 + 8);
            if (!v61)
              goto LABEL_81;
          }
          else
          {
            --*(_DWORD *)v213;
          }
        }
      }
      ++*(_DWORD *)v61;
    }
    else
    {
      v61 = 0;
    }
LABEL_81:
    v62 = *(WTF **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v61;
    if (v62)
    {
      if (*(_DWORD *)v62 == 1)
        WTF::fastFree(v62, a2);
      else
        --*(_DWORD *)v62;
    }
    *(_QWORD *)(a1 + 84) = *(_QWORD *)(v39 + 84);
    *(_QWORD *)(a1 + 92) = *(_QWORD *)(v39 + 92);
  }
LABEL_85:
  v63 = *(_QWORD *)(a1 + 24);
  if (v63)
  {
    v207 = *(_QWORD *)(v63 + 8);
    if (v207)
    {
      if ((((unsigned __int16)*((_DWORD *)this + 31) ^ (unsigned __int16)*(_DWORD *)(v207 + 124)) & 0xE000) == 0
        && *((_BYTE *)this + 46) == 25)
      {
        ++*((_DWORD *)this + 4);
        WebCore::RenderLayoutState::computeLineGridPaginationOrigin((WebCore::RenderLayoutState *)a1, (const WebCore::RenderMultiColumnFlow *)*((unsigned __int8 *)this + 367));
        v209 = *((_DWORD *)this + 4);
        if (!v209)
        {
          __break(0xC471u);
          JUMPOUT(0x1941C0DB0);
        }
        *((_DWORD *)this + 4) = v209 - 1;
      }
    }
  }
  if (*(_QWORD *)(*((_QWORD *)this + 13) + 328) != *MEMORY[0x1E0CBF2F8] && (*((_BYTE *)this + 52) & 7) == 1)
  {
    ++*((_DWORD *)this + 4);
    WebCore::RenderLayoutState::establishLineGrid(a1, *(_QWORD **)a2, a2[3], (uint64_t)this);
    v206 = *((_DWORD *)this + 4);
    if (!v206)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C0D54);
    }
    *((_DWORD *)this + 4) = v206 - 1;
  }
  return a1;
}

void WebCore::RenderBlockFlow::rebuildFloatingObjectSetFromIntrudingFloats(WebCore::RenderBlockFlow *this)
{
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  int *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t **i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  _QWORD *v44;
  _DWORD *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _BYTE v54[24];
  uint64_t v55;
  _QWORD *v56;

  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    v3 = (char *)this + 20;
    *(_BYTE *)(v2 + 40) = (*((_DWORD *)this + 5) & 0x1000) == 0;
    v56 = 0;
    if ((*((_BYTE *)this + 22) & 4) == 0)
    {
      for (i = *(uint64_t ***)(v2 + 8); i; i = (uint64_t **)i[2])
      {
        if ((*((_BYTE *)*i + 36) & 8) == 0)
        {
          v35 = **i;
          if (v35)
          {
            v37 = *(_QWORD *)(v35 + 8);
            v55 = v37;
            if (v37)
              ++*(_DWORD *)(v37 + 16);
          }
          else
          {
            v55 = 0;
          }
          WTF::HashTable<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>>::add((uint64_t)v54, (uint64_t *)&v56, &v55);
          if (v55)
          {
            v36 = *(_DWORD *)(v55 + 16);
            if (!v36)
            {
              __break(0xC471u);
              JUMPOUT(0x1941C13C4);
            }
            *(_DWORD *)(v55 + 16) = v36 - 1;
          }
        }
      }
    }
  }
  else
  {
    v56 = 0;
    v3 = (char *)this + 20;
  }
  if (((*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1504))(this) & 1) == 0
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8))
  {
    v6 = *((unsigned __int8 *)this + 46);
    if (v6 != 49 && v6 != 37 && (*(_DWORD *)v3 & 0x800) == 0 && (*(_DWORD *)v3 & 0x1800000) != 0x1000000)
    {
      v7 = (uint64_t *)*((_QWORD *)this + 27);
      if (v7)
        WebCore::FloatingObjects::clear(v7, v4);
      v8 = *((_QWORD *)this + 4);
      if (v8)
      {
        v9 = *(uint64_t **)(v8 + 8);
        if (v9)
        {
          if ((*((_BYTE *)v9 + 52) & 7) == 1)
          {
            ++*((_DWORD *)v9 + 4);
            v15 = *((unsigned int *)this + 10);
            if (v15 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)
              && (v16 = *(_QWORD **)((v15 | ((unint64_t)*((unsigned __int8 *)this + 44) << 32)) + 8)) != 0)
            {
              v17 = 0;
              while ((*((_BYTE *)v16 + 52) & 7) != 1 || (*(unsigned int (**)(_QWORD *))(*v16 + 1504))(v16))
              {
                if ((*((_BYTE *)v16 + 21) & 8) != 0)
                  v17 = 1;
                v18 = *((unsigned int *)v16 + 10);
                if (!(v18 | ((unint64_t)*((unsigned __int8 *)v16 + 44) << 32)))
                  goto LABEL_37;
                v19 = 0;
                v16 = *(_QWORD **)((v18 | ((unint64_t)*((unsigned __int8 *)v16 + 44) << 32)) + 8);
                if (!v16)
                  goto LABEL_38;
              }
              v19 = (int *)v16;
            }
            else
            {
              v17 = 0;
LABEL_37:
              v19 = 0;
            }
LABEL_38:
            v20 = (char *)this + 152;
            if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
              v20 = (char *)this + 156;
            v21 = *(unsigned int *)v20;
            if (v17 || !v19)
              goto LABEL_54;
            if (!(*(unsigned int (**)(int *))(*(_QWORD *)v19 + 1240))(v19))
              goto LABEL_43;
            v28 = v9[27];
            if (v28)
            {
              v44 = *(_QWORD **)(v28 + 8);
              if (v44)
              {
                LODWORD(v28) = 0;
                do
                {
                  v45 = (_DWORD *)*v44;
                  if ((*(_BYTE *)(*v44 + 36) & 0x10) != 0 && (*(_BYTE *)(*v44 + 36) & 3) != 0)
                  {
                    if ((*((_BYTE *)v9 + 21) & 0x10) != 0)
                    {
                      v46 = v45[2];
                      v47 = v45[4];
                    }
                    else
                    {
                      v46 = v45[3];
                      v47 = v45[5];
                    }
                    v24 = __OFADD__(v46, v47);
                    v48 = v46 + v47;
                    v49 = (v46 >> 31) + 0x7FFFFFFF;
                    if (v24)
                      v48 = v49;
                    if ((int)v28 <= v48)
                      LODWORD(v28) = v48;
                  }
                  v44 = (_QWORD *)v44[2];
                }
                while (v44);
              }
              else
              {
                LODWORD(v28) = 0;
              }
            }
            if ((int)v28 > (int)v21)
            {
LABEL_54:
              v29 = *v9;
              if ((*((_BYTE *)v9 + 21) & 0x10) != 0)
              {
                v30 = (*(uint64_t (**)(uint64_t *))(v29 + 1000))(v9);
                v31 = (*(uint64_t (**)(uint64_t *))(*v9 + 928))(v9);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t *))(v29 + 1016))(v9);
                v31 = (*(uint64_t (**)(uint64_t *))(*v9 + 944))(v9);
              }
              v32 = v30 + v31;
              if (__OFADD__(v30, v31))
                v32 = (v30 >> 31) + 0x7FFFFFFF;
              WebCore::RenderBlockFlow::addIntrudingFloats((uint64_t)this, v9, v9, v32, v21);
            }
            if (!v19)
            {
LABEL_61:
              if ((v3[2] & 4) == 0)
              {
                if (v56)
                {
                  v50 = *((_DWORD *)v56 - 3);
                  if (v50)
                  {
                    v51 = (uint64_t *)*((_QWORD *)this + 27);
                    v52 = *v51;
                    if (*v51)
                      LODWORD(v52) = *(_DWORD *)(v52 - 12);
                    if (v52 >= v50 && (v53 = (_QWORD *)v51[1]) != 0)
                    {
                      while (v56 && *((_DWORD *)v56 - 3))
                      {
                        WTF::HashSet<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>((uint64_t *)&v56, *(_QWORD *)(*(_QWORD *)*v53 + 8));
                        v53 = (_QWORD *)v53[2];
                        if (!v53)
                        {
                          if (v56 && *((_DWORD *)v56 - 3))
                            goto LABEL_114;
                          break;
                        }
                      }
                    }
                    else
                    {
LABEL_114:
                      WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(this, 0, 1);
                    }
                  }
                }
              }
              v33 = *((_DWORD *)v9 + 4);
              if (!v33)
              {
                __break(0xC471u);
                JUMPOUT(0x1941C12C0);
              }
              *((_DWORD *)v9 + 4) = v33 - 1;
              goto LABEL_17;
            }
LABEL_43:
            v22 = v19 + 38;
            if (((v19[31] >> 13) & 6) - 2 >= 4)
              v22 = v19 + 39;
            v23 = *v22;
            v24 = __OFSUB__((_DWORD)v21, v23);
            v25 = v21 - v23;
            if (v24)
              v26 = (v21 >> 31) + 0x7FFFFFFF;
            else
              v26 = v25;
            v27 = *((_QWORD *)v19 + 27);
            if (v27)
            {
              v38 = *(_QWORD **)(v27 + 8);
              if (v38)
              {
                LODWORD(v27) = 0;
                do
                {
                  v39 = (_DWORD *)*v38;
                  if ((*(_BYTE *)(*v38 + 36) & 0x10) != 0 && (*(_BYTE *)(*v38 + 36) & 3) != 0)
                  {
                    if ((*((_BYTE *)v19 + 21) & 0x10) != 0)
                    {
                      v40 = v39[2];
                      v41 = v39[4];
                    }
                    else
                    {
                      v40 = v39[3];
                      v41 = v39[5];
                    }
                    v24 = __OFADD__(v40, v41);
                    v42 = v40 + v41;
                    v43 = (v40 >> 31) + 0x7FFFFFFF;
                    if (v24)
                      v42 = v43;
                    if ((int)v27 <= v42)
                      LODWORD(v27) = v42;
                  }
                  v38 = (_QWORD *)v38[2];
                }
                while (v38);
              }
              else
              {
                LODWORD(v27) = 0;
              }
            }
            if ((int)v27 > (int)v26)
              WebCore::RenderBlockFlow::addIntrudingFloats((uint64_t)this, v19, v9, 0, v26);
            goto LABEL_61;
          }
        }
      }
LABEL_17:
      v10 = (uint64_t)v56;
      if (v56)
      {
        v11 = *((unsigned int *)v56 - 1);
        if ((_DWORD)v11)
        {
          v12 = v56;
          do
          {
            v13 = *v12;
            if ((unint64_t)(*v12 + 1) >= 2)
            {
              v14 = *(_DWORD *)(v13 + 16);
              if (!v14)
              {
                __break(0xC471u);
                JUMPOUT(0x1941C1490);
              }
              *(_DWORD *)(v13 + 16) = v14 - 1;
            }
            ++v12;
            --v11;
          }
          while (v11);
        }
        WTF::fastFree((WTF *)(v10 - 16), v4);
      }
      return;
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 27);
  if (v5)
    WebCore::FloatingObjects::clear(v5, v4);
  if (v56)
  {
    if (*((_DWORD *)v56 - 3))
      WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(this, 0, 1);
    goto LABEL_17;
  }
}

uint64_t WebCore::RenderBlockFlow::shouldResetLogicalHeightBeforeLayout(WebCore::RenderBlockFlow *this)
{
  return 1;
}

uint64_t WebCore::RenderBlockFlow::computeColumnCountAndWidth(WebCore::RenderBlockFlow *this)
{
  WebCore::RenderStyle *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  double v28;
  int v29;
  int v30;
  unsigned int v31;
  char v32;
  _BOOL4 v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;

  v2 = (WebCore::RenderBlockFlow *)((char *)this + 80);
  v3 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v55 = *((_DWORD *)this + 41);
    v56 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(v3 + 1000))(this);
    if (__OFSUB__(v55, v56))
      v57 = (v55 >> 31) + 0x7FFFFFFF;
    else
      v57 = v55 - v56;
    v58 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1008))(this);
    if (__OFSUB__(v57, v58))
      v59 = (v57 >> 31) + 0x7FFFFFFF;
    else
      v59 = v57 - v58;
    v60 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1360))(this);
    v61 = v60 << 6;
    if (v60 < -33554432)
      v61 = 0x80000000;
    if (v60 > 0x1FFFFFF)
      v61 = 0x7FFFFFFF;
    v11 = __OFSUB__(v59, v61);
    v62 = v59 - v61;
    if (v11)
      v62 = (v59 >> 31) + 0x7FFFFFFF;
    v63 = v62 & ~(v62 >> 31);
    v64 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 928))(this);
    if (__OFSUB__(v63, v64))
      v65 = 0x7FFFFFFF;
    else
      v65 = v63 - v64;
    result = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 936))(this);
    if (__OFSUB__(v65, (_DWORD)result))
      v66 = (v65 >> 31) + 0x7FFFFFFF;
    else
      v66 = v65 - result;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      result = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1360))(this);
      v68 = (_DWORD)result << 6;
      if ((int)result > 0x1FFFFFF)
        v68 = 0x7FFFFFFF;
      if ((int)result >= -33554432)
        v67 = v68;
      else
        v67 = 0x80000000;
    }
    else
    {
      v67 = 0;
    }
    v11 = __OFSUB__(v66, v67);
    v20 = v66 - v67;
    if (v11)
      v20 = (v66 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v4 = *((_DWORD *)this + 40);
    v5 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(v3 + 1016))(this);
    if (__OFSUB__(v4, v5))
      v6 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v6 = v4 - v5;
    v7 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v6, v7))
      v8 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v8 = v6 - v7;
    v9 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1352))(this);
    v10 = v9 << 6;
    if (v9 < -33554432)
      v10 = 0x80000000;
    if (v9 > 0x1FFFFFF)
      v10 = 0x7FFFFFFF;
    v11 = __OFSUB__(v8, v10);
    v12 = v8 - v10;
    if (v11)
      v12 = (v8 >> 31) + 0x7FFFFFFF;
    v13 = v12 & ~(v12 >> 31);
    v14 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 944))(this);
    if (__OFSUB__(v13, v14))
      v15 = 0x7FFFFFFF;
    else
      v15 = v13 - v14;
    result = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 952))(this);
    v17 = v15 - result;
    if (__OFSUB__(v15, (_DWORD)result))
      v17 = (v15 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v53 = v17;
      result = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1352))(this);
      v17 = v53;
      v54 = (_DWORD)result << 6;
      if ((int)result > 0x1FFFFFF)
        v54 = 0x7FFFFFFF;
      if ((int)result >= -33554432)
        v18 = v54;
      else
        v18 = 0x80000000;
    }
    else
    {
      v18 = 0;
    }
    v11 = __OFSUB__(v17, v18);
    v19 = v17 - v18;
    v20 = (v17 >> 31) + 0x7FFFFFFF;
    if (!v11)
      v20 = v19;
  }
  v21 = v20 & ~(v20 >> 31);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v22 + 3382)
    && !*(_BYTE *)(v22 + 3383)
    && (~*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56) & 3) != 0)
  {
    v69 = v21;
    result = WebCore::RenderStyle::hasInlineColumnAxis(v2);
    v21 = v69;
    if ((result & 1) != 0)
    {
      v26 = WebCore::RenderBlockFlow::columnGap(this);
      v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24);
      v28 = *(float *)(v27 + 4) * 64.0;
      if (v28 >= 2147483650.0)
      {
        v30 = 0x7FFFFFFF;
      }
      else
      {
        v29 = 64;
        if (v28 <= -2147483650.0)
          goto LABEL_38;
        v30 = (int)v28;
        if ((int)v28 < 65)
          goto LABEL_38;
      }
      v29 = v30;
LABEL_38:
      if (*(unsigned __int16 *)(v27 + 8) <= 1u)
        v31 = 1;
      else
        v31 = *(unsigned __int16 *)(v27 + 8);
      v32 = *(_BYTE *)(v27 + 56);
      if ((v32 & 1) != 0)
      {
        if ((v32 & 2) == 0)
        {
          v41 = v31 << 6;
          v42 = ((unint64_t)(v41 - 64) * (int)v26) >> 6;
          if ((int)(((unint64_t)(v41 - 64) * (int)v26) >> 32) >> 6 != (int)v42 >> 31)
            LODWORD(v42) = (v26 >> 31) + 0x7FFFFFFF;
          v43 = v69 - v42;
          if (__OFSUB__(v69, (_DWORD)v42))
            v43 = 0x7FFFFFFF;
          v44 = ((uint64_t)v43 << 6) / v41;
          if (v44 <= (uint64_t)0xFFFFFFFF80000000)
            v44 = 0xFFFFFFFF80000000;
          if (v44 >= 0x7FFFFFFF)
            LODWORD(v44) = 0x7FFFFFFF;
          v45 = v44 & ~((int)v44 >> 31);
          return WebCore::RenderBlockFlow::setComputedColumnCountAndWidth((uint64_t)this, v31, v45);
        }
      }
      else if ((v32 & 2) != 0)
      {
        v33 = __OFADD__(v69, v26);
        if (__OFADD__(v69, v26))
          v34 = 0x7FFFFFFF;
        else
          v34 = v69 + v26;
        v11 = __OFADD__(v29, v26);
        v35 = v29 + v26;
        if (v11)
          v35 = 0x7FFFFFFF;
        v36 = ((uint64_t)v34 << 6) / v35;
        if (v36 <= (uint64_t)0xFFFFFFFF80000000)
          v36 = 0xFFFFFFFF80000000;
        if (v36 >= 0x7FFFFFFF)
          LODWORD(v36) = 0x7FFFFFFF;
        v37 = (int)v36 / 64;
        if (v37 <= 1)
          v31 = 1;
        else
          v31 = v37;
        if (v33)
          v38 = 0x7FFFFFFF;
        else
          v38 = v69 + v26;
        LODWORD(v39) = v31 << 6;
        if (v31 <= 0x1FFFFFE)
          v39 = v39;
        else
          v39 = 0x7FFFFFFFLL;
        v40 = ((uint64_t)v38 << 6) / v39;
        if (v40 <= (uint64_t)0xFFFFFFFF80000000)
          v40 = 0xFFFFFFFF80000000;
LABEL_102:
        if (v40 >= 0x7FFFFFFF)
          v52 = 0x7FFFFFFF;
        else
          v52 = v40;
        v45 = v52 - v26;
        if (__OFSUB__(v52, v26))
          v45 = (v52 >> 31) + 0x7FFFFFFF;
        return WebCore::RenderBlockFlow::setComputedColumnCountAndWidth((uint64_t)this, v31, v45);
      }
      v46 = __OFADD__(v69, v26);
      if (__OFADD__(v69, v26))
        v47 = 0x7FFFFFFF;
      else
        v47 = v69 + v26;
      v11 = __OFADD__(v29, v26);
      v48 = v29 + v26;
      if (v11)
        v48 = 0x7FFFFFFF;
      v49 = ((uint64_t)v47 << 6) / v48;
      if (v49 <= (uint64_t)0xFFFFFFFF80000000)
        v49 = 0xFFFFFFFF80000000;
      if (v49 >= 0x7FFFFFFF)
        LODWORD(v49) = 0x7FFFFFFF;
      v50 = (int)v49 / 64;
      if (v50 >= v31)
        v50 = v31;
      if (v50 <= 1)
        v31 = 1;
      else
        v31 = v50;
      if (v46)
        v51 = 0x7FFFFFFF;
      else
        v51 = v69 + v26;
      v40 = ((uint64_t)v51 << 6) / (v31 << 6);
      if (v40 <= (uint64_t)0xFFFFFFFF80000000)
        v40 = 0xFFFFFFFF80000000;
      goto LABEL_102;
    }
  }
  v23 = *((_QWORD *)this + 28);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 24);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 8);
      if (v25)
      {
        *(_DWORD *)(v25 + 352) = 1;
        *(_DWORD *)(v25 + 356) = v21;
        result = WebCore::RenderStyle::hasInlineColumnAxis(v2);
        *(_BYTE *)(v25 + 367) = result;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 28) + 24) + 8) + 368) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56) > 0x3Fu;
      }
    }
  }
  return result;
}

void WebCore::RenderBlockFlow::layoutInlineChildren(WebCore::RenderBlockFlow *this, int a2, WebCore::LayoutUnit *a3, WebCore::LayoutUnit *a4)
{
  unsigned int v5;
  BOOL v6;
  __int16 v7;
  WebCore::LegacyLineLayout *v8;
  void *v9;
  WebCore::LegacyLineLayout *v10;
  uint64_t v11;
  WebCore::LegacyLineLayout **v12;
  WTF *v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;

  v5 = *(unsigned __int16 *)((char *)this + 69);
  if (!(v5 >> 13))
  {
    v6 = (*((_BYTE *)this + 52) & 7) != 1 || (*((_BYTE *)this + 53) & 8) == 0;
    if (v6 || ((v15 = *((unsigned __int8 *)this + 46), v15 != 90) ? (v16 = v15 == 67) : (v16 = 1), v16))
      v7 = 0x2000;
    else
      v7 = 0x4000;
    LOWORD(v5) = v7 | v5;
    *(_WORD *)((char *)this + 69) = v5;
  }
  if ((v5 & 0xE000) == 0x2000)
  {
    WebCore::RenderBlockFlow::layoutModernLines(this, a2, a3, a4);
    return;
  }
  if (*((_DWORD *)this + 60) != 2 || (v10 = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29)) == 0)
  {
    v8 = (WebCore::LegacyLineLayout *)WTF::fastMalloc((WTF *)0x18);
    v10 = v8;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = this;
    v11 = *((unsigned int *)this + 60);
    if ((_DWORD)v11 != -1)
    {
      v12 = (WebCore::LegacyLineLayout **)((char *)this + 232);
      if ((_DWORD)v11 == 2)
      {
        v13 = *v12;
        *v12 = v8;
        if (v13)
        {
          v14 = (_QWORD *)*((_QWORD *)v13 + 1);
          if (v14)
          {
            do
            {
              v17 = (_QWORD *)v14[12];
              v18 = (_QWORD *)v14[9];
              if (v18)
              {
                do
                {
                  v19 = (_QWORD *)v18[1];
                  (*(void (**)(_QWORD *))(*v18 + 16))(v18);
                  v18 = v19;
                }
                while (v19);
              }
              (*(void (**)(_QWORD *))(*v14 + 216))(v14);
              (*(void (**)(_QWORD *))(*v14 + 8))(v14);
              v14 = v17;
            }
            while (v17);
          }
          *((_QWORD *)v13 + 1) = 0;
          *((_QWORD *)v13 + 2) = 0;
          WTF::fastFree(v13, v9);
          v10 = 0;
          if (*((_DWORD *)this + 60) == 2)
            v10 = *v12;
        }
        goto LABEL_25;
      }
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(&v20, (char *)this + 232);
    }
    *((_QWORD *)this + 29) = v10;
    *((_DWORD *)this + 60) = 2;
  }
LABEL_25:
  WebCore::LegacyLineLayout::layoutLineBoxes(v10);
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 212) = 0;
}

uint64_t WebCore::RenderView::computeColumnCountAndWidth(WebCore::RenderView *this)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  result = WebCore::RenderBox::contentLogicalWidth(this);
  v3 = (int)result / 64;
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56) >> 4) & 3;
  if (v4 != 2)
  {
    v16 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v16 - 2) < 2 || v16 == 4 || v16 == 5)
    {
      if (!v4)
        goto LABEL_12;
    }
    else if (v4)
    {
      goto LABEL_12;
    }
  }
  v5 = *((_QWORD *)this + 31);
  v6 = v5 + 1316;
  if (!*(_BYTE *)(v5 + 1316) && !*(_BYTE *)(v5 + 1317) && !*(_DWORD *)(v5 + 1320) && !*(_DWORD *)(v5 + 1324))
  {
    v7 = *(_QWORD *)(v5 + 328);
    if (*(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v6 = v9 + 468;
      }
    }
  }
  v10 = *(_DWORD *)(v6 + 4);
  if (v10)
    v3 = v10;
LABEL_12:
  v11 = v3 << 6;
  if (v3 < -33554432)
    v11 = 0x80000000;
  if (v3 <= 0x1FFFFFF)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  v13 = *((_QWORD *)this + 28);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        *(_DWORD *)(v15 + 352) = 1;
        *(_DWORD *)(v15 + 356) = v12;
        result = WebCore::RenderStyle::hasInlineColumnAxis((WebCore::RenderView *)((char *)this + 80));
        *(_BYTE *)(v15 + 367) = result;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 28) + 24) + 8) + 368) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24) + 56) > 0x3Fu;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderView::updateLogicalWidth(WebCore::RenderView *this)
{
  uint64_t v2;
  int v3;
  float v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  char *v8;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382)
    || (result = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328)),
        !(_DWORD)result))
  {
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    {
      result = WebCore::RenderView::viewHeight(this);
      goto LABEL_9;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
    {
      result = WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*((_QWORD *)this + 31) + 328));
      if ((result & 1) != 0)
      {
        v7 = 0;
        goto LABEL_14;
      }
    }
    v2 = *((_QWORD *)this + 31);
    if (*(int *)(v2 + 248) >= 1 && *(int *)(v2 + 252) >= 1 && *(_BYTE *)(v2 + 321))
    {
      v3 = *(_DWORD *)(v2 + 248);
    }
    else
    {
      v3 = WebCore::ScrollView::sizeForUnobscuredContent((id *)v2, 0);
      if (!*(_BYTE *)(*((_QWORD *)this + 31) + 321))
      {
        v4 = (float)v3;
LABEL_8:
        result = (int)v4;
LABEL_9:
        v6 = (_DWORD)result << 6;
        if ((int)result > 0x1FFFFFF)
          v6 = 0x7FFFFFFF;
        if ((int)result >= -33554432)
          v7 = v6;
        else
          v7 = 0x80000000;
        goto LABEL_14;
      }
    }
    v4 = ceilf(*(float *)(*((_QWORD *)this + 13) + 184) * (float)v3);
    goto LABEL_8;
  }
  if (!*((_BYTE *)this + 392))
  {
    __break(1u);
    return result;
  }
  v7 = *((_DWORD *)this + 96);
LABEL_14:
  v8 = (char *)this + 164;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v8 = (char *)this + 160;
  *(_DWORD *)v8 = v7;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<WebCore::DocumentTimeline,WTF::RawPtrTraits<WebCore::DocumentTimeline>,WTF::DefaultRefDerefTraits<WebCore::DocumentTimeline>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WebCore::FloatingObjects::clear(uint64_t *this, void *a2)
{
  uint64_t *v2;
  WTF **v3;
  _QWORD *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *i;
  WTF **v12;
  WTF *v13;
  WTF *v14;

  v2 = this;
  v4 = this + 1;
  v3 = (WTF **)this[1];
  if (v3)
  {
    do
    {
      v12 = (WTF **)v3[2];
      v13 = *v3;
      *v3 = 0;
      if (v13)
      {
        v14 = *(WTF **)v13;
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, a2);
          else
            --*(_DWORD *)v14;
        }
        WTF::fastFree(v13, a2);
      }
      this = (uint64_t *)WTF::fastFree((WTF *)v3, a2);
      v3 = v12;
    }
    while (v12);
  }
  v5 = *v2;
  if (*v2)
  {
    *v2 = 0;
    this = (uint64_t *)WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  *v4 = 0;
  v4[1] = 0;
  v6 = (WTF *)v2[3];
  v2[3] = 0;
  if (v6)
  {
    v7 = *(WTF **)v6;
    if (*(_QWORD *)v6)
    {
      do
      {
        v8 = v7;
        v7 = *(WTF **)v7;
      }
      while (v7);
      v9 = (WTF *)*((_QWORD *)v8 + 2);
      if (v9)
      {
        do
        {
          if (*(WTF **)v9 == v8)
          {
            for (i = (WTF *)*((_QWORD *)v9 + 1); i; i = *(WTF **)i)
              v9 = i;
          }
          v10 = v9;
          WTF::fastFree(v8, a2);
          v9 = (WTF *)*((_QWORD *)v10 + 2);
          v8 = v10;
        }
        while (v9);
      }
      else
      {
        v10 = v8;
      }
      WTF::fastFree(v10, a2);
      *(_QWORD *)v6 = 0;
    }
    this = (uint64_t *)WTF::fastFree(v6, a2);
  }
  v2[4] = 0;
  return this;
}

uint64_t WebCore::RenderBlockFlow::lowestFloatLogicalBottom(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  _QWORD *v4;
  _DWORD *v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
  {
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      v2 = 0;
      do
      {
        v5 = (_DWORD *)*v4;
        if ((*(_BYTE *)(*v4 + 36) & 0x10) != 0 && (*(_BYTE *)(*v4 + 36) & a2 & 3) != 0)
        {
          if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
          {
            v6 = v5[2];
            v7 = v5[4];
          }
          else
          {
            v6 = v5[3];
            v7 = v5[5];
          }
          v8 = __OFADD__(v6, v7);
          v9 = v6 + v7;
          v10 = (v6 >> 31) + 0x7FFFFFFF;
          if (v8)
            v9 = v10;
          if ((int)v2 <= v9)
            v2 = v9;
          else
            v2 = v2;
        }
        v4 = (_QWORD *)v4[2];
      }
      while (v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t WebCore::Page::allowsLoadFromURL(uint64_t result, WTF::URL *this, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  WTF::URL *v6;
  _QWORD v7[2];

  v3 = result;
  if ((a3 & 1) == 0 && !*(_BYTE *)(result + 1681))
    return 0;
  if (!*(_BYTE *)(result + 1672))
    return 1;
  if ((*((_BYTE *)this + 8) & 2) == 0)
  {
    v6 = this;
    result = WTF::URL::protocolIs();
    this = v6;
    if ((result & 1) == 0)
    {
      result = WTF::URL::protocolIs();
      this = v6;
      if (!(_DWORD)result)
        return 1;
    }
  }
  if (*(_BYTE *)(v3 + 1672))
  {
    v4 = (_QWORD *)(v3 + 1648);
    v7[0] = WTF::URL::host(this);
    v7[1] = v5;
    if (*v4)
      return WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::HashSetTranslatorAdapter<WTF::StringViewHashTranslator>,WTF::StringView>((uint64_t)v4, (uint64_t)v7) != 0;
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::GraphicsLayerCA::GraphicsLayerCA(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 72) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 76) = 0x3F0000003F000000;
  *(_OWORD *)(result + 84) = 0u;
  *(_OWORD *)(result + 100) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_DWORD *)(result + 128) = 1065353216;
  *(_OWORD *)(result + 132) = 0u;
  *(_OWORD *)(result + 148) = 0u;
  *(_DWORD *)(result + 164) = 0;
  *(_BYTE *)(result + 168) = 1;
  *(_BYTE *)(result + 169) = a2;
  *(_BYTE *)(result + 170) = 0;
  *(_DWORD *)(result + 172) = 3;
  *(_BYTE *)(result + 176) = 0;
  v3 = *(unsigned __int8 *)(result + 179) >> 6;
  if (a2 == 1)
    v4 = 791628;
  else
    v4 = 791624;
  *(_WORD *)(result + 177) = v4;
  *(_BYTE *)(result + 179) = (v4 & 0xFF3FFFFF | ((v3 & 3) << 22)) >> 16;
  *(_BYTE *)(result + 392) = 0;
  *(_BYTE *)(result + 512) = 0;
  *(_OWORD *)(result + 400) = 0uLL;
  *(_OWORD *)(result + 416) = 0uLL;
  *(_OWORD *)(result + 432) = 0uLL;
  *(_OWORD *)(result + 448) = 0uLL;
  *(_OWORD *)(result + 464) = 0uLL;
  *(_OWORD *)(result + 473) = 0uLL;
  *(_OWORD *)(result + 196) = 0uLL;
  *(_OWORD *)(result + 212) = 0uLL;
  *(_OWORD *)(result + 228) = 0uLL;
  *(_OWORD *)(result + 244) = 0uLL;
  *(_WORD *)(result + 520) = 1;
  *(_DWORD *)(result + 592) = 0;
  *(_DWORD *)(result + 600) = 0;
  *(_QWORD *)result = &off_1E3410D10;
  *(_QWORD *)(result + 608) = &unk_1E3411218;
  *(_QWORD *)(result + 760) = 0;
  *(_QWORD *)(result + 872) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(result + 880) = _D1;
  *(_WORD *)(result + 888) = 0;
  *(_BYTE *)(result + 890) = *(_BYTE *)(result + 890) & 0x80 | 4;
  *(_OWORD *)(result + 180) = 0uLL;
  *(_OWORD *)(result + 260) = 0uLL;
  *(_OWORD *)(result + 276) = 0uLL;
  *(_OWORD *)(result + 292) = 0uLL;
  *(_OWORD *)(result + 308) = 0uLL;
  *(_OWORD *)(result + 324) = 0uLL;
  *(_OWORD *)(result + 340) = 0uLL;
  *(_OWORD *)(result + 356) = 0uLL;
  *(_QWORD *)(result + 369) = 0;
  *(_OWORD *)(result + 616) = 0uLL;
  *(_OWORD *)(result + 632) = 0uLL;
  *(_OWORD *)(result + 648) = 0uLL;
  *(_OWORD *)(result + 664) = 0uLL;
  *(_OWORD *)(result + 680) = 0uLL;
  *(_OWORD *)(result + 696) = 0uLL;
  *(_OWORD *)(result + 712) = 0uLL;
  *(_OWORD *)(result + 728) = 0uLL;
  *(_OWORD *)(result + 744) = 0uLL;
  *(_OWORD *)(result + 840) = 0uLL;
  *(_OWORD *)(result + 856) = 0uLL;
  *(_OWORD *)(result + 808) = 0uLL;
  *(_OWORD *)(result + 824) = 0uLL;
  *(_OWORD *)(result + 776) = 0uLL;
  *(_OWORD *)(result + 792) = 0uLL;
  return result;
}

{
  int v3;
  int v4;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 72) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 76) = 0x3F0000003F000000;
  *(_OWORD *)(result + 84) = 0u;
  *(_OWORD *)(result + 100) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_DWORD *)(result + 128) = 1065353216;
  *(_OWORD *)(result + 132) = 0u;
  *(_OWORD *)(result + 148) = 0u;
  *(_DWORD *)(result + 164) = 0;
  *(_BYTE *)(result + 168) = 1;
  *(_BYTE *)(result + 169) = a2;
  *(_BYTE *)(result + 170) = 0;
  *(_DWORD *)(result + 172) = 3;
  *(_BYTE *)(result + 176) = 0;
  v3 = *(unsigned __int8 *)(result + 179) >> 6;
  if (a2 == 1)
    v4 = 791628;
  else
    v4 = 791624;
  *(_WORD *)(result + 177) = v4;
  *(_BYTE *)(result + 179) = (v4 & 0xFF3FFFFF | ((v3 & 3) << 22)) >> 16;
  *(_BYTE *)(result + 392) = 0;
  *(_BYTE *)(result + 512) = 0;
  *(_OWORD *)(result + 400) = 0uLL;
  *(_OWORD *)(result + 416) = 0uLL;
  *(_OWORD *)(result + 432) = 0uLL;
  *(_OWORD *)(result + 448) = 0uLL;
  *(_OWORD *)(result + 464) = 0uLL;
  *(_OWORD *)(result + 473) = 0uLL;
  *(_OWORD *)(result + 196) = 0uLL;
  *(_OWORD *)(result + 212) = 0uLL;
  *(_OWORD *)(result + 228) = 0uLL;
  *(_OWORD *)(result + 244) = 0uLL;
  *(_WORD *)(result + 520) = 1;
  *(_DWORD *)(result + 592) = 0;
  *(_DWORD *)(result + 600) = 0;
  *(_QWORD *)result = &off_1E3410D10;
  *(_QWORD *)(result + 608) = &unk_1E3411218;
  *(_QWORD *)(result + 760) = 0;
  *(_QWORD *)(result + 872) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(result + 880) = _D1;
  *(_WORD *)(result + 888) = 0;
  *(_BYTE *)(result + 890) = *(_BYTE *)(result + 890) & 0x80 | 4;
  *(_OWORD *)(result + 180) = 0uLL;
  *(_OWORD *)(result + 260) = 0uLL;
  *(_OWORD *)(result + 276) = 0uLL;
  *(_OWORD *)(result + 292) = 0uLL;
  *(_OWORD *)(result + 308) = 0uLL;
  *(_OWORD *)(result + 324) = 0uLL;
  *(_OWORD *)(result + 340) = 0uLL;
  *(_OWORD *)(result + 356) = 0uLL;
  *(_QWORD *)(result + 369) = 0;
  *(_OWORD *)(result + 616) = 0uLL;
  *(_OWORD *)(result + 632) = 0uLL;
  *(_OWORD *)(result + 648) = 0uLL;
  *(_OWORD *)(result + 664) = 0uLL;
  *(_OWORD *)(result + 680) = 0uLL;
  *(_OWORD *)(result + 696) = 0uLL;
  *(_OWORD *)(result + 712) = 0uLL;
  *(_OWORD *)(result + 728) = 0uLL;
  *(_OWORD *)(result + 744) = 0uLL;
  *(_OWORD *)(result + 840) = 0uLL;
  *(_OWORD *)(result + 856) = 0uLL;
  *(_OWORD *)(result + 808) = 0uLL;
  *(_OWORD *)(result + 824) = 0uLL;
  *(_OWORD *)(result + 776) = 0uLL;
  *(_OWORD *)(result + 792) = 0uLL;
  return result;
}

uint64_t PAL::VisionKitCoreLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  return qword_1ECE7EE48;
}

void WebCore::Page::resetRelevantPaintedObjectCounter(WebCore::Page *this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *((_BYTE *)this + 768) = 0;
  WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t)this + 680, a2);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  WebCore::Region::operator=((uint64_t)this + 696, &v6);
  WebCore::Region::~Region((WebCore::Region *)&v6, v3);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  WebCore::Region::operator=((uint64_t)this + 720, &v6);
  WebCore::Region::~Region((WebCore::Region *)&v6, v4);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  WebCore::Region::operator=((uint64_t)this + 744, &v6);
  WebCore::Region::~Region((WebCore::Region *)&v6, v5);
}

uint64_t WebCore::Region::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = a2[2];
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
  {
    v5 = *(WTF **)(v4 + 144);
    if ((WTF *)(v4 + 160) != v5 && v5 != 0)
    {
      *(_QWORD *)(v4 + 144) = 0;
      *(_DWORD *)(v4 + 152) = 0;
      WTF::fastFree(v5, a2);
    }
    v7 = *(WTF **)v4;
    if (v4 + 16 != *(_QWORD *)v4 && v7 != 0)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;
  void *v10;
  WTF *v11;
  WTF *v12;
  WTF *v14;
  WTF *v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = a2[2];
  if (v3)
  {
    std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>(v3, (uint64_t *)&v17);
    v4 = v17;
  }
  else
  {
    v4 = 0;
  }
  v17 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
  {
    v6 = *(WTF **)(v5 + 144);
    if ((WTF *)(v5 + 160) != v6 && v6 != 0)
    {
      *(_QWORD *)(v5 + 144) = 0;
      *(_DWORD *)(v5 + 152) = 0;
      WTF::fastFree(v6, a2);
    }
    v8 = *(WTF **)v5;
    if (v5 + 16 != *(_QWORD *)v5 && v8 != 0)
    {
      *(_QWORD *)v5 = 0;
      *(_DWORD *)(v5 + 8) = 0;
      WTF::fastFree(v8, a2);
    }
    WTF::fastFree((WTF *)v5, a2);
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      v12 = (WTF *)*((_QWORD *)v11 + 18);
      if ((WTF *)((char *)v11 + 160) != v12 && v12 != 0)
      {
        *((_QWORD *)v11 + 18) = 0;
        *((_DWORD *)v11 + 38) = 0;
        WTF::fastFree(v12, v10);
      }
      v14 = *(WTF **)v11;
      if ((WTF *)((char *)v11 + 16) != *(WTF **)v11 && v14 != 0)
      {
        *(_QWORD *)v11 = 0;
        *((_DWORD *)v11 + 2) = 0;
        WTF::fastFree(v14, v10);
      }
      WTF::fastFree(v11, v10);
    }
  }
  return a1;
}

void WebCore::ScrollingStateTree::createAfterReconstruction(char a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v16 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = *a3;
  *a3 = 0;
  v20 = v5;
  v21 = 0x100000000;
  LOBYTE(v22) = 0;
  HIBYTE(v22) = a1;
  WebCore::ScrollingStateTree::setHasChangedProperties((WebCore::ScrollingStateTree *)&v16, a2);
  v15 = 1;
  v7 = v20;
  if (v20)
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = off_1E3404380;
    v8[1] = &v16;
    v8[2] = &v15;
    v14 = v8;
    WebCore::ScrollingStateNode::traverse(v7, &v14);
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    v9 = v15;
    if (!v15)
    {
      *(_BYTE *)a4 = 0;
      goto LABEL_7;
    }
    v10 = v20;
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)a4 = 0;
  v11 = v17;
  v17 = 0u;
  *(_OWORD *)(a4 + 8) = v11;
  *(_OWORD *)(a4 + 24) = v18;
  v12 = v19;
  v19 = 0u;
  *(_OWORD *)(a4 + 40) = v12;
  v20 = 0;
  v13 = v21;
  *(_QWORD *)(a4 + 56) = v10;
  *(_QWORD *)(a4 + 64) = v13;
  v9 = 1;
  *(_WORD *)(a4 + 72) = v22;
LABEL_7:
  *(_BYTE *)(a4 + 80) = v9;
  WebCore::ScrollingStateTree::~ScrollingStateTree((WebCore::ScrollingStateTree *)&v16, v6);
}

void WebCore::ScrollingStateTree::~ScrollingStateTree(WebCore::ScrollingStateTree *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v3)
    goto LABEL_10;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v19 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v19 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      WTF::fastFree((WTF *)v4, a2);
  }
LABEL_10:
  v11 = *((_QWORD *)this + 6);
  if (v11)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v11, a2);
  v12 = *((_QWORD *)this + 5);
  if (v12)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v12, a2);
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
LABEL_18:
      v15 = *(_QWORD *)(v13 + 16) - 1;
      *(_QWORD *)(v13 + 16) = v15;
      if (v15)
      {
        v18 = __ldxr((unsigned __int8 *)v13);
        if (v18 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v13))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v13);
        return;
      }
      v16 = *(_QWORD *)(v13 + 8);
      v17 = __ldxr((unsigned __int8 *)v13);
      if (v17 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
          goto LABEL_21;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_21:
      if (!v16)
        WTF::fastFree((WTF *)v13, a2);
      return;
    }
    MEMORY[0x19AEA534C](v13);
    goto LABEL_18;
  }
}

void WebCore::ScrollingStateFrameScrollingNode::~ScrollingStateFrameScrollingNode(WebCore::ScrollingStateFrameScrollingNode *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateFrameScrollingNode::~ScrollingStateFrameScrollingNode(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  WTF *v7;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  WebCore::Region *v16;

  v3 = *((_QWORD *)this + 100);
  if (v3)
  {
    v15 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v15)
    {
      v16 = (WebCore::Region *)(v3 + 8);
      do
      {
        if (*((unsigned __int8 *)v16 - 8) != 254)
          WebCore::Region::~Region(v16, a2);
        v16 = (WebCore::Region *)((char *)v16 + 32);
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v4 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v4)
  {
    v5 = *(WTF **)(v4 + 144);
    if ((WTF *)(v4 + 160) != v5 && v5 != 0)
    {
      *(_QWORD *)(v4 + 144) = 0;
      *(_DWORD *)(v4 + 152) = 0;
      WTF::fastFree(v5, a2);
    }
    v7 = *(WTF **)v4;
    if (v4 + 16 != *(_QWORD *)v4 && v7 != 0)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v7, a2);
    }
    WTF::fastFree((WTF *)v4, a2);
  }
  if (*((_DWORD *)this + 192) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(*((CFTypeRef *)this + 93), a2);
  v9 = (_DWORD *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  if (*((_DWORD *)this + 182) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(*((CFTypeRef *)this + 88), a2);
  v10 = (_DWORD *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[2];
  }
  if (*((_DWORD *)this + 172) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(*((CFTypeRef *)this + 83), a2);
  v11 = (_DWORD *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[2];
  }
  if (*((_DWORD *)this + 162) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(*((CFTypeRef *)this + 78), a2);
  v12 = (_DWORD *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[2];
  }
  if (*((_DWORD *)this + 152) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(*((CFTypeRef *)this + 73), a2);
  v13 = (_DWORD *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
    else
      --v13[2];
  }
  if (*((_DWORD *)this + 142) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(*((CFTypeRef *)this + 68), a2);
  v14 = (_DWORD *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[2];
  }
  WebCore::ScrollingStateScrollingNode::~ScrollingStateScrollingNode(this, a2);
}

void WebCore::ScrollingStateNode::~ScrollingStateNode(CFTypeRef *this, void *a2)
{
  _DWORD *v3;
  void *v4;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;

  *this = off_1E3403ED0;
  if (*((_DWORD *)this + 30) == 2)
    WebCore::LayerRepresentation::releasePlatformLayer(this[12], a2);
  v3 = this[11];
  this[11] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  WTF::Vector<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 9), a2);
  v5 = (unsigned __int8 *)this[7];
  this[7] = 0;
  if (v5)
  {
    if (__ldaxr(v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, v5))
    {
LABEL_10:
      v7 = *((_QWORD *)v5 + 2) - 1;
      *((_QWORD *)v5 + 2) = v7;
      if (v7)
      {
        v11 = __ldxr(v5);
        if (v11 == 1)
        {
          if (!__stlxr(0, v5))
            goto LABEL_15;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v5);
        goto LABEL_15;
      }
      v8 = *((_QWORD *)v5 + 1);
      v9 = __ldxr(v5);
      if (v9 == 1)
      {
        if (!__stlxr(0, v5))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
      if (!v8)
        WTF::fastFree((WTF *)v5, v4);
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v5);
    goto LABEL_10;
  }
LABEL_15:
  v10 = this[6];
  if (v10)
  {
    if (!*v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C289CLL);
    }
    --*v10;
  }
}

void WebCore::ScrollingStateScrollingNode::~ScrollingStateScrollingNode(WebCore::ScrollingStateScrollingNode *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  *(_QWORD *)this = off_1E3404050;
  v3 = *((_QWORD *)this + 6);
  if (v3)
    --*(_DWORD *)(v3 + 64);
  if (*((_DWORD *)this + 102) == 2)
  {
    v9 = (const void *)*((_QWORD *)this + 48);
    if (v9)
      CFRelease(v9);
  }
  v4 = (_DWORD *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
  }
  if (*((_DWORD *)this + 92) == 2)
  {
    v10 = (const void *)*((_QWORD *)this + 43);
    if (v10)
      CFRelease(v10);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[2];
  }
  if (*((_DWORD *)this + 82) == 2)
  {
    v11 = (const void *)*((_QWORD *)this + 38);
    if (v11)
      CFRelease(v11);
  }
  v6 = (_DWORD *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[2];
  }
  if (*((_DWORD *)this + 72) == 2)
  {
    v12 = (const void *)*((_QWORD *)this + 33);
    if (v12)
      CFRelease(v12);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::~ScrollSnapOffsetsInfo((uint64_t)this + 168, a2);
  WebCore::ScrollingStateNode::~ScrollingStateNode((CFTypeRef *)this, v8);
}

uint64_t WebCore::ScrollSnapOffsetsInfo<float,WebCore::FloatRect>::~ScrollSnapOffsetsInfo(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v10;
  char *v11;
  WTF *v12;
  uint64_t v13;
  char *v14;
  WTF *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(WTF **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(unsigned int *)(a1 + 36);
  v6 = *(WTF **)(a1 + 24);
  if (!(_DWORD)v5)
  {
    if (!v6)
      goto LABEL_7;
    goto LABEL_21;
  }
  v10 = 40 * v5;
  v11 = (char *)v6 + 24;
  do
  {
    v12 = *(WTF **)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)v11 = 0;
      *((_DWORD *)v11 + 2) = 0;
      v16 = v11;
      v18 = v10;
      WTF::fastFree(v12, a2);
      v11 = v16;
      v10 = v18;
    }
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  v6 = *(WTF **)(a1 + 24);
  if (v6)
  {
LABEL_21:
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v6, a2);
  }
LABEL_7:
  v7 = *(unsigned int *)(a1 + 20);
  v8 = *(WTF **)(a1 + 8);
  if (!(_DWORD)v7)
  {
    if (!v8)
      return a1;
LABEL_23:
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v8, a2);
    return a1;
  }
  v13 = 40 * v7;
  v14 = (char *)v8 + 24;
  do
  {
    v15 = *(WTF **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      v17 = v14;
      v19 = v13;
      WTF::fastFree(v15, a2);
      v14 = v17;
      v13 = v19;
    }
    v14 += 40;
    v13 -= 40;
  }
  while (v13);
  v8 = *(WTF **)(a1 + 8);
  if (v8)
    goto LABEL_23;
  return a1;
}

void WebCore::LayerRepresentation::releasePlatformLayer(CFTypeRef this, void *a2)
{
  if (this)
    CFRelease(this);
}

void WebCore::Region::~Region(WebCore::Region *this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v5;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = *(WTF **)(v2 + 144);
    if ((WTF *)(v2 + 160) != v3 && v3 != 0)
    {
      *(_QWORD *)(v2 + 144) = 0;
      *(_DWORD *)(v2 + 152) = 0;
      WTF::fastFree(v3, a2);
    }
    v5 = *(WTF **)v2;
    if (v2 + 16 != *(_QWORD *)v2 && v5 != 0)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree((WTF *)v2, a2);
  }
}

{
  uint64_t v2;
  WTF *v3;
  WTF *v5;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = *(WTF **)(v2 + 144);
    if ((WTF *)(v2 + 160) != v3 && v3 != 0)
    {
      *(_QWORD *)(v2 + 144) = 0;
      *(_DWORD *)(v2 + 152) = 0;
      WTF::fastFree(v3, a2);
    }
    v5 = *(WTF **)v2;
    if (v2 + 16 != *(_QWORD *)v2 && v5 != 0)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::fastFree((WTF *)v2, a2);
  }
}

WebCore::ScrollingStateNode *WebCore::ScrollingStateTree::commit@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WebCore::ScrollingStateNode *result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v6 = 0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 52) = 0u;
  *(_WORD *)(v6 + 72) = 0;
  *a3 = v6;
  *(_DWORD *)(v6 + 68) = a2;
  result = *(WebCore::ScrollingStateNode **)(a1 + 56);
  if (result)
  {
    result = (WebCore::ScrollingStateNode *)WebCore::ScrollingStateNode::cloneAndReset(result, (WebCore::ScrollingStateTree *)v6, &v31);
    v9 = v31;
    if (*(unsigned __int8 *)(v31 + 16) >= 2u)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C300CLL);
    }
    v31 = 0;
    v10 = *(_QWORD *)(v6 + 56);
    *(_QWORD *)(v6 + 56) = v9;
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (__ldaxr((unsigned __int8 *)v11))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v11))
      {
LABEL_7:
        v13 = *(_QWORD *)(v11 + 8);
        v14 = v13 - 1;
        *(_QWORD *)(v11 + 8) = v13 - 1;
        if (v13 == 1)
        {
          v29 = *(_QWORD *)(v11 + 16);
          v15 = *(_QWORD *)(v11 + 24);
          *(_QWORD *)(v11 + 24) = 0;
          v16 = v29 != 0;
        }
        else
        {
          v15 = 0;
          v16 = 1;
        }
        v17 = __ldxr((unsigned __int8 *)v11);
        if (v17 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v11))
            goto LABEL_11;
        }
        else
        {
          __clrex();
        }
        result = (WebCore::ScrollingStateNode *)WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_11:
        if (!v14)
        {
          if (v15)
            result = (WebCore::ScrollingStateNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (!v16)
            result = (WebCore::ScrollingStateNode *)WTF::fastFree((WTF *)v11, v8);
        }
        v18 = v31;
        v31 = 0;
        if (!v18)
          goto LABEL_13;
        v22 = *(_QWORD *)(v18 + 8);
        if (__ldaxr((unsigned __int8 *)v22))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v22))
        {
LABEL_25:
          v24 = *(_QWORD *)(v22 + 8);
          v25 = v24 - 1;
          *(_QWORD *)(v22 + 8) = v24 - 1;
          if (v24 == 1)
          {
            v30 = *(_QWORD *)(v22 + 16);
            v26 = *(_QWORD *)(v22 + 24);
            *(_QWORD *)(v22 + 24) = 0;
            v27 = v30 != 0;
          }
          else
          {
            v26 = 0;
            v27 = 1;
          }
          v28 = __ldxr((unsigned __int8 *)v22);
          if (v28 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v22))
              goto LABEL_29;
          }
          else
          {
            __clrex();
          }
          result = (WebCore::ScrollingStateNode *)WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_29:
          if (!v25)
          {
            if (v26)
              result = (WebCore::ScrollingStateNode *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            if (!v27)
              result = (WebCore::ScrollingStateNode *)WTF::fastFree((WTF *)v22, v8);
          }
          goto LABEL_13;
        }
        result = (WebCore::ScrollingStateNode *)MEMORY[0x19AEA534C](v22);
        goto LABEL_25;
      }
      result = (WebCore::ScrollingStateNode *)MEMORY[0x19AEA534C](v11);
      goto LABEL_7;
    }
  }
LABEL_13:
  v19 = *(_BYTE *)(a1 + 72);
  *(_BYTE *)(a1 + 72) = 0;
  v20 = *a3;
  *(_BYTE *)(v20 + 72) = v19;
  v21 = *(_BYTE *)(a1 + 73);
  *(_BYTE *)(a1 + 73) = 0;
  *(_BYTE *)(v20 + 73) = v21;
  return result;
}

_QWORD *WebCore::ScrollingStateNode::cloneAndReset@<X0>(WebCore::ScrollingStateNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  WebCore::ScrollingStateNode **v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(a3);
  *((_QWORD *)this + 5) = 0;
  v7 = *((unsigned int *)this + 21);
  if ((_DWORD)v7)
  {
    v8 = *a3;
    v9 = (WebCore::ScrollingStateNode **)*((_QWORD *)this + 9);
    v10 = 8 * v7;
    while (1)
    {
      WebCore::ScrollingStateNode::cloneAndReset(&v21, *v9, a2);
      result = WebCore::ScrollingStateNode::appendChild(v8, &v21);
      v12 = v21;
      v21 = 0;
      if (v12)
        break;
LABEL_5:
      ++v9;
      v10 -= 8;
      if (!v10)
        return result;
    }
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
LABEL_10:
      v15 = *(_QWORD *)(v13 + 8);
      v16 = v15 - 1;
      *(_QWORD *)(v13 + 8) = v15 - 1;
      if (v15 == 1)
      {
        v20 = *(_QWORD *)(v13 + 16);
        v17 = *(_QWORD *)(v13 + 24);
        *(_QWORD *)(v13 + 24) = 0;
        v18 = v20 != 0;
      }
      else
      {
        v17 = 0;
        v18 = 1;
      }
      v19 = __ldxr((unsigned __int8 *)v13);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
        {
LABEL_15:
          if (!v16)
          {
            if (v17)
              result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            if (!v18)
              result = (_QWORD *)WTF::fastFree((WTF *)v13, v11);
          }
          goto LABEL_5;
        }
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_15;
    }
    result = (_QWORD *)MEMORY[0x19AEA534C](v13);
    goto LABEL_10;
  }
  return result;
}

void WebCore::ScrollingStateFrameScrollingNode::clone(unsigned __int8 **this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, uint64_t *a3@<X8>)
{
  _OWORD *v6;
  uint64_t v7;
  WebCore::ScrollingStateScrollingNode *v8;
  CALayer *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  WebCore::LayerRepresentation *v18;
  const void *PlatformLayerTypeless;
  void *v20;
  void *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  WebCore::LayerRepresentation *v24;
  const void *v25;
  void *v26;
  void *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  WebCore::LayerRepresentation *v30;
  const void *v31;
  void *v32;
  void *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  WebCore::LayerRepresentation *v36;
  const void *v37;
  void *v38;
  void *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  WebCore::LayerRepresentation *v42;
  const void *v43;
  void *v44;
  void *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  WebCore::LayerRepresentation *v48;
  const void *v49;
  void *v50;
  void *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v6 = this + 69;
  v7 = WTF::fastMalloc((WTF *)0x370);
  v8 = WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode((WebCore::ScrollingStateScrollingNode *)v7, (const WebCore::ScrollingStateScrollingNode *)this, a2);
  *(_QWORD *)v8 = off_1E3403E90;
  *(_OWORD *)((char *)v8 + 536) = 0u;
  *(_OWORD *)((char *)v8 + 552) = 0u;
  *((_DWORD *)v8 + 142) = 0;
  *((_OWORD *)v8 + 36) = 0u;
  *((_OWORD *)v8 + 37) = 0u;
  *((_DWORD *)v8 + 152) = 0;
  *(_OWORD *)((char *)v8 + 616) = 0u;
  *(_OWORD *)((char *)v8 + 632) = 0u;
  *((_DWORD *)v8 + 162) = 0;
  *((_OWORD *)v8 + 41) = 0u;
  *((_OWORD *)v8 + 42) = 0u;
  *((_DWORD *)v8 + 172) = 0;
  *(_OWORD *)((char *)v8 + 696) = 0u;
  *(_OWORD *)((char *)v8 + 712) = 0u;
  *((_DWORD *)v8 + 182) = 0;
  *((_DWORD *)v8 + 192) = 0;
  *(_OWORD *)(v7 + 736) = 0u;
  *(_OWORD *)(v7 + 752) = 0u;
  WebCore::Region::Region((uint64_t)v8 + 776, (const WebCore::Region *)(this + 97));
  WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::HashTable((uint64_t *)(v7 + 800), this + 100);
  *(_OWORD *)(v7 + 808) = v6[16];
  *(_QWORD *)(v7 + 824) = this[103];
  *(_QWORD *)(v7 + 832) = this[104];
  v10 = *((_DWORD *)this + 212);
  *(_QWORD *)(v7 + 840) = this[105];
  *(_DWORD *)(v7 + 848) = v10;
  *(_DWORD *)(v7 + 852) = *((_DWORD *)this + 213);
  *(_DWORD *)(v7 + 856) = *((_DWORD *)this + 214);
  *(_DWORD *)(v7 + 860) = *((_DWORD *)this + 215);
  *(_DWORD *)(v7 + 864) = *((_DWORD *)this + 216);
  *(_DWORD *)(v7 + 868) = *((_DWORD *)this + 217);
  *(_WORD *)(v7 + 872) = *((_WORD *)this + 436);
  *(_BYTE *)(v7 + 874) = *((_BYTE *)this + 874);
  v11 = *(_QWORD *)(v7 + 40);
  if ((v11 & 0x1000000) != 0)
  {
    v12 = *((_DWORD *)a2 + 17);
    if (v12 == 3)
    {
      v58 = 0uLL;
      v59 = *v6;
      LODWORD(v60) = 3;
LABEL_10:
      WebCore::ScrollingStateFrameScrollingNode::setRootContentsLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
LABEL_11:
      v11 = *(_QWORD *)(v7 + 40);
      goto LABEL_2;
    }
    v54 = v6;
    if (v12 == 2)
    {
      v18 = (WebCore::LayerRepresentation *)this[67];
      if (v18)
        v18 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v18 + 584))(v18);
      *(_QWORD *)&v58 = 0;
      PlatformLayerTypeless = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v18, v9);
      v59 = 0uLL;
      *((_QWORD *)&v58 + 1) = PlatformLayerTypeless;
      LODWORD(v60) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(PlatformLayerTypeless, v20);
      WebCore::ScrollingStateFrameScrollingNode::setRootContentsLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
      WebCore::LayerRepresentation::releasePlatformLayer(PlatformLayerTypeless, v21);
    }
    else
    {
      if (v12 != 1)
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        goto LABEL_10;
      }
      v22 = this[67];
      if (v22)
      {
        ++*((_DWORD *)v22 + 2);
        v58 = (unint64_t)v22;
        *(_QWORD *)&v59 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v22 + 32))(v22);
        *((_QWORD *)&v59 + 1) = v23;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setRootContentsLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
        if (*((_DWORD *)v22 + 2) == 1)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v22 + 16))(v22);
        else
          --*((_DWORD *)v22 + 2);
      }
      else
      {
        v58 = 0u;
        v59 = 0u;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setRootContentsLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
      }
    }
    v6 = v54;
    goto LABEL_11;
  }
LABEL_2:
  if ((v11 & 0x2000000) == 0)
    goto LABEL_3;
  v13 = *((_DWORD *)a2 + 17);
  if (v13 != 3)
  {
    v55 = v6;
    if (v13 == 2)
    {
      v24 = (WebCore::LayerRepresentation *)this[72];
      if (v24)
        v24 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v24 + 584))(v24);
      *(_QWORD *)&v58 = 0;
      v25 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v24, v9);
      v59 = 0uLL;
      *((_QWORD *)&v58 + 1) = v25;
      LODWORD(v60) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v25, v26);
      WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
      WebCore::LayerRepresentation::releasePlatformLayer(v25, v27);
    }
    else
    {
      if (v13 != 1)
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        goto LABEL_14;
      }
      v28 = this[72];
      if (v28)
      {
        ++*((_DWORD *)v28 + 2);
        v58 = (unint64_t)v28;
        *(_QWORD *)&v59 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v28 + 32))(v28);
        *((_QWORD *)&v59 + 1) = v29;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
        if (*((_DWORD *)v28 + 2) == 1)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 2);
      }
      else
      {
        v58 = 0u;
        v59 = 0u;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
      }
    }
    v6 = v55;
    goto LABEL_15;
  }
  v58 = 0uLL;
  v59 = *((_OWORD *)this + 37);
  LODWORD(v60) = 3;
LABEL_14:
  WebCore::ScrollingStateFrameScrollingNode::setCounterScrollingLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
LABEL_15:
  v11 = *(_QWORD *)(v7 + 40);
LABEL_3:
  if ((v11 & 0x4000000) == 0)
    goto LABEL_4;
  v14 = *((_DWORD *)a2 + 17);
  if (v14 != 3)
  {
    v56 = v6;
    if (v14 == 2)
    {
      v30 = (WebCore::LayerRepresentation *)this[77];
      if (v30)
        v30 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v30 + 584))(v30);
      *(_QWORD *)&v58 = 0;
      v31 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v30, v9);
      v59 = 0uLL;
      *((_QWORD *)&v58 + 1) = v31;
      LODWORD(v60) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v31, v32);
      WebCore::ScrollingStateFrameScrollingNode::setInsetClipLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
      WebCore::LayerRepresentation::releasePlatformLayer(v31, v33);
    }
    else
    {
      if (v14 != 1)
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        goto LABEL_18;
      }
      v34 = this[77];
      if (v34)
      {
        ++*((_DWORD *)v34 + 2);
        v58 = (unint64_t)v34;
        *(_QWORD *)&v59 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v34 + 32))(v34);
        *((_QWORD *)&v59 + 1) = v35;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setInsetClipLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
        if (*((_DWORD *)v34 + 2) == 1)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v34 + 16))(v34);
        else
          --*((_DWORD *)v34 + 2);
      }
      else
      {
        v58 = 0u;
        v59 = 0u;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setInsetClipLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
      }
    }
    v6 = v56;
    goto LABEL_19;
  }
  v58 = 0uLL;
  v59 = v6[5];
  LODWORD(v60) = 3;
LABEL_18:
  WebCore::ScrollingStateFrameScrollingNode::setInsetClipLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
LABEL_19:
  v11 = *(_QWORD *)(v7 + 40);
LABEL_4:
  if ((v11 & 0x8000000) == 0)
    goto LABEL_5;
  v16 = *((_DWORD *)a2 + 17);
  if (v16 != 3)
  {
    v57 = v6;
    if (v16 == 2)
    {
      v42 = (WebCore::LayerRepresentation *)this[82];
      if (v42)
        v42 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v42 + 584))(v42);
      *(_QWORD *)&v58 = 0;
      v43 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v42, v9);
      v59 = 0uLL;
      *((_QWORD *)&v58 + 1) = v43;
      LODWORD(v60) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v43, v44);
      WebCore::ScrollingStateFrameScrollingNode::setContentShadowLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
      WebCore::LayerRepresentation::releasePlatformLayer(v43, v45);
    }
    else
    {
      if (v16 != 1)
      {
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        goto LABEL_26;
      }
      v46 = this[82];
      if (v46)
      {
        ++*((_DWORD *)v46 + 2);
        v58 = (unint64_t)v46;
        *(_QWORD *)&v59 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v46 + 32))(v46);
        *((_QWORD *)&v59 + 1) = v47;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setContentShadowLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
        if (*((_DWORD *)v46 + 2) == 1)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v46 + 16))(v46);
        else
          --*((_DWORD *)v46 + 2);
      }
      else
      {
        v58 = 0u;
        v59 = 0u;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setContentShadowLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
      }
    }
    v6 = v57;
    goto LABEL_27;
  }
  v58 = 0uLL;
  v59 = *((_OWORD *)this + 42);
  LODWORD(v60) = 3;
LABEL_26:
  WebCore::ScrollingStateFrameScrollingNode::setContentShadowLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
LABEL_27:
  v11 = *(_QWORD *)(v7 + 40);
LABEL_5:
  if ((v11 & 0x2000000000000) == 0)
    goto LABEL_6;
  v17 = *((_DWORD *)a2 + 17);
  switch(v17)
  {
    case 3:
      v58 = 0uLL;
      v59 = v6[10];
      break;
    case 2:
      v48 = (WebCore::LayerRepresentation *)this[87];
      if (v48)
        v48 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v48 + 584))(v48);
      *(_QWORD *)&v58 = 0;
      v49 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v48, v9);
      v59 = 0uLL;
      *((_QWORD *)&v58 + 1) = v49;
      LODWORD(v60) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v49, v50);
      WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
      WebCore::LayerRepresentation::releasePlatformLayer(v49, v51);
      goto LABEL_32;
    case 1:
      v52 = this[87];
      if (v52)
      {
        ++*((_DWORD *)v52 + 2);
        v58 = (unint64_t)v52;
        *(_QWORD *)&v59 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v52 + 32))(v52);
        *((_QWORD *)&v59 + 1) = v53;
        LODWORD(v60) = 1;
        WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
        if (*((_DWORD *)v52 + 2) == 1)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v52 + 16))(v52);
        else
          --*((_DWORD *)v52 + 2);
        goto LABEL_32;
      }
      v58 = 0u;
      v59 = 0u;
      v17 = 1;
      break;
    default:
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      goto LABEL_31;
  }
  LODWORD(v60) = v17;
LABEL_31:
  WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer((char *)v7, (const WebCore::LayerRepresentation *)&v58);
LABEL_32:
  v11 = *(_QWORD *)(v7 + 40);
LABEL_6:
  if ((v11 & 0x40000000000) == 0)
    goto LABEL_7;
  v15 = *((_DWORD *)a2 + 17);
  switch(v15)
  {
    case 3:
      v58 = 0uLL;
      v59 = *((_OWORD *)this + 47);
LABEL_22:
      LODWORD(v60) = v15;
LABEL_23:
      WebCore::ScrollingStateFrameScrollingNode::setFooterLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
      break;
    case 2:
      v36 = (WebCore::LayerRepresentation *)this[92];
      if (v36)
        v36 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v36 + 584))(v36);
      *(_QWORD *)&v58 = 0;
      v37 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v36, v9);
      v59 = 0uLL;
      *((_QWORD *)&v58 + 1) = v37;
      LODWORD(v60) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v37, v38);
      WebCore::ScrollingStateFrameScrollingNode::setFooterLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
      WebCore::LayerRepresentation::releasePlatformLayer(v37, v39);
      break;
    case 1:
      v40 = this[92];
      if (!v40)
      {
        v58 = 0u;
        v59 = 0u;
        v15 = 1;
        goto LABEL_22;
      }
      ++*((_DWORD *)v40 + 2);
      v58 = (unint64_t)v40;
      *(_QWORD *)&v59 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v40 + 32))(v40);
      *((_QWORD *)&v59 + 1) = v41;
      LODWORD(v60) = 1;
      WebCore::ScrollingStateFrameScrollingNode::setFooterLayer((CFTypeRef)v7, (const WebCore::LayerRepresentation *)&v58);
      if (*((_DWORD *)v40 + 2) == 1)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v40 + 16))(v40);
      else
        --*((_DWORD *)v40 + 2);
      break;
    default:
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      goto LABEL_23;
  }
LABEL_7:
  *a3 = v7;
}

uint64_t WebCore::ScrollingStateNode::traverse(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a1);
  v5 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(a1 + 72);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      result = WebCore::ScrollingStateNode::traverse(v8, a2);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

WebCore::ScrollingStateScrollingNode *WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(WebCore::ScrollingStateScrollingNode *this, const WebCore::ScrollingStateScrollingNode *a2, WebCore::ScrollingStateTree *a3)
{
  WebCore::ScrollingStateNode *v6;
  CALayer *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  int v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  void *v50;
  _DWORD *v51;
  uint64_t v52;
  WebCore::LayerRepresentation *v53;
  const void *v54;
  void *v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  WebCore::LayerRepresentation *v62;
  const void *PlatformLayerTypeless;
  void *v64;
  WebCore::LayerRepresentation *v65;
  const void *v66;
  void *v67;
  WebCore::LayerRepresentation *v68;
  const void *v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v6 = WebCore::ScrollingStateNode::ScrollingStateNode(this, a2, a3);
  *(_QWORD *)v6 = off_1E3404050;
  *((_QWORD *)v6 + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)v6 + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)v6 + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)v6 + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)v6 + 20) = *((_QWORD *)a2 + 20);
  *((_BYTE *)v6 + 168) = *((_BYTE *)a2 + 168);
  v8 = *((unsigned int *)a2 + 47);
  *((_QWORD *)v6 + 22) = 0;
  *((_QWORD *)v6 + 23) = 0;
  *((_DWORD *)v6 + 47) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C420CLL);
    }
    v33 = 40 * v8;
    v34 = WTF::fastMalloc((WTF *)(40 * v8));
    *((_DWORD *)this + 46) = (v33 & 0xFFFFFFF8) / 0x28;
    *((_QWORD *)this + 22) = v34;
    v35 = *((unsigned int *)a2 + 47);
    if ((_DWORD)v35)
    {
      v36 = (unsigned int *)(*((_QWORD *)a2 + 22) + 36);
      v37 = v34 + 24;
      v38 = 40 * v35;
      do
      {
        v39 = *(_OWORD *)(v36 - 9);
        *(_BYTE *)(v37 - 8) = *((_BYTE *)v36 - 20);
        *(_OWORD *)(v37 - 24) = v39;
        v40 = *v36;
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v37 + 8) = 0;
        *(_DWORD *)(v37 + 12) = v40;
        if ((_DWORD)v40)
        {
          if (v40 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1941C41F4);
          }
          v41 = (void *)WTF::fastMalloc((WTF *)(8 * v40));
          *(_DWORD *)(v37 + 8) = v40;
          *(_QWORD *)v37 = v41;
          memcpy(v41, *(const void **)(v36 - 3), 8 * *v36);
        }
        v36 += 10;
        v37 += 40;
        v38 -= 40;
      }
      while (v38);
    }
  }
  v9 = *((unsigned int *)a2 + 51);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 51) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >= 0x6666667)
      goto LABEL_108;
    v42 = 40 * v9;
    v43 = WTF::fastMalloc((WTF *)(40 * v9));
    *((_DWORD *)this + 50) = (v42 & 0xFFFFFFF8) / 0x28;
    *((_QWORD *)this + 24) = v43;
    v44 = *((unsigned int *)a2 + 51);
    if ((_DWORD)v44)
    {
      v45 = (unsigned int *)(*((_QWORD *)a2 + 24) + 36);
      v46 = v43 + 24;
      v47 = 40 * v44;
      do
      {
        v48 = *(_OWORD *)(v45 - 9);
        *(_BYTE *)(v46 - 8) = *((_BYTE *)v45 - 20);
        *(_OWORD *)(v46 - 24) = v48;
        v49 = *v45;
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        *(_DWORD *)(v46 + 12) = v49;
        if ((_DWORD)v49)
        {
          if (v49 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1941C41FCLL);
          }
          v50 = (void *)WTF::fastMalloc((WTF *)(8 * v49));
          *(_DWORD *)(v46 + 8) = v49;
          *(_QWORD *)v46 = v50;
          memcpy(v50, *(const void **)(v45 - 3), 8 * *v45);
        }
        v45 += 10;
        v46 += 40;
        v47 -= 40;
      }
      while (v47);
    }
  }
  v10 = *((unsigned int *)a2 + 55);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 55) = v10;
  if (!(_DWORD)v10)
    goto LABEL_4;
  if (v10 >> 28)
  {
LABEL_108:
    __break(0xC471u);
    JUMPOUT(0x1941C41ECLL);
  }
  v23 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v10));
  *((_DWORD *)this + 54) = v10;
  *((_QWORD *)this + 26) = v23;
  v24 = *((unsigned int *)a2 + 55);
  if ((_DWORD)v24)
  {
    v25 = (__int128 *)*((_QWORD *)a2 + 26);
    v26 = 16 * v24;
    do
    {
      v27 = *v25++;
      *v23++ = v27;
      v26 -= 16;
    }
    while (v26);
  }
LABEL_4:
  v11 = *((unsigned int *)a2 + 59);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 59) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C4204);
    }
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)this + 58) = v11;
    *((_QWORD *)this + 28) = v28;
    v29 = *((unsigned int *)a2 + 59);
    if ((_DWORD)v29)
    {
      v30 = (uint64_t *)*((_QWORD *)a2 + 28);
      v31 = 8 * v29;
      do
      {
        v32 = *v30++;
        *v28++ = v32;
        v31 -= 8;
      }
      while (v31);
    }
  }
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 244) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_BYTE *)this + 252) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 82) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_DWORD *)this + 102) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_WORD *)this + 208) = 0;
  *((_WORD *)this + 218) = 0;
  *(_QWORD *)((char *)this + 420) = 0;
  *(_QWORD *)((char *)this + 428) = 0;
  v12 = *(_QWORD *)((char *)a2 + 438);
  *(_DWORD *)((char *)this + 446) = *(_DWORD *)((char *)a2 + 446);
  *(_QWORD *)((char *)this + 438) = v12;
  v13 = *(_OWORD *)((char *)a2 + 452);
  v14 = *(_OWORD *)((char *)a2 + 468);
  *((_OWORD *)this + 30) = *((_OWORD *)a2 + 30);
  *(_OWORD *)((char *)this + 452) = v13;
  *(_OWORD *)((char *)this + 468) = v14;
  v15 = *((_OWORD *)a2 + 31);
  v16 = *((_OWORD *)a2 + 32);
  *((_DWORD *)this + 132) = *((_DWORD *)a2 + 132);
  *((_OWORD *)this + 31) = v15;
  *((_OWORD *)this + 32) = v16;
  *((_BYTE *)this + 532) = *((_BYTE *)a2 + 532);
  *(_WORD *)((char *)this + 533) = *(_WORD *)((char *)a2 + 533);
  ++*(_DWORD *)(*((_QWORD *)this + 6) + 64);
  v17 = *((_QWORD *)this + 5);
  if ((v17 & 0x1000) != 0)
  {
    v20 = *((_DWORD *)a3 + 17);
    switch(v20)
    {
      case 3:
        v71 = 0uLL;
        v72 = *((_OWORD *)a2 + 17);
        break;
      case 2:
        v62 = (WebCore::LayerRepresentation *)*((_QWORD *)a2 + 32);
        if (v62)
          v62 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v62 + 584))(v62);
        *(_QWORD *)&v71 = 0;
        PlatformLayerTypeless = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v62, v7);
        v72 = 0uLL;
        *((_QWORD *)&v71 + 1) = PlatformLayerTypeless;
        LODWORD(v73) = 2;
        WebCore::LayerRepresentation::retainPlatformLayer(PlatformLayerTypeless, v64);
        WebCore::ScrollingStateScrollingNode::setScrollContainerLayer(this, (const WebCore::LayerRepresentation *)&v71);
        if (PlatformLayerTypeless)
          CFRelease(PlatformLayerTypeless);
        goto LABEL_19;
      case 1:
        v56 = (_DWORD *)*((_QWORD *)a2 + 32);
        if (v56)
        {
          ++v56[2];
          v71 = (unint64_t)v56;
          *(_QWORD *)&v72 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v56 + 32))(v56);
          *((_QWORD *)&v72 + 1) = v57;
          LODWORD(v73) = 1;
          WebCore::ScrollingStateScrollingNode::setScrollContainerLayer(this, (const WebCore::LayerRepresentation *)&v71);
          if (v56[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 16))(v56);
          else
            --v56[2];
          goto LABEL_19;
        }
        v71 = 0u;
        v72 = 0u;
        v20 = 1;
        break;
      default:
        v73 = 0;
        v71 = 0u;
        v72 = 0u;
        goto LABEL_18;
    }
    LODWORD(v73) = v20;
LABEL_18:
    WebCore::ScrollingStateScrollingNode::setScrollContainerLayer(this, (const WebCore::LayerRepresentation *)&v71);
LABEL_19:
    v17 = *((_QWORD *)this + 5);
  }
  if ((v17 & 0x2000) == 0)
    goto LABEL_7;
  v21 = *((_DWORD *)a3 + 17);
  switch(v21)
  {
    case 3:
      v71 = 0uLL;
      v72 = *(_OWORD *)((char *)a2 + 312);
      break;
    case 2:
      v65 = (WebCore::LayerRepresentation *)*((_QWORD *)a2 + 37);
      if (v65)
        v65 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v65 + 584))(v65);
      *(_QWORD *)&v71 = 0;
      v66 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v65, v7);
      v72 = 0uLL;
      *((_QWORD *)&v71 + 1) = v66;
      LODWORD(v73) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v66, v67);
      WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((char *)this, (const WebCore::LayerRepresentation *)&v71);
      if (v66)
        CFRelease(v66);
      goto LABEL_24;
    case 1:
      v58 = (_DWORD *)*((_QWORD *)a2 + 37);
      if (v58)
      {
        ++v58[2];
        v71 = (unint64_t)v58;
        *(_QWORD *)&v72 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v58 + 32))(v58);
        *((_QWORD *)&v72 + 1) = v59;
        LODWORD(v73) = 1;
        WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((char *)this, (const WebCore::LayerRepresentation *)&v71);
        if (v58[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 16))(v58);
        else
          --v58[2];
        goto LABEL_24;
      }
      v71 = 0u;
      v72 = 0u;
      v21 = 1;
      break;
    default:
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      goto LABEL_23;
  }
  LODWORD(v73) = v21;
LABEL_23:
  WebCore::ScrollingStateScrollingNode::setScrolledContentsLayer((char *)this, (const WebCore::LayerRepresentation *)&v71);
LABEL_24:
  v17 = *((_QWORD *)this + 5);
LABEL_7:
  if ((v17 & 0x8000) == 0)
    goto LABEL_8;
  v19 = *((_DWORD *)a3 + 17);
  switch(v19)
  {
    case 3:
      v71 = 0uLL;
      v72 = *(_OWORD *)((char *)a2 + 392);
      break;
    case 2:
      v53 = (WebCore::LayerRepresentation *)*((_QWORD *)a2 + 47);
      if (v53)
        v53 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v53 + 584))(v53);
      *(_QWORD *)&v71 = 0;
      v54 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v53, v7);
      v72 = 0uLL;
      *((_QWORD *)&v71 + 1) = v54;
      LODWORD(v73) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v54, v55);
      WebCore::ScrollingStateScrollingNode::setVerticalScrollbarLayer((char *)this, (const WebCore::LayerRepresentation *)&v71);
      if (v54)
        CFRelease(v54);
      goto LABEL_14;
    case 1:
      v51 = (_DWORD *)*((_QWORD *)a2 + 47);
      if (v51)
      {
        ++v51[2];
        v71 = (unint64_t)v51;
        *(_QWORD *)&v72 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v51 + 32))(v51);
        *((_QWORD *)&v72 + 1) = v52;
        LODWORD(v73) = 1;
        WebCore::ScrollingStateScrollingNode::setVerticalScrollbarLayer((char *)this, (const WebCore::LayerRepresentation *)&v71);
        if (v51[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51);
        else
          --v51[2];
        goto LABEL_14;
      }
      v71 = 0u;
      v72 = 0u;
      v19 = 1;
      break;
    default:
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      goto LABEL_13;
  }
  LODWORD(v73) = v19;
LABEL_13:
  WebCore::ScrollingStateScrollingNode::setVerticalScrollbarLayer((char *)this, (const WebCore::LayerRepresentation *)&v71);
LABEL_14:
  v17 = *((_QWORD *)this + 5);
LABEL_8:
  if ((v17 & 0x4000) == 0)
    return this;
  v22 = *((_DWORD *)a3 + 17);
  switch(v22)
  {
    case 3:
      v71 = 0uLL;
      v72 = *((_OWORD *)a2 + 22);
LABEL_27:
      LODWORD(v73) = v22;
LABEL_28:
      WebCore::ScrollingStateScrollingNode::setHorizontalScrollbarLayer(this, (const WebCore::LayerRepresentation *)&v71);
      return this;
    case 2:
      v68 = (WebCore::LayerRepresentation *)*((_QWORD *)a2 + 42);
      if (v68)
        v68 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v68 + 584))(v68);
      *(_QWORD *)&v71 = 0;
      v69 = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v68, v7);
      v72 = 0uLL;
      *((_QWORD *)&v71 + 1) = v69;
      LODWORD(v73) = 2;
      WebCore::LayerRepresentation::retainPlatformLayer(v69, v70);
      WebCore::ScrollingStateScrollingNode::setHorizontalScrollbarLayer(this, (const WebCore::LayerRepresentation *)&v71);
      if (v69)
        CFRelease(v69);
      break;
    case 1:
      v60 = (_DWORD *)*((_QWORD *)a2 + 42);
      if (!v60)
      {
        v71 = 0u;
        v72 = 0u;
        v22 = 1;
        goto LABEL_27;
      }
      ++v60[2];
      v71 = (unint64_t)v60;
      *(_QWORD *)&v72 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v60 + 32))(v60);
      *((_QWORD *)&v72 + 1) = v61;
      LODWORD(v73) = 1;
      WebCore::ScrollingStateScrollingNode::setHorizontalScrollbarLayer(this, (const WebCore::LayerRepresentation *)&v71);
      if (v60[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 16))(v60);
      else
        --v60[2];
      break;
    default:
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      goto LABEL_28;
  }
  return this;
}

WebCore::ScrollingStateNode *WebCore::ScrollingStateNode::ScrollingStateNode(WebCore::ScrollingStateNode *this, const WebCore::ScrollingStateNode *a2, WebCore::ScrollingStateTree *a3)
{
  uint64_t v6;
  CALayer *v7;
  uint64_t v8;
  int v10;
  WebCore::LayerRepresentation *v11;
  const void *PlatformLayerTypeless;
  void *v13;
  void *v14;
  _DWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = this;
  *(_QWORD *)this = off_1E3403ED0;
  *((_QWORD *)this + 1) = v6;
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  v8 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 5) = v8;
  *((_QWORD *)this + 6) = a3;
  ++*(_DWORD *)a3;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if ((v8 & 1) != 0)
  {
    v10 = *((_DWORD *)a3 + 17);
    switch(v10)
    {
      case 3:
        v17 = 0uLL;
        v18 = *(_OWORD *)((char *)a2 + 104);
        break;
      case 2:
        v11 = (WebCore::LayerRepresentation *)*((_QWORD *)a2 + 11);
        if (v11)
          v11 = (WebCore::LayerRepresentation *)(*(uint64_t (**)(WebCore::LayerRepresentation *))(*(_QWORD *)v11 + 584))(v11);
        *(_QWORD *)&v17 = 0;
        PlatformLayerTypeless = (const void *)WebCore::LayerRepresentation::makePlatformLayerTypeless(v11, v7);
        v18 = 0uLL;
        *((_QWORD *)&v17 + 1) = PlatformLayerTypeless;
        LODWORD(v19) = 2;
        WebCore::LayerRepresentation::retainPlatformLayer(PlatformLayerTypeless, v13);
        WebCore::ScrollingStateNode::setLayer((char *)this, (const WebCore::LayerRepresentation *)&v17);
        WebCore::LayerRepresentation::releasePlatformLayer(PlatformLayerTypeless, v14);
        goto LABEL_7;
      case 1:
        v15 = (_DWORD *)*((_QWORD *)a2 + 11);
        if (v15)
        {
          ++v15[2];
          v17 = (unint64_t)v15;
          *(_QWORD *)&v18 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 32))(v15);
          *((_QWORD *)&v18 + 1) = v16;
          LODWORD(v19) = 1;
          WebCore::ScrollingStateNode::setLayer((char *)this, (const WebCore::LayerRepresentation *)&v17);
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[2];
          goto LABEL_7;
        }
        v17 = 0uLL;
        v18 = 0uLL;
        v10 = 1;
        break;
      default:
        v19 = 0;
        v17 = 0uLL;
        v18 = 0uLL;
        goto LABEL_6;
    }
    LODWORD(v19) = v10;
LABEL_6:
    WebCore::ScrollingStateNode::setLayer((char *)this, (const WebCore::LayerRepresentation *)&v17);
LABEL_7:
    a3 = (WebCore::ScrollingStateTree *)*((_QWORD *)this + 6);
  }
  v20 = *(_OWORD *)((char *)this + 24);
  WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::add<WebCore::ScrollingStateNode&>((uint64_t *)a3 + 5, &v20, (unint64_t)this, (uint64_t)&v17);
  return this;
}

uint64_t *WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::HashTable(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  int v5;
  unsigned int v7;
  uint64_t Table;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  unsigned __int8 v18;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      Table = WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::allocateTable(v7);
      *a1 = Table;
      *(_DWORD *)(Table - 4) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::begin(a2);
      v10 = v9;
      v11 = a2;
      v13 = v12;
      v14 = *v11;
      v15 = v14 ? (uint64_t)&v14[32 * *((unsigned int *)v14 - 1)] : 0;
      if ((unsigned __int8 *)v15 != v9)
      {
        do
        {
          v16 = (_BYTE *)WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::EventTrackingRegionsEventType>>,WebCore::EventTrackingRegionsEventType>(a1, v10);
          v17 = v10 + 8;
          v18 = *v10;
          v10 += 32;
          *v16 = v18;
          WebCore::Region::operator=((uint64_t)(v16 + 8), v17);
          while (v10 != v13)
          {
            if (*v10 < 0xFEu)
              goto LABEL_12;
            v10 += 32;
          }
          v10 = v13;
LABEL_12:
          ;
        }
        while (v10 != (unsigned __int8 *)v15);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::EventTrackingRegionsEventType>>,WebCore::EventTrackingRegionsEventType>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(unsigned __int8 *)(v2 + 32 * v7) != 255);
  return v2 + 32 * v7;
}

void WebCore::ScrollingStateOverflowScrollingNode::~ScrollingStateOverflowScrollingNode(WebCore::ScrollingStateOverflowScrollingNode *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateScrollingNode::~ScrollingStateScrollingNode(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WTF::ThreadSafeWeakPtr<WebCore::ScrollingStateNode>::operator=<WebCore::ScrollingStateNode>(uint64_t *a1, void *a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;

  if (!*(_QWORD *)a2 || (v4 = *(_QWORD *)(*(_QWORD *)a2 + 8)) == 0)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *a1;
  *a1 = v6;
  if (!v8)
    goto LABEL_22;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
LABEL_16:
    MEMORY[0x19AEA534C](v8);
    goto LABEL_17;
  }
  if (__stxr(1u, (unsigned __int8 *)v8))
    goto LABEL_16;
LABEL_17:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (!v10)
  {
    v11 = *(_QWORD *)(v8 + 8);
    v12 = __ldxr((unsigned __int8 *)v8);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
        goto LABEL_20;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_20:
    if (!v11)
      WTF::fastFree((WTF *)v8, a2);
    goto LABEL_22;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_22;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_22:
  a1[1] = *(_QWORD *)a2;
  return a1;
}

unsigned __int8 *WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::begin(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[32 * v3];
  if (!*((_DWORD *)result - 3))
    return &result[32 * v3];
  if ((_DWORD)v3)
  {
    v5 = 32 * v3;
    while (*result >= 0xFEu)
    {
      result += 32;
      v5 -= 32;
      if (!v5)
        return v4;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_6;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_6:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_7:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)((32 * a1) | 0x10));
  result = v3 + 16;
  if (a1)
  {
    v5 = (_QWORD *)(v3 + 24);
    do
    {
      *((_BYTE *)v5 - 8) = -1;
      v5[1] = 0;
      v5[2] = 0;
      *v5 = 0;
      v5 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

WebCore::ScrollingStateScrollingNode *WebCore::ScrollingStateOverflowScrollingNode::clone@<X0>(WebCore::ScrollingStateOverflowScrollingNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, WebCore::ScrollingStateScrollingNode **a3@<X8>)
{
  WebCore::ScrollingStateScrollingNode *v6;
  WebCore::ScrollingStateScrollingNode *result;

  v6 = (WebCore::ScrollingStateScrollingNode *)WTF::fastMalloc((WTF *)0x218);
  result = WebCore::ScrollingStateScrollingNode::ScrollingStateScrollingNode(v6, this, a2);
  *(_QWORD *)result = off_1E3403F50;
  *a3 = result;
  return result;
}

void WebCore::ScrollingStateFrameHostingNode::~ScrollingStateFrameHostingNode(CFTypeRef *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::ScrollingStateNode::~ScrollingStateNode(this, a2);
  WTF::fastFree(v2, v3);
}

__n128 WebCore::ScrollingStateFrameHostingNode::clone@<Q0>(WebCore::ScrollingStateFrameHostingNode *this@<X0>, WebCore::ScrollingStateTree *a2@<X1>, __n128 **a3@<X8>)
{
  WebCore::ScrollingStateNode *v6;
  __n128 *v7;
  __n128 result;

  v6 = (WebCore::ScrollingStateNode *)WTF::fastMalloc((WTF *)0x90);
  v7 = (__n128 *)WebCore::ScrollingStateNode::ScrollingStateNode(v6, this, a2);
  v7->n128_u64[0] = (unint64_t)off_1E3403E50;
  result = *((__n128 *)this + 8);
  v7[8] = result;
  *a3 = v7;
  return result;
}

uint64_t WebCore::EventTrackingRegions::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  WebCore::Region::operator=(a1, (_QWORD *)a2);
  WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::HashTable(&v18, (unsigned __int8 **)(a2 + 24));
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v18;
  v18 = v5;
  if (v5)
  {
    v7 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v7)
    {
      v8 = (_QWORD *)(v5 + 24);
      do
      {
        if (*((unsigned __int8 *)v8 - 24) != 254)
        {
          v9 = *v8;
          *v8 = 0;
          if (v9)
          {
            v16 = v7;
            v17 = v8;
            v10 = *(WTF **)(v9 + 144);
            if ((WTF *)(v9 + 160) != v10 && v10 != 0)
            {
              *(_QWORD *)(v9 + 144) = 0;
              *(_DWORD *)(v9 + 152) = 0;
              v14 = v9;
              WTF::fastFree(v10, v4);
              v9 = v14;
            }
            v12 = *(WTF **)v9;
            if (v9 + 16 != *(_QWORD *)v9 && v12 != 0)
            {
              *(_QWORD *)v9 = 0;
              *(_DWORD *)(v9 + 8) = 0;
              v15 = v9;
              WTF::fastFree(v12, v4);
              v9 = v15;
            }
            WTF::fastFree((WTF *)v9, v4);
            v7 = v16;
            v8 = v17;
          }
        }
        v8 += 4;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  return a1;
}

void WebCore::LayerRepresentation::~LayerRepresentation(WebCore::LayerRepresentation *this)
{
  _DWORD *v2;
  const void *v3;

  if (*((_DWORD *)this + 8) == 2)
  {
    v3 = (const void *)*((_QWORD *)this + 1);
    if (v3)
      CFRelease(v3);
  }
  v2 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
}

WTF ***WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t a1, void *a2)
{
  WTF ***result;
  unsigned int v4;

  result = WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::clear((WTF ***)a1, a2);
  v4 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(*(_QWORD *)a1 - 12);
    if (v4 > 0x7FFFFFFE)
      v4 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 12) = 2 * v4;
  return result;
}

char *WebCore::ScrollingStateFrameScrollingNode::setHeaderLayer(char *this, const WebCore::LayerRepresentation *a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = *((_DWORD *)a2 + 8);
  if (v4 != *((_DWORD *)this + 182))
    goto LABEL_8;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v10 = *((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)this + 88);
      goto LABEL_23;
    }
    if (v4 != 3)
      return this;
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 89))
    {
      v10 = *((_QWORD *)a2 + 3);
      v11 = *((_QWORD *)this + 90);
LABEL_23:
      if (v10 == v11)
        return this;
    }
LABEL_8:
    v5 = *(_QWORD *)a2;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 87))
  {
    if (*((_QWORD *)a2 + 2) == *((_QWORD *)this + 89) && *((_QWORD *)a2 + 3) == *((_QWORD *)this + 90))
      return this;
    goto LABEL_8;
  }
LABEL_9:
  if (v5)
    ++*(_DWORD *)(v5 + 8);
  v7 = (_DWORD *)*((_QWORD *)this + 87);
  *((_QWORD *)v3 + 87) = v5;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
  }
  this = (char *)*((_QWORD *)a2 + 1);
  *((_QWORD *)v3 + 88) = this;
  *(_OWORD *)(v3 + 712) = *((_OWORD *)a2 + 1);
  v8 = *((_DWORD *)a2 + 8);
  *((_DWORD *)v3 + 182) = v8;
  if (v8 == 2)
    this = (char *)WebCore::LayerRepresentation::retainPlatformLayer(this, a2);
  v9 = *((_QWORD *)v3 + 5);
  if ((v9 & 0x2000000000000) == 0)
  {
    *((_QWORD *)v3 + 5) = v9 | 0x2000000000000;
    return (char *)WebCore::ScrollingStateTree::setHasChangedProperties(*((WebCore::ScrollingStateTree **)v3 + 6), 1);
  }
  return this;
}

unsigned __int8 **WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(unsigned __int8 **result, void *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *result;
  if (__ldaxr(*result))
  {
    __clrex();
LABEL_3:
    result = (unsigned __int8 **)MEMORY[0x19AEA534C](v2);
    goto LABEL_4;
  }
  if (__stxr(1u, v2))
    goto LABEL_3;
LABEL_4:
  v4 = *((_QWORD *)v2 + 1);
  v5 = v4 - 1;
  *((_QWORD *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr(v2);
  if (v8 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_8;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_8:
  if (!v5)
  {
    if (v6)
      result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (!v7)
      return (unsigned __int8 **)WTF::fastFree((WTF *)v2, a2);
  }
  return result;
}

void *WebCore::logChannels(WebCore *this)
{
  {
    WebCore::LogChannels::LogChannels((WebCore::LogChannels *)&WebCore::logChannels(void)::logChannels);
  }
  return &WebCore::logChannels(void)::logChannels;
}

WebCore::LogChannels *WebCore::LogChannels::LogChannels(WebCore::LogChannels *this)
{
  void *v2;
  WTF *v3;
  uint64_t v5[2];
  uint64_t __dst[109];

  __dst[108] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 1;
  *(_QWORD *)this = &off_1E34057A0;
  memcpy(__dst, &constinit_18, 0x360uLL);
  WTF::Vector<WebCore::MQ::FeatureSchema const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v5, __dst, 0x6CuLL);
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, v2);
  }
  *((_QWORD *)this + 1) = v5[0];
  *((_QWORD *)this + 2) = v5[1];
  return this;
}

uint64_t *WTF::Vector<WebCore::MQ::FeatureSchema const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(*v3 + 8 * v8++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::DisplayList::DrawNativeImage::apply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)a2 + 720))(a2, a3, a1 + 8, a1 + 24, *(unsigned __int16 *)(a1 + 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 42) << 16));
}

double WebCore::LocalFrameView::setOverrideSizeForCSSDefaultViewportUnits(uint64_t a1, void *a2, uint64_t a3)
{
  _WORD *v3;
  double result;
  uint64_t v5;

  v3 = (_WORD *)(a1 + 1213);
  if (!*(_BYTE *)(a1 + 1224))
  {
    *(_DWORD *)(a1 + 1208) = (_DWORD)a2;
    *(_BYTE *)(a1 + 1212) = BYTE4(a2);
    *v3 = HIDWORD(a2) >> 8;
    *(_BYTE *)(a1 + 1215) = HIBYTE(a2);
    *(_DWORD *)(a1 + 1216) = a3;
    *(_BYTE *)(a1 + 1220) = BYTE4(a3);
    *(_WORD *)(a1 + 1221) = HIDWORD(a3) >> 8;
    *(_BYTE *)(a1 + 1223) = HIBYTE(a3);
    *(_BYTE *)(a1 + 1224) = 1;
    goto LABEL_14;
  }
  if (BYTE4(a2) && *(_BYTE *)(a1 + 1212))
  {
    LODWORD(result) = *(_DWORD *)(a1 + 1208);
    if (*(float *)&result != *(float *)&a2)
      goto LABEL_13;
LABEL_8:
    if (BYTE4(a3) && *(_BYTE *)(a1 + 1220))
    {
      LODWORD(result) = *(_DWORD *)(a1 + 1216);
      if (*(float *)&result == *(float *)&a3)
        return result;
    }
    else if ((BYTE4(a3) != 0) == (*(_BYTE *)(a1 + 1220) != 0))
    {
      return result;
    }
    goto LABEL_13;
  }
  if ((BYTE4(a2) != 0) == (*(_BYTE *)(a1 + 1212) != 0))
    goto LABEL_8;
LABEL_13:
  *(_DWORD *)(a1 + 1208) = (_DWORD)a2;
  *(_BYTE *)(a1 + 1212) = BYTE4(a2);
  *v3 = HIDWORD(a2) >> 8;
  *(_BYTE *)(a1 + 1215) = HIBYTE(a2);
  *(_DWORD *)(a1 + 1216) = a3;
  *(_BYTE *)(a1 + 1220) = BYTE4(a3);
  *(_WORD *)(a1 + 1221) = HIDWORD(a3) >> 8;
  *(_BYTE *)(a1 + 1223) = HIBYTE(a3);
LABEL_14:
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
  if (v5)
    return WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)(v5 + 1328), a2);
  return result;
}

void WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(WebCore::IOSurface **this)
{
  void (**v2)(WebCore::ImageBufferIOSurfaceBackend *__hidden);
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::IOSurface *v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  const void *v12;
  WebCore::IOSurface *v13;
  WebCore::IOSurface *v14;

  v2 = off_1E3412170;
  *this = (WebCore::IOSurface *)off_1E3412170;
  if (*((_BYTE *)this + 68))
  {
    WebCore::ImageBufferIOSurfaceBackend::prepareForExternalWrite((WebCore::ImageBufferIOSurfaceBackend *)this);
    v2 = (void (**)(WebCore::ImageBufferIOSurfaceBackend *__hidden))*this;
  }
  v2[12]((WebCore::ImageBufferIOSurfaceBackend *)this);
  v3 = (uint64_t *)(this + 6);
  v4 = (uint64_t)this[9];
  if (v4)
  {
    WebCore::IOSurfacePool::addSurface(v4, this + 6);
    v5 = (unsigned int *)this[9];
    this[9] = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::ThreadSafeRefCounted<WebCore::IOSurfacePool,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WebCore::IOSurfacePool *)v5);
      }
    }
  }
  else
  {
    this[9] = 0;
  }
  v8 = this[7];
  this[7] = 0;
  if (v8)
    CFRelease(v8);
  v9 = *v3;
  *v3 = 0;
  if (v9)
  {
    v10 = *(const void **)(v9 + 48);
    *(_QWORD *)(v9 + 48) = 0;
    if (v10)
      CFRelease(v10);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v9 + 40));
    if (*(_BYTE *)(v9 + 16))
    {
      v12 = *(const void **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v12)
        CFRelease(v12);
    }
    WTF::fastFree((WTF *)v9, v11);
  }
  *this = (WebCore::IOSurface *)off_1E3411FC0;
  v13 = this[5];
  this[5] = 0;
  if (v13)
    (*(void (**)(WebCore::IOSurface *))(*(_QWORD *)v13 + 8))(v13);
  *this = (WebCore::IOSurface *)off_1E340D390;
  v14 = this[3];
  this[3] = 0;
  if (v14)
    CFRelease(v14);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::ImageBufferIOSurfaceBackend::~ImageBufferIOSurfaceBackend(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::ImageBufferIOSurfaceBackend::releaseGraphicsContext(WebCore::ImageBufferIOSurfaceBackend *this)
{
  uint64_t v2;
  const void *v3;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(v3);
}

void WebCore::GraphicsContextCG::~GraphicsContextCG(WebCore::GraphicsContextCG *this, void *a2)
{
  const void *v3;
  const void *v4;
  unsigned int v5;
  WTF *v6;
  void *v8;

  *(_QWORD *)this = off_1E3411A78;
  if (*((_BYTE *)this + 736))
  {
    v3 = (const void *)*((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = 0;
    if (v3)
      CFRelease(v3);
  }
  v4 = (const void *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v4)
    CFRelease(v4);
  *(_QWORD *)this = off_1E340BA10;
  v5 = *((_DWORD *)this + 91);
  if (v5)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v5));
  v6 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::GraphicsContextCG *)((char *)this + 368) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v6, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextCG *)((char *)this + 8), a2);
  WTF::fastFree(this, v8);
}

{
  const void *v3;
  const void *v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)this = off_1E3411A78;
  if (*((_BYTE *)this + 736))
  {
    v3 = (const void *)*((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = 0;
    if (v3)
      CFRelease(v3);
  }
  v4 = (const void *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v4)
    CFRelease(v4);
  *(_QWORD *)this = off_1E340BA10;
  v5 = *((_DWORD *)this + 91);
  if (v5)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v5));
  v6 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::GraphicsContextCG *)((char *)this + 368) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v6, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextCG *)((char *)this + 8), a2);
}

{
  const void *v3;
  const void *v4;
  unsigned int v5;
  WTF *v6;

  *(_QWORD *)this = off_1E3411A78;
  if (*((_BYTE *)this + 736))
  {
    v3 = (const void *)*((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = 0;
    if (v3)
      CFRelease(v3);
  }
  v4 = (const void *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v4)
    CFRelease(v4);
  *(_QWORD *)this = off_1E340BA10;
  v5 = *((_DWORD *)this + 91);
  if (v5)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v5));
  v6 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::GraphicsContextCG *)((char *)this + 368) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v6, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextCG *)((char *)this + 8), a2);
}

uint64_t WebCore::IOSurfacePool::addSurface(uint64_t result, WebCore::IOSurface **a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  WebCore::IOSurface *v6;
  uint64_t v7;
  int v9;
  int v10;
  WebCore::IOSurface *v11;
  WebCore::IOSurface *v12;
  const void *v13;
  void *v14;
  const void *v15;
  WebCore::IOSurface *v16;

  v3 = (_QWORD *)result;
  v4 = (unsigned __int8 *)(result + 4);
  if (__ldaxr((unsigned __int8 *)(result + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_4;
  }
  result = MEMORY[0x19AEA534C](result + 4);
LABEL_4:
  v6 = *a2;
  if (*((_QWORD *)*a2 + 4) <= v3[15])
  {
    v7 = *((_QWORD *)v6 + 3);
    if ((int)v7 >= 1 && SHIDWORD(v7) >= 1)
    {
      v9 = IOSurfaceIsInUse(*((IOSurfaceRef *)v6 + 6));
      WebCore::IOSurfacePool::willAddSurface((WebCore::IOSurfacePool *)v3, *a2, v9 != 0);
      if (v9)
      {
        WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::prepend<std::unique_ptr<WebCore::IOSurface>>((uint64_t)(v3 + 6), (uint64_t *)a2);
        result = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(v3 + 1));
        if ((result & 1) == 0)
          result = WTF::RunLoop::TimerBase::start();
      }
      else
      {
        v11 = *a2;
        *a2 = 0;
        v16 = v11;
        result = WebCore::IOSurfacePool::insertSurfaceIntoPool((uint64_t)v3, &v16);
        v12 = v16;
        v16 = 0;
        if (v12)
        {
          v13 = (const void *)*((_QWORD *)v12 + 6);
          *((_QWORD *)v12 + 6) = 0;
          if (v13)
            CFRelease(v13);
          WTF::MachSendRight::~MachSendRight((WebCore::IOSurface *)((char *)v12 + 40));
          if (*((_BYTE *)v12 + 16))
          {
            v15 = (const void *)*((_QWORD *)v12 + 1);
            *((_QWORD *)v12 + 1) = 0;
            if (v15)
              CFRelease(v15);
          }
          result = WTF::fastFree(v12, v14);
        }
      }
    }
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::IOSurfacePool::willAddSurface(WebCore::IOSurfacePool *this, WebCore::IOSurface *a2, int a3)
{
  WebCore::IOSurfacePool *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  WebCore::IOSurfacePool *v13;
  WebCore::IOSurface *v14;
  WebCore::IOSurfacePool *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v5 = this;
  v7 = (uint64_t *)((char *)this + 80);
  v6 = *((_QWORD *)this + 10);
  if (v6
    || (this = (WebCore::IOSurfacePool *)WTF::HashTable<WebCore::IOSurface *,WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>>,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashMap<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IOSurface *>>::expand((uint64_t *)this + 10, 0), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (WebCore::IOSurfacePool *)(v6 + 24 * v12);
  v14 = *(WebCore::IOSurface **)v13;
  if (*(_QWORD *)v13)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != a2)
    {
      if (v14 == (WebCore::IOSurface *)-1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (WebCore::IOSurfacePool *)(v6 + 24 * v12);
      v14 = *(WebCore::IOSurface **)v13;
      ++v16;
      if (!*(_QWORD *)v13)
      {
        if (v15)
        {
          *(_QWORD *)v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
          *((_QWORD *)v15 + 2) = 0;
          --*(_DWORD *)(*v7 - 16);
          v13 = v15;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    *(_QWORD *)v13 = a2;
    *((_QWORD *)v13 + 1) = 0;
    *((_BYTE *)v13 + 16) = 0;
    v17 = *v7;
    if (*v7)
      v18 = *(_DWORD *)(v17 - 12) + 1;
    else
      v18 = 1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v7;
    if (*v7)
      v20 = *(_DWORD *)(v19 - 12);
    else
      v20 = 0;
    v21 = (*(_DWORD *)(v19 - 16) + v20);
    v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21)
        goto LABEL_17;
    }
    else if (3 * v22 > 4 * v21)
    {
      goto LABEL_17;
    }
    this = (WebCore::IOSurfacePool *)WTF::HashTable<WebCore::IOSurface *,WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails>>,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashMap<WebCore::IOSurface *,WebCore::IOSurfacePool::CachedSurfaceDetails,WTF::DefaultHash<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurface *>,WTF::HashTraits<WebCore::IOSurfacePool::CachedSurfaceDetails>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IOSurface *>>::expand(v7, v13);
    v13 = this;
  }
LABEL_17:
  result = WTF::MonotonicTime::now(this);
  *((_QWORD *)v13 + 1) = v25;
  v26 = *((_QWORD *)a2 + 4);
  v27 = *((_QWORD *)v5 + 15);
  v28 = v27 - v26;
  if (v27 <= v26)
  {
    result = WebCore::IOSurfacePool::discardAllSurfacesInternal(v5, v24);
    v29 = *((_QWORD *)v5 + 13);
  }
  else
  {
    if (*((_QWORD *)v5 + 13) > v28)
    {
      do
      {
        result = WebCore::IOSurfacePool::tryEvictOldestCachedSurface((uint64_t)v5);
        if (*((_QWORD *)v5 + 14) <= 0x2000000uLL)
        {
          v30 = *((_QWORD *)v5 + 13);
          if (v30 <= v28)
            continue;
        }
        result = (uint64_t)WebCore::IOSurfacePool::tryEvictInUseSurface((uint64_t *)v5);
        v30 = *((_QWORD *)v5 + 13);
      }
      while (v30 > v28);
    }
    while (1)
    {
      if (*((_QWORD *)v5 + 14) <= 0x2000000uLL)
      {
        v29 = *((_QWORD *)v5 + 13);
        if (v29 <= v28)
          break;
      }
      result = (uint64_t)WebCore::IOSurfacePool::tryEvictInUseSurface((uint64_t *)v5);
    }
  }
  *((_QWORD *)v5 + 13) = v29 + v26;
  if (a3)
    *((_QWORD *)v5 + 14) += v26;
  return result;
}

uint64_t WTF::Deque<std::unique_ptr<WebCore::IOSurface>,0ul>::prepend<std::unique_ptr<WebCore::IOSurface>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  char *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result)
  {
    if (v4 + 1 != *(_QWORD *)result)
      goto LABEL_3;
    LODWORD(v9) = *(_DWORD *)(result + 24);
  }
  else
  {
    v9 = *(unsigned int *)(result + 24);
    if (v4)
    {
      if (v4 != v9 - 1)
        goto LABEL_3;
    }
    else if ((_DWORD)v9)
    {
      goto LABEL_3;
    }
  }
  v10 = v9;
  v11 = ((unint64_t)v9 >> 2) + v9;
  if (v11 <= 0xF)
    v11 = 15;
  if (v11 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v12 = *(char **)(result + 16);
  v13 = v11 + 1;
  v14 = (char *)WTF::fastMalloc((WTF *)(8 * (v11 + 1)));
  *(_DWORD *)(v3 + 24) = v13;
  *(_QWORD *)(v3 + 16) = v14;
  v15 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)v3 > v15)
  {
    memcpy(v14, v12, 8 * v15);
    v17 = *(_QWORD *)v3 - v10 + *(unsigned int *)(v3 + 24);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v3 + 16) + 8 * v17), &v12[8 * *(_QWORD *)v3], 8 * v10 - 8 * *(_QWORD *)v3);
    *(_QWORD *)v3 = v17;
  }
  else
  {
    result = (uint64_t)memcpy(&v14[8 * *(_QWORD *)v3], &v12[8 * *(_QWORD *)v3], 8 * v15 - 8 * *(_QWORD *)v3);
  }
  if (v12)
  {
    if (*(char **)(v3 + 16) == v12)
    {
      *(_QWORD *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
    }
    result = WTF::fastFree((WTF *)v12, v16);
  }
LABEL_3:
  v5 = *(_QWORD *)v3;
  if (!*(_QWORD *)v3)
    v5 = *(unsigned int *)(v3 + 24);
  v6 = v5 - 1;
  *(_QWORD *)v3 = v6;
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(v7 + 8 * v6) = v8;
  return result;
}

void WebCore::GraphicsContextCG::save(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  char v36;
  char v37;
  char v38;

  v4 = (uint64_t *)(a1 + 352);
  v5 = (uint64_t *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 364);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 360))
  {
    v29 = (uint64_t *)WTF::Vector<WebCore::GraphicsContextState,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v6 + 1, (unint64_t)v5);
    WebCore::GraphicsContextState::GraphicsContextState(*(_QWORD *)(a1 + 352) + 344 * *(unsigned int *)(a1 + 364), v29);
  }
  else
  {
    v7 = *v4;
    v8 = *v4 + 344 * v6;
    v9 = *v5;
    *(_QWORD *)v8 = *v5;
    if ((v9 & 0x8000000000000) != 0)
    {
      v30 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
    *(_BYTE *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 80) = -1;
    v10 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v10])(&v36);
      *(_DWORD *)(v8 + 80) = v10;
    }
    v11 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(v7 + 344 * v6 + 88) = v11;
    if ((v11 & 0x8000000000000) != 0)
    {
      v32 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v12 = v7 + 344 * v6;
    *(_DWORD *)(v12 + 168) = -1;
    v13 = (_DWORD *)(v12 + 168);
    *((_BYTE *)v13 - 64) = 0;
    v14 = *(unsigned int *)(a1 + 176);
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(char *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v14])(&v37, v13 - 16, a1 + 112);
      *v13 = v14;
    }
    v15 = v7 + 344 * v6;
    v16 = *(_QWORD *)(a1 + 184);
    v17 = *(_DWORD *)(a1 + 192);
    *(_BYTE *)(v15 + 192) = 0;
    v18 = v15 + 192;
    *(_DWORD *)(v18 - 8) = v17;
    *(_QWORD *)(v18 - 16) = v16;
    *(_BYTE *)(v18 + 32) = 0;
    v19 = (_BYTE *)(v18 + 32);
    if (*(_BYTE *)(a1 + 232))
    {
      v20 = *(_QWORD *)(a1 + 200);
      *(_DWORD *)(v18 + 8) = *(_DWORD *)(a1 + 208);
      *(_QWORD *)v18 = v20;
      v21 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(v7 + 344 * v6 + 208) = v21;
      if ((v21 & 0x8000000000000) != 0)
      {
        v34 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      *(_QWORD *)(v7 + 344 * v6 + 216) = *(_QWORD *)(a1 + 224);
      *v19 = 1;
    }
    v22 = v7 + 344 * v6;
    *(_BYTE *)(v22 + 232) = 0;
    v22 += 232;
    *(_BYTE *)(v22 + 88) = 0;
    v23 = (_BYTE *)(v22 + 88);
    if (*(_BYTE *)(a1 + 328))
    {
      v24 = v7 + 344 * v6;
      *(_DWORD *)(v24 + 312) = -1;
      v25 = *(unsigned int *)(a1 + 320);
      if ((_DWORD)v25 != -1)
      {
        v26 = (_DWORD *)(v24 + 312);
        ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v25])(&v38);
        *v26 = v25;
      }
      *v23 = 1;
    }
    v27 = v7 + 344 * v6;
    v28 = *(_QWORD *)(a1 + 341);
    *(_QWORD *)(v27 + 328) = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(v27 + 333) = v28;
  }
  ++*(_DWORD *)(a1 + 364);
  if (a2)
  {
    if (a2 == 2)
      *(_DWORD *)(a1 + 336) = 1065353216;
  }
  else
  {
    *(_DWORD *)(a1 + 184) = 0;
  }
  *(_BYTE *)(a1 + 348) = a2;
  CGContextSaveGState(*(CGContextRef *)(a1 + 720));
}

void WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(WTF **)a1;
    v4 = *(_DWORD *)(a1 + 12);
    if (a2 < 5)
    {
      v6 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (a2 >= 0x563B49)
      {
        __break(0xC471u);
        return;
      }
      v5 = 760 * a2;
      v6 = WTF::fastMalloc((WTF *)(760 * a2));
      *(_DWORD *)(a1 + 8) = v5 / 0x2F8;
      *(_QWORD *)a1 = v6;
    }
    if (v4)
    {
      v7 = 0;
      v8 = 760 * v4;
      do
      {
        v9 = v6 + v7;
        v10 = (char *)v3 + v7;
        WebCore::GraphicsContextState::GraphicsContextState(v6 + v7, (uint64_t)v3 + v7);
        v12 = *(_OWORD *)((char *)v3 + v7 + 344);
        v13 = *(_OWORD *)((char *)v3 + v7 + 360);
        v14 = *(_OWORD *)((char *)v3 + v7 + 392);
        *(_OWORD *)(v9 + 376) = *(_OWORD *)((char *)v3 + v7 + 376);
        *(_OWORD *)(v9 + 392) = v14;
        *(_OWORD *)(v9 + 344) = v12;
        *(_OWORD *)(v9 + 360) = v13;
        *(_BYTE *)(v9 + 408) = 0;
        *(_BYTE *)(v9 + 752) = 0;
        if (*((_BYTE *)v3 + v7 + 752))
        {
          WebCore::GraphicsContextState::GraphicsContextState(v9 + 408, (uint64_t)(v10 + 408));
          *(_BYTE *)(v9 + 752) = 1;
          if (v10[752])
            WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)(v10 + 408), v11);
        }
        WebCore::GraphicsContextState::~GraphicsContextState((WTF *)((char *)v3 + v7), v11);
        v7 += 760;
      }
      while (v8 != v7);
    }
    if ((WTF *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, (void *)a2);
    }
  }
}

unint64_t WTF::Vector<WebCore::GraphicsContextState,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v4 + 344 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::GraphicsContextState,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::GraphicsContextState,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  return v3;
}

void WTF::Vector<WebCore::GraphicsContextState,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::GraphicsContextState *v8;
  void *v9;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(WTF **)a1;
    v4 = *(_DWORD *)(a1 + 12);
    if (a2 < 2)
    {
      v6 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >= 0xBE82FB)
      {
        __break(0xC471u);
        return;
      }
      v5 = 344 * a2;
      v6 = WTF::fastMalloc((WTF *)(344 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x158;
      *(_QWORD *)a1 = v6;
    }
    if (v4)
    {
      v7 = 344 * v4;
      v8 = v3;
      do
      {
        WebCore::GraphicsContextState::GraphicsContextState(v6, (uint64_t)v8);
        WebCore::GraphicsContextState::~GraphicsContextState(v8, v9);
        v6 += 344;
        v8 = (WebCore::GraphicsContextState *)((char *)v8 + 344);
        v7 -= 344;
      }
      while (v7);
    }
    if ((WTF *)(a1 + 16) != v3 && v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, (void *)a2);
    }
  }
}

void WebCore::GraphicsContextState::~GraphicsContextState(WebCore::GraphicsContextState *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  char v18;
  char v19;

  if (*((_BYTE *)this + 320))
  {
    v3 = *((unsigned int *)this + 78);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))off_1E33DDD20[v3])(&v17, (char *)this + 232);
    *((_DWORD *)this + 78) = -1;
  }
  if (*((_BYTE *)this + 224))
  {
    v4 = *((_QWORD *)this + 26);
    if ((v4 & 0x8000000000000) != 0)
    {
      v14 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  v5 = *((unsigned int *)this + 42);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E33DDD38[v5])(&v18, (char *)this + 104);
  *((_DWORD *)this + 42) = -1;
  v6 = *((_QWORD *)this + 11);
  if ((v6 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v7 = *((unsigned int *)this + 20);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, char *))off_1E33DDD38[v7])(&v19, (char *)this + 16);
  *((_DWORD *)this + 20) = -1;
  if ((*(_QWORD *)this & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
}

uint64_t WebCore::GraphicsContextState::GraphicsContextState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char v15;
  char v16;

  *(_QWORD *)a1 = 0;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  v4 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *))off_1E340C830[v4])(&v14);
    *(_DWORD *)(a1 + 80) = v4;
  }
  *(_QWORD *)(a1 + 88) = 0;
  v5 = *(_QWORD *)(a2 + 88);
  if (v5)
  {
    *(_QWORD *)(a1 + 88) = v5;
    *(_QWORD *)(a2 + 88) = 0;
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  v6 = *(unsigned int *)(a2 + 168);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))off_1E340C830[v6])(&v15);
    *(_DWORD *)(a1 + 168) = v6;
  }
  v7 = *(_QWORD *)(a2 + 176);
  v8 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 184) = v8;
  *(_QWORD *)(a1 + 176) = v7;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    v9 = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v9;
    *(_QWORD *)(a1 + 208) = 0;
    v10 = *(_QWORD *)(a2 + 208);
    if (v10)
    {
      *(_QWORD *)(a1 + 208) = v10;
      *(_QWORD *)(a2 + 208) = 0;
    }
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_DWORD *)(a1 + 312) = -1;
    v11 = *(unsigned int *)(a2 + 312);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *))off_1E340C848[v11])(&v16);
      *(_DWORD *)(a1 + 312) = v11;
    }
    *(_BYTE *)(a1 + 320) = 1;
  }
  v12 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 333) = *(_QWORD *)(a2 + 333);
  *(_QWORD *)(a1 + 328) = v12;
  return a1;
}

uint64_t WebCore::BitmapImage::singlePixelSolidColor(WebCore::BitmapImage *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 232))(*((_QWORD *)this + 8));
}

_BYTE *WebCore::RenderInline::updateFromStyle(WebCore::RenderInline *this)
{
  _BYTE *result;
  void *v3;
  int v4;

  result = WebCore::RenderBoxModelObject::updateFromStyle(this);
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v4 & 0xFFFDFFFF;
  if ((v4 & 0x4000) != 0)
  {
    result = WebCore::RenderObject::ensureRareData(this, v3);
    *result = 0;
  }
  return result;
}

unsigned int *WebCore::RenderBoxModelObject::updateFromStyle(WebCore::RenderBoxModelObject *this)
{
  unsigned int *result;
  void *v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t (*v6)();
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _BOOL4 v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;

  result = WebCore::RenderStyle::visitedDependentColor((uint64_t)this + 80, 61, 0, &v40);
  v4 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if ((v40 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v40 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v37 = 1;
      goto LABEL_86;
    }
  }
  else if ((_BYTE)v40)
  {
    goto LABEL_46;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  if (*(_QWORD *)(v5 + 8))
  {
    do
    {
      v36 = *(_QWORD *)(v5 + 16);
      v7 = v36 != 0;
      if (v36)
        break;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  else
  {
    if (*(_QWORD *)(v5 + 16))
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    v7 = v6 != 0;
  }
  if ((v40 & 0x8000000000000) == 0)
    goto LABEL_9;
  v37 = v7;
  result = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_86:
    v34 = __ldaxr(result);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, result));
  if (!v35)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v3);
    v4 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    if ((v37 & 1) != 0)
      goto LABEL_46;
    goto LABEL_10;
  }
  v4 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  v7 = v37;
LABEL_9:
  if (v7)
    goto LABEL_46;
LABEL_10:
  v8 = *((_QWORD *)this + 11);
  v9 = *(_QWORD *)(v8 + 24);
  if (*(float *)(v9 + 120) != 0.0 && (*(_BYTE *)(v9 + 124) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v9 + 112))
    {
      v27 = *(_QWORD *)(v9 + 104);
      if ((v27 & 0x4000000000000) != 0)
      {
        if ((v27 & 0x8000000000000) != 0)
        {
          if (*(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_12;
        }
        else if (!*(_QWORD *)(v9 + 104))
        {
          goto LABEL_12;
        }
      }
    }
    if ((*(_BYTE *)(v9 + 124) & 0xF) != 1)
      goto LABEL_46;
  }
LABEL_12:
  if (*(float *)(v9 + 144) != 0.0 && (*(_BYTE *)(v9 + 148) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v9 + 136))
    {
      v28 = *(_QWORD *)(v9 + 128);
      if ((v28 & 0x4000000000000) != 0)
      {
        if ((v28 & 0x8000000000000) != 0)
        {
          if (*(float *)((v28 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_14;
        }
        else if (!*(_QWORD *)(v9 + 128))
        {
          goto LABEL_14;
        }
      }
    }
    if ((*(_BYTE *)(v9 + 148) & 0xF) != 1)
      goto LABEL_46;
  }
LABEL_14:
  if (*(float *)(v9 + 168) != 0.0 && (*(_BYTE *)(v9 + 172) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v9 + 160))
    {
      v29 = *(_QWORD *)(v9 + 152);
      if ((v29 & 0x4000000000000) != 0)
      {
        if ((v29 & 0x8000000000000) != 0)
        {
          if (*(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_16;
        }
        else if (!*(_QWORD *)(v9 + 152))
        {
          goto LABEL_16;
        }
      }
    }
    if ((*(_BYTE *)(v9 + 172) & 0xF) != 1)
      goto LABEL_46;
  }
LABEL_16:
  if (*(float *)(v9 + 192) != 0.0 && (*(_BYTE *)(v9 + 196) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v9 + 184))
    {
      v30 = *(_QWORD *)(v9 + 176);
      if ((v30 & 0x4000000000000) != 0)
      {
        if ((v30 & 0x8000000000000) != 0)
        {
          if (*(float *)((v30 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_18;
        }
        else if (!*(_QWORD *)(v9 + 176))
        {
          goto LABEL_18;
        }
      }
    }
    if ((*(_BYTE *)(v9 + 196) & 0xF) == 1)
      goto LABEL_18;
LABEL_46:
    v12 = (unsigned int *)((char *)this + 20);
    v13 = *((_DWORD *)this + 5);
    goto LABEL_47;
  }
LABEL_18:
  if (!*(_QWORD *)(*(_QWORD *)(v9 + 200) + 8))
    v4 = 0;
  if (v4)
    goto LABEL_46;
  v10 = *(_QWORD *)(v8 + 32);
  if ((*(_DWORD *)(v10 + 148) & 0x1FC000) != 0)
    goto LABEL_46;
  v11 = *(_QWORD *)(v10 + 88);
  v12 = (unsigned int *)((char *)this + 20);
  v13 = *((_DWORD *)this + 5);
  if (!v11)
  {
    v13 &= 0x9FFFFFFF;
    goto LABEL_24;
  }
LABEL_47:
  if ((v13 & 0x60000000) != 0)
    goto LABEL_25;
  v13 = v13 & 0x9FFFFFFF | 0x20000000;
LABEL_24:
  *v12 = v13;
LABEL_25:
  v14 = *((_QWORD *)this + 12);
  v16 = (v14 & 0x1Fu) > 0x19 || ((1 << (v14 & 0x1F)) & 0x3528029) == 0;
  v17 = v13 & 0xFE7FFFFE | (((v14 >> 19) & 3) << 23) | v16;
  *((_DWORD *)this + 5) = v17;
  v18 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
      *v12 = v17 & 0xFFFFEFFF;
      goto LABEL_103;
    case 2:
    case 4:
      *v12 = v17 | 0x1000;
      goto LABEL_34;
    case 3:
    case 5:
      v19 = 4096;
      goto LABEL_32;
    default:
      v19 = 0;
LABEL_32:
      *v12 = v19 | v17 & 0xFFFFEFFF;
      if (v18 <= 5 && ((1 << v18) & 0x2A) != 0)
LABEL_103:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 1944)
                             + 248)
                 + 1383) = 1;
LABEL_34:
      v20 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      v21 = *(_BYTE *)(v20 + 462);
      v22 = *(_BYTE *)(v20 + 642) & 3;
      v23 = v21 | 0x19;
      if (v22 == 1)
        v21 |= 0x15u;
      if (v22 == 2)
        v24 = v23;
      else
        v24 = v21;
      if ((v24 & 2) != 0)
      {
        if ((*(_BYTE *)v12 & 1) != 0
          || (v38 = v12,
              result = (unsigned int *)WebCore::RenderObject::isAtomicInlineLevelBox(this),
              v12 = v38,
              (_DWORD)result))
        {
          if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
            && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
          {
            v33 = v12;
            v26 = *v12;
LABEL_81:
            v25 = 0x80000;
            goto LABEL_83;
          }
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) == 0
        || (*(_BYTE *)v12 & 1) == 0
        && (v39 = v12,
            result = (unsigned int *)WebCore::RenderObject::isAtomicInlineLevelBox(this),
            v12 = v39,
            !(_DWORD)result)
        || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19
        || (v31 = *((unsigned __int8 *)this + 46), (v31 - 36) <= 4) && v31 != 36)
      {
        v25 = 0;
        v26 = *v12;
        goto LABEL_42;
      }
      v32 = v31 == 63 || v31 == 35;
      v33 = v12;
      v26 = *v12;
      if (!v32)
        goto LABEL_81;
      v25 = 0;
LABEL_83:
      v12 = v33;
LABEL_42:
      *v12 = v26 & 0xFFF7FFFF | v25;
      return result;
  }
}

uint64_t WebCore::RenderView::paintBoxDecorations(uint64_t this, int32x4_t *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  WebCore::RenderLayerCompositor *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  WebCore::RenderLayerCompositor *v50;
  WebCore::RenderLayerCompositor *v51;
  WTF *v52;
  void *v53;
  WebCore::RenderElement *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  __int32 v60;
  unsigned int v61;
  unsigned int v62;
  _BOOL4 v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = a2[1].i64[1];
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (!v4)
    return this;
  v6 = this;
  for (i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40); ; i = *(_QWORD *)(v11 + 40))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(i + 8) + 528);
    if (!v8)
      break;
    v9 = *(_QWORD *)(v8 + 8);
    if (!v9)
      break;
    v10 = *(_QWORD *)(v9 + 120);
    if (!v10)
      break;
    v11 = *(_QWORD *)(v10 + 8);
    if (!v11)
      break;
    v12 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v12)
      break;
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C6804);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
    {
      v41 = *(_QWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
      if (!v41)
        goto LABEL_67;
      v12 = *(_QWORD *)(v41 + 8);
      if (!v12)
        goto LABEL_67;
      while ((*(_BYTE *)(v12 + 45) & 0x10) == 0)
      {
        v42 = *(_QWORD *)(v12 + 32);
        if (!v42)
          goto LABEL_67;
        v14 = 0;
        v12 = *(_QWORD *)(v42 + 8);
        if (!v12)
          goto LABEL_20;
      }
    }
LABEL_18:
    if ((*(_BYTE *)(v12 + 21) & 0x80) == 0)
    {
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 32);
        if (!v13)
          break;
        v12 = *(_QWORD *)(v13 + 8);
        if (!v12)
          break;
        if ((*(_BYTE *)(v12 + 45) & 0x10) != 0)
          goto LABEL_18;
      }
LABEL_67:
      v14 = 0;
      goto LABEL_20;
    }
    v14 = *(_QWORD **)(v12 + 144);
LABEL_20:
    if ((WebCore::RenderLayer::cannotBlitToWindow((uint64_t)v14) & 1) == 0)
    {
      WebCore::RenderLayer::enclosingCompositingLayerForRepaint(v14, 0);
      if (!v15 || WebCore::RenderLayerBacking::paintsIntoWindow(*(WebCore::RenderLayerBacking **)(v15 + 256)))
        continue;
    }
    WebCore::LocalFrameView::setCannotBlitToWindow(*(_QWORD *)(v6 + 248));
    break;
  }
  this = WebCore::RenderView::shouldPaintBaseBackground((WebCore::RenderView *)v6);
  if ((_DWORD)this && (a2[1].i8[4] & 0x20) == 0)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 1272);
    if (v16 && (v43 = *(_QWORD *)(v16 + 64), v44 = v43 & 0xFFFFFFFFFFFFLL, (v43 & 0xFFFFFFFFFFFFLL) != 0))
    {
      v45 = *(_BYTE *)((v43 & 0xFFFFFFFFFFFFLL) + 0x2D);
      if ((v45 & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941C69D8);
      }
      v17 = (v45 & 4) != 0
         && !*(_DWORD *)(v44 + 152)
         && !*(_DWORD *)(v44 + 156)
         && *(_DWORD *)(v44 + 160) >= *(_DWORD *)(v6 + 160)
         && *(_DWORD *)(v44 + 164) >= *(_DWORD *)(v6 + 164);
      v18 = (*(_BYTE *)(*(_QWORD *)(v44 + 104) + 239) & 4) == 0
         && (*(_BYTE *)(v44 + 120) & 0x30) == 0
         && (v46 = *(_QWORD *)(v44 + 88), v47 = *(_QWORD *)(v46 + 32), *(float *)(v47 + 4) == 1.0)
         && !*(_DWORD *)(*(_QWORD *)(v47 + 40) + 20)
         && !*(_QWORD *)(*(_QWORD *)(v46 + 40) + 328)
         && (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v44 + 80)) & 1) == 0
         && (WebCore::RenderObject::isComposited((WebCore::RenderObject *)v44) & 1) == 0
         && (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 88) + 40) + 264) || *(_BYTE *)(v44 + 46) != 83)
         && (v54 = WebCore::RenderView::rendererForRootBackground(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 24) + 8) + 40) + 8)
                                                                                          + 1944))) != 0
         && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v54 + 11) + 16) + 8) + 58) & 0x1C) != 12;
      v19 = WebCore::RenderView::rendererForRootBackground((WebCore::RenderView *)v6) != 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 1;
    }
    v20 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
    if (!v20)
    {
      v63 = v19;
      v50 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v20 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v50, (WebCore::RenderView *)v6);
      v51 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
      *(_QWORD *)(v6 + 400) = v20;
      if (v51)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v51);
        WTF::fastFree(v52, v53);
        v20 = *(WebCore::RenderLayerCompositor **)(v6 + 400);
      }
      v19 = v63;
    }
    WebCore::RenderLayerCompositor::rootBackgroundColorOrTransparencyChanged(v20);
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8);
    v23 = *(_QWORD *)(v22 + 528);
    v24 = 1.0;
    if (v23)
    {
      v25 = *(_QWORD *)(v23 + 8);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 24);
        if (v26)
        {
          v27 = *(_QWORD *)(v26 + 8);
          if (v27)
            v24 = *(float *)(v27 + 356);
        }
      }
    }
    if (!v17 || !v18 || v24 < 1.0)
      goto LABEL_39;
    v28 = *(_QWORD *)(v22 + 1272);
    if (v28)
    {
      v55 = *(_QWORD *)(v28 + 64) & 0xFFFFFFFFFFFFLL;
      if (v55)
      {
        if ((*(_BYTE *)(v55 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1941C6A00);
        }
        if ((*(_BYTE *)(v55 + 45) & 4) != 0 && (*(_BYTE *)(v55 + 21) & 0x80) != 0)
        {
          v56 = *(_QWORD *)(*(_QWORD *)(v55 + 144) + 24);
          if ((v56 & 0x800000000000) != 0 && (v56 & 0xA) != 0)
            goto LABEL_39;
          if ((v56 & 0x20) != 0 && (v56 & 0x10) != 0)
            goto LABEL_39;
        }
      }
    }
    this = WebCore::RenderView::shouldPaintBaseBackground((WebCore::RenderView *)v6);
    if ((this & 1) == 0)
    {
LABEL_39:
      v29 = *(_QWORD *)(v6 + 248);
      if (*(_BYTE *)(v29 + 1369))
      {
        return WebCore::LocalFrameView::setCannotBlitToWindow(v29);
      }
      else
      {
        WebCore::LocalFrameView::documentBackgroundColor(v29, v21, &v66);
        if (!v19
          || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40)
                                                                                                + 8)
                                                                                    + 528)
                                                                        + 8)
                                                            + 24)
                                                + 8)
                                    + 112)
                        + 664) & 0x4000000000) == 0
          || (v30 = v66, (v66 & 0x4000000000000) == 0))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 1024);
        }
        v65 = v30;
        if ((v30 & 0x8000000000000) != 0)
        {
          v48 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 + 1, v48));
        }
        v31 = v65;
        if ((v65 & 0x8000000000000) != 0)
        {
          if (*(float *)((v65 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_108;
LABEL_47:
          v32 = a2[5].i64[0];
          v33 = *(unsigned __int16 *)(v32 + 194);
          if (v33 != 257)
          {
            *(_WORD *)(v32 + 194) = 257;
            *(_DWORD *)(v32 + 184) |= 0x20u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 88))(v32, v32 + 8);
          v34 = a2[5].i64[0];
          v64 = vmulq_f32(vcvtq_f32_s32(*a2), (float32x4_t)vdupq_n_s32(0x3C800000u));
          (*(void (**)(uint64_t, float32x4_t *, uint64_t *))(*(_QWORD *)v34 + 224))(v34, &v64, &v65);
          v35 = a2[5].i64[0];
          if (*(unsigned __int8 *)(v35 + 194) != v33 || *(_BYTE *)(v35 + 195) != 1)
          {
            *(_WORD *)(v35 + 194) = v33 | 0x100;
            *(_DWORD *)(v35 + 184) |= 0x20u;
          }
          this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 88))(v35, v35 + 8);
          v31 = v65;
          v38 = v65 & 0x8000000000000;
        }
        else
        {
          if ((_BYTE)v65)
            goto LABEL_47;
LABEL_108:
          v38 = v65 & 0x8000000000000;
          v57 = a2[5].i64[0];
          v64.i32[0] = WebCore::LayoutRect::operator WebCore::FloatRect(a2->i32);
          *(uint64_t *)((char *)v64.i64 + 4) = __PAIR64__(v59, v58);
          v64.i32[3] = v60;
          this = (*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)v57 + 280))(v57, &v64);
        }
        if (v38)
        {
          this = v31 & 0xFFFFFFFFFFFFLL;
          do
          {
            v61 = __ldaxr((unsigned int *)this);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, (unsigned int *)this));
          if (!v62)
          {
            atomic_store(1u, (unsigned int *)this);
            this = WTF::fastFree((WTF *)this, v37);
          }
        }
        if ((v66 & 0x8000000000000) != 0)
        {
          this = v66 & 0xFFFFFFFFFFFFLL;
          do
          {
            v39 = __ldaxr((unsigned int *)this);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, (unsigned int *)this));
          if (!v40)
          {
            atomic_store(1u, (unsigned int *)this);
            return WTF::fastFree((WTF *)this, v37);
          }
        }
      }
    }
  }
  return this;
}

BOOL WebCore::RenderView::shouldPaintBaseBackground(WebCore::RenderView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Document *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  WebCore::Document *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v2 = *((_QWORD *)this + 31);
  v3 = *(_QWORD *)(v1 + 528);
  if (!v3)
    return *(_BYTE *)(v2 + 1369) == 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return *(_BYTE *)(v2 + 1369) == 0;
  v5 = *(_QWORD *)(v4 + 120);
  if (!v5)
    return *(_BYTE *)(v2 + 1369) == 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return *(_BYTE *)(v2 + 1369) == 0;
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
    return 1;
  v8 = *(_QWORD *)(v1 + 1272);
  if (!v8)
    return 1;
  v9 = *(_WORD *)(v8 + 28);
  if ((v9 & 0x10) == 0)
    goto LABEL_13;
  if (*(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_13;
  v10 = *(_QWORD *)(v8 + 80);
  if (!v10)
    goto LABEL_13;
  while ((*(_WORD *)(v10 + 28) & 0x10) == 0)
  {
    v10 = *(_QWORD *)(v10 + 56);
    if (!v10)
      goto LABEL_13;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24);
  v12 = *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24);
LABEL_16:
  if (v11 != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24) && v11 != v12)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v10 + 56);
      if (!v10)
        break;
      if ((*(_WORD *)(v10 + 28) & 0x10) != 0)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24);
        goto LABEL_16;
      }
    }
LABEL_13:
    if ((v9 & 0x20) != 0)
      return *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24);
    return 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == v12)
    return 1;
  v13 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C6CB0);
    }
    v14 = *(WebCore::Document **)(*(_QWORD *)(v2 + 328) + 296);
    if (v14)
    {
      v15 = *((_QWORD *)v14 + 159);
      if (!v15)
        goto LABEL_29;
      v16 = *(_QWORD *)(v15 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v16)
        goto LABEL_29;
      if ((*(_BYTE *)(v16 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1941C6CD0);
      }
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 148) & 4) != 0)
        v17 = WebCore::RenderObject::useDarkAppearance((WebCore::RenderObject *)v16);
      else
LABEL_29:
        v17 = WebCore::Document::useDarkAppearance(v14, 0);
      v18 = v17;
    }
    else
    {
      v18 = 0;
    }
    v19 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 40) + 8);
    if ((*(_BYTE *)(v13 + 45) & 2) != 0)
    {
      v20 = *(_QWORD *)(v13 + 32);
      if (v20)
        v13 = *(_QWORD *)(v20 + 8);
      else
        v13 = 0;
    }
    if (v18 != WebCore::Document::useDarkAppearance(v19, (const WebCore::RenderStyle *)(v13 + 80)))
      return *(_BYTE *)(v2 + 1369) == 0;
  }
  return 0;
}

WebCore::RenderElement *WebCore::RenderView::rendererForRootBackground(WebCore::RenderView *this)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  WebCore::FillLayer *v5;
  uint64_t v6;
  uint64_t (*v7)();
  BOOL hasImageInAnyLayer;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderElement *v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  v1 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v1)
    return 0;
  if ((*(_BYTE *)(v1 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941C6EA0);
  }
  WebCore::RenderStyle::visitedDependentColor(v1 + 80, 61, 0, &v19);
  v4 = v19;
  if ((v19 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v18 = 1;
      goto LABEL_39;
    }
  }
  else if ((_BYTE)v19)
  {
    return (WebCore::RenderElement *)v1;
  }
  v5 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16) + 8);
  if (*((_QWORD *)v5 + 1))
  {
    hasImageInAnyLayer = WebCore::FillLayer::hasImageInAnyLayer(v5);
    v4 = v19;
    v6 = v19 & 0x8000000000000;
  }
  else
  {
    v6 = v19 & 0x8000000000000;
    if (*((_QWORD *)v5 + 2))
      v7 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v7 = 0;
    hasImageInAnyLayer = v7 != 0;
  }
  if (!v6)
  {
LABEL_12:
    if (!hasImageInAnyLayer)
      goto LABEL_13;
    return (WebCore::RenderElement *)v1;
  }
  v18 = hasImageInAnyLayer;
  v15 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_39:
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (v17)
  {
    hasImageInAnyLayer = v18;
    goto LABEL_12;
  }
  atomic_store(1u, v15);
  WTF::fastFree((WTF *)v15, v3);
  if ((v18 & 1) != 0)
    return (WebCore::RenderElement *)v1;
LABEL_13:
  if ((*(_BYTE *)(v1 + 45) & 1) != 0)
    return (WebCore::RenderElement *)v1;
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
  if (!v9)
    return (WebCore::RenderElement *)v1;
  v10 = *(_WORD *)(v9 + 28);
  if ((v10 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941C6EC0);
  }
  if ((v10 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return (WebCore::RenderElement *)v1;
  if ((WebCore::RenderElement::shouldApplyAnyContainment((WebCore::RenderElement *)v1) & 1) != 0)
    return 0;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
  if (!v11)
    return (WebCore::RenderElement *)v1;
  if ((*(_WORD *)(v11 + 28) & 0x10) == 0)
    return (WebCore::RenderElement *)v1;
  if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    return (WebCore::RenderElement *)v1;
  v12 = *(_QWORD *)(v11 + 80);
  if (!v12)
    return (WebCore::RenderElement *)v1;
  while ((*(_WORD *)(v12 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    v12 = *(_QWORD *)(v12 + 56);
    if (!v12)
      return (WebCore::RenderElement *)v1;
  }
  v13 = (WebCore::RenderElement *)(*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v13)
    return (WebCore::RenderElement *)v1;
  if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941C6EE0);
  }
  if (WebCore::RenderElement::shouldApplyAnyContainment(v13))
    return (WebCore::RenderElement *)v1;
  return v13;
}

uint64_t WebCore::RenderElement::shouldApplyAnyContainment(WebCore::RenderElement *this)
{
  uint64_t v1;
  char v2;
  int v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  int v8;
  char v9;
  char v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  int v16;
  int v18;
  int isAtomicInlineLevelBox;
  int v20;
  WebCore::RenderObject *v21;
  WebCore::RenderElement *v22;
  WebCore::RenderElement *v23;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v2 = *(_BYTE *)(v1 + 462);
  v3 = *(_BYTE *)(v1 + 642) & 3;
  v4 = v2 | 0x19;
  if (v3 == 1)
    v2 |= 0x15u;
  if (v3 == 2)
    v5 = v4;
  else
    v5 = v2;
  if ((v5 & 3) != 0)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0
      || (v22 = this,
          isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox(this),
          this = v22,
          isAtomicInlineLevelBox))
    {
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
        && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
      {
        return 1;
      }
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) != 0)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0
      || (v23 = this, v20 = WebCore::RenderObject::isAtomicInlineLevelBox(this), this = v23, v20))
    {
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19)
      {
        v18 = *((unsigned __int8 *)this + 46);
        if ((v18 - 36) <= 4)
        {
          if (v18 == 36)
            return 1;
        }
        else if (v18 != 63 && v18 != 35)
        {
          return 1;
        }
      }
    }
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v7 = *(_BYTE *)(v6 + 462);
  v8 = *(_BYTE *)(v6 + 642) & 3;
  v9 = v7 | 0x19;
  v10 = v7 | 0x15;
  if (v8 != 1)
    v10 = v7;
  if (v8 != 2)
    v9 = v10;
  v11 = v8 - 3;
  v12 = v7 & 0x10;
  if ((v9 & 0xC) == 0 && v11 <= 0xFFFFFFFD && v12 == 0)
    return 0;
  v21 = this;
  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    result = WebCore::RenderObject::isAtomicInlineLevelBox(this);
    if (!(_DWORD)result)
      return result;
  }
  if ((*((_QWORD *)v21 + 12) & 0x1FLL) == 0x19)
    return 0;
  v16 = *((unsigned __int8 *)v21 + 46);
  if ((v16 - 36) <= 4 && v16 != 36)
    return 0;
  return v16 != 35 && v16 != 63;
}

unsigned int *WebCore::RenderStyle::visitedDependentColor@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int *result;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  result = (unsigned int *)WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)a1, a2, 0, (WebCore::Color *)&v16);
  if ((*(_DWORD *)(a1 + 44) & 0xC00) != 0x800
    || (a3 & 0x20000) != 0
    || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 239) & 2) != 0)
  {
    *a4 = v16;
  }
  else
  {
    result = (unsigned int *)WebCore::RenderStyle::colorResolvingCurrentColor((_QWORD *)a1, a2, 1, (WebCore::Color *)&v15);
    if (a2 == 61 && v15 == 0x1104000000000000)
    {
      *a4 = 0;
      if (v16)
      {
        *a4 = v16;
        v16 = 0;
      }
    }
    else
    {
      if ((v16 & 0x8000000000000) != 0)
        v12 = *(float *)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
      else
        v12 = (float)v16 / 255.0;
      result = (unsigned int *)WebCore::Color::colorWithAlpha((uint64_t)&v15, v12, a4);
      if ((v15 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(result);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, result));
        if (!v14)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
        }
      }
    }
    if ((v16 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr(result);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, result));
      if (!v11)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  return result;
}

void WebCore::RenderLayerCompositor::rootBackgroundColorOrTransparencyChanged(WebCore::RenderLayerCompositor *this)
{
  int HasTransparentBackground;
  void *v3;
  int v4;
  unint64_t *v5;
  uint64_t v6;
  _BOOL4 v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t *v27;
  _BOOL4 v28;
  unint64_t *v29;
  _BOOL4 v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  BOOL v42;
  _BOOL4 v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  _QWORD *v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;

  if (!*((_BYTE *)this + 195))
    return;
  v60 = 0;
  HasTransparentBackground = WebCore::RenderLayerCompositor::viewHasTransparentBackground(this, (WebCore::Color *)&v60);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 664) & 0x4000000000) != 0)
  {
    v59 = v60;
    if ((v60 & 0x8000000000000) != 0)
    {
      v19 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
  }
  else
  {
    v59 = 0;
  }
  v4 = *((unsigned __int8 *)this + 288);
  v5 = (unint64_t *)((char *)this + 296);
  v6 = *((_QWORD *)this + 37);
  if ((v6 & 0x8000000000000) != 0)
  {
    v48 = *((unsigned __int8 *)this + 288);
    v50 = HasTransparentBackground;
    v56 = (_QWORD *)((char *)this + 296);
    v8 = (v60 & 0x8000000000000) != 0
      && (v62 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4),
          v61 = *(_OWORD *)((v60 & 0xFFFFFFFFFFFFLL) + 4),
          WebCore::operator==<float,4ul>((float *)&v62, (float *)&v61))
      && HIBYTE(*v56) == HIBYTE(v60)
      && BYTE6(*v56) == BYTE6(v60);
    v5 = (unint64_t *)((char *)this + 296);
    v4 = v48;
    HasTransparentBackground = v50;
  }
  else
  {
    v8 = (v60 & 0x8000000000000) == 0 && v6 == v60;
  }
  v9 = (unint64_t *)((char *)this + 304);
  v10 = *((_QWORD *)this + 38);
  v11 = v59;
  v12 = v59 & 0x8000000000000;
  if ((v10 & 0x8000000000000) != 0)
  {
    v43 = v8;
    v44 = (unint64_t *)((char *)this + 304);
    v49 = v4;
    v51 = HasTransparentBackground;
    v57 = v5;
    if (!v12)
    {
      *((_BYTE *)this + 288) = HasTransparentBackground;
      WebCore::Color::operator=(v5, &v60);
      WebCore::Color::operator=(v44, &v59);
      goto LABEL_34;
    }
    v62 = *(_OWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 4);
    v61 = *(_OWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4);
    if (WebCore::operator==<float,4ul>((float *)&v62, (float *)&v61))
      v14 = HIBYTE(*v44) == HIBYTE(v59) && BYTE6(*v44) == BYTE6(v59);
    else
      v14 = 0;
    v11 = v59;
    v9 = (unint64_t *)((char *)this + 304);
    v5 = v57;
    v4 = v49;
    HasTransparentBackground = v51;
    v8 = v43;
    v12 = v59 & 0x8000000000000;
  }
  else
  {
    v14 = v10 == v59 && v12 == 0;
  }
  if (v4 == HasTransparentBackground && v8 && v14)
    goto LABEL_21;
  *((_BYTE *)this + 288) = HasTransparentBackground;
  v15 = *((_QWORD *)this + 37);
  if ((v15 & 0x8000000000000) != 0)
  {
    if ((v60 & 0x8000000000000) != 0)
    {
      v52 = v14;
      v45 = v9;
      v62 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
      v61 = *(_OWORD *)((v60 & 0xFFFFFFFFFFFFLL) + 4);
      v27 = v5;
      v28 = WebCore::operator==<float,4ul>((float *)&v62, (float *)&v61);
      v5 = v27;
      v15 = *v27;
      if (v28 && HIBYTE(v15) == HIBYTE(v60))
      {
        v9 = v45;
        LOBYTE(v14) = v52;
        if (BYTE6(v15) == BYTE6(v60))
          goto LABEL_27;
      }
      else
      {
        v9 = v45;
        LOBYTE(v14) = v52;
      }
    }
  }
  else if (v15 == v60 && (v60 & 0x8000000000000) == 0)
  {
    goto LABEL_27;
  }
  if ((v15 & 0x8000000000000) != 0)
  {
    v54 = v14;
    v58 = v5;
    v46 = v9;
    v34 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v35 = __ldaxr(v34);
      v36 = --v35 == 0;
    }
    while (__stlxr(v35, v34));
    v9 = v46;
    if (v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, v3);
      LOBYTE(v14) = v54;
      v5 = v58;
      v9 = v46;
    }
  }
  v31 = v60;
  *v5 = v60;
  if ((v31 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
LABEL_27:
  v16 = *v9;
  if ((*v9 & 0x8000000000000) != 0)
  {
    if ((v59 & 0x8000000000000) != 0)
    {
      v53 = v14;
      v62 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
      v61 = *(_OWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4);
      v29 = v9;
      v30 = WebCore::operator==<float,4ul>((float *)&v62, (float *)&v61);
      v9 = v29;
      v16 = *v29;
      if (v30 && HIBYTE(v16) == HIBYTE(v59))
      {
        LOBYTE(v14) = v53;
        if (BYTE6(v16) == BYTE6(v59))
          goto LABEL_33;
      }
      else
      {
        LOBYTE(v14) = v53;
      }
    }
  }
  else if (v16 == v59 && (v59 & 0x8000000000000) == 0)
  {
    goto LABEL_33;
  }
  if ((v16 & 0x8000000000000) != 0)
  {
    v55 = v14;
    v47 = v9;
    v40 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v41 = __ldaxr(v40);
      v42 = --v41 == 0;
    }
    while (__stlxr(v41, v40));
    v9 = v47;
    if (v42)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v3);
      LOBYTE(v14) = v55;
      v9 = v47;
    }
  }
  v37 = v59;
  *v9 = v59;
  if ((v37 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
LABEL_33:
  if (!v14)
  {
LABEL_34:
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 560))(v18);
  }
  WebCore::RenderLayerCompositor::rootLayerConfigurationChanged(this);
  v11 = v59;
  v12 = v59 & 0x8000000000000;
LABEL_21:
  if (v12)
  {
    v21 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v3);
    }
  }
  if ((v60 & 0x8000000000000) != 0)
  {
    v24 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((WTF *)v24, v3);
    }
  }
}

BOOL WebCore::RenderLayerCompositor::viewHasTransparentBackground(WebCore::RenderLayerCompositor *this, WebCore::Color *a2)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  unint64_t v11;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 248);
  if (!*(_BYTE *)(v4 + 1369))
  {
    WebCore::LocalFrameView::documentBackgroundColor(v4, a2, &v36);
    v6 = v36;
    if ((v36 & 0x4000000000000) != 0)
      goto LABEL_3;
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 248) + 1024);
    if ((v11 & 0x8000000000000) != 0)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 248) + 1024);
      v17 = v11 & 0xFFFFFFFFFFFFLL;
      do
        v18 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v18 + 1, (unsigned int *)v17));
      v11 = v35;
      v6 = v36;
      if ((v36 & 0x8000000000000) != 0)
      {
        v38 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
        v37 = *(_OWORD *)(v17 + 4);
        v19 = WebCore::operator==<float,4ul>((float *)&v38, (float *)&v37);
        v6 = v36;
        if (v19 && HIBYTE(v36) == HIBYTE(v35))
        {
          v11 = v35;
          if (BYTE6(v36) == BYTE6(v35))
          {
            do
            {
              v20 = __ldaxr((unsigned int *)v17);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, (unsigned int *)v17));
            if (!v21)
            {
              atomic_store(1u, (unsigned int *)v17);
              WTF::fastFree((WTF *)v17, v5);
            }
LABEL_3:
            v7 = v36;
            if (!a2)
              goto LABEL_7;
            v8 = *(_QWORD *)a2;
            if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
            {
              if ((v36 & 0x8000000000000) != 0)
              {
                v38 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
                v37 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
                v22 = WebCore::operator==<float,4ul>((float *)&v38, (float *)&v37);
                v8 = *(_QWORD *)a2;
                if (v22)
                {
                  v7 = v36;
                  if (HIBYTE(v8) == HIBYTE(v36) && BYTE6(v8) == BYTE6(v36))
                  {
LABEL_7:
                    if ((v7 & 0x8000000000000) == 0)
                      return ~(_BYTE)v7 != 0;
                    v14 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
                    v9 = *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0;
                    do
                    {
                      v15 = __ldaxr(v14);
                      v16 = v15 - 1;
                    }
                    while (__stlxr(v16, v14));
                    if (!v16)
                    {
                      atomic_store(1u, v14);
                      WTF::fastFree((WTF *)v14, v5);
                    }
                    return v9;
                  }
                }
              }
            }
            else if (v8 == v36 && (v36 & 0x8000000000000) == 0)
            {
              goto LABEL_7;
            }
            if ((v8 & 0x8000000000000) != 0)
            {
              v25 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
              do
              {
                v26 = __ldaxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
              {
                atomic_store(1u, v25);
                WTF::fastFree((WTF *)v25, v5);
              }
            }
            v7 = v36;
            *(_QWORD *)a2 = v36;
            if ((v7 & 0x8000000000000) != 0)
            {
              v23 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 + 1, v23));
              v7 = v36;
            }
            goto LABEL_7;
          }
        }
        else
        {
          v11 = v35;
        }
      }
    }
    else if (v36 == v11 && ((v36 | v11) & 0x8000000000000) == 0)
    {
      goto LABEL_3;
    }
    if ((v6 & 0x8000000000000) != 0)
    {
      v28 = v11;
      v29 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v5);
        v11 = v28;
      }
    }
    v36 = v11;
    goto LABEL_3;
  }
  if (a2)
  {
    *(_QWORD *)&v38 = 0;
    WebCore::Color::operator=((unint64_t *)a2, &v38);
    if ((v38 & 0x8000000000000) != 0)
    {
      v32 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v13);
      }
    }
  }
  return 1;
}

unint64_t *WebCore::Color::operator=(unint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t *v8;
  _BOOL4 v9;
  unint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;

  v2 = *result;
  v3 = *a2;
  if ((*result & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) != 0)
    {
      v12 = a2;
      v14 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
      v13 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v8 = result;
      v9 = WebCore::operator==<float,4ul>((float *)&v14, (float *)&v13);
      v2 = *v8;
      if (v9 && HIBYTE(v2) == HIBYTE(*v12))
      {
        result = v8;
        a2 = v12;
        if (BYTE6(v2) == BYTE6(*v12))
          return result;
      }
      else
      {
        result = v8;
        a2 = v12;
      }
    }
  }
  else if (v2 == v3 && (v3 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    v10 = result;
    v11 = a2;
    v5 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      result = v10;
      a2 = v11;
    }
  }
  *result = *a2;
  *a2 = 0;
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t *v5;
  _BOOL4 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;

  v2 = *result;
  v3 = *a2;
  if ((*result & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) != 0)
    {
      v14 = a2;
      v17 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
      v16 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v5 = result;
      v6 = WebCore::operator==<float,4ul>((float *)&v17, (float *)&v16);
      v2 = *v5;
      if (v6 && HIBYTE(v2) == HIBYTE(*v14))
      {
        result = v5;
        a2 = v14;
        if (BYTE6(v2) == BYTE6(*v14))
          return result;
      }
      else
      {
        result = v5;
        a2 = v14;
      }
    }
  }
  else if (v2 == v3 && (v3 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    v13 = result;
    v15 = a2;
    v10 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
      result = v13;
      a2 = v15;
    }
  }
  v7 = *a2;
  *result = *a2;
  if ((v7 & 0x8000000000000) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  return result;
}

uint64_t WebCore::RenderObject::isComposited(WebCore::RenderObject *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 21) & 0x80) == 0)
    return 0;
  if ((*((_BYTE *)this + 45) & 0x10) != 0)
    return *(_QWORD *)(*((_QWORD *)this + 18) + 256) != 0;
  result = 96;
  __break(0xC471u);
  return result;
}

BOOL WebCore::RenderLayer::enclosingCompositingLayerForRepaint(_QWORD *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = a1;
  v3 = a1[3];
  if ((v3 & 0x800) != 0
    && ((v4 = a1[4], (*(_BYTE *)(v4 + 22) & 1) == 0)
     || ((*(_BYTE *)(v4 + 45) & 2) != 0
       ? (v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 96))
       : (v15 = *(_QWORD *)(v4 + 96)),
         (v16 = v15 & 0x1C00, v16 == 2048) || !v16)))
  {
    v5 = *(_BYTE *)(v4 + 46) != 49 && (WORD1(v3) & 3) - 1 < 2u;
  }
  else
  {
    v5 = 0;
  }
  if (a2)
    goto LABEL_9;
  v6 = a1[32];
  if (v6 && *(_BYTE *)(v6 + 291))
    return v5;
  v7 = a1[10];
  if (!v7 || !*(_QWORD *)(v7 + 8))
  {
LABEL_9:
    if ((v3 & 4) == 0)
    {
      while (1)
      {
        v2 = (_QWORD *)v2[5];
        if (!v2)
          return 0;
        if ((v2[3] & 0x4A) != 0)
          goto LABEL_12;
      }
    }
    v2 = (_QWORD *)a1[5];
    if (!v2)
      return 0;
LABEL_12:
    while (!v5)
    {
      v8 = v2[3];
      if ((v8 & 0x800) != 0)
      {
        v9 = v2[4];
        if ((*(_BYTE *)(v9 + 22) & 1) != 0
          && ((*(_BYTE *)(v9 + 45) & 2) != 0
            ? (v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 96))
            : (v12 = *(_QWORD *)(v9 + 96)),
              (v13 = v12 & 0x1C00, v13 != 2048) && v13))
        {
          v5 = 0;
        }
        else
        {
          v5 = (WORD1(v8) & 3) - 1 < 2u;
          if (*(_BYTE *)(v9 + 46) == 49)
            v5 = 0;
        }
LABEL_17:
        v10 = v2[32];
        if (!v10)
          goto LABEL_18;
        goto LABEL_25;
      }
      v5 = 0;
      v10 = v2[32];
      if (!v10)
        goto LABEL_18;
LABEL_25:
      if (*(_BYTE *)(v10 + 291))
        return v5;
LABEL_18:
      v11 = v2[10];
      if (v11 && *(_QWORD *)(v11 + 8))
        return v5;
      if ((v2[3] & 4) == 0)
      {
        while (1)
        {
          v2 = (_QWORD *)v2[5];
          if (!v2)
            return 0;
          if ((v2[3] & 0x4A) != 0)
            goto LABEL_22;
        }
      }
      v2 = (_QWORD *)v2[5];
LABEL_22:
      if (!v2)
        return 0;
    }
    v5 = 1;
    goto LABEL_17;
  }
  return v5;
}

uint64_t WebCore::RenderLayer::cannotBlitToWindow(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t (*v6)();
  int v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;

  while (1)
  {
    v1 = *(_QWORD *)(this + 32);
    v2 = *(_QWORD *)(v1 + 88);
    v3 = *(_QWORD *)(v2 + 32);
    if (*(float *)(v3 + 4) < 1.0)
      return 1;
    v4 = *(_QWORD *)(v3 + 48);
    if (*(_QWORD *)(v4 + 8))
    {
      while (!*(_QWORD *)(v4 + 16))
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          goto LABEL_7;
      }
      return 1;
    }
    if (*(_QWORD *)(v4 + 16))
      v5 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
    if (v5)
      return 1;
LABEL_7:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 216) + 8))
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    if (v6)
      return 1;
    v7 = *(_DWORD *)(v1 + 20);
    if ((v7 & 0x4000) != 0)
    {
      v9 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
      v10 = (~(v1 << 32) + v1) ^ ((unint64_t)(~(v1 << 32) + v1) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      for (i = 1; ; v13 = (v15 + i++) & v9)
      {
        v15 = v13;
        v16 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v13);
        if (v16 != -1 && *(_QWORD *)(v16 + 8) == v1)
          break;
      }
      if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v15 + 8))
        return 1;
    }
    if ((v7 & 0x20000) != 0)
    {
      if ((*(_BYTE *)(v1 + 45) & 2) != 0)
      {
        v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 88);
        v3 = *(_QWORD *)(v2 + 32);
      }
      if (*(_DWORD *)(*(_QWORD *)(v3 + 40) + 20))
        return 1;
      v8 = *(_QWORD **)(v2 + 40);
      if (v8[41] || v8[38] || v8[39] || v8[40] || (v7 & 0x100000) != 0)
        return 1;
    }
    this = *(_QWORD *)(this + 40);
    if (!this)
      return this;
  }
}

uint64_t WebCore::LocalFrameView::setCannotBlitToWindow(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(this + 1365) = 1;
  v1 = *(_QWORD *)(this + 328);
  if (v1)
  {
    v2 = this;
    while (1)
    {
      do
      {
LABEL_3:
        v3 = (_QWORD *)v1;
        if (!*(_BYTE *)(v1 + 144))
        {
          v4 = *(_QWORD *)(v1 + 288);
          if (v4)
          {
            this = WebCore::LocalFrameView::useSlowRepaints(*(WebCore::LocalFrameView **)(v1 + 288), 1);
            if (*(_QWORD *)(v4 + 40))
              this = WebCore::ScrollView::platformSetCanBlitOnScroll((id *)v4, this ^ 1);
            else
              *(_BYTE *)(v4 + 317) = this ^ 1;
          }
        }
        v1 = v3[11];
      }
      while (v1);
      v5 = *(_QWORD *)(v2 + 328);
      v6 = *(_QWORD *)(v3[6] + 8);
      if (v6 == v5)
        break;
      v1 = v3[9];
      if (!v1)
      {
        if (v5)
        {
          while (1)
          {
            v8 = *(_QWORD *)(v6 + 56);
            if (!v8)
              break;
            v6 = *(_QWORD *)(v8 + 8);
            if (v6 == v5 || v6 == 0)
              break;
            v1 = *(_QWORD *)(v6 + 72);
            if (v1)
              goto LABEL_3;
          }
        }
        else
        {
          while (1)
          {
            v7 = *(_QWORD *)(v6 + 56);
            if (!v7)
              break;
            v6 = *(_QWORD *)(v7 + 8);
            if (!v6)
              break;
            v1 = *(_QWORD *)(v6 + 72);
            if (v1)
              goto LABEL_3;
          }
        }
        return this;
      }
    }
  }
  return this;
}

uint64_t WebCore::DisplayList::Recorder::fillRect(WebCore::DisplayList::Recorder *this, const WebCore::FloatRect *a2, const WebCore::Color *a3)
{
  WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary((uint64_t)this, a2);
  return (*(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::FloatRect *, const WebCore::Color *))(*(_QWORD *)this + 1064))(this, a2, a3);
}

uint64_t WebCore::LocalFrameView::baseBackgroundColor@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 1024);
  *a2 = v2;
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

void WebCore::NativeImage::singlePixelSolidColor(WebCore::NativeImage *this@<X0>, uint64_t a2@<X8>)
{
  CGColorSpace *v4;
  CGContext *v5;
  CGContext *v6;
  CGImageRef *v7;
  uint64_t v8;
  signed int v9;
  signed int v10;
  signed int v11;
  WebCore::NativeImage *v12;
  _BYTE data[3];
  unsigned __int8 v14;
  CGRect v15;

  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6)) == 0x100000001
    && (v12 = this,
        v4 = (CGColorSpace *)WebCore::sRGBColorSpaceRef((WebCore *)0x100000001),
        (v5 = CGBitmapContextCreate(data, 1uLL, 1uLL, 8uLL, 4uLL, v4, 0x4001u)) != 0))
  {
    v6 = v5;
    CGContextSetBlendMode(v5, kCGBlendModeCopy);
    v7 = (CGImageRef *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 6) + 16))(*((_QWORD *)v12 + 6));
    v15.origin.x = 0.0;
    v15.origin.y = 0.0;
    v15.size.width = 1.0;
    v15.size.height = 1.0;
    CGContextDrawImage(v6, v15, *v7);
    v8 = 0x1104000000000000;
    if (v14)
    {
      v9 = 255 * data[0] / v14;
      v10 = 255 * data[1] / v14;
      if (v9 >= 255)
        v9 = 255;
      if (v10 >= 255)
        v10 = 255;
      v11 = 255 * data[2] / v14;
      if (v11 >= 255)
        v11 = 255;
      v8 = bswap32((v11 << 16) | (v14 << 24) | (v10 << 8) | v9) | 0x1104000000000000;
    }
    *(_QWORD *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 1;
    CFRelease(v6);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

_QWORD *WebCore::ImageFrame::nativeImage(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v6;

  v3 = this;
  if (!a2)
    goto LABEL_10;
  v4 = *(_QWORD *)(a2 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  this = (_QWORD *)MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *v3 = a2;
  return this;
}

unsigned __int8 **WebCore::GraphicsContext::drawImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, unsigned int a5)
{
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned __int8 **result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;

  v8 = HIWORD(a5) & 0xF;
  v9 = *(unsigned __int8 *)(a1 + 340);
  if (v8)
  {
    v16 = a4;
    v18 = a2;
    if (v9 == v8)
    {
      v10 = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 340) = BYTE2(a5) & 0xF;
      *(_DWORD *)(a1 + 184) |= 0x400u;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
      v10 = 0;
    }
    a4 = v16;
    a2 = v18;
  }
  else
  {
    v10 = 1;
  }
  v20 = vmulq_n_f32(*a4, COERCE_FLOAT(*(_OWORD *)(a2 + 24)));
  if ((*(_BYTE *)(a1 + 716) & 1) != 0)
  {
    v11 = 6;
  }
  else
  {
    v17 = a2;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    a2 = v17;
    v11 = 6;
    if (v15 != a1)
      v11 = 7;
  }
  result = (unsigned __int8 **)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 8 * v11))(&v19, a2);
  if (v19)
  {
    result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 720))(a1, v19, a3, &v20, *(_QWORD *)&a5 & 0xFFFFFFLL);
    v14 = v19;
    v19 = 0;
    if (v14)
      result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v14 + 8), v13);
  }
  if ((v10 & 1) == 0)
  {
    if (*(unsigned __int8 *)(a1 + 340) != v9)
    {
      *(_BYTE *)(a1 + 340) = v9;
      *(_DWORD *)(a1 + 184) |= 0x400u;
    }
    return (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a1 + 8);
  }
  return result;
}

uint64_t WebCore::ImageBuffer::copyNativeImage@<X0>(WebCore::ImageBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *a2 = 0;
  return result;
}

uint64_t WebCore::ImageBuffer::isInUse(WebCore::ImageBuffer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t WebCore::ImageBuffer::setNonVolatile(WebCore::ImageBuffer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  if (*((_BYTE *)this + 132))
  {
    *((_BYTE *)this + 132) = 0;
    return 1;
  }
  return result;
}

uint64_t WebCore::ImageBuffer::toBackendSharing(WebCore::ImageBuffer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 168))(result);
  return result;
}

uint64_t WebCore::ImageBuffer::flushDrawingContext(WebCore::ImageBuffer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t WebCore::ImageBuffer::ensureBackend(WebCore::ImageBuffer *this)
{
  return *((_QWORD *)this + 14);
}

BOOL WebCore::ImageBufferIOSurfaceBackend::isInUse(WebCore::ImageBufferIOSurfaceBackend *this)
{
  return IOSurfaceIsInUse(*(IOSurfaceRef *)(*((_QWORD *)this + 6) + 48)) != 0;
}

void WebCore::ImageBufferIOSurfaceBackend::copyNativeImage(WebCore::ImageBufferIOSurfaceBackend *this@<X0>, CGImage **a2@<X8>)
{
  uint64_t v4;
  uint64_t Image;
  CGImage *v6;
  uint64_t IdentifierInternal;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  PAL *v11;
  const void *v12;
  PAL *v13;

  v4 = *((_QWORD *)this + 5);
  if (v4)
    *(_BYTE *)(v4 + 744) &= ~8u;
  *((_BYTE *)this + 68) = 1;
  if (!*((_QWORD *)this + 7))
  {
    WebCore::IOSurface::createPlatformContext(*((IOSurfaceRef **)this + 6), &v13);
    v11 = v13;
    v12 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v13;
    if (v12)
    {
      CFRelease(v12);
      v11 = (PAL *)*((_QWORD *)this + 7);
    }
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1941C8578);
    }
  }
  Image = CGIOSurfaceContextCreateImage();
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x1941C8528);
  }
  v6 = (CGImage *)Image;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (!v6)
    goto LABEL_9;
  v8 = IdentifierInternal;
  if (!(CGImageGetWidth(v6) >> 31) && !(CGImageGetHeight(v6) >> 31))
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1E340E810;
    v9[1] = v6;
    v6 = (CGImage *)WTF::fastMalloc((WTF *)0x38);
    v10 = WTF::fastMalloc((WTF *)0x20);
    *(_BYTE *)v10 = 0;
    *(_OWORD *)(v10 + 8) = xmmword_19689B170;
    *(_QWORD *)(v10 + 24) = v6;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = 0;
    *((_QWORD *)v6 + 4) = v8;
    *((_QWORD *)v6 + 5) = 1;
    *(_QWORD *)v6 = off_1E340E858;
    *((_QWORD *)v6 + 1) = v10;
    *((_QWORD *)v6 + 6) = v9;
LABEL_9:
    *a2 = v6;
    return;
  }
  *a2 = 0;
  CFRelease(v6);
}

void WebCore::ImageDecoderCG::createFrameImageAtIndex(uint64_t a1@<X0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, CGImageRef *a5@<X8>)
{
  CFDictionaryRef v9;
  CGImageRef ImageAtIndex;
  CGImage *v11;
  unsigned __int8 v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  CGImageRef v21;
  CGImageRef v22;
  CFDictionaryRef v23;
  CFDictionaryRef options[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a4 == 1)
  {
    WebCore::imageSourceOptions((uint64_t *)options, a3);
    v9 = options[0];
    ImageAtIndex = CGImageSourceCreateImageAtIndex(*(CGImageSourceRef *)(a1 + 32), a2, options[0]);
  }
  else
  {
    v14 = WebCore::ImageDecoderCG::frameSizeAtIndex(a1, a2, 0);
    options[0] = (CFDictionaryRef)v14;
    if (*(_BYTE *)(a4 + 12))
    {
      v15 = *(_QWORD *)(a4 + 4);
      v16 = HIDWORD(v14);
      if ((v15 & 0x80000000) == 0)
        v17 = *(_QWORD *)(a4 + 4);
      else
        v17 = -(int)v15;
      v18 = HIDWORD(v15);
      if ((v15 & 0x8000000000000000) != 0)
        LODWORD(v18) = -HIDWORD(v15);
      v19 = v18 * (unint64_t)v17;
      if ((v14 & 0x80000000) == 0)
        v20 = v14;
      else
        v20 = -(int)v14;
      if ((v14 & 0x8000000000000000) != 0)
        LODWORD(v16) = -HIDWORD(v14);
      if (v19 < v16 * (unint64_t)v20)
        options[0] = *(CFDictionaryRef *)(a4 + 4);
    }
    WebCore::imageSourceThumbnailOptions(&v23, a3, (int *)options);
    v9 = v23;
    ImageAtIndex = CGImageSourceCreateThumbnailAtIndex(*(CGImageSourceRef *)(a1 + 32), a2, v23);
  }
  v11 = ImageAtIndex;
  CGImageSetCachingFlags();
  v12 = atomic_load((unsigned __int8 *)(a1 + 13));
  if ((v12 & 1) != 0)
  {
    *(int64x2_t *)options = vdupq_n_s64(0x406FE00000000000uLL);
    v25 = *(_OWORD *)options;
    v26 = *(_OWORD *)options;
    v21 = CGImageCreateWithMaskingColors(v11, (const CGFloat *)options);
    v22 = v21;
    if (!v21)
      v21 = v11;
    *a5 = v21;
    if (v21)
      CFRetain(v21);
    if (v22)
      CFRelease(v22);
    if (v11)
      CFRelease(v11);
  }
  else
  {
    *a5 = v11;
  }
  if (v9)
    CFRelease(v9);
}

BOOL WebCore::ImageDecoderCG::frameIsCompleteAtIndex(CGImageSourceRef *this, size_t a2)
{
  size_t v4;
  CGImageSource *v5;
  CGImageSourceStatus Status;

  v4 = CGImageSourceGetCount(this[4]) - 1;
  v5 = this[4];
  if (v4 == a2)
    Status = CGImageSourceGetStatus(v5);
  else
    Status = CGImageSourceGetStatusAtIndex(v5, a2);
  return Status == kCGImageStatusComplete;
}

uint64_t *WebCore::AVAssetMIMETypeCache::singleton(WebCore::AVAssetMIMETypeCache *this)
{
  {
    qword_1ECE88A28 = 0;
    qword_1ECE88A30 = 0;
    unk_1ECE88A18 = 0u;
    *(__int128 *)((char *)&xmmword_1ECE88A00 + 8) = 0u;
    *(_OWORD *)&qword_1ECE889F8 = 0u;
    WebCore::AVAssetMIMETypeCache::singleton(void)::cache = (uint64_t)off_1E334D010;
  }
  return &WebCore::AVAssetMIMETypeCache::singleton(void)::cache;
}

uint64_t WebCore::RenderFlexibleBox::layoutBlock(uint64_t a1, BOOL a2)
{
  uint64_t result;
  void *v4;
  _DWORD *v5;
  WTF **v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  int *v29;
  int v30;
  int v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  _DWORD *updated;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  WTF *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  _DWORD *v56;
  uint64_t v57;
  const WebCore::RenderBlock *v58;
  _QWORD *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unsigned int v71;
  void *v72;
  WTF *v73;
  unsigned int v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF **v99;
  WTF *v100;
  _QWORD *v101;
  unsigned int v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  WebCore::RenderLayerScrollableArea *v106;
  __int128 *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  int i;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  int v117;
  void *v118;
  void *v119;
  int v120;
  int v121;
  int v122;
  _QWORD **v123;
  WTF *v124;
  uint64_t v125;
  _BYTE v126[128];
  BOOL v127[63];
  BOOL v128;
  __int128 v129;
  int v130;
  unsigned __int8 v131;
  char v132;
  char v133;
  int v134;
  unsigned __int8 v135;
  char v136;
  char v137;

  v128 = a2;
  if (!a2)
  {
    result = WebCore::RenderBlock::simplifiedLayout((WebCore::RenderBlock *)a1);
    if ((result & 1) != 0)
      return result;
  }
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v127, (WebCore::RenderObject *)a1, 0, 0, 1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1) & 1) != 0
    || (v75 = *(_QWORD *)(a1 + 32)) != 0
    && (v76 = *(_BYTE **)(v75 + 8)) != 0
    && (v76[45] & 0x40) != 0
    && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v76 + 1704))(v76, a1))
  {
    v5 = (_DWORD *)(a1 + 160);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      v5 = (_DWORD *)(a1 + 164);
    *v5 = 0;
  }
  v6 = *(WTF ***)(a1 + 216);
  if (v6)
  {
    *(_QWORD *)(a1 + 216) = 0;
    v98 = *((unsigned int *)v6 - 1);
    if ((_DWORD)v98)
    {
      v99 = v6;
      do
      {
        v100 = *v99;
        if (*v99 != (WTF *)-1)
        {
          *v99 = 0;
          if (v100)
          {
            if (*(_DWORD *)v100 == 1)
              WTF::fastFree(v100, v4);
            else
              --*(_DWORD *)v100;
          }
        }
        ++v99;
        --v98;
      }
      while (v98);
    }
    WTF::fastFree((WTF *)(v6 - 2), v4);
    v7 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)(a1 + 224) = 0;
    if (v7)
    {
      LODWORD(v7) = *(_DWORD *)(v7 - 12);
      if (v7 > 0x7FFFFFFE)
        LODWORD(v7) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v7) = 0;
    *(_DWORD *)(a1 + 224) = 0;
  }
  *(_DWORD *)(a1 + 228) = 2 * v7;
  v8 = *(unsigned __int8 *)(a1 + 393);
  *(_BYTE *)(a1 + 393) = 1;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461))
    WebCore::RenderFlexibleBox::initializeMarginTrimState((WTF *)a1);
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v9 = (int *)(a1 + 164);
  else
    v9 = (int *)(a1 + 160);
  v10 = *v9;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
  v11 = *(_WORD *)(a1 + 69);
  *(_WORD *)(a1 + 69) = v11 & 0xFDFF;
  v12 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
  if (v12 < 4)
    v13 = (_DWORD *)(a1 + 164);
  else
    v13 = (_DWORD *)(a1 + 160);
  if (v10 != *v13 || (v11 & 0x200) != 0)
    v128 = 1;
  if (v12 < 4)
    v14 = (unsigned int *)(a1 + 160);
  else
    v14 = (unsigned int *)(a1 + 164);
  v15 = *v14;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
    v18 = (v16 >> 31) + 0x7FFFFFFF;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  v22 = v18 + v21;
  if (__OFADD__(v18, v21))
    v22 = (v18 >> 31) + 0x7FFFFFFF;
  v23 = 1360;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v23 = 1352;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v23))(a1);
  v25 = v24 << 6;
  if (v24 < -33554432)
    v25 = 0x80000000;
  if (v24 > 0x1FFFFFF)
    v25 = 0x7FFFFFFF;
  v26 = __OFADD__(v22, v25);
  v27 = v22 + v25;
  if (v26)
    v27 = (v22 >> 31) + 0x7FFFFFFF;
  v28 = *(_DWORD *)(a1 + 124);
  if (((v28 >> 13) & 6) - 2 < 4)
    v29 = (int *)(a1 + 160);
  else
    v29 = (int *)(a1 + 164);
  *v29 = v27;
  v30 = *(_DWORD *)(a1 + 20);
  if ((v30 & 0x20000) != 0)
  {
    v96 = a1;
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      v96 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v97 = *(_QWORD *)(v96 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v97 + 32) + 40) + 20))
      goto LABEL_176;
    v101 = *(_QWORD **)(v97 + 40);
    if (v101[41] || v101[38] || v101[39] || v101[40] || (v30 & 0x100000) != 0)
      goto LABEL_176;
  }
  if ((v30 & 0x4000) == 0)
    goto LABEL_38;
  v108 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
  v109 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
  v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
  v112 = v108 & ((v111 >> 31) ^ v111);
  for (i = 1; ; v112 = (v114 + i++) & v108)
  {
    v114 = v112;
    v115 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v112);
    if (v115 != -1 && *(_QWORD *)(v115 + 8) == a1)
      break;
  }
  if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v114 + 8))
  {
LABEL_176:
    v32 = 1;
  }
  else
  {
LABEL_38:
    v31 = (unsigned __int16)v28 >> 13;
    v121 = 2;
    switch(v31)
    {
      case 1:
      case 2:
        goto LABEL_40;
      case 3:
      case 5:
        v31 = 3;
        goto LABEL_40;
      case 4:
        goto LABEL_41;
      default:
        v31 = 0;
LABEL_40:
        v121 = v31;
LABEL_41:
        v32 = (v121 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  v124 = *(WTF **)(a1 + 152);
  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v34 = v33 + 336;
  v35 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v33 + 336, (WebCore::RenderObject *)a1, (int *)&v124, 0, 0);
  v36 = v35;
  if (v32 && v35)
    ++*(_DWORD *)(v33 + 492);
  WebCore::RenderBlock::preparePaginationBeforeBlockLayout((const WebCore::RenderBlock *)a1, &v128);
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 388) = 0;
  updated = (_DWORD *)WebCore::LocalFrameViewLayoutContext::updateScrollInfoAfterLayoutTransaction((WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944) + 248) + 336));
  ++*updated;
  v123 = (_QWORD **)(a1 + 248);
  std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy(a1 + 248, *(WTF **)(a1 + 256));
  v38 = (uint64_t *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  if (!(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
    || (v39 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8)) == 0
    || (*(_BYTE *)(v39 + 45) & 4) == 0)
  {
    v40 = (_QWORD *)(a1 + 256);
    goto LABEL_49;
  }
  v122 = v36;
  do
  {
    v77 = v15;
    v78 = v33;
    v79 = v34;
    v80 = v32;
    v81 = v8;
    v82 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 88) + 32) + 144);
    v83 = *v38;
    v84 = v38;
    v85 = v38;
    if (*v38)
    {
      do
      {
        while (1)
        {
          v85 = (uint64_t *)v83;
          v86 = *(_DWORD *)(v83 + 28);
          if (v82 >= v86)
            break;
          v83 = *v85;
          v84 = v85;
          if (!*v85)
            goto LABEL_155;
        }
        v32 = v80;
        if (v86 >= v82)
          goto LABEL_137;
        v83 = v85[1];
      }
      while (v83);
      v84 = v85 + 1;
    }
LABEL_155:
    v91 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v91 + 28) = v82;
    *(_QWORD *)v91 = 0;
    *(_QWORD *)(v91 + 8) = 0;
    *(_QWORD *)(v91 + 16) = v85;
    *v84 = v91;
    v92 = (_QWORD *)**v123;
    if (v92)
    {
      *v123 = v92;
      v93 = *v84;
    }
    else
    {
      v93 = v91;
    }
    v32 = v80;
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(a1 + 256), v93);
    ++*(_QWORD *)(a1 + 264);
    v38 = (uint64_t *)(a1 + 256);
LABEL_137:
    v87 = (*(_DWORD *)(v39 + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(v39 + 20) & 0x400) == 0;
    v8 = v81;
    v34 = v79;
    v33 = v78;
    v15 = v77;
    v36 = v122;
    if (v87)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) != 0)
        {
LABEL_144:
          v88 = *(_QWORD *)(*(_QWORD *)(v39 + 88) + 24);
          LODWORD(v124) = 0;
          BYTE6(v124) = 0;
          WORD2(v124) = *(_WORD *)(v88 + 68);
          if (BYTE4(v124) - 2 >= 9)
          {
            if (BYTE4(v124) == 11)
            {
              v116 = (void *)*(unsigned int *)(v88 + 64);
              LODWORD(v124) = *(_DWORD *)(v88 + 64);
              WebCore::Length::ref((int *)&v124);
              v117 = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v124);
              *(_DWORD *)(v39 + 180) = v117;
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v116);
              goto LABEL_147;
            }
          }
          else
          {
            BYTE6(v124) = *(_BYTE *)(v88 + 70);
            LODWORD(v124) = *(_DWORD *)(v88 + 64);
          }
          *(_DWORD *)(v39 + 180) = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v124);
LABEL_147:
          v89 = *(_QWORD *)(*(_QWORD *)(v39 + 88) + 24);
          LODWORD(v129) = 0;
          BYTE6(v129) = 0;
          WORD2(v129) = *(_WORD *)(v89 + 52);
          if (BYTE4(v129) - 2 < 9)
          {
            BYTE6(v129) = *(_BYTE *)(v89 + 54);
            LODWORD(v129) = *(_DWORD *)(v89 + 48);
LABEL_149:
            *(_DWORD *)(v39 + 172) = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v129);
LABEL_150:
            v38 = (uint64_t *)(a1 + 256);
            goto LABEL_151;
          }
          if (BYTE4(v129) != 11)
            goto LABEL_149;
          v118 = (void *)*(unsigned int *)(v89 + 48);
          LODWORD(v129) = *(_DWORD *)(v89 + 48);
          WebCore::Length::ref((int *)&v129);
          *(_DWORD *)(v39 + 172) = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v129);
LABEL_218:
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v118);
          goto LABEL_150;
        }
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 16) + 20) & 2) == 0)
      {
        goto LABEL_144;
      }
      v94 = *(_QWORD *)(*(_QWORD *)(v39 + 88) + 24);
      v134 = 0;
      v137 = 0;
      v135 = *(_BYTE *)(v94 + 44);
      v136 = *(_BYTE *)(v94 + 45);
      if (v135 - 2 >= 9)
      {
        if (v135 == 11)
        {
          v119 = (void *)*(unsigned int *)(v94 + 40);
          v134 = *(_DWORD *)(v94 + 40);
          WebCore::Length::ref(&v134);
          v120 = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v134);
          *(_DWORD *)(v39 + 168) = v120;
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v119);
LABEL_161:
          v95 = *(_QWORD *)(*(_QWORD *)(v39 + 88) + 24);
          v130 = 0;
          v133 = 0;
          v131 = *(_BYTE *)(v95 + 60);
          v132 = *(_BYTE *)(v95 + 61);
          if (v131 - 2 >= 9)
          {
            if (v131 == 11)
            {
              v118 = (void *)*(unsigned int *)(v95 + 56);
              v130 = *(_DWORD *)(v95 + 56);
              WebCore::Length::ref(&v130);
              *(_DWORD *)(v39 + 176) = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v130);
              goto LABEL_218;
            }
          }
          else
          {
            v133 = *(_BYTE *)(v95 + 62);
            v130 = *(_DWORD *)(v95 + 56);
          }
          *(_DWORD *)(v39 + 176) = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v130);
          goto LABEL_150;
        }
      }
      else
      {
        v137 = *(_BYTE *)(v94 + 46);
        v134 = *(_DWORD *)(v94 + 40);
      }
      *(_DWORD *)(v39 + 168) = WebCore::RenderFlexibleBox::computeChildMarginValue((_DWORD *)a1, (unsigned __int8 *)&v134);
      goto LABEL_161;
    }
LABEL_151:
    v90 = *(unsigned int *)(v39 + 47);
    if (!(v90 | ((unint64_t)*(unsigned __int8 *)(v39 + 51) << 32)))
      break;
    v39 = *(_QWORD *)((v90 | ((unint64_t)*(unsigned __int8 *)(v39 + 51) << 32)) + 8);
    if (!v39)
      break;
  }
  while ((*(_BYTE *)(v39 + 45) & 4) != 0);
  v40 = *v123;
LABEL_49:
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 272) = v40;
  *(_BYTE *)(a1 + 280) = 1;
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)a1 + 1760))(a1, v128);
  v124 = (WTF *)v126;
  v125 = 8;
  v41 = WebCore::OrderIterator::first((WebCore::OrderIterator *)(a1 + 232));
  v42 = (_QWORD *)(a1 + 256);
  if (v41)
  {
LABEL_50:
    if ((*(_DWORD *)(v41 + 20) & 0x1800000) != 0x1000000)
    {
      v129 = *(_OWORD *)(v41 + 152);
      v43 = HIDWORD(v125);
      if (HIDWORD(v125) == (_DWORD)v125)
      {
        v107 = (__int128 *)WTF::Vector<WebCore::LayoutRect,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, (void *)(HIDWORD(v125) + 1), (unint64_t)&v129);
        v42 = (_QWORD *)(a1 + 256);
        v44 = v124;
        v43 = HIDWORD(v125);
        v45 = *v107;
      }
      else
      {
        v44 = v124;
        v45 = v129;
      }
      *((_OWORD *)v44 + v43) = v45;
      ++HIDWORD(v125);
    }
    v41 = *(_QWORD *)(a1 + 240);
    while (v41)
    {
      if (*(_BYTE *)(a1 + 281))
      {
        v46 = *(unsigned __int8 *)(v41 + 44);
        v47 = *(unsigned int *)(v41 + 40);
      }
      else
      {
        v46 = *(unsigned __int8 *)(v41 + 51);
        v47 = *(unsigned int *)(v41 + 47);
      }
      v48 = v47 | (v46 << 32);
      if (!v48)
        goto LABEL_62;
LABEL_60:
      v41 = *(_QWORD *)(v48 + 8);
      if (!v41 || (*(_BYTE *)(v41 + 45) & 4) == 0)
        goto LABEL_62;
      *(_QWORD *)(a1 + 240) = v41;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 32) + 144) == *(_DWORD *)(*(_QWORD *)(a1 + 272) + 28))
        goto LABEL_50;
LABEL_56:
      ;
    }
    v49 = *(_QWORD **)(a1 + 272);
    if (v49 != v42)
    {
      if (*(_BYTE *)(a1 + 280))
      {
        *(_BYTE *)(a1 + 280) = 0;
LABEL_66:
        v50 = *(_QWORD *)(a1 + 232);
        if (*(_BYTE *)(a1 + 281))
        {
          v51 = *(unsigned __int8 *)(v50 + 75);
          v52 = *(unsigned int *)(v50 + 71);
        }
        else
        {
          v51 = *(unsigned __int8 *)(v50 + 68);
          v52 = *(unsigned int *)(v50 + 64);
        }
        v48 = v52 | (v51 << 32);
        if (v48)
          goto LABEL_60;
LABEL_62:
        v41 = 0;
        *(_QWORD *)(a1 + 240) = 0;
        goto LABEL_56;
      }
      v53 = (_QWORD *)v49[1];
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (_QWORD *)v49[2];
          v87 = *v54 == (_QWORD)v49;
          v49 = v54;
        }
        while (!v87);
      }
      *(_QWORD *)(a1 + 272) = v54;
      if (v54 != v42)
        goto LABEL_66;
    }
  }
  WebCore::RenderFlexibleBox::layoutFlexItems((WebCore::RenderFlexibleBox *)a1, (const WebCore::RenderFlexibleBox *)v128);
  WebCore::RenderBlock::endAndCommitUpdateScrollInfoAfterLayoutTransaction((WTF **)a1, v55);
  v56 = (_DWORD *)(a1 + 160);
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
    v56 = (_DWORD *)(a1 + 164);
  if (*v56 != (_DWORD)v15)
    v128 = 1;
  WebCore::RenderBlock::layoutPositionedObjects(a1);
  v57 = WebCore::OrderIterator::first((WebCore::OrderIterator *)(a1 + 232));
  v59 = (_QWORD *)(a1 + 256);
  if (v57)
  {
    v60 = 0;
LABEL_84:
    v61 = *(_DWORD *)(v57 + 20);
    if ((v61 & 0x1800000) != 0x1000000)
    {
      if ((v61 & 0x200) != 0 && (*(_DWORD *)(a1 + 20) & 8) == 0)
      {
        if ((v61 & 0x8000) == 0)
          goto LABEL_247;
        if ((*(_BYTE *)(v57 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1941C955CLL);
        }
        v104 = *(_QWORD *)(v57 + 144);
        if (!v104 || (*(_BYTE *)(v104 + 25) & 8) == 0)
        {
LABEL_247:
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 24)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8)
                                                             + 528)
                                                 + 8)
                                     + 288)
                         + 476))
          {
            if (v60 >= HIDWORD(v125))
            {
              __break(0xC471u);
              JUMPOUT(0x1941C9638);
            }
            WebCore::RenderBox::repaintDuringLayoutIfMoved(v57, (WTF *)((char *)v124 + 16 * v60));
            v59 = (_QWORD *)(a1 + 256);
          }
        }
      }
      ++v60;
    }
    v57 = *(_QWORD *)(a1 + 240);
    while (v57)
    {
      if (*(_BYTE *)(a1 + 281))
      {
        v62 = *(unsigned __int8 *)(v57 + 44);
        v63 = *(unsigned int *)(v57 + 40);
      }
      else
      {
        v62 = *(unsigned __int8 *)(v57 + 51);
        v63 = *(unsigned int *)(v57 + 47);
      }
      v64 = v63 | (v62 << 32);
      if (!v64)
        goto LABEL_96;
LABEL_94:
      v57 = *(_QWORD *)(v64 + 8);
      if (!v57 || (*(_BYTE *)(v57 + 45) & 4) == 0)
        goto LABEL_96;
      *(_QWORD *)(a1 + 240) = v57;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 88) + 32) + 144) == *(_DWORD *)(*(_QWORD *)(a1 + 272) + 28))
        goto LABEL_84;
LABEL_90:
      ;
    }
    v65 = *(_QWORD **)(a1 + 272);
    if (v65 != v59)
    {
      if (*(_BYTE *)(a1 + 280))
      {
        *(_BYTE *)(a1 + 280) = 0;
LABEL_100:
        v66 = *(_QWORD *)(a1 + 232);
        if (*(_BYTE *)(a1 + 281))
        {
          v67 = *(unsigned __int8 *)(v66 + 75);
          v68 = *(unsigned int *)(v66 + 71);
        }
        else
        {
          v67 = *(unsigned __int8 *)(v66 + 68);
          v68 = *(unsigned int *)(v66 + 64);
        }
        v64 = v68 | (v67 << 32);
        if (v64)
          goto LABEL_94;
LABEL_96:
        v57 = 0;
        *(_QWORD *)(a1 + 240) = 0;
        goto LABEL_90;
      }
      v69 = (_QWORD *)v65[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v65[2];
          v87 = *v70 == (_QWORD)v65;
          v65 = v70;
        }
        while (!v87);
      }
      *(_QWORD *)(a1 + 272) = v70;
      if (v70 != v59)
        goto LABEL_100;
    }
  }
  v71 = WebCore::RenderBlock::layoutOverflowLogicalBottom((WebCore::RenderBlock *)a1, v58);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1752))(a1, v71, 0);
  WebCore::RenderBlock::updateDescendantTransformsAfterLayout((WebCore::RenderBlock *)a1);
  v73 = v124;
  if (v126 != (_BYTE *)v124 && v124)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree(v73, v72);
  }
  if (v36)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState(v34, v72);
    if (v32)
      --*(_DWORD *)(v33 + 492);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
  *(_BYTE *)(a1 + 392) = 2;
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    v102 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v102 > 5 || ((1 << v102) & 0x2A) == 0)
      && (v103 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 528)) != 0
      && *v103)
    {
      WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v103 + 2), (_QWORD *)a1, (uint64_t)&v124);
    }
    else
    {
      v105 = *(_QWORD *)(a1 + 144);
      if (v105)
      {
        WebCore::RenderLayer::updateLayerScrollableArea(*(WebCore::RenderLayer **)(a1 + 144));
        v106 = *(WebCore::RenderLayerScrollableArea **)(v105 + 264);
        if (v106)
          WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v106);
      }
    }
  }
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v127);
  v74 = *(_DWORD *)(a1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(a1 + 20) = v74;
  if ((*(_BYTE *)(a1 + 45) & 2) == 0)
  {
    *(_WORD *)(a1 + 69) &= ~1u;
    *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(a1 + 20) = v74 & 0xFFDFFE07;
  *(_BYTE *)(a1 + 393) = v8;
  return result;
}

uint64_t WebCore::RenderBlock::simplifiedLayout(WebCore::RenderBlock *this)
{
  uint64_t v2;
  int v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;
  WebCore::WillChangeData *v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  char v19;
  WebCore::RenderBlock *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int i;
  uint64_t v29;
  uint64_t v30;
  WebCore::Element *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int j;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)();
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  BOOL v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t v64;
  WebCore::RenderLayerScrollableArea *v65;
  int v66;
  int v67;
  unsigned int v69;
  int v70;
  char v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77[6];

  if (!(*(unsigned int (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1736))(this))
    return 0;
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x20000) != 0)
  {
    v20 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v20 = *(WebCore::RenderBlock **)(*((_QWORD *)this + 4) + 8);
    v21 = *((_QWORD *)v20 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 40) + 20))
      goto LABEL_33;
    v22 = *(_QWORD **)(v21 + 40);
    if (v22[41] || v22[38] || v22[39] || v22[40] || (v4 & 0x100000) != 0)
      goto LABEL_33;
  }
  if ((v4 & 0x4000) == 0)
    goto LABEL_6;
  v23 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
  v24 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  v27 = v23 & ((v26 >> 31) ^ v26);
  for (i = 1; ; v27 = (v29 + i++) & v23)
  {
    v29 = v27;
    v30 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v27);
    if (v30 != -1 && *(WebCore::RenderBlock **)(v30 + 8) == this)
      break;
  }
  if (**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v29 + 8))
  {
LABEL_33:
    v6 = 1;
  }
  else
  {
LABEL_6:
    v5 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v76 = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_8;
      case 3:
      case 5:
        v5 = 3;
        goto LABEL_8;
      case 4:
        goto LABEL_9;
      default:
        v5 = 0;
LABEL_8:
        v76 = v5;
LABEL_9:
        v6 = (v76 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  *(_QWORD *)v77 = *((_QWORD *)this + 19);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v8 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v7 + 336, this, v77, 0, 0);
  v10 = v8;
  if (v6 && v8)
    ++*(_DWORD *)(v7 + 492);
  if ((*((_BYTE *)this + 20) & 0x10) == 0)
  {
LABEL_14:
    v11 = *((unsigned __int8 *)this + 46);
    if (v11 == 49
      || ((*((_BYTE *)this + 45) & 0x40) != 0 || (v11 - 36) <= 4 && v11 != 38)
      && (*((_BYTE *)this + 22) & 2) != 0)
    {
      goto LABEL_50;
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
    if (*(_DWORD *)(*(_QWORD *)(v12 + 72) + 20))
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8))
        goto LABEL_50;
    }
    if ((*((_BYTE *)this + 45) & 0x40) != 0)
    {
      v13 = *(WebCore::WillChangeData **)(v12 + 200);
      if (v13)
      {
        if ((WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned(v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) != 0)
        {
LABEL_50:
          v14 = 1;
          goto LABEL_51;
        }
        v11 = *((unsigned __int8 *)this + 46);
      }
    }
    v14 = 1;
    if (v11 != 67 && v11 != 90)
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
      v16 = *(_BYTE *)(v15 + 462);
      v17 = *(_BYTE *)(v15 + 642) & 3;
      v18 = v16 | 0x19;
      if (v17 == 1)
        v16 |= 0x15u;
      if (v17 == 2)
        v19 = v18;
      else
        v19 = v16;
      if ((v19 & 3) == 0
        || (*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this)
        || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19
        || *((unsigned __int8 *)this + 46) - 36 <= 4 && (*((_BYTE *)this + 52) & 7) != 1)
      {
        v14 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) & 0xC0000) != 0
           && ((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
           && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19
           && ((v67 = *((unsigned __int8 *)this + 46), (v67 - 36) > 4) || v67 == 36)
           && v67 != 35
           && v67 != 63;
      }
    }
LABEL_51:
    if ((*((_BYTE *)this + 45) & 1) != 0)
    {
      v31 = 0;
    }
    else
    {
      v31 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
      if (v31 && (*((_WORD *)v31 + 14) & 8) == 0)
        goto LABEL_164;
    }
    v32 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) >> 18) & 3;
    if (v32
      && ((v71 = *((_BYTE *)this + 96), (v71 & 0x1F) == 0xD) || (v71 & 0x1Eu) - 14 <= 0xFFFFFFF5)
      && (v32 == 2 || v31 && !WebCore::Element::isRelevantToUser(v31)))
    {
      v33 = *((_DWORD *)this + 5);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479)
        && ((v14 | ((*((_DWORD *)this + 5) & 0x40u) >> 6)) & 1) != 0)
      {
        goto LABEL_144;
      }
    }
    else
    {
      v33 = *((_DWORD *)this + 5);
    }
    if ((v33 & 0x80) != 0)
      (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1744))(this);
    if ((*((_BYTE *)this + 52) & 7) != 1 || (*((_BYTE *)this + 53) & 2) == 0)
    {
LABEL_60:
      if ((((*((_DWORD *)this + 5) & 0x40) == 0) & ~v14) == 0)
      {
        {
          v34 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
        }
        else
        {
          WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
          unk_1ECE91358 = 0u;
          v34 = 1;
        }
        DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v34;
        v35 = *((_QWORD *)this + 1);
        if (v35)
        {
          if (*(_QWORD *)(v35 + 8) && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
          {
            v36 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
            v37 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
            v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
            v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
            v40 = v36 & ((v39 >> 31) ^ v39);
            for (j = 1; ; ++j)
            {
              v42 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v40);
              if (!v42)
                break;
              if (v42 != -1 && v42 == v35)
              {
                v44 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v40 + 8);
                if (v44)
                {
                  v45 = *(_QWORD **)(v44 + 8);
                  if (v45)
                  {
                    while (!*(_QWORD *)(*v45 + 8))
                    {
                      v45 = (_QWORD *)v45[2];
                      if (!v45)
                        goto LABEL_81;
                    }
LABEL_76:
                    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1720))(this);
                    while (1)
                    {
                      v45 = (_QWORD *)v45[2];
                      if (!v45)
                        break;
                      if (*(_QWORD *)(*v45 + 8))
                      {
                        ++*(_DWORD *)(v44 + 24);
                        goto LABEL_76;
                      }
                    }
                    ++*(_DWORD *)(v44 + 24);
                  }
                }
                break;
              }
              v40 = (v40 + j) & v36;
            }
          }
        }
      }
LABEL_81:
      v46 = *((_QWORD *)this + 24);
      v47 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
      if (!v46)
        v47 = 0;
      if (v47)
      {
        v60 = *(_DWORD *)(v46 + 36);
      }
      else
      {
        v48 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1048))(this);
        v49 = *(_QWORD *)this;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        {
          v72 = *((_DWORD *)this + 40);
          v73 = (*(uint64_t (**)(WebCore::RenderBlock *))(v49 + 1016))(this);
          if (__OFSUB__(v72, v73))
            v74 = (v72 >> 31) + 0x7FFFFFFF;
          else
            v74 = v72 - v73;
          v75 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1024))(this);
          if (__OFSUB__(v74, v75))
            v54 = (v74 >> 31) + 0x7FFFFFFF;
          else
            v54 = v74 - v75;
          v55 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1352))(this);
        }
        else
        {
          v50 = *((_DWORD *)this + 41);
          v51 = (*(uint64_t (**)(WebCore::RenderBlock *))(v49 + 1000))(this);
          if (__OFSUB__(v50, v51))
            v52 = (v50 >> 31) + 0x7FFFFFFF;
          else
            v52 = v50 - v51;
          v53 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1008))(this);
          if (__OFSUB__(v52, v53))
            v54 = (v52 >> 31) + 0x7FFFFFFF;
          else
            v54 = v52 - v53;
          v55 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1360))(this);
        }
        v56 = v55 << 6;
        if (v55 < -33554432)
          v56 = 0x80000000;
        if (v55 > 0x1FFFFFF)
          v56 = 0x7FFFFFFF;
        v57 = __OFSUB__(v54, v56);
        v58 = v54 - v56;
        if (v57)
          v58 = (v54 >> 31) + 0x7FFFFFFF;
        v59 = v58 & ~(v58 >> 31);
        v57 = __OFADD__(v48, v59);
        v60 = v48 + v59;
        if (v57)
          v60 = (v48 >> 31) + 0x7FFFFFFF;
      }
      (*(void (**)(WebCore::RenderBlock *, _QWORD, uint64_t))(*(_QWORD *)this + 1752))(this, v60, 1);
      (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 856))(this);
      if ((*((_BYTE *)this + 22) & 1) != 0)
      {
        v62 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        if ((v62 > 5 || ((1 << v62) & 0x2A) == 0)
          && (v63 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 1944)
                                           + 248)
                               + 528)) != 0
          && *v63)
        {
          WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>((uint64_t)(v63 + 2), this, (uint64_t)v77);
        }
        else
        {
          v64 = *((_QWORD *)this + 18);
          if (v64)
          {
            WebCore::RenderLayer::updateLayerScrollableArea(*((WebCore::RenderLayer **)this + 18));
            v65 = *(WebCore::RenderLayerScrollableArea **)(v64 + 264);
            if (v65)
              WebCore::RenderLayerScrollableArea::updateScrollInfoAfterLayout(v65);
          }
        }
      }
      v61 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
      *((_DWORD *)this + 5) = v61;
      if ((*((_BYTE *)this + 45) & 2) == 0)
      {
        *(_WORD *)((char *)this + 69) &= ~1u;
        *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                             * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                                + 1944)
                                                                                    + 248)
                                                                        + 472));
      }
      *((_DWORD *)this + 5) = v61 & 0xFFDFFE07;
      v2 = 1;
      goto LABEL_105;
    }
    ++*((_DWORD *)this + 4);
    v69 = WebCore::RenderBox::clientLogicalBottom(this);
    (*(void (**)(WebCore::RenderBlock *, _QWORD))(*(_QWORD *)this + 2032))(this, v69);
    v70 = *((_DWORD *)this + 4);
    if (v70)
    {
      *((_DWORD *)this + 4) = v70 - 1;
      goto LABEL_60;
    }
LABEL_164:
    __break(0xC471u);
    JUMPOUT(0x1941C9CD8);
  }
  v66 = *((_DWORD *)this + 40);
  (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1304))(this);
  if (v66 == *((_DWORD *)this + 40))
  {
    WebCore::RenderBox::updateLogicalHeight(this);
    goto LABEL_14;
  }
LABEL_144:
  v2 = 0;
LABEL_105:
  if (v10)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState(v7 + 336, v9);
    if (v6)
      --*(_DWORD *)(v7 + 492);
  }
  return v2;
}

uint64_t WebCore::RenderBlock::canPerformSimplifiedLayout(WebCore::RenderBlock *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x128) != 0 || (v1 & 0x200) != 0 && (v1 & 0x200000) != 0)
    return 0;
  if ((v1 & 0x40) != 0)
    return 1;
  return (v1 >> 7) & 1;
}

uint64_t WebCore::RenderBlock::layoutPositionedObjects(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  v1 = this;
  {
    v2 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
  }
  else
  {
    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
    unk_1ECE91358 = 0u;
    v2 = 1;
  }
  DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v2;
  v3 = *(_QWORD *)(this + 8);
  if (v3 && *(_QWORD *)(v3 + 8) && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
  {
    v4 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
    v5 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v8);
      if (!v10)
        break;
      if (v10 != -1 && v10 == v3)
      {
        v12 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v8 + 8);
        if (v12)
        {
          v13 = *(_QWORD **)(v12 + 8);
          if (v13)
          {
            while (!*(_QWORD *)(*v13 + 8))
            {
              v13 = (_QWORD *)v13[2];
              if (!v13)
                return this;
            }
LABEL_16:
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1720))(v1);
            while (1)
            {
              v13 = (_QWORD *)v13[2];
              if (!v13)
                break;
              if (*(_QWORD *)(*v13 + 8))
              {
                ++*(_DWORD *)(v12 + 24);
                goto LABEL_16;
              }
            }
            ++*(_DWORD *)(v12 + 24);
          }
        }
        return this;
      }
      v8 = (v8 + i) & v4;
    }
  }
  return this;
}

WTF *WebCore::RenderBlock::updateDescendantTransformsAfterLayout(WebCore::RenderBlock *this)
{
  void *v1;
  WTF *result;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  unsigned int v11;

  WebCore::LocalFrameViewLayoutContext::takeBoxesNeedingTransformUpdateAfterContainerLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)+ 248)+ 336, this, &v10);
  result = v10;
  if (v11)
  {
    v3 = 8 * v11;
    v4 = v3;
    v9 = v10;
    v5 = v10;
    do
    {
      if (*(_QWORD *)v5)
      {
        v6 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (v6)
        {
          if ((*(_BYTE *)(v6 + 21) & 0x80) != 0)
            WebCore::RenderLayer::updateTransform(*(WebCore::RenderLayer **)(v6 + 144), v1);
        }
      }
      v5 = (WTF *)((char *)v5 + 8);
      v4 -= 8;
    }
    while (v4);
    v7 = (WTF **)v9;
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, v1);
        else
          --*(_DWORD *)v8;
      }
      ++v7;
      v3 -= 8;
      result = v9;
    }
    while (v3);
  }
  if (result)
    return (WTF *)WTF::fastFree(result, v1);
  return result;
}

uint64_t WebCore::RenderBlockFlow::layoutExcludedChildren(WebCore::RenderBlockFlow *this, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t MultiColumnSet;
  WebCore::RenderMultiColumnSet *v13;
  void *v14;

  result = WebCore::RenderBlock::layoutExcludedChildren((uint64_t)this, a2);
  v5 = *((_QWORD *)this + 28);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        *(_DWORD *)(v7 + 20) |= 0x400u;
        v8 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1048))(this);
        v9 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 960))(this);
        v10 = v8 + v9;
        if (__OFADD__(v8, v9))
          v10 = (v8 >> 31) + 0x7FFFFFFF;
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
          *(_DWORD *)(v7 + 152) = v10;
        else
          *(_DWORD *)(v7 + 156) = v10;
        v11 = *(_DWORD *)(v7 + 20);
        if (a2 && (v11 & 0x20) == 0)
        {
          v11 |= 0x20u;
          *(_DWORD *)(v7 + 20) = v11;
        }
        if ((v11 & 0xF8) != 0)
        {
          MultiColumnSet = WebCore::RenderMultiColumnFlow::firstMultiColumnSet((WebCore::RenderMultiColumnFlow *)v7);
          if (MultiColumnSet)
          {
            v13 = (WebCore::RenderMultiColumnSet *)MultiColumnSet;
            do
            {
              WebCore::RenderMultiColumnSet::prepareForLayout(v13, *(_BYTE *)(v7 + 365) == 0);
              v13 = (WebCore::RenderMultiColumnSet *)WebCore::RenderMultiColumnFlow::firstMultiColumnSet(v13);
            }
            while (v13);
          }
          WebCore::RenderFragmentedFlow::invalidateFragments((WebCore::RenderObject *)v7, 0);
          *(_BYTE *)(v7 + 366) = 1;
          WebCore::RenderMultiColumnFlow::layout((WebCore::RenderMultiColumnFlow *)v7, v14);
        }
        else
        {
          *(_BYTE *)(v7 + 366) = 0;
        }
        return WebCore::RenderBlockFlow::determineLogicalLeftPositionForChild((uint64_t)this, v7, 1);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBlock::layoutExcludedChildren(uint64_t this, char a2)
{
  uint64_t v2;
  WebCore::RenderObject *v4;
  WebCore::RenderObject *v5;
  WebCore::RenderObject *v6;
  int v7;
  _DWORD *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  int *v38;
  int v39;
  unsigned int v40;
  int *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  int *v54;
  _DWORD *v55;
  uint64_t v56;
  WebCore::RenderObject *v57;
  _DWORD *v58;

  if ((*(_BYTE *)(this + 45) & 1) != 0)
    return this;
  v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
  if (!v2)
    return this;
  if ((*(_WORD *)(v2 + 28) & 0x10) == 0)
    return this;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    return this;
  v55 = (_DWORD *)this;
  WebCore::RenderBlock::setIntrinsicBorderForFieldset(this, 0);
  this = WebCore::RenderBlock::findFieldsetLegend((uint64_t)v55, 0);
  if (!this)
    return this;
  v4 = (WebCore::RenderObject *)this;
  *(_DWORD *)(this + 20) |= 0x400u;
  v58 = v55;
  v56 = WebCore::RenderChildIteratorAdapter<WebCore::RenderBox>::begin((uint64_t *)&v58);
  v57 = v5;
  if (v5)
  {
    v6 = v5;
    do
    {
      if (v6 != v4 && WebCore::RenderObject::isLegend(v6))
        *((_DWORD *)v6 + 5) &= ~0x400u;
      WebCore::RenderChildIterator<WebCore::RenderBox>::operator++((uint64_t)&v56);
      v6 = v57;
    }
    while (v57);
  }
  if ((a2 & 1) != 0)
  {
    v7 = *((_DWORD *)v4 + 5);
    if ((v7 & 0x20) == 0)
      *((_DWORD *)v4 + 5) = v7 | 0x20;
  }
  WebCore::RenderElement::layoutIfNeeded((uint64_t)v4);
  v8 = v55 + 20;
  v9 = (*((_DWORD *)v4 + 30) >> 6) & 0xF;
  if ((*((_BYTE *)v55 + 123) & 4) == 0)
  {
    if (v9 != 1)
    {
      if (v9 == 2)
      {
        if (((v55[31] >> 13) & 6u) - 2 < 4)
          v10 = v55 + 41;
        else
          v10 = v55 + 40;
        v11 = *v10;
        if ((*((_BYTE *)v55 + 21) & 0x10) != 0)
          v12 = (int *)((char *)v4 + 164);
        else
          v12 = (int *)((char *)v4 + 160);
        v13 = *v12;
        v48 = __OFSUB__(v11, v13);
        v14 = v11 - v13;
        if (v48)
          v14 = (v11 >> 31) + 0x7FFFFFFF;
        v15 = v14 / 2;
      }
      else
      {
        v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 1064))(v55);
        v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 976))(v55);
        v31 = v29 + v30;
        if (__OFADD__(v29, v30))
          v31 = (v29 >> 31) + 0x7FFFFFFF;
        v32 = (*(uint64_t (**)(WebCore::RenderObject *, _DWORD *))(*(_QWORD *)v4 + 1128))(v4, v8);
        v15 = v31 + v32;
        if (__OFADD__(v31, v32))
          v15 = (v31 >> 31) + 0x7FFFFFFF;
      }
      goto LABEL_68;
    }
    if (((v55[31] >> 13) & 6u) - 2 < 4)
      v18 = v55 + 41;
    else
      v18 = v55 + 40;
    v19 = *v18;
    v20 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 1072))(v55);
    v21 = v19 - v20;
    if (__OFSUB__(v19, v20))
      v21 = (v19 >> 31) + 0x7FFFFFFF;
    v22 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 984))(v55);
    goto LABEL_62;
  }
  if (v9 != 2)
  {
    if (!v9)
    {
      v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 1064))(v55);
      v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 976))(v55);
      v15 = v16 + v17;
      if (__OFADD__(v16, v17))
        v15 = (v16 >> 31) + 0x7FFFFFFF;
      goto LABEL_68;
    }
    if (((v55[31] >> 13) & 6u) - 2 < 4)
      v33 = v55 + 41;
    else
      v33 = v55 + 40;
    v34 = *v33;
    v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 1064))(v55);
    v36 = v34 - v35;
    if (__OFSUB__(v34, v35))
      v36 = (v34 >> 31) + 0x7FFFFFFF;
    v37 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 976))(v55);
    v21 = v36 - v37;
    if (__OFSUB__(v36, v37))
      v21 = (v36 >> 31) + 0x7FFFFFFF;
    v22 = (*(uint64_t (**)(WebCore::RenderObject *, _DWORD *))(*(_QWORD *)v4 + 1128))(v4, v8);
LABEL_62:
    v27 = v21 - v22;
    if (__OFSUB__(v21, v22))
      v27 = (v21 >> 31) + 0x7FFFFFFF;
    if ((*((_BYTE *)v55 + 21) & 0x10) != 0)
      v38 = (int *)((char *)v4 + 164);
    else
      v38 = (int *)((char *)v4 + 160);
    v39 = *v38;
    v48 = __OFSUB__(v27, v39);
    v15 = v27 - v39;
    if (!v48)
      goto LABEL_68;
    goto LABEL_99;
  }
  if (((v55[31] >> 13) & 6u) - 2 < 4)
    v23 = v55 + 41;
  else
    v23 = v55 + 40;
  v24 = *v23;
  if ((*((_BYTE *)v55 + 21) & 0x10) != 0)
    v25 = (int *)((char *)v4 + 164);
  else
    v25 = (int *)((char *)v4 + 160);
  v26 = *v25;
  v48 = __OFSUB__(v24, v26);
  v27 = v24 - v26;
  if (v48)
    v27 = (v24 >> 31) + 0x7FFFFFFF;
  if (v27 >= 0)
    v28 = v27;
  else
    v28 = v27 + 1;
  v48 = __OFSUB__(v27, v28 >> 1);
  v15 = v27 - (v28 >> 1);
  if (!v48)
    goto LABEL_68;
LABEL_99:
  v15 = (v27 >> 31) + 0x7FFFFFFF;
LABEL_68:
  if ((*((_BYTE *)v55 + 21) & 0x10) != 0)
    *((_DWORD *)v4 + 39) = v15;
  else
    *((_DWORD *)v4 + 38) = v15;
  v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 1048))(v55);
  if ((*((_BYTE *)v55 + 21) & 0x10) != 0)
    v41 = (int *)((char *)v4 + 160);
  else
    v41 = (int *)((char *)v4 + 164);
  v42 = *v41;
  v43 = (*(uint64_t (**)(WebCore::RenderObject *, _DWORD *))(*(_QWORD *)v4 + 1120))(v4, v8);
  v44 = v40 - v42;
  if (__OFSUB__(v40, v42))
    v44 = (v40 >> 31) + 0x7FFFFFFF;
  v45 = (v44 / 2) & ~((v44 + (v44 < 0)) >> 31);
  v46 = v45 + v42;
  if (__OFADD__(v45, v42))
    v46 = 0x7FFFFFFF;
  v47 = (v46 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v46, v43))
    v47 = v46 + v43;
  if ((*((_BYTE *)v55 + 21) & 0x10) != 0)
    *((_DWORD *)v4 + 38) = v45;
  else
    *((_DWORD *)v4 + 39) = v45;
  v48 = __OFSUB__(v47, v40);
  v49 = v47 - v40;
  if (v47 > (int)v40)
  {
    v50 = (v47 >> 31) + 0x7FFFFFFF;
    if (v48)
      v51 = v50;
    else
      v51 = v49;
    WebCore::RenderBlock::setIntrinsicBorderForFieldset((uint64_t)v55, (void *)v51);
  }
  v52 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 1048))(v55);
  this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 960))(v55);
  v53 = v52 + this;
  if (__OFADD__(v52, (_DWORD)this))
    v53 = (v52 >> 31) + 0x7FFFFFFF;
  if (((v55[31] >> 13) & 6u) - 2 < 4)
    v54 = v55 + 40;
  else
    v54 = v55 + 41;
  *v54 = v53;
  return this;
}

uint64_t WTF::WeakHashMap<WebCore::RenderBlock,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t *v18;

  v2 = *a1;
  if (!*a1)
    goto LABEL_2;
  v18 = a1;
  v6 = *a1;
  v7 = *(_DWORD *)(v2 - 4);
  if (!v7)
  {
    v17 = 0;
    goto LABEL_27;
  }
  v8 = 0;
  v9 = v7 - 1;
  do
  {
    v10 = v9;
    v11 = v6 + 24 * v9;
    if ((unint64_t)(*(_QWORD *)v11 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v11 + 8))
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v11, a2);
      ++v8;
    }
    --v9;
  }
  while (v10);
  v6 = *v18;
  v17 = v8 != 0;
  if (v8)
  {
    *(_DWORD *)(v6 - 16) += v8;
    v12 = *v18;
    if (*v18)
      v13 = *(_DWORD *)(v12 - 12);
    else
      v13 = 0;
    *(_DWORD *)(v12 - 12) = v13 - v8;
    v6 = *v18;
  }
  if (v6)
  {
    v14 = *(_DWORD *)(v6 - 4);
    if (v14 >= 9 && 6 * *(_DWORD *)(v6 - 12) < v14)
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(v18);
      v16 = *v18;
      *((_DWORD *)v18 + 2) = 0;
      if (!v16)
      {
        v3 = 0;
        a1 = v18;
        v2 = v8 != 0;
        goto LABEL_3;
      }
      v6 = v16;
LABEL_23:
      v3 = *(_DWORD *)(v6 - 12);
      v4 = 0x7FFFFFFF;
      a1 = v18;
      v2 = v17;
      if (v3 >= 0x7FFFFFFF)
        goto LABEL_4;
      goto LABEL_3;
    }
LABEL_27:
    *((_DWORD *)v18 + 2) = 0;
    goto LABEL_23;
  }
  a1 = v18;
  v2 = v8 != 0;
LABEL_2:
  v3 = 0;
  *((_DWORD *)a1 + 2) = 0;
LABEL_3:
  v4 = v3;
LABEL_4:
  *((_DWORD *)a1 + 3) = 2 * v4;
  return v2;
}

uint64_t WebCore::RenderFlexibleBox::computeChildMarginValue(_DWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  float v23;
  double v24;
  int v27;
  float v28;
  uint64_t (*v29)(_DWORD *);
  _DWORD *v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;

  v4 = *(_QWORD *)a1;
  if (((a1[31] >> 13) & 6u) - 2 < 4)
  {
    v34 = a1[41];
    v35 = (*(uint64_t (**)(_DWORD *))(v4 + 1000))(a1);
    if (__OFSUB__(v34, v35))
      v36 = (v34 >> 31) + 0x7FFFFFFF;
    else
      v36 = v34 - v35;
    v37 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1008))(a1);
    if (__OFSUB__(v36, v37))
      v38 = (v36 >> 31) + 0x7FFFFFFF;
    else
      v38 = v36 - v37;
    v39 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1360))(a1);
    v40 = v39 << 6;
    if (v39 < -33554432)
      v40 = 0x80000000;
    if (v39 > 0x1FFFFFF)
      v40 = 0x7FFFFFFF;
    v12 = __OFSUB__(v38, v40);
    v41 = v38 - v40;
    if (v12)
      v41 = (v38 >> 31) + 0x7FFFFFFF;
    v42 = v41 & ~(v41 >> 31);
    v43 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 928))(a1);
    if (__OFSUB__(v42, v43))
      v44 = 0x7FFFFFFF;
    else
      v44 = v42 - v43;
    v45 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 936))(a1);
    if (__OFSUB__(v44, v45))
      v46 = (v44 >> 31) + 0x7FFFFFFF;
    else
      v46 = v44 - v45;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 584) & 0x100) != 0)
    {
      v48 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1360))(a1);
      v49 = v48 << 6;
      if (v48 > 0x1FFFFFF)
        v49 = 0x7FFFFFFF;
      if (v48 >= -33554432)
        v47 = v49;
      else
        v47 = 0x80000000;
    }
    else
    {
      v47 = 0;
    }
    v12 = __OFSUB__(v46, v47);
    v21 = v46 - v47;
    if (v12)
      v21 = (v46 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v5 = a1[40];
    v6 = (*(uint64_t (**)(_DWORD *))(v4 + 1016))(a1);
    if (__OFSUB__(v5, v6))
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v7 = v5 - v6;
    v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1024))(a1);
    if (__OFSUB__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v9 = v7 - v8;
    v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1352))(a1);
    v11 = v10 << 6;
    if (v10 < -33554432)
      v11 = 0x80000000;
    if (v10 > 0x1FFFFFF)
      v11 = 0x7FFFFFFF;
    v12 = __OFSUB__(v9, v11);
    v13 = v9 - v11;
    if (v12)
      v13 = (v9 >> 31) + 0x7FFFFFFF;
    v14 = v13 & ~(v13 >> 31);
    v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 944))(a1);
    if (__OFSUB__(v14, v15))
      v16 = 0x7FFFFFFF;
    else
      v16 = v14 - v15;
    v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 952))(a1);
    v18 = v16 - v17;
    if (__OFSUB__(v16, v17))
      v18 = (v16 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 40) + 584) & 0x100) != 0)
    {
      v29 = *(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 1352);
      v30 = a1;
      v31 = v18;
      v32 = v29(v30);
      v18 = v31;
      v33 = v32 << 6;
      if (v32 > 0x1FFFFFF)
        v33 = 0x7FFFFFFF;
      if (v32 >= -33554432)
        v19 = v33;
      else
        v19 = 0x80000000;
    }
    else
    {
      v19 = 0;
    }
    v12 = __OFSUB__(v18, v19);
    v20 = v18 - v19;
    v21 = (v18 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v21 = v20;
  }
  v22 = a2[4];
  if (v22 == 4)
  {
    v23 = *(float *)a2;
    if (!a2[6])
      v23 = (float)*(int *)a2;
  }
  else
  {
    v27 = v21 & ~(v21 >> 31);
    if (v22 == 3)
    {
      v28 = *(float *)a2;
      if (!a2[6])
        v28 = (float)*(int *)a2;
      v23 = (float)((float)((float)v27 * 0.015625) * v28) / 100.0;
    }
    else
    {
      if (v22 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a2, (float)v27 * 0.015625);
    }
  }
  v24 = v23 * 64.0;
  if (v24 < 2147483650.0 && v24 > -2147483650.0)
    return (int)v24;
  if (v24 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v24 > -2147483650.0)
    return (int)v24;
  return 0x80000000;
}

uint64_t std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy(uint64_t result, WTF *a2)
{
  uint64_t v3;
  void *v4;

  if (a2)
  {
    v3 = result;
    std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy(result, *(_QWORD *)a2);
    std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy(v3, *((_QWORD *)a2 + 1));
    return WTF::fastFree(a2, v4);
  }
  return result;
}

uint64_t WebCore::RenderBlock::layoutPositionedObject(WebCore::RenderBlock *this, WebCore::RenderBox *a2, int a3, int a4)
{
  uint64_t result;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  WebCore::RenderBlock *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BOOL4 v30;
  unsigned __int8 *v31;
  _BOOL4 v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  int v42;
  int v43;
  unsigned int v44;
  char *v45;
  unsigned int *v46;
  int v47;
  char *v48;
  WebCore::RenderBox *v49;
  int v50;
  WebCore::RenderBox *v51;
  int v52;
  int v54;
  int v55;
  int v56;
  int v57;
  void *v58;
  WebCore::RenderFragmentedFlow *v59;
  void *v60;
  WebCore::RenderFragmentedFlow *v61;
  int v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::RenderFragmentContainer *v68[3];
  WebCore::RenderFragmentContainer *v69;
  WebCore::RenderFragmentContainer *v70;
  WebCore::RenderFragmentContainer *v71;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (result && (*(_WORD *)(result + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941CB0F8);
    }
  }
  v7 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) >> 18) & 3;
  if (v7)
  {
    if ((*((_BYTE *)this + 96) & 0x1F) == 0xD || (*((_BYTE *)this + 96) & 0x1Eu) - 14 <= 0xFFFFFFF5)
    {
      if (v7 == 2
        || result
        && (v54 = a3,
            v55 = a4,
            result = WebCore::Element::isRelevantToUser((WebCore::Element *)result),
            a4 = v55,
            a3 = v54,
            (result & 1) == 0))
      {
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
          return WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
      }
    }
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v56 = a3;
    v57 = a4;
    result = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 648))(this);
    a4 = v57;
    a3 = v56;
    if (result)
    {
      v59 = (WebCore::RenderFragmentedFlow *)result;
      result = WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(result + 248), v58);
      a4 = v57;
      a3 = v56;
      if ((result & 1) == 0 && ((*((_BYTE *)a2 + 52) & 7) != 1 || (*((_BYTE *)a2 + 53) & 2) == 0))
      {
        result = WebCore::RenderFragmentedFlow::hasCachedFragmentRangeForBox(v59, this);
        a4 = v57;
        a3 = v56;
        if ((_DWORD)result)
        {
          if (WebCore::RenderBlock::childBoxIsUnsplittableForFragmentation(this, a2))
          {
            result = WebCore::RenderBlock::computeFragmentRangeForBoxChild(this, a2);
          }
          else
          {
            if ((*((_BYTE *)this + 21) & 0x10) != 0)
              v63 = (char *)a2 + 152;
            else
              v63 = (char *)a2 + 156;
            (*(void (**)(WebCore::RenderFragmentContainer **__return_ptr, WebCore::RenderBox *, uint64_t, _QWORD))(*(_QWORD *)a2 + 1312))(v68, a2, 0x3FFFFFFFLL, *(unsigned int *)v63);
            v64 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1288))(a2);
            v65 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, WebCore::RenderBlock *, _QWORD, uint64_t))(*(_QWORD *)v59 + 2000))(v59, this, v64, 1);
            if (__OFADD__(v64, v68[0]))
              v66 = (v64 >> 31) + 0x7FFFFFFF;
            else
              v66 = v64 + LODWORD(v68[0]);
            v67 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, WebCore::RenderBlock *, uint64_t, uint64_t))(*(_QWORD *)v59 + 2000))(v59, this, v66, 1);
            result = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v59 + 2016))(v59, a2, v65, v67);
          }
          a3 = v56;
          a4 = v57;
        }
      }
    }
  }
  if ((*((_QWORD *)a2 + 12) & 0x380000) == 0x300000)
  {
    v29 = *(_BYTE **)(*((_QWORD *)a2 + 11) + 24);
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      if (v29[36])
        v30 = 0;
      else
        v30 = v29[20] == 0;
      if (!v29[12])
      {
        v31 = v29 + 28;
        goto LABEL_63;
      }
    }
    else
    {
      if (v29[12])
        v30 = 0;
      else
        v30 = v29[28] == 0;
      if (!v29[36])
      {
        v31 = v29 + 20;
LABEL_63:
        v32 = *v31 == 0;
        goto LABEL_64;
      }
    }
    v32 = 0;
LABEL_64:
    if (v30 || v32)
    {
      for (i = *((_QWORD *)a2 + 4); i; i = *(_QWORD *)(v34 + 32))
      {
        v34 = *(_QWORD *)(i + 8);
        if (!v34)
          break;
        v35 = *(_QWORD *)(v34 + 96) & 0x380000;
        if (*(_BYTE *)(v34 + 46) == 49 || v35 == 0x100000)
        {
          if (v35 == 0x100000)
          {
            v39 = a4;
            v40 = a3;
            if (v32)
            {
              memset(v68, 0, sizeof(v68));
              result = WebCore::RenderBox::computeLogicalWidthInFragment(a2, (int *)v68, 0);
              v41 = (char *)a2 + 156;
              if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
                v41 = (char *)a2 + 152;
              if (HIDWORD(v68[0]) != *(_DWORD *)v41)
              {
                v42 = *((_DWORD *)a2 + 5);
                if ((v42 & 0x20) == 0)
                  *((_DWORD *)a2 + 5) = v42 | 0x20;
              }
              a3 = v40;
              a4 = v39;
            }
            else if (v30)
            {
              v49 = ((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4
                  ? (WebCore::RenderBox *)((char *)a2 + 156)
                  : (WebCore::RenderBox *)((char *)a2 + 152);
              v50 = *(_DWORD *)v49;
              result = (uint64_t)WebCore::RenderBox::updateLogicalHeight(a2);
              a4 = v39;
              a3 = v40;
              v51 = ((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4
                  ? (WebCore::RenderBox *)((char *)a2 + 156)
                  : (WebCore::RenderBox *)((char *)a2 + 152);
              if (*(_DWORD *)v51 != v50)
              {
                v52 = *((_DWORD *)a2 + 5);
                if ((v52 & 0x20) == 0)
                  *((_DWORD *)a2 + 5) = v52 | 0x20;
              }
            }
          }
          break;
        }
      }
    }
  }
  if (!a4)
  {
    if ((a3 & 1) != 0)
      goto LABEL_32;
    v8 = *(_BYTE **)(*((_QWORD *)a2 + 11) + 24);
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      if (v8[36])
        goto LABEL_11;
      v20 = v8 + 20;
    }
    else
    {
      if (v8[12])
        goto LABEL_11;
      v20 = v8 + 28;
    }
    if (!*v20)
    {
      v21 = (WebCore::RenderBlock *)*((_QWORD *)a2 + 4);
      if (v21)
        v21 = (WebCore::RenderBlock *)*((_QWORD *)v21 + 1);
      if (v21 != this)
      {
LABEL_32:
        v22 = *((_DWORD *)a2 + 5);
        if ((v22 & 0x20) == 0)
          *((_DWORD *)a2 + 5) = v22 | 0x20;
        if (a3 && (*(unsigned int (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1520))(a2))
          WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)a2, 1, 0);
      }
    }
LABEL_11:
    result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1512))(a2);
    v9 = *((_DWORD *)a2 + 5);
    if ((v9 & 0xF8) != 0)
    {
      if ((v9 & 0x10) != 0 && (v9 & 0xE8) == 0)
      {
        v43 = *((_DWORD *)a2 + 40);
        result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1304))(a2);
        if (v43 == *((_DWORD *)a2 + 40))
        {
          result = (uint64_t)WebCore::RenderBox::updateLogicalHeight(a2);
          v44 = *((_DWORD *)a2 + 5) & 0xFFDFFDFF | 0x200;
          *((_DWORD *)a2 + 5) = v44;
          if ((*((_BYTE *)a2 + 45) & 2) == 0)
          {
            *(_WORD *)((char *)a2 + 69) &= ~1u;
            *((_WORD *)a2 + 38) = *((_WORD *)a2 + 38) & 0xF | (16
                                                             * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                                                                                + 1944)
                                                                                    + 248)
                                                                        + 472));
          }
          v9 = v44 & 0xFFDFFE07;
          *((_DWORD *)a2 + 5) = v9;
        }
        else
        {
          v9 = *((_DWORD *)a2 + 5);
        }
      }
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                  + 1944)
                      + 248);
      v37 = *(unsigned int *)(v36 + 508);
      if (!(_DWORD)v37)
        goto LABEL_13;
      v14 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(v36 + 496) + 8 * v37 - 8);
      v12 = v13 != 0;
      if ((v9 & 0xF8) != 0 && v13)
      {
        v38 = *(_QWORD *)(v13 + 24);
        if (v38 && *(_QWORD *)(v38 + 8) || (*(_BYTE *)v13 & 2) != 0 && *(_DWORD *)(v13 + 72))
        {
          if (((v9 & 0x1000) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
          {
LABEL_109:
            result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1304))(a2);
            goto LABEL_110;
          }
LABEL_80:
          result = (uint64_t)WebCore::RenderBox::updateLogicalHeight(a2);
LABEL_110:
          if ((*((_BYTE *)this + 21) & 0x10) != 0)
            v48 = (char *)a2 + 152;
          else
            v48 = (char *)a2 + 156;
          v15 = *(_DWORD *)v48;
          v9 = *((_DWORD *)a2 + 5);
          v12 = 1;
          v14 = 1;
LABEL_14:
          if ((v9 & 0xF8) != 0)
          {
LABEL_15:
            v16 = *((_QWORD *)a2 + 4);
            if (v16
              && (v17 = *(_QWORD *)(v16 + 8)) != 0
              && (*(_BYTE *)(*(_QWORD *)(v17 + 104) + 239) & 0x18) != 0
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 479))
            {
              result = WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
            }
            else
            {
              result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 688))(a2);
            }
          }
LABEL_19:
          v18 = *((_QWORD *)a2 + 4);
          if (v18
            && (result = *(_QWORD *)(v18 + 8)) != 0
            && *(char *)(result + 45) < 0
            && (result = WebCore::RenderFlexibleBox::setStaticPositionForPositionedLayout((WebCore::RenderFlexibleBox *)result, a2), (result & 1) != 0)|| (v19 = *((_DWORD *)this + 5), v14)&& ((v19 & 0x1000) == 0 ? (v45 = (char *)a2 + 156) : (v45 = (char *)a2 + 152), *(_DWORD *)v45 != v15))
          {
            v24 = *((_DWORD *)a2 + 5);
            if ((v24 & 0x20) == 0)
            {
              v24 |= 0x20u;
              *((_DWORD *)a2 + 5) = v24;
            }
            if ((v24 & 0xF8) != 0)
            {
              v25 = *((_QWORD *)a2 + 4);
              if (v25
                && (v26 = *(_QWORD *)(v25 + 8)) != 0
                && (*(_BYTE *)(*(_QWORD *)(v26 + 104) + 239) & 0x18) != 0
                && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 479))
              {
                result = WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
              }
              else
              {
                result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 688))(a2);
              }
            }
            v19 = *((_DWORD *)this + 5);
          }
          if ((v19 & 0x10000000) != 0)
          {
            result = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 648))(this);
            if (result)
            {
              v61 = (WebCore::RenderFragmentedFlow *)result;
              result = WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(result + 248), v60);
              if ((result & 1) == 0 && ((*((_BYTE *)a2 + 52) & 7) != 1 || (*((_BYTE *)a2 + 53) & 2) == 0))
              {
                result = WebCore::RenderFragmentedFlow::hasCachedFragmentRangeForBox(v61, this);
                if ((_DWORD)result)
                {
                  v68[0] = 0;
                  v71 = 0;
                  WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v61, a2, v68, &v71);
                  WebCore::RenderBlock::computeFragmentRangeForBoxChild(this, a2);
                  v69 = 0;
                  v70 = 0;
                  WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v61, a2, &v70, &v69);
                  if (v70 != v68[0]
                    || (result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1568))(a2),
                        (_DWORD)result)
                    && v69 != v71)
                  {
                    v62 = *((_DWORD *)a2 + 5);
                    if ((v62 & 8) == 0)
                    {
                      *((_DWORD *)a2 + 5) = v62 | 8;
                      if ((v62 & 0x8000) != 0)
                        WebCore::RenderObject::setLayerNeedsFullRepaint((uint64_t)a2);
                    }
                    result = WebCore::RenderElement::layoutIfNeeded((uint64_t)a2);
                  }
                }
              }
            }
          }
          if (v12 && (*(_BYTE *)v13 & 2) != 0 && (*((_BYTE *)this + 52) & 7) == 1)
          {
            ++*((_DWORD *)this + 4);
            if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
              v46 = (unsigned int *)((char *)a2 + 152);
            else
              v46 = (unsigned int *)((char *)a2 + 156);
            result = WebCore::RenderBlockFlow::adjustSizeContainmentChildForPagination(this, (signed int *)a2, *v46);
            v47 = *((_DWORD *)this + 4);
            if (!v47)
            {
              __break(0xC471u);
              JUMPOUT(0x1941CB710);
            }
            *((_DWORD *)this + 4) = v47 - 1;
          }
          return result;
        }
LABEL_41:
        v14 = 0;
        v15 = 0;
        v12 = 1;
        if ((v9 & 0xF8) != 0)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                  + 1944)
                      + 248);
      v11 = *(unsigned int *)(v10 + 508);
      if (!(_DWORD)v11)
      {
LABEL_13:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        goto LABEL_14;
      }
      v14 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * v11 - 8);
      v12 = v13 != 0;
      if ((v9 & 0xF8) != 0 && v13)
      {
        v23 = *(_QWORD *)(v13 + 24);
        if (v23 && *(_QWORD *)(v23 + 8) || (*(_BYTE *)v13 & 2) != 0 && *(_DWORD *)(v13 + 72))
        {
          if (((*((_DWORD *)a2 + 5) & 0x1000) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
            goto LABEL_109;
          goto LABEL_80;
        }
        goto LABEL_41;
      }
    }
    v15 = 0;
    goto LABEL_14;
  }
  if ((*((_BYTE *)a2 + 20) & 0xF8) != 0)
  {
    v27 = *((_QWORD *)a2 + 4);
    if (v27
      && (v28 = *(_QWORD *)(v27 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v28 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      return WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
    }
    else
    {
      return (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 688))(a2);
    }
  }
  return result;
}

void WebCore::RenderBlockFlow::simplifiedNormalFlowLayout(WebCore::LayoutIntegration::LineLayout **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double v12;
  WebCore::LayoutIntegration::LineLayout *v13;
  WebCore::RenderBlockFlow *v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 22) & 4) != 0)
  {
    v2 = *((unsigned int *)this + 16);
    if (v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    {
      v3 = *(_QWORD *)((v2 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      v14 = (WebCore::RenderBlockFlow *)this;
      v15 = v3;
      if (v3)
      {
        v10 = 0;
        do
        {
          while ((*(_DWORD *)(v3 + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(v3 + 20) & 0x802) != 0)
          {
            if ((*(_BYTE *)(v3 + 45) & 4) == 0)
            {
              __break(0xC471u);
              return;
            }
            WebCore::RenderElement::layoutIfNeeded(v3);
            WebCore::InlineWalker::advance((WebCore::InlineWalker *)&v14);
            v3 = v15;
            v10 = 1;
            if (!v15)
              goto LABEL_33;
          }
          if ((*(_BYTE *)(v3 + 45) & 0x22) != 0)
            WebCore::RenderObject::clearNeedsLayout(v3, 0);
          WebCore::InlineWalker::advance((WebCore::InlineWalker *)&v14);
          v3 = v15;
        }
        while (v15);
        if ((v10 & 1) == 0)
          return;
LABEL_33:
        if (*((_DWORD *)this + 60) == 1)
        {
          v13 = this[29];
          if (v13)
            WebCore::LayoutIntegration::LineLayout::updateOverflow(v13, v12);
        }
      }
    }
  }
  else
  {
    v4 = *((unsigned int *)this + 16);
    if (v4 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    {
      v5 = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (v5)
      {
        while ((*(_BYTE *)(v5 + 45) & 4) != 0)
        {
          if ((*(_DWORD *)(v5 + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(v5 + 20) & 0xF8) != 0)
          {
            v7 = *(_QWORD *)(v5 + 32);
            if (v7
              && (v8 = *(_QWORD *)(v7 + 8)) != 0
              && (*(_BYTE *)(*(_QWORD *)(v8 + 104) + 239) & 0x18) != 0
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 479))
            {
              WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v5);
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 688))(v5);
            }
          }
          v9 = *(unsigned int *)(v5 + 47);
          if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)))
            break;
          v5 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
          if (!v5)
            break;
        }
      }
    }
  }
}

uint64_t WebCore::RenderFlexibleBox::shouldResetChildLogicalHeightBeforeLayout(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  return *((unsigned __int8 *)this + 394);
}

float WebCore::RenderStyle::outlineOffset(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;
  float v3;
  float v4;
  float v5;
  BOOL v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  result = *(float *)(v1 + 56);
  if ((*(_BYTE *)(v1 + 52) & 0x10) != 0)
  {
    v3 = -3.0;
    if ((*(_BYTE *)(v1 + 52) & 0xF) != 0)
    {
      v4 = *(float *)(v1 + 48);
      v5 = v4 + -3.0;
      v6 = v4 < 3.0;
      v3 = 0.0;
      if (!v6)
        v3 = v5;
    }
    if (v3 < 0.0)
      v3 = 0.0;
    return result + v3;
  }
  return result;
}

uint64_t WebCore::mustRepaintFillLayers(WebCore *this, const WebCore::RenderElement *a2, const WebCore::FillLayer *a3)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v7;
  char v8;
  _BYTE v9[4];
  char v10;
  char v11;

  if (*((_QWORD *)a2 + 1))
    return 1;
  v4 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (!v4)
    return 0;
  ++v4[2];
  if (!(*(unsigned int (**)(_DWORD *, WebCore *, const WebCore::FillLayer *, float))(*(_QWORD *)v4 + 208))(v4, this, a3, *(float *)(*((_QWORD *)this + 13) + 184)))
  {
LABEL_26:
    v5 = 0;
    goto LABEL_8;
  }
  v5 = 1;
  if (!*((_BYTE *)a2 + 28) || *((_BYTE *)a2 + 28) == 11)
    goto LABEL_8;
  if (*((_BYTE *)a2 + 30))
  {
    if (*((float *)a2 + 6) != 0.0)
      goto LABEL_8;
  }
  else if (*((_DWORD *)a2 + 6))
  {
    goto LABEL_8;
  }
  if (!*((_BYTE *)a2 + 36) || *((_BYTE *)a2 + 36) == 11)
    goto LABEL_8;
  if (!*((_BYTE *)a2 + 38))
  {
    if (*((_DWORD *)a2 + 8))
      goto LABEL_8;
LABEL_16:
    v7 = (*((unsigned __int16 *)a2 + 29) >> 11) & 3;
    if (v7 < 2)
      goto LABEL_8;
    if (v7 == 2)
    {
      WebCore::LengthPoint::LengthPoint((WebCore::Length *)v9, (uint64_t)a2 + 40);
      if ((v10 & 0xF7) == 3
        || (v11 & 0xF7) == 3
        || (!v10 || !v11) && *((unsigned __int8 *)v4 + 24) - 3 < 7)
      {
        WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v9);
        goto LABEL_8;
      }
      WebCore::LengthSize::~LengthSize((WebCore::LengthSize *)v9);
    }
    else
    {
      v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 128))(v4);
      if ((v8 & 1) != 0)
        goto LABEL_8;
    }
    goto LABEL_26;
  }
  if (*((float *)a2 + 8) == 0.0)
    goto LABEL_16;
LABEL_8:
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
  return v5;
}

uint64_t WebCore::RenderFlexibleBox::setStaticPositionForPositionedLayout(WebCore::RenderFlexibleBox *this, const WebCore::RenderBox *a2)
{
  uint64_t v4;
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;

  v4 = *((_QWORD *)a2 + 18);
  v5 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v6 = *(_BYTE **)(*((_QWORD *)a2 + 11) + 24);
  if (v5 < 4)
  {
    if (!v6[12])
    {
      v7 = v6 + 28;
      goto LABEL_4;
    }
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  if (v6[36])
    goto LABEL_5;
  v7 = v6 + 20;
LABEL_4:
  if (*v7)
    goto LABEL_5;
  if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    v17 = v5 >= 4;
    v18 = (char *)this + 164;
    if (v17)
      v18 = (char *)this + 160;
    v19 = *(_DWORD *)v18;
    v20 = *(_QWORD *)this;
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v21 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(v20 + 1000))(this);
      v22 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 928))(this);
    }
    else
    {
      v21 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(v20 + 1016))(this);
      v22 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 944))(this);
    }
    if (__OFADD__(v21, v22))
      v23 = (v21 >> 31) + 0x7FFFFFFF;
    else
      v23 = v21 + v22;
    v24 = WebCore::RenderBox::contentLogicalWidth(this);
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      v25 = (v23 >> 31) + 0x7FFFFFFF;
    v26 = __OFSUB__(v19, v25);
    v27 = v19 - v25;
    v28 = v26 ? (v19 >> 31) + 0x7FFFFFFF : v27;
  }
  else
  {
    v28 = WebCore::RenderBlock::logicalLeftOffsetForContent(this);
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
    v29 = WebCore::RenderFlexibleBox::staticCrossAxisPositionForPositionedChild(this, a2);
  else
    v29 = WebCore::RenderFlexibleBox::staticMainAxisPositionForPositionedChild(this, a2);
  v30 = v28 + v29;
  if (__OFADD__(v28, v29))
    v30 = (v28 >> 31) + 0x7FFFFFFF;
  if (*(_DWORD *)(v4 + 148) == v30)
    goto LABEL_5;
  *(_DWORD *)(v4 + 148) = v30;
  v8 = 1;
LABEL_6:
  v9 = *(_BYTE **)(*((_QWORD *)a2 + 11) + 24);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    if (v9[36])
      return v8;
    v11 = v9 + 20;
  }
  else
  {
    if (v9[12])
      return v8;
    v11 = v9 + 28;
  }
  if (!*v11)
  {
    v12 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1048))(this);
    v13 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 960))(this);
    if (__OFADD__(v12, v13))
      v14 = (v12 >> 31) + 0x7FFFFFFF;
    else
      v14 = v12 + v13;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0)
      v15 = WebCore::RenderFlexibleBox::staticMainAxisPositionForPositionedChild(this, a2);
    else
      v15 = WebCore::RenderFlexibleBox::staticCrossAxisPositionForPositionedChild(this, a2);
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      v16 = (v14 >> 31) + 0x7FFFFFFF;
    if (*(_DWORD *)(v4 + 152) != v16)
    {
      *(_DWORD *)(v4 + 152) = v16;
      return 1;
    }
  }
  return v8;
}

uint64_t WebCore::RenderBlock::simplifiedNormalFlowLayout(uint64_t this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
  {
    v1 = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
    if (v1)
    {
      while ((*(_BYTE *)(v1 + 45) & 4) != 0)
      {
        if ((*(_DWORD *)(v1 + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(v1 + 20) & 0xF8) != 0)
        {
          v3 = *(_QWORD *)(v1 + 32);
          if (v3
            && (v4 = *(_QWORD *)(v3 + 8)) != 0
            && (*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 0x18) != 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40)
                                                             + 8)
                                                 + 1944)
                                     + 248)
                         + 479))
          {
            this = WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v1);
          }
          else
          {
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 688))(v1);
          }
        }
        v5 = *(unsigned int *)(v1 + 47);
        if (!(v5 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)))
          break;
        v1 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)) + 8);
        if (!v1)
          break;
      }
    }
  }
  return this;
}

__int128 *WebCore::RegionContext::pushClip(WebCore::RegionContext *this, const WebCore::IntRect *a2)
{
  unsigned int v3;
  WebCore::AffineTransform *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  unsigned int v28;
  unint64_t v29;
  float v30;
  float v31;
  unsigned int v32;
  unint64_t v33;
  __int128 *result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v3 = *((_DWORD *)this + 7);
  if (v3)
  {
    v4 = (WebCore::AffineTransform *)(*((_QWORD *)this + 2) + 48 * v3 - 48);
    v5 = (float)*((int *)a2 + 1);
    *(float *)&v52 = (float)*(int *)a2;
    *((float *)&v52 + 1) = v5;
    v6 = (float)*((int *)a2 + 3);
    *((float *)&v52 + 2) = (float)*((int *)a2 + 2);
    *((float *)&v52 + 3) = v6;
    v7 = WebCore::AffineTransform::mapRect(v4, (const WebCore::FloatRect *)&v52);
    v11 = floorf(v7);
    v12 = v11 >= 2147500000.0 || v11 <= -2147500000.0;
    if (!v12 || (v13 = 2147500000.0, v11 < 2147500000.0) && (v13 = -2147500000.0, v11 > -2147500000.0))
      v13 = (float)(int)v11;
    v14 = floorf(v8);
    v15 = 2147500000.0;
    v16 = -2147500000.0;
    if (v14 > -2147500000.0)
      v16 = (float)(int)v14;
    if (v14 < 2147500000.0)
      v15 = v16;
    v17 = -2147500000.0;
    if (v14 >= 2147500000.0 || v14 <= -2147500000.0)
      v19 = v15;
    else
      v19 = (float)(int)v14;
    v20 = v8 + v10;
    v21 = ceilf(v7 + v9);
    v22 = 2147500000.0;
    if (v21 > -2147500000.0)
      v17 = (float)(int)v21;
    if (v21 >= 2147500000.0)
    {
      v23 = 1;
    }
    else
    {
      v22 = v17;
      v23 = v21 <= -2147500000.0;
    }
    if (v23)
      v24 = v22;
    else
      v24 = (float)(int)v21;
    v25 = ceilf(v20);
    v26 = v25 >= 2147500000.0 || v25 <= -2147500000.0;
    if (!v26 || (v27 = 2147500000.0, v25 < 2147500000.0) && (v27 = -2147500000.0, v25 > -2147500000.0))
      v27 = (float)(int)v25;
    if (v13 < 2147500000.0 && v13 > -2147500000.0)
      goto LABEL_32;
    if (v13 >= 2147500000.0)
    {
      v28 = 0x7FFFFFFF;
    }
    else
    {
      if (v13 > -2147500000.0)
      {
LABEL_32:
        v28 = (int)v13;
        goto LABEL_33;
      }
      v28 = 0x80000000;
    }
LABEL_33:
    if (v19 < 2147500000.0 && v19 > -2147500000.0)
      goto LABEL_35;
    if (v19 >= 2147500000.0)
    {
      v29 = 0x7FFFFFFF00000000;
      goto LABEL_36;
    }
    if (v19 > -2147500000.0)
LABEL_35:
      v29 = (unint64_t)(int)v19 << 32;
    else
      v29 = 0x8000000000000000;
LABEL_36:
    v30 = v24 - v13;
    v31 = v27 - v19;
    if (v30 < 2147500000.0 && v30 > -2147500000.0)
      goto LABEL_38;
    if (v30 >= 2147500000.0)
    {
      v32 = 0x7FFFFFFF;
    }
    else
    {
      if (v30 > -2147500000.0)
      {
LABEL_38:
        v32 = (int)v30;
        goto LABEL_39;
      }
      v32 = 0x80000000;
    }
LABEL_39:
    if (v31 < 2147500000.0 && v31 > -2147500000.0)
      goto LABEL_41;
    if (v31 >= 2147500000.0)
    {
      v33 = 0x7FFFFFFF00000000;
      goto LABEL_42;
    }
    if (v31 > -2147500000.0)
LABEL_41:
      v33 = (unint64_t)(int)v31 << 32;
    else
      v33 = 0x8000000000000000;
LABEL_42:
    *(_QWORD *)&v52 = v29 | v28;
    *((_QWORD *)&v52 + 1) = v33 | v32;
    goto LABEL_43;
  }
  v52 = *(_OWORD *)a2;
LABEL_43:
  result = (__int128 *)((char *)this + 32);
  v35 = *((unsigned int *)this + 11);
  if (!(_DWORD)v35)
  {
    if (*((_DWORD *)this + 10))
    {
      *(_OWORD *)*((_QWORD *)this + 4) = v52;
LABEL_46:
      ++*((_DWORD *)this + 11);
      return result;
    }
    result = (__int128 *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, 1uLL, (unint64_t)&v52);
    v35 = *((unsigned int *)this + 11);
    v36 = *((_QWORD *)this + 4);
    v50 = *result;
LABEL_70:
    *(_OWORD *)(v36 + 16 * v35) = v50;
    goto LABEL_46;
  }
  v36 = *(_QWORD *)result;
  v37 = *(_QWORD *)result + 16 * v35;
  v39 = *(_DWORD *)(v37 - 16);
  v38 = *(_DWORD *)(v37 - 12);
  v42 = v37 - 8;
  v40 = *(_DWORD *)(v37 - 8);
  v41 = *(_DWORD *)(v42 + 4);
  if (v39 <= (int)v52)
    v43 = v52;
  else
    v43 = v39;
  v44 = v40 + v39;
  if (v38 <= SDWORD1(v52))
    v45 = DWORD1(v52);
  else
    v45 = v38;
  if (DWORD2(v52) + (int)v52 < v44)
    v44 = DWORD2(v52) + v52;
  v46 = v41 + v38;
  if (HIDWORD(v52) + DWORD1(v52) < v46)
    v46 = HIDWORD(v52) + DWORD1(v52);
  v47 = v43 < v44 && v45 < v46;
  if (v47)
    v48 = v43;
  else
    v48 = 0;
  if (v47)
    v49 = v45;
  else
    v49 = 0;
  if (!v47)
  {
    v44 = 0;
    v46 = 0;
  }
  *(_QWORD *)&v51 = v48 | (v49 << 32);
  *((_QWORD *)&v51 + 1) = (v44 - v48) | ((unint64_t)(v46 - v49) << 32);
  if ((_DWORD)v35 != *((_DWORD *)this + 10))
  {
    v50 = v51;
    goto LABEL_70;
  }
  return (__int128 *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect>((uint64_t)result, (unint64_t)&v51);
}

uint64_t WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = 16 * v10;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        v14 = (WTF *)((char *)v14 + 16);
        *v11++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ScrollingTree::mainFrameHorizontalOverscrollBehavior(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 252);
  else
    v5 = 0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

uint64_t WebCore::ScrollingTree::mainFrameVerticalOverscrollBehavior(WebCore::ScrollingTree *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (unsigned __int8 *)this + 12;
  if (__ldaxr((unsigned __int8 *)this + 12))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 12);
LABEL_5:
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 253);
  else
    v5 = 0;
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

void WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::{lambda(void)#1}::operator()()
{
  CGColorSpaceRef v0;
  const void *v1;

  v0 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  v1 = (const void *)WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace;
  WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace = (uint64_t)v0;
  if (v1)
    CFRelease(v1);
}

void WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1}::operator()()
{
  CGColorSpaceRef v0;
  const void *v1;

  v0 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  v1 = (const void *)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace;
  WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = (uint64_t)v0;
  if (v1)
    CFRelease(v1);
}

BOOL WebCore::systemHasBattery(WebCore *this)
{
  char v1;

  {
    v1 = WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance;
    if ((unsigned __int16)WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance >= 0x100u)
      return v1 != 0;
  }
  else
  {
    WebCore::SystemBatteryStatusTestingOverrides::singleton(void)::instance = 0;
    *(_QWORD *)algn_1ECE889C8 = 0;
  }
  if (HIBYTE(WebCore::hasBattery))
  {
    v1 = WebCore::hasBattery;
  }
  else
  {
    WebCore::hasBattery = 257;
    v1 = 1;
  }
  return v1 != 0;
}

void WebCore::GraphicsContextCG::restore(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  _QWORD *v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  _QWORD *v78;
  unsigned int *v79;
  unsigned int v80;
  BOOL v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  _QWORD *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  _BOOL4 v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  _QWORD *v96;
  __int128 v97;
  __int128 v98;

  v2 = *(unsigned int *)(a1 + 364);
  if (!(_DWORD)v2)
    return;
  v4 = v2 - 1;
  v5 = *(_QWORD *)(a1 + 352);
  v6 = (_QWORD *)(v5 + 344 * (v2 - 1));
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *v6;
  if ((v7 & 0x8000000000000) != 0)
  {
    if ((v8 & 0x8000000000000) != 0)
    {
      v69 = v6;
      v98 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v97 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
      v70 = WebCore::operator==<float,4ul>((float *)&v98, (float *)&v97);
      v7 = *(_QWORD *)(a1 + 8);
      if (v70 && HIBYTE(v7) == HIBYTE(*v69))
      {
        v6 = v69;
        if (BYTE6(v7) == BYTE6(*v69))
          goto LABEL_8;
      }
      else
      {
        v6 = v69;
      }
    }
  }
  else if (v7 == v8 && (v8 & 0x8000000000000) == 0)
  {
    goto LABEL_8;
  }
  if ((v7 & 0x8000000000000) != 0)
  {
    v78 = v6;
    v79 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v80 = __ldaxr(v79);
      v81 = --v80 == 0;
    }
    while (__stlxr(v80, v79));
    v6 = v78;
    if (v81)
    {
      atomic_store(1u, v79);
      WTF::fastFree((WTF *)v79, a2);
      v6 = v78;
    }
  }
  v75 = *v6;
  *(_QWORD *)(a1 + 8) = *v6;
  if ((v75 & 0x8000000000000) != 0)
  {
    v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 + 1, v76));
  }
LABEL_8:
  v10 = (void *)(a1 + 24);
  v11 = *(unsigned int *)(a1 + 88);
  v12 = *((unsigned int *)v6 + 20);
  if ((_DWORD)v11 == -1)
  {
    if ((_DWORD)v12 != -1)
      goto LABEL_10;
  }
  else
  {
    if ((_DWORD)v12 != -1)
    {
LABEL_10:
      *(_QWORD *)&v98 = a1 + 24;
      ((void (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v12])(&v98);
      goto LABEL_11;
    }
    ((void (*)(__int128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v11])(&v98, v10);
    *(_DWORD *)(a1 + 88) = -1;
  }
LABEL_11:
  v13 = v5 + 344 * v4;
  v16 = *(_QWORD *)(v13 + 88);
  v14 = (_QWORD *)(v13 + 88);
  v15 = v16;
  v17 = *(_QWORD *)(a1 + 96);
  if ((v17 & 0x8000000000000) != 0)
  {
    if ((v15 & 0x8000000000000) != 0)
    {
      v96 = v14;
      v98 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
      v97 = *(_OWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 4);
      v71 = WebCore::operator==<float,4ul>((float *)&v98, (float *)&v97);
      v17 = *(_QWORD *)(a1 + 96);
      if (v71 && HIBYTE(v17) == HIBYTE(*v96))
      {
        v14 = v96;
        if (BYTE6(v17) == BYTE6(*v96))
          goto LABEL_17;
      }
      else
      {
        v14 = v96;
      }
    }
  }
  else if (v17 == v15 && (v15 & 0x8000000000000) == 0)
  {
    goto LABEL_17;
  }
  if ((v17 & 0x8000000000000) != 0)
  {
    v85 = v14;
    v86 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v86);
      WTF::fastFree((WTF *)v86, v10);
      v14 = v85;
    }
  }
  v82 = *v14;
  *(_QWORD *)(a1 + 96) = *v14;
  if ((v82 & 0x8000000000000) != 0)
  {
    v83 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFLL);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 + 1, v83));
  }
LABEL_17:
  v19 = (void *)(a1 + 112);
  v20 = *(unsigned int *)(a1 + 176);
  v21 = *(unsigned int *)(v5 + 344 * v4 + 168);
  if ((_DWORD)v20 == -1)
  {
    if ((_DWORD)v21 != -1)
      goto LABEL_19;
  }
  else
  {
    if ((_DWORD)v21 != -1)
    {
LABEL_19:
      *(_QWORD *)&v98 = a1 + 112;
      ((void (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v21])(&v98);
      goto LABEL_20;
    }
    ((void (*)(__int128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v20])(&v98, v19);
    *(_DWORD *)(a1 + 176) = -1;
  }
LABEL_20:
  v22 = v5 + 344 * v4;
  v23 = *(_QWORD *)(v22 + 176);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(v22 + 184);
  *(_QWORD *)(a1 + 184) = v23;
  v24 = (_QWORD *)(a1 + 200);
  v25 = (uint64_t *)(v22 + 192);
  if (*(unsigned __int8 *)(a1 + 232) == *(unsigned __int8 *)(v22 + 224))
  {
    if (!*(_BYTE *)(a1 + 232))
      goto LABEL_32;
    v26 = *v25;
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(v22 + 200);
    *v24 = v26;
    v27 = v5 + 344 * v4;
    v30 = *(_QWORD *)(v27 + 208);
    v29 = (uint64_t *)(v27 + 208);
    v28 = v30;
    v31 = *(_QWORD *)(a1 + 216);
    if ((v31 & 0x8000000000000) != 0)
    {
      if ((v28 & 0x8000000000000) == 0
        || (v98 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4),
            v97 = *(_OWORD *)((v28 & 0xFFFFFFFFFFFFLL) + 4),
            v89 = WebCore::operator==<float,4ul>((float *)&v98, (float *)&v97),
            v31 = *(_QWORD *)(a1 + 216),
            !v89)
        || HIBYTE(v31) != HIBYTE(*v29)
        || BYTE6(v31) != BYTE6(*v29))
      {
LABEL_131:
        if ((v31 & 0x8000000000000) != 0)
        {
          v93 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (!v95)
          {
            atomic_store(1u, v93);
            WTF::fastFree((WTF *)v93, v19);
          }
        }
        v90 = *v29;
        *(_QWORD *)(a1 + 216) = *v29;
        if ((v90 & 0x8000000000000) != 0)
        {
          v91 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFLL);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 + 1, v91));
        }
      }
    }
    else if (v31 != v28 || (v28 & 0x8000000000000) != 0)
    {
      goto LABEL_131;
    }
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(v5 + 344 * v4 + 216);
    goto LABEL_32;
  }
  if (*(_BYTE *)(a1 + 232))
  {
    v33 = *(_QWORD *)(a1 + 216);
    if ((v33 & 0x8000000000000) != 0)
    {
      v72 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, v19);
      }
    }
    *(_BYTE *)(a1 + 232) = 0;
  }
  else
  {
    v54 = *v25;
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(v22 + 200);
    *v24 = v54;
    v55 = *(_QWORD *)(v5 + 344 * v4 + 208);
    *(_QWORD *)(a1 + 216) = v55;
    if ((v55 & 0x8000000000000) != 0)
    {
      v58 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
    }
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(v5 + 344 * v4 + 216);
    *(_BYTE *)(a1 + 232) = 1;
  }
LABEL_32:
  v34 = (void *)(a1 + 240);
  v35 = v5 + 344 * v4;
  v36 = v35 + 232;
  if (*(unsigned __int8 *)(a1 + 328) != *(unsigned __int8 *)(v35 + 320))
  {
    if (*(_BYTE *)(a1 + 328))
    {
      v39 = *(unsigned int *)(a1 + 320);
      if ((_DWORD)v39 != -1)
        ((void (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v39])(&v98, v34, v36);
      *(_DWORD *)(a1 + 320) = -1;
      *(_BYTE *)(a1 + 328) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 240) = 0;
      *(_DWORD *)(a1 + 320) = -1;
      v56 = *(unsigned int *)(v5 + 344 * v4 + 312);
      if ((_DWORD)v56 != -1)
      {
        ((void (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v56])(&v98, v34, v36);
        *(_DWORD *)(a1 + 320) = v56;
      }
      *(_BYTE *)(a1 + 328) = 1;
    }
    goto LABEL_41;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    v37 = *(unsigned int *)(a1 + 320);
    v38 = *(unsigned int *)(v5 + 344 * v4 + 312);
    if ((_DWORD)v37 == -1)
    {
      if ((_DWORD)v38 != -1)
        goto LABEL_36;
    }
    else
    {
      if ((_DWORD)v38 != -1)
      {
LABEL_36:
        *(_QWORD *)&v98 = a1 + 240;
        ((void (*)(__int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRSB_SH_EEEDcmSJ_DpOT0____fdiagonal
                                          + v38))(&v98);
        goto LABEL_41;
      }
      ((void (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v37])(&v98, v34, v36);
      *(_DWORD *)(a1 + 320) = -1;
    }
  }
LABEL_41:
  v40 = *(_QWORD *)(v5 + 344 * v4 + 328);
  *(_QWORD *)(a1 + 341) = *(_QWORD *)(v5 + 344 * v4 + 333);
  *(_QWORD *)(a1 + 336) = v40;
  v41 = *(unsigned int *)(a1 + 364);
  if ((_DWORD)v41)
  {
    v42 = v41 - 1;
    v43 = *(_QWORD *)(a1 + 352);
    v44 = v43 + 344 * (v41 - 1);
    if (*(_BYTE *)(v44 + 320))
    {
      v45 = (_DWORD *)(v43 + 344 * v42 + 312);
      v46 = *v45;
      if ((_DWORD)v46 != -1)
        ((void (*)(__int128 *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v46])(&v98, v44 + 232, v36);
      *v45 = -1;
    }
    if (*(_BYTE *)(v43 + 344 * v42 + 224))
    {
      v47 = *(_QWORD *)(v43 + 344 * v42 + 208);
      if ((v47 & 0x8000000000000) != 0)
      {
        v66 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          atomic_store(1u, v66);
          WTF::fastFree((WTF *)v66, v34);
        }
      }
    }
    v48 = v43 + 344 * v42;
    v51 = *(_DWORD *)(v48 + 168);
    v50 = (_DWORD *)(v48 + 168);
    v49 = v51;
    v52 = v50 - 20;
    if (v51 != -1)
      ((void (*)(__int128 *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v49])(&v98, v43 + 344 * v42 + 104, v36);
    *v50 = -1;
    if ((*v52 & 0x8000000000000) != 0)
    {
      v60 = (unsigned int *)(*v52 & 0xFFFFFFFFFFFFLL);
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        atomic_store(1u, v60);
        WTF::fastFree((WTF *)v60, v34);
      }
    }
    v53 = *(unsigned int *)(v44 + 80);
    if ((_DWORD)v53 != -1)
      ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v53])(&v98, v44 + 16);
    *(_DWORD *)(v44 + 80) = -1;
    if ((*(_QWORD *)v44 & 0x8000000000000) != 0)
    {
      v63 = (unsigned int *)(*(_QWORD *)v44 & 0xFFFFFFFFFFFFLL);
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        atomic_store(1u, v63);
        WTF::fastFree((WTF *)v63, v34);
      }
    }
    *(_DWORD *)(a1 + 364) = v42;
    if (!(_DWORD)v42 && *(_DWORD *)(a1 + 360))
    {
      v57 = *(WTF **)(a1 + 352);
      if ((WTF *)(a1 + 368) != v57 && v57)
      {
        *(_QWORD *)(a1 + 352) = 0;
        *(_DWORD *)(a1 + 360) = 0;
        WTF::fastFree(v57, v34);
        v57 = *(WTF **)(a1 + 352);
      }
      if (!v57)
      {
        *(_QWORD *)(a1 + 352) = a1 + 368;
        *(_DWORD *)(a1 + 360) = 1;
      }
    }
    CGContextRestoreGState(*(CGContextRef *)(a1 + 720));
    *(_BYTE *)(a1 + 744) &= ~4u;
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::DisplayList::DrawRect::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 144))(a2, a1, *(float *)(a1 + 16));
}

uint64_t WebCore::UserMessageHandlerDescriptor::UserMessageHandlerDescriptor(uint64_t result, _DWORD **a2, _DWORD *a3)
{
  _DWORD *v3;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3484D98;
  v3 = *a2;
  if (*a2)
    *v3 += 2;
  ++*a3;
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = a3;
  return result;
}

uint64_t PAL::PassKitCoreLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7E478 != -1)
    dispatch_once(&qword_1ECE7E478, block);
  return qword_1ECE7E470;
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::flushContextDraws(WebCore::ImageBufferIOSurfaceBackend *this)
{
  uint64_t v1;
  char v2;
  uint64_t result;
  CGContext *v4;
  const void *v6;
  PAL *v7;

  v1 = *((_QWORD *)this + 5);
  if (!v1 || (v2 = *(_BYTE *)(v1 + 744), *(_BYTE *)(v1 + 744) = v2 & 0xF7, (v2 & 8) == 0))
  {
    if (!*((_BYTE *)this + 80))
      return 0;
  }
  *((_BYTE *)this + 80) = 0;
  v4 = (CGContext *)*((_QWORD *)this + 7);
  if (v4)
    goto LABEL_7;
  WebCore::IOSurface::createPlatformContext(*((IOSurfaceRef **)this + 6), &v7);
  v4 = v7;
  v6 = (const void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v7;
  if (v6)
  {
    CFRelease(v6);
    v4 = (CGContext *)*((_QWORD *)this + 7);
  }
  if (v4)
  {
LABEL_7:
    CGContextFlush(v4);
    return 1;
  }
  else
  {
    result = 137;
    __break(0xC471u);
  }
  return result;
}

JSC::CallFrame *WebCore::Document::shouldBypassMainWorldContentSecurityPolicy(WebCore::Document *this)
{
  JSC::VM *v1;
  JSC::CallFrame *result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = (JSC::VM *)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = (JSC::VM *)v6;
  WebCore::g_commonVMOrNull = v6;
  if (__ldaxr((unsigned int *)(v6 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v6 + 1096)))
  {
    goto LABEL_10;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v6 + 192));
LABEL_10:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v6 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v6 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v6, 0);
LABEL_2:
  result = (JSC::CallFrame *)*((_QWORD *)v1 + 5);
  if (result)
  {
    v3 = *((_QWORD *)result + 3);
    if ((v3 & 0xFFFE000000000007) == 3)
      v4 = JSC::CallFrame::lexicalGlobalObjectFromNativeCallee(result, v1);
    else
      v4 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
    return (JSC::CallFrame *)(*(_DWORD *)(*(_QWORD *)(v4 + 3320) + 48) != 0);
  }
  return result;
}

uint64_t WebCore::LocalFrameView::unobscuredContentSizeChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)(this + 328) + 296);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 1944);
    if (v2)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256);
      if (v3)
      {
        v4 = this;
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 832))(*(_QWORD *)(v3 + 72));
        if (this)
        {
          v5 = this;
          v6 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 24);
          if (!v6)
            goto LABEL_17;
          v7 = *(_QWORD *)(v6 + 8);
          if (!v7 || (*(_WORD *)(v7 + 658) & 1) == 0)
            goto LABEL_17;
          v8 = *(unsigned __int8 *)(v7 + 448) | *(unsigned __int8 *)(v4 + 1144);
          if (*(_BYTE *)(v4 + 312) == 1)
          {
            v10 = *(_QWORD *)(v4 + 64);
            v9 = v4 + 64;
            v11 = *(_QWORD *)(v9 + 192);
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 832))(v9, 0, 1);
            if (v8)
              goto LABEL_17;
            v13 = SHIDWORD(v11) > SHIDWORD(v12);
            if ((int)v11 <= (int)v12)
              goto LABEL_12;
          }
          else
          {
            if (v8)
              goto LABEL_17;
            v13 = *(_QWORD *)(v4 + 160) != 0;
            if (!*(_QWORD *)(v4 + 152))
            {
LABEL_12:
              if (v13)
                v14 = 2;
              else
                v14 = 0;
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v14);
            }
          }
          if (!v13)
          {
            v14 = 1;
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v14);
          }
LABEL_17:
          v14 = 3;
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v14);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::setScrollVelocity(WebCore::LocalFrameView *a1, uint64_t a2)
{
  uint64_t result;

  result = WebCore::LocalFrameView::tiledBacking(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 112))(result, a2);
  return result;
}

uint64_t WebCore::LocalFrameView::tiledBacking(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1 && (v2 = *(_QWORD *)(v1 + 1944)) != 0 && (v3 = *(_QWORD *)(*(_QWORD *)(v2 + 144) + 256)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 72) + 832))(*(_QWORD *)(v3 + 72));
  else
    return 0;
}

uint64_t *WebCore::RenderLayerCompositor::setIsInWindow(uint64_t *this, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24[5];
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  if (*((_BYTE *)this + 195))
  {
    v3 = this;
    v4 = this[32];
    if (v4 || (v4 = this[28]) != 0)
    {
      v5 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v5 = off_1E3429248;
      *(_BYTE *)(v5 + 8) = a2;
      v25 = (uint64_t *)v5;
      WebCore::GraphicsLayer::traverse(v4, &v25);
      this = v25;
      v25 = 0;
      if (this)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
    v6 = *((_DWORD *)v3 + 54);
    if (a2)
    {
      if (!v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v3[1] + 248) + 328);
        if (*(_QWORD *)(*(_QWORD *)(v7 + 632) + 8) == v7)
          v8 = 1;
        else
          v8 = 2;
        WebCore::RenderLayerCompositor::attachRootLayer(v3, v8);
        this = (uint64_t *)v3[42];
        if (this)
        {
          WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllViewportConstrainedLayers((uint64_t)this, (WebCore::RenderLayerCompositor *)v3);
          return WebCore::LegacyWebKitScrollingLayerCoordinator::registerAllScrollingLayers((WebCore::LegacyWebKitScrollingLayerCoordinator *)v3[42]);
        }
      }
    }
    else if (v6)
    {
      this = WebCore::RenderLayerCompositor::detachRootLayer(v3);
      v9 = v3[42];
      if (v9)
      {
        if (*(_BYTE *)(v9 + 40))
        {
          v25 = 0;
          v10 = *(_QWORD *)v9;
          v24[0] = 0;
          (*(void (**)(uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)v10 + 720))(v10, &v25, v24);
          if (v24[0])
            WTF::fastFree((WTF *)(v24[0] - 2), v11);
          v12 = v25;
          if (v25)
          {
            v13 = *((unsigned int *)v25 - 1);
            if ((_DWORD)v13)
            {
              v14 = v25 + 1;
              do
              {
                if (*(v14 - 1) != -1)
                {
                  v15 = *v14;
                  *v14 = 0;
                  if (v15)
                    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
                }
                v14 += 2;
                --v13;
              }
              while (v13);
            }
            WTF::fastFree((WTF *)(v12 - 2), v11);
          }
          v9 = v3[42];
        }
        WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(v9 + 8), &v25);
        this = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)(v9 + 8), v24);
        while (v26 != v24[1])
        {
          v16 = *(_QWORD *)(*v26 + 8);
          v17 = *(_QWORD *)(v16 + 256);
          v18 = *(_QWORD *)v9;
          v19 = *(_QWORD *)(v16 + 32);
          if ((*(_BYTE *)(v19 + 45) & 1) != 0)
          {
            v20 = 0;
          }
          else
          {
            v20 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8);
            if (v20 && (*(_WORD *)(v20 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1941CD258);
            }
          }
          v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 160) + 584))(*(_QWORD *)(v17 + 160));
          v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 168) + 584))(*(_QWORD *)(v17 + 168));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 736))(v18, v20, v21, v22);
          v23 = v26;
          do
            v26 = ++v23;
          while (v23 != v27 && (unint64_t)(*v23 + 1) <= 1);
          this = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v25);
          ++*((_DWORD *)v25 + 2);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::traverse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  do
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, a1);
    v4 = *(unsigned int *)(a1 + 196);
    if ((_DWORD)v4)
    {
      v6 = *(uint64_t **)(a1 + 184);
      v7 = 8 * v4;
      do
      {
        v8 = *v6++;
        WebCore::GraphicsLayer::traverse(v8, a2);
        v7 -= 8;
      }
      while (v7);
    }
    result = *(_QWORD *)(a1 + 216);
    if (result)
      result = WebCore::GraphicsLayer::traverse(result, a2);
    a1 = *(_QWORD *)(a1 + 208);
  }
  while (a1);
  return result;
}

uint64_t WebCore::RenderLayerBacking::adjustTiledBackingCoverage(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  __int16 *v9;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WebCore::RenderBox *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  WebCore::RenderBox *v21;
  int v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  __int16 v31;
  __int16 v32;

  v1 = this;
  if (!*(_BYTE *)(this + 290))
    goto LABEL_26;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 24) + 8) + 40)
                 + 8);
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 528) + 8) + 24) + 8) + 658) & 4) == 0
    || ((v3 = *(_QWORD *)(*(_QWORD *)(v2 + 1944) + 248), !*(_BYTE *)(v3 + 110))
      ? (v4 = *(_BYTE *)(v3 + 1381) == 0)
      : (v4 = 1),
        v4))
  {
    v5 = 0;
    goto LABEL_24;
  }
  v6 = *(unsigned __int8 *)(v3 + 1144);
  v31 = 0;
  if (*(_QWORD *)(v3 + 40))
  {
    WebCore::ScrollView::platformScrollbarModes(v3, (uint64_t)&v31 + 1, (uint64_t)&v31);
    v28 = *(_QWORD *)(v3 + 40);
    if (v6)
      v29 = 0;
    else
      v29 = HIBYTE(v31) == 1;
    if (v29)
      v8 = 0;
    else
      v8 = 2;
    v30 = v8;
    v32 = 0;
    if (v28)
    {
      WebCore::ScrollView::platformScrollbarModes(v3, (uint64_t)&v32 + 1, (uint64_t)&v32);
      v9 = &v32;
      v8 = v30;
      goto LABEL_17;
    }
  }
  else
  {
    if (v6)
      v7 = 0;
    else
      v7 = *(_BYTE *)(v3 + 168) == 1;
    if (v7)
      v8 = 0;
    else
      v8 = 2;
  }
  v9 = (__int16 *)(v3 + 169);
LABEL_17:
  v11 = *(_BYTE *)v9 != 1 || v6 != 0;
  v5 = v8 | v11;
LABEL_24:
  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 832))(*(_QWORD *)(v1 + 72));
  if (this)
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 160))(this, v5);
LABEL_26:
  v12 = *(_QWORD *)(v1 + 8);
  v13 = *(_QWORD *)(v12 + 264);
  if (v13)
  {
    if (*(_BYTE *)(v13 + 79))
    {
      this = *(_QWORD *)(v1 + 168);
      if (this)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 24) + 8) + 40) + 8);
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 528) + 8) + 24) + 8) + 658) & 4) == 0
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 1944) + 248) + 110))
        {
          v26 = 0;
        }
        else
        {
          if (*(_BYTE *)(v13 + 76))
            WebCore::RenderLayerScrollableArea::computeScrollDimensions((WebCore::RenderLayerScrollableArea *)v13);
          v15 = *(_DWORD *)(v13 + 88);
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 96) + 32) + 45) & 4) != 0)
            v16 = *(WebCore::RenderBox **)(*(_QWORD *)(v13 + 96) + 32);
          else
            v16 = 0;
          v17 = WebCore::RenderBox::clientWidth(v16);
          if (v15 <= ((int)(v17 - (v18 & 0xFFFFFFC0) + 32) >> 6) + v17 / 64)
            goto LABEL_38;
          v27 = *(_QWORD *)(*(_QWORD *)(v13 + 96) + 32);
          if ((*(_BYTE *)(v27 + 45) & 4) == 0)
            v27 = 0;
          if ((*(_BYTE *)(v27 + 22) & 1) != 0 && ((*(_DWORD *)(v27 + 96) >> 10) & 7u) - 3 <= 1)
            v19 = 2;
          else
LABEL_38:
            v19 = 0;
          if (*(_BYTE *)(v13 + 76))
            WebCore::RenderLayerScrollableArea::computeScrollDimensions((WebCore::RenderLayerScrollableArea *)v13);
          v20 = *(_DWORD *)(v13 + 92);
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 96) + 32) + 45) & 4) != 0)
            v21 = *(WebCore::RenderBox **)(*(_QWORD *)(v13 + 96) + 32);
          else
            v21 = 0;
          v22 = WebCore::RenderBox::clientHeight(v21);
          if (v20 <= ((int)(v22 - (v23 & 0xFFFFFFC0) + 32) >> 6) + v22 / 64)
            goto LABEL_48;
          v24 = *(_QWORD *)(*(_QWORD *)(v13 + 96) + 32);
          if ((*(_BYTE *)(v24 + 45) & 4) == 0)
            v24 = 0;
          if ((*(_BYTE *)(v24 + 22) & 1) != 0)
            v25 = ((unsigned __int16)*(_DWORD *)(v24 + 96) >> 13) - 3 < 2;
          else
LABEL_48:
            v25 = 0;
          v26 = v25 | v19;
          this = *(_QWORD *)(v1 + 168);
        }
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 840))(this, v26);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerBacking::setContentsNeedDisplay(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  WebCore::RenderLayer *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 24);
  if ((v5 & 1) == 0)
  {
    *(_DWORD *)(v4 + 12) |= 0x80u;
    if ((v5 & 4) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      if (v6)
      {
LABEL_6:
        do
        {
          v7 = *(_DWORD *)(v6 + 12);
          if ((v7 & 2) != 0)
            break;
          *(_DWORD *)(v6 + 12) = v7 | 2;
          if ((*(_BYTE *)(v6 + 24) & 4) == 0)
          {
            while (1)
            {
              v6 = *(_QWORD *)(v6 + 40);
              if (!v6)
                goto LABEL_7;
              if ((*(_BYTE *)(v6 + 24) & 0x4A) != 0)
                goto LABEL_25;
            }
          }
          v6 = *(_QWORD *)(v6 + 40);
LABEL_25:
          ;
        }
        while (v6);
      }
    }
    else
    {
      v6 = v4;
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 40);
        if (!v6)
          break;
        if ((*(_BYTE *)(v6 + 24) & 0x4A) != 0)
          goto LABEL_6;
      }
    }
  }
LABEL_7:
  WebCore::RenderLayer::invalidateEventRegion(v4, 0);
  if (*(_BYTE *)(a1 + 289))
  {
    v16 = *(WebCore::RenderLayer **)(a1 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944)
                    + 248);
    if (*(_BYTE *)(v17 + 1371))
    {
      WebCore::RenderLayer::absoluteBoundingBoxForPainting(v16);
      v25 = __PAIR64__(v19, v18);
      v26 = __PAIR64__(v21, v20);
      WebCore::LocalFrameView::addTrackedRepaintRect(v17, (const WebCore::FloatRect *)&v25);
    }
  }
  v8 = *(_QWORD *)(a1 + 72);
  if (v8 && (*(_WORD *)(v8 + 177) & 0x20) != 0)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 832))(v8);
    if (v13)
    {
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 352))(v13);
      *(float *)&v25 = (float)(int)v22;
      *((float *)&v25 + 1) = (float)SHIDWORD(v22);
      *(float *)&v26 = (float)v23;
      *((float *)&v26 + 1) = (float)v24;
      v14 = *(_QWORD **)(a1 + 72);
    }
    else
    {
      v14 = *(_QWORD **)(a1 + 72);
      v15 = v14[11];
      v25 = 0;
      v26 = v15;
    }
    (*(void (**)(_QWORD *, unint64_t *, uint64_t))(*v14 + 328))(v14, &v25, a2);
  }
  v9 = *(_QWORD *)(a1 + 80);
  if (v9 && (*(_WORD *)(v9 + 177) & 0x20) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 320))(v9);
  v10 = *(_QWORD *)(a1 + 88);
  if (v10 && (*(_WORD *)(v10 + 177) & 0x20) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 320))(v10);
  v11 = *(_QWORD *)(a1 + 112);
  if (v11 && (*(_WORD *)(v11 + 177) & 0x20) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 320))(v11);
  result = *(_QWORD *)(a1 + 168);
  if (result)
  {
    if ((*(_WORD *)(result + 177) & 0x20) != 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 320))(result);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::tiledBacking(WebCore::GraphicsLayerCA *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 78) + 800))(*((_QWORD *)this + 78));
}

uint64_t WebCore::GraphicsLayerCA::setNeedsDisplayInRect(uint64_t result, __int128 *a2, int a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  __int128 v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  __int128 v37;

  if ((*(_WORD *)(result + 177) & 0x20) != 0)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 890) & 2) == 0)
    {
      v32 = *a2;
      if (a3 == 1)
      {
        if (*(float *)&v32 >= 0.0)
          v4 = *(float *)&v32;
        else
          v4 = 0.0;
        if (*((float *)&v32 + 1) >= 0.0)
          v5 = *((float *)&v32 + 1);
        else
          v5 = 0.0;
        v6 = *(float *)(result + 88) + 0.0;
        if (v6 >= (float)(*(float *)&v32 + *((float *)&v32 + 2)))
          v6 = *(float *)&v32 + *((float *)&v32 + 2);
        v7 = *(float *)(result + 92) + 0.0;
        if (v7 >= (float)(*((float *)&v32 + 1) + *((float *)&v32 + 3)))
          v7 = *((float *)&v32 + 1) + *((float *)&v32 + 3);
        if (v4 >= v6 || v5 >= v7)
        {
          v4 = 0.0;
          v5 = 0.0;
          v6 = 0.0;
          v7 = 0.0;
        }
        *(_QWORD *)&v32 = __PAIR64__(LODWORD(v5), LODWORD(v4));
        v9 = v6 - v4;
        v10 = v7 - v5;
        *((float *)&v32 + 2) = v9;
        *((float *)&v32 + 3) = v7 - v5;
      }
      else
      {
        v10 = *((float *)&v32 + 3);
        v9 = *((float *)&v32 + 2);
      }
      if (v9 > 0.0 && v10 > 0.0)
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(result + 24) + 136))(*(_QWORD *)(result + 24)))
        {
          v27 = *(_QWORD *)(v3 + 88);
          *(_QWORD *)&v37 = 0;
          *((_QWORD *)&v37 + 1) = v27;
          WebCore::FloatRect::intersect((float32x2_t *)&v37, (float32x2_t *)&v32);
          {
            WebCore::repaintRectMap(void)::map = 0;
          }
          v34 = 0;
          v35 = v3;
          v33 = 0;
          WTF::HashMap<WebCore::GraphicsLayer const*,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::GraphicsLayer const*>,WTF::HashTraits<WebCore::GraphicsLayer const*>,WTF::HashTraits<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&WebCore::repaintRectMap(void)::map, &v35, (uint64_t)&v33, (uint64_t)v36);
          v29 = v36[0];
          v30 = *(unsigned int *)(v36[0] + 20);
          if ((_DWORD)v30 == *(_DWORD *)(v36[0] + 16))
          {
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>(v36[0] + 8, (unint64_t)&v37);
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)(v36[0] + 8) + 16 * v30) = v37;
            ++*(_DWORD *)(v29 + 20);
          }
          v31 = v33;
          if (v33)
          {
            v33 = 0;
            LODWORD(v34) = 0;
            WTF::fastFree(v31, v28);
          }
        }
        result = v3 + 856;
        v11 = *(unsigned int *)(v3 + 868);
        if ((_DWORD)v11)
        {
          v12 = 0;
          v13 = *(float **)result;
          v15 = *((float *)&v32 + 1);
          v14 = *(float *)&v32;
          v16 = *(float *)&v32 + v9;
          v17 = *((float *)&v32 + 1) + *((float *)&v32 + 3);
          while (1)
          {
            v18 = v13[v12];
            if (v18 <= *(float *)&v32 && (float)(v18 + v13[v12 + 2]) >= v16)
            {
              v19 = v13[v12 + 1];
              if (v19 <= *((float *)&v32 + 1) && (float)(v19 + v13[v12 + 3]) >= v17)
                break;
            }
            v12 += 4;
            if (4 * v11 == v12)
            {
              v20 = *(unsigned int *)(v3 + 868);
              if (v11 <= 0x1F)
                goto LABEL_45;
              if (*((float *)&v32 + 3) > 0.0)
              {
                v21 = v13[2];
                if (v21 <= 0.0 || (v22 = v13[3], v22 <= 0.0))
                {
                  *(_OWORD *)v13 = v32;
                }
                else
                {
                  v23 = v13[1];
                  if (*(float *)&v32 >= *v13)
                    v14 = *v13;
                  if (*((float *)&v32 + 1) >= v23)
                    v15 = v13[1];
                  v24 = v21 + *v13;
                  if (v24 >= v16)
                    v16 = v24;
                  if ((float)(v22 + v23) >= v17)
                    v17 = v22 + v23;
                  *v13 = v14;
                  v13[1] = v15;
                  v13[2] = v16 - v14;
                  v13[3] = v17 - v15;
                }
              }
              goto LABEL_48;
            }
          }
        }
        else
        {
          v20 = 0;
LABEL_45:
          if ((_DWORD)v11 == *(_DWORD *)(v3 + 864))
          {
            result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v20 + 1, (unint64_t)&v32);
            *(_OWORD *)(*(_QWORD *)(v3 + 856) + 16 * *(unsigned int *)(v3 + 868)) = *(_OWORD *)result;
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)(v3 + 856) + 16 * v20) = v32;
          }
          ++*(_DWORD *)(v3 + 868);
LABEL_48:
          if ((*(_WORD *)(v3 + 177) & 1) == 0)
          {
            v25 = *(_QWORD *)(v3 + 616);
            *(_QWORD *)(v3 + 616) = v25 | 0x4000;
            if (!*(_BYTE *)(v3 + 889))
            {
              for (i = *(_QWORD *)(v3 + 200); i; i = *(_QWORD *)(i + 200))
              {
                if ((*(_BYTE *)(i + 890) & 0x40) != 0)
                  break;
                *(_BYTE *)(i + 890) |= 0x40u;
              }
            }
            if (!v25)
              return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v3);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::isTrackingRepaints(WebCore::RenderLayerBacking *this)
{
  WebCore::RenderView *v1;
  WebCore::RenderLayerCompositor *v2;
  WebCore::RenderLayerCompositor *v4;
  WebCore::RenderLayerCompositor *v5;
  WTF *v6;
  void *v7;

  v1 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v2 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
  if (!v2)
  {
    v4 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v2 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v4, v1);
    v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    *((_QWORD *)v1 + 50) = v2;
    if (v5)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v5);
      WTF::fastFree(v6, v7);
      v2 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v1 + 50);
    }
  }
  return *((unsigned __int8 *)v2 + 199);
}

uint64_t WebCore::RenderLayer::invalidateEventRegion(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::MonotonicTime *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t *v17;
  WebCore::Page *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::RenderLayerCompositor *v22;
  WebCore::RenderLayerCompositor *v23;
  WTF *v24;
  void *v25;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(result + 256);
  if (v3 && *(_BYTE *)(v3 + 291))
  {
LABEL_23:
    v7 = result;
  }
  else
  {
    v4 = *(_QWORD *)(result + 80);
    if (!v4 || (v7 = *(_QWORD *)(v4 + 8)) == 0)
    {
      if ((*(_QWORD *)(result + 24) & 4) != 0)
      {
        result = *(_QWORD *)(result + 40);
        if (result)
          goto LABEL_6;
      }
      else
      {
        while (1)
        {
          result = *(_QWORD *)(result + 40);
          if (!result)
            break;
          if ((*(_BYTE *)(result + 24) & 0x4A) != 0)
          {
LABEL_6:
            while (1)
            {
              v5 = *(_QWORD *)(result + 256);
              if (v5)
              {
                if (*(_BYTE *)(v5 + 291))
                  goto LABEL_23;
              }
              v6 = *(_QWORD *)(result + 80);
              if (v6)
              {
                v7 = *(_QWORD *)(v6 + 8);
                if (v7)
                  goto LABEL_16;
              }
              if ((*(_BYTE *)(result + 24) & 4) == 0)
              {
                while (1)
                {
                  result = *(_QWORD *)(result + 40);
                  if (!result)
                    return result;
                  if ((*(_BYTE *)(result + 24) & 0x4A) != 0)
                    goto LABEL_11;
                }
              }
              result = *(_QWORD *)(result + 40);
LABEL_11:
              if (!result)
                return result;
            }
          }
        }
      }
      return result;
    }
  }
LABEL_16:
  v8 = *(_QWORD *)(v7 + 256);
  if (a2 == 3)
  {
    *(_BYTE *)(v8 + 297) = 1;
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8);
    v12 = *(_QWORD *)(v11 + 1944);
    *(_BYTE *)(v12 + 442) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 528) + 8) + 24) + 8) + 112)
                   + 612) & 0xE) != 0)
      *(_BYTE *)(v12 + 441) = 1;
    v13 = *(WTF::MonotonicTime **)(v12 + 400);
    if (!v13)
    {
      v22 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v13 = (WTF::MonotonicTime *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v22, (WebCore::RenderView *)v12);
      v23 = *(WebCore::RenderLayerCompositor **)(v12 + 400);
      *(_QWORD *)(v12 + 400) = v13;
      if (v23)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v23);
        WTF::fastFree(v24, v25);
        v13 = *(WTF::MonotonicTime **)(v12 + 400);
      }
    }
    if ((*((_QWORD *)v13 + 6) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)v13 + 6) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v14 = (uint64_t)v13 + 16;
      *((_QWORD *)v13 + 5) = 0;
      WTF::MonotonicTime::now(v13);
      WebCore::TimerBase::setNextFireTime(v14, v15 + 0.0);
    }
    return 1;
  }
  else
  {
    result = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                           + 8)
                                                                               + 24)
                                                                   + 8));
    if (!result)
      return result;
    if (!*(_BYTE *)(v8 + 291))
      return 0;
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 24) + 8) + 40) + 8);
    if (*(_BYTE *)(*(_QWORD *)(v10 + 1944) + 442))
      goto LABEL_20;
    if (*(_BYTE *)(v10 + 3443))
      goto LABEL_20;
    if (*(_BYTE *)(v10 + 3444))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 528) + 8) + 24) + 8);
      if (*(_BYTE *)(v16 + 1100) || (*(_BYTE *)(*(_QWORD *)(v16 + 112) + 612) & 8) != 0)
        goto LABEL_20;
    }
    v17 = *(uint64_t **)(v10 + 2304);
    if (v17)
    {
      v21 = *v17;
      if (v21)
      {
        if (*(_DWORD *)(v21 - 12))
          goto LABEL_20;
      }
    }
    if ((*(_BYTE *)(v9 + 24) & 1) != 0)
      return 0;
    v18 = *(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 528) + 8) + 24) + 8);
    if ((*(_QWORD *)(*((_QWORD *)v18 + 14) + 664) & 0xC0000000) == 0)
      return 0;
    v19 = WebCore::Page::scrollingCoordinator(v18);
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 32) + 24) + 8) + 40) + 8) + 1944) + 24)
                                                                                            + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 632)
                    + 8);
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 440))(v19, *(_QWORD *)(v20 + 32), *(_QWORD *)(v20 + 40));
    if ((_DWORD)result)
    {
LABEL_20:
      result = 1;
      *(_BYTE *)(*(_QWORD *)(v7 + 256) + 297) = 1;
    }
  }
  return result;
}

unint64_t WebCore::TileController::bounds(WebCore::TileController *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 248))(*((_QWORD *)this + 2));
  return -(int)(float)((float)(*((_DWORD *)this + 74) * *((unsigned __int8 *)this + 304))
                                   / *(float *)(*((_QWORD *)this + 6) + 176)) | ((unint64_t)-(int)(float)((float)(*((_DWORD *)this + 74) * *((unsigned __int8 *)this + 301)) / *(float *)(*((_QWORD *)this + 6) + 176)) << 32);
}

uint64_t WebCore::TileController::setTileCoverage(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 264) != a2)
  {
    *(_DWORD *)(this + 264) = a2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 16) + 48) + 144))(*(_QWORD *)(*(_QWORD *)(this + 16) + 48));
  }
  return this;
}

uint64_t WebCore::TileController::setIsInWindow(uint64_t this, int a2)
{
  uint64_t v2;
  double v3;
  double FireInterval;
  uint64_t v5;

  if (*(unsigned __int8 *)(this + 305) != a2)
  {
    *(_BYTE *)(this + 305) = a2;
    if (a2)
    {
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(this + 16) + 48) + 144))(*(_QWORD *)(*(_QWORD *)(this + 16) + 48));
    }
    else
    {
      v2 = this + 144;
      if ((*(_QWORD *)(this + 176) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(this + 176) & 0xFFFFFFFFFFFFLL) + 8) == 0.0
        || (v5 = this,
            FireInterval = WebCore::TimerBase::nextFireInterval((WebCore::TimerBase *)(this + 144)),
            this = v5,
            FireInterval >= 4.0))
      {
        *(_QWORD *)(this + 168) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        return WebCore::TimerBase::setNextFireTime(v2, v3 + 4.0);
      }
    }
  }
  return this;
}

uint64_t WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = 16 * v10;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        v14 = (WTF *)((char *)v14 + 16);
        *v11++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::RenderLayerCompositor::detachRootLayer(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::HTMLFrameOwnerElement *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (this[28])
  {
    v1 = (uint64_t)this;
    if (*((_DWORD *)this + 54))
    {
      v2 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[1] + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
      if (v2)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 104))(v2, *(_QWORD *)(*(_QWORD *)(v1 + 8) + 248));
      v3 = *(_DWORD *)(v1 + 216);
      if (v3 == 2)
      {
        v4 = *(_QWORD *)(v1 + 256);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 200);
          if (v5)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 912))(v5);
            v18 = *(_QWORD *)(v4 + 200);
            if (v18)
            {
              *(_QWORD *)(v4 + 200) = 0;
              v19 = *(unsigned int *)(v18 + 196);
              if ((_DWORD)v19)
              {
                v20 = *(_QWORD **)(v18 + 184);
                v21 = v20 + 1;
                v22 = *(unsigned int *)(v18 + 196);
                while (*v20 != v4)
                {
                  ++v20;
                  ++v21;
                  if (!--v22)
                    goto LABEL_8;
                }
                *v20 = 0;
                if (*(_DWORD *)(v4 + 8) == 1)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
                  v19 = *(unsigned int *)(v18 + 196);
                }
                else
                {
                  --*(_DWORD *)(v4 + 8);
                }
                memmove(v20, v20 + 1, *(_QWORD *)(v18 + 184) + 8 * v19 - (_QWORD)v21);
                --*(_DWORD *)(v18 + 196);
              }
            }
          }
        }
        else
        {
          WebCore::GraphicsLayer::removeFromParent(*(WebCore::GraphicsLayer **)(v1 + 224));
        }
LABEL_8:
        v6 = *(_QWORD *)(v1 + 8);
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 528);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 120);
            if (v9)
            {
              v10 = *(WebCore::HTMLFrameOwnerElement **)(v9 + 8);
              if (v10)
              {
                WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition(v10);
                v6 = *(_QWORD *)(v1 + 8);
              }
            }
          }
        }
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 248) + 328) + 296);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 1944);
          if (v12)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v12 + 144) + 256);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 224);
              if (v14)
              {
                v15 = *(_QWORD *)(v13 + 232);
                v16 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 528) + 8)
                                                                                        + 24)
                                                                            + 8));
                if (v16)
                {
                  v17 = v16;
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 104))(v16, *(_QWORD *)(*(_QWORD *)(v1 + 8) + 248));
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 248))(v17, v14, v15);
                }
              }
            }
          }
        }
      }
      else if (v3 == 1)
      {
        v23 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                            + 8)
                                                                                + 24)
                                                                    + 8));
        if (v23)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 104))(v23, *(_QWORD *)(*(_QWORD *)(v1 + 8) + 248));
        v24 = *(_QWORD *)(v1 + 8);
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 8) + 40)
                                                                                                + 8)
                                                                                    + 528)
                                                                        + 8)
                                                            + 24)
                                                + 8)
                                    + 48)
                        + 16);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v25 + 984))(v25, *(_QWORD *)(*(_QWORD *)(v24 + 248) + 328), 0);
      }
      *(_DWORD *)(v1 + 216) = 0;
      return WebCore::RenderLayerCompositor::rootLayerAttachmentChanged((_QWORD *)v1);
    }
  }
  return this;
}

unsigned __int8 **WebCore::AsyncScrollingCoordinator::frameViewWillBeDetached(WebCore::AsyncScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  unsigned __int8 **result;
  char *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  float v13;
  uint64_t v15;
  uint64_t v16;

  result = (unsigned __int8 **)(*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 40))(this);
  if ((_DWORD)result)
  {
    v5 = (char *)a2 + 64;
    result = (unsigned __int8 **)WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v16, this, (uint64_t)v5);
    v7 = v16;
    if (v16)
    {
      v8 = *(unsigned __int8 *)(v16 + 16);
      v9 = v8 > 5;
      v10 = (1 << v8) & 0x2B;
      if (!v9 && v10 != 0)
      {
        v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)v5 + 832))(v5, 0, 1);
        v13 = (float)SHIDWORD(v12);
        if (*(float *)(v7 + 152) != (float)(int)v12 || *(float *)(v7 + 156) != v13)
        {
          *(float *)(v7 + 152) = (float)(int)v12;
          *(float *)(v7 + 156) = v13;
          v15 = *(_QWORD *)(v7 + 40);
          if ((v15 & 0x10) == 0)
          {
            *(_QWORD *)(v7 + 40) = v15 | 0x10;
            WebCore::ScrollingStateTree::setHasChangedProperties(*(WebCore::ScrollingStateTree **)(v7 + 48), 1);
          }
        }
      }
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v7 + 8), v6);
    }
  }
  return result;
}

double WebCore::TimerBase::nextFireInterval(WebCore::TimerBase *this)
{
  double v2;
  double v3;
  double v4;

  WTF::MonotonicTime::now(this);
  v3 = 0.0;
  v4 = 0.0;
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) != 0)
    v4 = *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8);
  if (v4 >= v2)
    return v4 - v2;
  return v3;
}

uint64_t WebCore::Document::eventTrackingRegions@<X0>(WebCore::Document *this@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  WebCore *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::EventTarget *v15;
  uint64_t v16;
  WebCore::Quirks *v17;
  uint64_t v18;
  uint64_t v19;
  const WebCore::EventTarget *v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  WTF *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  void *v31;
  WTF *v32;
  WTF *v33;
  WTF *v35;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  void *v41;
  WTF *v42;
  WTF *v43;
  WTF *v45;
  void *v47;
  WTF *v48;
  WTF *v49;
  WTF *v51;
  void *v53;
  WTF *v54;
  WTF *v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  WebCore::Quirks *v113;
  WebCore::Quirks *v114;
  WebCore::Quirks *v115;
  WebCore::Quirks *v116;
  WebCore::Quirks *v117;
  WebCore::Quirks *v118;
  WebCore::Quirks *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WebCore::EventTarget *v132;
  WebCore::EventTarget *v133;
  WebCore::EventTarget *v134;
  WebCore::EventTarget *v135;
  WebCore::EventTarget *v136;
  WebCore::EventTarget *v137;
  WebCore::EventTarget *v138;
  __int128 v139;
  WebCore::Document *v140;
  uint64_t v141;
  __int128 *v142;
  __int128 v143;
  WTF *v144;
  WebCore::EventTarget *v145;
  __int128 v146;
  WTF *v147;
  char v148;

  kdebug_trace();
  v4 = (pthread_mutex_t *)((char *)this + 560);
  v5 = (WebCore *)pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  v6 = (uint64_t *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v7 = *((_QWORD *)this + 87);
  v145 = (WebCore::EventTarget *)v7;
  if (v7 && *(_DWORD *)(v7 + 236))
  {
    v143 = xmmword_1969F08A0;
    v144 = 0;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(v5);
    v10 = *(_QWORD **)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD **)(v9 + 40);
    }
    *(_QWORD *)&v139 = v10;
    *((_QWORD *)&v139 + 1) = &v145;
    v140 = this;
    v141 = a2;
    v142 = &v143;
    v148 = 14;
    v11 = *(_QWORD *)(v7 + 16);
    if ((v11 & 0x1000000000000) != 0)
    {
      v62 = v11 & 0xFFFFFFFFFFFFLL;
      v63 = *(unsigned int *)(v62 + 28);
      if ((_DWORD)v63)
      {
        v64 = *(_QWORD *)(v62 + 16);
        v65 = v10[263];
        v66 = 32 * v63;
        v67 = v66;
        v68 = (_QWORD *)v64;
        while (*v68 != v65)
        {
          v68 += 4;
          v67 -= 32;
          if (!v67)
            goto LABEL_9;
        }
        while (*(_QWORD *)v64 != v65)
        {
          v64 += 32;
          v66 -= 32;
          if (!v66)
            goto LABEL_176;
        }
        v120 = *(unsigned int *)(v64 + 20);
        if (!(_DWORD)v120)
        {
LABEL_176:
          WebCore::Region::operator=(a2, &v143);
          goto LABEL_9;
        }
        v121 = *(_QWORD *)(v64 + 8);
        v122 = 8 * v120;
        while ((*(_BYTE *)(*(_QWORD *)v121 + 4) & 2) != 0)
        {
          v121 += 8;
          v122 -= 8;
          if (!v122)
            goto LABEL_176;
        }
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::inlineSet<WebCore::EventTrackingRegionsEventType const&,WebCore::Region const&>((uint64_t)&v146, (uint64_t *)(a2 + 24), &v148, &v143);
      }
    }
LABEL_9:
    v148 = 13;
    v12 = *((_QWORD *)v145 + 2);
    if ((v12 & 0x1000000000000) != 0)
    {
      v69 = v12 & 0xFFFFFFFFFFFFLL;
      v70 = *(unsigned int *)(v69 + 28);
      if ((_DWORD)v70)
      {
        v71 = *(_QWORD *)(v69 + 16);
        v72 = v10[262];
        v73 = 32 * v70;
        v74 = v73;
        v75 = (_QWORD *)v71;
        while (*v75 != v72)
        {
          v75 += 4;
          v74 -= 32;
          if (!v74)
            goto LABEL_10;
        }
        while (*(_QWORD *)v71 != v72)
        {
          v71 += 32;
          v73 -= 32;
          if (!v73)
            goto LABEL_179;
        }
        v123 = *(unsigned int *)(v71 + 20);
        if (!(_DWORD)v123)
        {
LABEL_179:
          WebCore::Region::operator=(a2, &v143);
          goto LABEL_10;
        }
        v124 = *(_QWORD *)(v71 + 8);
        v125 = 8 * v123;
        while ((*(_BYTE *)(*(_QWORD *)v124 + 4) & 2) != 0)
        {
          v124 += 8;
          v125 -= 8;
          if (!v125)
            goto LABEL_179;
        }
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::inlineSet<WebCore::EventTrackingRegionsEventType const&,WebCore::Region const&>((uint64_t)&v146, (uint64_t *)(a2 + 24), &v148, &v143);
      }
    }
LABEL_10:
    v148 = 11;
    v13 = *((_QWORD *)v145 + 2);
    if ((v13 & 0x1000000000000) != 0)
    {
      v76 = v13 & 0xFFFFFFFFFFFFLL;
      v77 = *(unsigned int *)(v76 + 28);
      if ((_DWORD)v77)
      {
        v78 = *(_QWORD *)(v76 + 16);
        v79 = v10[260];
        v80 = 32 * v77;
        v81 = v80;
        v82 = (_QWORD *)v78;
        while (*v82 != v79)
        {
          v82 += 4;
          v81 -= 32;
          if (!v81)
            goto LABEL_11;
        }
        while (*(_QWORD *)v78 != v79)
        {
          v78 += 32;
          v80 -= 32;
          if (!v80)
            goto LABEL_182;
        }
        v126 = *(unsigned int *)(v78 + 20);
        if (!(_DWORD)v126)
        {
LABEL_182:
          WebCore::Region::operator=(a2, &v143);
          goto LABEL_11;
        }
        v127 = *(_QWORD *)(v78 + 8);
        v128 = 8 * v126;
        while ((*(_BYTE *)(*(_QWORD *)v127 + 4) & 2) != 0)
        {
          v127 += 8;
          v128 -= 8;
          if (!v128)
            goto LABEL_182;
        }
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::inlineSet<WebCore::EventTrackingRegionsEventType const&,WebCore::Region const&>((uint64_t)&v146, (uint64_t *)(a2 + 24), &v148, &v143);
      }
    }
LABEL_11:
    v148 = 12;
    v14 = *((_QWORD *)v145 + 2);
    if ((v14 & 0x1000000000000) != 0)
    {
      v83 = v14 & 0xFFFFFFFFFFFFLL;
      v84 = *(unsigned int *)(v83 + 28);
      if ((_DWORD)v84)
      {
        v85 = *(_QWORD *)(v83 + 16);
        v86 = v10[261];
        v87 = 32 * v84;
        v88 = v87;
        v89 = (_QWORD *)v85;
        while (*v89 != v86)
        {
          v89 += 4;
          v88 -= 32;
          if (!v88)
            goto LABEL_12;
        }
        while (*(_QWORD *)v85 != v86)
        {
          v85 += 32;
          v87 -= 32;
          if (!v87)
            goto LABEL_185;
        }
        v129 = *(unsigned int *)(v85 + 20);
        if (!(_DWORD)v129)
        {
LABEL_185:
          WebCore::Region::operator=(a2, &v143);
          goto LABEL_12;
        }
        v130 = *(_QWORD *)(v85 + 8);
        v131 = 8 * v129;
        while ((*(_BYTE *)(*(_QWORD *)v130 + 4) & 2) != 0)
        {
          v130 += 8;
          v131 -= 8;
          if (!v131)
            goto LABEL_185;
        }
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::inlineSet<WebCore::EventTrackingRegionsEventType const&,WebCore::Region const&>((uint64_t)&v146, (uint64_t *)(a2 + 24), &v148, &v143);
      }
    }
LABEL_12:
    v15 = v145;
    v16 = *((_QWORD *)v145 + 2);
    if ((v16 & 0x1000000000000) != 0)
    {
      v90 = v16 & 0x1000000000000;
      v91 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v91)
      {
        v92 = *(_QWORD **)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
        v93 = 32 * v91;
        while (*v92 != v10[193])
        {
          v92 += 4;
          v93 -= 32;
          if (!v93)
          {
            if (!v90)
              goto LABEL_13;
            goto LABEL_145;
          }
        }
        v113 = (WebCore::Quirks *)*((_QWORD *)this + 86);
        if (!v113)
        {
          v132 = v145;
          v113 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
          v15 = v132;
        }
        WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v113, v15);
        WebCore::Region::operator=(a2, &v143);
        v15 = v145;
        v16 = *((_QWORD *)v145 + 2);
        v90 = v16 & 0x1000000000000;
        if ((v16 & 0x1000000000000) != 0)
          goto LABEL_145;
      }
      else
      {
LABEL_145:
        v94 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFLL) + 0x1C);
        if ((_DWORD)v94)
        {
          v95 = *(_QWORD **)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
          v96 = 32 * v94;
          while (*v95 != v10[187])
          {
            v95 += 4;
            v96 -= 32;
            if (!v96)
            {
              if (!v90)
                goto LABEL_13;
              goto LABEL_150;
            }
          }
          v114 = (WebCore::Quirks *)*((_QWORD *)this + 86);
          if (!v114)
          {
            v133 = v15;
            v114 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
            v15 = v133;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v114, v15);
          WebCore::Region::operator=(a2, &v143);
          v15 = v145;
          v16 = *((_QWORD *)v145 + 2);
          v90 = v16 & 0x1000000000000;
          if ((v16 & 0x1000000000000) != 0)
            goto LABEL_150;
        }
        else
        {
LABEL_150:
          v97 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFLL) + 0x1C);
          if ((_DWORD)v97)
          {
            v98 = *(_QWORD **)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
            v99 = 32 * v97;
            while (*v98 != v10[186])
            {
              v98 += 4;
              v99 -= 32;
              if (!v99)
              {
                if (!v90)
                  goto LABEL_13;
                goto LABEL_155;
              }
            }
            v115 = (WebCore::Quirks *)*((_QWORD *)this + 86);
            if (!v115)
            {
              v134 = v15;
              v115 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
              v15 = v134;
            }
            WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v115, v15);
            WebCore::Region::operator=(a2, &v143);
            v15 = v145;
            v16 = *((_QWORD *)v145 + 2);
            v90 = v16 & 0x1000000000000;
            if ((v16 & 0x1000000000000) != 0)
              goto LABEL_155;
          }
          else
          {
LABEL_155:
            v100 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFLL) + 0x1C);
            if ((_DWORD)v100)
            {
              v101 = *(_QWORD **)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
              v102 = 32 * v100;
              while (*v101 != v10[191])
              {
                v101 += 4;
                v102 -= 32;
                if (!v102)
                {
                  if (!v90)
                    goto LABEL_13;
                  goto LABEL_160;
                }
              }
              v116 = (WebCore::Quirks *)*((_QWORD *)this + 86);
              if (!v116)
              {
                v135 = v15;
                v116 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
                v15 = v135;
              }
              WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v116, v15);
              WebCore::Region::operator=(a2, &v143);
              v15 = v145;
              v16 = *((_QWORD *)v145 + 2);
              v90 = v16 & 0x1000000000000;
              if ((v16 & 0x1000000000000) != 0)
                goto LABEL_160;
            }
            else
            {
LABEL_160:
              v103 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFLL) + 0x1C);
              if ((_DWORD)v103)
              {
                v104 = *(_QWORD **)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
                v105 = 32 * v103;
                while (*v104 != v10[194])
                {
                  v104 += 4;
                  v105 -= 32;
                  if (!v105)
                  {
                    if (!v90)
                      goto LABEL_13;
                    goto LABEL_165;
                  }
                }
                v117 = (WebCore::Quirks *)*((_QWORD *)this + 86);
                if (!v117)
                {
                  v136 = v15;
                  v117 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
                  v15 = v136;
                }
                WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v117, v15);
                WebCore::Region::operator=(a2, &v143);
                v15 = v145;
                v16 = *((_QWORD *)v145 + 2);
                if ((v16 & 0x1000000000000) != 0)
                  goto LABEL_165;
              }
              else
              {
LABEL_165:
                v106 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFLL) + 0x1C);
                if (!(_DWORD)v106)
                  goto LABEL_169;
                v107 = *(_QWORD **)((v16 & 0xFFFFFFFFFFFFLL) + 0x10);
                v108 = 32 * v106;
                while (*v107 != v10[192])
                {
                  v107 += 4;
                  v108 -= 32;
                  if (!v108)
                    goto LABEL_169;
                }
                v118 = (WebCore::Quirks *)*((_QWORD *)this + 86);
                if (!v118)
                {
                  v137 = v15;
                  v118 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
                  v15 = v137;
                }
                WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v118, v15);
                WebCore::Region::operator=(a2, &v143);
                v15 = v145;
                v16 = *((_QWORD *)v145 + 2);
                if ((v16 & 0x1000000000000) != 0)
                {
LABEL_169:
                  v109 = v16 & 0xFFFFFFFFFFFFLL;
                  v110 = *(unsigned int *)(v109 + 28);
                  if ((_DWORD)v110)
                  {
                    v111 = *(_QWORD **)(v109 + 16);
                    v112 = 32 * v110;
                    while (*v111 != v10[188])
                    {
                      v111 += 4;
                      v112 -= 32;
                      if (!v112)
                        goto LABEL_13;
                    }
                    v119 = (WebCore::Quirks *)*((_QWORD *)this + 86);
                    if (!v119)
                    {
                      v138 = v15;
                      v119 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
                      v15 = v138;
                    }
                    WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v119, v15);
                    WebCore::Region::operator=(a2, &v143);
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_13:
    v17 = (WebCore::Quirks *)*((_QWORD *)this + 86);
    if (!v17)
      v17 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(this);
    v18 = *((_QWORD *)v145 + 9);
    if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
    {
      if (*(_BYTE *)(v19 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1941CF024);
      }
      v20 = (const WebCore::EventTarget *)(v19 - 288);
    }
    else
    {
      v20 = 0;
    }
    if (WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v17, v20))
    {
      WebCore::Document::eventTrackingRegions(void)const::$_0::operator()((uint64_t)&v139, 0);
      WebCore::Document::eventTrackingRegions(void)const::$_0::operator()((uint64_t)&v139, 1);
      WebCore::Document::eventTrackingRegions(void)const::$_0::operator()((uint64_t)&v139, 2);
    }
    v22 = v144;
    v144 = 0;
    if (v22)
    {
      v23 = (WTF *)*((_QWORD *)v22 + 18);
      if ((WTF *)((char *)v22 + 160) != v23 && v23 != 0)
      {
        *((_QWORD *)v22 + 18) = 0;
        *((_DWORD *)v22 + 38) = 0;
        WTF::fastFree(v23, v21);
      }
      v25 = *(WTF **)v22;
      if ((WTF *)((char *)v22 + 16) != *(WTF **)v22 && v25)
      {
        *(_QWORD *)v22 = 0;
        *((_DWORD *)v22 + 2) = 0;
        WTF::fastFree(v25, v21);
      }
      WTF::fastFree(v22, v21);
    }
  }
  v26 = *((unsigned int *)this + 163);
  if ((_DWORD)v26)
  {
    v27 = (char *)*((_QWORD *)this + 80);
    v28 = 24 * v26;
    while (!v27[20])
    {
      v139 = *(_OWORD *)(v27 + 4);
      v140 = 0;
      WebCore::Region::unite((WTF *)a2, (const WebCore::Region *)&v139);
      v32 = v140;
      v140 = 0;
      if (v32)
        goto LABEL_44;
LABEL_55:
      v27 += 24;
      v28 -= 24;
      if (!v28)
        goto LABEL_56;
    }
    v29 = *v27;
    v146 = *(_OWORD *)(v27 + 4);
    v147 = 0;
    LOBYTE(v143) = v29;
    if (SDWORD2(v146) < 1 || SHIDWORD(v146) <= 0)
      goto LABEL_55;
    WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::add<WebCore::Region const&>((uint64_t *)(a2 + 24), &v143, &v146, (uint64_t)&v139);
    if (!(_BYTE)v140)
      WebCore::Region::unite((WTF *)(v139 + 8), (const WebCore::Region *)&v146);
    v32 = v147;
    v147 = 0;
    if (!v32)
      goto LABEL_55;
LABEL_44:
    v33 = (WTF *)*((_QWORD *)v32 + 18);
    if ((WTF *)((char *)v32 + 160) != v33 && v33 != 0)
    {
      *((_QWORD *)v32 + 18) = 0;
      *((_DWORD *)v32 + 38) = 0;
      WTF::fastFree(v33, v31);
    }
    v35 = *(WTF **)v32;
    if ((WTF *)((char *)v32 + 16) != *(WTF **)v32 && v35 != 0)
    {
      *(_QWORD *)v32 = 0;
      *((_DWORD *)v32 + 2) = 0;
      WTF::fastFree(v35, v31);
    }
    WTF::fastFree(v32, v31);
    goto LABEL_55;
  }
LABEL_56:
  v37 = *((unsigned int *)this + 167);
  if ((_DWORD)v37)
  {
    v38 = 16 * v37;
    v39 = (__int128 *)*((_QWORD *)this + 82);
    do
    {
      v146 = *v39;
      v147 = 0;
      LOBYTE(v143) = 14;
      if (SDWORD2(v146) >= 1 && SHIDWORD(v146) > 0)
      {
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::add<WebCore::Region const&>(v6, &v143, &v146, (uint64_t)&v139);
        if (!(_BYTE)v140)
          WebCore::Region::unite((WTF *)(v139 + 8), (const WebCore::Region *)&v146);
        v42 = v147;
        v147 = 0;
        if (v42)
        {
          v43 = (WTF *)*((_QWORD *)v42 + 18);
          if ((WTF *)((char *)v42 + 160) != v43 && v43 != 0)
          {
            *((_QWORD *)v42 + 18) = 0;
            *((_DWORD *)v42 + 38) = 0;
            WTF::fastFree(v43, v41);
          }
          v45 = *(WTF **)v42;
          if ((WTF *)((char *)v42 + 16) != *(WTF **)v42 && v45 != 0)
          {
            *(_QWORD *)v42 = 0;
            *((_DWORD *)v42 + 2) = 0;
            WTF::fastFree(v45, v41);
          }
          WTF::fastFree(v42, v41);
        }
      }
      v146 = *v39;
      v147 = 0;
      LOBYTE(v143) = 13;
      if (SDWORD2(v146) >= 1 && SHIDWORD(v146) > 0)
      {
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::add<WebCore::Region const&>(v6, &v143, &v146, (uint64_t)&v139);
        if (!(_BYTE)v140)
          WebCore::Region::unite((WTF *)(v139 + 8), (const WebCore::Region *)&v146);
        v48 = v147;
        v147 = 0;
        if (v48)
        {
          v49 = (WTF *)*((_QWORD *)v48 + 18);
          if ((WTF *)((char *)v48 + 160) != v49 && v49 != 0)
          {
            *((_QWORD *)v48 + 18) = 0;
            *((_DWORD *)v48 + 38) = 0;
            WTF::fastFree(v49, v47);
          }
          v51 = *(WTF **)v48;
          if ((WTF *)((char *)v48 + 16) != *(WTF **)v48 && v51 != 0)
          {
            *(_QWORD *)v48 = 0;
            *((_DWORD *)v48 + 2) = 0;
            WTF::fastFree(v51, v47);
          }
          WTF::fastFree(v48, v47);
        }
      }
      v146 = *v39;
      v147 = 0;
      LOBYTE(v143) = 11;
      if (SDWORD2(v146) >= 1 && SHIDWORD(v146) > 0)
      {
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::add<WebCore::Region const&>(v6, &v143, &v146, (uint64_t)&v139);
        if (!(_BYTE)v140)
          WebCore::Region::unite((WTF *)(v139 + 8), (const WebCore::Region *)&v146);
        v54 = v147;
        v147 = 0;
        if (v54)
        {
          v55 = (WTF *)*((_QWORD *)v54 + 18);
          if ((WTF *)((char *)v54 + 160) != v55 && v55)
          {
            *((_QWORD *)v54 + 18) = 0;
            *((_DWORD *)v54 + 38) = 0;
            WTF::fastFree(v55, v53);
          }
          v56 = *(WTF **)v54;
          if ((WTF *)((char *)v54 + 16) != *(WTF **)v54 && v56)
          {
            *(_QWORD *)v54 = 0;
            *((_DWORD *)v54 + 2) = 0;
            WTF::fastFree(v56, v53);
          }
          WTF::fastFree(v54, v53);
        }
      }
      v146 = *v39;
      v147 = 0;
      LOBYTE(v143) = 12;
      if (SDWORD2(v146) >= 1 && SHIDWORD(v146) > 0)
      {
        WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::add<WebCore::Region const&>(v6, &v143, &v146, (uint64_t)&v139);
        if (!(_BYTE)v140)
          WebCore::Region::unite((WTF *)(v139 + 8), (const WebCore::Region *)&v146);
        v58 = v147;
        v147 = 0;
        if (v58)
        {
          v59 = (WTF *)*((_QWORD *)v58 + 18);
          if ((WTF *)((char *)v58 + 160) != v59 && v59)
          {
            *((_QWORD *)v58 + 18) = 0;
            *((_DWORD *)v58 + 38) = 0;
            WTF::fastFree(v59, v57);
          }
          v60 = *(WTF **)v58;
          if ((WTF *)((char *)v58 + 16) != *(WTF **)v58 && v60)
          {
            *(_QWORD *)v58 = 0;
            *((_DWORD *)v58 + 2) = 0;
            WTF::fastFree(v60, v57);
          }
          WTF::fastFree(v58, v57);
        }
      }
      ++v39;
      v38 -= 16;
    }
    while (v38);
  }
  pthread_mutex_unlock(v4);
  return kdebug_trace();
}

void WebCore::EventRegionContext::unite(WebCore::EventRegionContext *this, const WebCore::FloatRoundedRect *a2, WebCore::RenderObject *a3, const WebCore::RenderStyle *a4, char a5)
{
  float v8;
  float v10;
  double v11;
  BOOL v12;
  unsigned int v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  double v18;
  int v20;
  double v21;
  int v23;
  uint64_t v24;
  signed int v25;
  unsigned int v26;
  uint64_t v27;
  signed int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unsigned int v40;
  uint64_t v41;
  float64x2_t v42;
  WTF *v43;
  uint64_t v44;
  int *v45;
  int *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  BOOL v52;
  float v53;
  float v54;
  BOOL v55;
  float v56;
  float v57;
  BOOL v58;
  float v59;
  float v60;
  BOOL v61;
  float v62;
  unsigned int v63;
  unint64_t v64;
  float v65;
  unsigned int v66;
  float v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  WTF *v71;
  float v72;
  float v73;
  float v74;
  int v75;
  int v76;
  float v78;
  WTF *v80;
  WTF *v81;
  WTF *v82;
  WTF *v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  BOOL v90;
  int v91;
  int v92;
  BOOL v93;
  int v94;
  int v95;
  WTF *v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  WTF *v102;
  WTF *v103;
  WTF *v104;
  WTF *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  char v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t *v119;
  int v120;
  int v121;
  int v122;
  _DWORD *v123;
  WTF *v124;
  uint64_t v125;
  WTF *v126;
  WTF *v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  WTF *v131;
  WTF *v132;
  WTF *v133;
  BOOL v134;
  unsigned int v135;
  _BOOL4 v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  _BOOL4 v140;
  uint64_t v141;
  float v142;
  float v143;
  float v144;
  double v145;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  unint64_t v152;
  float v153;
  float v154;
  float v155;
  double v156;
  unsigned int v158;
  double v159;
  unint64_t v160;
  float v161;
  float v162;
  float v163;
  float v164;
  double v165;
  unsigned int v166;
  double v167;
  unint64_t v168;
  float v169;
  float v170;
  double v171;
  unsigned int v172;
  double v173;
  unint64_t v174;
  uint64_t v175;
  BOOL v176;
  WTF *v177;
  WTF *v178;
  const void **v179;
  int v180;
  int v181;
  int v182;
  int v183;
  WTF *v184;
  WTF *v185;
  WTF *v186;
  WTF *v187;
  WTF *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _DWORD *v192;
  uint64_t v193;
  WTF *v194;
  WTF *v195;
  uint64_t v196;
  WTF *v197;
  uint64_t v198;
  WTF *v199;
  uint64_t v200;
  __int128 *v201;
  uint64_t v202;
  __int128 v203;
  WTF *v204;
  WTF *v205;
  WTF *v206;
  WTF *v207;
  WTF *v208;
  WTF *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  _OWORD *v213;
  uint64_t v214;
  __int128 *v215;
  uint64_t v216;
  __int128 v217;
  unint64_t v218;
  WTF *v219;
  int v220;
  int v221;
  WTF *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _DWORD *v226;
  unsigned __int8 v227;
  unint64_t v228;
  unsigned int v229;
  unsigned int v230;
  WTF *v231;
  WTF *v232;
  uint64_t v233;
  _DWORD *v234;
  WTF *v235;
  WTF *v236;
  WTF *v237;
  uint64_t v239;
  uint64_t v240;
  WTF *v241;
  uint64_t v243;
  unint64_t v244;
  WTF *v245;
  unint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  BOOL v251;
  int v252;
  int v253;
  BOOL v254;
  int v255;
  int v257;
  int v258;
  uint64_t *v260;
  BOOL v261;
  WTF *v262;
  WTF *v263;
  int v264;
  int v265;
  BOOL v266;
  int v268;
  int v269;
  int v270;
  int v271;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t v278;
  WTF *v279;
  WTF *v281;
  WTF *v283;
  WTF *v284;
  WTF *v285;
  WTF *v286;
  WTF *v287;
  uint64_t v288;
  WTF *v289;
  WTF *v291;
  WTF *v293;
  WTF *v294;
  WTF *v295;
  const void **v296;
  int v297;
  int v298;
  int v299;
  int v300;
  WTF *v301;
  char v302;
  WTF *v303;
  WTF *v304;
  WTF *v306;
  uint64_t v308;
  WTF *v309;
  WTF *v311;
  WTF *v313;
  uint64_t v314;
  WTF *v315;
  uint64_t v316;
  WTF *v317;
  uint64_t v318;
  __int128 *v319;
  uint64_t v320;
  __int128 v321;
  uint64_t v322;
  WTF *v323;
  uint64_t v324;
  WTF *v325;
  uint64_t v326;
  __int128 *v327;
  uint64_t v328;
  __int128 v329;
  const WebCore::RenderStyle *v330;
  const WebCore::RenderStyle *v331;
  int v333;
  char v334;
  int v335;
  int v336;
  __int128 v337;
  WTF *v338;
  __int128 v339;
  WTF *v340;
  __int128 v341;
  WTF *v342;
  float64x2_t v343;
  float64x2_t v344;
  __int128 v345;
  __int128 v346;
  WTF *v347;
  WTF *v348;
  uint64_t v349;
  int v350;
  int v351;
  WTF *v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  WTF *v358;
  unint64_t v359;
  WTF *v360[16];
  WTF *v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  int v365;
  uint64_t v366;
  WTF *v367;
  uint64_t v368;
  _QWORD v369[16];
  WTF *v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  int v374;
  uint64_t v375;

  LODWORD(v358) = 20;
  v338 = 0;
  v337 = 0uLL;
  v8 = *((float *)a2 + 2);
  if (v8 <= 0.0)
    goto LABEL_46;
  v10 = *((float *)a2 + 3);
  if (v10 <= 0.0)
    goto LABEL_46;
  v11 = *(float *)a2 * 64.0;
  v12 = v11 >= 2147483650.0 || v11 <= -2147483650.0;
  if (!v12)
    goto LABEL_7;
  if (v11 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
    goto LABEL_8;
  }
  if (v11 <= -2147483650.0)
    v13 = 0x80000000;
  else
LABEL_7:
    v13 = (int)v11;
LABEL_8:
  v14 = *((float *)a2 + 1) * 64.0;
  if (v14 < 2147483650.0 && v14 > -2147483650.0)
    goto LABEL_12;
  if (v14 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFFLL;
    goto LABEL_13;
  }
  if (v14 <= -2147483650.0)
    v16 = 0x80000000;
  else
LABEL_12:
    v16 = (int)v14;
LABEL_13:
  v17 = v13;
  v18 = v8 * 64.0;
  if (v18 < 2147483650.0 && v18 > -2147483650.0)
    goto LABEL_17;
  if (v18 >= 2147483650.0)
  {
    v20 = 0x7FFFFFFF;
    goto LABEL_18;
  }
  if (v18 <= -2147483650.0)
    v20 = 0x80000000;
  else
LABEL_17:
    v20 = (int)v18;
LABEL_18:
  v21 = v10 * 64.0;
  if (v21 < 2147483650.0 && v21 > -2147483650.0)
    goto LABEL_22;
  if (v21 >= 2147483650.0)
  {
    v23 = 0x7FFFFFFF;
    goto LABEL_23;
  }
  if (v21 <= -2147483650.0)
    v23 = 0x80000000;
  else
LABEL_22:
    v23 = (int)v21;
LABEL_23:
  v24 = ((int)v17 >> 6);
  if (v20)
  {
    v25 = v17 + v20;
    if (__OFADD__((_DWORD)v17, v20))
      v25 = (v17 >> 31) + 0x7FFFFFFF;
    if (v25 > 2147483583)
    {
      v26 = 0x1FFFFFF;
    }
    else if (v25 < 0)
    {
      v26 = -(-v25 >> 6);
    }
    else
    {
      v26 = (v25 + 63) >> 6;
    }
  }
  else
  {
    v26 = (int)v17 >> 6;
  }
  v27 = ((int)v16 >> 6);
  if (v23)
  {
    v28 = v16 + v23;
    if (__OFADD__((_DWORD)v16, v23))
      v28 = (v16 >> 31) + 0x7FFFFFFF;
    if (v28 > 2147483583)
    {
      v29 = 0x1FFFFFF;
    }
    else if (v28 < 0)
    {
      v29 = -(-v28 >> 6);
    }
    else
    {
      v29 = (v28 + 63) >> 6;
    }
  }
  else
  {
    v29 = (int)v16 >> 6;
  }
  v30 = v26 - v24;
  if ((int)v30 >= 1)
  {
    v31 = v29 - v27;
    if ((int)v31 >= 1)
    {
      *(_QWORD *)&v337 = v24 | (v27 << 32);
      *((_QWORD *)&v337 + 1) = v30 | (v31 << 32);
    }
  }
  v32 = *((float *)a2 + 4);
  if (v32 == 0.0)
    goto LABEL_300;
  if (v32 < 0.0)
    v32 = -v32;
  if (v32 < 0.00000011921)
  {
LABEL_300:
    v33 = *((float *)a2 + 5);
    if (v33 == 0.0)
      goto LABEL_723;
    if (v33 < 0.0)
      v33 = -v33;
    if (v33 < 0.00000011921)
    {
LABEL_723:
      v34 = *((float *)a2 + 6);
      if (v34 == 0.0)
        goto LABEL_724;
      if (v34 < 0.0)
        v34 = -v34;
      if (v34 < 0.00000011921)
      {
LABEL_724:
        v35 = *((float *)a2 + 7);
        if (v35 == 0.0)
          goto LABEL_725;
        if (v35 < 0.0)
          v35 = -v35;
        if (v35 < 0.00000011921)
        {
LABEL_725:
          v36 = *((float *)a2 + 8);
          if (v36 == 0.0)
            goto LABEL_726;
          if (v36 < 0.0)
            v36 = -v36;
          if (v36 < 0.00000011921)
          {
LABEL_726:
            v37 = *((float *)a2 + 9);
            if (v37 == 0.0)
              goto LABEL_727;
            if (v37 < 0.0)
              v37 = -v37;
            if (v37 < 0.00000011921)
            {
LABEL_727:
              v38 = *((float *)a2 + 10);
              if (v38 == 0.0)
                goto LABEL_728;
              if (v38 < 0.0)
                v38 = -v38;
              if (v38 < 0.00000011921)
              {
LABEL_728:
                v39 = *((float *)a2 + 11);
                if (v39 == 0.0)
                  goto LABEL_46;
                if (v39 < 0.0)
                  v39 = -v39;
                if (v39 < 0.00000011921)
                  goto LABEL_46;
              }
            }
          }
        }
      }
    }
  }
  LOBYTE(v348) = 0;
  v367 = (WTF *)&v358;
  v368 = (uint64_t)&v348;
  v369[0] = &v337;
  v134 = __OFADD__((_DWORD)v17, v20);
  v135 = v17 + v20;
  v136 = __OFADD__((_DWORD)v17, v20);
  LODWORD(v137) = (v17 >> 31) + 0x7FFFFFFF;
  if (v134)
    v137 = v137;
  else
    v137 = v135;
  v138 = __OFADD__((_DWORD)v16, v23);
  v139 = (v16 + v23);
  v140 = __OFADD__((_DWORD)v16, v23);
  LODWORD(v141) = (v16 >> 31) + 0x7FFFFFFF;
  if (v138)
    v141 = v141;
  else
    v141 = v139;
  v142 = *((float *)a2 + 10);
  v143 = *((float *)a2 + 11);
  v144 = (float)((float)(int)v141 * 0.015625) - v143;
  v145 = (float)((float)((float)(int)v137 * 0.015625) - v142) * 64.0;
  if (v145 < 2147483650.0 && v145 > -2147483650.0)
    goto LABEL_243;
  if (v145 >= 2147483650.0)
  {
    v147 = 0x7FFFFFFF;
    goto LABEL_244;
  }
  if (v145 <= -2147483650.0)
    v147 = 0x80000000;
  else
LABEL_243:
    v147 = (int)v145;
LABEL_244:
  v148 = v141 << 32;
  v149 = v147;
  v150 = v144 * 64.0;
  if (v150 < 2147483650.0 && v150 > -2147483650.0)
    goto LABEL_248;
  if (v150 >= 2147483650.0)
  {
    v152 = 0x7FFFFFFF00000000;
    goto LABEL_249;
  }
  if (v150 <= -2147483650.0)
    v152 = 0x8000000000000000;
  else
LABEL_248:
    v152 = (unint64_t)(int)v150 << 32;
LABEL_249:
  WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()((_DWORD **)&v367, v148 | v137, v152 | v149, v142, v143, 0.0);
  if (v140)
    v139 = (v16 >> 31) + 0x7FFFFFFF;
  v153 = *((float *)a2 + 8);
  v154 = *((float *)a2 + 9);
  v155 = (float)(int)v17 * 0.015625;
  v156 = (float)(v155 + v153) * 64.0;
  if (v156 < 2147483650.0 && v156 > -2147483650.0)
    goto LABEL_255;
  if (v156 >= 2147483650.0)
  {
    v158 = 0x7FFFFFFF;
    goto LABEL_256;
  }
  if (v156 <= -2147483650.0)
    v158 = 0x80000000;
  else
LABEL_255:
    v158 = (int)v156;
LABEL_256:
  v159 = (float)((float)((float)(int)v139 * 0.015625) - v154) * 64.0;
  if (v159 < 2147483650.0 && v159 > -2147483650.0)
    goto LABEL_258;
  if (v159 >= 2147483650.0)
  {
    v160 = 0x7FFFFFFF00000000;
  }
  else
  {
    if (v159 > -2147483650.0)
    {
LABEL_258:
      v160 = (unint64_t)(int)v159 << 32;
      goto LABEL_259;
    }
    v160 = 0x8000000000000000;
  }
LABEL_259:
  WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()((_DWORD **)&v367, (v139 << 32) | v17, v160 | v158, v153, v154, 1.57079633);
  v161 = *((float *)a2 + 4);
  v162 = *((float *)a2 + 5);
  v163 = v155 + v161;
  v164 = (float)(int)v16 * 0.015625;
  v165 = v163 * 64.0;
  if (v165 < 2147483650.0 && v165 > -2147483650.0)
    goto LABEL_261;
  if (v165 >= 2147483650.0)
  {
    v166 = 0x7FFFFFFF;
    goto LABEL_262;
  }
  if (v165 > -2147483650.0)
LABEL_261:
    v166 = (int)v165;
  else
    v166 = 0x80000000;
LABEL_262:
  v167 = (float)(v164 + v162) * 64.0;
  if (v167 < 2147483650.0 && v167 > -2147483650.0)
    goto LABEL_264;
  if (v167 >= 2147483650.0)
  {
    v168 = 0x7FFFFFFF00000000;
  }
  else
  {
    if (v167 > -2147483650.0)
    {
LABEL_264:
      v168 = (unint64_t)(int)v167 << 32;
      goto LABEL_265;
    }
    v168 = 0x8000000000000000;
  }
LABEL_265:
  WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()((_DWORD **)&v367, v17 | ((unint64_t)v16 << 32), v168 | v166, v161, v162, 3.14159265);
  if (v136)
    v135 = (v17 >> 31) + 0x7FFFFFFF;
  v169 = *((float *)a2 + 6);
  v170 = *((float *)a2 + 7);
  v171 = (float)((float)((float)(int)v135 * 0.015625) - v169) * 64.0;
  if (v171 < 2147483650.0 && v171 > -2147483650.0)
    goto LABEL_269;
  if (v171 >= 2147483650.0)
  {
    v172 = 0x7FFFFFFF;
  }
  else
  {
    if (v171 > -2147483650.0)
    {
LABEL_269:
      v172 = (int)v171;
      goto LABEL_270;
    }
    v172 = 0x80000000;
  }
LABEL_270:
  v173 = (float)(v164 + v170) * 64.0;
  if (v173 < 2147483650.0 && v173 > -2147483650.0)
    goto LABEL_272;
  if (v173 >= 2147483650.0)
  {
    v174 = 0x7FFFFFFF00000000;
    goto LABEL_273;
  }
  if (v173 > -2147483650.0)
LABEL_272:
    v174 = (unint64_t)(int)v173 << 32;
  else
    v174 = 0x8000000000000000;
LABEL_273:
  WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()((_DWORD **)&v367, (v16 << 32) | v135, v174 | v172, v169, v170, 4.71238898);
LABEL_46:
  v40 = *((_DWORD *)this + 7);
  if (!v40)
  {
    if (*((_DWORD *)this + 11))
    {
      WebCore::Region::Region((uint64_t)&v346, (const WebCore::Region *)&v337);
      goto LABEL_127;
    }
    v339 = v337;
    v102 = v338;
    v340 = v338;
    v338 = 0;
    goto LABEL_170;
  }
  v41 = *((_QWORD *)this + 2) + 48 * v40;
  v42 = *(float64x2_t *)(v41 - 32);
  v343 = *(float64x2_t *)(v41 - 48);
  v344 = v42;
  v345 = *(_OWORD *)(v41 - 16);
  v341 = v337;
  v43 = v338;
  if (v338)
  {
    v44 = WTF::fastMalloc((WTF *)0x1A0);
    v210 = *((unsigned int *)v43 + 3);
    v211 = (void *)(v44 + 16);
    *(_QWORD *)v44 = v44 + 16;
    *(_DWORD *)(v44 + 8) = 32;
    *(_DWORD *)(v44 + 12) = v210;
    if (v210 >= 0x21)
    {
      if (v210 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1941D083CLL);
      }
      v211 = (void *)WTF::fastMalloc((WTF *)(4 * v210));
      *(_DWORD *)(v44 + 8) = v210;
      *(_QWORD *)v44 = v211;
    }
    memcpy(v211, *(const void **)v43, 4 * *((unsigned int *)v43 + 3));
    v212 = *((unsigned int *)v43 + 39);
    v213 = (_OWORD *)(v44 + 160);
    *(_QWORD *)(v44 + 144) = v44 + 160;
    *(_DWORD *)(v44 + 152) = 16;
    *(_DWORD *)(v44 + 156) = v212;
    if (v212 >= 0x11)
    {
      if (v212 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1941D0844);
      }
      v213 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v212));
      *(_DWORD *)(v44 + 152) = v212;
      *(_QWORD *)(v44 + 144) = v213;
    }
    v214 = *((unsigned int *)v43 + 39);
    if ((_DWORD)v214)
    {
      v215 = (__int128 *)*((_QWORD *)v43 + 18);
      v216 = 16 * v214;
      do
      {
        v217 = *v215++;
        *v213++ = v217;
        v216 -= 16;
      }
      while (v216);
    }
  }
  else
  {
    v44 = 0;
  }
  v342 = (WTF *)v44;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v343, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v344, (float64x2_t)xmmword_1968A14C0))))) & 1) == 0)
  {
    WebCore::Region::Region((uint64_t)&v346, (const WebCore::Region *)&v341);
    v72 = *(double *)&v345;
    v74 = roundf(v72);
    if (v74 > -2147500000.0)
      v75 = (int)v74;
    else
      v75 = 0x80000000;
    if (v74 < 2147500000.0)
      v76 = v75;
    else
      v76 = 0x7FFFFFFF;
    if (v74 < 2147500000.0 && v74 > -2147500000.0)
      v76 = (int)v74;
    v73 = *((double *)&v345 + 1);
    v78 = roundf(v73);
    if (v78 >= 2147500000.0 || v78 <= -2147500000.0)
    {
      if (v78 > -2147500000.0)
        v220 = (int)v78;
      else
        v220 = 0x80000000;
      if (v78 < 2147500000.0)
        v221 = v220;
      else
        v221 = 0x7FFFFFFF;
      LODWORD(v346) = v346 + v76;
      DWORD1(v346) += v221;
      v222 = v347;
      if (v347)
      {
        if (*((_DWORD *)v347 + 3))
        {
          v223 = 0;
          v224 = *(_QWORD *)v347;
          do
            *(_DWORD *)(v224 + 4 * v223++) += v76;
          while (v223 < *((unsigned int *)v222 + 3));
        }
        v225 = *((unsigned int *)v222 + 39);
        if ((_DWORD)v225)
        {
          v226 = (_DWORD *)*((_QWORD *)v222 + 18);
          do
          {
            *v226 += v221;
            v226 += 4;
            --v225;
          }
          while (v225);
        }
      }
    }
    else
    {
      LODWORD(v346) = v346 + v76;
      DWORD1(v346) += (int)v78;
      v80 = v347;
      if (v347)
      {
        if (*((_DWORD *)v347 + 3))
        {
          v189 = 0;
          v190 = *(_QWORD *)v347;
          do
            *(_DWORD *)(v190 + 4 * v189++) += v76;
          while (v189 < *((unsigned int *)v80 + 3));
        }
        v191 = *((unsigned int *)v80 + 39);
        if ((_DWORD)v191)
        {
          v192 = (_DWORD *)*((_QWORD *)v80 + 18);
          do
          {
            *v192 += (int)v78;
            v192 += 4;
            --v191;
          }
          while (v191);
        }
      }
    }
    goto LABEL_115;
  }
  v346 = 0uLL;
  v347 = 0;
  WebCore::Region::rects((uint64_t)&v341, (uint64_t)&v367);
  v45 = (int *)v367;
  if (!HIDWORD(v368))
    goto LABEL_94;
  v46 = (int *)((char *)v367 + 16 * HIDWORD(v368));
  do
  {
    *(float *)&v358 = (float)*v45;
    *((float *)&v358 + 1) = (float)v45[1];
    *(float *)&v359 = (float)v45[2];
    *((float *)&v359 + 1) = (float)v45[3];
    v47 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v343, (const WebCore::FloatRect *)&v358);
    v51 = floorf(v47);
    v52 = v51 >= 2147500000.0 || v51 <= -2147500000.0;
    if (!v52 || (v53 = 2147500000.0, v51 < 2147500000.0) && (v53 = -2147500000.0, v51 > -2147500000.0))
      v53 = (float)(int)v51;
    v54 = floorf(v48);
    v55 = v54 >= 2147500000.0 || v54 <= -2147500000.0;
    if (!v55 || (v56 = 2147500000.0, v54 < 2147500000.0) && (v56 = -2147500000.0, v54 > -2147500000.0))
      v56 = (float)(int)v54;
    v57 = ceilf(v47 + v49);
    v58 = v57 >= 2147500000.0 || v57 <= -2147500000.0;
    if (!v58 || (v59 = 2147500000.0, v57 < 2147500000.0) && (v59 = -2147500000.0, v57 > -2147500000.0))
      v59 = (float)(int)v57;
    v60 = ceilf(v48 + v50);
    v61 = v60 >= 2147500000.0 || v60 <= -2147500000.0;
    if (!v61 || (v62 = 2147500000.0, v60 < 2147500000.0) && (v62 = -2147500000.0, v60 > -2147500000.0))
      v62 = (float)(int)v60;
    if (v53 < 2147500000.0 && v53 > -2147500000.0)
    {
LABEL_74:
      v63 = (int)v53;
      goto LABEL_75;
    }
    if (v53 >= 2147500000.0)
    {
      v63 = 0x7FFFFFFF;
    }
    else
    {
      if (v53 > -2147500000.0)
        goto LABEL_74;
      v63 = 0x80000000;
    }
LABEL_75:
    if (v56 < 2147500000.0 && v56 > -2147500000.0)
      goto LABEL_77;
    if (v56 >= 2147500000.0)
    {
      v64 = 0x7FFFFFFF00000000;
      goto LABEL_78;
    }
    if (v56 > -2147500000.0)
LABEL_77:
      v64 = (unint64_t)(int)v56 << 32;
    else
      v64 = 0x8000000000000000;
LABEL_78:
    v65 = v59 - v53;
    if ((float)(v59 - v53) >= 2147500000.0 || v65 <= -2147500000.0)
    {
      if (v65 >= 2147500000.0)
      {
        v66 = 0x7FFFFFFF;
      }
      else
      {
        v66 = (int)v65;
        if (v65 <= -2147500000.0)
          v66 = 0x80000000;
      }
    }
    else
    {
      v66 = (int)v65;
    }
    v67 = v62 - v56;
    if (v67 >= 2147500000.0 || v67 <= -2147500000.0)
    {
      if (v67 >= 2147500000.0)
      {
        v218 = 0x7FFFFFFF00000000;
      }
      else if (v67 <= -2147500000.0)
      {
        v218 = 0x8000000000000000;
      }
      else
      {
        v218 = (unint64_t)(int)v67 << 32;
      }
      v358 = (WTF *)(v64 | v63);
      v359 = v218 | v66;
      v360[0] = 0;
      WebCore::Region::unite((WTF *)&v346, (const WebCore::Region *)&v358);
      v68 = v360[0];
      v360[0] = 0;
      if (!v68)
        goto LABEL_92;
      v219 = (WTF *)*((_QWORD *)v68 + 18);
      if ((WTF *)((char *)v68 + 160) != v219 && v219)
      {
        *((_QWORD *)v68 + 18) = 0;
        *((_DWORD *)v68 + 38) = 0;
        WTF::fastFree(v219, a2);
      }
      v71 = (WTF *)((char *)v68 + 16);
      v70 = *(WTF **)v68;
    }
    else
    {
      v358 = (WTF *)(v64 | v63);
      v359 = v66 | ((unint64_t)(int)v67 << 32);
      v360[0] = 0;
      WebCore::Region::unite((WTF *)&v346, (const WebCore::Region *)&v358);
      v68 = v360[0];
      v360[0] = 0;
      if (!v68)
        goto LABEL_92;
      v69 = (WTF *)*((_QWORD *)v68 + 18);
      if ((WTF *)((char *)v68 + 160) != v69 && v69)
      {
        *((_QWORD *)v68 + 18) = 0;
        *((_DWORD *)v68 + 38) = 0;
        WTF::fastFree(v69, a2);
      }
      v71 = (WTF *)((char *)v68 + 16);
      v70 = *(WTF **)v68;
    }
    if (v71 != v70 && v70)
    {
      *(_QWORD *)v68 = 0;
      *((_DWORD *)v68 + 2) = 0;
      WTF::fastFree(v70, a2);
    }
    WTF::fastFree(v68, a2);
LABEL_92:
    v45 += 4;
  }
  while (v45 != v46);
  v45 = (int *)v367;
LABEL_94:
  if (v369 != (_QWORD *)v45 && v45)
  {
    v367 = 0;
    LODWORD(v368) = 0;
    WTF::fastFree((WTF *)v45, a2);
  }
LABEL_115:
  v81 = v342;
  v342 = 0;
  if (v81)
  {
    v82 = (WTF *)*((_QWORD *)v81 + 18);
    if ((WTF *)((char *)v81 + 160) != v82 && v82 != 0)
    {
      *((_QWORD *)v81 + 18) = 0;
      *((_DWORD *)v81 + 38) = 0;
      WTF::fastFree(v82, a2);
    }
    v84 = *(WTF **)v81;
    if ((WTF *)((char *)v81 + 16) != *(WTF **)v81 && v84 != 0)
    {
      *(_QWORD *)v81 = 0;
      *((_DWORD *)v81 + 2) = 0;
      WTF::fastFree(v84, a2);
    }
    WTF::fastFree(v81, a2);
  }
LABEL_127:
  v86 = *((unsigned int *)this + 11);
  if ((_DWORD)v86 && SDWORD2(v346) >= 1 && SHIDWORD(v346) >= 1)
  {
    v87 = *((_QWORD *)this + 4) + 16 * v86;
    v89 = *(_DWORD *)(v87 - 8);
    v88 = *(_DWORD *)(v87 - 4);
    v90 = v89 < 1 || v88 < 1;
    if (v90
      || ((v91 = *(_DWORD *)(v87 - 16), v92 = v89 + v91, (int)v346 < v89 + v91)
        ? (v93 = v91 < (int)v346 + DWORD2(v346))
        : (v93 = 0),
          !v93 || (v94 = *(_DWORD *)(v87 - 12), v95 = v88 + v94, SDWORD1(v346) >= v88 + v94)))
    {
      v96 = v347;
    }
    else
    {
      v96 = v347;
      if (v94 < DWORD1(v346) + HIDWORD(v346))
      {
        if (v347)
        {
          v331 = a4;
          v196 = *((unsigned int *)v347 + 3);
          v358 = (WTF *)v360;
          LODWORD(v359) = 32;
          HIDWORD(v359) = v196;
          v197 = (WTF *)v360;
          if (v196 >= 0x21)
          {
            if (v196 >> 30)
            {
LABEL_713:
              __break(0xC471u);
              JUMPOUT(0x1941D082CLL);
            }
            v197 = (WTF *)WTF::fastMalloc((WTF *)(4 * v196));
            LODWORD(v359) = v196;
            v358 = v197;
          }
          memcpy(v197, *(const void **)v96, 4 * *((unsigned int *)v96 + 3));
          v198 = *((unsigned int *)v96 + 39);
          v361 = (WTF *)&v363;
          LODWORD(v362) = 16;
          HIDWORD(v362) = v198;
          v199 = (WTF *)&v363;
          if (v198 >= 0x11)
          {
            if (v198 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x1941D0834);
            }
            v199 = (WTF *)WTF::fastMalloc((WTF *)(16 * v198));
            LODWORD(v362) = v198;
            v361 = v199;
          }
          v200 = *((unsigned int *)v96 + 39);
          if ((_DWORD)v200)
          {
            v201 = (__int128 *)*((_QWORD *)v96 + 18);
            v202 = 16 * v200;
            do
            {
              v203 = *v201++;
              *(_OWORD *)v199 = v203;
              v199 = (WTF *)((char *)v199 + 16);
              v202 -= 16;
            }
            while (v202);
          }
          v348 = (WTF *)&v350;
          v350 = v91;
          v351 = v92;
          v349 = 0x200000020;
          v352 = (WTF *)&v354;
          v354 = v94;
          v355 = 0;
          v356 = v95;
          v357 = 2;
          v353 = 0x200000010;
          WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::IntersectOperation>((uint64_t)&v358, (uint64_t)&v348, (WebCore::Region::Shape *)&v367);
          WebCore::Region::setShape((uint64_t)&v346, &v367);
          v204 = v370;
          a4 = v331;
          if (&v372 != (int *)v370 && v370)
          {
            v370 = 0;
            LODWORD(v371) = 0;
            WTF::fastFree(v204, a2);
          }
          v205 = v367;
          if (v369 != (_QWORD *)v367 && v367)
          {
            v367 = 0;
            LODWORD(v368) = 0;
            WTF::fastFree(v205, a2);
          }
          v206 = v352;
          if (&v354 != (int *)v352 && v352)
          {
            v352 = 0;
            LODWORD(v353) = 0;
            WTF::fastFree(v206, a2);
          }
          v207 = v348;
          if (&v350 != (int *)v348 && v348)
          {
            v348 = 0;
            LODWORD(v349) = 0;
            WTF::fastFree(v207, a2);
          }
          v208 = v361;
          if (&v363 != (int *)v361 && v361)
          {
            v361 = 0;
            LODWORD(v362) = 0;
            WTF::fastFree(v208, a2);
          }
          v209 = v358;
          if (v360 != (WTF **)v358 && v358)
          {
            v358 = 0;
            LODWORD(v359) = 0;
            WTF::fastFree(v209, a2);
          }
        }
        else
        {
          if ((int)v346 <= v91)
            v97 = *(_DWORD *)(v87 - 16);
          else
            v97 = v346;
          if (SDWORD1(v346) <= v94)
            v98 = v94;
          else
            v98 = DWORD1(v346);
          v99 = DWORD2(v346) + v346;
          if (v92 < DWORD2(v346) + (int)v346)
            v99 = v89 + v91;
          v100 = HIDWORD(v346) + DWORD1(v346);
          if (v95 < HIDWORD(v346) + DWORD1(v346))
            v100 = v95;
          if (v97 >= v99 || (int)v98 >= v100)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
          }
          *(_QWORD *)&v346 = v97 | (unint64_t)(v98 << 32);
          *((_QWORD *)&v346 + 1) = (v99 - v97) | ((unint64_t)(v100 - v98) << 32);
        }
        goto LABEL_158;
      }
    }
    v347 = 0;
    if (v96)
    {
      v132 = (WTF *)*((_QWORD *)v96 + 18);
      if ((WTF *)((char *)v96 + 160) != v132 && v132)
      {
        *((_QWORD *)v96 + 18) = 0;
        *((_DWORD *)v96 + 38) = 0;
        WTF::fastFree(v132, a2);
      }
      v133 = *(WTF **)v96;
      if ((WTF *)((char *)v96 + 16) != *(WTF **)v96 && v133)
      {
        *(_QWORD *)v96 = 0;
        *((_DWORD *)v96 + 2) = 0;
        WTF::fastFree(v133, a2);
      }
      WTF::fastFree(v96, a2);
    }
    v346 = 0uLL;
  }
LABEL_158:
  v339 = v346;
  v102 = v347;
  v340 = v347;
  v103 = v338;
  v338 = 0;
  if (v103)
  {
    v104 = (WTF *)*((_QWORD *)v103 + 18);
    if ((WTF *)((char *)v103 + 160) != v104 && v104 != 0)
    {
      *((_QWORD *)v103 + 18) = 0;
      *((_DWORD *)v103 + 38) = 0;
      WTF::fastFree(v104, a2);
    }
    v106 = *(WTF **)v103;
    if ((WTF *)((char *)v103 + 16) != *(WTF **)v103 && v106 != 0)
    {
      *(_QWORD *)v103 = 0;
      *((_DWORD *)v103 + 2) = 0;
      WTF::fastFree(v106, a2);
    }
    WTF::fastFree(v103, a2);
  }
LABEL_170:
  v108 = *((_QWORD *)this + 6);
  v109 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
  v110 = *(_QWORD *)(*(_QWORD *)(v109 + 40) + 8);
  if (!*(_BYTE *)(v110 + 3441) || *(_QWORD *)(v110 + 1272) == v109)
  {
    if ((*((_BYTE *)a3 + 45) & 2) != 0)
    {
      v175 = *((_QWORD *)a3 + 4);
      if (v175)
        a3 = *(WebCore::RenderObject **)(v175 + 8);
      else
        a3 = 0;
    }
    if ((*(_BYTE *)(*((_QWORD *)a3 + 13) + 239) & 1) == 0 && (*((_WORD *)a3 + 62) & 0x3C0) != 0)
    {
      v333 = DWORD2(v339);
      v111 = SDWORD2(v339) < 1 || SHIDWORD(v339) < 1;
      v112 = v111;
      v334 = v112;
      v335 = HIDWORD(v339);
      if (!v111)
      {
        v113 = *(_DWORD *)(v108 + 8);
        if (v113 < 1 || (v114 = *(_DWORD *)(v108 + 12), v114 <= 0))
        {
          *(_OWORD *)v108 = v339;
          if (v102)
          {
            std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>((uint64_t)v102, (uint64_t *)&v367);
            v124 = v367;
          }
          else
          {
            v124 = 0;
          }
          v367 = 0;
          v125 = *(_QWORD *)(v108 + 16);
          *(_QWORD *)(v108 + 16) = v124;
          if (v125)
          {
            v126 = *(WTF **)(v125 + 144);
            if ((WTF *)(v125 + 160) != v126 && v126)
            {
              *(_QWORD *)(v125 + 144) = 0;
              *(_DWORD *)(v125 + 152) = 0;
              WTF::fastFree(v126, a2);
            }
            v127 = *(WTF **)v125;
            if (v125 + 16 != *(_QWORD *)v125 && v127)
            {
              *(_QWORD *)v125 = 0;
              *(_DWORD *)(v125 + 8) = 0;
              WTF::fastFree(v127, a2);
            }
            WTF::fastFree((WTF *)v125, a2);
            v128 = v367;
            v367 = 0;
            if (v128)
            {
              v129 = (WTF *)*((_QWORD *)v128 + 18);
              if ((WTF *)((char *)v128 + 160) != v129 && v129)
              {
                *((_QWORD *)v128 + 18) = 0;
                *((_DWORD *)v128 + 38) = 0;
                WTF::fastFree(v129, a2);
              }
              v130 = *(WTF **)v128;
              if ((WTF *)((char *)v128 + 16) != *(WTF **)v128 && v130)
              {
                *(_QWORD *)v128 = 0;
                *((_DWORD *)v128 + 2) = 0;
                WTF::fastFree(v130, a2);
              }
              v131 = v128;
LABEL_212:
              WTF::fastFree(v131, a2);
            }
          }
        }
        else
        {
          v115 = *(_DWORD *)v108;
          v116 = v339;
          if (v102
            || (int)v339 > v115
            || (int)v339 + DWORD2(v339) < v115 + v113
            || (v117 = *(_DWORD *)(v108 + 4), SDWORD1(v339) > v117)
            || DWORD1(v339) + HIDWORD(v339) < v117 + v114)
          {
            if (v115 > (int)v339)
              goto LABEL_333;
            if (v115 + v113 < (int)v339 + DWORD2(v339))
              goto LABEL_333;
            v118 = *(_DWORD *)(v108 + 4);
            if (v118 > SDWORD1(v339) || v118 + v114 < DWORD1(v339) + HIDWORD(v339))
              goto LABEL_333;
            v119 = *(uint64_t **)(v108 + 16);
            if (v119)
            {
              if (v102)
              {
                WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v367, (const void **)v102);
              }
              else
              {
                v367 = (WTF *)v369;
                LODWORD(v369[0]) = v339;
                HIDWORD(v369[0]) = v339 + DWORD2(v339);
                v368 = 0x200000020;
                v370 = (WTF *)&v372;
                v372 = DWORD1(v339);
                v373 = 0;
                v374 = DWORD1(v339) + HIDWORD(v339);
                v375 = 2;
                v371 = 0x200000010;
              }
              v176 = WebCore::Region::Shape::compareShapes<WebCore::Region::Shape::CompareContainsOperation>(v119, (uint64_t *)&v367);
              v177 = v370;
              if (&v372 != (int *)v370 && v370)
              {
                v370 = 0;
                LODWORD(v371) = 0;
                WTF::fastFree(v177, a2);
              }
              v178 = v367;
              if (v369 != (_QWORD *)v367 && v367)
              {
                v367 = 0;
                LODWORD(v368) = 0;
                WTF::fastFree(v178, a2);
              }
              if (!v176)
              {
LABEL_333:
                v179 = *(const void ***)(v108 + 16);
                if (v179)
                {
                  WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v358, v179);
                }
                else
                {
                  v180 = *(_DWORD *)v108;
                  v181 = *(_DWORD *)(v108 + 8) + *(_DWORD *)v108;
                  v358 = (WTF *)v360;
                  v360[0] = (WTF *)__PAIR64__(v181, v180);
                  v359 = 0x200000020;
                  v182 = *(_DWORD *)(v108 + 4);
                  v183 = *(_DWORD *)(v108 + 12) + v182;
                  v361 = (WTF *)&v363;
                  v363 = v182;
                  v364 = 0;
                  v365 = v183;
                  v366 = 2;
                  v362 = 0x200000010;
                }
                if (v102)
                {
                  WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v348, (const void **)v102);
                }
                else
                {
                  v348 = (WTF *)&v350;
                  v350 = v116;
                  v351 = v333 + v116;
                  v349 = 0x200000020;
                  v352 = (WTF *)&v354;
                  v354 = DWORD1(v339);
                  v355 = 0;
                  v356 = v335 + DWORD1(v339);
                  v357 = 2;
                  v353 = 0x200000010;
                }
                WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::UnionOperation>((uint64_t)&v358, (uint64_t)&v348, (WebCore::Region::Shape *)&v367);
                WebCore::Region::setShape(v108, &v367);
                v184 = v370;
                if (&v372 != (int *)v370 && v370)
                {
                  v370 = 0;
                  LODWORD(v371) = 0;
                  WTF::fastFree(v184, a2);
                }
                v185 = v367;
                if (v369 != (_QWORD *)v367 && v367)
                {
                  v367 = 0;
                  LODWORD(v368) = 0;
                  WTF::fastFree(v185, a2);
                }
                v186 = v352;
                if (&v354 != (int *)v352 && v352)
                {
                  v352 = 0;
                  LODWORD(v353) = 0;
                  WTF::fastFree(v186, a2);
                }
                v187 = v348;
                if (&v350 != (int *)v348 && v348)
                {
                  v348 = 0;
                  LODWORD(v349) = 0;
                  WTF::fastFree(v187, a2);
                }
                v188 = v361;
                if (&v363 != (int *)v361 && v361)
                {
                  v361 = 0;
                  LODWORD(v362) = 0;
                  WTF::fastFree(v188, a2);
                }
                v131 = v358;
                if (v360 != (WTF **)v358)
                {
                  if (v358)
                  {
                    v358 = 0;
                    LODWORD(v359) = 0;
                    goto LABEL_212;
                  }
                }
              }
            }
          }
          else
          {
            *(_OWORD *)v108 = v339;
            v193 = *(_QWORD *)(v108 + 16);
            *(_QWORD *)(v108 + 16) = 0;
            if (v193)
            {
              v194 = *(WTF **)(v193 + 144);
              if ((WTF *)(v193 + 160) != v194 && v194)
              {
                *(_QWORD *)(v193 + 144) = 0;
                *(_DWORD *)(v193 + 152) = 0;
                WTF::fastFree(v194, a2);
              }
              v195 = *(WTF **)v193;
              if (v193 + 16 != *(_QWORD *)v193 && v195)
              {
                *(_QWORD *)v193 = 0;
                *(_DWORD *)(v193 + 8) = 0;
                WTF::fastFree(v195, a2);
              }
              WTF::fastFree((WTF *)v193, a2);
            }
            v102 = 0;
          }
        }
      }
      v330 = a4;
      v120 = *(unsigned __int8 *)(*((_QWORD *)a4 + 3) + 240);
      v121 = v333;
      v336 = v120;
      if (v120)
      {
        v122 = v120;
        v123 = &unk_1969FC35C;
        while (1)
        {
          if ((v122 & -(char)v122) == 1)
            goto LABEL_535;
          HIDWORD(v228) = v122 & -v122;
          LODWORD(v228) = (HIDWORD(v228) << 24) - 0x4000000;
          v227 = v228 >> 26;
          if (v227 > 7u)
          {
            v229 = 1;
            v230 = *(_DWORD *)(v108 + 36);
            if (v230)
              goto LABEL_503;
          }
          else
          {
            v229 = v123[(char)v227];
            v230 = *(_DWORD *)(v108 + 36);
            if (v230 >= v229)
              goto LABEL_503;
          }
          v231 = v102;
          v232 = *(WTF **)(v108 + 24);
          if (*(_DWORD *)(v108 + 32) >= v229)
            goto LABEL_530;
          v233 = WTF::fastMalloc((WTF *)0x180);
          *(_DWORD *)(v108 + 32) = 16;
          *(_QWORD *)(v108 + 24) = v233;
          if (v230)
          {
            v234 = v123;
            v235 = (WTF *)((char *)v232 + 24 * v230);
            v236 = v232;
            do
            {
              *(_OWORD *)v233 = *(_OWORD *)v236;
              v239 = *((_QWORD *)v236 + 2);
              *((_QWORD *)v236 + 2) = 0;
              *(_QWORD *)(v233 + 16) = v239;
              v240 = *((_QWORD *)v236 + 2);
              *((_QWORD *)v236 + 2) = 0;
              if (v240)
              {
                v241 = *(WTF **)(v240 + 144);
                if ((WTF *)(v240 + 160) != v241 && v241 != 0)
                {
                  *(_QWORD *)(v240 + 144) = 0;
                  *(_DWORD *)(v240 + 152) = 0;
                  WTF::fastFree(v241, a2);
                }
                v237 = *(WTF **)v240;
                if (v240 + 16 != *(_QWORD *)v240 && v237 != 0)
                {
                  *(_QWORD *)v240 = 0;
                  *(_DWORD *)(v240 + 8) = 0;
                  WTF::fastFree(v237, a2);
                }
                WTF::fastFree((WTF *)v240, a2);
              }
              v236 = (WTF *)((char *)v236 + 24);
              v233 += 24;
            }
            while (v236 != v235);
            v233 = *(_QWORD *)(v108 + 24);
            v123 = v234;
          }
          if (v232)
            break;
          v232 = (WTF *)v233;
          if (v233)
          {
LABEL_531:
            v243 = *(unsigned int *)(v108 + 36);
            if ((_DWORD)v243 != v229)
              bzero((char *)v232 + 24 * v243, 24 * (((unint64_t)(24 * v229) - 24 * v243 - 24) / 0x18) + 24);
          }
LABEL_502:
          *(_DWORD *)(v108 + 36) = v229;
          v102 = v231;
          v121 = v333;
LABEL_503:
          v122 &= v122 - 1;
          if (!(_BYTE)v122)
            goto LABEL_535;
        }
        if ((WTF *)v233 == v232)
        {
          *(_QWORD *)(v108 + 24) = 0;
          *(_DWORD *)(v108 + 32) = 0;
        }
        WTF::fastFree(v232, a2);
        v232 = *(WTF **)(v108 + 24);
LABEL_530:
        if (v232)
          goto LABEL_531;
        goto LABEL_502;
      }
LABEL_535:
      if (*(_DWORD *)(v108 + 36))
      {
        v244 = 0;
        v245 = v102;
        do
        {
          while (1)
          {
            v246 = 0x2010080402uLL >> (8 * v244);
            if (v244 >= 5)
              LODWORD(v246) = 1;
            v247 = *(_QWORD *)(v108 + 24) + 24 * v244;
            if ((v246 & v336) != 0)
              break;
            v264 = *(_DWORD *)(v247 + 8);
            if (v264 < 1)
              goto LABEL_538;
            v265 = *(_DWORD *)(v247 + 12);
            v266 = v265 < 1 || v121 < 1;
            if (v266 || v335 < 1)
              goto LABEL_538;
            v268 = *(_DWORD *)v247;
            v269 = v339;
            v270 = v339 + v121;
            v271 = *(_DWORD *)v247 + v264;
            if (*(_DWORD *)v247 >= (int)v339 + v121 || (int)v339 >= v271)
              goto LABEL_538;
            v273 = *(_DWORD *)(v247 + 4);
            v274 = DWORD1(v339);
            v275 = DWORD1(v339) + v335;
            v276 = v273 + v265;
            if (v273 >= DWORD1(v339) + v335 || SDWORD1(v339) >= v276)
              goto LABEL_538;
            v278 = *(_QWORD *)(v247 + 16);
            if (v278)
            {
              v313 = v102;
              v314 = *(unsigned int *)(v278 + 12);
              v315 = (WTF *)v360;
              v358 = (WTF *)v360;
              LODWORD(v359) = 32;
              HIDWORD(v359) = v314;
              if (v314 >= 0x21)
              {
                if (v314 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1941D12ACLL);
                }
                v315 = (WTF *)WTF::fastMalloc((WTF *)(4 * v314));
                LODWORD(v359) = v314;
                v358 = v315;
              }
              memcpy(v315, *(const void **)v278, 4 * *(unsigned int *)(v278 + 12));
              v316 = *(unsigned int *)(v278 + 156);
              v317 = (WTF *)&v363;
              v361 = (WTF *)&v363;
              LODWORD(v362) = 16;
              HIDWORD(v362) = v316;
              if (v316 >= 0x11)
              {
                if (v316 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1941D12BCLL);
                }
                v317 = (WTF *)WTF::fastMalloc((WTF *)(16 * v316));
                LODWORD(v362) = v316;
                v361 = v317;
              }
              v318 = *(unsigned int *)(v278 + 156);
              v102 = v313;
              v121 = v333;
              if ((_DWORD)v318)
              {
                v319 = *(__int128 **)(v278 + 144);
                v320 = 16 * v318;
                do
                {
                  v321 = *v319++;
                  *(_OWORD *)v317 = v321;
                  v317 = (WTF *)((char *)v317 + 16);
                  v320 -= 16;
                }
                while (v320);
              }
            }
            else
            {
              v358 = (WTF *)v360;
              v360[0] = (WTF *)__PAIR64__(v271, v268);
              v359 = 0x200000020;
              v361 = (WTF *)&v363;
              v363 = v273;
              v364 = 0;
              v365 = v276;
              v366 = 2;
              v362 = 0x200000010;
            }
            if (v102)
            {
              v322 = *((unsigned int *)v102 + 3);
              v323 = (WTF *)&v350;
              v348 = (WTF *)&v350;
              LODWORD(v349) = 32;
              HIDWORD(v349) = v322;
              if (v322 >= 0x21)
              {
                if (v322 >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1941D12B4);
                }
                v323 = (WTF *)WTF::fastMalloc((WTF *)(4 * v322));
                LODWORD(v349) = v322;
                v348 = v323;
                v121 = v333;
              }
              memcpy(v323, *(const void **)v102, 4 * *((unsigned int *)v102 + 3));
              v324 = *((unsigned int *)v102 + 39);
              v325 = (WTF *)&v354;
              v352 = (WTF *)&v354;
              LODWORD(v353) = 16;
              HIDWORD(v353) = v324;
              if (v324 >= 0x11)
              {
                if (v324 >> 28)
                  goto LABEL_713;
                v325 = (WTF *)WTF::fastMalloc((WTF *)(16 * v324));
                LODWORD(v353) = v324;
                v352 = v325;
                v121 = v333;
              }
              v326 = *((unsigned int *)v102 + 39);
              if ((_DWORD)v326)
              {
                v327 = (__int128 *)*((_QWORD *)v102 + 18);
                v328 = 16 * v326;
                do
                {
                  v329 = *v327++;
                  *(_OWORD *)v325 = v329;
                  v325 = (WTF *)((char *)v325 + 16);
                  v328 -= 16;
                }
                while (v328);
              }
            }
            else
            {
              v348 = (WTF *)&v350;
              v350 = v269;
              v351 = v270;
              v349 = 0x200000020;
              v352 = (WTF *)&v354;
              v354 = v274;
              v355 = 0;
              v356 = v275;
              v357 = 2;
              v353 = 0x200000010;
            }
            WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::SubtractOperation>(&v358, (uint64_t)&v348, (WebCore::Region::Shape *)&v367);
            WebCore::Region::setShape(v247, &v367);
            v279 = v370;
            if (&v372 != (int *)v370 && v370 != 0)
            {
              v370 = 0;
              LODWORD(v371) = 0;
              WTF::fastFree(v279, a2);
            }
            v281 = v367;
            if (v369 == (_QWORD *)v367 || v367 == 0)
              goto LABEL_604;
LABEL_649:
            v367 = 0;
            LODWORD(v368) = 0;
            WTF::fastFree(v281, a2);
LABEL_604:
            v283 = v352;
            if (&v354 != (int *)v352 && v352)
            {
              v352 = 0;
              LODWORD(v353) = 0;
              WTF::fastFree(v283, a2);
            }
            v284 = v348;
            if (&v350 != (int *)v348 && v348)
            {
              v348 = 0;
              LODWORD(v349) = 0;
              WTF::fastFree(v284, a2);
            }
            v285 = v361;
            if (&v363 != (int *)v361 && v361)
            {
              v361 = 0;
              LODWORD(v362) = 0;
              WTF::fastFree(v285, a2);
            }
            v286 = v358;
            if (v360 == (WTF **)v358 || !v358)
              goto LABEL_615;
            v358 = 0;
            LODWORD(v359) = 0;
LABEL_639:
            WTF::fastFree(v286, a2);
LABEL_615:
            v245 = v102;
LABEL_616:
            if (++v244 >= *(unsigned int *)(v108 + 36))
              goto LABEL_650;
          }
          if ((v334 & 1) != 0)
            goto LABEL_538;
          v248 = *(_DWORD *)(v247 + 8);
          if (v248 < 1 || (v249 = *(_DWORD *)(v247 + 12), v249 <= 0))
          {
            *(_OWORD *)v247 = v339;
            if (v102)
            {
              std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>((uint64_t)v102, (uint64_t *)&v367);
              v287 = v367;
            }
            else
            {
              v287 = 0;
            }
            v367 = 0;
            v288 = *(_QWORD *)(v247 + 16);
            *(_QWORD *)(v247 + 16) = v287;
            if (!v288)
              goto LABEL_615;
            v289 = *(WTF **)(v288 + 144);
            if ((WTF *)(v288 + 160) != v289 && v289 != 0)
            {
              *(_QWORD *)(v288 + 144) = 0;
              *(_DWORD *)(v288 + 152) = 0;
              WTF::fastFree(v289, a2);
            }
            v291 = *(WTF **)v288;
            if (v288 + 16 != *(_QWORD *)v288 && v291 != 0)
            {
              *(_QWORD *)v288 = 0;
              *(_DWORD *)(v288 + 8) = 0;
              WTF::fastFree(v291, a2);
            }
            WTF::fastFree((WTF *)v288, a2);
            v293 = v367;
            v367 = 0;
            if (!v293)
              goto LABEL_615;
            v294 = (WTF *)*((_QWORD *)v293 + 18);
            if ((WTF *)((char *)v293 + 160) != v294 && v294)
            {
              *((_QWORD *)v293 + 18) = 0;
              *((_DWORD *)v293 + 38) = 0;
              WTF::fastFree(v294, a2);
            }
            v295 = *(WTF **)v293;
            if ((WTF *)((char *)v293 + 16) != *(WTF **)v293 && v295)
            {
              *(_QWORD *)v293 = 0;
              *((_DWORD *)v293 + 2) = 0;
              WTF::fastFree(v295, a2);
            }
            v286 = v293;
            goto LABEL_639;
          }
          v250 = *(_DWORD *)v247;
          if (v245
            || ((int)v339 <= v250 ? (v251 = (int)v339 + v121 < v250 + v248) : (v251 = 1),
                v251
             || ((v252 = *(_DWORD *)(v247 + 4), v12 = SDWORD1(v339) <= v252, v253 = v252 + v249, v12)
               ? (v254 = DWORD1(v339) + v335 < v253)
               : (v254 = 1),
                 v254)))
          {
            v12 = v250 <= (int)v339;
            v255 = v250 + v248;
            if (v12 && v255 >= (int)v339 + v121)
            {
              v257 = *(_DWORD *)(v247 + 4);
              v12 = v257 <= SDWORD1(v339);
              v258 = v257 + v249;
              if (v12 && v258 >= DWORD1(v339) + v335)
              {
                v260 = *(uint64_t **)(v247 + 16);
                if (!v260)
                  goto LABEL_538;
                if (v245)
                {
                  WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v367, (const void **)v245);
                }
                else
                {
                  v367 = (WTF *)v369;
                  LODWORD(v369[0]) = v339;
                  HIDWORD(v369[0]) = v339 + v121;
                  v368 = 0x200000020;
                  v370 = (WTF *)&v372;
                  v372 = DWORD1(v339);
                  v373 = 0;
                  v374 = DWORD1(v339) + v335;
                  v375 = 2;
                  v371 = 0x200000010;
                }
                v261 = WebCore::Region::Shape::compareShapes<WebCore::Region::Shape::CompareContainsOperation>(v260, (uint64_t *)&v367);
                v262 = v370;
                if (&v372 != (int *)v370 && v370)
                {
                  v370 = 0;
                  LODWORD(v371) = 0;
                  WTF::fastFree(v262, a2);
                }
                v263 = v367;
                if (v369 != (_QWORD *)v367 && v367)
                {
                  v367 = 0;
                  LODWORD(v368) = 0;
                  WTF::fastFree(v263, a2);
                }
                if (v261)
                  goto LABEL_538;
              }
            }
            v296 = *(const void ***)(v247 + 16);
            if (v296)
            {
              WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v358, v296);
            }
            else
            {
              v297 = *(_DWORD *)v247;
              v298 = *(_DWORD *)(v247 + 8) + *(_DWORD *)v247;
              v358 = (WTF *)v360;
              v360[0] = (WTF *)__PAIR64__(v298, v297);
              v359 = 0x200000020;
              v299 = *(_DWORD *)(v247 + 4);
              v300 = *(_DWORD *)(v247 + 12) + v299;
              v361 = (WTF *)&v363;
              v363 = v299;
              v364 = 0;
              v365 = v300;
              v366 = 2;
              v362 = 0x200000010;
            }
            if (v102)
            {
              WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v348, (const void **)v102);
            }
            else
            {
              v348 = (WTF *)&v350;
              v350 = v339;
              v351 = v121 + v339;
              v349 = 0x200000020;
              v352 = (WTF *)&v354;
              v354 = DWORD1(v339);
              v355 = 0;
              v356 = v335 + DWORD1(v339);
              v357 = 2;
              v353 = 0x200000010;
            }
            WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::UnionOperation>((uint64_t)&v358, (uint64_t)&v348, (WebCore::Region::Shape *)&v367);
            WebCore::Region::setShape(v247, &v367);
            v301 = v370;
            if (&v372 != (int *)v370 && v370)
            {
              v370 = 0;
              LODWORD(v371) = 0;
              WTF::fastFree(v301, a2);
            }
            v281 = v367;
            if (v369 == (_QWORD *)v367 || !v367)
              goto LABEL_604;
            goto LABEL_649;
          }
          *(_OWORD *)v247 = v339;
          v245 = *(WTF **)(v247 + 16);
          *(_QWORD *)(v247 + 16) = 0;
          if (v245)
          {
            v309 = (WTF *)*((_QWORD *)v245 + 18);
            if ((WTF *)((char *)v245 + 160) != v309 && v309 != 0)
            {
              *((_QWORD *)v245 + 18) = 0;
              *((_DWORD *)v245 + 38) = 0;
              WTF::fastFree(v309, a2);
            }
            v311 = *(WTF **)v245;
            if ((WTF *)((char *)v245 + 16) != *(WTF **)v245 && v311 != 0)
            {
              *(_QWORD *)v245 = 0;
              *((_DWORD *)v245 + 2) = 0;
              WTF::fastFree(v311, a2);
            }
            WTF::fastFree(v245, a2);
            v245 = 0;
            goto LABEL_616;
          }
LABEL_538:
          ++v244;
        }
        while (v244 < *(unsigned int *)(v108 + 36));
      }
LABEL_650:
      v302 = *(_BYTE *)(*((_QWORD *)v330 + 3) + 241);
      if ((v302 & 1) != 0)
        WebCore::Region::unite((WTF *)(v108 + 40), (const WebCore::Region *)&v339);
      if ((v302 & 2) != 0)
        WebCore::Region::unite((WTF *)(v108 + 64), (const WebCore::Region *)&v339);
      if (*(_BYTE *)(v108 + 112))
      {
        if ((a5 & 1) != 0
          || (v308 = *((_QWORD *)v330 + 3), (*(_BYTE *)(v308 + 239) & 1) == 0) && (*(_BYTE *)(v308 + 228) & 0x30) != 0)
        {
          WebCore::Region::unite((WTF *)(v108 + 88), (const WebCore::Region *)&v339);
        }
      }
    }
  }
  v303 = v340;
  v340 = 0;
  if (v303)
  {
    v304 = (WTF *)*((_QWORD *)v303 + 18);
    if ((WTF *)((char *)v303 + 160) != v304 && v304 != 0)
    {
      *((_QWORD *)v303 + 18) = 0;
      *((_DWORD *)v303 + 38) = 0;
      WTF::fastFree(v304, a2);
    }
    v306 = *(WTF **)v303;
    if ((WTF *)((char *)v303 + 16) != *(WTF **)v303 && v306 != 0)
    {
      *(_QWORD *)v303 = 0;
      *((_DWORD *)v303 + 2) = 0;
      WTF::fastFree(v306, a2);
    }
    WTF::fastFree(v303, a2);
  }
}

uint64_t WebCore::Region::Region(uint64_t this, const WebCore::Region *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)this = *(_OWORD *)a2;
  v2 = *((_QWORD *)a2 + 2);
  if (!v2)
    goto LABEL_2;
  v12 = this;
  v3 = *((_QWORD *)a2 + 2);
  v13 = WTF::fastMalloc((WTF *)0x1A0);
  v14 = v3;
  v4 = *(unsigned int *)(v3 + 12);
  v5 = (void *)(v13 + 16);
  *(_QWORD *)v13 = v13 + 16;
  *(_DWORD *)(v13 + 8) = 32;
  *(_DWORD *)(v13 + 12) = v4;
  if (v4 >= 0x21)
  {
    if (v4 >> 30)
      goto LABEL_13;
    v5 = (void *)WTF::fastMalloc((WTF *)(4 * v4));
    *(_DWORD *)(v13 + 8) = v4;
    *(_QWORD *)v13 = v5;
  }
  memcpy(v5, *(const void **)v14, 4 * *(unsigned int *)(v14 + 12));
  v6 = *(unsigned int *)(v14 + 156);
  v7 = (_OWORD *)(v13 + 160);
  *(_QWORD *)(v13 + 144) = v13 + 160;
  *(_DWORD *)(v13 + 152) = 16;
  *(_DWORD *)(v13 + 156) = v6;
  if (v6 >= 0x11)
  {
    if (!(v6 >> 28))
    {
      v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
      *(_DWORD *)(v13 + 152) = v6;
      *(_QWORD *)(v13 + 144) = v7;
      goto LABEL_5;
    }
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1941D13D8);
  }
LABEL_5:
  v8 = *(unsigned int *)(v14 + 156);
  if ((_DWORD)v8)
  {
    v9 = *(__int128 **)(v14 + 144);
    v10 = 16 * v8;
    do
    {
      v11 = *v9++;
      *v7++ = v11;
      v10 -= 16;
    }
    while (v10);
  }
  this = v12;
  v2 = v13;
LABEL_2:
  *(_QWORD *)(this + 16) = v2;
  return this;
}

float *WebCore::approximateAsRegion@<X0>(float *this@<X0>, const WebCore::FloatRoundedRect *a2@<X1>, uint64_t a3@<X8>)
{
  float v3;
  float *v4;
  float v5;
  double v6;
  unsigned int v8;
  double v9;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int v15;
  double v16;
  int v18;
  uint64_t v19;
  signed int v20;
  unsigned int v21;
  uint64_t v22;
  signed int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  _BOOL4 v36;
  unsigned int v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  double v44;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  unint64_t v51;
  float v52;
  float v53;
  float v54;
  double v55;
  unsigned int v57;
  double v58;
  unint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  double v64;
  unsigned int v65;
  double v66;
  unint64_t v67;
  float v68;
  float v69;
  double v70;
  unsigned int v71;
  double v72;
  unint64_t v73;
  _DWORD *v74[3];
  char v75;
  int v76;

  v76 = (int)a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v3 = this[2];
  if (v3 <= 0.0)
    return this;
  v4 = this;
  v5 = this[3];
  if (v5 <= 0.0)
    return this;
  v6 = *this * 64.0;
  if (v6 < 2147483650.0 && v6 > -2147483650.0)
    goto LABEL_7;
  if (v6 >= 2147483650.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else
  {
    if (v6 > -2147483650.0)
    {
LABEL_7:
      v8 = (int)v6;
      goto LABEL_8;
    }
    v8 = 0x80000000;
  }
LABEL_8:
  v9 = this[1] * 64.0;
  if (v9 < 2147483650.0 && v9 > -2147483650.0)
    goto LABEL_12;
  if (v9 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFFLL;
  }
  else
  {
    if (v9 > -2147483650.0)
    {
LABEL_12:
      v11 = (int)v9;
      goto LABEL_13;
    }
    v11 = 0x80000000;
  }
LABEL_13:
  v12 = v8;
  v13 = v3 * 64.0;
  if (v13 < 2147483650.0 && v13 > -2147483650.0)
    goto LABEL_17;
  if (v13 >= 2147483650.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else
  {
    if (v13 > -2147483650.0)
    {
LABEL_17:
      v15 = (int)v13;
      goto LABEL_18;
    }
    v15 = 0x80000000;
  }
LABEL_18:
  v16 = v5 * 64.0;
  if (v16 < 2147483650.0 && v16 > -2147483650.0)
    goto LABEL_22;
  if (v16 >= 2147483650.0)
  {
    v18 = 0x7FFFFFFF;
  }
  else
  {
    if (v16 > -2147483650.0)
    {
LABEL_22:
      v18 = (int)v16;
      goto LABEL_23;
    }
    v18 = 0x80000000;
  }
LABEL_23:
  v19 = ((int)v12 >> 6);
  if (v15)
  {
    v20 = v12 + v15;
    if (__OFADD__((_DWORD)v12, v15))
      v20 = (v12 >> 31) + 0x7FFFFFFF;
    if (v20 > 2147483583)
    {
      v21 = 0x1FFFFFF;
    }
    else if (v20 < 0)
    {
      v21 = -(-v20 >> 6);
    }
    else
    {
      v21 = (v20 + 63) >> 6;
    }
  }
  else
  {
    v21 = (int)v12 >> 6;
  }
  v22 = ((int)v11 >> 6);
  if (v18)
  {
    v23 = v11 + v18;
    if (__OFADD__((_DWORD)v11, v18))
      v23 = (v11 >> 31) + 0x7FFFFFFF;
    if (v23 > 2147483583)
    {
      v24 = 0x1FFFFFF;
    }
    else if (v23 < 0)
    {
      v24 = -(-v23 >> 6);
    }
    else
    {
      v24 = (v23 + 63) >> 6;
    }
  }
  else
  {
    v24 = (int)v11 >> 6;
  }
  v25 = v21 - v19;
  if ((int)v25 >= 1)
  {
    v26 = v24 - v22;
    if ((int)v26 >= 1)
    {
      *(_QWORD *)a3 = v19 | (v22 << 32);
      *(_QWORD *)(a3 + 8) = v25 | (v26 << 32);
    }
  }
  v27 = this[4];
  if (v27 != 0.0)
  {
    if (v27 < 0.0)
      v27 = -v27;
    if (v27 >= 0.00000011921)
      goto LABEL_50;
  }
  v28 = this[5];
  if (v28 != 0.0)
  {
    if (v28 < 0.0)
      v28 = -v28;
    if (v28 >= 0.00000011921)
      goto LABEL_50;
  }
  v29 = this[6];
  if (v29 != 0.0)
  {
    if (v29 < 0.0)
      v29 = -v29;
    if (v29 >= 0.00000011921)
      goto LABEL_50;
  }
  v30 = this[7];
  if (v30 != 0.0)
  {
    if (v30 < 0.0)
      v30 = -v30;
    if (v30 >= 0.00000011921)
      goto LABEL_50;
  }
  v31 = this[8];
  if (v31 != 0.0)
  {
    if (v31 < 0.0)
      v31 = -v31;
    if (v31 >= 0.00000011921)
      goto LABEL_50;
  }
  v32 = this[9];
  if (v32 != 0.0)
  {
    if (v32 < 0.0)
      v32 = -v32;
    if (v32 >= 0.00000011921)
      goto LABEL_50;
  }
  v33 = this[10];
  if (v33 != 0.0)
  {
    if (v33 < 0.0)
      v33 = -v33;
    if (v33 >= 0.00000011921)
      goto LABEL_50;
  }
  v34 = this[11];
  if (v34 != 0.0)
  {
    if (v34 < 0.0)
      v34 = -v34;
    if (v34 >= 0.00000011921)
    {
LABEL_50:
      v75 = 0;
      v74[0] = &v76;
      v74[1] = &v75;
      v74[2] = (_DWORD *)a3;
      v35 = v12 + v15;
      v36 = __OFADD__((_DWORD)v12, v15);
      v37 = v12 + v15;
      if (__OFADD__((_DWORD)v12, v15))
        v37 = (v12 >> 31) + 0x7FFFFFFF;
      v38 = (v11 + v18);
      v39 = __OFADD__((_DWORD)v11, v18);
      LODWORD(v40) = (v11 >> 31) + 0x7FFFFFFF;
      if (__OFADD__((_DWORD)v11, v18))
        v40 = v40;
      else
        v40 = v38;
      v41 = this[10];
      v42 = this[11];
      v43 = (float)((float)(int)v40 * 0.015625) - v42;
      v44 = (float)((float)((float)(int)v37 * 0.015625) - v41) * 64.0;
      if (v44 >= 2147483650.0 || v44 <= -2147483650.0)
      {
        if (v44 >= 2147483650.0)
        {
          v46 = 0x7FFFFFFF;
        }
        else
        {
          v46 = (int)v44;
          if (v44 <= -2147483650.0)
            v46 = 0x80000000;
        }
      }
      else
      {
        v46 = (int)v44;
      }
      v47 = v40 << 32;
      v48 = v46;
      v49 = v43 * 64.0;
      if (v49 < 2147483650.0 && v49 > -2147483650.0)
        goto LABEL_70;
      if (v49 >= 2147483650.0)
      {
        v51 = 0x7FFFFFFF00000000;
        goto LABEL_71;
      }
      if (v49 <= -2147483650.0)
        v51 = 0x8000000000000000;
      else
LABEL_70:
        v51 = (unint64_t)(int)v49 << 32;
LABEL_71:
      WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()(v74, v47 | v37, v51 | v48, v41, v42, 0.0);
      if (v39)
        v38 = (v11 >> 31) + 0x7FFFFFFF;
      v52 = v4[8];
      v53 = v4[9];
      v54 = (float)(int)v12 * 0.015625;
      v55 = (float)(v54 + v52) * 64.0;
      if (v55 < 2147483650.0 && v55 > -2147483650.0)
        goto LABEL_77;
      if (v55 >= 2147483650.0)
      {
        v57 = 0x7FFFFFFF;
        goto LABEL_78;
      }
      if (v55 <= -2147483650.0)
        v57 = 0x80000000;
      else
LABEL_77:
        v57 = (int)v55;
LABEL_78:
      v58 = (float)((float)((float)(int)v38 * 0.015625) - v53) * 64.0;
      if (v58 < 2147483650.0 && v58 > -2147483650.0)
        goto LABEL_80;
      if (v58 >= 2147483650.0)
      {
        v59 = 0x7FFFFFFF00000000;
      }
      else
      {
        if (v58 > -2147483650.0)
        {
LABEL_80:
          v59 = (unint64_t)(int)v58 << 32;
          goto LABEL_81;
        }
        v59 = 0x8000000000000000;
      }
LABEL_81:
      WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()(v74, (v38 << 32) | v12, v59 | v57, v52, v53, 1.57079633);
      v60 = v4[4];
      v61 = v4[5];
      v62 = v54 + v60;
      v63 = (float)(int)v11 * 0.015625;
      v64 = v62 * 64.0;
      if (v64 < 2147483650.0 && v64 > -2147483650.0)
        goto LABEL_83;
      if (v64 >= 2147483650.0)
      {
        v65 = 0x7FFFFFFF;
        goto LABEL_84;
      }
      if (v64 > -2147483650.0)
LABEL_83:
        v65 = (int)v64;
      else
        v65 = 0x80000000;
LABEL_84:
      v66 = (float)(v63 + v61) * 64.0;
      if (v66 < 2147483650.0 && v66 > -2147483650.0)
        goto LABEL_86;
      if (v66 >= 2147483650.0)
      {
        v67 = 0x7FFFFFFF00000000;
      }
      else
      {
        if (v66 > -2147483650.0)
        {
LABEL_86:
          v67 = (unint64_t)(int)v66 << 32;
          goto LABEL_87;
        }
        v67 = 0x8000000000000000;
      }
LABEL_87:
      WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()(v74, v12 | ((unint64_t)v11 << 32), v67 | v65, v60, v61, 3.14159265);
      if (v36)
        v35 = (v12 >> 31) + 0x7FFFFFFF;
      v68 = v4[6];
      v69 = v4[7];
      v70 = (float)((float)((float)(int)v35 * 0.015625) - v68) * 64.0;
      if (v70 < 2147483650.0 && v70 > -2147483650.0)
        goto LABEL_91;
      if (v70 >= 2147483650.0)
      {
        v71 = 0x7FFFFFFF;
      }
      else
      {
        if (v70 > -2147483650.0)
        {
LABEL_91:
          v71 = (int)v70;
          goto LABEL_92;
        }
        v71 = 0x80000000;
      }
LABEL_92:
      v72 = (float)(v63 + v69) * 64.0;
      if (v72 < 2147483650.0 && v72 > -2147483650.0)
        goto LABEL_94;
      if (v72 >= 2147483650.0)
      {
        v73 = 0x7FFFFFFF00000000;
        return (float *)WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()(v74, (v11 << 32) | v35, v73 | v71, v68, v69, 4.71238898);
      }
      if (v72 > -2147483650.0)
LABEL_94:
        v73 = (unint64_t)(int)v72 << 32;
      else
        v73 = 0x8000000000000000;
      return (float *)WebCore::approximateAsRegion(WebCore::FloatRoundedRect const&,unsigned int)::$_0::operator()(v74, (v11 << 32) | v35, v73 | v71, v68, v69, 4.71238898);
    }
  }
  return this;
}

WTF *WebCore::Region::unite(WTF *this, const WebCore::Region *a2)
{
  int v2;
  int v3;
  uint64_t v6;
  int v7;
  int v8;
  const void **v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  WTF *v22;
  void *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  void *v28;
  BOOL v29;
  WTF *v30;
  const void **v31;
  int v32;
  int v33;
  int v34;
  const void **v35;
  int v36;
  int v37;
  int v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  _DWORD v50[32];
  WTF *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  _DWORD v59[32];
  WTF *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  _DWORD v68[32];
  WTF *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v3 = *((_DWORD *)a2 + 2);
  v2 = *((_DWORD *)a2 + 3);
  if (v3 >= 1 && v2 >= 1)
  {
    v6 = (uint64_t)this;
    v7 = *((_DWORD *)this + 2);
    if (v7 < 1 || (v8 = *((_DWORD *)this + 3), v8 <= 0))
    {
      *(_OWORD *)this = *(_OWORD *)a2;
      this = (WTF *)*((_QWORD *)a2 + 2);
      if (this)
      {
        this = (WTF *)std::make_unique[abi:sn180100]<WebCore::Region::Shape,WebCore::Region::Shape&>((uint64_t)this, (uint64_t *)&v66);
        v18 = v66;
      }
      else
      {
        v18 = 0;
      }
      v66 = 0;
      v19 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = v18;
      if (v19)
      {
        v20 = *(WTF **)(v19 + 144);
        if ((WTF *)(v19 + 160) != v20 && v20 != 0)
        {
          *(_QWORD *)(v19 + 144) = 0;
          *(_DWORD *)(v19 + 152) = 0;
          WTF::fastFree(v20, a2);
        }
        v22 = *(WTF **)v19;
        if (v19 + 16 != *(_QWORD *)v19 && v22 != 0)
        {
          *(_QWORD *)v19 = 0;
          *(_DWORD *)(v19 + 8) = 0;
          WTF::fastFree(v22, a2);
        }
        this = (WTF *)WTF::fastFree((WTF *)v19, a2);
        v25 = v66;
        v66 = 0;
        if (v25)
        {
          v26 = (WTF *)*((_QWORD *)v25 + 18);
          if ((WTF *)((char *)v25 + 160) != v26 && v26)
          {
            *((_QWORD *)v25 + 18) = 0;
            *((_DWORD *)v25 + 38) = 0;
            WTF::fastFree(v26, v24);
          }
          v27 = *(WTF **)v25;
          if ((WTF *)((char *)v25 + 16) != *(WTF **)v25 && v27)
          {
            *(_QWORD *)v25 = 0;
            *((_DWORD *)v25 + 2) = 0;
            WTF::fastFree(v27, v24);
          }
          this = v25;
          return (WTF *)WTF::fastFree(this, v24);
        }
      }
    }
    else
    {
      v9 = (const void **)*((_QWORD *)a2 + 2);
      v10 = *(_DWORD *)this;
      v11 = *(_DWORD *)a2;
      if (v9
        || v11 > v10
        || v11 + v3 < v10 + v7
        || (v12 = *((_DWORD *)a2 + 1), v13 = *((_DWORD *)this + 1), v12 > v13)
        || v12 + v2 < v13 + v8)
      {
        if (v10 > v11)
          goto LABEL_69;
        v14 = v11 + v3;
        if (v10 + v7 < v14)
          goto LABEL_69;
        v15 = *((_DWORD *)this + 1);
        v16 = *((_DWORD *)a2 + 1);
        if (v15 > v16)
          goto LABEL_69;
        v17 = v16 + v2;
        if (v15 + v8 < v17)
          goto LABEL_69;
        this = (WTF *)*((_QWORD *)this + 2);
        if (this)
        {
          if (v9)
          {
            v47 = *(_QWORD *)(v6 + 16);
            WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v66, v9);
            this = (WTF *)v47;
          }
          else
          {
            v66 = (WTF *)v68;
            v68[0] = v11;
            v68[1] = v14;
            v67 = 0x200000020;
            v69 = (WTF *)&v71;
            v71 = v16;
            v72 = 0;
            v73 = v17;
            v74 = 2;
            v70 = 0x200000010;
          }
          v29 = WebCore::Region::Shape::compareShapes<WebCore::Region::Shape::CompareContainsOperation>((uint64_t *)this, (uint64_t *)&v66);
          v30 = v69;
          if (&v71 != (int *)v69 && v69)
          {
            v69 = 0;
            LODWORD(v70) = 0;
            WTF::fastFree(v30, v28);
          }
          this = v66;
          if (v68 != (_DWORD *)v66 && v66)
          {
            v66 = 0;
            LODWORD(v67) = 0;
            this = (WTF *)WTF::fastFree(this, v28);
          }
          if (!v29)
          {
LABEL_69:
            v31 = *(const void ***)(v6 + 16);
            if (v31)
            {
              WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v57, v31);
            }
            else
            {
              v57 = (WTF *)v59;
              v32 = *(_DWORD *)(v6 + 4);
              v33 = *(_DWORD *)(v6 + 12);
              v34 = *(_DWORD *)(v6 + 8) + *(_DWORD *)v6;
              v59[0] = *(_DWORD *)v6;
              v59[1] = v34;
              v58 = 0x200000020;
              v60 = (WTF *)&v62;
              v62 = v32;
              v63 = 0;
              v64 = v33 + v32;
              v65 = 2;
              v61 = 0x200000010;
            }
            v35 = (const void **)*((_QWORD *)a2 + 2);
            if (v35)
            {
              WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v48, v35);
            }
            else
            {
              v48 = (WTF *)v50;
              v36 = *((_DWORD *)a2 + 1);
              v37 = *((_DWORD *)a2 + 3);
              v38 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
              v50[0] = *(_DWORD *)a2;
              v50[1] = v38;
              v49 = 0x200000020;
              v51 = (WTF *)&v53;
              v53 = v36;
              v54 = 0;
              v55 = v37 + v36;
              v56 = 2;
              v52 = 0x200000010;
            }
            WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::UnionOperation>((uint64_t)&v57, (uint64_t)&v48, (WebCore::Region::Shape *)&v66);
            WebCore::Region::setShape(v6, &v66);
            v39 = v69;
            if (&v71 != (int *)v69 && v69)
            {
              v69 = 0;
              LODWORD(v70) = 0;
              WTF::fastFree(v39, v24);
            }
            v40 = v66;
            if (v68 != (_DWORD *)v66 && v66)
            {
              v66 = 0;
              LODWORD(v67) = 0;
              WTF::fastFree(v40, v24);
            }
            v41 = v51;
            if (&v53 != (int *)v51 && v51)
            {
              v51 = 0;
              LODWORD(v52) = 0;
              WTF::fastFree(v41, v24);
            }
            v42 = v48;
            if (v50 != (_DWORD *)v48 && v48)
            {
              v48 = 0;
              LODWORD(v49) = 0;
              WTF::fastFree(v42, v24);
            }
            v43 = v60;
            if (&v62 != (int *)v60 && v60)
            {
              v60 = 0;
              LODWORD(v61) = 0;
              WTF::fastFree(v43, v24);
            }
            this = v57;
            if (v59 != (_DWORD *)v57)
            {
              if (v57)
              {
                v57 = 0;
                LODWORD(v58) = 0;
                return (WTF *)WTF::fastFree(this, v24);
              }
            }
          }
        }
      }
      else
      {
        *(_OWORD *)this = *(_OWORD *)a2;
        v44 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = 0;
        if (v44)
        {
          v45 = *(WTF **)(v44 + 144);
          if ((WTF *)(v44 + 160) != v45 && v45)
          {
            *(_QWORD *)(v44 + 144) = 0;
            *(_DWORD *)(v44 + 152) = 0;
            WTF::fastFree(v45, 0);
          }
          v46 = *(WTF **)v44;
          if (v44 + 16 != *(_QWORD *)v44 && v46)
          {
            *(_QWORD *)v44 = 0;
            *(_DWORD *)(v44 + 8) = 0;
            WTF::fastFree(v46, v9);
          }
          return (WTF *)WTF::fastFree((WTF *)v44, v9);
        }
      }
    }
  }
  return this;
}

BOOL WebCore::Region::contains(WebCore::Region *this, const WebCore::Region *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  _BOOL8 v9;
  const void **v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  _DWORD v17[32];
  WTF *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)this > *(_DWORD *)a2)
    return 0;
  v3 = *((_DWORD *)a2 + 2) + v2;
  if (*((_DWORD *)this + 2) + *(_DWORD *)this < v3)
    return 0;
  v4 = *((_DWORD *)this + 1);
  v5 = *((_DWORD *)a2 + 1);
  if (v4 > v5)
    return 0;
  v6 = *((_DWORD *)this + 3) + v4;
  v7 = *((_DWORD *)a2 + 3) + v5;
  if (v6 < v7)
    return 0;
  v8 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v8)
    return 1;
  v11 = (const void **)*((_QWORD *)a2 + 2);
  if (v11)
  {
    WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v15, v11);
  }
  else
  {
    v15 = (WTF *)v17;
    v17[0] = v2;
    v17[1] = v3;
    v16 = 0x200000020;
    v18 = (WTF *)&v20;
    v20 = v5;
    v21 = 0;
    v22 = v7;
    v23 = 2;
    v19 = 0x200000010;
  }
  v9 = WebCore::Region::Shape::compareShapes<WebCore::Region::Shape::CompareContainsOperation>(v8, (uint64_t *)&v15);
  v13 = v18;
  if (&v20 != (int *)v18 && v18)
  {
    v18 = 0;
    LODWORD(v19) = 0;
    WTF::fastFree(v13, v12);
  }
  v14 = v15;
  if (v17 != (_DWORD *)v15 && v15)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    WTF::fastFree(v14, v12);
  }
  return v9;
}

uint64_t WebCore::Region::Shape::appendSpan(WebCore::Region::Shape *this, int a2, char *__s1, char *a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  char *v21;
  char *v22;
  void *v23;
  __int128 v24;

  v8 = *((unsigned int *)this + 39);
  if ((_DWORD)v8)
  {
    v9 = (const void *)(*(_QWORD *)this + 4 * *(_QWORD *)(*((_QWORD *)this + 18) + 16 * v8 - 8));
    v10 = *((unsigned int *)this + 3);
    v11 = *(_QWORD *)this + 4 * v10 - (_QWORD)v9;
    if (v11 == a4 - __s1)
    {
      result = memcmp(__s1, v9, v11);
      v12 = v8;
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      v12 = *((unsigned int *)this + 39);
    }
  }
  else
  {
    v12 = 0;
    v10 = *((unsigned int *)this + 3);
  }
  result = (uint64_t)this + 144;
  LODWORD(v24) = a2;
  *((_QWORD *)&v24 + 1) = v10;
  if ((_DWORD)v8 == *((_DWORD *)this + 38))
  {
    result = WTF::Vector<WebCore::Region::Span,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v12 + 1), (unint64_t)&v24);
    v12 = *((unsigned int *)this + 39);
    v14 = *((_QWORD *)this + 18);
    v15 = *(_OWORD *)result;
  }
  else
  {
    v14 = *(_QWORD *)result;
    v15 = v24;
  }
  *(_OWORD *)(v14 + 16 * v12) = v15;
  ++*((_DWORD *)this + 39);
  v16 = *((unsigned int *)this + 3);
  v17 = v16 + ((a4 - __s1) >> 2);
  if (v17 > *((unsigned int *)this + 2))
  {
    v21 = *(char **)this;
    if (v17 < 0x21)
    {
      v22 = (char *)this + 16;
      *(_QWORD *)this = (char *)this + 16;
      *((_DWORD *)this + 2) = 32;
    }
    else
    {
      if (v17 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      v22 = (char *)WTF::fastMalloc((WTF *)(4 * v17));
      *((_DWORD *)this + 2) = v17;
      *(_QWORD *)this = v22;
    }
    result = (uint64_t)memcpy(v22, v21, 4 * v16);
    if ((char *)this + 16 != v21 && v21)
    {
      if (*(char **)this == v21)
      {
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
      }
      result = WTF::fastFree((WTF *)v21, v23);
    }
  }
  if (__s1 != a4)
  {
    v18 = *(_QWORD *)this;
    v19 = *((_DWORD *)this + 3);
    do
    {
      v20 = *(_DWORD *)__s1;
      __s1 += 4;
      *(_DWORD *)(v18 + 4 * v19) = v20;
      v19 = *((_DWORD *)this + 3) + 1;
      *((_DWORD *)this + 3) = v19;
    }
    while (__s1 != a4);
  }
  return result;
}

int *WebCore::Region::intersect(int *this, const WebCore::Region *a2)
{
  int v2;
  _QWORD *v3;
  int v4;
  int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  signed int v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  const void **v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  WTF *v27;
  WTF *v29;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  int v40;
  int v41;
  void *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  WTF *v47;
  int v48;
  int v49;
  WTF *v50;
  uint64_t v51;
  _DWORD v52[32];
  WTF *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  _DWORD v61[32];
  WTF *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  WTF *v68;
  int v69;
  uint64_t v70;
  WTF *v71;
  int v72;
  uint64_t v73;

  v2 = this[2];
  if (v2 < 1)
    return this;
  v3 = this;
  v4 = this[3];
  if (v4 < 1)
    return this;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_DWORD *)a2 + 3);
  if (v6 < 1 || v7 < 1)
    goto LABEL_30;
  v9 = *this;
  v10 = *(_DWORD *)a2;
  v11 = *(_DWORD *)a2 + v6;
  v12 = *this + v2;
  v13 = *this < v11 && v10 < v12;
  if (!v13 || (v14 = this[1], v15 = *((_DWORD *)a2 + 1), v16 = v15 + v7, v14 >= v16))
  {
LABEL_30:
    v18 = this + 4;
    v19 = *((_QWORD *)this + 2);
  }
  else
  {
    v17 = v14 + v4;
    v18 = this + 4;
    v19 = *((_QWORD *)this + 2);
    if (v15 < v17)
    {
      if (!v19)
      {
        v20 = (const void **)*((_QWORD *)a2 + 2);
        if (!v20)
        {
          v22 = *this;
          v21 = this[1];
          v23 = this[2];
          if (*this <= v10)
            v24 = v10;
          else
            v24 = *this;
          if ((int)v21 <= v15)
            v25 = v15;
          else
            v25 = v21;
          if (v11 >= v23 + v22)
            v11 = v23 + v22;
          v26 = this[3] + v21;
          if (v16 < v26)
            v26 = v16;
          if (v24 >= v11 || (int)v25 >= v26)
          {
            v24 = 0;
            v25 = 0;
            v11 = 0;
            v26 = 0;
          }
          *(_QWORD *)this = v24 | (unint64_t)(v25 << 32);
          *((_QWORD *)this + 1) = (v11 - v24) | ((unint64_t)(v26 - v25) << 32);
          return this;
        }
        v59 = (WTF *)v61;
        v61[0] = v9;
        v61[1] = v12;
        v60 = 0x200000020;
        v62 = (WTF *)&v64;
        v64 = v14;
        v65 = 0;
        v66 = v17;
        v67 = 2;
        v63 = 0x200000010;
        goto LABEL_75;
      }
      v31 = *(unsigned int *)(v19 + 12);
      v32 = (WTF *)v61;
      v59 = (WTF *)v61;
      LODWORD(v60) = 32;
      HIDWORD(v60) = v31;
      if (v31 >= 0x21)
      {
        if (v31 >> 30)
          goto LABEL_76;
        v48 = v31;
        v32 = (WTF *)WTF::fastMalloc((WTF *)(4 * v31));
        LODWORD(v60) = v48;
        v59 = v32;
      }
      memcpy(v32, *(const void **)v19, 4 * *(unsigned int *)(v19 + 12));
      v33 = *(unsigned int *)(v19 + 156);
      v34 = (WTF *)&v64;
      v62 = (WTF *)&v64;
      LODWORD(v63) = 16;
      HIDWORD(v63) = v33;
      if (v33 < 0x11)
        goto LABEL_47;
      if (!(v33 >> 28))
      {
        v49 = v33;
        v34 = (WTF *)WTF::fastMalloc((WTF *)(16 * v33));
        LODWORD(v63) = v49;
        v62 = v34;
LABEL_47:
        v35 = *(unsigned int *)(v19 + 156);
        if ((_DWORD)v35)
        {
          v36 = *(__int128 **)(v19 + 144);
          v37 = 16 * v35;
          do
          {
            v38 = *v36++;
            *(_OWORD *)v34 = v38;
            v34 = (WTF *)((char *)v34 + 16);
            v37 -= 16;
          }
          while (v37);
        }
        v20 = (const void **)*((_QWORD *)a2 + 2);
        if (!v20)
        {
          v50 = (WTF *)v52;
          v39 = *((_DWORD *)a2 + 1);
          v40 = *((_DWORD *)a2 + 3);
          v41 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
          v52[0] = *(_DWORD *)a2;
          v52[1] = v41;
          v51 = 0x200000020;
          v53 = (WTF *)&v55;
          v55 = v39;
          v56 = 0;
          v57 = v40 + v39;
          v58 = 2;
          v54 = 0x200000010;
          goto LABEL_52;
        }
LABEL_75:
        WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v50, v20);
LABEL_52:
        WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::IntersectOperation>((uint64_t)&v59, (uint64_t)&v50, (WebCore::Region::Shape *)&v68);
        WebCore::Region::setShape((uint64_t)v3, &v68);
        v43 = v71;
        if (&v73 != (uint64_t *)v71 && v71)
        {
          v71 = 0;
          v72 = 0;
          WTF::fastFree(v43, v42);
        }
        v44 = v68;
        if (&v70 != (uint64_t *)v68 && v68)
        {
          v68 = 0;
          v69 = 0;
          WTF::fastFree(v44, v42);
        }
        v45 = v53;
        if (&v55 != (int *)v53 && v53)
        {
          v53 = 0;
          LODWORD(v54) = 0;
          WTF::fastFree(v45, v42);
        }
        v46 = v50;
        if (v52 != (_DWORD *)v50 && v50)
        {
          v50 = 0;
          LODWORD(v51) = 0;
          WTF::fastFree(v46, v42);
        }
        v47 = v62;
        if (&v64 != (int *)v62 && v62)
        {
          v62 = 0;
          LODWORD(v63) = 0;
          WTF::fastFree(v47, v42);
        }
        this = (int *)v59;
        if (v61 != (_DWORD *)v59 && v59)
        {
          v59 = 0;
          LODWORD(v60) = 0;
          return (int *)WTF::fastFree((WTF *)this, v42);
        }
        return this;
      }
LABEL_76:
      __break(0xC471u);
      JUMPOUT(0x1941D2784);
    }
  }
  *v18 = 0;
  if (v19)
  {
    v27 = *(WTF **)(v19 + 144);
    if ((WTF *)(v19 + 160) != v27 && v27 != 0)
    {
      *(_QWORD *)(v19 + 144) = 0;
      *(_DWORD *)(v19 + 152) = 0;
      WTF::fastFree(v27, a2);
    }
    v29 = *(WTF **)v19;
    if (v19 + 16 != *(_QWORD *)v19 && v29 != 0)
    {
      *(_QWORD *)v19 = 0;
      *(_DWORD *)(v19 + 8) = 0;
      WTF::fastFree(v29, a2);
    }
    this = (int *)WTF::fastFree((WTF *)v19, a2);
  }
  *v3 = 0;
  v3[1] = 0;
  return this;
}

uint64_t *WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::add<WebCore::Region const&>@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
  v13 = (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) >> 16)) & v10;
  v14 = (uint64_t *)(v8 + 32 * v13);
  v15 = *(unsigned __int8 *)v14;
  if (v15 != 255)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        v26 = 0;
        v27 = v8 + 32 * v25;
        goto LABEL_28;
      }
      if (v15 == 254)
        v16 = v14;
      v13 = ((_DWORD)v13 + v17) & v10;
      v14 = (uint64_t *)(v8 + 32 * v13);
      v15 = *(unsigned __int8 *)v14;
      ++v17;
    }
    while (v15 != 255);
    if (v16)
    {
      *(_BYTE *)v16 = -1;
      v16[2] = 0;
      v16[3] = 0;
      v16[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      LOBYTE(v11) = *a2;
      v14 = v16;
    }
  }
  *(_BYTE *)v14 = v11;
  result = (uint64_t *)WebCore::Region::operator=((uint64_t)(v14 + 1), a3);
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_19;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_25:
      result = (uint64_t *)WTF::HashTable<WebCore::EventTrackingRegionsEventType,WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::EventTrackingRegionsEventType,WebCore::Region>>,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>>::rehash(v6, v24, v14);
      v14 = result;
      v20 = *v6;
      if (*v6)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_25;
  }
LABEL_27:
  v27 = v20 + 32 * v23;
  v26 = 1;
LABEL_28:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t WebCore::Region::setShape(uint64_t result, _DWORD *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  signed int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v25;
  void *v26;
  int v27;
  int v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37;
  int v38;
  _OWORD *v39;
  _DWORD *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  WTF *v47;
  WTF *v49;
  WTF *v51;
  WTF *v52;
  WTF *v54;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;

  v2 = a2;
  v3 = (_QWORD *)result;
  v4 = a2[39];
  if ((_DWORD)v4)
  {
    v5 = (unsigned int *)*((_QWORD *)a2 + 18);
    v6 = *v5;
    v7 = &v5[4 * v4];
    v8 = *(v7 - 4);
    if (v5 == v7 - 4)
    {
      v15 = 0x80000000;
      v14 = 0x7FFFFFFF;
    }
    else
    {
      v9 = a2[3];
      v10 = *(_QWORD *)a2;
      v11 = 16 * v4;
      if (!*(_QWORD *)a2)
      {
        v58 = v11 - 16;
        v59 = (unint64_t *)(v5 + 2);
        v15 = 0x80000000;
        while (1)
        {
          v60 = *v59;
          v59 += 2;
          if (v60 > v9)
            break;
          v14 = 0x7FFFFFFF;
          v58 -= 16;
          if (!v58)
            goto LABEL_12;
        }
LABEL_81:
        __break(0xC471u);
        return result;
      }
      v12 = v11 - 16;
      v13 = (uint64_t *)(v5 + 6);
      v14 = 0x7FFFFFFF;
      v15 = 0x80000000;
      do
      {
        v16 = *(v13 - 2);
        if (v16 != v9)
        {
          if (v16 >= v9)
            goto LABEL_81;
          result = *v13;
          v17 = *(_DWORD *)(v10 + 4 * v16);
          if (v17 < v14)
            v14 = v17;
          if (*(_DWORD *)(v10 - 4 + 4 * result) > v15)
            v15 = *(_DWORD *)(v10 - 4 + 4 * result);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
LABEL_12:
    v18 = (v15 - v14);
    if (__OFSUB__(v15, v14))
      v18 = 0x7FFFFFFFLL;
    v19 = __OFSUB__(v8, (_DWORD)v6);
    v20 = (unint64_t)(v8 - v6) << 32;
    if (v19)
      v20 = 0x7FFFFFFF00000000;
    v21 = v18 | v20;
    v22 = v6 << 32;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v14 = 0;
  }
  *v3 = v22 | v14;
  v3[1] = v21;
  v23 = v3[2];
  if (a2[39] > 2u || a2[3] > 2u)
  {
    if (v23)
    {
      v25 = *(WTF **)v23;
      if (*(_QWORD *)v23 != v23 + 16)
      {
        if (v25)
        {
          *(_QWORD *)v23 = 0;
          *(_DWORD *)(v23 + 8) = 0;
          WTF::fastFree(v25, a2);
        }
        *(_QWORD *)v23 = v23 + 16;
      }
      v26 = *(void **)v2;
      if (*(_DWORD **)v2 == v2 + 4)
      {
        memcpy((void *)(v23 + 16), v26, 4 * v2[3]);
        v27 = v2[2];
      }
      else
      {
        *(_QWORD *)v2 = v2 + 4;
        *(_QWORD *)v23 = v26;
        v27 = v2[2];
        v2[2] = 32;
      }
      *(_DWORD *)(v23 + 8) = v27;
      v28 = v2[3];
      v2[3] = 0;
      *(_DWORD *)(v23 + 12) = v28;
      result = *(_QWORD *)(v23 + 144);
      v29 = (_OWORD *)(v23 + 160);
      if (result != v23 + 160)
      {
        if (result)
        {
          *(_QWORD *)(v23 + 144) = 0;
          *(_DWORD *)(v23 + 152) = 0;
          result = WTF::fastFree((WTF *)result, v26);
        }
        *(_QWORD *)(v23 + 144) = v29;
      }
      v30 = (__int128 *)*((_QWORD *)v2 + 18);
      if (v30 == (__int128 *)(v2 + 40))
      {
        v31 = v2[39];
        if ((_DWORD)v31)
        {
          v32 = 16 * v31;
          do
          {
            v33 = *v30++;
            *v29++ = v33;
            v32 -= 16;
          }
          while (v32);
        }
        v34 = v2[38];
      }
      else
      {
        *((_QWORD *)v2 + 18) = v2 + 40;
        *(_QWORD *)(v23 + 144) = v30;
        v34 = v2[38];
        v2[38] = 16;
      }
      *(_DWORD *)(v23 + 152) = v34;
      v35 = v2[39];
      v2[39] = 0;
      *(_DWORD *)(v23 + 156) = v35;
    }
    else
    {
      v36 = WTF::fastMalloc((WTF *)0x1A0);
      result = v36 + 16;
      *(_QWORD *)v36 = v36 + 16;
      *(_QWORD *)(v36 + 8) = 32;
      a2 = v2 + 4;
      v37 = *(void **)v2;
      if (*(_DWORD **)v2 == v2 + 4)
      {
        result = (uint64_t)memcpy((void *)result, a2, 4 * v2[3]);
      }
      else
      {
        *(_QWORD *)v2 = a2;
        *(_QWORD *)v36 = v37;
        v56 = v2[2];
        v2[2] = 32;
        *(_DWORD *)(v36 + 8) = v56;
      }
      v38 = v2[3];
      v2[3] = 0;
      *(_DWORD *)(v36 + 12) = v38;
      v39 = (_OWORD *)(v36 + 160);
      *(_QWORD *)(v36 + 144) = v36 + 160;
      *(_QWORD *)(v36 + 152) = 16;
      v40 = (_DWORD *)*((_QWORD *)v2 + 18);
      v41 = (__int128 *)(v2 + 40);
      if (v40 == v2 + 40)
      {
        v42 = v2[39];
        if ((_DWORD)v42)
        {
          v43 = 16 * v42;
          do
          {
            v44 = *v41++;
            *v39++ = v44;
            v43 -= 16;
          }
          while (v43);
        }
      }
      else
      {
        *((_QWORD *)v2 + 18) = v41;
        *(_QWORD *)(v36 + 144) = v40;
        v57 = v2[38];
        v2[38] = 16;
        *(_DWORD *)(v36 + 152) = v57;
      }
      v45 = v2[39];
      v2[39] = 0;
      *(_DWORD *)(v36 + 156) = v45;
      v46 = v3[2];
      v3[2] = v36;
      if (v46)
      {
        v47 = *(WTF **)(v46 + 144);
        if ((WTF *)(v46 + 160) != v47 && v47 != 0)
        {
          *(_QWORD *)(v46 + 144) = 0;
          *(_DWORD *)(v46 + 152) = 0;
          WTF::fastFree(v47, a2);
        }
        v49 = *(WTF **)v46;
        if (v46 + 16 != *(_QWORD *)v46 && v49 != 0)
        {
          *(_QWORD *)v46 = 0;
          *(_DWORD *)(v46 + 8) = 0;
          WTF::fastFree(v49, a2);
        }
        v51 = (WTF *)v46;
        return WTF::fastFree(v51, a2);
      }
    }
  }
  else
  {
    v3[2] = 0;
    if (v23)
    {
      v52 = *(WTF **)(v23 + 144);
      if ((WTF *)(v23 + 160) != v52 && v52 != 0)
      {
        *(_QWORD *)(v23 + 144) = 0;
        *(_DWORD *)(v23 + 152) = 0;
        WTF::fastFree(v52, a2);
      }
      v54 = *(WTF **)v23;
      if (v23 + 16 != *(_QWORD *)v23 && v54 != 0)
      {
        *(_QWORD *)v23 = 0;
        *(_DWORD *)(v23 + 8) = 0;
        WTF::fastFree(v54, a2);
      }
      v51 = (WTF *)v23;
      return WTF::fastFree(v51, a2);
    }
  }
  return result;
}

WTF *WebCore::Region::subtract(WTF *this, const WebCore::Region *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v8;
  int v9;
  int v10;
  int v12;
  int v13;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  const WebCore::Region *v26;
  WTF *v27;
  uint64_t v28;
  _DWORD v29[32];
  WTF *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _DWORD v38[32];
  WTF *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  uint64_t v47;
  WTF *v48;
  int v49;
  uint64_t v50;

  v2 = *((_DWORD *)this + 2);
  if (v2 >= 1)
  {
    v3 = (uint64_t)this;
    v4 = *((_DWORD *)this + 3);
    if (v4 >= 1)
    {
      v6 = *((_DWORD *)a2 + 2);
      v5 = *((_DWORD *)a2 + 3);
      if (v6 >= 1 && v5 >= 1)
      {
        v8 = *(_DWORD *)this;
        v9 = *(_DWORD *)a2 + v6;
        v10 = *(_DWORD *)this + v2;
        if (*(_DWORD *)this < v9 && *(_DWORD *)a2 < v10)
        {
          v12 = *((_DWORD *)this + 1);
          v13 = *((_DWORD *)a2 + 1);
          if (v12 < v13 + v5 && v13 < v12 + v4)
          {
            v15 = &unk_1969F7000;
            v16 = &unk_1969F7000;
            if (*((_QWORD *)this + 2))
            {
              v26 = a2;
              WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v36, *((const void ***)this + 2));
              v15 = (_QWORD *)&unk_1969F7000;
              v16 = (_QWORD *)&unk_1969F7000;
              a2 = v26;
            }
            else
            {
              v36 = (WTF *)v38;
              v38[0] = v8;
              v38[1] = v10;
              v37 = 0x200000020;
              v39 = (WTF *)&v41;
              v41 = v12;
              v42 = 0;
              v43 = v12 + v4;
              v44 = 2;
              v40 = 0x200000010;
            }
            if (*((_QWORD *)a2 + 2))
            {
              WebCore::Region::Shape::Shape((WebCore::Region::Shape *)&v27, *((const void ***)a2 + 2));
            }
            else
            {
              v27 = (WTF *)v29;
              v17 = *((_DWORD *)a2 + 1);
              v18 = *((_DWORD *)a2 + 3);
              v19 = *((_DWORD *)a2 + 2) + *(_DWORD *)a2;
              v29[0] = *(_DWORD *)a2;
              v29[1] = v19;
              v28 = v15[432];
              v30 = (WTF *)&v32;
              v32 = v17;
              v33 = 0;
              v34 = v18 + v17;
              v35 = 2;
              v31 = v16[433];
            }
            WebCore::Region::Shape::shapeOperation<WebCore::Region::Shape::SubtractOperation>(&v36, (uint64_t)&v27, (WebCore::Region::Shape *)&v45);
            WebCore::Region::setShape(v3, &v45);
            v21 = v48;
            if (&v50 != (uint64_t *)v48 && v48)
            {
              v48 = 0;
              v49 = 0;
              WTF::fastFree(v21, v20);
            }
            v22 = v45;
            if (&v47 != (uint64_t *)v45 && v45)
            {
              v45 = 0;
              v46 = 0;
              WTF::fastFree(v22, v20);
            }
            v23 = v30;
            if (&v32 != (int *)v30 && v30)
            {
              v30 = 0;
              LODWORD(v31) = 0;
              WTF::fastFree(v23, v20);
            }
            v24 = v27;
            if (v29 != (_DWORD *)v27 && v27)
            {
              v27 = 0;
              LODWORD(v28) = 0;
              WTF::fastFree(v24, v20);
            }
            v25 = v39;
            if (&v41 != (int *)v39 && v39)
            {
              v39 = 0;
              LODWORD(v40) = 0;
              WTF::fastFree(v25, v20);
            }
            this = v36;
            if (v38 != (_DWORD *)v36)
            {
              if (v36)
              {
                v36 = 0;
                LODWORD(v37) = 0;
                return (WTF *)WTF::fastFree(this, v20);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WebCore::Region::Shape *WebCore::Region::Shape::Shape(WebCore::Region::Shape *this, const void **a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;

  v4 = *((unsigned int *)a2 + 3);
  v5 = (char *)this + 16;
  *(_QWORD *)this = v5;
  *((_DWORD *)this + 2) = 32;
  *((_DWORD *)this + 3) = v4;
  if (v4 >= 0x21)
  {
    if (v4 >> 30)
      goto LABEL_11;
    v5 = (char *)WTF::fastMalloc((WTF *)(4 * v4));
    *((_DWORD *)this + 2) = v4;
    *(_QWORD *)this = v5;
  }
  memcpy(v5, *a2, 4 * *((unsigned int *)a2 + 3));
  v6 = *((unsigned int *)a2 + 39);
  v7 = (_OWORD *)((char *)this + 160);
  *((_QWORD *)this + 18) = (char *)this + 160;
  *((_DWORD *)this + 38) = 16;
  *((_DWORD *)this + 39) = v6;
  if (v6 < 0x11)
    goto LABEL_3;
  if (v6 >> 28)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x1941D306CLL);
  }
  v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 18) = v7;
LABEL_3:
  v8 = *((unsigned int *)a2 + 39);
  if ((_DWORD)v8)
  {
    v9 = (__int128 *)a2[18];
    v10 = 16 * v8;
    do
    {
      v11 = *v9++;
      *v7++ = v11;
      v10 -= 16;
    }
    while (v10);
  }
  return this;
}

BOOL WebCore::Region::Shape::compareShapes<WebCore::Region::Shape::CompareContainsOperation>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  BOOL v5;
  int *v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  BOOL v13;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  _DWORD *v28;
  int *v30;

  v2 = *((unsigned int *)a1 + 39);
  v3 = (int *)a2[18];
  v4 = &v3[4 * *((unsigned int *)a2 + 39)];
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = (int *)a1[18];
    v7 = &v6[4 * v2];
    v8 = *((unsigned int *)a1 + 3);
    v9 = *a1;
    v10 = *((unsigned int *)a2 + 3);
    v11 = *a2;
    do
    {
      v12 = v6 + 4;
      v13 = v6 + 4 == v7 || v3 == v4;
      if (v13 || v3 + 4 == v4)
        break;
      v15 = *v6;
      v16 = v6[4];
      v17 = *v3;
      v18 = v3[4];
      v19 = *((_QWORD *)v6 + 1);
      if (v19 == v8)
      {
        v20 = 0;
        v21 = 0;
      }
      else
      {
        if (v19 >= v8)
          goto LABEL_44;
        v20 = (_DWORD *)(v9 + 4 * v19);
        v21 = (_DWORD *)(v9 + 4 * *((_QWORD *)v6 + 3));
      }
      v22 = *((_QWORD *)v3 + 1);
      if (v22 == v10)
      {
        v25 = 0;
        v23 = 0;
      }
      else
      {
        if (v22 >= v10)
        {
LABEL_44:
          __break(0xC471u);
          JUMPOUT(0x1941D31F4);
        }
        v23 = (_DWORD *)(v11 + 4 * v22);
        v24 = *((_QWORD *)v3 + 3);
        v25 = (_DWORD *)(v11 + 4 * v24);
        if (v17 < v15 && !v5 && v22 != v24)
          return 0;
      }
      v5 = v20 != v21;
      if (v18 > v15 && v17 < v16)
      {
        while (v20 != v21 && v23 != v25)
        {
          if (*v23 < *v20)
            return 0;
          v26 = v20[1];
          v27 = v23[1];
          v28 = v20 + 2;
          if (v27 >= v26)
            v20 += 2;
          if (v26 >= v27)
            v23 += 2;
          else
            v20 = v28;
        }
        if (v23 != v25)
          return 0;
      }
      if (v18 >= v16)
        v6 += 4;
      if (v16 < v18)
        v6 = v12;
      else
        v3 += 4;
    }
    while (v6 != v7);
  }
  v13 = v3 == v4;
  v30 = v3 + 4;
  return v13 || v30 == v4;
}

void WebCore::LocalFrameView::paintContents(uint64_t a1, WTF *a2, int32x4_t *a3, int a4, uint64_t a5)
{
  WebCore::Frame *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int8x16_t v22;
  uint64_t v23;
  BOOL v24;
  NSObject *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  _BYTE buf[22];
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  _BOOL4 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = *(WebCore::Frame **)(a1 + 328);
  v6 = *((_QWORD *)v5 + 37);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 1944);
    if (v7)
    {
      v9 = *(unsigned __int8 *)(a1 + 480);
      if ((v9 - 2) >= 2 && (v9 != 4 || *(_BYTE *)(a1 + 477)))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 344) + 8) + 328) + 296);
        if (v14)
          v14 = *(_QWORD *)(v14 + 1944);
        if ((*(_QWORD *)(a1 + 384) & 0xFFFFFFFFFFFFLL) != 0
          && *(double *)((*(_QWORD *)(a1 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
          || v14 && (*(_BYTE *)(v14 + 20) & 0xF8) != 0
          || (v15 = *(_QWORD *)(a1 + 464)) != 0 && *(_QWORD *)(v15 + 8)
          || *(_DWORD *)(a1 + 488) && *(_BYTE *)(a1 + 478))
        {
          v25 = qword_1ECE7C400;
          if (os_log_type_enabled((os_log_t)qword_1ECE7C400, OS_LOG_TYPE_DEFAULT))
          {
            WebCore::Frame::pageID(v5);
            if (!v27)
              v26 = 0;
            v28 = *((_QWORD *)v5 + 4);
            v29 = *(_QWORD *)(*((_QWORD *)v5 + 16) + 8) == (_QWORD)v5;
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v26;
            v34 = 2048;
            v35 = v28;
            v36 = 1024;
            v37 = v29;
            _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] LocalFrameView::paintContents: Not painting because render tree needs layout", buf, 0x26u);
          }
        }
        else
        {
          v31 = 0;
          v32 = 0;
          WebCore::LocalFrameView::willPaintContents(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v31, a5);
          v16 = *(_QWORD *)(a1 + 600);
          if (v16)
            v17 = *(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL;
          else
            v17 = 0;
          v18 = *(_QWORD *)(v7 + 144);
          v19.i64[0] = 0xFE000000FE000000;
          v19.i64[1] = 0xFE000000FE000000;
          v20 = (int8x16_t)vcgtq_s32(*a3, v19);
          v21.i64[0] = 0xFE000000FE000000;
          v21.i64[1] = 0xFE000000FE000000;
          v22.i64[0] = 0x8000000080000000;
          v22.i64[1] = 0x8000000080000000;
          *(int8x16_t *)buf = vorrq_s8((int8x16_t)(*(_OWORD *)&v20 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v21, *a3), v22, (int8x16_t)vshlq_n_s32(*a3, 6uLL)), v20));
          v30 = 0;
          WebCore::RenderLayer::paint(v18, a2, (uint64_t)buf, &v30, *(_DWORD *)(a1 + 1148), v17, 0, a4 != 0, a5);
          v23 = *(_QWORD *)(v18 + 264);
          if (v23)
          {
            if (*(_BYTE *)(v23 + 82))
              v24 = a5 == 0;
            else
              v24 = 0;
            if (v24)
            {
              WebCore::LayoutRect::LayoutRect((int8x8_t *)buf, (int32x2_t *)a3);
              WebCore::RenderLayerScrollableArea::paintOverlayScrollbars(v23, a2, (uint64_t)buf, *(_DWORD *)(a1 + 1148), v17);
            }
          }
          WebCore::LocalFrameView::didPaintContents((WTF::MonotonicTime *)a1, (uint64_t)a2, a3, (uint64_t)&v31);
        }
      }
    }
  }
}

_DWORD *WebCore::GraphicsLayerCA::platformCALayerPaintContents(uint64_t a1, int a2, WebCore::GraphicsContext *a3, const WebCore::FloatRect *a4, unsigned __int8 a5)
{
  const WebCore::DisplayList::DisplayList *v8;
  float v10;
  float v11;
  _DWORD *result;
  float v13;
  float v14;
  WTF *v15;
  WTF **v16;
  int v17;
  WTF *v18;
  WTF *v19[4];
  char v20[24];
  uint64_t v21;
  __int128 v22;
  WTF *v23;
  __int128 v24;
  _DWORD *v25;

  *(_BYTE *)(a1 + 890) |= 0x10u;
  v8 = *(const WebCore::DisplayList::DisplayList **)(a1 + 872);
  if (!v8)
  {
    kdebug_trace();
    v10 = *(float *)(a1 + 40) - (float)*(int *)(a1 + 48);
    v11 = *(float *)(a1 + 44) - (float)*(int *)(a1 + 52);
    v24 = *(_OWORD *)a4;
    if (v10 != 0.0)
    {
      v13 = v10;
      if (v10 < 0.0)
        v13 = -v10;
      if (v13 >= 0.00000011921)
        goto LABEL_8;
    }
    if (v11 != 0.0)
    {
      v14 = v11;
      if (v11 < 0.0)
        v14 = -v11;
      if (v14 >= 0.00000011921)
      {
LABEL_8:
        (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a3 + 648))(a3, -v10, -v11);
        *(float *)&v24 = v10 + *(float *)&v24;
        *((float *)&v24 + 1) = v11 + *((float *)&v24 + 1);
      }
    }
    (*(void (**)(_QWORD, uint64_t, WebCore::GraphicsContext *, __int128 *, _QWORD))(**(_QWORD **)(a1 + 24)
                                                                                            + 56))(*(_QWORD *)(a1 + 24), a1, a3, &v24, a5);
    return (_DWORD *)kdebug_trace();
  }
  WebCore::DisplayList::Replayer::Replayer(&v24, a3, v8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 792))(a1))
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 792))(a1);
    WebCore::DisplayList::Replayer::replay((uint64_t)&v24, a4, v17, (uint64_t *)&v22);
    v18 = (WTF *)v22;
    if ((_MergedGlobals_345 & 1) == 0)
    {
      qword_1ECE83E78 = 0;
      _MergedGlobals_345 = 1;
    }
    v21 = a1;
    v22 = *(_OWORD *)a4;
    v23 = v18;
    WTF::HashMap<WebCore::GraphicsLayerCA const*,std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>,WTF::DefaultHash<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<WebCore::GraphicsLayerCA const*>,WTF::HashTraits<std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>>,WTF::HashTableTraits>::add<std::pair<WebCore::FloatRect,std::unique_ptr<WebCore::DisplayList::DisplayList>>>((uint64_t)v20, &v21, (uint64_t)&v22);
    v15 = v23;
    v23 = 0;
    if (!v15)
      goto LABEL_17;
    v16 = &v23;
  }
  else
  {
    WebCore::DisplayList::Replayer::replay((uint64_t)&v24, a4, 0, (uint64_t *)v19);
    v15 = v19[0];
    v19[0] = 0;
    if (!v15)
      goto LABEL_17;
    v16 = v19;
  }
  std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((int)v16, v15);
LABEL_17:
  result = v25;
  v25 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::RenderLayerBacking::paintContents(uint64_t a1, uint64_t a2, WebCore::Scrollbar *a3, float *a4, const WebCore::Color *a5, __n128 a6)
{
  char v6;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unsigned int *v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  WebCore::RenderLayerScrollableArea *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  const WebCore::LayoutRect *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  _QWORD v88[2];
  int32x2_t v89;
  int v90[10];
  int v91;
  int v92;
  CGPoint v93;

  v6 = (char)a5;
  v10 = *a4 + (float)((float)*(int *)(a1 + 192) * 0.015625);
  v11 = a4[1] + (float)((float)*(int *)(a1 + 196) * 0.015625);
  v12 = floorf(v10);
  v13 = 2147500000.0;
  if (v12 < 2147500000.0)
  {
    v13 = -2147500000.0;
    if (v12 > -2147500000.0)
      v13 = (float)(int)v12;
  }
  v14 = floorf(v11);
  v15 = 2147500000.0;
  if (v14 < 2147500000.0)
  {
    v15 = -2147500000.0;
    if (v14 > -2147500000.0)
      v15 = (float)(int)v14;
  }
  v16 = a4[3] + v11;
  v17 = ceilf(a4[2] + v10);
  v18 = 2147500000.0;
  if (v17 < 2147500000.0)
  {
    v18 = -2147500000.0;
    if (v17 > -2147500000.0)
      v18 = (float)(int)v17;
  }
  v19 = ceilf(v16);
  v20 = 2147500000.0;
  if (v19 < 2147500000.0)
  {
    v20 = -2147500000.0;
    if (v19 > -2147500000.0)
      v20 = (float)(int)v19;
  }
  if (v13 >= 2147500000.0)
  {
    v21 = 0x7FFFFFFFLL;
  }
  else if (v13 <= -2147500000.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v13;
  }
  if (v15 >= 2147500000.0)
  {
    v22 = 0x7FFFFFFF00000000;
  }
  else if (v15 <= -2147500000.0)
  {
    v22 = 0x8000000000000000;
  }
  else
  {
    v22 = (unint64_t)(int)v15 << 32;
  }
  v23 = v18 - v13;
  v24 = v20 - v15;
  v25 = 0x80000000;
  if (v23 > -2147500000.0)
    v25 = (int)v23;
  if (v23 < 2147500000.0)
    v26 = v25;
  else
    v26 = 0x7FFFFFFFLL;
  a6.n128_u64[0] = 0x4F0000004F000000;
  v27 = 0x8000000000000000;
  if (v24 > -2147500000.0)
    v27 = (unint64_t)(int)v24 << 32;
  if (v24 < 2147500000.0)
    v28 = v27;
  else
    v28 = 0x7FFFFFFF00000000;
  *(_QWORD *)&v93.x = v22 | v21;
  *(_QWORD *)&v93.y = v28 | v26;
  if ((a5 & 2) == 0)
    v6 = (*(_DWORD *)(a2 + 180) == 0) | a5;
  v29 = *(_QWORD *)(a1 + 72);
  if (v29 == a2
    || *(_QWORD *)(a1 + 80) == a2
    || *(_QWORD *)(a1 + 88) == a2
    || *(_QWORD *)(a1 + 112) == a2
    || *(_QWORD *)(a1 + 168) == a2)
  {
    if ((*(_BYTE *)(a2 + 172) & 0x10) == 0)
    {
      v30 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v29 + 832))(v29, a6);
      if (v30 && (v31 = v30, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 272))(v30) & 1) != 0))
      {
        v82 = *(_DWORD *)(a1 + 180);
        v83 = *(_DWORD *)(a1 + 184);
        v84 = *(_DWORD *)(a1 + 188);
        v85 = *(_DWORD *)(a1 + 176);
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 312))(v31);
        v53 = v52 << 6;
        if (v52 < -33554432)
          v53 = 0x80000000;
        if (v52 <= 0x1FFFFFF)
          v54 = v53;
        else
          v54 = 0x7FFFFFFF;
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 296))(v31);
        v56 = v55 << 6;
        if (v55 < -33554432)
          v56 = 0x80000000;
        if (v55 > 0x1FFFFFF)
          v56 = 0x7FFFFFFF;
        if (v54 == 0x80000000)
          v57 = 0x7FFFFFFF;
        else
          v57 = -v54;
        v81 = v56;
        if (v56 == 0x80000000)
          v58 = 0x7FFFFFFF;
        else
          v58 = -v56;
        v87 = v85 + v57;
        if (__OFADD__(v85, v57))
          v87 = (v85 >> 31) + 0x7FFFFFFF;
        v86 = v82 + v58;
        if (__OFADD__(v82, v58))
          v86 = (v82 >> 31) + 0x7FFFFFFF;
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 320))(v31);
        v60 = v59 << 6;
        if (v59 < -33554432)
          v60 = 0x80000000;
        if (v59 > 0x1FFFFFF)
          v60 = 0x7FFFFFFF;
        v37 = __OFADD__(v54, v60);
        v61 = v54 + v60;
        if (v37)
          v62 = (v54 >> 31) + 0x7FFFFFFF;
        else
          v62 = v61;
        v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 304))(v31);
        v64 = v63 << 6;
        if (v63 < -33554432)
          v64 = 0x80000000;
        if (v63 > 0x1FFFFFF)
          v64 = 0x7FFFFFFF;
        v37 = __OFADD__(v81, v64);
        v65 = v81 + v64;
        if (v37)
          v65 = (v81 >> 31) + 0x7FFFFFFF;
        v35 = v83 + v62;
        if (__OFADD__(v83, v62))
          v35 = (v83 >> 31) + 0x7FFFFFFF;
        v34 = v84 + v65;
        if (__OFADD__(v84, v65))
          v34 = (v84 >> 31) + 0x7FFFFFFF;
        v32 = v86;
        v33 = v87;
      }
      else
      {
        v33 = *(_DWORD *)(a1 + 176);
        v32 = *(_DWORD *)(a1 + 180);
        v35 = *(_DWORD *)(a1 + 184);
        v34 = *(_DWORD *)(a1 + 188);
      }
      v36 = v33 >> 6;
      if (v35)
      {
        v37 = __OFADD__(v33, v35);
        v38 = v33 + v35;
        if (v37)
          v38 = (v33 >> 31) + 0x7FFFFFFF;
        if (v38 > 2147483583)
        {
          v39 = 0x1FFFFFF;
        }
        else if (v38 < 0)
        {
          v39 = -(-v38 >> 6);
        }
        else
        {
          v39 = (v38 + 63) >> 6;
        }
      }
      else
      {
        v39 = v33 >> 6;
      }
      if (v34)
      {
        v37 = __OFADD__(v32, v34);
        v40 = v32 + v34;
        if (v37)
          v40 = (v32 >> 31) + 0x7FFFFFFF;
        if (v40 > 2147483583)
        {
          v41 = 0x1FFFFFF;
        }
        else if (v40 < 0)
        {
          v41 = -(-v40 >> 6);
        }
        else
        {
          v41 = (v40 + 63) >> 6;
        }
      }
      else
      {
        v41 = v32 >> 6;
      }
      if ((int)v21 > v36)
        v36 = v21;
      if (SHIDWORD(v22) <= v32 >> 6)
        v42 = v32 >> 6;
      else
        v42 = HIDWORD(v22);
      v43 = v26 + v21;
      if (v39 < (int)v26 + (int)v21)
        v43 = v39;
      v44 = HIDWORD(v28) + HIDWORD(v22);
      if (v41 < HIDWORD(v28) + HIDWORD(v22))
        v44 = v41;
      if (v36 >= v43 || v42 >= v44)
      {
        v36 = 0;
        v42 = 0;
        v43 = 0;
        v44 = 0;
      }
      *(_QWORD *)&v93.x = __PAIR64__(v42, v36);
      LODWORD(v93.y) = v43 - v36;
      HIDWORD(v93.y) = v44 - v42;
    }
    if ((v6 & 2) != 0)
      v45 = 1024;
    else
      v45 = (v6 & 1) << 11;
    WebCore::RenderLayerBacking::paintIntoLayer(a1, a2, (uint64_t)a3, (uint64_t)&v93, v45, 0);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 528)
                                                                   + 8)
                                                       + 24)
                                           + 8)
                               + 112)
                   + 612) & 0x3E) != 0)
      WebCore::RenderLayerBacking::paintDebugOverlays((WebCore::RenderLayerBacking *)a1, (const WebCore::GraphicsLayer *)a2, a3);
  }
  else
  {
    if (*(_QWORD *)(a1 + 128) == a2)
    {
      v66 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(v66 + 26) & 8) == 0)
        return;
      v67 = *(_QWORD *)(*(_QWORD *)(v66 + 264) + 128);
      *(_QWORD *)v90 = 0;
      WebCore::paintScrollbar(v67, a3, &v93, (const WebCore::IntRect *)v90, a5);
      if ((*(_QWORD *)v90 & 0x8000000000000) == 0)
        return;
      v49 = (unsigned int *)(*(_QWORD *)v90 & 0xFFFFFFFFFFFFLL);
      do
      {
        v68 = __ldaxr(v49);
        v51 = --v68 == 0;
      }
      while (__stlxr(v68, v49));
      goto LABEL_76;
    }
    if (*(_QWORD *)(a1 + 136) == a2)
    {
      v46 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(v46 + 26) & 8) == 0)
        return;
      v47 = *(_QWORD *)(*(_QWORD *)(v46 + 264) + 136);
      *(_QWORD *)v90 = 0;
      WebCore::paintScrollbar(v47, a3, &v93, (const WebCore::IntRect *)v90, a5);
      if ((*(_QWORD *)v90 & 0x8000000000000) == 0)
        return;
      v49 = (unsigned int *)(*(_QWORD *)v90 & 0xFFFFFFFFFFFFLL);
      do
      {
        v50 = __ldaxr(v49);
        v51 = --v50 == 0;
      }
      while (__stlxr(v50, v49));
LABEL_76:
      if (v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, v48);
      }
      return;
    }
    if (*(_QWORD *)(a1 + 144) == a2)
    {
      v70 = *(WebCore::RenderLayerScrollableArea **)(*(_QWORD *)(a1 + 8) + 264);
      WebCore::RenderLayerScrollableArea::overflowControlsRects(v70, (uint64_t)v90);
      v71 = v92 < 1 || v91 < 1;
      v72 = 8;
      if (v71)
        v72 = 12;
      v73 = *(_QWORD *)&v90[v72];
      (*(void (**)(WebCore::Scrollbar *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
      (*(void (**)(WebCore::Scrollbar *, float, float))(*(_QWORD *)a3 + 648))(a3, (float)-(int)v73, (float)(int)((unint64_t)-(uint64_t)(v73 & 0xFFFFFFFF00000000) >> 32));
      WebCore::LayoutRect::LayoutRect(v90, (const WebCore::FloatRect *)a4);
      v75 = (_DWORD)v73 << 6;
      if ((int)v73 < -33554432)
        v75 = 0x80000000;
      if ((int)v73 <= 0x1FFFFFF)
        v76 = v75;
      else
        v76 = 0x7FFFFFFF;
      v77 = HIDWORD(v73) << 6;
      if (SHIDWORD(v73) < -33554432)
        v77 = 0x80000000;
      if (SHIDWORD(v73) > 0x1FFFFFF)
        v77 = 0x7FFFFFFF;
      v78 = v90[0] + v76;
      if (__OFADD__(v90[0], v76))
        v78 = (v90[0] >> 31) + 0x7FFFFFFF;
      v90[0] = v78;
      v37 = __OFADD__(v90[1], v77);
      v79 = v90[1] + v77;
      if (v37)
        v79 = (v90[1] >> 31) + 0x7FFFFFFF;
      v90[1] = v79;
      v89 = 0;
      v88[0] = WebCore::snappedIntRect((WebCore *)v90, v74);
      v88[1] = v80;
      WebCore::RenderLayerScrollableArea::paintScrollCorner((WebCore::RenderScrollbarPart **)v70, a3, &v89, (const WebCore::IntRect *)v88);
      v88[0] = 0;
      WebCore::RenderLayerScrollableArea::paintResizer((uint64_t)v70, a3, (const WebCore::LayoutPoint *)v88, (const WebCore::LayoutRect *)v90);
      (*(void (**)(WebCore::Scrollbar *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
    }
  }
}

void WebCore::RenderLayerBacking::paintIntoLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  WebCore::RenderLayerCompositor *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  WebCore::RenderView *v23;
  WebCore::RenderLayerCompositor *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  WebCore::RenderView *v29;
  WebCore::RenderLayerCompositor *v30;
  WebCore::RenderView *v31;
  WebCore::RenderLayerCompositor *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WebCore::RenderView *v37;
  WebCore::RenderLayerCompositor *v38;
  WebCore::RenderLayerCompositor *v39;
  WTF *v40;
  void *v41;
  WebCore::RenderLayerCompositor *v42;
  WebCore::RenderLayerCompositor *v43;
  WTF *v44;
  void *v45;
  WebCore::RenderLayerCompositor *v46;
  WebCore::RenderLayerCompositor *v47;
  WTF *v48;
  void *v49;
  WebCore::RenderLayerCompositor *v50;
  WebCore::RenderLayerCompositor *v51;
  WTF *v52;
  void *v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  uint64_t v60;
  int v61;

  v61 = a5;
  v60 = a6;
  if (!*(_BYTE *)(a1 + 290))
  {
    v28 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(v28 + 24) & 1) != 0)
    {
      v29 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 24) + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v30 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v29 + 50);
      if (!v30)
      {
        v57 = a6;
        v46 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v30 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v46, v29);
        v47 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v29 + 50);
        *((_QWORD *)v29 + 50) = v30;
        if (v47)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v47);
          WTF::fastFree(v48, v49);
          v30 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v29 + 50);
        }
        a6 = v57;
      }
      if (!*((_BYTE *)v30 + 198))
      {
        v31 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                  + 32)
                                                                                      + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944);
        v32 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v31 + 50);
        if (!v32)
        {
          v58 = a6;
          v50 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
          v32 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v50, v31);
          v51 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v31 + 50);
          *((_QWORD *)v31 + 50) = v32;
          if (v51)
          {
            WebCore::RenderLayerCompositor::~RenderLayerCompositor(v51);
            WTF::fastFree(v52, v53);
            v32 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v31 + 50);
          }
          a6 = v58;
        }
        if (*((_DWORD *)v32 + 54) != 2)
          goto LABEL_38;
      }
    }
  }
  if (*(_BYTE *)(a1 + 291))
  {
    v11 = (_DWORD *)(a2 + 172);
    v10 = *(_DWORD *)(a2 + 172);
    v12 = 32 * (v10 & 3);
    if ((v10 & 4) != 0)
      v12 |= 0x80u;
    if ((v10 & 8) != 0)
      v12 |= 0x100u;
    if ((v10 & 0x40) == 0)
      goto LABEL_8;
  }
  else
  {
LABEL_38:
    if (*(_DWORD *)(a2 + 172) != 64)
      return;
    v11 = (_DWORD *)(a2 + 172);
    v12 = 0;
    v10 = 64;
  }
  v12 |= 0x2000u;
LABEL_8:
  v13 = (v10 << 6) & 0x400 | v12 | (16 * v10) & 0x200;
  if (*(_QWORD *)(a1 + 88) == a2 && *(_BYTE *)(a1 + 294))
  {
    v13 |= 0x840u;
  }
  else
  {
    v14 = *(WebCore::RenderLayerCompositor **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 1944)
                                             + 400);
    if (!v14)
    {
      v55 = (v10 << 6) & 0x400 | v12 | (16 * v10) & 0x200;
      v54 = v11;
      v56 = a6;
      v37 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                + 32)
                                                                                    + 24)
                                                                        + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v38 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v14 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v38, v37);
      v39 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v37 + 50);
      *((_QWORD *)v37 + 50) = v14;
      if (v39)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v39);
        WTF::fastFree(v40, v41);
        v14 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v37 + 50);
      }
      a6 = v56;
      v11 = v54;
      v13 = v55;
    }
    v15 = *(_QWORD *)(*((_QWORD *)v14 + 1) + 144);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 256);
      if (v16)
      {
        if (*(_BYTE *)(v16 + 294) && *(_QWORD *)(v16 + 88))
          v13 |= 0x1000u;
      }
    }
  }
  if (a6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6))
    v13 |= 0x8000u;
  v17 = *(_QWORD *)(a1 + 8);
  v59[0] = &v60;
  v59[1] = a1;
  v59[2] = a3;
  v59[3] = a4;
  v59[4] = &v61;
  WebCore::RenderLayerBacking::paintIntoLayer(WebCore::GraphicsLayer const*,WebCore::GraphicsContext &,WebCore::IntRect const&,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::RegionContext *)::$_0::operator()((uint64_t)v59, v17, v13);
  v18 = *(_QWORD *)(a1 + 168);
  if (!v18)
    v18 = *(_QWORD *)(a1 + 72);
  if (v18 == a2)
  {
    v19 = (((*v11 >> 4) & 1) << 10) | 0x60;
    if (v60)
    {
      v20 = (*v11 << 6) & 0x400;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60))
        v19 = v20 | 0x8060;
    }
    v21 = *(_QWORD **)(a1 + 24);
    if (v21)
    {
      while (1)
      {
        v22 = *(_QWORD *)(*v21 + 8);
        if (v22)
          break;
        v21 = (_QWORD *)v21[2];
        if (!v21)
          goto LABEL_29;
      }
LABEL_24:
      WebCore::RenderLayerBacking::paintIntoLayer(WebCore::GraphicsLayer const*,WebCore::GraphicsContext &,WebCore::IntRect const&,WTF::OptionSet<WebCore::PaintBehavior>,WebCore::RegionContext *)::$_0::operator()((uint64_t)v59, v22, v19);
      while (1)
      {
        v21 = (_QWORD *)v21[2];
        if (!v21)
          break;
        v22 = *(_QWORD *)(*v21 + 8);
        if (v22)
        {
          ++*(_DWORD *)(a1 + 40);
          goto LABEL_24;
        }
      }
      ++*(_DWORD *)(a1 + 40);
    }
  }
LABEL_29:
  if (!v60)
  {
    v23 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                              + 32)
                                                                                  + 24)
                                                                      + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v24 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v23 + 50);
    if (!v24)
    {
      v42 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v24 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v42, v23);
      v43 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v23 + 50);
      *((_QWORD *)v23 + 50) = v24;
      if (v43)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v43);
        WTF::fastFree(v44, v45);
        v24 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v23 + 50);
      }
    }
    v25 = *(_QWORD *)(*((_QWORD *)v24 + 1) + 248);
    WTF::MonotonicTime::now(v24);
    *(_QWORD *)(v25 + 1008) = v26;
    v27 = *(_WORD *)(v25 + 1312);
    if (v27)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v25 + 328) + 24);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 8);
        if (v34)
        {
          if ((v27 & 0x20) != 0)
            v35 = *(_WORD *)(v34 + 660) & 0x20;
          else
            v35 = 0;
          if ((*(_WORD *)(v25 + 1312) & 0x100) != 0)
            v35 |= *(_WORD *)(v34 + 660) & 0x100;
          *(_WORD *)(v25 + 1312) = 0;
          v36 = *(_QWORD *)(v34 + 160);
          if (*(_BYTE *)(v36 + 144))
            v36 = 0;
          if (v35)
          {
            if (v36)
              WebCore::FrameLoader::didReachLayoutMilestone(*(_QWORD *)(v36 + 280), v35);
          }
        }
      }
    }
  }
}

uint64_t WebCore::RenderLayer::paintsWithTransparency(_QWORD *a1, __int16 a2)
{
  WebCore::RenderLayerModelObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  WebCore::Node *v11;
  _QWORD *v12;
  __int16 v13;
  WebCore::Node *v14;

  v2 = (WebCore::RenderLayerModelObject *)a1[4];
  v3 = *((_QWORD *)v2 + 11);
  v4 = *(_QWORD *)(v3 + 32);
  if (*(float *)(v4 + 4) < 1.0)
    return (a2 & 0x200) != 0 || a1[32] == 0;
  v5 = *(_QWORD *)(v4 + 48);
  v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v5 + 8))
  {
    while (!*(_QWORD *)(v5 + 16))
    {
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_7;
    }
    return (a2 & 0x200) != 0 || a1[32] == 0;
  }
  if (*(_QWORD *)(v5 + 16)
     ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return (a2 & 0x200) != 0 || a1[32] == 0;
  }
LABEL_7:
  v8 = *(_QWORD *)(v3 + 40);
  if (!*(_QWORD *)(*(_QWORD *)(v8 + 216) + 8))
    v6 = 0;
  if (v6)
    return (a2 & 0x200) != 0 || a1[32] == 0;
  if ((*(_DWORD *)(v8 + 636) & 0x1F00000) != 0x100000)
    return (a2 & 0x200) != 0 || a1[32] == 0;
  v9 = a1[3];
  if ((v9 & 0x800000000000) != 0 && (v9 & 0xA) != 0)
    return (a2 & 0x200) != 0 || a1[32] == 0;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
    return 0;
  v12 = a1;
  v13 = a2;
  result = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(v2);
  if (result)
  {
    WebCore::RenderSVGResourceClipper::shouldApplyPathClipping(result, &v14);
    v11 = v14;
    v14 = 0;
    if (v11)
    {
      if (*((_DWORD *)v11 + 6) == 2)
      {
        if ((*((_WORD *)v11 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v11);
      }
      else
      {
        *((_DWORD *)v11 + 6) -= 2;
      }
      return 0;
    }
    a1 = v12;
    a2 = v13;
    return (a2 & 0x200) != 0 || a1[32] == 0;
  }
  return result;
}

uint64_t WebCore::LocalFrameView::didPaintContents(WTF::MonotonicTime *a1, uint64_t a2, int32x4_t *a3, uint64_t a4)
{
  WTF::MonotonicTime *v7;
  uint64_t v8;
  uint64_t result;
  const WebCore::RenderObject *v10;
  uint64_t v11;
  WebCore::InspectorInstrumentation *v12;
  int32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int8x16_t v22;

  v7 = a1;
  *((_BYTE *)a1 + 1374) = 0;
  if (*(_BYTE *)(a4 + 5))
    a1 = (WTF::MonotonicTime *)WebCore::LocalFrameView::notifyWidgetsInAllFrames((uint64_t)a1, 1);
  *((_DWORD *)v7 + 287) = *(_DWORD *)a4;
  WTF::MonotonicTime::now(a1);
  *((_QWORD *)v7 + 126) = v8;
  if (*(_BYTE *)(a4 + 4))
    WebCore::LocalFrameView::sCurrentPaintTimeStamp = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) == 0)
  {
    v11 = *(_QWORD *)(*((_QWORD *)v7 + 41) + 296);
    if (v11)
      v12 = *(WebCore::InspectorInstrumentation **)(v11 + 1944);
    else
      v12 = 0;
    v13.i64[0] = 0xFE000000FE000000;
    v13.i64[1] = 0xFE000000FE000000;
    v14 = (int8x16_t)vcgtq_s32(*a3, v13);
    v15.i64[0] = 0xFE000000FE000000;
    v15.i64[1] = 0xFE000000FE000000;
    v16.i64[0] = 0x8000000080000000;
    v16.i64[1] = 0x8000000080000000;
    v22 = vorrq_s8((int8x16_t)(*(_OWORD *)&v14 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v15, *a3), v16, (int8x16_t)vshlq_n_s32(*a3, 6uLL)), v14));
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      result = WebCore::InspectorInstrumentation::instrumentingAgents(v12, v10);
      if (result)
        result = (uint64_t)WebCore::InspectorInstrumentation::didPaintImpl(result, v12, (int32x2_t *)&v22);
    }
    v18 = *(_QWORD *)(*((_QWORD *)v7 + 41) + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
      {
        if ((*((_WORD *)v7 + 656) & 0x20) != 0)
          v20 = *(_WORD *)(v19 + 660) & 0x20;
        else
          v20 = 0;
        if ((*((_WORD *)v7 + 656) & 0x100) != 0)
          v20 |= *(_WORD *)(v19 + 660) & 0x100;
        *((_WORD *)v7 + 656) = 0;
        v21 = *(_QWORD *)(v19 + 160);
        if (*(_BYTE *)(v21 + 144))
          v21 = 0;
        if (v20)
        {
          if (v21)
            return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v21 + 280) + 16) + 368))(*(_QWORD *)(*(_QWORD *)(v21 + 280) + 16), v20);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalFrameView::willPaintContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  const WebCore::RenderObject *v11;
  __n128 v12;
  uint64_t v13;
  WebCore::InspectorInstrumentation *v14;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 296);
    v14 = v13 ? *(WebCore::InspectorInstrumentation **)(v13 + 1944) : 0;
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      result = WebCore::InspectorInstrumentation::instrumentingAgents(v14, v11);
      if (result)
        result = (uint64_t)WebCore::InspectorInstrumentation::willPaintImpl((WTF::JSONImpl::Object *)result, (uint64_t)v14);
    }
  }
  v12.n128_u64[0] = WebCore::LocalFrameView::sCurrentPaintTimeStamp;
  v16 = *(double *)&WebCore::LocalFrameView::sCurrentPaintTimeStamp == 0.0;
  *(_BYTE *)(a4 + 4) = *(double *)&WebCore::LocalFrameView::sCurrentPaintTimeStamp == 0.0;
  if (v16)
  {
    result = WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    WebCore::LocalFrameView::sCurrentPaintTimeStamp = v12.n128_u64[0];
  }
  *(_DWORD *)a4 = *(_DWORD *)(a1 + 1148);
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    if (*(_QWORD *)(v17 + 8))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 56);
      if (v18)
      {
        v20 = *(_QWORD *)(v18 + 8);
        if (v20)
        {
          if (!*(_BYTE *)(v20 + 144))
          {
            v21 = *(_QWORD *)(v20 + 288);
            if (v21)
              *(_DWORD *)(a1 + 1148) |= *(_DWORD *)(v21 + 1148) & 0x50E00;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(v9 + 3382))
    *(_DWORD *)(a1 + 1148) |= 0x10200u;
  if (a5)
  {
    result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a5 + 24))(a5, v12);
    v19 = *(_DWORD *)(a1 + 1148);
    if ((_DWORD)result)
    {
      v19 |= 0x200u;
      *(_DWORD *)(a1 + 1148) = v19;
    }
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 1148);
  }
  if ((v19 & 0x200) == 0 || (v22 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 120)) != 0 && *(_QWORD *)(v22 + 8))
  {
    *(_BYTE *)(a4 + 5) = 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a2 + 72))(a2, v12);
    *(_BYTE *)(a4 + 5) = result ^ 1;
    if ((result & 1) == 0)
      result = WebCore::LocalFrameView::notifyWidgetsInAllFrames(a1, 0);
  }
  *(_BYTE *)(a1 + 1374) = 1;
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setEventRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  int v37;
  uint64_t v38;
  uint64_t i;

  v4 = a1 + 400;
  if (WebCore::operator==(a2, a1 + 400))
  {
    v5 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v5 == *(_DWORD *)(a1 + 436))
    {
      if (!(_DWORD)v5)
        goto LABEL_56;
      v6 = 0;
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a1 + 424);
      do
      {
        v10 = (_DWORD *)(v8 + 24 * v7);
        v11 = (_DWORD *)(v9 + 24 * v7);
        if (*v10 != *v11 || v10[1] != v11[1])
          break;
        v14 = v10[2];
        v13 = v10[3];
        v16 = v11[2];
        v15 = v11[3];
        if (v14 != v16 || v13 != v15)
          break;
        v18 = *(_QWORD *)(v8 + 24 * v7 + 16);
        v19 = *(_QWORD *)(v9 + 24 * v7 + 16);
        if (v18 != v19)
        {
          if (v18)
            v20 = v19 == 0;
          else
            v20 = 1;
          if (v20)
            break;
          v21 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v21 != *(_DWORD *)(v19 + 12))
            break;
          if (memcmp(*(const void **)v18, *(const void **)v19, 4 * v21))
            break;
          v22 = *(unsigned int *)(v18 + 156);
          if ((_DWORD)v22 != *(_DWORD *)(v19 + 156))
            break;
          if ((_DWORD)v22)
          {
            v23 = *(_QWORD *)(v18 + 144);
            v24 = *(_QWORD *)(v19 + 144);
            if (*(_DWORD *)v23 != *(_DWORD *)v24 || *(_QWORD *)(v23 + 8) != *(_QWORD *)(v24 + 8))
              break;
            v26 = 0;
            v27 = (_QWORD *)(v24 + 24);
            v28 = (_QWORD *)(v23 + 24);
            while (v22 - 1 != v26)
            {
              v29 = *((_DWORD *)v28 - 2);
              v30 = *((_DWORD *)v27 - 2);
              v32 = *v28;
              v28 += 2;
              v31 = v32;
              v34 = *v27;
              v27 += 2;
              v33 = v34;
              ++v26;
              if (v29 != v30 || v31 != v33)
              {
                if (v26 >= v22)
                  break;
                goto LABEL_38;
              }
            }
          }
        }
        v6 = ++v7 >= v5;
      }
      while (v7 != v5);
LABEL_38:
      if (v6)
      {
LABEL_56:
        if (WebCore::operator==(a2 + 40, a1 + 440))
        {
          result = WebCore::operator==(a2 + 64, a1 + 464);
          if ((_DWORD)result)
          {
            if (*(_BYTE *)(a2 + 112) && *(_BYTE *)(a1 + 512))
            {
              result = WebCore::operator==(a2 + 88, a1 + 488);
              if ((result & 1) != 0)
                return result;
            }
            else if ((*(_BYTE *)(a2 + 112) != 0) == (*(_BYTE *)(a1 + 512) != 0))
            {
              return result;
            }
          }
        }
      }
    }
  }
  result = WebCore::EventRegion::operator=(v4, a2);
  if ((*(_WORD *)(a1 + 177) & 1) == 0)
  {
    v37 = *(unsigned __int8 *)(a1 + 889);
    v38 = *(_QWORD *)(a1 + 616);
    *(_QWORD *)(a1 + 616) = v38 | 0x4000000000;
    if (!v37)
    {
      for (i = *(_QWORD *)(a1 + 200); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
      if (!v38)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1);
    }
  }
  return result;
}

int32x2_t *WebCore::EventRegion::translate(int32x2_t *this, int32x2_t *a2)
{
  int32x2_t v2;
  unsigned __int32 v3;
  int32x2_t *v4;
  int32x2_t *v5;
  int32x2_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int32 v10;
  _DWORD *v11;
  int32x2_t v12;
  int32x2_t v13;
  __int32 v14;
  __int32 v15;
  int32x2_t v16;
  int32x2_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int32 v30;
  _DWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 v35;
  _DWORD *v36;

  *this = vadd_s32(*this, *a2);
  v2 = this[2];
  if (v2)
  {
    if (*(_DWORD *)(*(_QWORD *)&v2 + 12))
    {
      v18 = 0;
      v19 = **(_QWORD **)&v2;
      do
        *(_DWORD *)(v19 + 4 * v18++) += a2->i32[0];
      while (v18 < *(unsigned int *)(*(_QWORD *)&v2 + 12));
    }
    v20 = *(unsigned int *)(*(_QWORD *)&v2 + 156);
    if ((_DWORD)v20)
    {
      v21 = a2->i32[1];
      v22 = *(_DWORD **)(*(_QWORD *)&v2 + 144);
      do
      {
        *v22 += v21;
        v22 += 4;
        --v20;
      }
      while (v20);
    }
  }
  v3 = this[4].u32[1];
  if (v3)
  {
    v4 = (int32x2_t *)this[3];
    v5 = &v4[3 * v3];
    do
    {
      *v4 = vadd_s32(*v4, *a2);
      v6 = v4[2];
      if (v6)
      {
        if (*(_DWORD *)(*(_QWORD *)&v6 + 12))
        {
          v7 = 0;
          v8 = **(_QWORD **)&v6;
          do
            *(_DWORD *)(v8 + 4 * v7++) += a2->i32[0];
          while (v7 < *(unsigned int *)(*(_QWORD *)&v6 + 12));
        }
        v9 = *(unsigned int *)(*(_QWORD *)&v6 + 156);
        if ((_DWORD)v9)
        {
          v10 = a2->i32[1];
          v11 = *(_DWORD **)(*(_QWORD *)&v6 + 144);
          do
          {
            *v11 += v10;
            v11 += 4;
            --v9;
          }
          while (v9);
        }
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  v12 = *a2;
  this[5] = vadd_s32(this[5], *a2);
  v13 = this[7];
  v14 = v12.i32[1];
  if (v13)
  {
    if (*(_DWORD *)(*(_QWORD *)&v13 + 12))
    {
      v23 = 0;
      v24 = **(_QWORD **)&v13;
      do
        *(_DWORD *)(v24 + 4 * v23++) += a2->i32[0];
      while (v23 < *(unsigned int *)(*(_QWORD *)&v13 + 12));
      v14 = a2->i32[1];
    }
    v25 = *(unsigned int *)(*(_QWORD *)&v13 + 156);
    if ((_DWORD)v25)
    {
      v26 = *(_DWORD **)(*(_QWORD *)&v13 + 144);
      do
      {
        *v26 += v14;
        v26 += 4;
        --v25;
      }
      while (v25);
    }
  }
  v15 = this[8].i32[1];
  this[8].i32[0] += a2->i32[0];
  this[8].i32[1] = v15 + v14;
  v16 = this[10];
  if (v16)
  {
    if (*(_DWORD *)(*(_QWORD *)&v16 + 12))
    {
      v27 = 0;
      v28 = **(_QWORD **)&v16;
      do
        *(_DWORD *)(v28 + 4 * v27++) += a2->i32[0];
      while (v27 < *(unsigned int *)(*(_QWORD *)&v16 + 12));
    }
    v29 = *(unsigned int *)(*(_QWORD *)&v16 + 156);
    if ((_DWORD)v29)
    {
      v30 = a2->i32[1];
      v31 = *(_DWORD **)(*(_QWORD *)&v16 + 144);
      do
      {
        *v31 += v30;
        v31 += 4;
        --v29;
      }
      while (v29);
    }
  }
  if (this[14].i8[0])
  {
    this[11] = vadd_s32(this[11], *a2);
    v17 = this[13];
    if (v17)
    {
      if (*(_DWORD *)(*(_QWORD *)&v17 + 12))
      {
        v32 = 0;
        v33 = **(_QWORD **)&v17;
        do
          *(_DWORD *)(v33 + 4 * v32++) += a2->i32[0];
        while (v32 < *(unsigned int *)(*(_QWORD *)&v17 + 12));
      }
      v34 = *(unsigned int *)(*(_QWORD *)&v17 + 156);
      if ((_DWORD)v34)
      {
        v35 = a2->i32[1];
        v36 = *(_DWORD **)(*(_QWORD *)&v17 + 144);
        do
        {
          *v36 += v35;
          v36 += 4;
          --v34;
        }
        while (v34);
      }
    }
  }
  return this;
}

uint64_t WTF::HashMap<WebCore::EventTrackingRegionsEventType,WebCore::Region,WTF::IntHash<WebCore::EventTrackingRegionsEventType>,WTF::StrongEnumHashTraits<WebCore::EventTrackingRegionsEventType>,WTF::HashTraits<WebCore::Region>,WTF::HashTableTraits>::find(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ HIWORD(v6)) & v3;
  v8 = *(unsigned __int8 *)(v2 + 32 * v7);
  if (v8 == v4)
    return v2 + 32 * v7;
  v9 = 1;
  while (v8 != 255)
  {
    v7 = ((_DWORD)v7 + v9) & v3;
    v8 = *(unsigned __int8 *)(v2 + 32 * v7);
    ++v9;
    if (v8 == v4)
      return v2 + 32 * v7;
  }
  return v2 + 32 * *(unsigned int *)(v2 - 4);
}

uint64_t WebCore::EventRegion::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v16;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
  {
    v6 = *(WTF **)(v5 + 144);
    if ((WTF *)(v5 + 160) != v6 && v6 != 0)
    {
      *(_QWORD *)(v5 + 144) = 0;
      *(_DWORD *)(v5 + 152) = 0;
      WTF::fastFree(v6, (void *)a2);
    }
    v8 = *(WTF **)v5;
    if (v5 + 16 != *(_QWORD *)v5 && v8 != 0)
    {
      *(_QWORD *)v5 = 0;
      *(_DWORD *)(v5 + 8) = 0;
      WTF::fastFree(v8, (void *)a2);
    }
    WTF::fastFree((WTF *)v5, (void *)a2);
  }
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16);
    v12 = 24 * v10;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        v14 = *(WTF **)(v13 + 144);
        if ((WTF *)(v13 + 160) != v14 && v14 != 0)
        {
          *(_QWORD *)(v13 + 144) = 0;
          *(_DWORD *)(v13 + 152) = 0;
          WTF::fastFree(v14, (void *)a2);
        }
        v16 = *(WTF **)v13;
        if (v13 + 16 != *(_QWORD *)v13 && v16 != 0)
        {
          *(_QWORD *)v13 = 0;
          *(_DWORD *)(v13 + 8) = 0;
          WTF::fastFree(v16, (void *)a2);
        }
        WTF::fastFree((WTF *)v13, (void *)a2);
      }
      v11 += 3;
      v12 -= 24;
    }
    while (v12);
  }
  v18 = *(WTF **)(a1 + 24);
  if (v18)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v18, (void *)a2);
  }
  v19 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 32) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 36) = v19;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v21 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v20;
  if (v21)
  {
    v22 = *(WTF **)(v21 + 144);
    if ((WTF *)(v21 + 160) != v22 && v22)
    {
      *(_QWORD *)(v21 + 144) = 0;
      *(_DWORD *)(v21 + 152) = 0;
      WTF::fastFree(v22, (void *)a2);
    }
    v23 = *(WTF **)v21;
    if (v21 + 16 != *(_QWORD *)v21 && v23)
    {
      *(_QWORD *)v21 = 0;
      *(_DWORD *)(v21 + 8) = 0;
      WTF::fastFree(v23, (void *)a2);
    }
    WTF::fastFree((WTF *)v21, (void *)a2);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v25 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v24;
  if (v25)
  {
    v26 = *(WTF **)(v25 + 144);
    if ((WTF *)(v25 + 160) != v26 && v26)
    {
      *(_QWORD *)(v25 + 144) = 0;
      *(_DWORD *)(v25 + 152) = 0;
      WTF::fastFree(v26, (void *)a2);
    }
    v27 = *(WTF **)v25;
    if (v25 + 16 != *(_QWORD *)v25 && v27)
    {
      *(_QWORD *)v25 = 0;
      *(_DWORD *)(v25 + 8) = 0;
      WTF::fastFree(v27, (void *)a2);
    }
    WTF::fastFree((WTF *)v25, (void *)a2);
  }
  v28 = (_OWORD *)(a1 + 88);
  v29 = (_OWORD *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      *v28 = *v29;
      v30 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      v31 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v30;
      if (v31)
      {
        v32 = *(WTF **)(v31 + 144);
        if ((WTF *)(v31 + 160) != v32 && v32)
        {
          *(_QWORD *)(v31 + 144) = 0;
          *(_DWORD *)(v31 + 152) = 0;
          WTF::fastFree(v32, (void *)a2);
        }
        v33 = *(WTF **)v31;
        if (v31 + 16 != *(_QWORD *)v31 && v33)
        {
          *(_QWORD *)v31 = 0;
          *(_DWORD *)(v31 + 8) = 0;
          WTF::fastFree(v33, (void *)a2);
        }
        WTF::fastFree((WTF *)v31, (void *)a2);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 112))
  {
    v34 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (v34)
    {
      v35 = *(WTF **)(v34 + 144);
      if ((WTF *)(v34 + 160) != v35 && v35)
      {
        *(_QWORD *)(v34 + 144) = 0;
        *(_DWORD *)(v34 + 152) = 0;
        WTF::fastFree(v35, (void *)a2);
      }
      v36 = *(WTF **)v34;
      if (v34 + 16 != *(_QWORD *)v34 && v36)
      {
        *(_QWORD *)v34 = 0;
        *(_DWORD *)(v34 + 8) = 0;
        WTF::fastFree(v36, (void *)a2);
      }
      WTF::fastFree((WTF *)v34, (void *)a2);
    }
    *(_BYTE *)(a1 + 112) = 0;
  }
  else
  {
    *v28 = *v29;
    v37 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a1 + 104) = v37;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

uint64_t WebCore::ImageBufferIOSurfaceBackend::context(WebCore::ImageBufferIOSurfaceBackend *this)
{
  uint64_t result;
  CGFloat a;
  _BYTE *v4;
  uint64_t v5;
  float v6;
  double v7;
  const void *v8;
  CGAffineTransform v9;
  CGAffineTransform v10;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    a = *((double *)this + 7);
    if (a != 0.0)
      goto LABEL_3;
    WebCore::IOSurface::createPlatformContext(*((IOSurfaceRef **)this + 6), (PAL **)&v10);
    a = v10.a;
    v8 = (const void *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = *(_QWORD *)&v10.a;
    if (v8)
    {
      CFRelease(v8);
      a = *((double *)this + 7);
    }
    if (a == 0.0)
    {
      result = 137;
      __break(0xC471u);
    }
    else
    {
LABEL_3:
      v4 = (_BYTE *)WTF::fastMalloc((WTF *)0x2F0);
      WebCore::GraphicsContextCG::GraphicsContextCG((uint64_t)v4, *(CGContext **)&a, 0, 0);
      v5 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v4;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v4 = (_BYTE *)*((_QWORD *)this + 5);
      }
      v6 = *((float *)this + 4);
      *(float *)&v10.a = v6;
      *((float *)&v10.a + 1) = v6;
      (*(void (**)(_BYTE *, CGAffineTransform *))(*(_QWORD *)v4 + 632))(v4, &v10);
      v4[744] |= 8u;
      CGContextGetBaseCTM();
      CGAffineTransformScale(&v10, &v9, v6, v6);
      CGContextSetBaseCTM();
      v7 = (double)-*((_DWORD *)this + 3);
      v10.tx = v7 * -0.0 + 0.0;
      v10.ty = 0.0 - v7;
      v10.a = *((float *)this + 4);
      *(float64x2_t *)&v10.b = vmulq_n_f64((float64x2_t)xmmword_1968DD9F0, v10.a);
      v10.d = -v10.a;
      (*(void (**)(_BYTE *, CGAffineTransform *))(*(_QWORD *)v4 + 664))(v4, &v10);
      return *((_QWORD *)this + 5);
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextCG::GraphicsContextCG(uint64_t a1, CGContext *a2, int a3, __int16 a4)
{
  BOOL v8;
  CGInterpolationQuality InterpolationQuality;
  unint64_t v10;
  int Type;
  BOOL v12;
  char v13;

  if (a2)
    v8 = CGContextGetType() != 4;
  else
    v8 = 0;
  InterpolationQuality = CGContextGetInterpolationQuality(a2);
  v10 = 0x304020100uLL >> (8 * InterpolationQuality);
  if (InterpolationQuality >= (kCGInterpolationMedium|kCGInterpolationNone))
    LOBYTE(v10) = 0;
  *(_QWORD *)a1 = off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState(a1 + 8, &WebCore::GraphicsContextState::basicChangeFlags, v10 & 7);
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = *(_BYTE *)(a1 + 716) & 0xFC | v8;
  *(_QWORD *)a1 = off_1E3411A78;
  *(_QWORD *)(a1 + 720) = a2;
  if (a2)
  {
    CFRetain(a2);
    *(_BYTE *)(a1 + 728) = 0;
    *(_BYTE *)(a1 + 736) = 0;
    Type = CGContextGetType();
    v12 = Type == 8 || a3 == 1 && !Type;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)(a1 + 728) = 0;
    *(_BYTE *)(a1 + 736) = 0;
  }
  if ((a4 & 0xFF00) != 0)
    v12 = a4 != 0;
  if (a3 == 1)
    v13 = 10;
  else
    v13 = 8;
  *(_BYTE *)(a1 + 744) = v13 | v12 | *(_BYTE *)(a1 + 744) & 0xF0;
  if (a2)
    WebCore::GraphicsContextCG::didUpdateState((WebCore::GraphicsContextCG *)a1, (WebCore::GraphicsContextState *)(a1 + 8));
  return a1;
}

{
  return WebCore::GraphicsContextCG::GraphicsContextCG(a1, a2, a3, a4);
}

uint64_t WebCore::ImageBufferCGBackend::applyBaseTransform(WebCore::ImageBufferCGBackend *this, WebCore::GraphicsContextCG *a2)
{
  float v4;
  double v5;
  CGAffineTransform v7;
  CGAffineTransform v8;

  v4 = *((float *)this + 4);
  *(float *)&v8.a = v4;
  *((float *)&v8.a + 1) = v4;
  (*(void (**)(WebCore::GraphicsContextCG *, CGAffineTransform *))(*(_QWORD *)a2 + 632))(a2, &v8);
  *((_BYTE *)a2 + 744) |= 8u;
  CGContextGetBaseCTM();
  CGAffineTransformScale(&v8, &v7, v4, v4);
  CGContextSetBaseCTM();
  v5 = (double)-*((_DWORD *)this + 3);
  v8.tx = v5 * -0.0 + 0.0;
  v8.ty = 0.0 - v5;
  v8.a = *((float *)this + 4);
  *(float64x2_t *)&v8.b = vmulq_n_f64((float64x2_t)xmmword_1968DD9F0, v8.a);
  v8.d = -v8.a;
  return (*(uint64_t (**)(WebCore::GraphicsContextCG *, CGAffineTransform *))(*(_QWORD *)a2 + 664))(a2, &v8);
}

void WebCore::GraphicsContextCG::scale(WebCore::GraphicsContextCG *this, const WebCore::FloatSize *a2)
{
  *((_BYTE *)this + 744) |= 8u;
  CGContextScaleCTM(*((CGContextRef *)this + 90), *(float *)a2, *((float *)a2 + 1));
  *((_BYTE *)this + 744) &= ~4u;
}

uint64_t *WebCore::ResourceLoadObserver::shared(WebCore::ResourceLoadObserver *this)
{
  {
    WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
  }
  if (WebCore::sharedObserver(void)::observer)
    return (uint64_t *)WebCore::sharedObserver(void)::observer;
  else
    return &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
}

WebCore::MessageChannel *WebCore::JSMessageChannel::destroy(WebCore::JSMessageChannel *this, JSC::JSCell *a2)
{
  WebCore::MessageChannel *result;
  WTF *v4;
  void *v5;

  result = (WebCore::MessageChannel *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::MessageChannel::~MessageChannel(result, a2);
      return (WebCore::MessageChannel *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

BOOL WebCore::XMLHttpRequest::virtualHasPendingActivity(WebCore::XMLHttpRequest *this)
{
  unsigned int v2;
  int v3;

  if (!*((_BYTE *)this + 712))
    return 0;
  v2 = *((unsigned __int16 *)this + 40);
  v3 = (v2 >> 8) & 7;
  if (v3 == 1)
    return (v2 >> 2) & 1;
  else
    return (v3 - 2) < 2;
}

_QWORD *WebCore::LocalFrameView::performPostLayoutTasks(WebCore::LocalFrameView *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  WTF *updated;
  double v8;
  uint64_t v9;
  WebCore::Page *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  WTF::StringImpl *v22;
  WebCore::Document *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;

  ++WebCore::ScriptDisallowedScope::s_count;
  if (!*((_BYTE *)this + 1378))
  {
    v3 = *((_QWORD *)this + 41);
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if ((*(_WORD *)(v5 + 660) & 0x80) != 0)
        {
          v31 = *(_QWORD *)(v3 + 296);
          if (v31)
          {
            WebCore::Document::updateMainArticleElementAfterLayout(*(_QWORD *)(v3 + 296), a2);
            v32 = *(_QWORD *)(v31 + 1896);
            v33 = 3000;
            if (v32)
            {
              if (*(_QWORD *)(v32 + 8))
                v33 = 1500;
              else
                v33 = 3000;
              v34 = 50.0;
              if (*(_QWORD *)(v32 + 8))
                v34 = 25.0;
            }
            else
            {
              v34 = 50.0;
            }
            v35 = *((_DWORD *)this + 289);
            if (v35 >= v33)
            {
              v36 = *((_DWORD *)this + 291);
              if (v36)
              {
                if ((float)((float)v35 / (float)v36) >= v34)
                  *((_BYTE *)this + 1378) = 1;
              }
            }
          }
        }
      }
    }
  }
  if (*((_BYTE *)this + 481) != 2 && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 296) + 1272))
    WebCore::LocalFrameView::fireLayoutRelatedMilestonesIfNeeded(this);
  v6 = (_QWORD *)*((_QWORD *)this + 41);
  if (*(_QWORD **)(v6[16] + 8) == v6)
  {
    v29 = v6[3];
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v30 + 48) + 16) + 664))(*(_QWORD *)(*(_QWORD *)(v30 + 48) + 16), 0);
        v6 = (_QWORD *)*((_QWORD *)this + 41);
      }
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v6[35] + 16) + 360))(*(_QWORD *)(v6[35] + 16));
  WebCore::LocalFrameView::updateWidgetPositions((uint64_t)this);
  updated = WebCore::LocalFrameView::updateSnapOffsets(this);
  *((_QWORD *)this + 87) = 0;
  WTF::MonotonicTime::now(updated);
  WebCore::TimerBase::setNextFireTime((uint64_t)this + 672, v8 + 0.0);
  v9 = *(_QWORD *)(*((_QWORD *)this + 41) + 24);
  if (v9)
  {
    v10 = *(WebCore::Page **)(v9 + 8);
    if (v10)
    {
      v11 = WebCore::Page::scrollingCoordinator(v10);
      if (v11)
        (*(void (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v11 + 64))(v11, this);
    }
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 1944);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 400);
      if (v14)
      {
        if (*(_BYTE *)(v14 + 195))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 144) + 256);
          if (v15)
            WebCore::RenderLayerBacking::adjustTiledBackingCoverage(v15);
        }
      }
    }
  }
  WebCore::LocalFrameView::scheduleScrollToAnchorAndTextFragment(this);
  WebCore::LocalFrameView::scheduleResizeEventIfNeeded(this);
  WebCore::LocalFrameView::updateLayoutViewport(this);
  v16 = *((_QWORD *)this + 41);
  if (*(_QWORD *)(v16 + 288))
  {
    v17 = *(_QWORD *)(v16 + 24);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 232);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
      }
    }
    v20 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v20 = off_1E33FF9B8;
    v37 = (_QWORD *)v20;
    WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(this, &v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  result = (_QWORD *)WebCore::ScrollableArea::resnapAfterLayout((uint64_t)this + 64);
  v23 = *(WebCore::Document **)(*((_QWORD *)this + 41) + 296);
  if (!*((_BYTE *)v23 + 3447))
  {
    *((_BYTE *)v23 + 3447) = 1;
    v24 = WebCore::Document::eventLoop(v23, v22);
    v25 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v23);
    v26 = v25;
    if (v25)
    {
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 + 1, v25));
    }
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = &off_1E33A37C0;
    v28[1] = v26;
    v37 = v28;
    WebCore::EventLoopTaskGroup::queueTask(v24, 25, (uint64_t *)&v37);
    result = v37;
    v37 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

uint64_t WebCore::ScrollableArea::resnapAfterLayout(uint64_t this)
{
  uint64_t v1;
  int32x2_t *v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  int v7;
  int32x2_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  int32x2_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  int v26;
  int v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t v31;
  int v32;
  int v33;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = (int32x2_t *)this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 632))(this);
    if ((this & 1) == 0)
    {
      this = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v2 + 616))(v2);
      if ((this & 1) == 0)
      {
        this = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v2 + 648))(v2);
        if ((_DWORD)this)
        {
          if (*(_QWORD *)(v1 + 104))
          {
            v16 = roundf((*(float (**)(_QWORD))(**(_QWORD **)(v1 + 88) + 96))(*(_QWORD *)(v1 + 88)));
            v18 = 0x7FFFFFFFLL;
            v19 = 0x80000000;
            if (v16 > -2147500000.0)
              v19 = (int)v16;
            if (v16 < 2147500000.0)
              v18 = v19;
            v20 = roundf(v17);
            v21 = 0x7FFFFFFF00000000;
            v22 = 0x8000000000000000;
            if (v20 > -2147500000.0)
              v22 = (unint64_t)(int)v20 << 32;
            if (v20 < 2147500000.0)
              v21 = v22;
            v23 = v21 | v18;
            v24 = *(_QWORD *)(v1 + 104);
            v31.i32[0] = (*(float (**)(_QWORD))(**(_QWORD **)(v1 + 88) + 160))(*(_QWORD *)(v1 + 88));
            v31.i32[1] = v25;
            v32 = v26;
            v33 = v27;
            v28 = (*(float (**)(_QWORD))(**(_QWORD **)(v1 + 88) + 152))(*(_QWORD *)(v1 + 88));
            this = WebCore::ScrollSnapAnimatorState::resnapAfterLayout(v24, v23, (uint64_t)&v31, v28);
            if ((_DWORD)this)
              *(_BYTE *)(v1 + 112) = 1;
          }
          v3 = v2[2];
          if (v3)
          {
            v4 = *(_QWORD *)(*(_QWORD *)&v3 + 104);
            if (v4)
            {
              v5 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v2 + 416))(v2);
              v6 = v2[4];
              v7 = v6.i32[0] + v5;
              if ((!(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v2 + 392))(v2)
                 || !*(_DWORD *)((*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v2 + 392))(v2) + 120))
                && (v8 = v2[2], *(_QWORD *)&v8)
                && (v9 = *(_QWORD *)(*(_QWORD *)&v8 + 104)) != 0)
              {
                v29 = *(_QWORD *)(v9 + 96);
                v10 = v6.i32[0] + v5;
                if ((v29 & 0xFF00000000) != 0)
                {
                  if (v29 >= (unint64_t)*(unsigned int *)(v4 + 44))
                    goto LABEL_39;
                  v10 = *(_DWORD *)(*(_QWORD *)(v4 + 32) + 40 * v29) / 64;
                }
              }
              else
              {
                v10 = v6.i32[0] + v5;
              }
              v11 = ((*(_QWORD *)&v6 & 0xFFFFFFFF00000000) + v5) >> 32;
              this = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v2 + 400))(v2);
              if (this)
              {
                this = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v2 + 400))(v2);
                v12 = v11;
                if (*(_DWORD *)(this + 120))
                  goto LABEL_18;
              }
              v13 = v2[2];
              v12 = v11;
              if (!*(_QWORD *)&v13)
                goto LABEL_18;
              v14 = *(_QWORD *)(*(_QWORD *)&v13 + 104);
              v12 = v11;
              if (!v14)
                goto LABEL_18;
              v30 = *(_QWORD *)(v14 + 104);
              v12 = v11;
              if ((v30 & 0xFF00000000) == 0)
                goto LABEL_18;
              if (v30 < (unint64_t)*(unsigned int *)(v4 + 60))
              {
                v12 = (*(_DWORD *)(*(_QWORD *)(v4 + 48) + 40 * v30) / 64);
LABEL_18:
                if (v10 != v7 || (_DWORD)v12 != (_DWORD)v11)
                {
                  if (v2[5].i8[5])
                  {
                    v15 = v2[4];
                    v31.f32[0] = (float)(v10 - v15.i32[0]);
                    v31.f32[1] = (float)(int)(((v12 << 32) - (*(_QWORD *)&v15 & 0xFFFFFFFF00000000)) >> 32);
                    return (uint64_t)WebCore::ScrollAnimator::retargetRunningAnimation((WebCore::ScrollAnimator *)v1, &v31);
                  }
                  else
                  {
                    v31.f32[0] = (float)v10;
                    v31.f32[1] = (float)(int)v12;
                    return WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(v2, &v31, 1);
                  }
                }
                return this;
              }
LABEL_39:
              __break(0xC471u);
              JUMPOUT(0x1941D5DB8);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(WebCore::LocalFrameView *a1, _QWORD *a2)
{
  uint64_t v4;
  const WebCore::IntRect *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  _QWORD v10[2];
  _QWORD v11[2];

  v11[0] = WebCore::LocalFrameView::windowClipRect(a1);
  v11[1] = v4;
  v10[0] = WebCore::ScrollView::windowToContents((WebCore::Widget **)a1, (const WebCore::IntRect *)v11, v5);
  v10[1] = v6;
  result = (*(uint64_t (**)(_QWORD, WebCore::LocalFrameView *, _QWORD *))(*(_QWORD *)*a2 + 16))(*a2, a1, v10);
  v8 = *((_QWORD *)a1 + 134);
  *((_QWORD *)a1 + 134) = v11;
  for (i = *(_QWORD *)(*((_QWORD *)a1 + 41) + 88); i; i = *(_QWORD *)(i + 72))
  {
    if (!*(_BYTE *)(i + 144))
    {
      result = *(_QWORD *)(i + 288);
      if (result)
        result = WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(result, a2);
    }
  }
  *((_QWORD *)a1 + 134) = v8;
  return result;
}

uint64_t WebCore::Widget::convertFromContainingWindow(WebCore::Widget *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  uint64_t v4;
  WebCore::Widget *v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = *((_QWORD *)this + 4);
  if (!v4)
    return WebCore::Widget::convertFromContainingWindowToRoot(this, a2, a3);
  v5 = *(WebCore::Widget **)(v4 + 8);
  if (!v5)
    return WebCore::Widget::convertFromContainingWindowToRoot(this, a2, a3);
  v8[0] = WebCore::Widget::convertFromContainingWindow(v5, a2);
  v8[1] = v6;
  return (*(uint64_t (**)(WebCore::Widget *, _QWORD *))(*(_QWORD *)this + 192))(this, v8);
}

unint64_t WebCore::Widget::convertFromContainingWindowToRoot(WebCore::Widget *this, const WebCore::Widget *a2, const WebCore::IntRect *a3)
{
  unint64_t v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  float v18;
  float v19;
  CGFloat v20;
  CGRect v22;

  v3 = (unint64_t)a2;
  v4 = (void *)*((_QWORD *)this + 5);
  if (!v4)
    return *(_QWORD *)a2;
  v5 = (void *)objc_msgSend(*((id *)this + 5), "documentView", a3);
  v6 = (double)*(int *)v3;
  v7 = (double)*(int *)(v3 + 4);
  v8 = (double)*(int *)(v3 + 8);
  v9 = (double)*(int *)(v3 + 12);
  if (v5)
    objc_msgSend(v5, "convertRect:fromView:", 0, v6, v7, v8, v9);
  else
    objc_msgSend(v4, "convertRect:fromView:", 0, v6, v7, v8, v9);
  v14 = v10;
  v15 = v11;
  v16 = v12;
  v17 = v13;
  v18 = v10;
  LODWORD(v3) = vcvtms_s32_f32(v18);
  v19 = v11;
  LODWORD(v4) = vcvtms_s32_f32(v19);
  v20 = v14;
  CGRectGetMaxX(*(CGRect *)(&v11 - 1));
  v22.origin.x = v14;
  v22.origin.y = v15;
  v22.size.width = v16;
  v22.size.height = v17;
  CGRectGetMaxY(v22);
  return v3 | ((_QWORD)v4 << 32);
}

void sub_1941D5FC8()
{
  objc_end_catch();
  JUMPOUT(0x1941D5FD0);
}

void *WebCore::RenderView::updateVisibleViewportRect(WebCore::RenderView *this, const WebCore::IntRect *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];
  _QWORD v20[2];
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = WebCore::RenderView::resumePausedImageAnimationsIfNeeded(this, a2);
  v5 = *((_QWORD *)this + 60);
  if (!v5)
  {
    v6 = 0;
    v7 = 0;
LABEL_3:
    v8 = v5 + 8 * v7;
    goto LABEL_4;
  }
  v7 = *(unsigned int *)(v5 - 4);
  v8 = v5 + 8 * v7;
  if (!*(_DWORD *)(v5 - 12))
  {
    v6 = v5 + 8 * v7;
    goto LABEL_3;
  }
  v6 = *((_QWORD *)this + 60);
  if ((_DWORD)v7)
  {
    v12 = 8 * v7;
    v6 = *((_QWORD *)this + 60);
    while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
    {
      v6 += 8;
      v12 -= 8;
      if (!v12)
      {
        v6 = v8;
        break;
      }
    }
  }
LABEL_4:
  v21 = (char *)this + 480;
  v22 = v6;
  v23 = v8;
  if (v5)
  {
    v10 = *(unsigned int *)(v5 - 4);
    v9 = v5 + 8 * v10;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v24 = v9;
  v25 = v5 + 8 * v10;
  if (v6 != v9)
  {
    if (!*(_QWORD *)(*(_QWORD *)v6 + 8))
    {
      v17 = v6;
      do
      {
        v18 = v17 + 8;
        v17 = v8;
        if (v18 != v8)
        {
          v17 = v18;
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 8;
            if (v17 == v8)
            {
              v17 = v8;
              break;
            }
          }
        }
        v6 = v9;
        if (v17 == v9)
          break;
        v6 = v17;
      }
      while (!*(_QWORD *)(*(_QWORD *)v17 + 8));
    }
    v22 = v6;
  }
  if (v5)
    v11 = v5 + 8 * *(unsigned int *)(v5 - 4);
  else
    v11 = 0;
  if (v6 != v11)
  {
    do
    {
      v13 = *(unsigned __int16 **)(*(_QWORD *)v6 + 8);
      v19[0] = (*(uint64_t (**)(unsigned __int16 *, _QWORD, uint64_t))(*(_QWORD *)v13 + 440))(v13, 0, 0xC00000000);
      v19[1] = v14;
      v20[0] = WebCore::enclosingIntRect(v19);
      v20[1] = v15;
      if (WebCore::IntRect::intersects(a2, (const WebCore::IntRect *)v20))
        v16 = 1;
      else
        v16 = 2;
      WebCore::RenderElement::setVisibleInViewportState(v13, v16);
      result = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21);
      v6 = v22;
    }
    while (v22 != v11);
  }
  return result;
}

WTF *WebCore::RenderView::resumePausedImageAnimationsIfNeeded(WebCore::RenderView *this, const WebCore::IntRect *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t (***v12)();
  uint64_t (**v13)();
  uint64_t v14;
  void *v15;
  WTF *v16;
  WTF *result;
  uint64_t v19;
  uint64_t v20;
  unsigned int **v21;
  WebCore::RenderElement *v22;
  unsigned int **v23;
  void *v24;
  WTF *v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  void *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::Node *v40;
  uint64_t v41;
  WebCore::Node *v42;
  WTF *v43;
  WTF *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v48;
  uint64_t (***v49)();
  _QWORD *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  WTF *v75;
  WTF *v76;
  unsigned int *v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  WTF *v84;
  uint64_t v85;
  _BYTE v86[160];

  v84 = (WTF *)v86;
  v85 = 10;
  v4 = *((_QWORD *)this + 56);
  if (!v4)
  {
    v5 = 0;
    LODWORD(v6) = 0;
LABEL_3:
    v7 = v4 + 24 * v6;
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v7 = v4 + 24 * v6;
  if (!*(_DWORD *)(v4 - 12))
  {
    v5 = v4 + 24 * v6;
    goto LABEL_3;
  }
  v5 = *((_QWORD *)this + 56);
  if ((_DWORD)v6)
  {
    v38 = 24 * v6;
    v5 = *((_QWORD *)this + 56);
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 24;
      v38 -= 24;
      if (!v38)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_4:
  v78 = (WebCore::RenderView *)((char *)this + 448);
  v79 = v5;
  v80 = v7;
  if (v4)
  {
    v9 = *(_DWORD *)(v4 - 4);
    v8 = v4 + 24 * v9;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v81 = v8;
  v82 = v4 + 24 * v9;
  v83 = 0;
  if (v5 != v8)
  {
    v56 = v5;
    while (!*(_QWORD *)(*(_QWORD *)v56 + 8))
    {
      v72 = v56 + 24;
      v79 = v72;
      v56 = v7;
      if (v72 != v7)
      {
        v56 = v72;
        while ((unint64_t)(*(_QWORD *)v56 + 1) <= 1)
        {
          v56 += 24;
          v79 = v56;
          if (v56 == v7)
          {
            v56 = v7;
            break;
          }
        }
      }
      v5 = v8;
      if (v56 == v8)
        goto LABEL_7;
    }
    v5 = v56;
  }
LABEL_7:
  if (v4)
    v10 = v4 + 24 * *(unsigned int *)(v4 - 4);
  else
    v10 = 0;
  if (v5 != v10)
  {
    do
    {
      v20 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(unsigned int ***)(v5 + 8);
        v22 = *(WebCore::RenderElement **)(*(_QWORD *)v5 + 8);
        v23 = &v21[v20];
        do
        {
          if (WebCore::RenderElement::repaintForPausedImageAnimationsIfNeeded(v22, a2, *((WebCore::CachedImage **)*v21 + 1)))
          {
            WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v75, (uint64_t)v22);
            v25 = v75;
            v75 = 0;
            v76 = v25;
            v26 = *v21;
            if (*v21)
            {
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 + 1, v26));
            }
            v77 = v26;
            if (HIDWORD(v85) == (_DWORD)v85)
            {
              WTF::Vector<std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>((unsigned int *)&v84, (unint64_t)&v76);
            }
            else
            {
              v28 = HIDWORD(v85) + 1;
              v29 = (uint64_t *)((char *)v84 + 16 * HIDWORD(v85));
              v30 = (uint64_t)v76;
              v76 = 0;
              *v29 = v30;
              v31 = v77;
              v77 = 0;
              v29[1] = (uint64_t)v31;
              HIDWORD(v85) = v28;
            }
            std::pair<WTF::WeakPtr<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::~pair((uint64_t)&v76, v24);
            v33 = v75;
            v75 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
                WTF::fastFree(v33, v32);
              else
                --*(_DWORD *)v33;
            }
          }
          ++v21;
        }
        while (v21 != v23);
      }
      WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIterator::operator++((uint64_t)&v78);
      v5 = v79;
    }
    while (v79 != v10);
    if (HIDWORD(v85))
    {
      v34 = v84;
      v35 = (WTF *)((char *)v84 + 16 * HIDWORD(v85));
      do
      {
        v36 = *(_QWORD *)v34;
        v37 = *((_QWORD *)v34 + 1);
        v34 = (WTF *)((char *)v34 + 16);
        WebCore::RenderView::removeRendererWithPausedImageAnimations(this, *(WebCore::RenderElement **)(v36 + 8), *(WebCore::CachedImage **)(v37 + 8));
      }
      while (v34 != v35);
    }
  }
  v78 = 0;
  v79 = 0;
  v11 = (uint64_t *)((char *)this + 464);
  v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
  v13 = off_1E3439880;
  *v12 = off_1E3439880;
  v12[1] = (uint64_t (**)())a2;
  v12[2] = (uint64_t (**)())&v78;
  v14 = *((_QWORD *)this + 58);
  if (v14)
  {
    v19 = *(unsigned int *)(v14 - 12);
    if ((_DWORD)v19)
    {
      if (v19 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1941D6750);
      }
      v49 = v12;
      v51 = (WTF *)WTF::fastMalloc((WTF *)(8 * v19));
      v52 = *v11;
      if (*v11 && *(_DWORD *)(v52 - 12))
      {
        v53 = *(unsigned int *)(v52 - 4);
        if ((_DWORD)v53)
        {
          v54 = 8 * v53;
          v55 = (uint64_t *)*v11;
          while ((unint64_t)(*v55 + 1) <= 1)
          {
            ++v55;
            v54 -= 8;
            if (!v54)
              goto LABEL_85;
          }
        }
        else
        {
          v55 = (uint64_t *)*v11;
        }
        v57 = (uint64_t *)(v52 + 8 * v53);
        if (v55 != v57)
        {
          v58 = 0;
          v59 = *v55;
          v60 = 1;
LABEL_87:
          v61 = v60;
          v62 = *(unsigned int **)(v59 + 8);
          if (v62)
          {
            v62 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)v62);
            if (v62)
            {
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 + 1, v62));
            }
          }
          v64 = v58 + 1;
          v76 = 0;
          *((_QWORD *)v51 + v58) = v62;
          WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)&v76, v50);
          while (++v55 != v57)
          {
            v59 = *v55;
            if ((unint64_t)(*v55 + 1) > 1)
            {
              v60 = v61 + 1;
              ++v58;
              if (v55 != v57)
                goto LABEL_87;
              break;
            }
          }
          if (v64)
          {
            v65 = 8 * v61;
            v66 = v51;
            do
            {
              v50 = *(_QWORD **)v66;
              if (*(_QWORD *)v66)
              {
                v67 = v50[1];
                if (v67)
                {
                  if (WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::contains<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(*v11, (uint64_t)v50))((void (*)(uint64_t (***)(), uint64_t))(*v49)[2])(v49, v67);
                }
              }
              v66 = (WTF *)((char *)v66 + 8);
              v65 -= 8;
            }
            while (v65);
            v68 = v51;
            do
            {
              v69 = *(_QWORD *)v68;
              *(_QWORD *)v68 = 0;
              if (v69)
              {
                do
                {
                  v70 = __ldaxr((unsigned int *)v69);
                  v71 = v70 - 1;
                }
                while (__stlxr(v71, (unsigned int *)v69));
                if (!v71)
                {
                  atomic_store(1u, (unsigned int *)v69);
                  v73 = *(unsigned int *)(v69 + 28);
                  if ((_DWORD)v73)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v69 + 16), (WTF::StringImpl *)(*(_QWORD *)(v69 + 16) + 32 * v73));
                  v74 = *(WTF **)(v69 + 16);
                  if (v74)
                  {
                    *(_QWORD *)(v69 + 16) = 0;
                    *(_DWORD *)(v69 + 24) = 0;
                    WTF::fastFree(v74, v50);
                  }
                  WTF::fastFree((WTF *)v69, v50);
                }
              }
              v68 = (WTF *)((char *)v68 + 8);
            }
            while (v68 != (WTF *)((char *)v51 + 8 * v64));
          }
        }
      }
LABEL_85:
      WTF::fastFree(v51, v50);
      v13 = *v49;
    }
    else
    {
      v13 = off_1E3439880;
    }
  }
  v13[1]();
  v16 = v78;
  if (HIDWORD(v79))
  {
    v39 = 8 * HIDWORD(v79);
    do
    {
      v40 = *(WebCore::Node **)v16;
      v16 = (WTF *)((char *)v16 + 8);
      WTF::WeakHashSet<WebCore::SVGSVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGSVGElement>((uint64_t)v11, v40);
      v39 -= 8;
    }
    while (v39);
    v16 = v78;
    if (HIDWORD(v79))
    {
      v41 = 8 * HIDWORD(v79);
      do
      {
        v42 = *(WebCore::Node **)v16;
        *(_QWORD *)v16 = 0;
        if (v42)
        {
          if (*((_DWORD *)v42 + 6) == 2)
          {
            if ((*((_WORD *)v42 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v42, v15);
          }
          else
          {
            *((_DWORD *)v42 + 6) -= 2;
          }
        }
        v16 = (WTF *)((char *)v16 + 8);
        v41 -= 8;
      }
      while (v41);
      v16 = v78;
    }
  }
  if (v16)
  {
    v78 = 0;
    LODWORD(v79) = 0;
    WTF::fastFree(v16, v15);
  }
  if (HIDWORD(v85))
  {
    v43 = v84;
    v44 = (WTF *)((char *)v84 + 16 * HIDWORD(v85));
    do
    {
      v45 = (unsigned int *)*((_QWORD *)v43 + 1);
      *((_QWORD *)v43 + 1) = 0;
      if (v45)
      {
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v45);
          WTF::fastFree((WTF *)v45, v15);
        }
      }
      v48 = *(WTF **)v43;
      *(_QWORD *)v43 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
          WTF::fastFree(v48, v15);
        else
          --*(_DWORD *)v48;
      }
      v43 = (WTF *)((char *)v43 + 16);
    }
    while (v43 != v44);
  }
  result = v84;
  if (v86 != (_BYTE *)v84 && v84 != 0)
  {
    v84 = 0;
    LODWORD(v85) = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

BOOL WebCore::RenderLayerScrollableArea::isUserScrollInProgress(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  if ((*(_BYTE *)(v1 + 22) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(v1 + 96);
  if (((v4 >> 10) & 7) - 3 >= 2 && ((unsigned __int16)v4 >> 13) - 3 > 1)
    return 0;
  v6 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8)
                                                                                                 + 528)
                                                                                     + 8)
                                                                         + 24)
                                                             + 8));
  if (v6)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 256);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 224);
      v9 = *(_QWORD *)(v7 + 232);
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 408))(v6, v8, v9) & 1) != 0)
      return 1;
  }
  v10 = *((_QWORD *)this + 2);
  if (!v10)
    return 0;
  return *(_BYTE *)(v10 + 117) != 0;
}

void WebCore::LocalFrameView::scheduleResizeEventIfNeeded(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  WebCore::DocumentLoader *v13;
  WebCore::Document *v14;
  WebCore::Quirks *v15;
  const WebCore::RenderObject *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  BOOL v26;
  char v27;
  uint64_t v28;
  WebCore::ScrollAnchoringController *v29;
  _BYTE v30[12];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  _BOOL4 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 480) == 2)
    return;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 43) + 8) + 328) + 296);
  if (v2)
    v2 = *(_QWORD *)(v2 + 1944);
  if ((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    return;
  }
  if (v2 && (*(_BYTE *)(v2 + 20) & 0xF8) != 0)
    return;
  v3 = *((_QWORD *)this + 58);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
      return;
  }
  if (*((_DWORD *)this + 122) && *((_BYTE *)this + 478))
    return;
  v4 = *((_QWORD *)this + 41);
  v5 = *(_QWORD *)(v4 + 296);
  if (!v5)
    return;
  v6 = *(_QWORD *)(v5 + 1944);
  if (!v6 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) + 40) + 8) + 3382))
    return;
  v7 = *(_QWORD *)(v4 + 24);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
LABEL_19:
    v9 = 1;
    goto LABEL_20;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 16) + 1352))(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 16)) & 1) != 0)
    return;
  v9 = 0;
LABEL_20:
  if (*((_BYTE *)this + 1204))
  {
    v10 = *(_QWORD *)((char *)this + 1196);
  }
  else if (!*((_BYTE *)this + 321)
         || (v10 = *((_QWORD *)this + 31), (int)v10 < 1)
         || SHIDWORD(v10) < 1
         || !*((_BYTE *)this + 312))
  {
    (*(void (**)(char *, uint64_t, _QWORD))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 1, 0);
  }
  v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 40) + 588);
  if (*((_QWORD *)this + 129) != v10 || v11 != *((float *)this + 288))
  {
    *((_QWORD *)this + 129) = v10;
    *((float *)this + 288) = v11;
    if (!*((_BYTE *)this + 475))
    {
      v12 = *((_QWORD *)this + 41);
      v13 = *(WebCore::DocumentLoader **)(*(_QWORD *)(v12 + 280) + 88);
      if (v13)
      {
        if ((WebCore::DocumentLoader::isLoadingInAPISense(v13) & 1) != 0)
          return;
        v12 = *((_QWORD *)this + 41);
      }
      v14 = *(WebCore::Document **)(v12 + 296);
      v15 = (WebCore::Quirks *)*((_QWORD *)v14 + 86);
      if (!v15)
        v15 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(v12 + 296));
      if (WebCore::Quirks::shouldSilenceWindowResizeEvents(v15))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        WebCore::Document::addConsoleMessage(v14, 16, 4, (WTF::StringImpl **)v30, 0);
        v18 = *(WTF::StringImpl **)v30;
        *(_QWORD *)v30 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = qword_1ECE7C0E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C0E0, OS_LOG_TYPE_DEFAULT))
        {
          v20 = (_QWORD *)*((_QWORD *)this + 41);
          v21 = v20[3];
          if (v21)
          {
            v21 = *(_QWORD *)(v21 + 8);
            if (v21)
            {
              if (*(_BYTE *)(v21 + 40))
                v21 = *(_QWORD *)(v21 + 32);
              else
                v21 = 0;
            }
          }
          v22 = v20[4];
          v23 = *(_QWORD *)(v20[16] + 8) == (_QWORD)v20;
          *(_DWORD *)v30 = 134218752;
          *(_QWORD *)&v30[4] = this;
          v31 = 2048;
          v32 = v21;
          v33 = 2048;
          v34 = v22;
          v35 = 1024;
          v36 = v23;
          _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] LocalFrameView::scheduleResizeEventIfNeeded: Not firing resize events because they are temporarily disabled for this page", v30, 0x26u);
        }
      }
      else
      {
        v24 = *((_QWORD *)this + 169);
        if (v24)
        {
          WebCore::ScrollAnchoringController::invalidateAnchorElement(v24, v16);
          v29 = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 169);
          if (v29)
            WebCore::ScrollAnchoringController::updateAnchorElement(v29);
        }
        WebCore::Document::setNeedsDOMWindowResizeEvent(v14);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41);
        else
          v26 = 0;
        if (v26)
          v27 = v9;
        else
          v27 = 1;
        if ((v27 & 1) == 0)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 88);
          if (v28)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 48))(v28, *((_QWORD *)this + 41));
        }
      }
    }
  }
}

WTF *WebCore::LocalFrameView::updateSnapOffsets(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  WTF *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 1272);
    if (v2)
    {
      *(_DWORD *)(v2 + 24) += 2;
      v3 = *(_QWORD *)(v2 + 64);
      v4 = (_DWORD *)(v3 & 0xFFFFFFFFFFFFLL);
      if ((v3 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v3 & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      {
        ++*(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10);
        if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x58) + 40) + 463) >= 0x100u)
        {
          v6 = this;
          v7 = WebCore::LocalFrameView::baseLayoutViewportSize(this);
          v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 1096))(v4);
          if (v8 == 0x80000000)
            v9 = 0x7FFFFFFFLL;
          else
            v9 = -v8;
          v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 1080))(v4);
          if (v10 == 0x80000000)
            v11 = 0x7FFFFFFFLL;
          else
            v11 = -v10;
          v12 = v9 | (v11 << 32);
          v13 = (WTF *)((char *)v6 + 64);
          v14 = v4[30];
          v15 = (unsigned __int16)v4[31] >> 13;
          v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 41) + 296) + 1248);
          if (v16)
          {
            *(_DWORD *)(v16 + 24) += 2;
            this = WebCore::updateSnapOffsetsForScrollableArea(v13, (uint64_t)v4, (WebCore::RenderStyle *)(v4 + 20), v12, v7, v15, (v14 >> 26) & 1, v16);
            if (*(_DWORD *)(v16 + 24) == 2)
            {
              if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                this = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v16);
            }
            else
            {
              *(_DWORD *)(v16 + 24) -= 2;
            }
          }
          else
          {
            this = WebCore::updateSnapOffsetsForScrollableArea(v13, (uint64_t)v4, (WebCore::RenderStyle *)(v4 + 20), v12, v7, v15, (v14 >> 26) & 1, 0);
          }
        }
        else
        {
          this = WebCore::ScrollableArea::clearSnapOffsets((WTF *)((char *)this + 64));
        }
        v5 = v4[4];
        if (!v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1941D6CECLL);
        }
        v4[4] = v5 - 1;
      }
      else
      {
        this = WebCore::ScrollableArea::clearSnapOffsets((WTF *)((char *)this + 64));
      }
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v2);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
    }
    else
    {
      return WebCore::ScrollableArea::clearSnapOffsets((WTF *)((char *)this + 64));
    }
  }
  return this;
}

void WebCore::LocalFrameView::updateLayoutViewport(WebCore::LocalFrameView *this)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  const CGRect *v51;
  _QWORD v52[2];
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CGRect v57;
  unint64_t v58;

  v2 = *((_QWORD *)this + 41);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 136) + 704) & 0x1000) != 0 && *((_BYTE *)this + 480) != 3)
  {
    if (*((_BYTE *)this + 1104))
    {
      v57.origin = (CGPoint)*((_OWORD *)this + 68);
      goto LABEL_65;
    }
    v4 = *(_QWORD *)(v2 + 296);
    if (v4 && (v5 = *(_QWORD *)(v4 + 1944)) != 0)
    {
      v46 = *(double *)(v5 + 160);
      v57.origin.x = *((CGFloat *)this + 135);
      v57.origin.y = v46;
    }
    else
    {
      v1 = (void *)*((_QWORD *)this + 5);
      if (v1)
      {
        if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
          goto LABEL_72;
        goto LABEL_70;
      }
      v6 = *((_QWORD *)this + 7);
      while (1)
      {
        v7 = ((_DWORD)v6 << 6);
        if ((int)v6 < -33554432)
          v7 = 0x80000000;
        v8 = 0x8000000000000000;
        if (SHIDWORD(v6) >= -33554432)
          v8 = HIDWORD(v6) << 38;
        v9 = 0x7FFFFFFF00000000;
        if (SHIDWORD(v6) <= 0x1FFFFFF)
          v9 = v8;
        v10 = *((unsigned __int8 *)this + 1104);
        if ((int)v6 > 0x1FFFFFF)
          v7 = 0x7FFFFFFFLL;
        v57.origin.x = *((CGFloat *)this + 135);
        *(_QWORD *)&v57.origin.y = v9 | v7;
        if (!v10)
          break;
LABEL_65:
        if (!*((_BYTE *)this + 108))
          goto LABEL_52;
        v55 = WebCore::LocalFrameView::visualViewportRect(this);
        v56 = v43;
        v58 = WebCore::LocalFrameView::minStableLayoutViewportOrigin(this);
        v54 = WebCore::LocalFrameView::maxStableLayoutViewportOrigin(this);
        v44 = WebCore::LocalFrameView::computeLayoutViewportOrigin((int *)&v55, (int *)&v58, (int *)&v54, (int *)&v57, 0);
        if (*((_BYTE *)this + 1104))
        {
          v45 = *((_QWORD *)this + 137);
          v52[0] = v44;
          v52[1] = v45;
          v53 = 1;
          WebCore::LocalFrameView::setLayoutViewportOverrideRect(this, v52, 1);
          goto LABEL_52;
        }
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_72:
        v1 = (void *)objc_msgSend(v1, "superview");
LABEL_70:
        objc_msgSend(v1, "frame");
        v57.origin.x = v47;
        v57.origin.y = v48;
        v57.size.width = v49;
        v57.size.height = v50;
        WebCore::enclosingIntRect(&v57, v51);
      }
    }
    v55 = WebCore::LocalFrameView::visualViewportRect(this);
    v56 = v11;
    v54 = WebCore::LocalFrameView::minStableLayoutViewportOrigin(this);
    v12 = WebCore::LocalFrameView::unscaledMaximumScrollPosition(this);
    v13 = v12;
    v14 = HIDWORD(v12) << 6;
    if (SHIDWORD(v12) < -33554432)
      v14 = 0x80000000;
    if (SHIDWORD(v12) <= 0x1FFFFFF)
      v15 = v14;
    else
      v15 = 0x7FFFFFFF;
    v16 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
    v17 = (unsigned int *)(v16 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    if (*(_QWORD *)(*(_QWORD *)(v16 + 128) + 8) == v16
      && (v35 = *(_QWORD *)(v16 + 24)) != 0
      && (v36 = *(_QWORD *)(v35 + 8)) != 0)
    {
      v19 = *(_DWORD *)(v36 + 664);
    }
    else
    {
      v19 = 0;
    }
    do
    {
      v20 = __ldaxr(v17);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v17));
    if (!v21)
    {
      atomic_store(1u, v17);
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = off_1E31FE290;
      v39[1] = v17;
      v58 = (unint64_t)v39;
      WTF::ensureOnMainThread();
      v40 = v58;
      v58 = 0;
      if (v40)
        (*(void (**)(unint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
    v22 = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 720))(this);
    v23 = (unsigned int *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    if (*(_QWORD *)(*(_QWORD *)(v22 + 128) + 8) == v22
      && (v37 = *(_QWORD *)(v22 + 24)) != 0
      && (v38 = *(_QWORD *)(v37 + 8)) != 0)
    {
      v25 = *(_DWORD *)(v38 + 668);
    }
    else
    {
      v25 = 0;
    }
    do
    {
      v26 = __ldaxr(v23);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v23));
    if (!v27)
    {
      atomic_store(1u, v23);
      v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v41 = off_1E31FE290;
      v41[1] = v23;
      v58 = (unint64_t)v41;
      WTF::ensureOnMainThread();
      v42 = v58;
      v58 = 0;
      if (v42)
        (*(void (**)(unint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
    v28 = (v25 + v19) << 6;
    if (v25 + v19 < -33554432)
      v28 = 0x80000000;
    if (v25 + v19 > 0x1FFFFFF)
      v28 = 0x7FFFFFFF;
    v29 = __OFSUB__(v15, v28);
    v30 = v15 - v28;
    if (v29)
      v30 = (v15 >> 31) + 0x7FFFFFFF;
    if (v13 >= -33554432)
      v31 = (v13 << 6) & ~(v13 << 6 >> 31);
    else
      v31 = 0;
    if (v13 <= 0x1FFFFFF)
      v32 = v31;
    else
      v32 = 0x7FFFFFFFLL;
    v58 = v32 | ((unint64_t)(v30 & ~(v30 >> 31)) << 32);
    v33 = WebCore::LocalFrameView::computeLayoutViewportOrigin((int *)&v55, (int *)&v54, (int *)&v58, (int *)&v57, (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 136) + 664) >> 38) & 1);
    if (*((_DWORD *)this + 270) != (_DWORD)v33 || *((_DWORD *)this + 271) != HIDWORD(v33))
      WebCore::LocalFrameView::setBaseLayoutViewportOrigin(this, v33, 1);
LABEL_52:
    WebCore::LocalFrameView::layoutOrVisualViewportChanged(this);
  }
}

unint64_t WebCore::LocalFrameView::computeUpdatedLayoutViewportRect(_QWORD *a1, uint64_t a2, int *a3, int *a4, int *a5, int *a6, int *a7, int a8)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  double v25;
  int v26;
  float v27;
  int v28;
  float v29;
  double v30;
  _QWORD v32[2];

  v10 = a5[1];
  v11 = a3[1];
  if (*a5 <= *a3)
    v12 = *a3;
  else
    v12 = *a5;
  if ((int)v10 <= (int)v11)
    v13 = v11;
  else
    v13 = v10;
  v32[0] = *a1;
  v32[1] = v12 | (v13 << 32);
  v14 = WebCore::LocalFrameView::computeLayoutViewportOrigin(a4, a6, a7, (int *)v32, 1);
  v15 = HIDWORD(v14);
  if (a8)
  {
    v16 = (float)(int)v14 * 0.015625;
    v17 = *(_DWORD *)(a2 + 8);
    v18 = *(_DWORD *)(a2 + 12);
    v19 = __OFSUB__(v17, (_DWORD)v12);
    v20 = v17 - v12;
    v21 = (v17 >> 31) + 0x7FFFFFFF;
    if (!v19)
      v21 = v20;
    v22 = 0.0;
    if (v16 > 0.0)
      v23 = (float)(int)v14 * 0.015625;
    else
      v23 = 0.0;
    if (v16 >= (float)((float)v21 * 0.015625))
      v24 = (float)v21 * 0.015625;
    else
      v24 = v23;
    v25 = v24 * 64.0;
    if (v25 > -2147483650.0)
      v26 = (int)v25;
    else
      v26 = 0x80000000;
    if (v25 < 2147483650.0)
      LODWORD(v14) = v26;
    else
      LODWORD(v14) = 0x7FFFFFFF;
    v27 = (float)(int)v15 * 0.015625;
    v28 = v18 - v13;
    if (__OFSUB__(v18, (_DWORD)v13))
      v28 = (v18 >> 31) + 0x7FFFFFFF;
    if (v27 > 0.0)
      v22 = v27;
    if (v27 >= (float)((float)v28 * 0.015625))
      v29 = (float)v28 * 0.015625;
    else
      v29 = v22;
    v30 = v29 * 64.0;
    if (v30 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFFLL;
    }
    else if (v30 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v30;
    }
  }
  return v14 | (unint64_t)(v15 << 32);
}

unint64_t WebCore::LocalFrameView::computeLayoutViewportOrigin(int *a1, int *a2, int *a3, int *a4, int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  unsigned int v30;
  int v31;
  int v32;
  _BOOL4 v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v49;

  v5 = a1[2];
  v6 = a4[1];
  v7 = a4[2];
  v8 = *a1;
  if (v5 > v7)
  {
    if ((a5 & 1) != 0)
    {
      v26 = a1[3];
      v27 = a4[3];
      if (v26 > v27)
      {
        v45 = a1[1];
        return v8 | (unint64_t)(v45 << 32);
      }
      goto LABEL_40;
    }
    if (v8 < *a2)
    {
      v8 = *a2;
    }
    else if (v8 >= *a3)
    {
      v8 = *a3;
    }
  }
  else
  {
    v9 = *a4;
    if (a5)
    {
      v10 = v8 < *a2;
      v11 = v8 + v5;
      if (__OFADD__(v8, v5))
        v11 = (v8 >> 31) + 0x7FFFFFFF;
      v17 = __OFSUB__(v11, v7);
      v12 = v11 - v7;
      v13 = (v11 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v13 = v12;
      v14 = v13 > *a3;
    }
    else
    {
      v10 = 0;
      v14 = 0;
    }
    if (v8 >= v9 && !v10)
      v16 = *a4;
    else
      v16 = *a1;
    v17 = __OFADD__(v8, v5);
    v18 = v8 + v5;
    v19 = v17;
    v20 = (v8 >> 31) + 0x7FFFFFFF;
    if (v17)
      v21 = v20;
    else
      v21 = v18;
    v17 = __OFADD__(v9, v7);
    v22 = v9 + v7;
    v23 = (v9 >> 31) + 0x7FFFFFFF;
    if (!v17)
      v23 = v22;
    v24 = v21 > v23 || v14;
    if (!v19)
      v20 = v18;
    v17 = __OFSUB__(v20, v7);
    v25 = v20 - v7;
    v8 = (v20 >> 31) + 0x7FFFFFFF;
    if (!v17)
      v8 = v25;
    if (v24 != 1)
      v8 = v16;
    if (!v10 && v8 < *a2)
      v8 = *a2;
    if (!v14 && v8 > *a3)
      v8 = *a3;
  }
  v26 = a1[3];
  v27 = a4[3];
  if (v26 <= v27)
  {
    if ((a5 & 1) == 0)
    {
      v29 = 0;
      v33 = 0;
      v28 = a1[1];
LABEL_46:
      if (v28 < v6 || (v34 = a4[1], v29))
        v34 = v28;
      v35 = __OFADD__(v28, v26);
      v36 = v28 + v26;
      v37 = v35;
      v38 = (v28 >> 31) + 0x7FFFFFFF;
      if (v35)
        v39 = v38;
      else
        v39 = v36;
      v17 = __OFADD__(v6, v27);
      v40 = v6 + v27;
      v41 = (v6 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v41 = v40;
      v42 = v39 > v41 || v33;
      if (v37)
        v36 = v38;
      v17 = __OFSUB__(v36, v27);
      v43 = v36 - v27;
      v44 = (v36 >> 31) + 0x7FFFFFFF;
      if (v17)
        v43 = v44;
      if (v42 == 1)
        v45 = v43;
      else
        v45 = v34;
      if (!v29)
      {
        v46 = a2[1];
        if ((int)v45 < v46)
          v45 = v46;
        else
          v45 = v45;
      }
      if (!v33)
      {
        v47 = a3[1];
        if ((int)v45 > v47)
          v45 = v47;
        else
          v45 = v45;
      }
      return v8 | (unint64_t)(v45 << 32);
    }
LABEL_40:
    v28 = a1[1];
    v29 = v28 < a2[1];
    v30 = v28 + v26;
    if (__OFADD__(v28, v26))
      v30 = (v28 >> 31) + 0x7FFFFFFF;
    v17 = __OFSUB__(v30, v27);
    v31 = v30 - v27;
    v32 = (v30 >> 31) + 0x7FFFFFFF;
    if (!v17)
      v32 = v31;
    v33 = v32 > a3[1];
    goto LABEL_46;
  }
  v45 = a1[1];
  if ((a5 & 1) == 0)
  {
    if ((int)v45 < a2[1])
    {
      v45 = a2[1];
    }
    else
    {
      v49 = a3[1];
      if ((int)v45 >= v49)
        v45 = v49;
      else
        v45 = v45;
    }
  }
  return v8 | (unint64_t)(v45 << 32);
}

uint64_t WebCore::RenderElement::repaintForPausedImageAnimationsIfNeeded(WebCore::RenderElement *this, const WebCore::IntRect *a2, WebCore::CachedImage *a3)
{
  char v6;
  uint64_t v7;
  __int16 v8;
  uint64_t result;
  WebCore::SVGImage *v10;
  int v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[20];
  __int128 v17;
  char v18;

  v6 = *((_BYTE *)this + 45);
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((v6 & 1) != 0)
    goto LABEL_7;
  v8 = *(_WORD *)(v7 + 28);
  if ((v8 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941D7774);
  }
  if ((v8 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
  {
    if ((WebCore::HTMLImageElement::allowsAnimation((WebCore::HTMLImageElement *)v7) & 1) == 0)
      return 0;
  }
  else
  {
LABEL_7:
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528)
                                                       + 8)
                                           + 24)
                               + 8)
                   + 545))
      return 0;
  }
  result = WebCore::RenderElement::isVisibleInDocumentRect(this, a2);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v17) = 0;
      v18 = 0;
      v16[0] = 0;
      v16[16] = 0;
      WebCore::RenderObject::issueRepaint((uint64_t)this, &v17, 0, 0, (uint64_t)v16);
    }
    if ((*(_WORD *)((char *)a3 + 557) >> 5) - 3 <= 1
      && (*((_BYTE *)a3 + 720) & 0x10) != 0)
    {
      WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v17);
      v13 = (unsigned int *)v17;
      if ((_QWORD)v17)
      {
        v10 = *(WebCore::SVGImage **)(v17 + 8);
        *(_QWORD *)&v17 = 0;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((WTF *)v13, v12);
        }
      }
      else
      {
        v10 = 0;
      }
    }
    else
    {
      v10 = (WebCore::SVGImage *)*((_QWORD *)a3 + 86);
      if (v10)
        goto LABEL_13;
      {
        v10 = (WebCore::SVGImage *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v17);
        v10 = (WebCore::SVGImage *)v17;
        WebCore::Image::nullImage(void)::nullImage = v17;
      }
    }
    if (!v10)
    {
LABEL_18:
      if ((*((_BYTE *)this + 45) & 8) != 0)
      {
        v11 = *((_DWORD *)this + 4) + 1;
        *((_DWORD *)this + 4) = v11;
        if ((*((_BYTE *)this + 21) & 0x80) != 0)
        {
          WebCore::RenderLayer::contentChanged(*((_QWORD *)this + 18), 0);
          v11 = *((_DWORD *)this + 4);
        }
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x1941D7794);
        }
        *((_DWORD *)this + 4) = v11 - 1;
      }
      return 1;
    }
LABEL_13:
    ++*((_DWORD *)v10 + 2);
    if ((*(unsigned int (**)(WebCore::SVGImage *))(*(_QWORD *)v10 + 56))(v10))
      WebCore::SVGImage::scheduleStartAnimation(v10);
    else
      (*(void (**)(WebCore::SVGImage *))(*(_QWORD *)v10 + 256))(v10);
    if (*((_DWORD *)v10 + 2) == 1)
      (*(void (**)(WebCore::SVGImage *))(*(_QWORD *)v10 + 8))(v10);
    else
      --*((_DWORD *)v10 + 2);
    goto LABEL_18;
  }
  return result;
}

uint64_t WebCore::RenderElement::isVisibleInDocumentRect(WebCore::RenderElement *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  signed int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v22;
  int v24;
  uint64_t result;
  WebCore::RenderElement *v26;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  if (*(_BYTE *)(v3 + 467)
    || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0
    || (*((_BYTE *)this + 120) & 0x30) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 1944) + 248);
  if (!*(_QWORD *)(v6 + 40))
  {
    if (*(_BYTE *)(v6 + 24) && *(_BYTE *)(v6 + 25))
      goto LABEL_7;
    return 0;
  }
  if (WebCore::ScrollView::platformIsOffscreen((id *)v6))
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
LABEL_7:
  v7 = *(_QWORD *)(v3 + 1272);
  if (v7 == v2)
    goto LABEL_47;
  if ((*((_BYTE *)this + 45) & 1) != 0
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
  {
    goto LABEL_11;
  }
  v26 = (WebCore::RenderElement *)(*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v26)
    goto LABEL_47;
  if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if (WebCore::RenderElement::hasBackground(v26))
    {
LABEL_11:
      v8 = (*(uint64_t (**)(WebCore::RenderElement *, _QWORD, uint64_t))(*(_QWORD *)this + 440))(this, 0, 0xC00000000);
      goto LABEL_12;
    }
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
LABEL_47:
    WebCore::RenderView::backgroundRect(*(WebCore::RenderView **)(v3 + 1944));
LABEL_12:
    v11 = (int)v8 >> 6;
    v12 = v8 >> 38;
    v13 = v8 + v9;
    if (__OFADD__((_DWORD)v8, v9))
      v13 = (v8 >> 31) + 0x7FFFFFFF;
    v14 = -(-v13 >> 6);
    if (v13 >= 0)
      v14 = (v13 + 63) >> 6;
    if (v13 <= 2147483583)
      v15 = v14;
    else
      v15 = 0x1FFFFFF;
    if (!v9)
      v15 = (int)v8 >> 6;
    v16 = v8 >> 38;
    if (v10)
    {
      v17 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v8), v10))
        v17 = HIDWORD(v8) + v10;
      v18 = -(-v17 >> 6);
      if (v17 >= 0)
        v18 = (v17 + 63) >> 6;
      if (v17 <= 2147483583)
        LODWORD(v16) = v18;
      else
        LODWORD(v16) = 0x1FFFFFF;
    }
    v19 = *((_DWORD *)a2 + 2);
    if (v19 >= 1)
    {
      v20 = *((_DWORD *)a2 + 3);
      if (v20 >= 1 && v15 > v11 && (int)v16 > (int)v12)
      {
        v22 = *(_DWORD *)a2 + v19;
        if (*(_DWORD *)a2 < v15 && v11 < v22)
        {
          v24 = *((_DWORD *)a2 + 1);
          if (v24 < (int)v16)
            return (int)v12 < v24 + v20;
        }
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderObject::clippedOverflowRect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 656))(&v8, a1, 0);
  if (v9 < 1 || v10 < 1)
    return 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 472))(&v11, a1, &v8, a2, a3);
  if (v12)
    return v11;
  result = 1158;
  __break(0xC471u);
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIterator::operator++(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  *(_QWORD *)(a1 + 8) = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
  {
    v3 += 3;
    *(_QWORD *)(a1 + 8) = v3;
  }
  ++*(_DWORD *)(a1 + 40);
  WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebCore::RenderElement,WTF::Vector<WTF::WeakPtr<WebCore::CachedImage,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SingleThreadWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a1);
  ++*(_DWORD *)(*(_QWORD *)a1 + 8);
  return a1;
}

void WebCore::LocalFrameView::setLayoutViewportOverrideRect(WebCore::LocalFrameView *this, _BYTE *a2, char a3)
{
  char *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WebCore::ScrollAnchoringController *v37;
  double v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  unsigned int v43;
  unsigned int v44;
  float v45;
  unsigned int v46;
  float v47;
  char *v48;
  _BYTE *v49;
  double v50;
  CGFloat v51;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v55;
  unsigned int v56;
  float MaxX;
  unsigned int v58;
  float MaxY;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v5 = (char *)this + 1088;
  v6 = *((unsigned __int8 *)this + 1104);
  if (a2[16])
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((a2[16] != 0) == (v6 != 0))
      return;
    if (!*((_BYTE *)this + 1104))
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
      if (v8 && (v9 = *(_QWORD *)(v8 + 1944)) != 0)
      {
        v11 = *(_QWORD *)(v9 + 160);
        v16 = v11 & 0xFFFFFFFF00000000;
      }
      else
      {
        v10 = (void *)*((_QWORD *)this + 5);
        if (v10)
        {
          v48 = (char *)this + 1088;
          v49 = a2;
          if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
            v10 = (void *)objc_msgSend(v10, "superview");
          objc_msgSend(v10, "frame");
          v51 = v50;
          y = v62.origin.y;
          width = v62.size.width;
          height = v62.size.height;
          *(float *)&v50 = v50;
          v55 = vcvtms_s32_f32(*(float *)&v50);
          *(float *)&v50 = v62.origin.y;
          v56 = vcvtms_s32_f32(*(float *)&v50);
          v62.origin.x = v51;
          MaxX = CGRectGetMaxX(v62);
          v58 = vcvtps_s32_f32(MaxX);
          v63.origin.x = v51;
          v63.origin.y = y;
          v63.size.width = width;
          v63.size.height = height;
          MaxY = CGRectGetMaxY(v63);
          v11 = (v58 - v55) | ((unint64_t)(vcvtps_s32_f32(MaxY) - v56) << 32);
          a2 = v49;
          v5 = v48;
        }
        else
        {
          v11 = *((_QWORD *)this + 7);
        }
        v12 = HIDWORD(v11);
        v13 = (_DWORD)v11 << 6;
        if ((int)v11 < -33554432)
          v13 = 0x80000000;
        v14 = (int)v11 <= 0x1FFFFFF;
        LODWORD(v11) = 0x7FFFFFFF;
        if (v14)
          LODWORD(v11) = v13;
        v15 = v12 << 38;
        if ((int)v12 < -33554432)
          v15 = 0x8000000000000000;
        v14 = (int)v12 <= 0x1FFFFFF;
        v16 = 0x7FFFFFFF00000000;
        if (v14)
          v16 = v15;
      }
      v17 = (char *)this + 1080;
      v18 = v16 | v11;
      goto LABEL_33;
    }
  }
  else if (*(_DWORD *)a2 == *((_DWORD *)this + 272)
         && *((_DWORD *)a2 + 1) == *((_DWORD *)this + 273)
         && *((_DWORD *)a2 + 2) == *((_DWORD *)this + 274)
         && *((_DWORD *)a2 + 3) == *((_DWORD *)this + 275))
  {
    return;
  }
  v18 = *((_QWORD *)this + 137);
  v17 = (char *)this + 1088;
LABEL_33:
  v21 = *(_QWORD *)v17;
  v22 = *(_OWORD *)a2;
  v5[16] = a2[16];
  *(_OWORD *)v5 = v22;
  if (*((_BYTE *)this + 1104))
  {
    v31 = *((_QWORD *)this + 137);
  }
  else
  {
    v23 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v23 && (v24 = *(_QWORD *)(v23 + 1944)) != 0)
    {
      v28 = *(_QWORD *)(v24 + 160);
      v30 = v28 & 0xFFFFFFFF00000000;
    }
    else
    {
      v25 = (void *)*((_QWORD *)this + 5);
      if (v25)
      {
        if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
          v25 = (void *)objc_msgSend(v25, "superview");
        objc_msgSend(v25, "frame");
        v39 = v38;
        v40 = v60.origin.y;
        v41 = v60.size.width;
        v42 = v60.size.height;
        *(float *)&v38 = v38;
        v43 = vcvtms_s32_f32(*(float *)&v38);
        *(float *)&v38 = v60.origin.y;
        v44 = vcvtms_s32_f32(*(float *)&v38);
        v60.origin.x = v39;
        v45 = CGRectGetMaxX(v60);
        v46 = vcvtps_s32_f32(v45);
        v61.origin.x = v39;
        v61.origin.y = v40;
        v61.size.width = v41;
        v61.size.height = v42;
        v47 = CGRectGetMaxY(v61);
        v26 = (v46 - v43) | ((unint64_t)(vcvtps_s32_f32(v47) - v44) << 32);
      }
      else
      {
        v26 = *((_QWORD *)this + 7);
      }
      v27 = HIDWORD(v26);
      LODWORD(v28) = (_DWORD)v26 << 6;
      if ((int)v26 < -33554432)
        LODWORD(v28) = 0x80000000;
      if ((int)v26 > 0x1FFFFFF)
        LODWORD(v28) = 0x7FFFFFFF;
      v29 = v27 << 38;
      if ((int)v27 < -33554432)
        v29 = 0x8000000000000000;
      v14 = (int)v27 <= 0x1FFFFFF;
      v30 = 0x7FFFFFFF00000000;
      if (v14)
        v30 = v29;
    }
    v5 = (char *)this + 1080;
    v31 = v30 | v28;
  }
  v32 = *(_QWORD *)v5;
  if (v21 == *(_QWORD *)v5 && v18 == v31)
  {
    if ((a3 & 1) == 0)
      return;
    v33 = 1;
LABEL_56:
    if ((_DWORD)v18 == (_DWORD)v31 && v33)
    {
      v33 = 1;
      v35 = v18;
LABEL_60:
      if (v35 != (_DWORD)v18 || !v33)
      {
        v36 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
        if (v36)
          WebCore::Style::Scope::didChangeViewportSize(*(_QWORD *)(v36 + 1328), a2);
      }
      return;
    }
LABEL_59:
    v35 = v18;
    WebCore::LocalFrameView::setViewportConstrainedObjectsNeedLayout(this);
    LODWORD(v18) = v31;
    goto LABEL_60;
  }
  v34 = *((_QWORD *)this + 169);
  if (v34)
  {
    WebCore::ScrollAnchoringController::invalidateAnchorElement(v34, (const WebCore::RenderObject *)a2);
    v37 = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 169);
    if (v37)
      WebCore::ScrollAnchoringController::updateAnchorElement(v37);
  }
  v33 = HIDWORD(v18) == HIDWORD(v31);
  if (HIDWORD(v18) != HIDWORD(v31) || (a3 & 1) != 0)
  {
    if (v21 != v32)
      goto LABEL_59;
    goto LABEL_56;
  }
}

unint64_t WebCore::LocalFrameView::windowClipRectForFrameOwner(WebCore::LocalFrameView *this, const WebCore::HTMLFrameOwnerElement *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderLayer *v7;
  uint64_t v8;
  int v9;
  const WebCore::IntRect *v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v32;
  const WebCore::LayoutRect *v33;
  unint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  unint64_t v37;

  v4 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return WebCore::LocalFrameView::windowClipRect(this);
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1941D8174);
  }
  if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 32);
      if (!v5)
        break;
      v4 = *(_QWORD *)(v5 + 8);
      if (!v4)
        break;
      if ((*(_BYTE *)(v4 + 45) & 0x10) != 0)
        goto LABEL_11;
    }
    return WebCore::LocalFrameView::windowClipRect(this);
  }
LABEL_11:
  if ((*(_BYTE *)(v4 + 21) & 0x80) == 0)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 32);
      if (!v6)
        break;
      v4 = *(_QWORD *)(v6 + 8);
      if (!v4)
        break;
      if ((*(_BYTE *)(v4 + 45) & 0x10) != 0)
        goto LABEL_11;
    }
    return WebCore::LocalFrameView::windowClipRect(this);
  }
  v7 = *(WebCore::RenderLayer **)(v4 + 144);
  if (!v7)
    return WebCore::LocalFrameView::windowClipRect(this);
  v36 = 0;
  v37 = 0;
  if (a3)
  {
    v8 = WebCore::RenderLayer::childrenClipRect(v7);
    v12 = v8 - (v11 & 0xFFFFFFC0);
    v13 = SHIDWORD(v8) / 64;
    v15 = HIDWORD(v8) - (v14 & 0xFFFFFFC0);
    v17 = v12 + v16;
    if (__OFADD__(v12, v16))
      v17 = (v12 >> 31) + 0x7FFFFFFF;
    v18 = v15 + v9;
    if (__OFADD__(v15, v9))
      v18 = (v15 >> 31) + 0x7FFFFFFF;
    v19 = v15 + 32;
    v20 = v12 + 32;
    v36 = ((int)v8 / 64 + (v20 >> 6)) | ((unint64_t)(v13 + (v19 >> 6)) << 32);
    v37 = (v17 / 64 - (v20 >> 6) + ((int)(v17 - (v13 & 0xFFFFFFC0) + 32) >> 6)) | ((unint64_t)(v18 / 64 - (v19 >> 6) + ((int)(v18 - (v13 & 0xFFFFFFC0) + 32) >> 6)) << 32);
  }
  else
  {
    WebCore::RenderLayer::selfClipRect(v7);
    v35[0] = v32;
    v35[1] = v33;
    v36 = WebCore::snappedIntRect((WebCore *)v35, v33);
    v37 = v34;
  }
  v21 = WebCore::ScrollView::contentsToWindow(this, (const WebCore::IntRect *)&v36, v10);
  v23 = v22;
  v24 = WebCore::LocalFrameView::windowClipRect(this);
  if ((int)v21 <= (int)v24)
    v27 = v24;
  else
    v27 = v21;
  if (SHIDWORD(v21) <= SHIDWORD(v24))
    v28 = HIDWORD(v24);
  else
    v28 = HIDWORD(v21);
  v29 = v23 + v21;
  if (v25 + (int)v24 < (int)v23 + (int)v21)
    v29 = v25 + v24;
  v30 = HIDWORD(v23) + HIDWORD(v21);
  if (v26 + HIDWORD(v24) < HIDWORD(v23) + HIDWORD(v21))
    v30 = v26 + HIDWORD(v24);
  if ((int)v27 >= v29 || (int)v28 >= v30)
  {
    v27 = 0;
    v28 = 0;
  }
  return v27 | (unint64_t)(v28 << 32);
}

unint64_t WebCore::LocalFrameView::windowClipRect(WebCore::LocalFrameView *this)
{
  int *v1;
  int v3;
  WebCore::ScrollableArea *v4;
  unint64_t v5;
  const WebCore::IntRect *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const WebCore::HTMLFrameOwnerElement *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::LocalFrameView *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  const WebCore::IntRect *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = (int *)*((_QWORD *)this + 134);
  if (v1)
  {
    v8 = *v1;
    v11 = v1[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 322);
    v4 = (WebCore::LocalFrameView *)((char *)this + 64);
    if (v3)
    {
      v28 = 0;
      v29 = WebCore::ScrollableArea::totalContentsSize(v4);
      v27 = WebCore::ScrollView::contentsToWindow(this, (const WebCore::IntRect *)&v28, v26);
      v11 = HIDWORD(v27);
      v8 = v27;
    }
    else
    {
      v28 = (*(uint64_t (**)(WebCore::ScrollableArea *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))(v4, 0, 1);
      v29 = v5;
      v7 = WebCore::ScrollView::contentsToWindow(this, (const WebCore::IntRect *)&v28, v6);
      v8 = v7;
      v10 = v9;
      v11 = HIDWORD(v7);
      v12 = *(_QWORD *)(*((_QWORD *)this + 41) + 120);
      if (v12)
      {
        v13 = *(const WebCore::HTMLFrameOwnerElement **)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 5) + 8) + 528);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
            {
              v16 = *(WebCore::LocalFrameView **)(v15 + 288);
              if (v16)
              {
                v17 = WebCore::LocalFrameView::windowClipRectForFrameOwner(v16, v13, 1);
                if (v8 <= (int)v17)
                  v20 = v17;
                else
                  v20 = v8;
                if ((int)v11 <= SHIDWORD(v17))
                  v21 = HIDWORD(v17);
                else
                  v21 = v11;
                v22 = v10 + v8;
                if (v18 + (int)v17 < (int)v10 + v8)
                  v22 = v18 + v17;
                v23 = v19 + HIDWORD(v17);
                if (v19 + HIDWORD(v17) >= HIDWORD(v10) + (int)v11)
                  v23 = HIDWORD(v10) + v11;
                v24 = v20 < v22 && (int)v21 < v23;
                if (v24)
                  v8 = v20;
                else
                  v8 = 0;
                if (v24)
                  v11 = v21;
                else
                  v11 = 0;
              }
            }
          }
        }
      }
    }
  }
  return v8 | (v11 << 32);
}

uint64_t WebCore::Widget::convertToContainingWindow(WebCore::Widget *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  WebCore::Widget *v4;
  uint64_t v6;
  _QWORD v7[2];

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return WebCore::Widget::convertFromRootToContainingWindow(this, a2, a3);
  v4 = *(WebCore::Widget **)(v3 + 8);
  if (!v4)
    return WebCore::Widget::convertFromRootToContainingWindow(this, a2, a3);
  v7[0] = (*(uint64_t (**)(WebCore::Widget *, const WebCore::IntRect *))(*(_QWORD *)this + 184))(this, a2);
  v7[1] = v6;
  return WebCore::Widget::convertToContainingWindow(v4, (const WebCore::IntRect *)v7);
}

unint64_t WebCore::Widget::convertFromRootToContainingWindow(WebCore::Widget *this, const WebCore::Widget *a2, const WebCore::IntRect *a3)
{
  unint64_t v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  float v18;
  float v19;
  CGFloat v20;
  CGRect v22;

  v3 = (unint64_t)a2;
  v4 = (void *)*((_QWORD *)this + 5);
  if (!v4)
    return *(_QWORD *)a2;
  v5 = (void *)objc_msgSend(*((id *)this + 5), "documentView", a3);
  v6 = (double)*(int *)v3;
  v7 = (double)*(int *)(v3 + 4);
  v8 = (double)*(int *)(v3 + 8);
  v9 = (double)*(int *)(v3 + 12);
  if (v5)
    objc_msgSend(v5, "convertRect:toView:", 0, v6, v7, v8, v9);
  else
    objc_msgSend(v4, "convertRect:toView:", 0, v6, v7, v8, v9);
  v14 = v10;
  v15 = v11;
  v16 = v12;
  v17 = v13;
  v18 = v10;
  LODWORD(v3) = vcvtms_s32_f32(v18);
  v19 = v11;
  LODWORD(v4) = vcvtms_s32_f32(v19);
  v20 = v14;
  CGRectGetMaxX(*(CGRect *)(&v11 - 1));
  v22.origin.x = v14;
  v22.origin.y = v15;
  v22.size.width = v16;
  v22.size.height = v17;
  CGRectGetMaxY(v22);
  return v3 | ((_QWORD)v4 << 32);
}

void sub_1941D8434()
{
  objc_end_catch();
  JUMPOUT(0x1941D843CLL);
}

unint64_t WebCore::FrameView::convertFromContainingView(WebCore::FrameView *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore::RenderBox *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Widget *v15;
  float v16;
  void *v17;
  float v18;
  float v19;
  WTF *v20;
  WTF *v21;
  float v22;
  int v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int v34;
  float v35;
  float v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  uint64_t v46;

  v3 = *((_QWORD *)this + 4);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 8)) == 0)
  {
    v31 = *(_QWORD *)a2;
LABEL_40:
    v32 = HIDWORD(v31);
    return v31 | ((unint64_t)v32 << 32);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4))
  {
    v31 = WebCore::Widget::convertFromContainingView(this, a2);
    goto LABEL_40;
  }
  v7 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 120);
  if (!v7)
    goto LABEL_43;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_43;
  v9 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v9 + 2;
  if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1941D873CLL);
    }
    v10 = (*(unsigned __int8 *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v10) = 0;
    v11 = (v10 & 1) != 0 ? (WebCore::RenderBox *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) : 0;
  }
  else
  {
    v11 = 0;
  }
  if (v9)
  {
    *(_DWORD *)(v8 + 24) = v9;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
  }
  if (!v11)
  {
LABEL_43:
    v31 = *(_QWORD *)a2;
    v32 = HIDWORD(*(_QWORD *)a2);
    return v31 | ((unint64_t)v32 << 32);
  }
  v12 = *(_QWORD *)a2;
  v13 = HIDWORD(*(_QWORD *)a2);
  if (*(_BYTE *)(v4 + 312) != 1)
  {
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 + 64) + 832))(v4 + 64, 0, 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 64) + 704))(v4 + 64))
    {
      v15 = *(WebCore::Widget **)(v4 + 160);
      if (!v15)
        goto LABEL_19;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 272))(*(_QWORD *)(v4 + 160)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v15);
        LODWORD(v15) = v34;
        goto LABEL_19;
      }
    }
    LODWORD(v15) = 0;
LABEL_19:
    v16 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(v4 + 64) + 528))(v4 + 64);
    LODWORD(v12) = v14 + v12 - (_DWORD)v15;
    LODWORD(v13) = HIDWORD(v14)
                 + v13
                 - (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 408))(v4, 1) + v16);
  }
  v35 = (float)(int)v12;
  v36 = (float)(int)v13;
  v40 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v44 = 0;
  v45 = 1;
  v46 = 0x100000000;
  (*(void (**)(WebCore::RenderBox *, uint64_t, float *))(*(_QWORD *)v11 + 584))(v11, 2, &v35);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v35, 0);
  v19 = v35;
  v18 = v36;
  v20 = v42;
  v42 = 0;
  if (v20)
    WTF::fastFree(v20, v17);
  v21 = v41;
  v41 = 0;
  if (v21)
    WTF::fastFree(v21, v17);
  v22 = roundf(v19);
  if (v22 >= 2147500000.0)
  {
    v23 = 0x7FFFFFFF;
  }
  else if (v22 <= -2147500000.0)
  {
    v23 = 0x80000000;
  }
  else
  {
    v23 = (int)v22;
  }
  v24 = roundf(v18);
  if (v24 >= 2147500000.0)
  {
    v25 = 0x7FFFFFFF00000000;
  }
  else if (v24 <= -2147500000.0)
  {
    v25 = 0x8000000000000000;
  }
  else
  {
    v25 = (unint64_t)(int)v24 << 32;
  }
  v26 = WebCore::RenderBox::contentBoxLocation(v11);
  if ((int)v26 <= 0)
    v27 = -(-(int)v26 & 0x3F);
  else
    v27 = v26 & 0x3F;
  v28 = -((int)v26 / 64 + ((v27 + 32) >> 6));
  v29 = HIDWORD(v26) + 63;
  if (v26 >= 0)
    v29 = HIDWORD(v26);
  if (SHIDWORD(v26) <= 0)
    v30 = -(-HIDWORD(v26) & 0x3F);
  else
    v30 = BYTE4(v26) & 0x3F;
  LODWORD(v31) = (v25 | v23) + v28;
  LODWORD(v32) = HIDWORD(v25) - (v29 >> 6) - ((v30 + 32) >> 6);
  return v31 | ((unint64_t)v32 << 32);
}

unint64_t WebCore::FrameView::convertToContainingView(WebCore::FrameView *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  WebCore::FrameView *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  WebCore::RenderBox *v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v16;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return *(_QWORD *)a2;
  v4 = *(WebCore::FrameView **)(v3 + 8);
  if (!v4)
    return *(_QWORD *)a2;
  if (((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)v4 + 72))(v4) & 1) != 0
    || (*(unsigned int (**)(WebCore::FrameView *))(*(_QWORD *)v4 + 80))(v4))
  {
    v7 = *(_QWORD *)((*(uint64_t (**)(WebCore::FrameView *))(*(_QWORD *)this + 720))(this) + 120);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v9 + 2;
        if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1941D891CLL);
          }
          v10 = (*(unsigned __int8 *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
          if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
            LOBYTE(v10) = 0;
          v11 = (v10 & 1) != 0 ? (WebCore::RenderBox *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) : 0;
        }
        else
        {
          v11 = 0;
        }
        if (v9)
        {
          *(_DWORD *)(v8 + 24) = v9;
        }
        else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v6);
        }
        if (v11)
        {
          v16 = *(_OWORD *)a2;
          v12 = WebCore::RenderBox::contentBoxLocation(v11);
          LODWORD(v16) = v16 + (int)v12 / 64 + ((int)(v12 - (v13 & 0xFFFFFFC0) + 32) >> 6);
          DWORD1(v16) += SHIDWORD(v12) / 64 + ((int)(HIDWORD(v12) - (v14 & 0xFFFFFFC0) + 32) >> 6);
          return WebCore::FrameView::convertFromRendererToContainingView(v4, v11, (const WebCore::IntRect *)&v16);
        }
      }
    }
    return *(_QWORD *)a2;
  }
  return WebCore::Widget::convertToContainingView(this, a2);
}

uint64_t WebCore::LocalFrameView::isLocalFrameView(WebCore::LocalFrameView *this)
{
  return 1;
}

uint64_t WebCore::FrameView::convertFromRendererToContainingView(WebCore::FrameView *this, const WebCore::RenderElement *a2, const WebCore::IntRect *a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;
  float v12;
  float v13;
  float v15;
  int v16;
  float v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WebCore::FrameView *v28;
  WebCore::Widget *v29;
  float v30;
  int v32;
  int v33;
  float v34[8];
  __int128 v35;
  float v36;
  float v37;
  float v38;
  float v39;

  v4 = (float)*((int *)a3 + 1);
  v5 = (float)*((int *)a3 + 2);
  v6 = (float)*((int *)a3 + 3);
  v34[0] = (float)*(int *)a3;
  v34[1] = v4;
  v34[2] = v34[0] + v5;
  v34[3] = v4;
  v34[4] = v34[0] + v5;
  v34[5] = v4 + v6;
  v34[6] = v34[0];
  v34[7] = v4 + v6;
  WebCore::RenderObject::localToContainerQuad((uint64_t)a2, v34, 0, 2u, &v35);
  if (v38 >= v36)
    v7 = v36;
  else
    v7 = v38;
  if (*((float *)&v35 + 2) >= *(float *)&v35)
    v8 = *(float *)&v35;
  else
    v8 = *((float *)&v35 + 2);
  if (v7 >= v8)
    v7 = v8;
  v9 = fabsf(v7);
  if (v9 == INFINITY || v9 > 2147500000.0)
    v7 = (float)((SLODWORD(v7) >> 31) ^ 0x7FFFFFFF);
  if (v39 >= v37)
    v11 = v37;
  else
    v11 = v39;
  if (*((float *)&v35 + 3) >= *((float *)&v35 + 1))
    v12 = *((float *)&v35 + 1);
  else
    v12 = *((float *)&v35 + 3);
  if (v11 >= v12)
    v11 = v12;
  v13 = fabsf(v11);
  if (v13 == INFINITY || v13 > 2147500000.0)
    v11 = (float)((SLODWORD(v11) >> 31) ^ 0x7FFFFFFF);
  v15 = floorf(v7 * 64.0);
  if (v15 >= 2147500000.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 <= -2147500000.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v15;
  }
  v17 = floorf(v11 * 64.0);
  if (v17 >= 2147500000.0)
  {
    v18 = 0x7FFFFFFF;
  }
  else if (v17 <= -2147500000.0)
  {
    v18 = 0x80000000;
  }
  else
  {
    v18 = (int)v17;
  }
  v19 = v16 + 63;
  if (v16 >= 0)
    v19 = v16;
  v20 = v16 - (v19 & 0xFFFFFFC0);
  v21 = v18 + 63;
  if (v18 >= 0)
    v21 = v18;
  v22 = v19 >> 6;
  v23 = (int)(v18 - (v21 & 0xFFFFFFC0) + 32) >> 6;
  v24 = ((v21 >> 6) + v23);
  v25 = (v22 + ((int)(v20 + 32) >> 6));
  if (*((_BYTE *)this + 312) != 1)
  {
    v33 = (v21 >> 6) + v23;
    v26 = (char *)this + 64;
    v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 8) + 704))((char *)this + 64))
    {
      v28 = this;
      v29 = (WebCore::Widget *)*((_QWORD *)this + 20);
      if (!v29)
        goto LABEL_41;
      if (((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v29 + 272))(v29) & 1) == 0)
      {
        WebCore::Widget::frameRect(v29);
        LODWORD(v29) = v32;
        goto LABEL_41;
      }
    }
    else
    {
      v28 = this;
    }
    LODWORD(v29) = 0;
LABEL_41:
    v30 = (float)(*(int (**)(char *))(*((_QWORD *)v28 + 8) + 528))(v26);
    v25 = (v25 - v27 + (_DWORD)v29);
    v24 = (v33
                       - HIDWORD(v27)
                       + (int)(float)((*(float (**)(WebCore::FrameView *, uint64_t))(*(_QWORD *)v28 + 408))(v28, 1)+ v30));
  }
  return v25 | (v24 << 32);
}

float WebCore::RenderObject::absoluteToLocal(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  void *v3;
  float v4;
  WTF *v5;
  WTF *v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;

  v8 = *a2;
  v12 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v16 = 0;
  v17 = 1;
  v18 = 0x100000000;
  (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 584))(a1, a3, &v8);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v8, 0);
  v4 = *(float *)&v8;
  v5 = v14;
  v14 = 0;
  if (v5)
    WTF::fastFree(v5, v3);
  v6 = v13;
  v13 = 0;
  if (v6)
    WTF::fastFree(v6, v3);
  return v4;
}

void WebCore::LocalFrameView::fireLayoutRelatedMilestonesIfNeeded(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Page *v4;
  __int16 v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  WebCore::Frame *v9;
  NSObject *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  WebCore::LocalFrameView *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 41);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(WebCore::Page **)(v3 + 8);
    if (v4)
    {
      v5 = *((_WORD *)v4 + 330);
      goto LABEL_4;
    }
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v5) = 0;
LABEL_4:
  if (*((_BYTE *)this + 1368))
  {
    *((_BYTE *)this + 1368) = 0;
    WebCore::FrameLoader::didFirstLayout(*(_QWORD *)(v2 + 280));
    v6 = v5 & 1;
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 41) + 128) + 8) == *((_QWORD *)this + 41))
      WebCore::Page::startCountingRelevantRepaintedObjects(v4, v8);
  }
  else
  {
    v6 = 0;
  }
  if (*((_BYTE *)this + 1376))
  {
    WebCore::LocalFrameView::checkAndDispatchDidReachVisuallyNonEmptyState((uint64_t)this);
    if (*((_BYTE *)this + 1375))
    {
      *((_BYTE *)this + 1376) = 0;
      *((_WORD *)this + 656) |= 0x100u;
      v6 |= v5 & 2;
    }
  }
  if (!*((_BYTE *)this + 1377)
    && (v7 = *(_QWORD *)(*((_QWORD *)this + 41) + 296)) != 0
    && !WebCore::Style::Scope::hasPendingSheetsBeforeBody(*(WebCore::Style::Scope **)(v7 + 1328))
    && *((_BYTE *)this + 1378)
    && (*((_BYTE *)this + 1377) = 1, (v5 & 0x80) != 0))
  {
    v6 |= 0x80u;
  }
  else if (!v6)
  {
    return;
  }
  v9 = (WebCore::Frame *)*((_QWORD *)this + 41);
  if (*(WebCore::Frame **)(*((_QWORD *)v9 + 16) + 8) == v9)
  {
    if ((v6 & 2) != 0)
    {
      v10 = qword_1ECE7C400;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C400, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::Frame::pageID(v9);
        if (!v12)
          v11 = 0;
        v13 = *((_QWORD *)v9 + 4);
        v14 = 134218752;
        v15 = this;
        v16 = 2048;
        v17 = v11;
        v18 = 2048;
        v19 = v13;
        v20 = 1024;
        v21 = 1;
        _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] LocalFrameView::fireLayoutRelatedMilestonesIfNeeded: Firing first visually non-empty layout milestone on the main frame", (uint8_t *)&v14, 0x26u);
        v9 = (WebCore::Frame *)*((_QWORD *)this + 41);
      }
    }
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*((_QWORD *)v9 + 35) + 16) + 368))(*(_QWORD *)(*((_QWORD *)v9 + 35) + 16), v6);
  }
}

unsigned __int8 **WebCore::AsyncScrollingCoordinator::frameViewLayoutUpdated(WebCore::AsyncScrollingCoordinator *this, WebCore::LocalFrameView *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  WebCore::ScrollingStateScrollingNode *v16;
  WebCore::Node *v17;
  WebCore::ScrollingStateScrollingNode *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  _QWORD *v22;

  *((_BYTE *)this + 72) = 1;
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 296);
  v5 = 0uLL;
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 1944);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256);
      if (v7)
        v5 = *(_OWORD *)(v7 + 224);
    }
  }
  v20 = v5;
  v21[0] = &v20;
  v21[1] = &v20;
  v8 = *((unsigned int *)this + 14);
  if ((_DWORD)v8 == -1)
  {
    v17 = (WebCore::Node *)std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned __int8 **)WebCore::LocalFrameView::scheduleScrollToAnchorAndTextFragment(v17);
  }
  else
  {
    v22 = v21;
    result = (unsigned __int8 **)((unsigned __int8 **(*)(uint64_t *__return_ptr, _QWORD **, char *))off_1E3403C68[v8])(&v19, &v22, (char *)this + 32);
    if (v19)
    {
      (*(void (**)(WebCore::AsyncScrollingCoordinator *))(*(_QWORD *)this + 568))(this);
      result = (unsigned __int8 **)(*(uint64_t (**)(WebCore::AsyncScrollingCoordinator *, WebCore::LocalFrameView *))(*(_QWORD *)this + 40))(this, a2);
      if ((_DWORD)result)
      {
        v11 = *(_QWORD *)(*((_QWORD *)a2 + 41) + 24);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            ++*(_DWORD *)v12;
            if (*(_QWORD *)(v12 + 968))
            {
              result = (unsigned __int8 **)WebCore::AsyncScrollingCoordinator::stateNodeForScrollableArea((WebCore::AsyncScrollingCoordinator *)&v18, this, (uint64_t)a2 + 64);
              v16 = v18;
              if (v18)
              {
                if (*((unsigned __int8 *)v18 + 16) <= 1u)
                  WebCore::ScrollingStateScrollingNode::setIsMonitoringWheelEvents((uint64_t)v18, *(_QWORD *)(v12 + 968) != 0);
                result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v16 + 1, v10);
              }
            }
            if (*(_DWORD *)v12 == 1)
            {
              WebCore::Page::~Page(v12);
              result = (unsigned __int8 **)WTF::fastFree(v14, v15);
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
        }
      }
      v13 = v19;
      v19 = 0;
      if (v13)
        return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v13 + 8), v10);
    }
  }
  return result;
}

WebCore::Node *WebCore::LocalFrameView::scheduleScrollToAnchorAndTextFragment(WebCore::Node *this)
{
  WebCore::Node *v1;
  WebCore::Node *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  _QWORD *v11;
  WebCore::Node *v12;

  v1 = (WebCore::Node *)*((_QWORD *)this + 73);
  if (!v1)
    return this;
  v2 = this;
  *((_DWORD *)v1 + 6) += 2;
  v12 = v1;
  WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>::operator=((uint64_t *)this + 74, (uint64_t *)&v12);
  if (!*((_BYTE *)v2 + 1390))
  {
    v4 = *(_QWORD *)(*((_QWORD *)v2 + 41) + 296);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
    *((_BYTE *)v2 + 1390) = 1;
    v5 = WebCore::Document::eventLoop((WebCore::Document *)v4, v3);
    v6 = *((_QWORD *)v2 + 2);
    if (!v6)
    {
      v6 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 8) = v2;
      v10 = (WTF *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = v6;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WTF::fastFree(v10, v9);
          v6 = *((_QWORD *)v2 + 2);
          if (!v6)
            goto LABEL_7;
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    ++*(_DWORD *)v6;
LABEL_7:
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = &off_1E33FFA30;
    v7[1] = v6;
    v11 = v7;
    WebCore::EventLoopTaskGroup::queueTask(v5, 0, (uint64_t *)&v11);
    v8 = (uint64_t)v11;
    v11 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
  }
  this = v12;
  v12 = 0;
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::LocalFrameView::updateWidgetPositions(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderWidget *v29;
  uint64_t v30;
  WTF *v31;
  _DWORD *v32;

  v1 = this;
  if ((*(_QWORD *)(this + 760) & 0xFFFFFFFFFFFFLL) != 0)
    this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 728));
  v2 = *(_QWORD *)(v1 + 552);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 12);
    if ((_DWORD)v3)
    {
      if (v3 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = WTF::fastMalloc((WTF *)(8 * v3));
        v6 = (WTF *)v4;
        v7 = *(_QWORD *)(v1 + 552);
        if (v7 && *(_DWORD *)(v7 - 12))
        {
          v8 = *(unsigned int *)(v7 - 4);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *(uint64_t **)(v1 + 552); (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *(uint64_t **)(v1 + 552);
          }
          v11 = (uint64_t *)(v7 + 8 * v8);
          if (i != v11)
          {
            v12 = 0;
            v13 = *i;
            v14 = 1;
LABEL_17:
            v15 = v14;
            v16 = *(_QWORD *)(v13 + 8);
            ++*(_DWORD *)(v16 + 8);
            *(_QWORD *)(v4 + 8 * v12++) = v16;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v14;
                if (i != v11)
                  goto LABEL_17;
                break;
              }
            }
            if (v12)
            {
              v17 = (_QWORD *)(v4 + 8 * v12);
              v19 = (_QWORD *)v4;
              do
              {
                if ((v18 & 1) != 0)
                {
                  if (!WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
                    goto LABEL_41;
                  v20 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 8);
                  v21 = ~(*v19 << 32) + *v19;
                  v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
                  v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
                  v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
                  for (j = 1; ; v24 = (v26 + j++) & v20)
                  {
                    v26 = v24;
                    v27 = *(_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v24);
                    if (v27 != -1)
                    {
                      if (!v27)
                        goto LABEL_41;
                      if (*(_QWORD *)(v27 + 8) == *v19)
                        break;
                    }
                  }
                  v28 = *(_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v26 + 8);
                  if (v28 && (v29 = *(WebCore::RenderWidget **)(v28 + 8)) != 0)
                  {
                    WebCore::RenderWidget::updateWidgetPosition(v29);
                  }
                  else
                  {
LABEL_41:
                    v18 = 1;
                  }
                }
                else
                {
                  WebCore::widgetRendererMap(void)::staticWidgetRendererMap = 0;
                  v18 = 1;
                }
                ++v19;
              }
              while (v19 != v17);
              v30 = 8 * v15;
              v31 = v6;
              do
              {
                v32 = *(_DWORD **)v31;
                *(_QWORD *)v31 = 0;
                if (v32)
                {
                  if (v32[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
                  else
                    --v32[2];
                }
                v31 = (WTF *)((char *)v31 + 8);
                v30 -= 8;
              }
              while (v30);
            }
          }
        }
        return WTF::fastFree(v6, v5);
      }
    }
  }
  return this;
}

BOOL `non-virtual thunk to'WebCore::LocalFrameView::isUserScrollInProgress(WebCore::LocalFrameView *this)
{
  uint64_t v2;
  WebCore::Page *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  if (v2)
  {
    v3 = *(WebCore::Page **)(v2 + 8);
    if (v3)
    {
      v4 = WebCore::Page::scrollingCoordinator(v3);
      if (v4)
      {
        v5 = *(_QWORD *)(*((_QWORD *)this + 33) + 296);
        if (v5 && (v6 = *(_QWORD *)(v5 + 1944)) != 0 && (v7 = *(_QWORD *)(*(_QWORD *)(v6 + 144) + 256)) != 0)
        {
          v8 = *(_QWORD *)(v7 + 224);
          v9 = *(_QWORD *)(v7 + 232);
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 408))(v4, v8, v9) & 1) != 0)
          return 1;
      }
    }
  }
  v10 = *((_QWORD *)this + 2);
  return v10 && *(_BYTE *)(v10 + 117) != 0;
}

uint64_t `non-virtual thunk to'WebCore::LocalFrameView::isInStableState(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 33) + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 16) + 1768))(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16));
  else
    return 1;
}

uint64_t WebCore::RenderWidget::updateWidgetPosition(WebCore::RenderWidget *this)
{
  WTF *v2;
  BOOL updated;
  void *v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v18;
  WTF *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;

  if (!*((_QWORD *)this + 29))
    return 1;
  v2 = (WTF *)*((_QWORD *)this + 1);
  if (!v2)
  {
    v2 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v2 = 1;
    *((_QWORD *)v2 + 1) = this;
    v19 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v19)
    {
      if (*(_DWORD *)v19 != 1)
      {
        --*(_DWORD *)v19;
        goto LABEL_3;
      }
      WTF::fastFree(v19, v18);
      v2 = (WTF *)*((_QWORD *)this + 1);
      if (v2)
        goto LABEL_3;
      WebCore::RenderWidget::updateWidgetGeometry(this);
      return 1;
    }
  }
LABEL_3:
  ++*(_DWORD *)v2;
  updated = WebCore::RenderWidget::updateWidgetGeometry(this);
  if (*((_QWORD *)v2 + 1) && (v5 = *((_QWORD *)this + 29)) != 0)
  {
    v6 = updated;
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 72))(*((_QWORD *)this + 29));
    if (v7)
      v8 = (_DWORD *)v5;
    else
      v8 = 0;
    if (v8)
      ++v8[2];
    if (v7)
    {
      v9 = *(_QWORD *)(v5 + 328);
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (v6)
        goto LABEL_45;
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 344) + 8) + 328) + 296);
      if (v12)
        v12 = *(_QWORD *)(v12 + 1944);
      if ((*(_QWORD *)(v5 + 384) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v5 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
        || v12 && (*(_BYTE *)(v12 + 20) & 0xF8) != 0
        || (v13 = *(_QWORD *)(v5 + 464)) != 0 && *(_QWORD *)(v13 + 8)
        || *(_DWORD *)(v5 + 488) && *(_BYTE *)(v5 + 478))
      {
LABEL_45:
        v21 = *(_QWORD *)(v9 + 24);
        if (v21)
        {
          v22 = *(_QWORD *)(v9 + 296);
          if (*(_QWORD *)(v21 + 8) && v22 != 0)
            WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v5 + 336));
        }
      }
      do
      {
        v14 = __ldaxr(v10);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v10));
      if (!v15)
      {
        atomic_store(1u, v10);
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v20 = off_1E31FE290;
        v20[1] = v10;
        v24 = v20;
        WTF::ensureOnMainThread();
        if (v24)
          (*(void (**)(_QWORD *))(*v24 + 8))(v24);
      }
    }
    if (v8)
    {
      if (v8[2] != 1)
      {
        v16 = 0;
        --v8[2];
        goto LABEL_27;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    }
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
LABEL_27:
  if (*(_DWORD *)v2 == 1)
    WTF::fastFree(v2, v4);
  else
    --*(_DWORD *)v2;
  return v16;
}

void WebCore::LocalFrameView::setViewportConstrainedObjectsNeedLayout(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WebCore::RenderElement *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 163);
  if (v1)
  {
    v2 = *(uint64_t **)v1;
    if (*(_QWORD *)v1)
    {
      if (*((_DWORD *)v2 - 3))
      {
        v3 = *((unsigned int *)v2 - 1);
        v4 = 8 * v3;
        i = *(uint64_t **)v1;
        if ((_DWORD)v3)
        {
          v6 = 8 * v3;
          for (i = *(uint64_t **)v1; (unint64_t)(*i + 1) <= 1; ++i)
          {
            v6 -= 8;
            if (!v6)
              return;
          }
        }
        v7 = &v2[v3];
        if (i != v7)
        {
          v8 = *i;
          while (!*(_QWORD *)(v8 + 8))
          {
            do
            {
              if (++i == v7)
                return;
              v8 = *i;
            }
            while ((unint64_t)(*i + 1) <= 1);
            if (i == v7)
              return;
          }
          if ((_DWORD)v3)
          {
            while ((unint64_t)(*v2 + 1) <= 1)
            {
              ++v2;
              v4 -= 8;
              if (!v4)
                return;
            }
          }
          if (v7 != v2)
          {
            v9 = *v2;
            while (!*(_QWORD *)(v9 + 8))
            {
              do
              {
                if (++v2 == v7)
                  return;
                v9 = *v2;
              }
              while ((unint64_t)(*v2 + 1) <= 1);
              if (v2 == v7)
                return;
            }
            while (1)
            {
              v10 = *(_QWORD *)(v9 + 8);
              v11 = *(_DWORD *)(v10 + 20);
              if ((v11 & 8) == 0)
              {
                *(_DWORD *)(v10 + 20) = v11 | 8;
                v12 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v10, 0);
                WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v10, v12);
                v11 = *(_DWORD *)(v10 + 20);
                if ((v11 & 0x8000) != 0)
                {
                  if ((*(_BYTE *)(v10 + 45) & 0x10) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1941D9AECLL);
                  }
                  v13 = *(_QWORD *)(v10 + 144);
                  if (v13)
                  {
                    v14 = *(_DWORD *)(v13 + 8) + 1;
                    *(_DWORD *)(v13 + 8) = v14;
                  }
                  else
                  {
                    v14 = MEMORY[8];
                  }
                  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                  if (!v14)
                    goto LABEL_49;
                  *(_DWORD *)(v13 + 8) = v14 - 1;
                  v11 = *(_DWORD *)(v10 + 20);
                }
              }
              if ((v11 & 0x8000) == 0)
                goto LABEL_37;
              if ((*(_BYTE *)(v10 + 45) & 8) == 0)
              {
LABEL_49:
                __break(0xC471u);
                JUMPOUT(0x1941D9ACCLL);
              }
              v15 = *(_QWORD *)(v10 + 144);
              *(_DWORD *)(v15 + 12) |= 0x40u;
              WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(v15, 2);
              do
              {
LABEL_37:
                if (++v2 == v7)
                  goto LABEL_46;
                v9 = *v2;
              }
              while ((unint64_t)(*v2 + 1) <= 1);
LABEL_42:
              if (v2 == v7)
                break;
              if (!*(_QWORD *)(v9 + 8))
              {
                while (1)
                {
                  if (++v2 == v7)
                    goto LABEL_46;
                  v9 = *v2;
                  if ((unint64_t)(*v2 + 1) > 1)
                    goto LABEL_42;
                }
              }
              ++*(_DWORD *)(v1 + 8);
            }
LABEL_46:
            ++*(_DWORD *)(v1 + 8);
          }
        }
      }
    }
  }
}

uint64_t WebCore::Quirks::shouldSilenceWindowResizeEvents(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  const WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  const WTF::StringImpl *v36;
  char v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  const WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (*(_BYTE *)(v3 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  v4 = *(_QWORD *)(v1 + 528);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || !*(_BYTE *)(v7 + 1680))
    return 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v65;
  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(v9 + 8);
  if (*(_BYTE *)(v9 + 3362) || *(_BYTE *)(v9 + 3405))
  {
    while (1)
    {
      v49 = *(_QWORD *)(v9 + 528);
      if (!v49)
        break;
      v50 = *(_QWORD *)(v49 + 8);
      if (!v50)
        break;
      v51 = *(_QWORD *)(v50 + 120);
      if (!v51)
        break;
      v52 = *(_QWORD *)(v51 + 8);
      if (!v52)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)(v52 + 40) + 8);
    }
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 528);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8);
        if (v12)
        {
          if (!*(_BYTE *)(v12 + 144))
          {
            v13 = *(_QWORD *)(v12 + 296);
            if (v13)
              v9 = v13;
          }
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v65, (const WTF::URL *)(v9 + 736));
  v16 = WTF::equal(v65, v8, v14);
  v17 = v65;
  v65 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::destroy(v17, v15);
      if ((v16 & 1) != 0)
        goto LABEL_24;
      goto LABEL_26;
    }
    *(_DWORD *)v17 -= 2;
  }
  if ((v16 & 1) != 0)
  {
LABEL_24:
    v18 = 1;
    goto LABEL_90;
  }
LABEL_26:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = v65;
  v20 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v20 = *(_QWORD *)(v20 + 8);
  if (*(_BYTE *)(v20 + 3362) || *(_BYTE *)(v20 + 3405))
  {
    while (1)
    {
      v53 = *(_QWORD *)(v20 + 528);
      if (!v53)
        break;
      v54 = *(_QWORD *)(v53 + 8);
      if (!v54)
        break;
      v55 = *(_QWORD *)(v54 + 120);
      if (!v55)
        break;
      v56 = *(_QWORD *)(v55 + 8);
      if (!v56)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v56 + 40) + 8);
    }
  }
  else
  {
    v21 = *(_QWORD *)(v20 + 528);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v22 + 128) + 8);
        if (v23 && *(_BYTE *)(v23 + 144) == 0)
        {
          v25 = *(_QWORD *)(v23 + 296);
          if (v25)
            v20 = v25;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v65, (const WTF::URL *)(v20 + 736));
  v27 = WTF::equal(v65, v19, v26);
  v28 = v65;
  v65 = 0;
  if (!v28)
  {
LABEL_42:
    if ((v27 & 1) != 0)
      goto LABEL_43;
    goto LABEL_46;
  }
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    goto LABEL_42;
  }
  WTF::StringImpl::destroy(v28, v15);
  if ((v27 & 1) != 0)
  {
LABEL_43:
    v18 = 1;
    if (!v19)
      goto LABEL_90;
    goto LABEL_88;
  }
LABEL_46:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = v65;
  v30 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v30 = *(_QWORD *)(v30 + 8);
  if (*(_BYTE *)(v30 + 3362) || *(_BYTE *)(v30 + 3405))
  {
    while (1)
    {
      v57 = *(_QWORD *)(v30 + 528);
      if (!v57)
        break;
      v58 = *(_QWORD *)(v57 + 8);
      if (!v58)
        break;
      v59 = *(_QWORD *)(v58 + 120);
      if (!v59)
        break;
      v60 = *(_QWORD *)(v59 + 8);
      if (!v60)
        break;
      v30 = *(_QWORD *)(*(_QWORD *)(v60 + 40) + 8);
    }
  }
  else
  {
    v31 = *(_QWORD *)(v30 + 528);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v32 + 128) + 8);
        if (v33 && *(_BYTE *)(v33 + 144) == 0)
        {
          v35 = *(_QWORD *)(v33 + 296);
          if (v35)
            v30 = v35;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v65, (const WTF::URL *)(v30 + 736));
  v37 = WTF::equal(v65, v29, v36);
  v38 = v65;
  v65 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::destroy(v38, v15);
      if ((v37 & 1) != 0)
        goto LABEL_63;
LABEL_65:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v39 = v65;
      v40 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v40 = *(_QWORD *)(v40 + 8);
      if (*(_BYTE *)(v40 + 3362) || *(_BYTE *)(v40 + 3405))
      {
        while (1)
        {
          v61 = *(_QWORD *)(v40 + 528);
          if (!v61)
            break;
          v62 = *(_QWORD *)(v61 + 8);
          if (!v62)
            break;
          v63 = *(_QWORD *)(v62 + 120);
          if (!v63)
            break;
          v64 = *(_QWORD *)(v63 + 8);
          if (!v64)
            break;
          v40 = *(_QWORD *)(*(_QWORD *)(v64 + 40) + 8);
        }
      }
      else
      {
        v41 = *(_QWORD *)(v40 + 528);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 8);
          if (v42)
          {
            v43 = *(_QWORD *)(*(_QWORD *)(v42 + 128) + 8);
            if (v43 && *(_BYTE *)(v43 + 144) == 0)
            {
              v45 = *(_QWORD *)(v43 + 296);
              if (v45)
                v40 = v45;
            }
          }
        }
      }
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v65, (const WTF::URL *)(v40 + 736));
      v18 = WTF::equal(v65, v39, v46);
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
        {
          WTF::StringImpl::destroy(v47, v15);
          if (!v39)
            goto LABEL_84;
          goto LABEL_82;
        }
        *(_DWORD *)v47 -= 2;
      }
      if (!v39)
        goto LABEL_84;
LABEL_82:
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v15);
      else
        *(_DWORD *)v39 -= 2;
      goto LABEL_84;
    }
    *(_DWORD *)v38 -= 2;
  }
  if ((v37 & 1) == 0)
    goto LABEL_65;
LABEL_63:
  v18 = 1;
LABEL_84:
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::destroy(v29, v15);
      if (!v19)
        goto LABEL_90;
      goto LABEL_88;
    }
    *(_DWORD *)v29 -= 2;
  }
  if (!v19)
    goto LABEL_90;
LABEL_88:
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy(v19, v15);
  else
    *(_DWORD *)v19 -= 2;
LABEL_90:
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v15);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v18;
}

uint64_t WebCore::FrameLoader::didFirstLayout(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  int v10;
  WTF *v13;
  void *v14;

  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    if (v2 != *(_QWORD *)(*(_QWORD *)(v3 + 8) + 160))
      return this;
    if (*(unsigned __int8 *)(this + 81) - 1 <= 2 && !*(_BYTE *)(this + 403))
    {
      *(_BYTE *)(this + 403) = 1;
      v4 = *(_QWORD *)(v2 + 296);
      if (v4)
      {
        *(_DWORD *)(v4 + 24) += 2;
        if ((*(_QWORD *)(v4 + 2064) & 0xFFFFFFFFFFFFLL) == 0
          || *(double *)((*(_QWORD *)(v4 + 2064) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          v5 = 0x800000;
        }
        else
        {
          this = WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 2032));
          v5 = 8388864;
        }
        v6 = *(_QWORD *)(v4 + 528);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 24);
            if (v8)
            {
              v9 = *(WebCore::Page **)(v8 + 8);
              if (v9)
              {
                ++*(_DWORD *)v9;
                this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v9, v5);
                if (*(_DWORD *)v9 == 1)
                {
                  WebCore::Page::~Page(v9);
                  this = WTF::fastFree(v13, v14);
                }
                else
                {
                  --*(_DWORD *)v9;
                }
              }
            }
          }
        }
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
      }
    }
  }
  else if (v2 != MEMORY[0xA0])
  {
    return this;
  }
  v10 = *(_DWORD *)(v1 + 64);
  if (v10 >= 2 && v10 != 2 && v10 != 4)
    *(_DWORD *)(v1 + 64) = 4;
  return this;
}

BOOL WebCore::RenderLayerScrollableArea::isScrollSnapInProgress(WebCore::RenderLayerScrollableArea *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 45) & 4) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  if ((*(_BYTE *)(v1 + 22) & 1) == 0)
    return 0;
  v4 = *(_QWORD *)(v1 + 96);
  if (((v4 >> 10) & 7) - 3 >= 2 && ((unsigned __int16)v4 >> 13) - 3 > 1)
    return 0;
  v5 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8)
                                                                                                 + 528)
                                                                                     + 8)
                                                                         + 24)
                                                             + 8));
  if (v5)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 12) + 256);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 224);
      v8 = *(_QWORD *)(v6 + 232);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 416))(v5, v7, v8) & 1) != 0)
      return 1;
  }
  v9 = *((_QWORD *)this + 2);
  return v9
      && *(_QWORD *)(v9 + 104)
      && (*(_BYTE *)(v9 + 117)
       || (v11 = *(_QWORD *)(v9 + 96)) != 0
       && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11) & 1) != 0);
}

uint64_t WebCore::ScrollableArea::isInStableState(WebCore::ScrollableArea *this)
{
  return 1;
}

void WebCore::Page::startCountingRelevantRepaintedObjects(WebCore::Page *this, void *a2)
{
  WebCore::Page::resetRelevantPaintedObjectCounter(this, a2);
  *((_BYTE *)this + 768) = 1;
}

BOOL WebCore::Credential::isEmpty(WebCore::Credential *this)
{
  uint64_t v1;

  if (*((_QWORD *)this + 3) || *(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v1 = *((_QWORD *)this + 1);
  return !v1 || *(_DWORD *)(v1 + 4) == 0;
}

uint64_t WebCore::Length::Length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  WebCore *v6;
  JSC::JSGlobalObject *v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::Geolocation *v9;
  uint64_t v10;
  uint64_t *v11;

  *(_DWORD *)a1 = 0;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
    v3 = -1;
  else
    v3 = *(unsigned int *)(a2 + 16);
  if (v3 >= 0xD)
  {
    __break(0xC471u);
    JUMPOUT(0x1941DA304);
  }
  *(_BYTE *)(a1 + 4) = byte_1969F65D8[v3];
  *(_WORD *)(a1 + 5) = 0;
  v10 = a1;
  if ((_DWORD)v2 == -1)
  {
    v6 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::toJS(v6, v7, v8, v9);
  }
  else
  {
    v11 = &v10;
    ((void (*)(uint64_t **, uint64_t))off_1E3404AD8[v2])(&v11, a2 + 4);
    return a1;
  }
}

uint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Geolocation *a4)
{
  return WebCore::wrap<WebCore::Geolocation>((uint64_t)a2, a3);
}

const char *WebCore::PasteboardCustomData::cocoaType(WebCore::PasteboardCustomData *this)
{
  return "com.apple.WebKit.custom-pasteboard-data";
}

WebCore::JSWindowProxy *WebCore::ScriptController::jsWindowProxy(WebCore::ScriptController *this, WebCore::DOMWrapperWorld *a2)
{
  return WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(*((_QWORD *)this + 2) + 112), a2);
}

uint64_t WebCore::Page::applicationDidBecomeActive(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34013A8;
  v4 = (uint64_t)v2;
  WebCore::Page::forEachMediaElement((uint64_t)this, (uint64_t)&v4);
  result = v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::RenderWidget::updateWidgetGeometry(WebCore::RenderWidget *this)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v18;
  float v20;
  float v21;
  double v22;
  int v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int v28;
  int v29;
  double v30;
  int v31;
  const WebCore::LayoutRect *v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  __int32 v39;
  float v40;
  __int128 v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unint64_t v46;
  int v47;
  int v48;
  _QWORD v49[2];

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 29) + 152))(*((_QWORD *)this + 29)) & 1) != 0)
  {
    v49[0] = WebCore::RenderBox::contentBoxRect(this);
    v49[1] = v2;
    *(float *)&v35 = (float)SLODWORD(v49[0]) * 0.015625;
    *((float *)&v35 + 1) = (float)SHIDWORD(v49[0]) * 0.015625;
    *(float *)&v36 = *(float *)&v35 + (float)((float)(int)v2 * 0.015625);
    *((float *)&v36 + 1) = *((float *)&v35 + 1);
    v37 = *(float *)&v36;
    v38 = *((float *)&v35 + 1) + (float)((float)SHIDWORD(v2) * 0.015625);
    v39 = v35;
    v40 = v38;
    WebCore::RenderObject::localToContainerQuad((uint64_t)this, (float *)&v35, 0, 2u, &v41);
    v4 = v42;
    v3 = v43;
    if (v44 >= v42)
      v5 = v42;
    else
      v5 = v44;
    v6 = *((float *)&v41 + 1);
    v7 = *(float *)&v41;
    if (*((float *)&v41 + 2) >= *(float *)&v41)
      v8 = *(float *)&v41;
    else
      v8 = *((float *)&v41 + 2);
    if (v5 >= v8)
      v5 = v8;
    v9 = fabsf(v5);
    v10 = v9 != INFINITY && v9 <= 2147500000.0;
    v11 = (float)((SLODWORD(v5) >> 31) ^ 0x7FFFFFFF);
    if (v10)
      v11 = v5;
    if (v45 >= v43)
      v12 = v43;
    else
      v12 = v45;
    if (*((float *)&v41 + 3) >= *((float *)&v41 + 1))
      v13 = *((float *)&v41 + 1);
    else
      v13 = *((float *)&v41 + 3);
    if (v12 >= v13)
      v12 = v13;
    v14 = fabsf(v12);
    if (v14 == INFINITY || v14 > 2147500000.0)
      v12 = (float)((SLODWORD(v12) >> 31) ^ 0x7FFFFFFF);
    if (*(float *)&v41 < *((float *)&v41 + 2))
      v7 = *((float *)&v41 + 2);
    if (v42 < v44)
      v4 = v44;
    if (v7 >= v4)
      v4 = v7;
    v16 = fabsf(v4);
    if (v16 == INFINITY || v16 > 2147500000.0)
      v4 = (float)((SLODWORD(v4) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v41 + 1) < *((float *)&v41 + 3))
      v6 = *((float *)&v41 + 3);
    if (v43 < v45)
      v3 = v45;
    if (v6 >= v3)
      v3 = v6;
    v18 = fabsf(v3);
    if (v18 == INFINITY || v18 > 2147500000.0)
      v3 = (float)((SLODWORD(v3) >> 31) ^ 0x7FFFFFFF);
    v20 = v4 - v11;
    v21 = v3 - v12;
    v22 = v11 * 64.0;
    if (v22 > -2147483650.0)
      v23 = (int)v22;
    else
      v23 = 0x80000000;
    if (v22 < 2147483650.0)
      v24 = v23;
    else
      v24 = 0x7FFFFFFF;
    v25 = v12 * 64.0;
    if (v25 > -2147483650.0)
      v26 = (int)v25;
    else
      v26 = 0x80000000;
    if (v25 >= 2147483650.0)
      v26 = 0x7FFFFFFF;
    v46 = __PAIR64__(v26, v24);
    v27 = v20 * 64.0;
    if (v27 > -2147483650.0)
      v28 = (int)v27;
    else
      v28 = 0x80000000;
    if (v27 < 2147483650.0)
      v29 = v28;
    else
      v29 = 0x7FFFFFFF;
    v47 = v29;
    v30 = v21 * 64.0;
    if (v30 >= 2147483650.0)
    {
      v31 = 0x7FFFFFFF;
    }
    else if (v30 <= -2147483650.0)
    {
      v31 = 0x80000000;
    }
    else
    {
      v31 = (int)v30;
    }
    v48 = v31;
    if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 29) + 72))(*((_QWORD *)this + 29)))
    {
      v49[0] = v46;
      v32 = (const WebCore::LayoutRect *)v49;
    }
    else
    {
      v32 = (const WebCore::LayoutRect *)&v46;
    }
  }
  else
  {
    v35 = WebCore::RenderBox::absoluteContentBox(this);
    v36 = v34;
    WebCore::LayoutRect::LayoutRect((int8x8_t *)&v41, (int32x2_t *)&v35);
    v32 = (const WebCore::LayoutRect *)&v41;
  }
  return WebCore::RenderWidget::setWidgetGeometry((WTF **)this, v32);
}

uint64_t WebCore::Widget::transformsAffectFrameRect(WebCore::Widget *this)
{
  return 1;
}

BOOL WebCore::RenderWidget::setWidgetGeometry(WTF **this, const WebCore::LayoutRect *a2)
{
  WebCore::RenderWidget *v4;
  WTF *v5;
  WebCore::RenderLayer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  _BOOL8 v38;
  WTF *v40;
  WebCore::RenderView *v41;
  WTF::MonotonicTime *v42;
  WTF *v43;
  WebCore::RenderLayerCompositor *v44;
  WebCore::RenderLayerCompositor *v45;
  WTF *v46;
  void *v47;
  unint64_t v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  const CGRect *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  CGRect v65;

  v4 = (WebCore::RenderWidget *)this;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    v5 = this[4];
    if (!v5)
      goto LABEL_62;
    v4 = (WebCore::RenderWidget *)*((_QWORD *)v5 + 1);
    if (!v4)
      goto LABEL_62;
    v6 = 0;
    while ((*((_BYTE *)v4 + 45) & 0x10) == 0)
    {
      v7 = *((_QWORD *)v4 + 4);
      if (!v7)
        goto LABEL_62;
      v4 = *(WebCore::RenderWidget **)(v7 + 8);
      if (!v4)
        goto LABEL_14;
    }
  }
LABEL_12:
  if ((*((_BYTE *)v4 + 21) & 0x80) != 0)
  {
    v6 = (WebCore::RenderLayer *)*((_QWORD *)v4 + 18);
    goto LABEL_14;
  }
  while (1)
  {
    v8 = *((_QWORD *)v4 + 4);
    if (!v8)
      break;
    v4 = *(WebCore::RenderWidget **)(v8 + 8);
    if (!v4)
      break;
    if ((*((_BYTE *)v4 + 45) & 0x10) != 0)
      goto LABEL_12;
  }
LABEL_62:
  v6 = 0;
LABEL_14:
  v9 = WebCore::RenderLayer::childrenClipRect(v6);
  v11 = HIDWORD(v9);
  if ((int)v9 >= 0)
    v12 = v9;
  else
    v12 = v9 + 63;
  if (v9 >= 0)
    v13 = HIDWORD(v9);
  else
    v13 = HIDWORD(v9) + 63;
  v14 = HIDWORD(v10);
  if ((v10 & 0x80000000) == 0)
    v15 = v10;
  else
    v15 = v10 + 63;
  if ((v10 & 0x8000000000000000) == 0)
    v16 = HIDWORD(v10);
  else
    v16 = HIDWORD(v10) + 63;
  v17 = *(_QWORD *)a2;
  v18 = *((_QWORD *)a2 + 1);
  v19 = *(_QWORD *)a2 + 63;
  if ((int)*(_QWORD *)a2 >= 0)
    v19 = *(_QWORD *)a2;
  v20 = (((int)(v17 - (v19 & 0xFFFFFFC0) + 32) >> 6) + (v19 >> 6));
  v21 = (((int)(HIDWORD(*(_QWORD *)a2) - (v17 & 0xFFFFFFC0) + 32) >> 6) + (int)HIDWORD(*(_QWORD *)a2) / 64);
  v22 = HIDWORD(v18);
  v23 = (((int)(v18 - (v19 & 0xFFFFFFC0) + 32) >> 6) + (int)v18 / 64);
  v24 = (((int)(v22 - (v19 & 0xFFFFFFC0) + 32) >> 6) + (int)v22 / 64);
  v63 = v20 | (v21 << 32);
  v64 = v23 | (v24 << 32);
  v25 = this[29];
  v26 = (void *)*((_QWORD *)v25 + 5);
  if (v26)
  {
    v55 = HIDWORD(v10);
    v62 = v24;
    v60 = v15;
    v61 = v12;
    v58 = v23;
    v59 = v9;
    v56 = v13;
    v57 = v16;
    v48 = v10;
    if (objc_msgSend(v26, "conformsToProtocol:", &unk_1EE342188))
      v26 = (void *)objc_msgSend(v26, "superview");
    objc_msgSend(v26, "frame");
    v65.origin.x = v49;
    v65.origin.y = v50;
    v65.size.width = v51;
    v65.size.height = v52;
    v27 = WebCore::enclosingIntRect(&v65, v53);
    v28 = v54;
    v10 = v48;
    LODWORD(v23) = v58;
    LODWORD(v9) = v59;
    LODWORD(v14) = v55;
    v13 = v56;
    v16 = v57;
    v15 = v60;
    v12 = v61;
    LODWORD(v24) = v62;
  }
  else
  {
    v27 = *((_QWORD *)v25 + 6);
    v28 = *((_QWORD *)v25 + 7);
  }
  v29 = 0;
  v30 = (((int)(v9 - (v12 & 0xFFFFFFC0) + 32) >> 6) + (v12 >> 6));
  v31 = (((int)(v11 - (v13 & 0xFFFFFFC0) + 32) >> 6) + (v13 >> 6));
  v32 = (((int)(v10 - (v15 & 0xFFFFFFC0) + 32) >> 6) + (v15 >> 6));
  v33 = (((int)(v14 - (v16 & 0xFFFFFFC0) + 32) >> 6) + (v16 >> 6));
  if (this[30] == (WTF *)__PAIR64__(v31, v30))
    v29 = *((_DWORD *)this + 62) == (_DWORD)v32 && *((_DWORD *)this + 63) == (_DWORD)v33;
  v35 = 0;
  if (__PAIR64__(v21, v20) == v27)
  {
    v36 = (_DWORD)v23 == (_DWORD)v28 && (_DWORD)v24 == HIDWORD(v28);
    v35 = v36;
    if (v36 && v29)
      return 0;
  }
  this[30] = (WTF *)((v31 << 32) | v30);
  this[31] = (WTF *)(v32 | (v33 << 32));
  v40 = this[1];
  if (!v40)
  {
    v40 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v40 = 1;
    *((_QWORD *)v40 + 1) = this;
    v43 = this[1];
    this[1] = v40;
    if (v43)
    {
      if (*(_DWORD *)v43 == 1)
      {
        WTF::fastFree(v43, (void *)v10);
        v40 = this[1];
        if (!v40)
          goto LABEL_52;
      }
      else
      {
        --*(_DWORD *)v43;
      }
    }
  }
  ++*(_DWORD *)v40;
LABEL_52:
  if (v35)
  {
    if (!v29)
      (*(void (**)(WTF *))(*(_QWORD *)this[29] + 144))(this[29]);
  }
  else
  {
    (*(void (**)(WTF *, uint64_t *))(*(_QWORD *)this[29] + 16))(this[29], &v63);
  }
  if (!v40)
    return 1;
  if (*((_QWORD *)v40 + 1))
  {
    if (!v35)
    {
      v41 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8) + 1944);
      v42 = (WTF::MonotonicTime *)*((_QWORD *)v41 + 50);
      if (!v42)
      {
        v44 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v42 = (WTF::MonotonicTime *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v44, v41);
        v45 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v41 + 50);
        *((_QWORD *)v41 + 50) = v42;
        if (v45)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v45);
          WTF::fastFree(v46, v47);
          v42 = (WTF::MonotonicTime *)*((_QWORD *)v41 + 50);
        }
      }
      WebCore::RenderLayerCompositor::widgetDidChangeSize(v42, (WebCore::RenderWidget *)this);
    }
    v38 = v28 != v64;
  }
  else
  {
    v38 = 1;
  }
  if (*(_DWORD *)v40 == 1)
    WTF::fastFree(v40, (void *)v10);
  else
    --*(_DWORD *)v40;
  return v38;
}

uint64_t WebCore::LocalFrameView::setFrameRect(WebCore::LocalFrameView *this, const WebCore::IntRect *a2)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  WebCore::RenderView *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderLayerCompositor *v17;
  uint64_t v18;
  uint64_t v19;
  const WebCore::IntRect *v20;
  const CGRect *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  uint64_t v26;
  void *v27;
  CGRect v28;

  ++*((_DWORD *)this + 2);
  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    v20 = a2;
    v27 = v3;
    if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v27, "superview"), "frame");
    else
      objc_msgSend(v27, "frame");
    v28.origin.x = v22;
    v28.origin.y = v23;
    v28.size.width = v24;
    v28.size.height = v25;
    result = WebCore::enclosingIntRect(&v28, v21);
    v5 = v26;
    a2 = v20;
  }
  else
  {
    result = *((_QWORD *)this + 6);
    v5 = *((_QWORD *)this + 7);
  }
  v6 = *(_DWORD *)a2 == (_DWORD)result && *((_DWORD *)a2 + 1) == HIDWORD(result);
  if (!v6 || (*((_DWORD *)a2 + 2) == (_DWORD)v5 ? (v7 = *((_DWORD *)a2 + 3) == HIDWORD(v5)) : (v7 = 0), !v7))
  {
    v8 = *((_BYTE *)this + 108);
    *((_BYTE *)this + 108) = 1;
    WebCore::ScrollView::setFrameRect(this, a2);
    WebCore::LocalFrameView::updateScrollableAreaSet(this);
    v9 = (_QWORD *)*((_QWORD *)this + 41);
    v10 = v9[37];
    if (v10)
    {
      v11 = *(WebCore::RenderView **)(v10 + 1944);
      if (v11)
      {
        v16 = *((_QWORD *)v11 + 50);
        if (v16)
        {
          if (*(_BYTE *)(v16 + 195))
          {
            v17 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(v11);
            WebCore::RenderLayerCompositor::frameViewDidChangeSize(v17);
            v9 = (_QWORD *)*((_QWORD *)this + 41);
          }
        }
      }
    }
    if (*(_QWORD **)(v9[16] + 8) == v9)
    {
      v18 = v9[3];
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 8);
        if (v19)
        {
          WebCore::PageOverlayController::didChangeViewSize(*(WebCore::PageOverlayController **)(v19 + 1232));
          v9 = (_QWORD *)*((_QWORD *)this + 41);
        }
      }
    }
    result = v9[37];
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 720))(result);
      v9 = (_QWORD *)*((_QWORD *)this + 41);
    }
    if (v9[36])
    {
      v12 = v9[3];
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 232);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
        }
      }
      v15 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = off_1E33FF9B8;
      *(_QWORD *)&v28.origin.x = v15;
      WebCore::LocalFrameView::applyRecursivelyWithVisibleRect(this, &v28);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    *((_BYTE *)this + 108) = v8;
  }
  if (*((_DWORD *)this + 2) == 1)
    return (*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)this + 8))(this);
  --*((_DWORD *)this + 2);
  return result;
}

WebCore::RenderLayerCompositor *WebCore::RenderLayerCompositor::frameViewDidChangeSize(WebCore::RenderLayerCompositor *this)
{
  WebCore::RenderLayerCompositor *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 144);
  if (v2)
  {
    *(_DWORD *)(v2 + 12) |= 0x40u;
    if ((*(_BYTE *)(v2 + 24) & 4) != 0)
    {
      v2 = *(_QWORD *)(v2 + 40);
      if (v2)
      {
LABEL_5:
        do
        {
          v3 = *(_DWORD *)(v2 + 12);
          if ((v3 & 2) != 0)
            break;
          *(_DWORD *)(v2 + 12) = v3 | 2;
          if ((*(_BYTE *)(v2 + 24) & 4) == 0)
          {
            while (1)
            {
              v2 = *(_QWORD *)(v2 + 40);
              if (!v2)
                goto LABEL_6;
              if ((*(_BYTE *)(v2 + 24) & 0x4A) != 0)
                goto LABEL_15;
            }
          }
          v2 = *(_QWORD *)(v2 + 40);
LABEL_15:
          ;
        }
        while (v2);
      }
    }
    else
    {
      while (1)
      {
        v2 = *(_QWORD *)(v2 + 40);
        if (!v2)
          break;
        if ((*(_BYTE *)(v2 + 24) & 0x4A) != 0)
          goto LABEL_5;
      }
    }
  }
LABEL_6:
  if (*((_QWORD *)this + 31))
  {
    WebCore::RenderLayerCompositor::updateScrollLayerClipping(this);
    if (*((_QWORD *)v1 + 31))
    {
      v4 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
      if (v4
        && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(*((_QWORD *)v1 + 1) + 248)))
      {
        WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
      }
      else
      {
        WebCore::RenderLayerCompositor::updateScrollLayerPosition(v1);
      }
    }
    return (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::updateOverflowControlsLayers(v1);
  }
  return this;
}

_QWORD *WebCore::LocalFrameView::updateScrollableAreaSet(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::LocalFrameView *v5;
  uint64_t v6;

  v1 = this[4];
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = this;
      v3 = *(_QWORD *)(this[41] + 56);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          if (!*(_BYTE *)(v4 + 144))
          {
            v5 = *(WebCore::LocalFrameView **)(v4 + 288);
            if (v5)
            {
              if (WebCore::LocalFrameView::isScrollable((uint64_t)this))
              {
                return (_QWORD *)WebCore::LocalFrameView::addScrollableArea(v5, (WebCore::ScrollableArea *)(v2 + 8));
              }
              else
              {
                this = (_QWORD *)*((_QWORD *)v5 + 161);
                if (this)
                {
                  this = (_QWORD *)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>((uint64_t)this, v2 + 8);
                  if ((_DWORD)this)
                  {
                    v6 = *(_QWORD *)(*((_QWORD *)v5 + 41) + 24);
                    if (v6)
                    {
                      this = *(_QWORD **)(v6 + 8);
                      if (this)
                      {
                        this = (_QWORD *)WebCore::Page::scrollingCoordinator((WebCore::Page *)this);
                        if (this)
                          return (_QWORD *)(*(uint64_t (**)(_QWORD *, WebCore::LocalFrameView *))(*this + 88))(this, v5);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

WTF::MonotonicTime *WebCore::RenderLayerCompositor::widgetDidChangeSize(WTF::MonotonicTime *this, WebCore::RenderWidget *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)a2 + 21) & 0x80) != 0)
  {
    v2 = *((_QWORD *)a2 + 18);
    *(_DWORD *)(v2 + 12) |= 8u;
    if ((*(_BYTE *)(v2 + 24) & 4) != 0)
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
LABEL_6:
        do
        {
          v4 = *(_DWORD *)(v3 + 12);
          if ((v4 & 1) != 0)
            break;
          *(_DWORD *)(v3 + 12) = v4 | 1;
          if ((*(_BYTE *)(v3 + 24) & 4) == 0)
          {
            while (1)
            {
              v3 = *(_QWORD *)(v3 + 40);
              if (!v3)
                goto LABEL_7;
              if ((*(_BYTE *)(v3 + 24) & 0x4A) != 0)
                goto LABEL_15;
            }
          }
          v3 = *(_QWORD *)(v3 + 40);
LABEL_15:
          ;
        }
        while (v3);
      }
    }
    else
    {
      v3 = v2;
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          break;
        if ((*(_BYTE *)(v3 + 24) & 0x4A) != 0)
          goto LABEL_6;
      }
    }
LABEL_7:
    if ((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v5 = (uint64_t)this + 16;
      *((_QWORD *)this + 5) = 0;
      WTF::MonotonicTime::now(this);
      WebCore::TimerBase::setNextFireTime(v5, v6 + 0.0);
    }
    this = *(WTF::MonotonicTime **)(v2 + 256);
    if (this)
      return (WTF::MonotonicTime *)WebCore::RenderLayerBacking::updateAfterWidgetResize((uint64_t)this);
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::ScrollableArea>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      LODWORD(v6) = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v7 = v6;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v7;
      goto LABEL_6;
    }
    v10 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v10)
      goto LABEL_22;
    v11 = 0;
    v12 = v10 - 1;
    do
    {
      v13 = (unsigned int **)(v6 + 8 * v12);
      if ((unint64_t)*v13 + 1 >= 2 && !*((_QWORD *)*v13 + 1))
      {
        v20 = v12;
        v21 = v6;
        v19 = v11;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v13, a2);
        v12 = v20;
        v6 = v21;
        v11 = v19 + 1;
      }
    }
    while ((unint64_t)v12--);
    v6 = *(_QWORD *)a1;
    if (v11)
    {
      *(_DWORD *)(v6 - 16) += v11;
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      *(_DWORD *)(v17 - 12) = v18 - v11;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v15 = *(_DWORD *)(v6 - 4);
    if (v15 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v15)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
        goto LABEL_4;
    }
    LODWORD(v6) = *(_DWORD *)(v6 - 12);
    v7 = 0x7FFFFFFF;
    if (v6 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v8 = (WTF *)a2[1];
  if (v8 && *((_QWORD *)v8 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v8);
  else
    return 0;
}

uint64_t WebCore::PageOverlayController::didChangeViewSize(WebCore::PageOverlayController *this)
{
  uint64_t *v1;
  uint64_t result;
  WebCore::GraphicsLayer *v3;
  WebCore::PageOverlay **v4;
  WebCore::PageOverlay **v5;
  uint64_t v6;
  void *v7;
  WebCore::PageOverlay *v8;
  char v9[8];
  WebCore::PageOverlay **v10;
  char v11[8];
  WebCore::PageOverlay **v12;

  v1 = (uint64_t *)((char *)this + 32);
  WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::begin((uint64_t)v11, (uint64_t *)this + 4);
  result = WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::end((uint64_t)v9, v1);
  v4 = v12;
  v5 = v10;
  while (v4 != v5)
  {
    v6 = *((_QWORD *)*v4 + 1);
    if (!*(_BYTE *)(v6 + 121))
    {
      ++*(_DWORD *)(v6 + 8);
      v8 = (WebCore::PageOverlay *)v6;
      WebCore::updateOverlayGeometry((WebCore *)v6, v4[1], v3);
      WTF::Ref<WebCore::PageOverlay,WTF::RawPtrTraits<WebCore::PageOverlay>,WTF::DefaultRefDerefTraits<WebCore::PageOverlay>>::~Ref(&v8, v7);
    }
    result = WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIterator::operator++((uint64_t)v11);
    v4 = v12;
  }
  return result;
}

float *WebCore::Page::setDeviceScaleFactor(float *this, float a2)
{
  float *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  if (a2 > 0.0)
  {
    v2 = this;
    if (this[91] != a2)
    {
      this[91] = a2;
      WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)this);
      v3 = (unsigned int *)*((_QWORD *)v2 + 20);
      if (v3 && !*((_BYTE *)v3 + 144))
      {
        v4 = v3 + 2;
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        WebCore::LocalFrame::deviceOrPageScaleFactorChanged((WebCore::LocalFrame *)v3);
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
      }
      {
        WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
      }
      WebCore::BackForwardCache::markPagesForDeviceOrPageScaleChanged((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, (WebCore::Page *)v2);
      return (float *)WebCore::PageOverlayController::didChangeDeviceScaleFactor(*((_QWORD *)v2 + 154));
    }
  }
  return this;
}

uint64_t WebCore::Page::windowScreenDidChange(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned __int8 **v8;
  void *v9;
  WebCore::RenderingUpdateScheduler *v10;
  int v11;
  _DWORD *v12;
  unsigned int v13;

  v3 = result;
  v13 = a2;
  if (*(_DWORD *)(result + 312) == a2)
  {
    if (BYTE4(a3) && *(_BYTE *)(result + 320))
    {
      if (*(_DWORD *)(result + 316) == (_DWORD)a3)
        return result;
    }
    else if ((BYTE4(a3) != 0) == (*(_BYTE *)(result + 320) != 0))
    {
      return result;
    }
  }
  *(_DWORD *)(result + 312) = a2;
  *(_DWORD *)(result + 316) = a3;
  *(_BYTE *)(result + 320) = BYTE4(a3);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3400840;
  v4[1] = &v13;
  v12 = v4;
  WebCore::Page::forEachDocument(v3, &v12);
  (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  WebCore::Frame::protectedVirtualView(*(WebCore::Frame **)(v3 + 160), &v12);
  v5 = v12;
  v12 = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3400868;
  *(_BYTE *)(v6 + 8) = 1;
  v12 = (_DWORD *)v6;
  WebCore::Page::forEachMediaElement(v3, (uint64_t)&v12);
  v7 = v12;
  v12 = 0;
  if (v7)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(unsigned __int8 ***)(v3 + 104);
  if (v8)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>::ref(v8 + 1);
    (*((void (**)(unsigned __int8 **, _QWORD, _QWORD))*v8 + 58))(v8, v13, *(_QWORD *)(v3 + 316));
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref(v8 + 1, v9);
  }
  v10 = *(WebCore::RenderingUpdateScheduler **)(v3 + 672);
  if (v10)
  {
    ++*((_DWORD *)v10 + 2);
    WebCore::RenderingUpdateScheduler::windowScreenDidChange(v10, v13);
    v11 = *((_DWORD *)v10 + 2);
    if (!v11)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *((_DWORD *)v10 + 2) = v11 - 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 48) + 16) + 1032))(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16));
  return WebCore::Page::setNeedsRecalcStyleInAllFrames((WebCore::Page *)v3);
}

unsigned int *WebCore::Page::setPageScaleFactor(unsigned int *this, float a2, const WebCore::IntPoint *a3, int a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  WebCore::FrameView *v15;
  uint64_t v16;
  BOOL v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;

  v4 = *((_QWORD *)this + 20);
  if (v4)
    v5 = *(_BYTE *)(v4 + 144) == 0;
  else
    v5 = 0;
  if (!v5)
    return this;
  v8 = (uint64_t)this;
  v9 = *(_QWORD *)(v4 + 296);
  if (v9)
    *(_DWORD *)(v9 + 24) += 2;
  v10 = *(_QWORD *)(v9 + 528);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && (v12 = *(_QWORD *)(v11 + 288)) != 0)
  {
    ++*(_DWORD *)(v12 + 8);
    if (*((float *)this + 89) == a2)
    {
      v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 + 64) + 832))(v12 + 64, 0, 1);
      v14 = *(_DWORD *)a3 == (_DWORD)v13 && *((_DWORD *)a3 + 1) == HIDWORD(v13);
      if (!v14 && !*(_BYTE *)(v8 + 1098))
        WebCore::Document::updateLayout(v9, 0xAu, 0);
    }
    else
    {
      *((float *)this + 89) = a2;
      if (!*((_BYTE *)this + 1098))
      {
        WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameViewLayoutContext *)(v12 + 336));
        WebCore::LocalFrameView::setNeedsCompositingGeometryUpdate((WebCore::LocalFrameView *)v12);
        WebCore::LocalFrameView::setDescendantsNeedUpdateBackingAndHierarchyTraversal((WebCore::LocalFrameView *)v12);
        WebCore::Document::resolveStyle(v9, 1);
        v15 = *(WebCore::FrameView **)(v4 + 288);
        if (v15)
        {
          ++*((_DWORD *)v15 + 2);
          v22 = xmmword_1969F5990;
          WebCore::FrameView::invalidateRect(v15, (const WebCore::IntRect *)&v22);
          if (*((_DWORD *)v15 + 2) == 1)
            (*(void (**)(WebCore::FrameView *))(*(_QWORD *)v15 + 8))(v15);
          else
            --*((_DWORD *)v15 + 2);
        }
        else
        {
          v22 = xmmword_1969F5990;
          WebCore::FrameView::invalidateRect(0, (const WebCore::IntRect *)&v22);
        }
      }
      WebCore::LocalFrame::deviceOrPageScaleFactorChanged((WebCore::LocalFrame *)v4);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 328) + 136) + 680) & 0x10) != 0)
        WebCore::LocalFrameView::setViewportConstrainedObjectsNeedLayout((WebCore::LocalFrameView *)v12);
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 + 64) + 832))(v12 + 64, 0, 1);
      if ((*(_DWORD *)a3 != (_DWORD)v16 || *((_DWORD *)a3 + 1) != HIDWORD(v16)) && !*(_BYTE *)(v8 + 1098))
      {
        v21 = *(_QWORD *)(v9 + 1944);
        if (v21)
        {
          if ((*(_BYTE *)(v21 + 20) & 0xF8) != 0 && !*(_BYTE *)(v12 + 475))
          {
            WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v12 + 336));
            WebCore::LocalFrameView::updateCompositingLayersAfterLayoutIfNeeded((WebCore::LocalFrameView *)v12);
          }
        }
      }
    }
    this = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 + 64) + 832))(v12 + 64, 0, 1);
    v18 = *(_DWORD *)a3 == (_DWORD)this && *((_DWORD *)a3 + 1) == HIDWORD(this);
    if (!v18 && *(_BYTE *)(v12 + 312) != 1)
    {
      v22 = xmmword_1968DF820;
      this = (unsigned int *)WebCore::LocalFrameView::setScrollPosition((WebCore::LocalFrameView *)v12, a3, &v22);
    }
    v19 = 0;
    if (!a4)
      goto LABEL_38;
  }
  else
  {
    if (*((float *)this + 89) != a2)
    {
      *((float *)this + 89) = a2;
      this = (unsigned int *)WebCore::LocalFrame::deviceOrPageScaleFactorChanged((WebCore::LocalFrame *)v4);
    }
    v12 = 0;
    v19 = 1;
    if (!a4)
      goto LABEL_38;
  }
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = off_1E34007F0;
  *(_QWORD *)&v22 = v20;
  WebCore::Page::forEachMediaElement(v8, (uint64_t)&v22);
  this = (unsigned int *)v22;
  *(_QWORD *)&v22 = 0;
  if (this)
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
LABEL_38:
  if ((v19 & 1) == 0)
  {
    if (*(_DWORD *)(v12 + 8) == 1)
      this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 8);
  }
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v9, a3);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  return this;
}

uint64_t WebCore::Page::forEachMediaElement(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3401358;
  v4[1] = a2;
  v6 = v4;
  WebCore::Page::forEachDocument(a1, &v6);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebCore::LocalFrame::deviceOrPageScaleFactorChanged(WebCore::LocalFrame *this)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::RenderView *v8;
  WebCore::RenderLayerCompositor *v9;
  int v10;
  uint64_t v11;

  result = *((_QWORD *)this + 11);
  if (result)
  {
    v3 = (unsigned int *)(result + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v11 = result;
    do
    {
      if (!*(_BYTE *)(result + 144))
      {
        v5 = (unsigned int *)(result + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        WebCore::LocalFrame::deviceOrPageScaleFactorChanged((WebCore::LocalFrame *)result);
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v5);
        result = v11;
      }
      WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=(&v11, *(_QWORD *)(result + 72));
      result = v11;
    }
    while (v11);
  }
  v7 = *((_QWORD *)this + 37);
  if (v7)
  {
    v8 = *(WebCore::RenderView **)(v7 + 1944);
    if (v8)
    {
      ++*((_DWORD *)v8 + 4);
      v9 = (WebCore::RenderLayerCompositor *)WebCore::RenderView::compositor(v8);
      result = (uint64_t)WebCore::RenderLayerCompositor::deviceOrPageScaleFactorChanged(v9);
      v10 = *((_DWORD *)v8 + 4);
      if (v10)
      {
        *((_DWORD *)v8 + 4) = v10 - 1;
      }
      else
      {
        result = 286;
        __break(0xC471u);
      }
    }
  }
  return result;
}

WebCore::GraphicsLayer *WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(WebCore::GraphicsLayer *this)
{
  uint64_t v2;
  WebCore::GraphicsLayer *result;
  uint64_t v4;
  WebCore::GraphicsLayer **v5;
  uint64_t v6;
  WebCore::GraphicsLayer *v7;

  (*(void (**)(WebCore::GraphicsLayer *))(*(_QWORD *)this + 728))(this);
  v2 = *((_QWORD *)this + 26);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 728))(v2);
  result = (WebCore::GraphicsLayer *)*((_QWORD *)this + 27);
  if (result)
    result = (WebCore::GraphicsLayer *)WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(result);
  v4 = *((unsigned int *)this + 49);
  if ((_DWORD)v4)
  {
    v5 = (WebCore::GraphicsLayer **)*((_QWORD *)this + 23);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      result = (WebCore::GraphicsLayer *)WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(v7);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::deviceOrPageScaleFactorChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t i;

  if ((*(_WORD *)(this + 177) & 1) == 0)
  {
    v1 = *(_QWORD *)(this + 616);
    *(_QWORD *)(this + 616) = v1 | 0x1000408;
    if (!*(_BYTE *)(this + 889))
    {
      for (i = *(_QWORD *)(this + 200); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
    }
    if (!v1)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 24) + 40))(*(_QWORD *)(this + 24));
  }
  return this;
}

uint64_t WebCore::RenderView::compositor(WebCore::RenderView *this)
{
  uint64_t result;
  WebCore::RenderLayerCompositor *v3;
  WebCore::RenderLayerCompositor *v4;
  WTF *v5;
  void *v6;

  result = *((_QWORD *)this + 50);
  if (!result)
  {
    v3 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v3, this);
    v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = result;
    if (v4)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v4);
      WTF::fastFree(v5, v6);
      return *((_QWORD *)this + 50);
    }
  }
  return result;
}

WebCore::GraphicsLayer *WebCore::RenderLayerCompositor::deviceOrPageScaleFactorChanged(WebCore::RenderLayerCompositor *this)
{
  WebCore::GraphicsLayer *result;

  result = (WebCore::GraphicsLayer *)*((_QWORD *)this + 32);
  if (result)
    return WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(result);
  result = (WebCore::GraphicsLayer *)*((_QWORD *)this + 28);
  if (result)
    return WebCore::GraphicsLayer::noteDeviceOrPageScaleFactorChangedIncludingDescendants(result);
  return result;
}

uint64_t WebCore::Page::setNeedsRecalcStyleInAllFrames(WebCore::Page *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3400778;
  v11 = (uint64_t)v2;
  v3 = *((_QWORD *)this + 20);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WebCore::Page::forEachDocumentFromMainFrame(v3, &v11);
  do
  {
    v6 = __ldaxr(v4);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v4));
  if (!v7)
  {
    atomic_store(1u, v4);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = off_1E31FE290;
    v9[1] = v4;
    v12 = v9;
    WTF::ensureOnMainThread();
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  }
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

WebCore::Page *WebCore::SettingsBase::setNeedsRecalcStyleInAllFrames(WebCore::Page *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    this = *(WebCore::Page **)(v1 + 8);
    if (this)
      return (WebCore::Page *)WebCore::Page::setNeedsRecalcStyleInAllFrames(this);
  }
  return this;
}

uint64_t WebCore::AsyncScrollingCoordinator::windowScreenDidChange(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return WebCore::ScrollingTree::windowScreenDidChange(result, a2, a3);
  return result;
}

uint64_t WebCore::BackForwardCache::markPagesForDeviceOrPageScaleChanged(uint64_t this, WebCore::Page *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD **)(this + 8);
  if (v2)
  {
    while (1)
    {
      v4 = *(_QWORD *)(*v2 + 200);
      ++*(_DWORD *)v4;
      v5 = *((_QWORD *)a2 + 20);
      v6 = *(unsigned __int8 *)(v5 + 144);
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 16) + 720))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16));
      if (!v6 && v5 == this)
        *(_BYTE *)(v4 + 33) = 1;
      if (!*(_DWORD *)v4)
        break;
      --*(_DWORD *)v4;
      v2 = (_QWORD *)v2[2];
      if (!v2)
        return this;
    }
    this = 286;
    __break(0xC471u);
  }
  return this;
}

WebCore::Widget *WebCore::LocalFrameView::addChild(WebCore::LocalFrameView *this, WebCore::Widget *a2)
{
  WebCore::Widget *result;
  uint64_t v5;
  WebCore::Widget *v6;

  if ((*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)a2 + 72))(a2)
    && WebCore::LocalFrameView::isScrollable((uint64_t)a2))
  {
    WebCore::LocalFrameView::addScrollableArea(this, (WebCore::Widget *)((char *)a2 + 64));
  }
  (*(void (**)(WebCore::Widget *, WebCore::LocalFrameView *))(*(_QWORD *)a2 + 112))(a2, this);
  ++*((_DWORD *)a2 + 2);
  v6 = a2;
  WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::add((uint64_t *)this + 18, (uint64_t *)&v6, (uint64_t)&v5);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WebCore::Widget *)(*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (*((_QWORD *)a2 + 5))
    return (WebCore::Widget *)WebCore::ScrollView::platformAddChild((id *)this, a2);
  return result;
}

unsigned int *WebCore::RenderTheme::inactiveSelectionBackgroundColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;

  v5 = a2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v7 = *((_QWORD *)result + 7);
  if ((v7 & 0x4000000000000) != 0)
    goto LABEL_10;
  v8 = result;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 544))(&v21, a1, v5);
  result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 232))(&v22, a1, &v21, v5);
  v10 = *((_QWORD *)v8 + 7);
  v11 = v22;
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v22 & 0x8000000000000) == 0
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v10 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v10) != HIBYTE(v22)
      || BYTE6(v10) != BYTE6(v22))
    {
      result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v19 = __ldaxr(result);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, result));
      if (!v20)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
      goto LABEL_7;
    }
LABEL_13:
    if ((v11 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, result));
      if (!v14)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
    goto LABEL_8;
  }
  if (v10 == v22 && (v22 & 0x8000000000000) == 0)
  {
    v11 = *((_QWORD *)v8 + 7);
    goto LABEL_13;
  }
LABEL_7:
  *((_QWORD *)v8 + 7) = v22;
  v22 = 0;
LABEL_8:
  if ((v21 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(result);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, result));
    if (!v18)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
    }
  }
  v7 = *((_QWORD *)v8 + 7);
LABEL_10:
  *a3 = v7;
  if ((v7 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  return result;
}

unsigned int *WebCore::RenderTheme::inactiveSelectionForegroundColor@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *result;
  unsigned int *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;

  v5 = a2;
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1072))(a1, a2);
  v7 = result;
  if ((*((_BYTE *)result + 78) & 4) == 0)
  {
    result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 656))(a1, v5);
    if ((_DWORD)result)
    {
      result = (unsigned int *)(*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 560))(&v19, a1, v5);
      v9 = *((_QWORD *)v7 + 9);
      v10 = v19;
      if ((v9 & 0x8000000000000) != 0)
      {
        if ((v19 & 0x8000000000000) == 0
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4)
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8)
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC)
          || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10)
          || HIBYTE(v9) != HIBYTE(v19)
          || BYTE6(v9) != BYTE6(v19))
        {
          result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
          do
          {
            v17 = __ldaxr(result);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, result));
          if (!v18)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
          }
          goto LABEL_8;
        }
      }
      else
      {
        if (v9 != v19 || (v19 & 0x8000000000000) != 0)
        {
LABEL_8:
          *((_QWORD *)v7 + 9) = v19;
          goto LABEL_9;
        }
        v10 = *((_QWORD *)v7 + 9);
      }
      if ((v10 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v13 = __ldaxr(result);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, result));
        if (!v14)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
        }
      }
    }
  }
LABEL_9:
  v12 = *((_QWORD *)v7 + 9);
  *a3 = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  return result;
}

void WebCore::LocalFrame::createView(WebCore::LocalFrameView *a1, WebCore::LocalFrame *a2, uint64_t *a3, const WebCore::IntSize *a4, uint64_t a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10)
{
  WebCore::LocalFrameView *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  WebCore::ScrollView *v25;
  int v26;
  uint64_t v27;
  WebCore::Node *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  uint64_t v37;
  _DWORD *v38;
  WebCore::ScrollView *v39;
  unsigned __int8 v40;

  v14 = *(WebCore::LocalFrameView **)(*((_QWORD *)a1 + 79) + 8);
  if (v14 == a1)
  {
    v37 = *((_QWORD *)a1 + 36);
    if (v37)
    {
      ++*(_DWORD *)(v37 + 8);
      v38 = (_DWORD *)v37;
      WebCore::ScrollView::setParentVisible(v37, 0);
      if (v38[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
      else
        --v38[2];
    }
    v39 = 0;
    WebCore::LocalFrame::setView((uint64_t)a1, (uint64_t *)&v39);
    if (v39)
    {
      if (*((_DWORD *)v39 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v39 + 8))();
      else
        --*((_DWORD *)v39 + 2);
    }
    WebCore::LocalFrameView::create(a1, a2, &v39);
    v15 = (uint64_t)v39;
    WebCore::ScrollView::setFixedLayoutSize((uint64_t)v39, a4);
    WebCore::ScrollView::setUseFixedLayout(v15, a6);
  }
  else
  {
    v39 = 0;
    WebCore::LocalFrame::setView((uint64_t)a1, (uint64_t *)&v39);
    if (v39)
    {
      if (*((_DWORD *)v39 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v39 + 8))();
      else
        --*((_DWORD *)v39 + 2);
    }
    v15 = bmalloc::api::isoAllocate();
    WebCore::LocalFrameView::LocalFrameView((WebCore::LocalFrameView *)v15, a1);
    v16 = *((_QWORD *)a1 + 3);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        if ((*(_WORD *)(v17 + 658) & 4) != 0)
        {
          WebCore::ScrollView::show((uint64_t *)v15);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 328) + 128) + 8) == *(_QWORD *)(v15 + 328))
          {
            *(_BYTE *)(v15 + 1381) = 0;
            *(_BYTE *)(v15 + 1372) = 0;
            WebCore::LocalFrameView::adjustTiledBackingCoverage(v15);
          }
          WebCore::ScrollView::setScrollbarModes(v15, a7, a9, a8, a10);
          goto LABEL_11;
        }
      }
    }
  }
  WebCore::ScrollView::setScrollbarModes(v15, a7, a9, a8, a10);
  if (v15)
  {
LABEL_11:
    v18 = 0;
    ++*(_DWORD *)(v15 + 8);
    goto LABEL_12;
  }
  v18 = 1;
LABEL_12:
  v39 = (WebCore::ScrollView *)v15;
  WebCore::LocalFrame::setView((uint64_t)a1, (uint64_t *)&v39);
  if (v39)
  {
    if (*((_DWORD *)v39 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
    else
      --*((_DWORD *)v39 + 2);
  }
  WebCore::LocalFrameView::updateBackgroundRecursively(v15, a3);
  if (v14 == a1)
    WebCore::ScrollView::setParentVisible(v15, 1);
  v20 = *((_QWORD *)a1 + 15);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 24);
      *(_DWORD *)(v21 + 24) = v22 + 2;
      if ((*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1941DC4C8);
        }
        v23 = (*(unsigned __int8 *)((*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
        if ((*(_BYTE *)((*(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
          LOBYTE(v23) = 0;
        if ((v23 & 1) != 0)
          v24 = *(_QWORD *)(v21 + 64) & 0xFFFFFFFFFFFFLL;
        else
          v24 = 0;
      }
      else
      {
        v24 = 0;
      }
      if (v22)
      {
        *(_DWORD *)(v21 + 24) = v22;
      }
      else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v21, v19);
      }
      if (v24)
      {
        ++*(_DWORD *)(v24 + 16);
        if ((v18 & 1) == 0)
          ++*(_DWORD *)(v15 + 8);
        v39 = (WebCore::ScrollView *)v15;
        WebCore::RenderWidget::setWidget(v24, (uint64_t *)&v39);
        v25 = v39;
        v39 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 2) == 1)
            (*(void (**)(WebCore::ScrollView *))(*(_QWORD *)v25 + 8))(v25);
          else
            --*((_DWORD *)v25 + 2);
        }
        v26 = *(_DWORD *)(v24 + 16);
        if (!v26)
        {
          __break(0xC471u);
          JUMPOUT(0x1941DC4A8);
        }
        *(_DWORD *)(v24 + 16) = v26 - 1;
      }
    }
    v27 = *((_QWORD *)a1 + 15);
    if (v27)
    {
      v28 = *(WebCore::Node **)(v27 + 8);
      if (v28)
      {
        *((_DWORD *)v28 + 6) += 2;
        v29 = *((_QWORD *)a1 + 36);
        if (v29)
          ++*(_DWORD *)(v29 + 8);
        v30 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v28 + 1248))(v28);
        *(_BYTE *)(v29 + 1364) = v30 != 1;
        LOBYTE(v39) = 0;
        v40 = 0;
        if (*(_QWORD *)(v29 + 40))
        {
          WebCore::ScrollView::platformScrollbarModes(v29, (uint64_t)&v39, (uint64_t)&v40);
          v31 = v40;
        }
        else
        {
          LOBYTE(v39) = *(_BYTE *)(v29 + 168);
          v31 = *(unsigned __int8 *)(v29 + 169);
          v40 = *(_BYTE *)(v29 + 169);
        }
        if (v30 != 1 && v31 == 1)
        {
          v31 = 0;
          v40 = 0;
        }
        else if (v30 == 1)
        {
          v31 = 1;
          v40 = 1;
          LOBYTE(v39) = 1;
          v32 = 1;
LABEL_46:
          WebCore::ScrollView::setScrollbarModes(v29, v32, v31, 0, 0);
          if (*(_DWORD *)(v29 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          else
            --*(_DWORD *)(v29 + 8);
          if (*((_DWORD *)v28 + 6) == 2)
          {
            if ((*((_WORD *)v28 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v28, v33);
          }
          else
          {
            *((_DWORD *)v28 + 6) -= 2;
          }
          goto LABEL_50;
        }
        v32 = v39;
        if (v39 == 1)
        {
          v32 = 0;
          LOBYTE(v39) = 0;
        }
        goto LABEL_46;
      }
    }
  }
LABEL_50:
  if ((v18 & 1) == 0)
  {
    if (*(_DWORD *)(v15 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    else
      --*(_DWORD *)(v15 + 8);
  }
}

uint64_t WebCore::ScrollView::setFixedLayoutSize(uint64_t this, const WebCore::IntSize *a2)
{
  if (*(_DWORD *)a2 != *(_DWORD *)(this + 248) || *((_DWORD *)a2 + 1) != *(_DWORD *)(this + 252))
  {
    *(_QWORD *)(this + 248) = *(_QWORD *)a2;
    if (*(_BYTE *)(this + 321))
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 568))(this, 1);
  }
  return this;
}

WTF::StringImpl *WebCore::LocalFrame::setView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Page *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  WebCore::FrameLoader *v17;
  WTF::StringImpl *result;

  v4 = *(_QWORD *)(a1 + 288);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 152);
    ++*(_DWORD *)(v4 + 8);
    if (v5 && *(_BYTE *)(v5 + 137))
      WebCore::ScrollView::setHasScrollbarInternal((_QWORD *)v4, (uint64_t *)(v4 + 152), 0, 0, 0);
    v6 = *(_QWORD *)(v4 + 160);
    if (v6 && *(_BYTE *)(v6 + 137))
      WebCore::ScrollView::setHasScrollbarInternal((_QWORD *)v4, (uint64_t *)(v4 + 160), 1, 0, 0);
    v7 = *(_QWORD *)(v4 + 664);
    *(_QWORD *)(v4 + 664) = 0;
    if (v7)
      WebCore::RenderObjectDeleter::operator()(v4 + 664, v7);
    WebCore::LocalFrameView::removeFromAXObjectCache(v4);
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 328) + 24);
    if (v8)
    {
      v9 = *(WebCore::Page **)(v8 + 8);
      if (v9)
      {
        v10 = WebCore::Page::scrollingCoordinator(v9);
        if (v10)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 448))(v10, v4 + 64);
      }
    }
    if (*(_DWORD *)(v4 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    else
      --*(_DWORD *)(v4 + 8);
  }
  if (!*a2)
  {
    v11 = *(_QWORD *)(a1 + 296);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 3362) != 2)
      {
        *(_DWORD *)(v11 + 24) += 2;
        WebCore::Document::willBeRemovedFromFrame((WebCore::Document *)v11, a2);
        if (*(_DWORD *)(v11 + 24) == 2)
        {
          if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
        }
        else
        {
          *(_DWORD *)(v11 + 24) -= 2;
        }
      }
    }
  }
  v12 = *(_QWORD *)(a1 + 288);
  if (v12)
  {
    ++*(_DWORD *)(v12 + 8);
    ++*(_DWORD *)(v12 + 336);
    if ((*(_QWORD *)(v12 + 440) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v12 + 440) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v12 + 408));
    }
    if ((*(_QWORD *)(v12 + 384) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v12 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v12 + 352));
    }
    v13 = *(_DWORD *)(v12 + 336);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1941DC774);
    }
    *(_DWORD *)(v12 + 336) = v13 - 1;
    if (*(_DWORD *)(v12 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 8);
  }
  WebCore::EventHandler::clear(*(WebCore::EventHandler **)(a1 + 640), (unint64_t *)a2);
  v14 = *(_QWORD *)(a1 + 296);
  if (v14 && *(_QWORD *)(v14 + 1944) && !*(_BYTE *)(v14 + 3405))
  {
    __break(0xC471u);
    JUMPOUT(0x1941DC7B4);
  }
  v15 = *a2;
  *a2 = 0;
  v16 = *(_DWORD **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v15;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *(WebCore::FrameLoader **)(a1 + 280);
  ++*(_DWORD *)v17;
  result = WebCore::FrameLoader::resetMultipleFormSubmissionProtection(v17);
  if (!*(_DWORD *)v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1941DC794);
  }
  --*(_DWORD *)v17;
  return result;
}

uint64_t WebCore::EventHandler::clear(WebCore::EventHandler *this, unint64_t *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  unsigned int v30;
  char *v31;
  unint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  unint64_t v36;
  WTF *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Page *v45;
  unsigned int *v46;
  unsigned int v47;
  _BYTE v48[4];
  int v49;
  _QWORD *v50;
  char v51;

  if ((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::EventHandler *)((char *)this + 24));
  *((_BYTE *)this + 183) = 0;
  if ((*((_QWORD *)this + 78) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 78) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::EventHandler *)((char *)this + 592));
  }
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v3 & 0xFDFFFFFFFFFFFFLL;
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::EventHandler *)((char *)this + 80));
  v4 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  if (*((_QWORD *)this + 26))
  {
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 26, 0);
    v43 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v44 = *(_QWORD *)(v43 + 24);
    if (v44)
    {
      v45 = *(WebCore::Page **)(v44 + 8);
      if (v45)
      {
        ++*(_DWORD *)v45;
        if (*((_QWORD *)v45 + 151))
        {
          v46 = (unsigned int *)(v43 + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 + 1, v46));
          v50 = (_QWORD *)v43;
          WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)&v50);
        }
        WTF::RefCounted<WebCore::Page>::deref(v45);
      }
    }
  }
  v5 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = off_1E31FE290;
      v39[1] = v7;
      v50 = v39;
      WTF::ensureOnMainThread();
      v40 = (uint64_t)v50;
      v50 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v10 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, a2);
    else
      --*(_DWORD *)v10;
  }
  *((_DWORD *)this + 74) = 0;
  v11 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  *(_OWORD *)((char *)this + 712) = 0u;
  v12 = (uint64_t *)*((_QWORD *)this + 91);
  if (v12)
  {
    *((_QWORD *)this + 91) = 0;
    WTF::HashTable<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>>>::deallocateTable(v12, a2);
  }
  if (*((_DWORD *)this + 190))
  {
    v13 = *((unsigned int *)this + 191);
    if ((_DWORD)v13)
    {
      v14 = (WTF **)*((_QWORD *)this + 94);
      v15 = 8 * v13;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
          WTF::RefCounted<WebCore::Touch>::deref(v16, (WTF::StringImpl *)a2);
        ++v14;
        v15 -= 8;
      }
      while (v15);
      *((_DWORD *)this + 191) = 0;
    }
    v17 = (WTF *)*((_QWORD *)this + 94);
    if (v17)
    {
      *((_QWORD *)this + 94) = 0;
      *((_DWORD *)this + 190) = 0;
      WTF::fastFree(v17, a2);
    }
  }
  v18 = *((_QWORD *)this + 97);
  if (v18)
  {
    *((_QWORD *)this + 97) = 0;
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  *((_DWORD *)this + 184) = 0;
  v19 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v41 = off_1E31FE290;
      v41[1] = v20;
      v50 = v41;
      WTF::ensureOnMainThread();
      v42 = (uint64_t)v50;
      v50 = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
  }
  v23 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, a2);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  v24 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v24)
  {
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
  }
  *((_BYTE *)this + 706) = 0;
  if (*((_BYTE *)this + 308))
    *((_BYTE *)this + 308) = 0;
  *((_QWORD *)this + 39) = 0;
  v25 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v25)
  {
    if (*(_DWORD *)(v25 + 24) == 2)
    {
      if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v25, a2);
    }
    else
    {
      *(_DWORD *)(v25 + 24) -= 2;
    }
  }
  *((_BYTE *)this + 168) = 0;
  v26 = *((_DWORD *)this + 44);
  v48[0] = 2;
  v49 = 1;
  if (v26 == 1)
  {
    *((_BYTE *)this + 172) = 2;
  }
  else
  {
    v30 = v26 + 1;
    if (v30 >= 3)
      v31 = (char *)this + 172;
    else
      v31 = v48;
    if (v30 >= 3)
      a2 = (unint64_t *)v48;
    else
      a2 = (unint64_t *)((char *)this + 172);
    v32 = *a2;
    v50 = (_QWORD *)*a2;
    if (v30 >= 3)
      v33 = &v49;
    else
      v33 = (int *)((char *)this + 176);
    *v33 = -1;
    if (v30 >= 3)
      v34 = (int *)((char *)this + 176);
    else
      v34 = &v49;
    v35 = *v34;
    v36 = HIDWORD(v32);
    if ((_DWORD)v35 != -1)
    {
      ((void (*)(char *))off_1E33FE7D0[v35])(&v51);
      *v33 = v35;
    }
    *v34 = -1;
    if ((_DWORD)v36 != -1)
    {
      ((void (*)(char *, char *, _QWORD **))off_1E33FE7D0[v36])(&v51, v31, &v50);
      *v34 = v36;
    }
  }
  result = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  *((_BYTE *)this + 194) = 0;
  v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (v28)
  {
    result = *(_QWORD *)(v28 + 8);
    if (result)
    {
      v29 = (*(_DWORD *)result)++;
      if (v29)
      {
        *(_DWORD *)result = v29;
      }
      else
      {
        WebCore::Page::~Page((WebCore::Page *)result);
        result = WTF::fastFree(v37, v38);
      }
    }
  }
  *((_QWORD *)this + 20) = 0;
  *((_BYTE *)this + 186) = 0;
  return result;
}

WTF::StringImpl *WebCore::FrameLoader::resetMultipleFormSubmissionProtection(WebCore::FrameLoader *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  int v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;

  v7 = 0;
  WTF::URL::invalidate((WTF::URL *)&v7);
  v3 = v7;
  v7 = 0;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, v2);
      result = v7;
    }
    else
    {
      result = 0;
      *(_DWORD *)v4 -= 2;
    }
  }
  else
  {
    result = 0;
  }
  v6 = v8;
  *(_OWORD *)((char *)this + 232) = v8;
  LODWORD(v8) = v6 & 0xFFFFFFFE;
  *(_OWORD *)((char *)this + 248) = v9;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::LocalFrameView::updateBackgroundRecursively(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(a1 + 328);
  if (v2)
  {
    v5 = *(_QWORD *)(a1 + 328);
    while (1)
    {
      do
      {
LABEL_4:
        v6 = (_QWORD *)v5;
        if (!*(_BYTE *)(v5 + 144))
        {
          v7 = *(_QWORD *)(v5 + 288);
          if (v7)
          {
            {
              WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
              unk_1ECE88AD0 = 0u;
              unk_1ECE88AC0 = 0u;
              WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
            }
            v8 = *(WebCore::Document **)(*(_QWORD *)(v7 + 328) + 296);
            if (v8)
            {
              v9 = *((_QWORD *)v8 + 159);
              if (!v9)
                goto LABEL_13;
              v10 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
              if (!v10)
                goto LABEL_13;
              if ((*(_BYTE *)(v10 + 45) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1941DCFACLL);
              }
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 32) + 148) & 4) != 0)
                LOBYTE(v8) = WebCore::RenderObject::styleColorOptions((WebCore::RenderObject *)v10);
              else
LABEL_13:
                LOBYTE(v8) = WebCore::Document::styleColorOptions(v8, 0);
            }
            (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, _QWORD))(WebCore::RenderTheme::singleton(void)::theme
                                                                                      + 272))(&v34, &WebCore::RenderTheme::singleton(void)::theme, 188, v8);
            if (*((_BYTE *)a2 + 8))
            {
              v12 = *a2;
              v35 = v12;
              if ((v12 & 0x8000000000000) != 0)
              {
                v26 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
                do
                  v27 = __ldaxr(v26);
                while (__stlxr(v27 + 1, v26));
              }
            }
            else
            {
              v35 = 0;
              v21 = v34;
              if (v34)
              {
                v34 = 0;
                v35 = v21;
              }
            }
            if ((v34 & 0x8000000000000) != 0)
            {
              v28 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                atomic_store(1u, v28);
                WTF::fastFree((WTF *)v28, v11);
              }
            }
            v13 = v35;
            if ((v35 & 0x8000000000000) != 0)
              v14 = *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
            else
              v14 = v35 != 0;
            v15 = !v14;
            if (*(unsigned __int8 *)(v7 + 1369) != v15)
            {
              *(_BYTE *)(v7 + 1369) = v15;
              v22 = *(_QWORD *)(*(_QWORD *)(v7 + 328) + 296);
              if (v22)
              {
                v23 = *(_QWORD *)(v22 + 1944);
                if (v23)
                {
                  if (*(_QWORD *)(v23 + 248) == v7)
                  {
                    WebCore::LocalFrameViewLayoutContext::setNeedsLayoutAfterViewConfigurationChange((WebCore::LocalFrameViewLayoutContext *)(v7 + 336));
                    WebCore::LocalFrameView::setNeedsCompositingConfigurationUpdate((WebCore::LocalFrameView *)v7);
                  }
                }
              }
            }
            WebCore::LocalFrameView::setBaseBackgroundColor((WebCore::LocalFrameView *)v7, (const WebCore::Color *)&v35);
            v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 344) + 8) + 328) + 296);
            if (v17)
              v17 = *(_QWORD *)(v17 + 1944);
            if ((*(_QWORD *)(v7 + 384) & 0xFFFFFFFFFFFFLL) != 0
              && *(double *)((*(_QWORD *)(v7 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
              || v17 && (*(_BYTE *)(v17 + 20) & 0xF8) != 0
              || (v18 = *(_QWORD *)(v7 + 464)) != 0 && *(_QWORD *)(v18 + 8)
              || *(_DWORD *)(v7 + 488) && *(_BYTE *)(v7 + 478))
            {
              WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v7 + 336));
            }
            if ((v13 & 0x8000000000000) != 0)
            {
              v31 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, v16);
              }
            }
            v2 = *(_QWORD *)(a1 + 328);
          }
        }
        v5 = v6[11];
      }
      while (v5);
      v19 = *(_QWORD *)(v6[6] + 8);
      if (v19 == v2)
        break;
      v5 = v6[9];
      if (!v5)
      {
        if (v2)
        {
          while (1)
          {
            v24 = *(_QWORD *)(v19 + 56);
            if (!v24)
              break;
            v19 = *(_QWORD *)(v24 + 8);
            if (v19 == v2 || v19 == 0)
              break;
            v5 = *(_QWORD *)(v19 + 72);
            if (v5)
              goto LABEL_4;
          }
        }
        else
        {
          while (1)
          {
            v20 = *(_QWORD *)(v19 + 56);
            if (!v20)
              break;
            v19 = *(_QWORD *)(v20 + 8);
            if (!v19)
              break;
            v5 = *(_QWORD *)(v19 + 72);
            if (v5)
              goto LABEL_4;
          }
        }
        return;
      }
    }
  }
}

void WebCore::Style::BuilderState::colorFromPrimitiveValue(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  const WebCore::RenderStyle *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = a1[6];
  if (v4 && (*(_WORD *)(v4 + 30) & 1) != 0)
    v5 = a3;
  else
    v5 = 0;
  v6 = *(_WORD *)(a2 + 4) & 0x7F;
  if (v6 != 24)
  {
    v8 = (const WebCore::RenderStyle *)a1[2];
    if (v6 == 80)
    {
      v9 = *(unsigned __int16 *)(a2 + 8);
    }
    else
    {
      if (v6 == 78)
      {
        WebCore::CSSUnresolvedColor::createStyleColor(*(_QWORD *)(a2 + 8), a1[3], (uint64_t)v8, v5);
        return;
      }
      v9 = 0;
    }
    WebCore::Style::colorFromValueID((WebCore::Document *)a1[3], v8, v9, v5, a4);
    return;
  }
  v7 = *(_QWORD *)(a2 + 8);
  if ((v7 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)a4 = v7;
  *(_DWORD *)(a4 + 8) = 0;
}

void WebCore::RenderThemeIOS::systemColor(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t *a4@<X8>)
{
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int i;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 v73;
  __int128 v74;
  uint64_t v75;
  _BYTE v76[15];
  char v77;
  uint64_t *v78;

  if (a2 == 228 && (a3 & 1) != 0)
  {
    WebCore::RenderTheme::systemColor(a1, 228, a3, a4);
    return;
  }
  v10 = WebCore::RenderTheme::colorCache(a1, (void *)a3);
  v11 = *v10;
  if (*v10)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    v15 = v12 & (v14 ^ HIWORD(v14));
    v16 = *(_DWORD *)(v11 + 16 * v15);
    if (v16 != a2)
    {
      v37 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v37) & v12;
        v16 = *(_DWORD *)(v11 + 16 * v15);
        ++v37;
        if (v16 == a2)
          goto LABEL_6;
      }
      v15 = *(unsigned int *)(v11 - 4);
    }
LABEL_6:
    if (v15 != *(_DWORD *)(v11 - 4))
    {
      v28 = *(_QWORD *)(v11 + 16 * v15 + 8);
      *a4 = v28;
      if ((v28 & 0x8000000000000) != 0)
      {
        v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
      }
      return;
    }
  }
  v17 = a3;
  v18 = a3 & 4;
  v19 = v17 & 8;
  if ((byte_1ECE81F97 & 1) != 0)
  {
    if (qword_1ECE82000 && *(_DWORD *)(qword_1ECE82000 - 12))
    {
      v20 = 0;
      v21 = v19 >> 3;
      v22 = *(_DWORD *)(qword_1ECE82000 - 8);
      for (i = a2; ; i = v20 + v24)
      {
        v24 = i & v22;
        v25 = qword_1ECE82000 + 16 * (i & v22);
        v26 = *(unsigned __int8 *)(v25 + 4);
        if (*(_DWORD *)v25 == a2 && v26 == v18 >> 2)
        {
          v26 = v18 >> 2;
          if (*(unsigned __int8 *)(v25 + 5) == v21)
          {
            v31 = *(unsigned int *)(qword_1ECE82000 - 4);
            goto LABEL_26;
          }
        }
        if (!(*(_DWORD *)v25 | v26) && !*(_BYTE *)(v25 + 5))
          break;
        ++v20;
      }
      v31 = *(unsigned int *)(qword_1ECE82000 - 4);
      v25 = qword_1ECE82000 + 16 * v31;
LABEL_26:
      if (v25 != qword_1ECE82000 + 16 * v31)
      {
        v32 = *(_QWORD *)(v25 + 8);
        if ((v32 & 0x1000000000000) != 0)
        {
          *a4 = v32;
          if ((v32 & 0x8000000000000) != 0)
          {
            v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 + 1, v33));
          }
        }
        else if ((v32 & 0x8000000000000) != 0)
        {
          v35 = v32 & 0xFFFFFFFFFFFFLL;
          do
            v36 = __ldaxr((unsigned int *)v35);
          while (__stlxr(v36 + 1, (unsigned int *)v35));
          *a4 = v35 | ((unint64_t)*(unsigned __int8 *)(v25 + 15) << 56) | 0xD000000000000;
        }
        else
        {
          *a4 = *(_QWORD *)(v25 + 8) | 0x1105000000000000;
        }
        goto LABEL_53;
      }
LABEL_52:
      WebCore::RenderTheme::systemColor(a1, a2, a3, a4);
      goto LABEL_53;
    }
  }
  else
  {
    qword_1ECE82000 = 0;
    byte_1ECE81F97 = 1;
  }
  WebCore::LocalCurrentTraitCollection::LocalCurrentTraitCollection((WebCore::LocalCurrentTraitCollection *)v76, v18 != 0, v19 != 0);
  if ((byte_1ECE81F96 & 1) == 0)
  {
    qword_1ECE82030 = 0;
    qword_1ECE82028 = 0;
    byte_1ECE81F96 = 1;
  }
  v38 = atomic_load(&qword_1ECE81FF8);
  if (v38 != -1)
  {
    v72 = (uint64_t)&v77;
    v78 = &v72;
    std::__call_once(&qword_1ECE81FF8, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::cssValueSystemColorInformationList(void)::$_0 &&>>);
  }
  if (!HIDWORD(qword_1ECE82030))
  {
LABEL_51:
    LOBYTE(v72) = 0;
    WebCore::LocalCurrentTraitCollection::~LocalCurrentTraitCollection((WebCore::LocalCurrentTraitCollection *)v76);
    goto LABEL_52;
  }
  v39 = (unsigned __int16 *)qword_1ECE82028;
  v40 = 24 * HIDWORD(qword_1ECE82030);
  while (*v39 != a2)
  {
    v39 += 12;
    v40 -= 24;
    if (!v40)
      goto LABEL_51;
  }
  v74 = *(_OWORD *)v39;
  v75 = *((_QWORD *)v39 + 2);
  WebCore::systemColorFromCSSValueSystemColorInformation((PAL *)&v72, (uint64_t)&v74, v18 != 0);
  v60 = v73;
  WebCore::LocalCurrentTraitCollection::~LocalCurrentTraitCollection((WebCore::LocalCurrentTraitCollection *)v76);
  if (!v60)
    goto LABEL_52;
  v61 = v72;
  *a4 = v72;
  if ((v61 & 0x8000000000000) == 0)
    goto LABEL_82;
  v67 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFLL);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 + 1, v67));
  if (v73)
  {
LABEL_82:
    if ((v72 & 0x8000000000000) != 0)
    {
      v62 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v62);
        WTF::fastFree((WTF *)v62, v9);
      }
    }
  }
LABEL_53:
  v41 = *v10;
  if (*v10
    || (WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(v10),
        (v41 = *v10) != 0))
  {
    v42 = *(_DWORD *)(v41 - 8);
  }
  else
  {
    v42 = 0;
  }
  v43 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v44 = (v43 ^ (v43 >> 6)) + ~((v43 ^ (v43 >> 6)) << 11);
  v45 = v42 & (v44 ^ HIWORD(v44));
  v46 = v41 + 16 * v45;
  v47 = *(_DWORD *)v46;
  if (*(_DWORD *)v46)
  {
    v58 = 0;
    v59 = 1;
    while (v47 != a2)
    {
      if (v47 == -1)
        v58 = v46;
      v45 = (v45 + v59) & v42;
      v46 = v41 + 16 * v45;
      v47 = *(_DWORD *)v46;
      ++v59;
      if (!*(_DWORD *)v46)
      {
        if (v58)
        {
          *(_DWORD *)v58 = 0;
          *(_QWORD *)(v58 + 8) = 0x10000000000000;
          --*(_DWORD *)(*v10 - 16);
          v46 = v58;
        }
        goto LABEL_57;
      }
    }
    return;
  }
LABEL_57:
  *(_DWORD *)v46 = a2;
  v48 = *(_QWORD *)(v46 + 8);
  v49 = *a4;
  if ((v48 & 0x8000000000000) != 0)
  {
    if ((v49 & 0x8000000000000) == 0
      || *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v48 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v48) != HIBYTE(v49)
      || BYTE6(v48) != BYTE6(v49))
    {
      v69 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        atomic_store(1u, v69);
        WTF::fastFree((WTF *)v69, v9);
      }
      goto LABEL_62;
    }
  }
  else if (v48 != v49 || (v49 & 0x8000000000000) != 0)
  {
LABEL_62:
    v51 = *a4;
    *(_QWORD *)(v46 + 8) = *a4;
    if ((v51 & 0x8000000000000) != 0)
    {
      v65 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
    }
  }
  v52 = *v10;
  if (*v10)
    v53 = *(_DWORD *)(v52 - 12) + 1;
  else
    v53 = 1;
  *(_DWORD *)(v52 - 12) = v53;
  v54 = *v10;
  if (*v10)
    v55 = *(_DWORD *)(v54 - 12);
  else
    v55 = 0;
  v56 = (*(_DWORD *)(v54 - 16) + v55);
  v57 = *(unsigned int *)(v54 - 4);
  if (v57 <= 0x400)
  {
    if (3 * v57 > 4 * v56)
      return;
LABEL_85:
    WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(v10);
    return;
  }
  if (v57 <= 2 * v56)
    goto LABEL_85;
}

void sub_1941DD6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  WebCore::LocalCurrentTraitCollection::~LocalCurrentTraitCollection((WebCore::LocalCurrentTraitCollection *)va);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::RenderTheme::colorCache(uint64_t a1, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v17;
  unint64_t v19;
  unint64_t v21;
  unint64_t v23;
  unint64_t v25;
  unint64_t v27;
  unint64_t v29;
  unint64_t v31;
  unint64_t v33;
  unint64_t v35;
  unint64_t v37;
  unint64_t v39;
  unint64_t v41;
  unint64_t v43;
  unint64_t v45;
  unint64_t v47;
  unint64_t v49;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  unint64_t v130;

  v2 = a2 & 0xFE;
  v4 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3
    || (WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::expand((uint64_t *)(a1 + 8), 0), (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = 9 * ((~(v2 << 15) + v2) ^ ((~(v2 << 15) + v2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (_QWORD *)(v3 + 176 * v8);
  v10 = *(unsigned __int8 *)v9;
  if (v10 != 255)
  {
    v58 = 0;
    v59 = 1;
    while (v10 != v2)
    {
      if (v10 == 254)
        v58 = v9;
      v8 = (v8 + v59) & v5;
      v9 = (_QWORD *)(v3 + 176 * v8);
      v10 = *(unsigned __int8 *)v9;
      ++v59;
      if (v10 == 255)
      {
        if (v58)
        {
          *(_BYTE *)v58 = -1;
          *(_OWORD *)(v58 + 1) = 0u;
          *(_OWORD *)(v58 + 3) = 0u;
          *(_OWORD *)(v58 + 5) = 0u;
          *(_OWORD *)(v58 + 7) = 0u;
          *(_OWORD *)(v58 + 9) = 0u;
          *(_OWORD *)(v58 + 11) = 0u;
          *(_OWORD *)(v58 + 13) = 0u;
          *(_OWORD *)(v58 + 15) = 0u;
          *(_OWORD *)(v58 + 17) = 0u;
          *(_OWORD *)(v58 + 19) = 0u;
          v58[21] = 0;
          --*(_DWORD *)(*v4 - 16);
          v9 = v58;
        }
        goto LABEL_5;
      }
    }
    return v9 + 1;
  }
LABEL_5:
  *(_BYTE *)v9 = v2;
  v130 = 0;
  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  v11 = (_DWORD *)v9[1];
  v9[1] = 0;
  if (v11)
    WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(v11, a2);
  v12 = v9[2];
  if ((v12 & 0x8000000000000) != 0)
  {
    v60 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, a2);
    }
  }
  else if (!v12)
  {
    goto LABEL_10;
  }
  v9[2] = *((_QWORD *)&v120 + 1);
  *((_QWORD *)&v120 + 1) = 0;
  v12 = v121;
LABEL_10:
  v13 = v9[3];
  if ((v13 & 0x8000000000000) != 0)
  {
    v63 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    if ((v12 & 0x8000000000000) == 0
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v13) != HIBYTE(v12)
      || BYTE6(v13) != BYTE6(v12))
    {
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        atomic_store(1u, v63);
        WTF::fastFree((WTF *)v63, a2);
      }
      goto LABEL_15;
    }
  }
  else if (v13 != v12 || (v12 & 0x8000000000000) != 0)
  {
LABEL_15:
    v9[3] = v121;
    *(_QWORD *)&v121 = 0;
  }
  v15 = v9[4];
  if ((v15 & 0x8000000000000) != 0)
  {
    v66 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v121 + 1) & 0x8000000000000) == 0
      || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v121 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v121 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v121 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v121 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v15) != HIBYTE(*((_QWORD *)&v121 + 1))
      || BYTE6(v15) != BYTE14(v121))
    {
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        atomic_store(1u, v66);
        WTF::fastFree((WTF *)v66, a2);
      }
      goto LABEL_21;
    }
  }
  else if (v15 != *((_QWORD *)&v121 + 1) || (*((_QWORD *)&v121 + 1) & 0x8000000000000) != 0)
  {
LABEL_21:
    v9[4] = *((_QWORD *)&v121 + 1);
    *((_QWORD *)&v121 + 1) = 0;
  }
  v17 = v9[5];
  if ((v17 & 0x8000000000000) != 0)
  {
    v69 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    if ((v122 & 0x8000000000000) == 0
      || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v122 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v122 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v122 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v17 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v122 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v17) != BYTE7(v122)
      || BYTE6(v17) != BYTE6(v122))
    {
      do
      {
        v70 = __ldaxr(v69);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v69));
      if (!v71)
      {
        atomic_store(1u, v69);
        WTF::fastFree((WTF *)v69, a2);
      }
      goto LABEL_27;
    }
  }
  else if (v17 != (_QWORD)v122 || (v122 & 0x8000000000000) != 0)
  {
LABEL_27:
    v9[5] = v122;
    *(_QWORD *)&v122 = 0;
  }
  v19 = v9[6];
  if ((v19 & 0x8000000000000) != 0)
  {
    v72 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v122 + 1) & 0x8000000000000) == 0
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v122 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v122 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v122 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v122 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v19) != HIBYTE(*((_QWORD *)&v122 + 1))
      || BYTE6(v19) != BYTE14(v122))
    {
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, a2);
      }
      goto LABEL_33;
    }
  }
  else if (v19 != *((_QWORD *)&v122 + 1) || (*((_QWORD *)&v122 + 1) & 0x8000000000000) != 0)
  {
LABEL_33:
    v9[6] = *((_QWORD *)&v122 + 1);
    *((_QWORD *)&v122 + 1) = 0;
  }
  v21 = v9[7];
  if ((v21 & 0x8000000000000) != 0)
  {
    v75 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if ((v123 & 0x8000000000000) == 0
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v123 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v123 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v123 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v123 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v21) != BYTE7(v123)
      || BYTE6(v21) != BYTE6(v123))
    {
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        atomic_store(1u, v75);
        WTF::fastFree((WTF *)v75, a2);
      }
      goto LABEL_39;
    }
  }
  else if (v21 != (_QWORD)v123 || (v123 & 0x8000000000000) != 0)
  {
LABEL_39:
    v9[7] = v123;
    *(_QWORD *)&v123 = 0;
  }
  v23 = v9[8];
  if ((v23 & 0x8000000000000) != 0)
  {
    v78 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v123 + 1) & 0x8000000000000) == 0
      || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v123 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v123 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v123 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v23 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v123 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v23) != HIBYTE(*((_QWORD *)&v123 + 1))
      || BYTE6(v23) != BYTE14(v123))
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        WTF::fastFree((WTF *)v78, a2);
      }
      goto LABEL_45;
    }
  }
  else if (v23 != *((_QWORD *)&v123 + 1) || (*((_QWORD *)&v123 + 1) & 0x8000000000000) != 0)
  {
LABEL_45:
    v9[8] = *((_QWORD *)&v123 + 1);
    *((_QWORD *)&v123 + 1) = 0;
  }
  v25 = v9[9];
  if ((v25 & 0x8000000000000) != 0)
  {
    v81 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    if ((v124 & 0x8000000000000) == 0
      || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v124 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v124 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v124 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v124 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v25) != BYTE7(v124)
      || BYTE6(v25) != BYTE6(v124))
    {
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
      {
        atomic_store(1u, v81);
        WTF::fastFree((WTF *)v81, a2);
      }
      goto LABEL_51;
    }
  }
  else if (v25 != (_QWORD)v124 || (v124 & 0x8000000000000) != 0)
  {
LABEL_51:
    v9[9] = v124;
    *(_QWORD *)&v124 = 0;
  }
  v27 = v9[10];
  if ((v27 & 0x8000000000000) != 0)
  {
    v84 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v124 + 1) & 0x8000000000000) == 0
      || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v124 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v124 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v124 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v27 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v124 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v27) != HIBYTE(*((_QWORD *)&v124 + 1))
      || BYTE6(v27) != BYTE14(v124))
    {
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        atomic_store(1u, v84);
        WTF::fastFree((WTF *)v84, a2);
      }
      goto LABEL_57;
    }
  }
  else if (v27 != *((_QWORD *)&v124 + 1) || (*((_QWORD *)&v124 + 1) & 0x8000000000000) != 0)
  {
LABEL_57:
    v9[10] = *((_QWORD *)&v124 + 1);
    *((_QWORD *)&v124 + 1) = 0;
  }
  v29 = v9[11];
  if ((v29 & 0x8000000000000) != 0)
  {
    v87 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
    if ((v125 & 0x8000000000000) == 0
      || *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v125 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v125 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v125 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v29 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v125 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v29) != BYTE7(v125)
      || BYTE6(v29) != BYTE6(v125))
    {
      do
      {
        v88 = __ldaxr(v87);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, v87));
      if (!v89)
      {
        atomic_store(1u, v87);
        WTF::fastFree((WTF *)v87, a2);
      }
      goto LABEL_63;
    }
  }
  else if (v29 != (_QWORD)v125 || (v125 & 0x8000000000000) != 0)
  {
LABEL_63:
    v9[11] = v125;
    *(_QWORD *)&v125 = 0;
  }
  v31 = v9[12];
  if ((v31 & 0x8000000000000) != 0)
  {
    v90 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v125 + 1) & 0x8000000000000) == 0
      || *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v125 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v125 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v125 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v31 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v125 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v31) != HIBYTE(*((_QWORD *)&v125 + 1))
      || BYTE6(v31) != BYTE14(v125))
    {
      do
      {
        v91 = __ldaxr(v90);
        v92 = v91 - 1;
      }
      while (__stlxr(v92, v90));
      if (!v92)
      {
        atomic_store(1u, v90);
        WTF::fastFree((WTF *)v90, a2);
      }
      goto LABEL_69;
    }
  }
  else if (v31 != *((_QWORD *)&v125 + 1) || (*((_QWORD *)&v125 + 1) & 0x8000000000000) != 0)
  {
LABEL_69:
    v9[12] = *((_QWORD *)&v125 + 1);
    *((_QWORD *)&v125 + 1) = 0;
  }
  v33 = v9[13];
  if ((v33 & 0x8000000000000) != 0)
  {
    v93 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
    if ((v126 & 0x8000000000000) == 0
      || *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v126 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v126 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v126 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v33 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v126 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v33) != BYTE7(v126)
      || BYTE6(v33) != BYTE6(v126))
    {
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        atomic_store(1u, v93);
        WTF::fastFree((WTF *)v93, a2);
      }
      goto LABEL_75;
    }
  }
  else if (v33 != (_QWORD)v126 || (v126 & 0x8000000000000) != 0)
  {
LABEL_75:
    v9[13] = v126;
    *(_QWORD *)&v126 = 0;
  }
  v35 = v9[14];
  if ((v35 & 0x8000000000000) != 0)
  {
    v96 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v126 + 1) & 0x8000000000000) == 0
      || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v126 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v126 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v126 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v35 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v126 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v35) != HIBYTE(*((_QWORD *)&v126 + 1))
      || BYTE6(v35) != BYTE14(v126))
    {
      do
      {
        v97 = __ldaxr(v96);
        v98 = v97 - 1;
      }
      while (__stlxr(v98, v96));
      if (!v98)
      {
        atomic_store(1u, v96);
        WTF::fastFree((WTF *)v96, a2);
      }
      goto LABEL_81;
    }
  }
  else if (v35 != *((_QWORD *)&v126 + 1) || (*((_QWORD *)&v126 + 1) & 0x8000000000000) != 0)
  {
LABEL_81:
    v9[14] = *((_QWORD *)&v126 + 1);
    *((_QWORD *)&v126 + 1) = 0;
  }
  v37 = v9[15];
  if ((v37 & 0x8000000000000) != 0)
  {
    v99 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
    if ((v127 & 0x8000000000000) == 0
      || *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v37) != BYTE7(v127)
      || BYTE6(v37) != BYTE6(v127))
    {
      do
      {
        v100 = __ldaxr(v99);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, v99));
      if (!v101)
      {
        atomic_store(1u, v99);
        WTF::fastFree((WTF *)v99, a2);
      }
      goto LABEL_87;
    }
  }
  else if (v37 != (_QWORD)v127 || (v127 & 0x8000000000000) != 0)
  {
LABEL_87:
    v9[15] = v127;
    *(_QWORD *)&v127 = 0;
  }
  v39 = v9[16];
  if ((v39 & 0x8000000000000) != 0)
  {
    v102 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v127 + 1) & 0x8000000000000) == 0
      || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v127 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v127 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v127 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v127 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v39) != HIBYTE(*((_QWORD *)&v127 + 1))
      || BYTE6(v39) != BYTE14(v127))
    {
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        atomic_store(1u, v102);
        WTF::fastFree((WTF *)v102, a2);
      }
      goto LABEL_93;
    }
  }
  else if (v39 != *((_QWORD *)&v127 + 1) || (*((_QWORD *)&v127 + 1) & 0x8000000000000) != 0)
  {
LABEL_93:
    v9[16] = *((_QWORD *)&v127 + 1);
    *((_QWORD *)&v127 + 1) = 0;
  }
  v41 = v9[17];
  if ((v41 & 0x8000000000000) != 0)
  {
    v105 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
    if ((v128 & 0x8000000000000) == 0
      || *(float *)((v41 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v41 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v41 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v41 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v41) != BYTE7(v128)
      || BYTE6(v41) != BYTE6(v128))
    {
      do
      {
        v106 = __ldaxr(v105);
        v107 = v106 - 1;
      }
      while (__stlxr(v107, v105));
      if (!v107)
      {
        atomic_store(1u, v105);
        WTF::fastFree((WTF *)v105, a2);
      }
      goto LABEL_99;
    }
  }
  else if (v41 != (_QWORD)v128 || (v128 & 0x8000000000000) != 0)
  {
LABEL_99:
    v9[17] = v128;
    *(_QWORD *)&v128 = 0;
  }
  v43 = v9[18];
  if ((v43 & 0x8000000000000) != 0)
  {
    v108 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v128 + 1) & 0x8000000000000) == 0
      || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v128 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v128 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v128 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v43 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v128 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v43) != HIBYTE(*((_QWORD *)&v128 + 1))
      || BYTE6(v43) != BYTE14(v128))
    {
      do
      {
        v109 = __ldaxr(v108);
        v110 = v109 - 1;
      }
      while (__stlxr(v110, v108));
      if (!v110)
      {
        atomic_store(1u, v108);
        WTF::fastFree((WTF *)v108, a2);
      }
      goto LABEL_105;
    }
  }
  else if (v43 != *((_QWORD *)&v128 + 1) || (*((_QWORD *)&v128 + 1) & 0x8000000000000) != 0)
  {
LABEL_105:
    v9[18] = *((_QWORD *)&v128 + 1);
    *((_QWORD *)&v128 + 1) = 0;
  }
  v45 = v9[19];
  if ((v45 & 0x8000000000000) != 0)
  {
    v111 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
    if ((v129 & 0x8000000000000) == 0
      || *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v129 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v129 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v129 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v45 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v129 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v45) != BYTE7(v129)
      || BYTE6(v45) != BYTE6(v129))
    {
      do
      {
        v112 = __ldaxr(v111);
        v113 = v112 - 1;
      }
      while (__stlxr(v113, v111));
      if (!v113)
      {
        atomic_store(1u, v111);
        WTF::fastFree((WTF *)v111, a2);
      }
      goto LABEL_111;
    }
  }
  else if (v45 != (_QWORD)v129 || (v129 & 0x8000000000000) != 0)
  {
LABEL_111:
    v9[19] = v129;
    *(_QWORD *)&v129 = 0;
  }
  v47 = v9[20];
  if ((v47 & 0x8000000000000) != 0)
  {
    v114 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
    if ((*((_QWORD *)&v129 + 1) & 0x8000000000000) == 0
      || *(float *)((v47 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v47 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v47 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v47 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((*((_QWORD *)&v129 + 1) & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v47) != HIBYTE(*((_QWORD *)&v129 + 1))
      || BYTE6(v47) != BYTE14(v129))
    {
      do
      {
        v115 = __ldaxr(v114);
        v116 = v115 - 1;
      }
      while (__stlxr(v116, v114));
      if (!v116)
      {
        atomic_store(1u, v114);
        WTF::fastFree((WTF *)v114, a2);
      }
      goto LABEL_117;
    }
  }
  else if (v47 != *((_QWORD *)&v129 + 1) || (*((_QWORD *)&v129 + 1) & 0x8000000000000) != 0)
  {
LABEL_117:
    v9[20] = *((_QWORD *)&v129 + 1);
    *((_QWORD *)&v129 + 1) = 0;
  }
  v49 = v9[21];
  if ((v49 & 0x8000000000000) == 0)
  {
    if (v49 == v130 && (v130 & 0x8000000000000) == 0)
      goto LABEL_124;
    goto LABEL_123;
  }
  v117 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
  if ((v130 & 0x8000000000000) == 0
    || *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 4)
    || *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 8)
    || *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0xC)
    || *(float *)((v49 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0x10)
    || HIBYTE(v49) != HIBYTE(v130)
    || BYTE6(v49) != BYTE6(v130))
  {
    do
    {
      v118 = __ldaxr(v117);
      v119 = v118 - 1;
    }
    while (__stlxr(v119, v117));
    if (!v119)
    {
      atomic_store(1u, v117);
      WTF::fastFree((WTF *)v117, a2);
    }
LABEL_123:
    v9[21] = v130;
    v130 = 0;
  }
LABEL_124:
  WebCore::RenderTheme::ColorCache::~ColorCache((WebCore::RenderTheme::ColorCache *)&v120, a2);
  v51 = *v4;
  if (*v4)
    v52 = *(_DWORD *)(v51 - 12) + 1;
  else
    v52 = 1;
  *(_DWORD *)(v51 - 12) = v52;
  v53 = *v4;
  if (*v4)
    v54 = *(_DWORD *)(v53 - 12);
  else
    v54 = 0;
  v55 = (*(_DWORD *)(v53 - 16) + v54);
  v56 = *(unsigned int *)(v53 - 4);
  if (v56 > 0x400)
  {
    if (v56 > 2 * v55)
      return v9 + 1;
    goto LABEL_130;
  }
  if (3 * v56 <= 4 * v55)
LABEL_130:
    v9 = WTF::HashTable<unsigned char,WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned char,WebCore::RenderTheme::ColorCache>>,WTF::DefaultHash<unsigned char>,WTF::HashMap<unsigned char,WebCore::RenderTheme::ColorCache,WTF::DefaultHash<unsigned char>,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>,WTF::HashTraits<WebCore::RenderTheme::ColorCache>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned char>>::expand(v4, v9);
  return v9 + 1;
}

